#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: DEBUG_DamageUI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DEBUG_DamageUI.DEBUG_DamageUI_C.ExecuteUbergraph_DEBUG_DamageUI
// 0x0010 (0x0010 - 0x0000)
struct DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_OnTick__delta_ImplicitCast;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI) == 0x000008, "Wrong alignment on DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI");
static_assert(sizeof(DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI) == 0x000010, "Wrong size on DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI");
static_assert(offsetof(DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI, EntryPoint) == 0x000000, "Member 'DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI::EntryPoint' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI, CallFunc_OnTick__delta_ImplicitCast) == 0x000008, "Member 'DEBUG_DamageUI_C_ExecuteUbergraph_DEBUG_DamageUI::CallFunc_OnTick__delta_ImplicitCast' has a wrong offset!");

// Function DEBUG_DamageUI.DEBUG_DamageUI_C.Fire
// 0x0060 (0x0060 - 0x0000)
struct DEBUG_DamageUI_C_Fire final
{
public:
	double                                        _hp_damage;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _armor_damage;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _fire_force;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBUG_DamageUI_C_Fire) == 0x000008, "Wrong alignment on DEBUG_DamageUI_C_Fire");
static_assert(sizeof(DEBUG_DamageUI_C_Fire) == 0x000060, "Wrong size on DEBUG_DamageUI_C_Fire");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, _hp_damage) == 0x000000, "Member 'DEBUG_DamageUI_C_Fire::_hp_damage' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, _armor_damage) == 0x000008, "Member 'DEBUG_DamageUI_C_Fire::_armor_damage' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, _fire_force) == 0x000010, "Member 'DEBUG_DamageUI_C_Fire::_fire_force' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, CallFunc_BreakVector_X) == 0x000028, "Member 'DEBUG_DamageUI_C_Fire::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, CallFunc_BreakVector_Y) == 0x000030, "Member 'DEBUG_DamageUI_C_Fire::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, CallFunc_BreakVector_Z) == 0x000038, "Member 'DEBUG_DamageUI_C_Fire::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, CallFunc_FMax_ReturnValue) == 0x000040, "Member 'DEBUG_DamageUI_C_Fire::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_Fire, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'DEBUG_DamageUI_C_Fire::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function DEBUG_DamageUI.DEBUG_DamageUI_C.OnTick
// 0x01A0 (0x01A0 - 0x0000)
struct DEBUG_DamageUI_C_OnTick final
{
public:
	double                                        _delta;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLifeSpan_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3721[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0058(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_ClampSizeMax_ReturnValue;          // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeColor_A_ImplicitCast;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBUG_DamageUI_C_OnTick) == 0x000008, "Wrong alignment on DEBUG_DamageUI_C_OnTick");
static_assert(sizeof(DEBUG_DamageUI_C_OnTick) == 0x0001A0, "Wrong size on DEBUG_DamageUI_C_OnTick");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, _delta) == 0x000000, "Member 'DEBUG_DamageUI_C_OnTick::_delta' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, Delta) == 0x000008, "Member 'DEBUG_DamageUI_C_OnTick::Delta' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_GetLifeSpan_ReturnValue) == 0x000010, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_GetLifeSpan_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000020, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_MakeColor_ReturnValue) == 0x000030, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000058, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000140, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Add_VectorVector_ReturnValue) == 0x000158, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Vector_ClampSizeMax_ReturnValue) == 0x000170, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Vector_ClampSizeMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000188, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000190, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_OnTick, CallFunc_MakeColor_A_ImplicitCast) == 0x000198, "Member 'DEBUG_DamageUI_C_OnTick::CallFunc_MakeColor_A_ImplicitCast' has a wrong offset!");

// Function DEBUG_DamageUI.DEBUG_DamageUI_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DEBUG_DamageUI_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBUG_DamageUI_C_ReceiveTick) == 0x000004, "Wrong alignment on DEBUG_DamageUI_C_ReceiveTick");
static_assert(sizeof(DEBUG_DamageUI_C_ReceiveTick) == 0x000004, "Wrong size on DEBUG_DamageUI_C_ReceiveTick");
static_assert(offsetof(DEBUG_DamageUI_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'DEBUG_DamageUI_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function DEBUG_DamageUI.DEBUG_DamageUI_C.SetDamage
// 0x0028 (0x0028 - 0x0000)
struct DEBUG_DamageUI_C_SetDamage final
{
public:
	double                                        _hp_damage;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _armor_damage;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUI_DEBUG_Damage_C*                     K2Node_DynamicCast_AsUI_DEBUG_Damage;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEBUG_DamageUI_C_SetDamage) == 0x000008, "Wrong alignment on DEBUG_DamageUI_C_SetDamage");
static_assert(sizeof(DEBUG_DamageUI_C_SetDamage) == 0x000028, "Wrong size on DEBUG_DamageUI_C_SetDamage");
static_assert(offsetof(DEBUG_DamageUI_C_SetDamage, _hp_damage) == 0x000000, "Member 'DEBUG_DamageUI_C_SetDamage::_hp_damage' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_SetDamage, _armor_damage) == 0x000008, "Member 'DEBUG_DamageUI_C_SetDamage::_armor_damage' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_SetDamage, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000010, "Member 'DEBUG_DamageUI_C_SetDamage::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_SetDamage, K2Node_DynamicCast_AsUI_DEBUG_Damage) == 0x000018, "Member 'DEBUG_DamageUI_C_SetDamage::K2Node_DynamicCast_AsUI_DEBUG_Damage' has a wrong offset!");
static_assert(offsetof(DEBUG_DamageUI_C_SetDamage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'DEBUG_DamageUI_C_SetDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

