#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_OptionKeyBind

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Stigma_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_OptionKeyBind.Ctrl_OptionKeyBind_C
// 0x0058 (0x0640 - 0x05E8)
class UCtrl_OptionKeyBind_C final : public UCtrl_OptionKeyBindBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                BTN_Delete;                                        // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_Duplicate;                                     // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_Hover_Background;                              // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   KeyName;                                           // 0x0610(0x0018)(Edit, BlueprintVisible)
	class FName                                   MappingName;                                       // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_InputKeyGuide_C*                    Popup_Guide;                                       // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUI_Tooltip_OnlyKeys_C*                 ToolTip;                                           // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Ctrl_OptionKeyBind_Button_73_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void Construct();
	void ExecuteUbergraph_Ctrl_OptionKeyBind(int32 EntryPoint);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	class UWidget* OnGetToolTip_KeyBind();
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	bool OnSynchronizeProperties();
	ESlateVisibility OnVisibility_Duplicate();
	void Popup_Input_Guide();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateUI(class UCtrl_OptionKeyBindBase* _key_binder, const struct FKeyMapping& _mapping);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_OptionKeyBind_C">();
	}
	static class UCtrl_OptionKeyBind_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_OptionKeyBind_C>();
	}
};
static_assert(alignof(UCtrl_OptionKeyBind_C) == 0x000008, "Wrong alignment on UCtrl_OptionKeyBind_C");
static_assert(sizeof(UCtrl_OptionKeyBind_C) == 0x000640, "Wrong size on UCtrl_OptionKeyBind_C");
static_assert(offsetof(UCtrl_OptionKeyBind_C, UberGraphFrame) == 0x0005E8, "Member 'UCtrl_OptionKeyBind_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, BTN_Delete) == 0x0005F0, "Member 'UCtrl_OptionKeyBind_C::BTN_Delete' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, CanvasPanel_0) == 0x0005F8, "Member 'UCtrl_OptionKeyBind_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, IMG_Duplicate) == 0x000600, "Member 'UCtrl_OptionKeyBind_C::IMG_Duplicate' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, IMG_Hover_Background) == 0x000608, "Member 'UCtrl_OptionKeyBind_C::IMG_Hover_Background' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, KeyName) == 0x000610, "Member 'UCtrl_OptionKeyBind_C::KeyName' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, MappingName) == 0x000628, "Member 'UCtrl_OptionKeyBind_C::MappingName' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, Popup_Guide) == 0x000630, "Member 'UCtrl_OptionKeyBind_C::Popup_Guide' has a wrong offset!");
static_assert(offsetof(UCtrl_OptionKeyBind_C, ToolTip) == 0x000638, "Member 'UCtrl_OptionKeyBind_C::ToolTip' has a wrong offset!");

}

