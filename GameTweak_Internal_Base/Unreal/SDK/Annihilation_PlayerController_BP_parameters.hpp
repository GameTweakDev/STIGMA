#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Annihilation_PlayerController_BP

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "InputCore_structs.hpp"
#include "BPGLib_structs.hpp"
#include "EnhancedInput_structs.hpp"


namespace SDK::Params
{

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.ExecuteUbergraph_Annihilation_PlayerController_BP
// 0x0118 (0x0118 - 0x0000)
struct Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36CA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKey                                   K2Node_InputDebugKeyEvent_Key_1;                   // 0x0008(0x0018)(HasGetValueTypeHash)
	struct FInputActionValue                      K2Node_InputDebugKeyEvent_ActionValue_1;           // 0x0020(0x0020)(NoDestructor)
	struct FInputActionValue                      Temp_struct_Variable;                              // 0x0040(0x0020)(NoDestructor)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0060(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputDebugKeyEvent_Key;                     // 0x0078(0x0018)(HasGetValueTypeHash)
	struct FInputActionValue                      K2Node_InputDebugKeyEvent_ActionValue;             // 0x0090(0x0020)(NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36CB[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRoundStartNotify                      K2Node_Event__notify;                              // 0x00B4(0x000C)(ConstParm, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36CC[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKey                                   K2Node_InputDebugKeyEvent_Key_2;                   // 0x00C8(0x0018)(HasGetValueTypeHash)
	struct FInputActionValue                      K2Node_InputDebugKeyEvent_ActionValue_2;           // 0x00E0(0x0020)(NoDestructor)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABattleGameModeBase*                    K2Node_DynamicCast_AsBattle_Game_Mode_Base;        // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP");
static_assert(sizeof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP) == 0x000118, "Wrong size on Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, EntryPoint) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_InputDebugKeyEvent_Key_1) == 0x000008, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_InputDebugKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_InputDebugKeyEvent_ActionValue_1) == 0x000020, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_InputDebugKeyEvent_ActionValue_1' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, Temp_struct_Variable) == 0x000040, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, Temp_struct_Variable_1) == 0x000060, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_InputDebugKeyEvent_Key) == 0x000078, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_InputDebugKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_InputDebugKeyEvent_ActionValue) == 0x000090, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_InputDebugKeyEvent_ActionValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, Temp_bool_Has_Been_Initd_Variable) == 0x0000B0, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_Event__notify) == 0x0000B4, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_Event__notify' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, Temp_bool_IsClosed_Variable) == 0x0000C0, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_InputDebugKeyEvent_Key_2) == 0x0000C8, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_InputDebugKeyEvent_Key_2' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_InputDebugKeyEvent_ActionValue_2) == 0x0000E0, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_InputDebugKeyEvent_ActionValue_2' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, CallFunc_GetGameMode_ReturnValue) == 0x000100, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_DynamicCast_AsBattle_Game_Mode_Base) == 0x000108, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_DynamicCast_AsBattle_Game_Mode_Base' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'Annihilation_PlayerController_BP_C_ExecuteUbergraph_Annihilation_PlayerController_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0
// 0x0038 (0x0038 - 0x0000)
struct Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FInputActionValue                      ActionValue;                                       // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0");
static_assert(sizeof(Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0) == 0x000038, "Wrong size on Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0");
static_assert(offsetof(Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0, Key) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0::Key' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0, ActionValue) == 0x000018, "Member 'Annihilation_PlayerController_BP_C_InpActEvt_BackSpace_K2Node_InputDebugKeyEvent_0::ActionValue' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1
// 0x0038 (0x0038 - 0x0000)
struct Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FInputActionValue                      ActionValue;                                       // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1");
static_assert(sizeof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1) == 0x000038, "Wrong size on Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1");
static_assert(offsetof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1, Key) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1::Key' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1, ActionValue) == 0x000018, "Member 'Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_1::ActionValue' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2
// 0x0038 (0x0038 - 0x0000)
struct Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FInputActionValue                      ActionValue;                                       // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2");
static_assert(sizeof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2) == 0x000038, "Wrong size on Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2");
static_assert(offsetof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2, Key) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2::Key' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2, ActionValue) == 0x000018, "Member 'Annihilation_PlayerController_BP_C_InpActEvt_Ctrl_U_K2Node_InputDebugKeyEvent_2::ActionValue' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.OnACK_SetCharacterSetting
// 0x0050 (0x0050 - 0x0000)
struct Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36CD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FApiResult                             _ack;                                              // 0x0004(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_36CE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FNetReply                              ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm)
	struct FNetReply                              CallFunc_NetReplyFromCode_ReturnValue;             // 0x0030(0x0020)()
};
static_assert(alignof(Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting");
static_assert(sizeof(Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting) == 0x000050, "Wrong size on Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting, _rcode) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting::_rcode' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting, _ack) == 0x000004, "Member 'Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting::_ack' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting, ReturnValue) == 0x000010, "Member 'Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting::ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting, CallFunc_NetReplyFromCode_ReturnValue) == 0x000030, "Member 'Annihilation_PlayerController_BP_C_OnACK_SetCharacterSetting::CallFunc_NetReplyFromCode_ReturnValue' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.OnChangedArmory
// 0x0020 (0x0020 - 0x0000)
struct Annihilation_PlayerController_BP_C_OnChangedArmory final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36CF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         _idx_slot;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_OnChangedArmory) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_OnChangedArmory");
static_assert(sizeof(Annihilation_PlayerController_BP_C_OnChangedArmory) == 0x000020, "Wrong size on Annihilation_PlayerController_BP_C_OnChangedArmory");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnChangedArmory, _chara_type) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_OnChangedArmory::_chara_type' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnChangedArmory, _item_id) == 0x000008, "Member 'Annihilation_PlayerController_BP_C_OnChangedArmory::_item_id' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnChangedArmory, _idx_slot) == 0x000018, "Member 'Annihilation_PlayerController_BP_C_OnChangedArmory::_idx_slot' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.OnRoundStart
// 0x0020 (0x0020 - 0x0000)
struct Annihilation_PlayerController_BP_C_OnRoundStart final
{
public:
	struct FRoundStartNotify                      Notify;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	uint8                                         Pad_36D0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class AStigmaPlayerController*                CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnnihilation_Reward_C*                 CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_OnRoundStart) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_OnRoundStart");
static_assert(sizeof(Annihilation_PlayerController_BP_C_OnRoundStart) == 0x000020, "Wrong size on Annihilation_PlayerController_BP_C_OnRoundStart");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnRoundStart, Notify) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_OnRoundStart::Notify' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnRoundStart, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000010, "Member 'Annihilation_PlayerController_BP_C_OnRoundStart::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnRoundStart, CallFunc_Create_ReturnValue) == 0x000018, "Member 'Annihilation_PlayerController_BP_C_OnRoundStart::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.OnShowRoundStart
// 0x000C (0x000C - 0x0000)
struct Annihilation_PlayerController_BP_C_OnShowRoundStart final
{
public:
	struct FRoundStartNotify                      _notify;                                           // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_OnShowRoundStart) == 0x000004, "Wrong alignment on Annihilation_PlayerController_BP_C_OnShowRoundStart");
static_assert(sizeof(Annihilation_PlayerController_BP_C_OnShowRoundStart) == 0x00000C, "Wrong size on Annihilation_PlayerController_BP_C_OnShowRoundStart");
static_assert(offsetof(Annihilation_PlayerController_BP_C_OnShowRoundStart, _notify) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_OnShowRoundStart::_notify' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.PopupArmory
// 0x0098 (0x0098 - 0x0000)
struct Annihilation_PlayerController_BP_C_PopupArmory final
{
public:
	class AAnnihilation_GameState*                Game_state;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AAnnihilation_PlayerState*              Ps;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UPopup_Armory_C*                        Dlg;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBattlePhaseElapsedSec_ReturnValue;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D1[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class AStigmaPlayerController*                CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D2[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopup_Armory_C*                        CallFunc_Create_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EBattleModePhase                              CallFunc_GetBattlePhase_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D3[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AAnnihilation_PlayerState*              K2Node_DynamicCast_AsAnnihilation_Player_State;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D4[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAnnihilation_GameState*                K2Node_DynamicCast_AsAnnihilation_Game_State;      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D5[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0064(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECharaType _chara_type, const struct FItemID& _item_id, int32 _idx_slot)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D6[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             CallFunc_DoModal_ReturnValue;                      // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAPlayer_ReturnValue;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_PopupArmory) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_PopupArmory");
static_assert(sizeof(Annihilation_PlayerController_BP_C_PopupArmory) == 0x000098, "Wrong size on Annihilation_PlayerController_BP_C_PopupArmory");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, Game_state) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::Game_state' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, Ps) == 0x000008, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::Ps' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, Dlg) == 0x000010, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::Dlg' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_GetBattlePhaseElapsedSec_ReturnValue) == 0x000018, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_GetBattlePhaseElapsedSec_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000020, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_BooleanOR_ReturnValue) == 0x000028, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_Create_ReturnValue) == 0x000030, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_GetBattlePhase_ReturnValue) == 0x000038, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_GetBattlePhase_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_DynamicCast_AsAnnihilation_Player_State) == 0x000040, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_DynamicCast_AsAnnihilation_Player_State' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_SwitchEnum_CmpSuccess) == 0x000049, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_GetGameState_ReturnValue) == 0x000050, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_DynamicCast_AsAnnihilation_Game_State) == 0x000058, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_DynamicCast_AsAnnihilation_Game_State' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, K2Node_CreateDelegate_OutputDelegate_1) == 0x000074, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_DoModal_ReturnValue) == 0x000088, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_DoModal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_PopupArmory, CallFunc_IsAPlayer_ReturnValue) == 0x000090, "Member 'Annihilation_PlayerController_BP_C_PopupArmory::CallFunc_IsAPlayer_ReturnValue' has a wrong offset!");

// Function Annihilation_PlayerController_BP.Annihilation_PlayerController_BP_C.UpdateCharaSelecting
// 0x0010 (0x0010 - 0x0000)
struct Annihilation_PlayerController_BP_C_UpdateCharaSelecting final
{
public:
	class ABattlePlayerState*                     Player_state;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABattlePlayerState*                     Ps;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Annihilation_PlayerController_BP_C_UpdateCharaSelecting) == 0x000008, "Wrong alignment on Annihilation_PlayerController_BP_C_UpdateCharaSelecting");
static_assert(sizeof(Annihilation_PlayerController_BP_C_UpdateCharaSelecting) == 0x000010, "Wrong size on Annihilation_PlayerController_BP_C_UpdateCharaSelecting");
static_assert(offsetof(Annihilation_PlayerController_BP_C_UpdateCharaSelecting, Player_state) == 0x000000, "Member 'Annihilation_PlayerController_BP_C_UpdateCharaSelecting::Player_state' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_BP_C_UpdateCharaSelecting, Ps) == 0x000008, "Member 'Annihilation_PlayerController_BP_C_UpdateCharaSelecting::Ps' has a wrong offset!");

}

