#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Challenge_ResultPopup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.CheckCanClose
// 0x0001 (0x0001 - 0x0000)
struct Challenge_ResultPopup_C_CheckCanClose final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_CheckCanClose) == 0x000001, "Wrong alignment on Challenge_ResultPopup_C_CheckCanClose");
static_assert(sizeof(Challenge_ResultPopup_C_CheckCanClose) == 0x000001, "Wrong size on Challenge_ResultPopup_C_CheckCanClose");
static_assert(offsetof(Challenge_ResultPopup_C_CheckCanClose, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'Challenge_ResultPopup_C_CheckCanClose::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.DriveScore
// 0x0050 (0x0050 - 0x0000)
struct Challenge_ResultPopup_C_DriveScore final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C06[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C07[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_CreateSound2D_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C08[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_DriveScore) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_DriveScore");
static_assert(sizeof(Challenge_ResultPopup_C_DriveScore) == 0x000050, "Wrong size on Challenge_ResultPopup_C_DriveScore");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, Delta) == 0x000000, "Member 'Challenge_ResultPopup_C_DriveScore::Delta' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_GetRenderOpacity_ReturnValue) == 0x00000C, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000018, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000020, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_CreateSound2D_ReturnValue) == 0x000028, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_CreateSound2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000030, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_FInterpTo_ReturnValue) == 0x000038, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_FTrunc_ReturnValue) == 0x000040, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_DriveScore, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000048, "Member 'Challenge_ResultPopup_C_DriveScore::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.ExecuteUbergraph_Challenge_ResultPopup
// 0x00A0 (0x00A0 - 0x0000)
struct Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C09[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller;  // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C0A[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller_1; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C0B[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C0C[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_DriveScore_delta_ImplicitCast;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup");
static_assert(sizeof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup) == 0x0000A0, "Wrong size on Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, EntryPoint) == 0x000000, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_Event_MyGeometry) == 0x000014, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_GetOwningPlayer_ReturnValue) == 0x000058, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_DynamicCast_AsChallenge_Player_Controller) == 0x000060, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_DynamicCast_AsChallenge_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000070, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_DynamicCast_AsChallenge_Player_Controller_1) == 0x000078, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_DynamicCast_AsChallenge_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_GetRenderOpacity_ReturnValue) == 0x000084, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000088, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_DriveScore_delta_ImplicitCast) == 0x000090, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_DriveScore_delta_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000098, "Member 'Challenge_ResultPopup_C_ExecuteUbergraph_Challenge_ResultPopup::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.Get_Bg_Line_Brush_0
// 0x0280 (0x0280 - 0x0000)
struct Challenge_ResultPopup_C_Get_Bg_Line_Brush_0 final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm)
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue;         // 0x00D0(0x00D0)()
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue_1;       // 0x01A0(0x00D0)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_Get_Bg_Line_Brush_0) == 0x000010, "Wrong alignment on Challenge_ResultPopup_C_Get_Bg_Line_Brush_0");
static_assert(sizeof(Challenge_ResultPopup_C_Get_Bg_Line_Brush_0) == 0x000280, "Wrong size on Challenge_ResultPopup_C_Get_Bg_Line_Brush_0");
static_assert(offsetof(Challenge_ResultPopup_C_Get_Bg_Line_Brush_0, ReturnValue) == 0x000000, "Member 'Challenge_ResultPopup_C_Get_Bg_Line_Brush_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_Bg_Line_Brush_0, CallFunc_MakeBrushFromTexture_ReturnValue) == 0x0000D0, "Member 'Challenge_ResultPopup_C_Get_Bg_Line_Brush_0::CallFunc_MakeBrushFromTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_Bg_Line_Brush_0, CallFunc_MakeBrushFromTexture_ReturnValue_1) == 0x0001A0, "Member 'Challenge_ResultPopup_C_Get_Bg_Line_Brush_0::CallFunc_MakeBrushFromTexture_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_Bg_Line_Brush_0, K2Node_SwitchEnum_CmpSuccess) == 0x000270, "Member 'Challenge_ResultPopup_C_Get_Bg_Line_Brush_0::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.Get_TXT_Round_Text_0
// 0x00B0 (0x00B0 - 0x0000)
struct Challenge_ResultPopup_C_Get_TXT_Round_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_GameState*                   K2Node_DynamicCast_AsChallenge_Game_State;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C0D[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_GetCurrentRound_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
};
static_assert(alignof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_Get_TXT_Round_Text_0");
static_assert(sizeof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0) == 0x0000B0, "Wrong size on Challenge_ResultPopup_C_Get_TXT_Round_Text_0");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, ReturnValue) == 0x000000, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, K2Node_DynamicCast_AsChallenge_Game_State) == 0x000020, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::K2Node_DynamicCast_AsChallenge_Game_State' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, CallFunc_GetCurrentRound_ReturnValue) == 0x00002C, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::CallFunc_GetCurrentRound_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000030, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, K2Node_MakeArray_Array) == 0x000088, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Get_TXT_Round_Text_0, CallFunc_Format_ReturnValue) == 0x000098, "Member 'Challenge_ResultPopup_C_Get_TXT_Round_Text_0::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.GetResultText
// 0x0020 (0x0020 - 0x0000)
struct Challenge_ResultPopup_C_GetResultText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_GetResultText) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_GetResultText");
static_assert(sizeof(Challenge_ResultPopup_C_GetResultText) == 0x000020, "Wrong size on Challenge_ResultPopup_C_GetResultText");
static_assert(offsetof(Challenge_ResultPopup_C_GetResultText, ReturnValue) == 0x000000, "Member 'Challenge_ResultPopup_C_GetResultText::ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_GetResultText, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'Challenge_ResultPopup_C_GetResultText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.InitWidget
// 0x0048 (0x0048 - 0x0000)
struct Challenge_ResultPopup_C_InitWidget final
{
public:
	struct FChallengeResult                       Param_Result;                                      // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FChallengeResult                       Param_PrevResult;                                  // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_InitWidget) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_InitWidget");
static_assert(sizeof(Challenge_ResultPopup_C_InitWidget) == 0x000048, "Wrong size on Challenge_ResultPopup_C_InitWidget");
static_assert(offsetof(Challenge_ResultPopup_C_InitWidget, Param_Result) == 0x000000, "Member 'Challenge_ResultPopup_C_InitWidget::Param_Result' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_InitWidget, Param_PrevResult) == 0x000020, "Member 'Challenge_ResultPopup_C_InitWidget::Param_PrevResult' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_InitWidget, CallFunc_PlayAnimation_ReturnValue) == 0x000040, "Member 'Challenge_ResultPopup_C_InitWidget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.PlayStartAnim_Score
// 0x0010 (0x0010 - 0x0000)
struct Challenge_ResultPopup_C_PlayStartAnim_Score final
{
public:
	class UCtr_HUD_Challenge_ScorePanel_Entry_C*  Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_PlayStartAnim_Score) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_PlayStartAnim_Score");
static_assert(sizeof(Challenge_ResultPopup_C_PlayStartAnim_Score) == 0x000010, "Wrong size on Challenge_ResultPopup_C_PlayStartAnim_Score");
static_assert(offsetof(Challenge_ResultPopup_C_PlayStartAnim_Score, Widget) == 0x000000, "Member 'Challenge_ResultPopup_C_PlayStartAnim_Score::Widget' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_PlayStartAnim_Score, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'Challenge_ResultPopup_C_PlayStartAnim_Score::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.PlayStartSound
// 0x0001 (0x0001 - 0x0000)
struct Challenge_ResultPopup_C_PlayStartSound final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_PlayStartSound) == 0x000001, "Wrong alignment on Challenge_ResultPopup_C_PlayStartSound");
static_assert(sizeof(Challenge_ResultPopup_C_PlayStartSound) == 0x000001, "Wrong size on Challenge_ResultPopup_C_PlayStartSound");
static_assert(offsetof(Challenge_ResultPopup_C_PlayStartSound, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'Challenge_ResultPopup_C_PlayStartSound::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.Tick
// 0x003C (0x003C - 0x0000)
struct Challenge_ResultPopup_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_Tick) == 0x000004, "Wrong alignment on Challenge_ResultPopup_C_Tick");
static_assert(sizeof(Challenge_ResultPopup_C_Tick) == 0x00003C, "Wrong size on Challenge_ResultPopup_C_Tick");
static_assert(offsetof(Challenge_ResultPopup_C_Tick, MyGeometry) == 0x000000, "Member 'Challenge_ResultPopup_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_Tick, InDeltaTime) == 0x000038, "Member 'Challenge_ResultPopup_C_Tick::InDeltaTime' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.UpdateResult
// 0x00F0 (0x00F0 - 0x0000)
struct Challenge_ResultPopup_C_UpdateResult final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C0E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class AChallenge_GameState*                   K2Node_DynamicCast_AsChallenge_Game_State;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C0F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C10[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class FText                                   CallFunc_GetResultText_ReturnValue;                // 0x0090(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0018)()
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_GameState*                   K2Node_DynamicCast_AsChallenge_Game_State_1;       // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C11[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_UpdateResult) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_UpdateResult");
static_assert(sizeof(Challenge_ResultPopup_C_UpdateResult) == 0x0000F0, "Wrong size on Challenge_ResultPopup_C_UpdateResult");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, K2Node_DynamicCast_AsChallenge_Game_State) == 0x000010, "Member 'Challenge_ResultPopup_C_UpdateResult::K2Node_DynamicCast_AsChallenge_Game_State' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Challenge_ResultPopup_C_UpdateResult::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'Challenge_ResultPopup_C_UpdateResult::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, K2Node_MakeArray_Array) == 0x000080, "Member 'Challenge_ResultPopup_C_UpdateResult::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_GetResultText_ReturnValue) == 0x000090, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_GetResultText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_GetGameState_ReturnValue_1) == 0x0000C0, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, K2Node_DynamicCast_AsChallenge_Game_State_1) == 0x0000C8, "Member 'Challenge_ResultPopup_C_UpdateResult::K2Node_DynamicCast_AsChallenge_Game_State_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'Challenge_ResultPopup_C_UpdateResult::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000D8, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000E0, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_ResultPopup_C_UpdateResult, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x0000E8, "Member 'Challenge_ResultPopup_C_UpdateResult::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");

// Function Challenge_ResultPopup.Challenge_ResultPopup_C.GetCloseKey
// 0x0018 (0x0018 - 0x0000)
struct Challenge_ResultPopup_C_GetCloseKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_ResultPopup_C_GetCloseKey) == 0x000008, "Wrong alignment on Challenge_ResultPopup_C_GetCloseKey");
static_assert(sizeof(Challenge_ResultPopup_C_GetCloseKey) == 0x000018, "Wrong size on Challenge_ResultPopup_C_GetCloseKey");
static_assert(offsetof(Challenge_ResultPopup_C_GetCloseKey, ReturnValue) == 0x000000, "Member 'Challenge_ResultPopup_C_GetCloseKey::ReturnValue' has a wrong offset!");

}

