#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: HUD_ChallengeMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "Stigma_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass HUD_ChallengeMode.HUD_ChallengeMode_C
// 0x0068 (0x0568 - 0x0500)
class UHUD_ChallengeMode_C final : public UUI_HUDMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       StartAnim;                                         // 0x0508(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button_0;                                          // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_HUD_ChallengeScorePanel_C*        Ctrl_HUD_ChallengeScorePanel;                      // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBoxF1;                                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHUD_Missions_C*                        HUD_Challenge_Mission;                             // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_153;                                         // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         RichTextBlock_58;                                  // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Store_Text;                                        // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Key;                                           // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UChallenge_MissionPopup_C*              MissionPopup;                                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class URewardBase_Alert_C*                    RewardAlert;                                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrRound;                                         // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartAnimPlayed;                                 // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ClearPreRoundPopups();
	void DriveChallenge();
	void ExecuteUbergraph_HUD_ChallengeMode(int32 EntryPoint);
	class FText GetText_0();
	void OnReset();
	void OpenChallengeMissionPopup();
	void ResetWidget(int32 NewRound);
	void ShowRewardPopup();
	void StartRound();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HUD_ChallengeMode_C">();
	}
	static class UHUD_ChallengeMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHUD_ChallengeMode_C>();
	}
};
static_assert(alignof(UHUD_ChallengeMode_C) == 0x000008, "Wrong alignment on UHUD_ChallengeMode_C");
static_assert(sizeof(UHUD_ChallengeMode_C) == 0x000568, "Wrong size on UHUD_ChallengeMode_C");
static_assert(offsetof(UHUD_ChallengeMode_C, UberGraphFrame) == 0x000500, "Member 'UHUD_ChallengeMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, StartAnim) == 0x000508, "Member 'UHUD_ChallengeMode_C::StartAnim' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, Button_0) == 0x000510, "Member 'UHUD_ChallengeMode_C::Button_0' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, Ctrl_HUD_ChallengeScorePanel) == 0x000518, "Member 'UHUD_ChallengeMode_C::Ctrl_HUD_ChallengeScorePanel' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, HorizontalBoxF1) == 0x000520, "Member 'UHUD_ChallengeMode_C::HorizontalBoxF1' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, HUD_Challenge_Mission) == 0x000528, "Member 'UHUD_ChallengeMode_C::HUD_Challenge_Mission' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, Image_153) == 0x000530, "Member 'UHUD_ChallengeMode_C::Image_153' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, RichTextBlock_58) == 0x000538, "Member 'UHUD_ChallengeMode_C::RichTextBlock_58' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, Store_Text) == 0x000540, "Member 'UHUD_ChallengeMode_C::Store_Text' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, TXT_Key) == 0x000548, "Member 'UHUD_ChallengeMode_C::TXT_Key' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, MissionPopup) == 0x000550, "Member 'UHUD_ChallengeMode_C::MissionPopup' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, RewardAlert) == 0x000558, "Member 'UHUD_ChallengeMode_C::RewardAlert' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, CurrRound) == 0x000560, "Member 'UHUD_ChallengeMode_C::CurrRound' has a wrong offset!");
static_assert(offsetof(UHUD_ChallengeMode_C, IsStartAnimPlayed) == 0x000564, "Member 'UHUD_ChallengeMode_C::IsStartAnimPlayed' has a wrong offset!");

}

