#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_GunControlPower

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_GunControlPower.Ctrl_GunControlPower_C
// 0x00A0 (0x0590 - 0x04F0)
class UCtrl_GunControlPower_C final : public UPreviewableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                BTN_ControlPower;                                  // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_Back;                                          // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_CharaBack;                                     // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_GunBack;                                       // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_ControlPow_Chara;                              // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_ControlPow_CharaNAme;                          // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_ControlPow_Gun;                                // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_ControlPow_GunName;                            // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	ECharaType                                    CharaType;                                         // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGunType                                      GunType;                                           // 0x0539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391F[0x6];                                     // 0x053A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CharaControlPower;                                 // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            BackgroundColor;                                   // 0x0548(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            PanelColor;                                        // 0x055C(0x0014)(Edit, BlueprintVisible)
	double                                        ResultControlPower;                                // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInBattle;                                        // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3920[0x7];                                     // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             Gun_Preset;                                        // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void BndEvt__Ctrl_GunControlPower_BTN_ControlPower_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void ExecuteUbergraph_Ctrl_GunControlPower(int32 EntryPoint);
	class UWidget* OnGetTooltip_ControlPower();
	bool OnSynchronizeProperties();
	void SetCharacter(ECharaType _chara_type);
	void SetGun(const struct FGunPreset& _gun_preset);
	void Update();
	void UpdateBackground();
	void UpdateCharacter();
	void UpdateGun();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_GunControlPower_C">();
	}
	static class UCtrl_GunControlPower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_GunControlPower_C>();
	}
};
static_assert(alignof(UCtrl_GunControlPower_C) == 0x000008, "Wrong alignment on UCtrl_GunControlPower_C");
static_assert(sizeof(UCtrl_GunControlPower_C) == 0x000590, "Wrong size on UCtrl_GunControlPower_C");
static_assert(offsetof(UCtrl_GunControlPower_C, UberGraphFrame) == 0x0004F0, "Member 'UCtrl_GunControlPower_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, BTN_ControlPower) == 0x0004F8, "Member 'UCtrl_GunControlPower_C::BTN_ControlPower' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, IMG_Back) == 0x000500, "Member 'UCtrl_GunControlPower_C::IMG_Back' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, IMG_CharaBack) == 0x000508, "Member 'UCtrl_GunControlPower_C::IMG_CharaBack' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, IMG_GunBack) == 0x000510, "Member 'UCtrl_GunControlPower_C::IMG_GunBack' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, TXT_ControlPow_Chara) == 0x000518, "Member 'UCtrl_GunControlPower_C::TXT_ControlPow_Chara' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, TXT_ControlPow_CharaNAme) == 0x000520, "Member 'UCtrl_GunControlPower_C::TXT_ControlPow_CharaNAme' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, TXT_ControlPow_Gun) == 0x000528, "Member 'UCtrl_GunControlPower_C::TXT_ControlPow_Gun' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, TXT_ControlPow_GunName) == 0x000530, "Member 'UCtrl_GunControlPower_C::TXT_ControlPow_GunName' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, CharaType) == 0x000538, "Member 'UCtrl_GunControlPower_C::CharaType' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, GunType) == 0x000539, "Member 'UCtrl_GunControlPower_C::GunType' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, CharaControlPower) == 0x000540, "Member 'UCtrl_GunControlPower_C::CharaControlPower' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, BackgroundColor) == 0x000548, "Member 'UCtrl_GunControlPower_C::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, PanelColor) == 0x00055C, "Member 'UCtrl_GunControlPower_C::PanelColor' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, ResultControlPower) == 0x000570, "Member 'UCtrl_GunControlPower_C::ResultControlPower' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, IsInBattle) == 0x000578, "Member 'UCtrl_GunControlPower_C::IsInBattle' has a wrong offset!");
static_assert(offsetof(UCtrl_GunControlPower_C, Gun_Preset) == 0x000580, "Member 'UCtrl_GunControlPower_C::Gun_Preset' has a wrong offset!");

}

