#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: LogWidget_Damage

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass LogWidget_Damage.LogWidget_Damage_C
// 0x0050 (0x0540 - 0x04F0)
class ULogWidget_Damage_C final : public UPreviewableWidget
{
public:
	class UTextBlock*                             TXT_Abnormal;                                      // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_AP;                                            // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_AttackDesc;                                    // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_HP;                                            // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FDamagedData                           DamagedData;                                       // 0x0510(0x0030)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)

public:
	void SetDamagedData(struct FDamagedData& _data);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LogWidget_Damage_C">();
	}
	static class ULogWidget_Damage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULogWidget_Damage_C>();
	}
};
static_assert(alignof(ULogWidget_Damage_C) == 0x000008, "Wrong alignment on ULogWidget_Damage_C");
static_assert(sizeof(ULogWidget_Damage_C) == 0x000540, "Wrong size on ULogWidget_Damage_C");
static_assert(offsetof(ULogWidget_Damage_C, TXT_Abnormal) == 0x0004F0, "Member 'ULogWidget_Damage_C::TXT_Abnormal' has a wrong offset!");
static_assert(offsetof(ULogWidget_Damage_C, TXT_AP) == 0x0004F8, "Member 'ULogWidget_Damage_C::TXT_AP' has a wrong offset!");
static_assert(offsetof(ULogWidget_Damage_C, TXT_AttackDesc) == 0x000500, "Member 'ULogWidget_Damage_C::TXT_AttackDesc' has a wrong offset!");
static_assert(offsetof(ULogWidget_Damage_C, TXT_HP) == 0x000508, "Member 'ULogWidget_Damage_C::TXT_HP' has a wrong offset!");
static_assert(offsetof(ULogWidget_Damage_C, DamagedData) == 0x000510, "Member 'ULogWidget_Damage_C::DamagedData' has a wrong offset!");

}

