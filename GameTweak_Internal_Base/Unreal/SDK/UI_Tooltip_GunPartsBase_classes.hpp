#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Tooltip_GunPartsBase

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UI_Tooltip_ItemID_Default_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Tooltip_GunPartsBase.UI_Tooltip_GunPartsBase_C
// 0x0158 (0x08C0 - 0x0768)
class UUI_Tooltip_GunPartsBase_C : public UUI_Tooltip_ItemID_Default_C
{
public:
	class UImage*                                 Img_Parts;                                         // 0x0768(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UListView*                              LV_Attribute;                                      // 0x0770(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Ovl_RemainTimer;                                   // 0x0778(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_RemainDateTimer_C*                  RemainDateTimer;                                   // 0x0780(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_AttachableAccessory;                           // 0x0788(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_GunName;                                       // 0x0790(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Parts;                                         // 0x0798(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          HasExpireTime;                                     // 0x07A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttachableAccessory;                             // 0x07A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGunPartsSlot                                 GunPartsSlot;                                      // 0x07A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttachableAnyGun;                                // 0x07A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F71[0x4];                                     // 0x07A4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EGunType>                              AttachableGunTypes;                                // 0x07A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGunAttribute_Common                   GunAttributeCommon;                                // 0x07B8(0x0024)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_3F72[0x4];                                     // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UAttribute_LVItem_C*>            LVItems;                                           // 0x07E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              Expiry;                                            // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              UI_Icon_ControlPower;                              // 0x07F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              UI_Icon_Deviation;                                 // 0x0820(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              UI_Icon_Recoil;                                    // 0x0848(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<EGunPartsSlot, TSoftObjectPtr<class UTexture2D>> UI_GunPartsSlotImages;                             // 0x0870(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

public:
	void AddListItem(const class FText& Attribute_name, const class FText& Value, TSoftObjectPtr<class UTexture2D> Icon);
	void OnShowTooltip();
	void SetExpiry(const struct FDateTime& _expiry);
	void SetGunPartsSlotInfo();
	void SetShowClickBtn(bool _show);
	void SetTextAttachableGunTypes();
	void UpdateAttachableAccessory();
	void UpdateControlPower();
	void UpdateDeviation();
	void UpdateExpiry();
	void UpdateRecoil();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Tooltip_GunPartsBase_C">();
	}
	static class UUI_Tooltip_GunPartsBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Tooltip_GunPartsBase_C>();
	}
};
static_assert(alignof(UUI_Tooltip_GunPartsBase_C) == 0x000008, "Wrong alignment on UUI_Tooltip_GunPartsBase_C");
static_assert(sizeof(UUI_Tooltip_GunPartsBase_C) == 0x0008C0, "Wrong size on UUI_Tooltip_GunPartsBase_C");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, Img_Parts) == 0x000768, "Member 'UUI_Tooltip_GunPartsBase_C::Img_Parts' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, LV_Attribute) == 0x000770, "Member 'UUI_Tooltip_GunPartsBase_C::LV_Attribute' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, Ovl_RemainTimer) == 0x000778, "Member 'UUI_Tooltip_GunPartsBase_C::Ovl_RemainTimer' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, RemainDateTimer) == 0x000780, "Member 'UUI_Tooltip_GunPartsBase_C::RemainDateTimer' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, Txt_AttachableAccessory) == 0x000788, "Member 'UUI_Tooltip_GunPartsBase_C::Txt_AttachableAccessory' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, TXT_GunName) == 0x000790, "Member 'UUI_Tooltip_GunPartsBase_C::TXT_GunName' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, TXT_Parts) == 0x000798, "Member 'UUI_Tooltip_GunPartsBase_C::TXT_Parts' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, HasExpireTime) == 0x0007A0, "Member 'UUI_Tooltip_GunPartsBase_C::HasExpireTime' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, IsAttachableAccessory) == 0x0007A1, "Member 'UUI_Tooltip_GunPartsBase_C::IsAttachableAccessory' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, GunPartsSlot) == 0x0007A2, "Member 'UUI_Tooltip_GunPartsBase_C::GunPartsSlot' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, IsAttachableAnyGun) == 0x0007A3, "Member 'UUI_Tooltip_GunPartsBase_C::IsAttachableAnyGun' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, AttachableGunTypes) == 0x0007A8, "Member 'UUI_Tooltip_GunPartsBase_C::AttachableGunTypes' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, GunAttributeCommon) == 0x0007B8, "Member 'UUI_Tooltip_GunPartsBase_C::GunAttributeCommon' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, LVItems) == 0x0007E0, "Member 'UUI_Tooltip_GunPartsBase_C::LVItems' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, Expiry) == 0x0007F0, "Member 'UUI_Tooltip_GunPartsBase_C::Expiry' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, UI_Icon_ControlPower) == 0x0007F8, "Member 'UUI_Tooltip_GunPartsBase_C::UI_Icon_ControlPower' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, UI_Icon_Deviation) == 0x000820, "Member 'UUI_Tooltip_GunPartsBase_C::UI_Icon_Deviation' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, UI_Icon_Recoil) == 0x000848, "Member 'UUI_Tooltip_GunPartsBase_C::UI_Icon_Recoil' has a wrong offset!");
static_assert(offsetof(UUI_Tooltip_GunPartsBase_C, UI_GunPartsSlotImages) == 0x000870, "Member 'UUI_Tooltip_GunPartsBase_C::UI_GunPartsSlotImages' has a wrong offset!");

}

