#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Stigma

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Stigma_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ActionGraph_structs.hpp"
#include "BPGLib_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "EnhancedInput_structs.hpp"


namespace SDK::Params
{

// Function Stigma.StigmaPlayerController.AddChara2DVoice
// 0x0020 (0x0020 - 0x0000)
struct StigmaPlayerController_AddChara2DVoice final
{
public:
	class FString                                 _voice_id;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           _player_state;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _speak_chara_type;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_radio;                                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F25[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaPlayerController_AddChara2DVoice) == 0x000008, "Wrong alignment on StigmaPlayerController_AddChara2DVoice");
static_assert(sizeof(StigmaPlayerController_AddChara2DVoice) == 0x000020, "Wrong size on StigmaPlayerController_AddChara2DVoice");
static_assert(offsetof(StigmaPlayerController_AddChara2DVoice, _voice_id) == 0x000000, "Member 'StigmaPlayerController_AddChara2DVoice::_voice_id' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddChara2DVoice, _player_state) == 0x000010, "Member 'StigmaPlayerController_AddChara2DVoice::_player_state' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddChara2DVoice, _speak_chara_type) == 0x000018, "Member 'StigmaPlayerController_AddChara2DVoice::_speak_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddChara2DVoice, _is_radio) == 0x000019, "Member 'StigmaPlayerController_AddChara2DVoice::_is_radio' has a wrong offset!");

// Function Stigma.StigmaPlayerController.AddGameNotify
// 0x0028 (0x0028 - 0x0000)
struct StigmaPlayerController_AddGameNotify final
{
public:
	class FName                                   _notify_name;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         _time;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F26[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaPlayerController_AddGameNotify) == 0x000008, "Wrong alignment on StigmaPlayerController_AddGameNotify");
static_assert(sizeof(StigmaPlayerController_AddGameNotify) == 0x000028, "Wrong size on StigmaPlayerController_AddGameNotify");
static_assert(offsetof(StigmaPlayerController_AddGameNotify, _notify_name) == 0x000000, "Member 'StigmaPlayerController_AddGameNotify::_notify_name' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddGameNotify, _text) == 0x000008, "Member 'StigmaPlayerController_AddGameNotify::_text' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddGameNotify, _time) == 0x000020, "Member 'StigmaPlayerController_AddGameNotify::_time' has a wrong offset!");

// Function Stigma.StigmaPlayerController.AddTickTask
// 0x0014 (0x0014 - 0x0000)
struct StigmaPlayerController_AddTickTask final
{
public:
	float                                         _duration;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float _delta, float _elaped, ETickTaskState _state)> _task;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPlayerController_AddTickTask) == 0x000004, "Wrong alignment on StigmaPlayerController_AddTickTask");
static_assert(sizeof(StigmaPlayerController_AddTickTask) == 0x000014, "Wrong size on StigmaPlayerController_AddTickTask");
static_assert(offsetof(StigmaPlayerController_AddTickTask, _duration) == 0x000000, "Member 'StigmaPlayerController_AddTickTask::_duration' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddTickTask, _task) == 0x000004, "Member 'StigmaPlayerController_AddTickTask::_task' has a wrong offset!");

// Function Stigma.StigmaPlayerController.AddVoice
// 0x0020 (0x0020 - 0x0000)
struct StigmaPlayerController_AddVoice final
{
public:
	class FString                                 _voice_id;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             _speak_chara;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_3d_voice;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F27[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaPlayerController_AddVoice) == 0x000008, "Wrong alignment on StigmaPlayerController_AddVoice");
static_assert(sizeof(StigmaPlayerController_AddVoice) == 0x000020, "Wrong size on StigmaPlayerController_AddVoice");
static_assert(offsetof(StigmaPlayerController_AddVoice, _voice_id) == 0x000000, "Member 'StigmaPlayerController_AddVoice::_voice_id' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddVoice, _speak_chara) == 0x000010, "Member 'StigmaPlayerController_AddVoice::_speak_chara' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_AddVoice, _is_3d_voice) == 0x000018, "Member 'StigmaPlayerController_AddVoice::_is_3d_voice' has a wrong offset!");

// Function Stigma.StigmaPlayerController.HideAllGameNotifies
// 0x0001 (0x0001 - 0x0000)
struct StigmaPlayerController_HideAllGameNotifies final
{
public:
	bool                                          _hide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPlayerController_HideAllGameNotifies) == 0x000001, "Wrong alignment on StigmaPlayerController_HideAllGameNotifies");
static_assert(sizeof(StigmaPlayerController_HideAllGameNotifies) == 0x000001, "Wrong size on StigmaPlayerController_HideAllGameNotifies");
static_assert(offsetof(StigmaPlayerController_HideAllGameNotifies, _hide) == 0x000000, "Member 'StigmaPlayerController_HideAllGameNotifies::_hide' has a wrong offset!");

// Function Stigma.StigmaPlayerController.MapJump
// 0x000C (0x000C - 0x0000)
struct StigmaPlayerController_MapJump final
{
public:
	class FName                                   _level_name;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _fadeout_time;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPlayerController_MapJump) == 0x000004, "Wrong alignment on StigmaPlayerController_MapJump");
static_assert(sizeof(StigmaPlayerController_MapJump) == 0x00000C, "Wrong size on StigmaPlayerController_MapJump");
static_assert(offsetof(StigmaPlayerController_MapJump, _level_name) == 0x000000, "Member 'StigmaPlayerController_MapJump::_level_name' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_MapJump, _fadeout_time) == 0x000008, "Member 'StigmaPlayerController_MapJump::_fadeout_time' has a wrong offset!");

// Function Stigma.StigmaPlayerController.RemoveGameNotify
// 0x000C (0x000C - 0x0000)
struct StigmaPlayerController_RemoveGameNotify final
{
public:
	class FName                                   _notify_name;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _force_remove;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F28[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaPlayerController_RemoveGameNotify) == 0x000004, "Wrong alignment on StigmaPlayerController_RemoveGameNotify");
static_assert(sizeof(StigmaPlayerController_RemoveGameNotify) == 0x00000C, "Wrong size on StigmaPlayerController_RemoveGameNotify");
static_assert(offsetof(StigmaPlayerController_RemoveGameNotify, _notify_name) == 0x000000, "Member 'StigmaPlayerController_RemoveGameNotify::_notify_name' has a wrong offset!");
static_assert(offsetof(StigmaPlayerController_RemoveGameNotify, _force_remove) == 0x000008, "Member 'StigmaPlayerController_RemoveGameNotify::_force_remove' has a wrong offset!");

// Function Stigma.StigmaPlayerController.ShowQuickPurchaseCurrencyPopup
// 0x0010 (0x0010 - 0x0000)
struct StigmaPlayerController_ShowQuickPurchaseCurrencyPopup final
{
public:
	struct FItemID_Currency                       _currency_id;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPlayerController_ShowQuickPurchaseCurrencyPopup) == 0x000008, "Wrong alignment on StigmaPlayerController_ShowQuickPurchaseCurrencyPopup");
static_assert(sizeof(StigmaPlayerController_ShowQuickPurchaseCurrencyPopup) == 0x000010, "Wrong size on StigmaPlayerController_ShowQuickPurchaseCurrencyPopup");
static_assert(offsetof(StigmaPlayerController_ShowQuickPurchaseCurrencyPopup, _currency_id) == 0x000000, "Member 'StigmaPlayerController_ShowQuickPurchaseCurrencyPopup::_currency_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.OnChangeServerState
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerController_OnChangeServerState final
{
public:
	EServerStatus                                 _server_state;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_OnChangeServerState) == 0x000001, "Wrong alignment on MatchServicedPlayerController_OnChangeServerState");
static_assert(sizeof(MatchServicedPlayerController_OnChangeServerState) == 0x000002, "Wrong size on MatchServicedPlayerController_OnChangeServerState");
static_assert(offsetof(MatchServicedPlayerController_OnChangeServerState, _server_state) == 0x000000, "Member 'MatchServicedPlayerController_OnChangeServerState::_server_state' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_OnChangeServerState, ReturnValue) == 0x000001, "Member 'MatchServicedPlayerController_OnChangeServerState::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.OnClient_UpdateSharedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerController_OnClient_UpdateSharedPlayerState final
{
public:
	class AMatchServicedPlayerState*              _player_state;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_OnClient_UpdateSharedPlayerState) == 0x000008, "Wrong alignment on MatchServicedPlayerController_OnClient_UpdateSharedPlayerState");
static_assert(sizeof(MatchServicedPlayerController_OnClient_UpdateSharedPlayerState) == 0x000008, "Wrong size on MatchServicedPlayerController_OnClient_UpdateSharedPlayerState");
static_assert(offsetof(MatchServicedPlayerController_OnClient_UpdateSharedPlayerState, _player_state) == 0x000000, "Member 'MatchServicedPlayerController_OnClient_UpdateSharedPlayerState::_player_state' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.OnRep_NetID
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerController_OnRep_NetID final
{
public:
	struct FNetID                                 _old_id;                                           // 0x0000(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_OnRep_NetID) == 0x000001, "Wrong alignment on MatchServicedPlayerController_OnRep_NetID");
static_assert(sizeof(MatchServicedPlayerController_OnRep_NetID) == 0x000002, "Wrong size on MatchServicedPlayerController_OnRep_NetID");
static_assert(offsetof(MatchServicedPlayerController_OnRep_NetID, _old_id) == 0x000000, "Member 'MatchServicedPlayerController_OnRep_NetID::_old_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_CLI_SendChat
// 0x0058 (0x0058 - 0x0000)
struct MatchServicedPlayerController_RPC_CLI_SendChat final
{
public:
	struct FChatMsg                               _msg;                                              // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_CLI_SendChat) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_CLI_SendChat");
static_assert(sizeof(MatchServicedPlayerController_RPC_CLI_SendChat) == 0x000058, "Wrong size on MatchServicedPlayerController_RPC_CLI_SendChat");
static_assert(offsetof(MatchServicedPlayerController_RPC_CLI_SendChat, _msg) == 0x000000, "Member 'MatchServicedPlayerController_RPC_CLI_SendChat::_msg' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_CLIENT_TryReady_ACK
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK final
{
public:
	struct FConfirmResponse                       _response;                                         // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK) == 0x000001, "Wrong alignment on MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK");
static_assert(sizeof(MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK) == 0x000001, "Wrong size on MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK");
static_assert(offsetof(MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK, _response) == 0x000000, "Member 'MatchServicedPlayerController_RPC_CLIENT_TryReady_ACK::_response' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_CLIENT_WarnChangingGun
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             _gun_preset;                                       // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun");
static_assert(sizeof(MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun) == 0x000018, "Wrong size on MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun");
static_assert(offsetof(MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun, _chara_type) == 0x000000, "Member 'MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun::_chara_type' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun, _gun_preset) == 0x000008, "Member 'MatchServicedPlayerController_RPC_CLIENT_WarnChangingGun::_gun_preset' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_SERVER_SendChat
// 0x0058 (0x0058 - 0x0000)
struct MatchServicedPlayerController_RPC_SERVER_SendChat final
{
public:
	struct FChatMsg                               _msg;                                              // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_SERVER_SendChat) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_SERVER_SendChat");
static_assert(sizeof(MatchServicedPlayerController_RPC_SERVER_SendChat) == 0x000058, "Wrong size on MatchServicedPlayerController_RPC_SERVER_SendChat");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SendChat, _msg) == 0x000000, "Member 'MatchServicedPlayerController_RPC_SERVER_SendChat::_msg' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_SERVER_SetCharacterSetting
// 0x0020 (0x0020 - 0x0000)
struct MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting final
{
public:
	int32                                         _zidx_chara;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot_zidx;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting");
static_assert(sizeof(MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting) == 0x000020, "Wrong size on MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting, _zidx_chara) == 0x000000, "Member 'MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting::_zidx_chara' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting, _item_id) == 0x000008, "Member 'MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting::_item_id' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting, _slot_zidx) == 0x000018, "Member 'MatchServicedPlayerController_RPC_SERVER_SetCharacterSetting::_slot_zidx' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_SERVER_SetCostume
// 0x0028 (0x0028 - 0x0000)
struct MatchServicedPlayerController_RPC_SERVER_SetCostume final
{
public:
	TArray<struct FLocalCharacterSet>             _local_picked_charas;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _zidx_chara;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0018(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_SERVER_SetCostume) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_SERVER_SetCostume");
static_assert(sizeof(MatchServicedPlayerController_RPC_SERVER_SetCostume) == 0x000028, "Wrong size on MatchServicedPlayerController_RPC_SERVER_SetCostume");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetCostume, _local_picked_charas) == 0x000000, "Member 'MatchServicedPlayerController_RPC_SERVER_SetCostume::_local_picked_charas' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetCostume, _zidx_chara) == 0x000010, "Member 'MatchServicedPlayerController_RPC_SERVER_SetCostume::_zidx_chara' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetCostume, _item_id) == 0x000018, "Member 'MatchServicedPlayerController_RPC_SERVER_SetCostume::_item_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_SERVER_SetGunPreset
// 0x0028 (0x0028 - 0x0000)
struct MatchServicedPlayerController_RPC_SERVER_SetGunPreset final
{
public:
	TArray<struct FLocalCharacterSet>             _local_picked_charas;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _zidx_chara;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F30[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             _gun_preset;                                       // 0x0018(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_SERVER_SetGunPreset) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_SERVER_SetGunPreset");
static_assert(sizeof(MatchServicedPlayerController_RPC_SERVER_SetGunPreset) == 0x000028, "Wrong size on MatchServicedPlayerController_RPC_SERVER_SetGunPreset");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetGunPreset, _local_picked_charas) == 0x000000, "Member 'MatchServicedPlayerController_RPC_SERVER_SetGunPreset::_local_picked_charas' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetGunPreset, _zidx_chara) == 0x000010, "Member 'MatchServicedPlayerController_RPC_SERVER_SetGunPreset::_zidx_chara' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_SetGunPreset, _gun_preset) == 0x000018, "Member 'MatchServicedPlayerController_RPC_SERVER_SetGunPreset::_gun_preset' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_SERVER_TryReady
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerController_RPC_SERVER_TryReady final
{
public:
	TArray<struct FLocalCharacterSet>             _local_picked_charas;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _i_am_ready;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _forced;                                           // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F31[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedPlayerController_RPC_SERVER_TryReady) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_SERVER_TryReady");
static_assert(sizeof(MatchServicedPlayerController_RPC_SERVER_TryReady) == 0x000018, "Wrong size on MatchServicedPlayerController_RPC_SERVER_TryReady");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_TryReady, _local_picked_charas) == 0x000000, "Member 'MatchServicedPlayerController_RPC_SERVER_TryReady::_local_picked_charas' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_TryReady, _i_am_ready) == 0x000010, "Member 'MatchServicedPlayerController_RPC_SERVER_TryReady::_i_am_ready' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_TryReady, _forced) == 0x000011, "Member 'MatchServicedPlayerController_RPC_SERVER_TryReady::_forced' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.RPC_SERVER_UpdateBooster
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerController_RPC_SERVER_UpdateBooster final
{
public:
	int32                                         _slot_index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F32[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_RPC_SERVER_UpdateBooster) == 0x000008, "Wrong alignment on MatchServicedPlayerController_RPC_SERVER_UpdateBooster");
static_assert(sizeof(MatchServicedPlayerController_RPC_SERVER_UpdateBooster) == 0x000018, "Wrong size on MatchServicedPlayerController_RPC_SERVER_UpdateBooster");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_UpdateBooster, _slot_index) == 0x000000, "Member 'MatchServicedPlayerController_RPC_SERVER_UpdateBooster::_slot_index' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerController_RPC_SERVER_UpdateBooster, _item_id) == 0x000008, "Member 'MatchServicedPlayerController_RPC_SERVER_UpdateBooster::_item_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.SERVER_SetNetID
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerController_SERVER_SetNetID final
{
public:
	struct FNetID                                 _net_id;                                           // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_SERVER_SetNetID) == 0x000001, "Wrong alignment on MatchServicedPlayerController_SERVER_SetNetID");
static_assert(sizeof(MatchServicedPlayerController_SERVER_SetNetID) == 0x000002, "Wrong size on MatchServicedPlayerController_SERVER_SetNetID");
static_assert(offsetof(MatchServicedPlayerController_SERVER_SetNetID, _net_id) == 0x000000, "Member 'MatchServicedPlayerController_SERVER_SetNetID::_net_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.Setter_NetID
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerController_Setter_NetID final
{
public:
	struct FNetID                                 _new_id;                                           // 0x0000(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_Setter_NetID) == 0x000001, "Wrong alignment on MatchServicedPlayerController_Setter_NetID");
static_assert(sizeof(MatchServicedPlayerController_Setter_NetID) == 0x000002, "Wrong size on MatchServicedPlayerController_Setter_NetID");
static_assert(offsetof(MatchServicedPlayerController_Setter_NetID, _new_id) == 0x000000, "Member 'MatchServicedPlayerController_Setter_NetID::_new_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.ShowRewardedPopup
// 0x0020 (0x0020 - 0x0000)
struct MatchServicedPlayerController_ShowRewardedPopup final
{
public:
	struct FRewardPlain                           _reward_plain;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_ShowRewardedPopup) == 0x000008, "Wrong alignment on MatchServicedPlayerController_ShowRewardedPopup");
static_assert(sizeof(MatchServicedPlayerController_ShowRewardedPopup) == 0x000020, "Wrong size on MatchServicedPlayerController_ShowRewardedPopup");
static_assert(offsetof(MatchServicedPlayerController_ShowRewardedPopup, _reward_plain) == 0x000000, "Member 'MatchServicedPlayerController_ShowRewardedPopup::_reward_plain' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.GetCurrentCharacterInfo
// 0x0058 (0x0058 - 0x0000)
struct MatchServicedPlayerController_GetCurrentCharacterInfo final
{
public:
	struct FCharacterInfo                         ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_GetCurrentCharacterInfo) == 0x000008, "Wrong alignment on MatchServicedPlayerController_GetCurrentCharacterInfo");
static_assert(sizeof(MatchServicedPlayerController_GetCurrentCharacterInfo) == 0x000058, "Wrong size on MatchServicedPlayerController_GetCurrentCharacterInfo");
static_assert(offsetof(MatchServicedPlayerController_GetCurrentCharacterInfo, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerController_GetCurrentCharacterInfo::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.GetNetID
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerController_GetNetID final
{
public:
	struct FNetID                                 ReturnValue;                                       // 0x0000(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_GetNetID) == 0x000001, "Wrong alignment on MatchServicedPlayerController_GetNetID");
static_assert(sizeof(MatchServicedPlayerController_GetNetID) == 0x000002, "Wrong size on MatchServicedPlayerController_GetNetID");
static_assert(offsetof(MatchServicedPlayerController_GetNetID, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerController_GetNetID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.GetOwnCharacter
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerController_GetOwnCharacter final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_GetOwnCharacter) == 0x000008, "Wrong alignment on MatchServicedPlayerController_GetOwnCharacter");
static_assert(sizeof(MatchServicedPlayerController_GetOwnCharacter) == 0x000008, "Wrong size on MatchServicedPlayerController_GetOwnCharacter");
static_assert(offsetof(MatchServicedPlayerController_GetOwnCharacter, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerController_GetOwnCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerController.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerController_GetTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerController_GetTeam) == 0x000001, "Wrong alignment on MatchServicedPlayerController_GetTeam");
static_assert(sizeof(MatchServicedPlayerController_GetTeam) == 0x000001, "Wrong size on MatchServicedPlayerController_GetTeam");
static_assert(offsetof(MatchServicedPlayerController_GetTeam, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerController_GetTeam::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.AddFullScreenWidget
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_AddFullScreenWidget final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_AddFullScreenWidget) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_AddFullScreenWidget");
static_assert(sizeof(BattlePlayerControllerBase_AddFullScreenWidget) == 0x000008, "Wrong size on BattlePlayerControllerBase_AddFullScreenWidget");
static_assert(offsetof(BattlePlayerControllerBase_AddFullScreenWidget, _widget) == 0x000000, "Member 'BattlePlayerControllerBase_AddFullScreenWidget::_widget' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.AddToastIfLackControlPower
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_AddToastIfLackControlPower final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_AddToastIfLackControlPower) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_AddToastIfLackControlPower");
static_assert(sizeof(BattlePlayerControllerBase_AddToastIfLackControlPower) == 0x000008, "Wrong size on BattlePlayerControllerBase_AddToastIfLackControlPower");
static_assert(offsetof(BattlePlayerControllerBase_AddToastIfLackControlPower, _gun) == 0x000000, "Member 'BattlePlayerControllerBase_AddToastIfLackControlPower::_gun' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.DEBUG_CreateNewCharacter
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_DEBUG_CreateNewCharacter final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_DEBUG_CreateNewCharacter) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_DEBUG_CreateNewCharacter");
static_assert(sizeof(BattlePlayerControllerBase_DEBUG_CreateNewCharacter) == 0x000010, "Wrong size on BattlePlayerControllerBase_DEBUG_CreateNewCharacter");
static_assert(offsetof(BattlePlayerControllerBase_DEBUG_CreateNewCharacter, _type) == 0x000000, "Member 'BattlePlayerControllerBase_DEBUG_CreateNewCharacter::_type' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_DEBUG_CreateNewCharacter, _gun_type) == 0x000001, "Member 'BattlePlayerControllerBase_DEBUG_CreateNewCharacter::_gun_type' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_DEBUG_CreateNewCharacter, ReturnValue) == 0x000008, "Member 'BattlePlayerControllerBase_DEBUG_CreateNewCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.DEBUG_SetShowAimDistance
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_DEBUG_SetShowAimDistance final
{
public:
	bool                                          _is_showed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_DEBUG_SetShowAimDistance) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_DEBUG_SetShowAimDistance");
static_assert(sizeof(BattlePlayerControllerBase_DEBUG_SetShowAimDistance) == 0x000001, "Wrong size on BattlePlayerControllerBase_DEBUG_SetShowAimDistance");
static_assert(offsetof(BattlePlayerControllerBase_DEBUG_SetShowAimDistance, _is_showed) == 0x000000, "Member 'BattlePlayerControllerBase_DEBUG_SetShowAimDistance::_is_showed' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetLastPurchaseHistory
// 0x0030 (0x0030 - 0x0000)
struct BattlePlayerControllerBase_GetLastPurchaseHistory final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleStoreHistory                    ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetLastPurchaseHistory) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_GetLastPurchaseHistory");
static_assert(sizeof(BattlePlayerControllerBase_GetLastPurchaseHistory) == 0x000030, "Wrong size on BattlePlayerControllerBase_GetLastPurchaseHistory");
static_assert(offsetof(BattlePlayerControllerBase_GetLastPurchaseHistory, _item_id) == 0x000000, "Member 'BattlePlayerControllerBase_GetLastPurchaseHistory::_item_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_GetLastPurchaseHistory, ReturnValue) == 0x000010, "Member 'BattlePlayerControllerBase_GetLastPurchaseHistory::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetMinimapRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_GetMinimapRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetMinimapRenderTarget) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_GetMinimapRenderTarget");
static_assert(sizeof(BattlePlayerControllerBase_GetMinimapRenderTarget) == 0x000008, "Wrong size on BattlePlayerControllerBase_GetMinimapRenderTarget");
static_assert(offsetof(BattlePlayerControllerBase_GetMinimapRenderTarget, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetMinimapRenderTarget::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetNextAllySpectator
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_GetNextAllySpectator final
{
public:
	const class AActor*                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetNextAllySpectator) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_GetNextAllySpectator");
static_assert(sizeof(BattlePlayerControllerBase_GetNextAllySpectator) == 0x000008, "Wrong size on BattlePlayerControllerBase_GetNextAllySpectator");
static_assert(offsetof(BattlePlayerControllerBase_GetNextAllySpectator, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetNextAllySpectator::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.IsChangeMasterUIOpened
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_IsChangeMasterUIOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_IsChangeMasterUIOpened) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_IsChangeMasterUIOpened");
static_assert(sizeof(BattlePlayerControllerBase_IsChangeMasterUIOpened) == 0x000001, "Wrong size on BattlePlayerControllerBase_IsChangeMasterUIOpened");
static_assert(offsetof(BattlePlayerControllerBase_IsChangeMasterUIOpened, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_IsChangeMasterUIOpened::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnALL_ChangeActionSetting
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_OnALL_ChangeActionSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnALL_ChangeActionSetting) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_OnALL_ChangeActionSetting");
static_assert(sizeof(BattlePlayerControllerBase_OnALL_ChangeActionSetting) == 0x000001, "Wrong size on BattlePlayerControllerBase_OnALL_ChangeActionSetting");
static_assert(offsetof(BattlePlayerControllerBase_OnALL_ChangeActionSetting, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_OnALL_ChangeActionSetting::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnALL_Damaged
// 0x0038 (0x0038 - 0x0000)
struct BattlePlayerControllerBase_OnALL_Damaged final
{
public:
	struct FDamagedData                           _data;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3E[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_OnALL_Damaged) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_OnALL_Damaged");
static_assert(sizeof(BattlePlayerControllerBase_OnALL_Damaged) == 0x000038, "Wrong size on BattlePlayerControllerBase_OnALL_Damaged");
static_assert(offsetof(BattlePlayerControllerBase_OnALL_Damaged, _data) == 0x000000, "Member 'BattlePlayerControllerBase_OnALL_Damaged::_data' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_OnALL_Damaged, ReturnValue) == 0x000030, "Member 'BattlePlayerControllerBase_OnALL_Damaged::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnALL_Respawn
// 0x0030 (0x0030 - 0x0000)
struct BattlePlayerControllerBase_OnALL_Respawn final
{
public:
	struct FVector                                _loc;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _Rot;                                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnALL_Respawn) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_OnALL_Respawn");
static_assert(sizeof(BattlePlayerControllerBase_OnALL_Respawn) == 0x000030, "Wrong size on BattlePlayerControllerBase_OnALL_Respawn");
static_assert(offsetof(BattlePlayerControllerBase_OnALL_Respawn, _loc) == 0x000000, "Member 'BattlePlayerControllerBase_OnALL_Respawn::_loc' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_OnALL_Respawn, _Rot) == 0x000018, "Member 'BattlePlayerControllerBase_OnALL_Respawn::_Rot' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnCLIENT_BattleResult
// 0x00D8 (0x00D8 - 0x0000)
struct BattlePlayerControllerBase_OnCLIENT_BattleResult final
{
public:
	struct FBattleDecisionDetail                  _result;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3F[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_OnCLIENT_BattleResult) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_OnCLIENT_BattleResult");
static_assert(sizeof(BattlePlayerControllerBase_OnCLIENT_BattleResult) == 0x0000D8, "Wrong size on BattlePlayerControllerBase_OnCLIENT_BattleResult");
static_assert(offsetof(BattlePlayerControllerBase_OnCLIENT_BattleResult, _result) == 0x000000, "Member 'BattlePlayerControllerBase_OnCLIENT_BattleResult::_result' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_OnCLIENT_BattleResult, ReturnValue) == 0x0000D0, "Member 'BattlePlayerControllerBase_OnCLIENT_BattleResult::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnCLIENT_ChangeBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase final
{
public:
	EBattleModePhase                              _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase");
static_assert(sizeof(BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase) == 0x000001, "Wrong size on BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase");
static_assert(offsetof(BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase, _phase) == 0x000000, "Member 'BattlePlayerControllerBase_OnCLIENT_ChangeBattlePhase::_phase' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnCLIENT_Hit
// 0x00B0 (0x00B0 - 0x0000)
struct BattlePlayerControllerBase_OnCLIENT_Hit final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F40[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_OnCLIENT_Hit) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_OnCLIENT_Hit");
static_assert(sizeof(BattlePlayerControllerBase_OnCLIENT_Hit) == 0x0000B0, "Wrong size on BattlePlayerControllerBase_OnCLIENT_Hit");
static_assert(offsetof(BattlePlayerControllerBase_OnCLIENT_Hit, _hit) == 0x000000, "Member 'BattlePlayerControllerBase_OnCLIENT_Hit::_hit' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_OnCLIENT_Hit, ReturnValue) == 0x0000A8, "Member 'BattlePlayerControllerBase_OnCLIENT_Hit::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnCLIENT_ShowResult
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_OnCLIENT_ShowResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnCLIENT_ShowResult) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_OnCLIENT_ShowResult");
static_assert(sizeof(BattlePlayerControllerBase_OnCLIENT_ShowResult) == 0x000001, "Wrong size on BattlePlayerControllerBase_OnCLIENT_ShowResult");
static_assert(offsetof(BattlePlayerControllerBase_OnCLIENT_ShowResult, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_OnCLIENT_ShowResult::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnKillLog
// 0x0030 (0x0030 - 0x0000)
struct BattlePlayerControllerBase_OnKillLog final
{
public:
	struct FKillLog                               _log;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F41[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_OnKillLog) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_OnKillLog");
static_assert(sizeof(BattlePlayerControllerBase_OnKillLog) == 0x000030, "Wrong size on BattlePlayerControllerBase_OnKillLog");
static_assert(offsetof(BattlePlayerControllerBase_OnKillLog, _log) == 0x000000, "Member 'BattlePlayerControllerBase_OnKillLog::_log' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_OnKillLog, ReturnValue) == 0x000028, "Member 'BattlePlayerControllerBase_OnKillLog::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnSERVER_Died
// 0x00B0 (0x00B0 - 0x0000)
struct BattlePlayerControllerBase_OnSERVER_Died final
{
public:
	struct FHitData                               _last_hit_data;                                    // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F42[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_OnSERVER_Died) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_OnSERVER_Died");
static_assert(sizeof(BattlePlayerControllerBase_OnSERVER_Died) == 0x0000B0, "Wrong size on BattlePlayerControllerBase_OnSERVER_Died");
static_assert(offsetof(BattlePlayerControllerBase_OnSERVER_Died, _last_hit_data) == 0x000000, "Member 'BattlePlayerControllerBase_OnSERVER_Died::_last_hit_data' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_OnSERVER_Died, ReturnValue) == 0x0000A8, "Member 'BattlePlayerControllerBase_OnSERVER_Died::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnShowResult
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_OnShowResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnShowResult) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_OnShowResult");
static_assert(sizeof(BattlePlayerControllerBase_OnShowResult) == 0x000001, "Wrong size on BattlePlayerControllerBase_OnShowResult");
static_assert(offsetof(BattlePlayerControllerBase_OnShowResult, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_OnShowResult::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnShowRoundResult
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_OnShowRoundResult final
{
public:
	struct FRoundResult                           _result;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnShowRoundResult) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_OnShowRoundResult");
static_assert(sizeof(BattlePlayerControllerBase_OnShowRoundResult) == 0x000008, "Wrong size on BattlePlayerControllerBase_OnShowRoundResult");
static_assert(offsetof(BattlePlayerControllerBase_OnShowRoundResult, _result) == 0x000000, "Member 'BattlePlayerControllerBase_OnShowRoundResult::_result' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.OnShowRoundStart
// 0x000C (0x000C - 0x0000)
struct BattlePlayerControllerBase_OnShowRoundStart final
{
public:
	struct FRoundStartNotify                      _notify;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_OnShowRoundStart) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_OnShowRoundStart");
static_assert(sizeof(BattlePlayerControllerBase_OnShowRoundStart) == 0x00000C, "Wrong size on BattlePlayerControllerBase_OnShowRoundStart");
static_assert(offsetof(BattlePlayerControllerBase_OnShowRoundStart, _notify) == 0x000000, "Member 'BattlePlayerControllerBase_OnShowRoundStart::_notify' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RemoveFullScreenWidget
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_RemoveFullScreenWidget final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RemoveFullScreenWidget) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RemoveFullScreenWidget");
static_assert(sizeof(BattlePlayerControllerBase_RemoveFullScreenWidget) == 0x000008, "Wrong size on BattlePlayerControllerBase_RemoveFullScreenWidget");
static_assert(offsetof(BattlePlayerControllerBase_RemoveFullScreenWidget, _widget) == 0x000000, "Member 'BattlePlayerControllerBase_RemoveFullScreenWidget::_widget' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_ALL_DEBUG_Slomo
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo final
{
public:
	int32                                         _slomo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo");
static_assert(sizeof(BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo) == 0x000004, "Wrong size on BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo");
static_assert(offsetof(BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo, _slomo) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_ALL_DEBUG_Slomo::_slomo' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_BattleResult
// 0x00D0 (0x00D0 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_BattleResult final
{
public:
	struct FBattleDecisionDetail                  _result;                                           // 0x0000(0x00D0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_BattleResult) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_BattleResult");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_BattleResult) == 0x0000D0, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_BattleResult");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_BattleResult, _result) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_BattleResult::_result' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_ChangeMasterMessage
// 0x0002 (0x0002 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage final
{
public:
	bool                                          _is_enable_change;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _change_chara_type;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage) == 0x000002, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage, _is_enable_change) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage::_is_enable_change' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage, _change_chara_type) == 0x000001, "Member 'BattlePlayerControllerBase_RPC_CLIENT_ChangeMasterMessage::_change_chara_type' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_DEBUG_MissionProgress
// 0x0028 (0x0028 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress final
{
public:
	struct FItemID                                _task_id;                                          // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Mission                        _mission_id;                                       // 0x0010(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F43[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress) == 0x000028, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress, _task_id) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress::_task_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress, _mission_id) == 0x000010, "Member 'BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress::_mission_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress, _count) == 0x000020, "Member 'BattlePlayerControllerBase_RPC_CLIENT_DEBUG_MissionProgress::_count' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_Emoticon
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_Emoticon final
{
public:
	struct FEmoticonData                          _emoticon;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_Emoticon) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_Emoticon");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_Emoticon) == 0x000018, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_Emoticon");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_Emoticon, _emoticon) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_Emoticon::_emoticon' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_KillerInfo
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_KillerInfo final
{
public:
	const class ACharaBase*                       _killer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACharaBase*                       _victim;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_KillerInfo) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_KillerInfo");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_KillerInfo) == 0x000010, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_KillerInfo");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_KillerInfo, _killer) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_KillerInfo::_killer' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_KillerInfo, _victim) == 0x000008, "Member 'BattlePlayerControllerBase_RPC_CLIENT_KillerInfo::_victim' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_KillLog
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_KillLog final
{
public:
	struct FNetKillLog                            _log;                                              // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_KillLog) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_KillLog");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_KillLog) == 0x000018, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_KillLog");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_KillLog, _log) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_KillLog::_log' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_KillStreak
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_KillStreak final
{
public:
	TArray<EKillStreak>                           _streaks;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_KillStreak) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_KillStreak");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_KillStreak) == 0x000010, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_KillStreak");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_KillStreak, _streaks) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_KillStreak::_streaks' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_MissionSuccess
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess final
{
public:
	struct FItemID_Mission                        _mission_id;                                       // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess) == 0x000010, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess, _mission_id) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_MissionSuccess::_mission_id' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_OnGetIngameMoney
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney final
{
public:
	int32                                         _inc_money;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoldRewardType                               _reward_type;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F44[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney) == 0x000008, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney, _inc_money) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney::_inc_money' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney, _reward_type) == 0x000004, "Member 'BattlePlayerControllerBase_RPC_CLIENT_OnGetIngameMoney::_reward_type' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_Ping
// 0x0038 (0x0038 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_Ping final
{
public:
	struct FPingData                              _ping;                                             // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_Ping) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_Ping");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_Ping) == 0x000038, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_Ping");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_Ping, _ping) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_Ping::_ping' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_RechargeArmor
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor final
{
public:
	float                                         _inc_armor_rate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor) == 0x000004, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor, _inc_armor_rate) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_RechargeArmor::_inc_armor_rate' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_Refund_Item_ACK
// 0x0028 (0x0028 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK final
{
public:
	bool                                          _is_success;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F45[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattleStoreHistory                    _history;                                          // 0x0008(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK) == 0x000028, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK, _is_success) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK::_is_success' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK, _history) == 0x000008, "Member 'BattlePlayerControllerBase_RPC_CLIENT_Refund_Item_ACK::_history' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_RequestPurchase_BattleStore_ACK
// 0x0038 (0x0038 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK final
{
public:
	bool                                          _is_success;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F46[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleStoreHistory                    _history;                                          // 0x0018(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK) == 0x000038, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK, _is_success) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK::_is_success' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK, _item_id) == 0x000008, "Member 'BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK::_item_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK, _history) == 0x000018, "Member 'BattlePlayerControllerBase_RPC_CLIENT_RequestPurchase_BattleStore_ACK::_history' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_Client_Revive_Alert
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_RPC_Client_Revive_Alert final
{
public:
	class ACharaBase*                             _revived_chara;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             _saver_chara;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_Client_Revive_Alert) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_Client_Revive_Alert");
static_assert(sizeof(BattlePlayerControllerBase_RPC_Client_Revive_Alert) == 0x000010, "Wrong size on BattlePlayerControllerBase_RPC_Client_Revive_Alert");
static_assert(offsetof(BattlePlayerControllerBase_RPC_Client_Revive_Alert, _revived_chara) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_Client_Revive_Alert::_revived_chara' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_Client_Revive_Alert, _saver_chara) == 0x000008, "Member 'BattlePlayerControllerBase_RPC_Client_Revive_Alert::_saver_chara' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_RoundStart
// 0x000C (0x000C - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_RoundStart final
{
public:
	struct FRoundStartNotify                      _notify;                                           // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_RoundStart) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_RoundStart");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_RoundStart) == 0x00000C, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_RoundStart");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_RoundStart, _notify) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_RoundStart::_notify' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_CLIENT_SendRadioChat
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat final
{
public:
	struct FUserID                                _speacker_user_id;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadioChatID                           _radio_chat_id;                                    // 0x0008(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat");
static_assert(sizeof(BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat) == 0x000010, "Wrong size on BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat, _speacker_user_id) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat::_speacker_user_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat, _radio_chat_id) == 0x000008, "Member 'BattlePlayerControllerBase_RPC_CLIENT_SendRadioChat::_radio_chat_id' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_DEBUG_AddAI
// 0x0020 (0x0020 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI final
{
public:
	class FString                                 _nickname;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        _Team;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    _armor_type;                                       // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAI_Characteristic                     _characteristic;                                   // 0x0014(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI) == 0x000020, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI, _nickname) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI::_nickname' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI, _Team) == 0x000010, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI::_Team' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI, _chara_type) == 0x000011, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI::_chara_type' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI, _armor_type) == 0x000012, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI::_armor_type' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI, _gun_type) == 0x000013, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI::_gun_type' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI, _characteristic) == 0x000014, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_AddAI::_characteristic' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_DEBUG_ChangeCharacterType
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType) == 0x000001, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType, _chara_type) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_ChangeCharacterType::_chara_type' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_DEBUG_Slomo
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo final
{
public:
	int32                                         _slomo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo) == 0x000004, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo, _slomo) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_DEBUG_Slomo::_slomo' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_PleaseChangeMaster
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster final
{
public:
	ECharaType                                    _new_chara_type;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster) == 0x000001, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster, _new_chara_type) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_PleaseChangeMaster::_new_chara_type' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_Refund_Item
// 0x0020 (0x0020 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_Refund_Item final
{
public:
	struct FBattleStoreHistory                    _history;                                          // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_Refund_Item) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_Refund_Item");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_Refund_Item) == 0x000020, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_Refund_Item");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_Refund_Item, _history) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_Refund_Item::_history' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_RequestEmoticon
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon final
{
public:
	struct FEmoticonData                          _emoticon;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon) == 0x000018, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon, _emoticon) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_RequestEmoticon::_emoticon' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_RequestPing
// 0x0038 (0x0038 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_RequestPing final
{
public:
	struct FPingData                              _ping;                                             // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_RequestPing) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_RequestPing");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_RequestPing) == 0x000038, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_RequestPing");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_RequestPing, _ping) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_RequestPing::_ping' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_RequestPurchase_BattleStore
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _params;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F47[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore) == 0x000018, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore, _item_id) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore::_item_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore, _params) == 0x000010, "Member 'BattlePlayerControllerBase_RPC_SERVER_RequestPurchase_BattleStore::_params' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_RequestRadioChat
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat final
{
public:
	struct FRadioChatID                           _radio_chat_id;                                    // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat) == 0x000008, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat, _radio_chat_id) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_RequestRadioChat::_radio_chat_id' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_SpectateCCTV
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV) == 0x000004, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV, _idx) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_SpectateCCTV::_idx' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_SpectatePlayer
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F48[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _idx;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer) == 0x000008, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer, _Team) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer::_Team' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer, _idx) == 0x000004, "Member 'BattlePlayerControllerBase_RPC_SERVER_SpectatePlayer::_idx' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.RPC_SERVER_UpdatePlayerFPS
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS final
{
public:
	uint8                                         _fps;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS");
static_assert(sizeof(BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS) == 0x000001, "Wrong size on BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS");
static_assert(offsetof(BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS, _fps) == 0x000000, "Member 'BattlePlayerControllerBase_RPC_SERVER_UpdatePlayerFPS::_fps' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.SetInteractionProgressBar
// 0x000C (0x000C - 0x0000)
struct BattlePlayerControllerBase_SetInteractionProgressBar final
{
public:
	bool                                          _visible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F49[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _duration;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_SetInteractionProgressBar) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_SetInteractionProgressBar");
static_assert(sizeof(BattlePlayerControllerBase_SetInteractionProgressBar) == 0x00000C, "Wrong size on BattlePlayerControllerBase_SetInteractionProgressBar");
static_assert(offsetof(BattlePlayerControllerBase_SetInteractionProgressBar, _visible) == 0x000000, "Member 'BattlePlayerControllerBase_SetInteractionProgressBar::_visible' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_SetInteractionProgressBar, _duration) == 0x000004, "Member 'BattlePlayerControllerBase_SetInteractionProgressBar::_duration' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_SetInteractionProgressBar, ReturnValue) == 0x000008, "Member 'BattlePlayerControllerBase_SetInteractionProgressBar::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.ShowHelpUI
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_ShowHelpUI final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_ShowHelpUI) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_ShowHelpUI");
static_assert(sizeof(BattlePlayerControllerBase_ShowHelpUI) == 0x000001, "Wrong size on BattlePlayerControllerBase_ShowHelpUI");
static_assert(offsetof(BattlePlayerControllerBase_ShowHelpUI, _show) == 0x000000, "Member 'BattlePlayerControllerBase_ShowHelpUI::_show' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.ShowHUD
// 0x0010 (0x0010 - 0x0000)
struct BattlePlayerControllerBase_ShowHUD final
{
public:
	bool                                          _is_visible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UObject*                                _caller;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_ShowHUD) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_ShowHUD");
static_assert(sizeof(BattlePlayerControllerBase_ShowHUD) == 0x000010, "Wrong size on BattlePlayerControllerBase_ShowHUD");
static_assert(offsetof(BattlePlayerControllerBase_ShowHUD, _is_visible) == 0x000000, "Member 'BattlePlayerControllerBase_ShowHUD::_is_visible' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_ShowHUD, _caller) == 0x000008, "Member 'BattlePlayerControllerBase_ShowHUD::_caller' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.ShowMissionArea
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerControllerBase_ShowMissionArea final
{
public:
	class FString                                 _area_name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerControllerBase_ShowMissionArea) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_ShowMissionArea");
static_assert(sizeof(BattlePlayerControllerBase_ShowMissionArea) == 0x000018, "Wrong size on BattlePlayerControllerBase_ShowMissionArea");
static_assert(offsetof(BattlePlayerControllerBase_ShowMissionArea, _area_name) == 0x000000, "Member 'BattlePlayerControllerBase_ShowMissionArea::_area_name' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_ShowMissionArea, _show) == 0x000010, "Member 'BattlePlayerControllerBase_ShowMissionArea::_show' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.ShowTabUI
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_ShowTabUI final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_ShowTabUI) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_ShowTabUI");
static_assert(sizeof(BattlePlayerControllerBase_ShowTabUI) == 0x000001, "Wrong size on BattlePlayerControllerBase_ShowTabUI");
static_assert(offsetof(BattlePlayerControllerBase_ShowTabUI, _show) == 0x000000, "Member 'BattlePlayerControllerBase_ShowTabUI::_show' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.CLIENT_GetDeviationAngle
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_CLIENT_GetDeviationAngle final
{
public:
	float                                         _deviation;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_CLIENT_GetDeviationAngle) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_CLIENT_GetDeviationAngle");
static_assert(sizeof(BattlePlayerControllerBase_CLIENT_GetDeviationAngle) == 0x000008, "Wrong size on BattlePlayerControllerBase_CLIENT_GetDeviationAngle");
static_assert(offsetof(BattlePlayerControllerBase_CLIENT_GetDeviationAngle, _deviation) == 0x000000, "Member 'BattlePlayerControllerBase_CLIENT_GetDeviationAngle::_deviation' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_CLIENT_GetDeviationAngle, ReturnValue) == 0x000004, "Member 'BattlePlayerControllerBase_CLIENT_GetDeviationAngle::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.DEBUG_GetShowAimDistance
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_DEBUG_GetShowAimDistance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_DEBUG_GetShowAimDistance) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_DEBUG_GetShowAimDistance");
static_assert(sizeof(BattlePlayerControllerBase_DEBUG_GetShowAimDistance) == 0x000001, "Wrong size on BattlePlayerControllerBase_DEBUG_GetShowAimDistance");
static_assert(offsetof(BattlePlayerControllerBase_DEBUG_GetShowAimDistance, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_DEBUG_GetShowAimDistance::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetChara
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_GetChara final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetChara) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_GetChara");
static_assert(sizeof(BattlePlayerControllerBase_GetChara) == 0x000008, "Wrong size on BattlePlayerControllerBase_GetChara");
static_assert(offsetof(BattlePlayerControllerBase_GetChara, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetChara::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetCharacterType
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_GetCharacterType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetCharacterType) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_GetCharacterType");
static_assert(sizeof(BattlePlayerControllerBase_GetCharacterType) == 0x000001, "Wrong size on BattlePlayerControllerBase_GetCharacterType");
static_assert(offsetof(BattlePlayerControllerBase_GetCharacterType, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetCharacterType::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetCurrentTargetChara
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_GetCurrentTargetChara final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetCurrentTargetChara) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_GetCurrentTargetChara");
static_assert(sizeof(BattlePlayerControllerBase_GetCurrentTargetChara) == 0x000008, "Wrong size on BattlePlayerControllerBase_GetCurrentTargetChara");
static_assert(offsetof(BattlePlayerControllerBase_GetCurrentTargetChara, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetCurrentTargetChara::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetLastRoundResult
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerControllerBase_GetLastRoundResult final
{
public:
	struct FRoundResult                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetLastRoundResult) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_GetLastRoundResult");
static_assert(sizeof(BattlePlayerControllerBase_GetLastRoundResult) == 0x000008, "Wrong size on BattlePlayerControllerBase_GetLastRoundResult");
static_assert(offsetof(BattlePlayerControllerBase_GetLastRoundResult, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetLastRoundResult::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetLookAtRay
// 0x0038 (0x0038 - 0x0000)
struct BattlePlayerControllerBase_GetLookAtRay final
{
public:
	float                                         _distance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _start;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _end;                                              // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetLookAtRay) == 0x000008, "Wrong alignment on BattlePlayerControllerBase_GetLookAtRay");
static_assert(sizeof(BattlePlayerControllerBase_GetLookAtRay) == 0x000038, "Wrong size on BattlePlayerControllerBase_GetLookAtRay");
static_assert(offsetof(BattlePlayerControllerBase_GetLookAtRay, _distance) == 0x000000, "Member 'BattlePlayerControllerBase_GetLookAtRay::_distance' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_GetLookAtRay, _start) == 0x000008, "Member 'BattlePlayerControllerBase_GetLookAtRay::_start' has a wrong offset!");
static_assert(offsetof(BattlePlayerControllerBase_GetLookAtRay, _end) == 0x000020, "Member 'BattlePlayerControllerBase_GetLookAtRay::_end' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetRadioChatCooltime
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerControllerBase_GetRadioChatCooltime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetRadioChatCooltime) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_GetRadioChatCooltime");
static_assert(sizeof(BattlePlayerControllerBase_GetRadioChatCooltime) == 0x000004, "Wrong size on BattlePlayerControllerBase_GetRadioChatCooltime");
static_assert(offsetof(BattlePlayerControllerBase_GetRadioChatCooltime, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetRadioChatCooltime::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.GetRadioChatStock
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerControllerBase_GetRadioChatStock final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_GetRadioChatStock) == 0x000004, "Wrong alignment on BattlePlayerControllerBase_GetRadioChatStock");
static_assert(sizeof(BattlePlayerControllerBase_GetRadioChatStock) == 0x000004, "Wrong size on BattlePlayerControllerBase_GetRadioChatStock");
static_assert(offsetof(BattlePlayerControllerBase_GetRadioChatStock, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_GetRadioChatStock::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerControllerBase.IsBattleStoreOpened
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerControllerBase_IsBattleStoreOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerControllerBase_IsBattleStoreOpened) == 0x000001, "Wrong alignment on BattlePlayerControllerBase_IsBattleStoreOpened");
static_assert(sizeof(BattlePlayerControllerBase_IsBattleStoreOpened) == 0x000001, "Wrong size on BattlePlayerControllerBase_IsBattleStoreOpened");
static_assert(offsetof(BattlePlayerControllerBase_IsBattleStoreOpened, ReturnValue) == 0x000000, "Member 'BattlePlayerControllerBase_IsBattleStoreOpened::ReturnValue' has a wrong offset!");

// Function Stigma.TrainingRoomPlayerController.OnPointingActor
// 0x0010 (0x0010 - 0x0000)
struct TrainingRoomPlayerController_OnPointingActor final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TrainingRoomPlayerController_OnPointingActor) == 0x000008, "Wrong alignment on TrainingRoomPlayerController_OnPointingActor");
static_assert(sizeof(TrainingRoomPlayerController_OnPointingActor) == 0x000010, "Wrong size on TrainingRoomPlayerController_OnPointingActor");
static_assert(offsetof(TrainingRoomPlayerController_OnPointingActor, _Actor) == 0x000000, "Member 'TrainingRoomPlayerController_OnPointingActor::_Actor' has a wrong offset!");
static_assert(offsetof(TrainingRoomPlayerController_OnPointingActor, ReturnValue) == 0x000008, "Member 'TrainingRoomPlayerController_OnPointingActor::ReturnValue' has a wrong offset!");

// Function Stigma.TrainingRoomPlayerController.GetPointingTargetActor
// 0x0008 (0x0008 - 0x0000)
struct TrainingRoomPlayerController_GetPointingTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingRoomPlayerController_GetPointingTargetActor) == 0x000008, "Wrong alignment on TrainingRoomPlayerController_GetPointingTargetActor");
static_assert(sizeof(TrainingRoomPlayerController_GetPointingTargetActor) == 0x000008, "Wrong size on TrainingRoomPlayerController_GetPointingTargetActor");
static_assert(offsetof(TrainingRoomPlayerController_GetPointingTargetActor, ReturnValue) == 0x000000, "Member 'TrainingRoomPlayerController_GetPointingTargetActor::ReturnValue' has a wrong offset!");

// Function Stigma.AbnormalsBlueprintLibrary.IsNone
// 0x0002 (0x0002 - 0x0000)
struct AbnormalsBlueprintLibrary_IsNone final
{
public:
	struct FAbnormals                             _Flags;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbnormalsBlueprintLibrary_IsNone) == 0x000001, "Wrong alignment on AbnormalsBlueprintLibrary_IsNone");
static_assert(sizeof(AbnormalsBlueprintLibrary_IsNone) == 0x000002, "Wrong size on AbnormalsBlueprintLibrary_IsNone");
static_assert(offsetof(AbnormalsBlueprintLibrary_IsNone, _Flags) == 0x000000, "Member 'AbnormalsBlueprintLibrary_IsNone::_Flags' has a wrong offset!");
static_assert(offsetof(AbnormalsBlueprintLibrary_IsNone, ReturnValue) == 0x000001, "Member 'AbnormalsBlueprintLibrary_IsNone::ReturnValue' has a wrong offset!");

// Function Stigma.AbnormalsBlueprintLibrary.IsSet
// 0x0003 (0x0003 - 0x0000)
struct AbnormalsBlueprintLibrary_IsSet final
{
public:
	struct FAbnormals                             _Flags;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAbnormal                                     _abnormal;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbnormalsBlueprintLibrary_IsSet) == 0x000001, "Wrong alignment on AbnormalsBlueprintLibrary_IsSet");
static_assert(sizeof(AbnormalsBlueprintLibrary_IsSet) == 0x000003, "Wrong size on AbnormalsBlueprintLibrary_IsSet");
static_assert(offsetof(AbnormalsBlueprintLibrary_IsSet, _Flags) == 0x000000, "Member 'AbnormalsBlueprintLibrary_IsSet::_Flags' has a wrong offset!");
static_assert(offsetof(AbnormalsBlueprintLibrary_IsSet, _abnormal) == 0x000001, "Member 'AbnormalsBlueprintLibrary_IsSet::_abnormal' has a wrong offset!");
static_assert(offsetof(AbnormalsBlueprintLibrary_IsSet, ReturnValue) == 0x000002, "Member 'AbnormalsBlueprintLibrary_IsSet::ReturnValue' has a wrong offset!");

// Function Stigma.AISpawnVolume.GetRandomLocationInVolume
// 0x0018 (0x0018 - 0x0000)
struct AISpawnVolume_GetRandomLocationInVolume final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISpawnVolume_GetRandomLocationInVolume) == 0x000008, "Wrong alignment on AISpawnVolume_GetRandomLocationInVolume");
static_assert(sizeof(AISpawnVolume_GetRandomLocationInVolume) == 0x000018, "Wrong size on AISpawnVolume_GetRandomLocationInVolume");
static_assert(offsetof(AISpawnVolume_GetRandomLocationInVolume, ReturnValue) == 0x000000, "Member 'AISpawnVolume_GetRandomLocationInVolume::ReturnValue' has a wrong offset!");

// Function Stigma.AISpawnVolume.GetRandomRoamingPoint
// 0x0018 (0x0018 - 0x0000)
struct AISpawnVolume_GetRandomRoamingPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISpawnVolume_GetRandomRoamingPoint) == 0x000008, "Wrong alignment on AISpawnVolume_GetRandomRoamingPoint");
static_assert(sizeof(AISpawnVolume_GetRandomRoamingPoint) == 0x000018, "Wrong size on AISpawnVolume_GetRandomRoamingPoint");
static_assert(offsetof(AISpawnVolume_GetRandomRoamingPoint, ReturnValue) == 0x000000, "Member 'AISpawnVolume_GetRandomRoamingPoint::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BattlePassLevelUpPopup.InitWidget
// 0x0020 (0x0020 - 0x0000)
struct UI_BattlePassLevelUpPopup_InitWidget final
{
public:
	class FText                                   _Title;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F56[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassLevelUpPopup_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassLevelUpPopup_InitWidget");
static_assert(sizeof(UI_BattlePassLevelUpPopup_InitWidget) == 0x000020, "Wrong size on UI_BattlePassLevelUpPopup_InitWidget");
static_assert(offsetof(UI_BattlePassLevelUpPopup_InitWidget, _Title) == 0x000000, "Member 'UI_BattlePassLevelUpPopup_InitWidget::_Title' has a wrong offset!");
static_assert(offsetof(UI_BattlePassLevelUpPopup_InitWidget, _level) == 0x000018, "Member 'UI_BattlePassLevelUpPopup_InitWidget::_level' has a wrong offset!");

// Function Stigma.StigmaAIControllerBase.OnSERVER_Died
// 0x00B0 (0x00B0 - 0x0000)
struct StigmaAIControllerBase_OnSERVER_Died final
{
public:
	struct FHitData                               _last_hit_data;                                    // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F58[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaAIControllerBase_OnSERVER_Died) == 0x000008, "Wrong alignment on StigmaAIControllerBase_OnSERVER_Died");
static_assert(sizeof(StigmaAIControllerBase_OnSERVER_Died) == 0x0000B0, "Wrong size on StigmaAIControllerBase_OnSERVER_Died");
static_assert(offsetof(StigmaAIControllerBase_OnSERVER_Died, _last_hit_data) == 0x000000, "Member 'StigmaAIControllerBase_OnSERVER_Died::_last_hit_data' has a wrong offset!");
static_assert(offsetof(StigmaAIControllerBase_OnSERVER_Died, ReturnValue) == 0x0000A8, "Member 'StigmaAIControllerBase_OnSERVER_Died::ReturnValue' has a wrong offset!");

// Function Stigma.AdvancedAIController.MakeCharacteristic
// 0x0018 (0x0018 - 0x0000)
struct AdvancedAIController_MakeCharacteristic final
{
public:
	int32                                         _elo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _coward;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _shooting_oriented;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAI_Characteristic                     ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedAIController_MakeCharacteristic) == 0x000004, "Wrong alignment on AdvancedAIController_MakeCharacteristic");
static_assert(sizeof(AdvancedAIController_MakeCharacteristic) == 0x000018, "Wrong size on AdvancedAIController_MakeCharacteristic");
static_assert(offsetof(AdvancedAIController_MakeCharacteristic, _elo) == 0x000000, "Member 'AdvancedAIController_MakeCharacteristic::_elo' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_MakeCharacteristic, _coward) == 0x000004, "Member 'AdvancedAIController_MakeCharacteristic::_coward' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_MakeCharacteristic, _shooting_oriented) == 0x000008, "Member 'AdvancedAIController_MakeCharacteristic::_shooting_oriented' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_MakeCharacteristic, ReturnValue) == 0x00000C, "Member 'AdvancedAIController_MakeCharacteristic::ReturnValue' has a wrong offset!");

// Function Stigma.AdvancedAIController.BoostTargetEnemy
// 0x0008 (0x0008 - 0x0000)
struct AdvancedAIController_BoostTargetEnemy final
{
public:
	class ACharaBase*                             _enemy;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedAIController_BoostTargetEnemy) == 0x000008, "Wrong alignment on AdvancedAIController_BoostTargetEnemy");
static_assert(sizeof(AdvancedAIController_BoostTargetEnemy) == 0x000008, "Wrong size on AdvancedAIController_BoostTargetEnemy");
static_assert(offsetof(AdvancedAIController_BoostTargetEnemy, _enemy) == 0x000000, "Member 'AdvancedAIController_BoostTargetEnemy::_enemy' has a wrong offset!");

// Function Stigma.AdvancedAIController.OnTargetPerceptionForgotten
// 0x0008 (0x0008 - 0x0000)
struct AdvancedAIController_OnTargetPerceptionForgotten final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedAIController_OnTargetPerceptionForgotten) == 0x000008, "Wrong alignment on AdvancedAIController_OnTargetPerceptionForgotten");
static_assert(sizeof(AdvancedAIController_OnTargetPerceptionForgotten) == 0x000008, "Wrong size on AdvancedAIController_OnTargetPerceptionForgotten");
static_assert(offsetof(AdvancedAIController_OnTargetPerceptionForgotten, _target) == 0x000000, "Member 'AdvancedAIController_OnTargetPerceptionForgotten::_target' has a wrong offset!");

// Function Stigma.AdvancedAIController.OnTargetPerceptionUpdated
// 0x0060 (0x0060 - 0x0000)
struct AdvancedAIController_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            _stimulus;                                         // 0x0008(0x0058)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedAIController_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on AdvancedAIController_OnTargetPerceptionUpdated");
static_assert(sizeof(AdvancedAIController_OnTargetPerceptionUpdated) == 0x000060, "Wrong size on AdvancedAIController_OnTargetPerceptionUpdated");
static_assert(offsetof(AdvancedAIController_OnTargetPerceptionUpdated, _target) == 0x000000, "Member 'AdvancedAIController_OnTargetPerceptionUpdated::_target' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_OnTargetPerceptionUpdated, _stimulus) == 0x000008, "Member 'AdvancedAIController_OnTargetPerceptionUpdated::_stimulus' has a wrong offset!");

// Function Stigma.AdvancedAIController.Setup
// 0x0010 (0x0010 - 0x0000)
struct AdvancedAIController_Setup final
{
public:
	EAIRole                                       _role;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _elo;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _coward;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _shooting_oriented;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedAIController_Setup) == 0x000004, "Wrong alignment on AdvancedAIController_Setup");
static_assert(sizeof(AdvancedAIController_Setup) == 0x000010, "Wrong size on AdvancedAIController_Setup");
static_assert(offsetof(AdvancedAIController_Setup, _role) == 0x000000, "Member 'AdvancedAIController_Setup::_role' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_Setup, _elo) == 0x000004, "Member 'AdvancedAIController_Setup::_elo' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_Setup, _coward) == 0x000008, "Member 'AdvancedAIController_Setup::_coward' has a wrong offset!");
static_assert(offsetof(AdvancedAIController_Setup, _shooting_oriented) == 0x00000C, "Member 'AdvancedAIController_Setup::_shooting_oriented' has a wrong offset!");

// Function Stigma.AdvancedBlueprintMapLibrary.Map_KeyValue
// 0x0060 (0x0060 - 0x0000)
struct AdvancedBlueprintMapLibrary_Map_KeyValue final
{
public:
	TMap<int32, int32>                            _target_map;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_Key;                                          // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_value;                                        // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F60[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AdvancedBlueprintMapLibrary_Map_KeyValue) == 0x000008, "Wrong alignment on AdvancedBlueprintMapLibrary_Map_KeyValue");
static_assert(sizeof(AdvancedBlueprintMapLibrary_Map_KeyValue) == 0x000060, "Wrong size on AdvancedBlueprintMapLibrary_Map_KeyValue");
static_assert(offsetof(AdvancedBlueprintMapLibrary_Map_KeyValue, _target_map) == 0x000000, "Member 'AdvancedBlueprintMapLibrary_Map_KeyValue::_target_map' has a wrong offset!");
static_assert(offsetof(AdvancedBlueprintMapLibrary_Map_KeyValue, _index) == 0x000050, "Member 'AdvancedBlueprintMapLibrary_Map_KeyValue::_index' has a wrong offset!");
static_assert(offsetof(AdvancedBlueprintMapLibrary_Map_KeyValue, _out_Key) == 0x000054, "Member 'AdvancedBlueprintMapLibrary_Map_KeyValue::_out_Key' has a wrong offset!");
static_assert(offsetof(AdvancedBlueprintMapLibrary_Map_KeyValue, _out_value) == 0x000058, "Member 'AdvancedBlueprintMapLibrary_Map_KeyValue::_out_value' has a wrong offset!");

// Function Stigma.UI_CompetitionRewardPopup.SetValue
// 0x0030 (0x0030 - 0x0000)
struct UI_CompetitionRewardPopup_SetValue final
{
public:
	struct FBC_CompetitionEnd                     _packet;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CompetitionRewardPopup_SetValue) == 0x000008, "Wrong alignment on UI_CompetitionRewardPopup_SetValue");
static_assert(sizeof(UI_CompetitionRewardPopup_SetValue) == 0x000030, "Wrong size on UI_CompetitionRewardPopup_SetValue");
static_assert(offsetof(UI_CompetitionRewardPopup_SetValue, _packet) == 0x000000, "Member 'UI_CompetitionRewardPopup_SetValue::_packet' has a wrong offset!");

// Function Stigma.GameContext.GetEmptyPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct GameContext_GetEmptyPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameContext_GetEmptyPlayerCount) == 0x000004, "Wrong alignment on GameContext_GetEmptyPlayerCount");
static_assert(sizeof(GameContext_GetEmptyPlayerCount) == 0x000004, "Wrong size on GameContext_GetEmptyPlayerCount");
static_assert(offsetof(GameContext_GetEmptyPlayerCount, ReturnValue) == 0x000000, "Member 'GameContext_GetEmptyPlayerCount::ReturnValue' has a wrong offset!");

// Function Stigma.GameContext.GetMaxPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct GameContext_GetMaxPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameContext_GetMaxPlayerCount) == 0x000004, "Wrong alignment on GameContext_GetMaxPlayerCount");
static_assert(sizeof(GameContext_GetMaxPlayerCount) == 0x000004, "Wrong size on GameContext_GetMaxPlayerCount");
static_assert(offsetof(GameContext_GetMaxPlayerCount, ReturnValue) == 0x000000, "Member 'GameContext_GetMaxPlayerCount::ReturnValue' has a wrong offset!");

// Function Stigma.GameContext.GetMaxTeamCount
// 0x0004 (0x0004 - 0x0000)
struct GameContext_GetMaxTeamCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameContext_GetMaxTeamCount) == 0x000004, "Wrong alignment on GameContext_GetMaxTeamCount");
static_assert(sizeof(GameContext_GetMaxTeamCount) == 0x000004, "Wrong size on GameContext_GetMaxTeamCount");
static_assert(offsetof(GameContext_GetMaxTeamCount, ReturnValue) == 0x000000, "Member 'GameContext_GetMaxTeamCount::ReturnValue' has a wrong offset!");

// Function Stigma.NetSyncBase.RPC_ALL_SyncTx
// 0x0030 (0x0030 - 0x0000)
struct NetSyncBase_RPC_ALL_SyncTx final
{
public:
	struct FSyncTransform                         Tx;                                                // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSyncBase_RPC_ALL_SyncTx) == 0x000008, "Wrong alignment on NetSyncBase_RPC_ALL_SyncTx");
static_assert(sizeof(NetSyncBase_RPC_ALL_SyncTx) == 0x000030, "Wrong size on NetSyncBase_RPC_ALL_SyncTx");
static_assert(offsetof(NetSyncBase_RPC_ALL_SyncTx, Tx) == 0x000000, "Member 'NetSyncBase_RPC_ALL_SyncTx::Tx' has a wrong offset!");

// Function Stigma.NetSyncBase.RPC_SERVER_SyncTx
// 0x0030 (0x0030 - 0x0000)
struct NetSyncBase_RPC_SERVER_SyncTx final
{
public:
	struct FSyncTransform                         Tx;                                                // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSyncBase_RPC_SERVER_SyncTx) == 0x000008, "Wrong alignment on NetSyncBase_RPC_SERVER_SyncTx");
static_assert(sizeof(NetSyncBase_RPC_SERVER_SyncTx) == 0x000030, "Wrong size on NetSyncBase_RPC_SERVER_SyncTx");
static_assert(offsetof(NetSyncBase_RPC_SERVER_SyncTx, Tx) == 0x000000, "Member 'NetSyncBase_RPC_SERVER_SyncTx::Tx' has a wrong offset!");

// Function Stigma.NetSyncBase.StartToSync
// 0x0028 (0x0028 - 0x0000)
struct NetSyncBase_StartToSync final
{
public:
	class UPrimitiveComponent*                    Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Initial_velocity;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          As_author;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(NetSyncBase_StartToSync) == 0x000008, "Wrong alignment on NetSyncBase_StartToSync");
static_assert(sizeof(NetSyncBase_StartToSync) == 0x000028, "Wrong size on NetSyncBase_StartToSync");
static_assert(offsetof(NetSyncBase_StartToSync, Source) == 0x000000, "Member 'NetSyncBase_StartToSync::Source' has a wrong offset!");
static_assert(offsetof(NetSyncBase_StartToSync, Initial_velocity) == 0x000008, "Member 'NetSyncBase_StartToSync::Initial_velocity' has a wrong offset!");
static_assert(offsetof(NetSyncBase_StartToSync, As_author) == 0x000020, "Member 'NetSyncBase_StartToSync::As_author' has a wrong offset!");

// Function Stigma.NetSyncBase.IsAuthor
// 0x0001 (0x0001 - 0x0000)
struct NetSyncBase_IsAuthor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSyncBase_IsAuthor) == 0x000001, "Wrong alignment on NetSyncBase_IsAuthor");
static_assert(sizeof(NetSyncBase_IsAuthor) == 0x000001, "Wrong size on NetSyncBase_IsAuthor");
static_assert(offsetof(NetSyncBase_IsAuthor, ReturnValue) == 0x000000, "Member 'NetSyncBase_IsAuthor::ReturnValue' has a wrong offset!");

// Function Stigma.NetSyncBase.IsSyncing
// 0x0001 (0x0001 - 0x0000)
struct NetSyncBase_IsSyncing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSyncBase_IsSyncing) == 0x000001, "Wrong alignment on NetSyncBase_IsSyncing");
static_assert(sizeof(NetSyncBase_IsSyncing) == 0x000001, "Wrong size on NetSyncBase_IsSyncing");
static_assert(offsetof(NetSyncBase_IsSyncing, ReturnValue) == 0x000000, "Member 'NetSyncBase_IsSyncing::ReturnValue' has a wrong offset!");

// Function Stigma.NetSyncBase.IsSyncingAndValid
// 0x0001 (0x0001 - 0x0000)
struct NetSyncBase_IsSyncingAndValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSyncBase_IsSyncingAndValid) == 0x000001, "Wrong alignment on NetSyncBase_IsSyncingAndValid");
static_assert(sizeof(NetSyncBase_IsSyncingAndValid) == 0x000001, "Wrong size on NetSyncBase_IsSyncingAndValid");
static_assert(offsetof(NetSyncBase_IsSyncingAndValid, ReturnValue) == 0x000000, "Member 'NetSyncBase_IsSyncingAndValid::ReturnValue' has a wrong offset!");

// Function Stigma.ObjectBase.OnChangeDurability
// 0x0008 (0x0008 - 0x0000)
struct ObjectBase_OnChangeDurability final
{
public:
	float                                         _new_durability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F74[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ObjectBase_OnChangeDurability) == 0x000004, "Wrong alignment on ObjectBase_OnChangeDurability");
static_assert(sizeof(ObjectBase_OnChangeDurability) == 0x000008, "Wrong size on ObjectBase_OnChangeDurability");
static_assert(offsetof(ObjectBase_OnChangeDurability, _new_durability) == 0x000000, "Member 'ObjectBase_OnChangeDurability::_new_durability' has a wrong offset!");
static_assert(offsetof(ObjectBase_OnChangeDurability, ReturnValue) == 0x000004, "Member 'ObjectBase_OnChangeDurability::ReturnValue' has a wrong offset!");

// Function Stigma.ObjectBase.OnChangeLife
// 0x0002 (0x0002 - 0x0000)
struct ObjectBase_OnChangeLife final
{
public:
	EObjectLife                                   _new_life;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_OnChangeLife) == 0x000001, "Wrong alignment on ObjectBase_OnChangeLife");
static_assert(sizeof(ObjectBase_OnChangeLife) == 0x000002, "Wrong size on ObjectBase_OnChangeLife");
static_assert(offsetof(ObjectBase_OnChangeLife, _new_life) == 0x000000, "Member 'ObjectBase_OnChangeLife::_new_life' has a wrong offset!");
static_assert(offsetof(ObjectBase_OnChangeLife, ReturnValue) == 0x000001, "Member 'ObjectBase_OnChangeLife::ReturnValue' has a wrong offset!");

// Function Stigma.ObjectBase.OnRep_Durability
// 0x0004 (0x0004 - 0x0000)
struct ObjectBase_OnRep_Durability final
{
public:
	float                                         _old_durability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_OnRep_Durability) == 0x000004, "Wrong alignment on ObjectBase_OnRep_Durability");
static_assert(sizeof(ObjectBase_OnRep_Durability) == 0x000004, "Wrong size on ObjectBase_OnRep_Durability");
static_assert(offsetof(ObjectBase_OnRep_Durability, _old_durability) == 0x000000, "Member 'ObjectBase_OnRep_Durability::_old_durability' has a wrong offset!");

// Function Stigma.ObjectBase.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct ObjectBase_OnRep_State final
{
public:
	EObjectState                                  _old_state;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_OnRep_State) == 0x000001, "Wrong alignment on ObjectBase_OnRep_State");
static_assert(sizeof(ObjectBase_OnRep_State) == 0x000001, "Wrong size on ObjectBase_OnRep_State");
static_assert(offsetof(ObjectBase_OnRep_State, _old_state) == 0x000000, "Member 'ObjectBase_OnRep_State::_old_state' has a wrong offset!");

// Function Stigma.ObjectBase.SetObjectState
// 0x0001 (0x0001 - 0x0000)
struct ObjectBase_SetObjectState final
{
public:
	EObjectState                                  _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_SetObjectState) == 0x000001, "Wrong alignment on ObjectBase_SetObjectState");
static_assert(sizeof(ObjectBase_SetObjectState) == 0x000001, "Wrong size on ObjectBase_SetObjectState");
static_assert(offsetof(ObjectBase_SetObjectState, _state) == 0x000000, "Member 'ObjectBase_SetObjectState::_state' has a wrong offset!");

// Function Stigma.ObjectBase.Setter_Durability
// 0x0004 (0x0004 - 0x0000)
struct ObjectBase_Setter_Durability final
{
public:
	float                                         _new_durability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_Setter_Durability) == 0x000004, "Wrong alignment on ObjectBase_Setter_Durability");
static_assert(sizeof(ObjectBase_Setter_Durability) == 0x000004, "Wrong size on ObjectBase_Setter_Durability");
static_assert(offsetof(ObjectBase_Setter_Durability, _new_durability) == 0x000000, "Member 'ObjectBase_Setter_Durability::_new_durability' has a wrong offset!");

// Function Stigma.ObjectBase.Setter_State
// 0x0001 (0x0001 - 0x0000)
struct ObjectBase_Setter_State final
{
public:
	EObjectState                                  _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_Setter_State) == 0x000001, "Wrong alignment on ObjectBase_Setter_State");
static_assert(sizeof(ObjectBase_Setter_State) == 0x000001, "Wrong size on ObjectBase_Setter_State");
static_assert(offsetof(ObjectBase_Setter_State, _state) == 0x000000, "Member 'ObjectBase_Setter_State::_state' has a wrong offset!");

// Function Stigma.ObjectBase.GetDisplayNameText
// 0x0018 (0x0018 - 0x0000)
struct ObjectBase_GetDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_GetDisplayNameText) == 0x000008, "Wrong alignment on ObjectBase_GetDisplayNameText");
static_assert(sizeof(ObjectBase_GetDisplayNameText) == 0x000018, "Wrong size on ObjectBase_GetDisplayNameText");
static_assert(offsetof(ObjectBase_GetDisplayNameText, ReturnValue) == 0x000000, "Member 'ObjectBase_GetDisplayNameText::ReturnValue' has a wrong offset!");

// Function Stigma.ObjectBase.IsPossessed
// 0x0001 (0x0001 - 0x0000)
struct ObjectBase_IsPossessed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectBase_IsPossessed) == 0x000001, "Wrong alignment on ObjectBase_IsPossessed");
static_assert(sizeof(ObjectBase_IsPossessed) == 0x000001, "Wrong size on ObjectBase_IsPossessed");
static_assert(offsetof(ObjectBase_IsPossessed, ReturnValue) == 0x000000, "Member 'ObjectBase_IsPossessed::ReturnValue' has a wrong offset!");

// Function Stigma.AntidoteArea.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct AntidoteArea_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F77[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntidoteArea_OnBeginOverlap) == 0x000008, "Wrong alignment on AntidoteArea_OnBeginOverlap");
static_assert(sizeof(AntidoteArea_OnBeginOverlap) == 0x000108, "Wrong size on AntidoteArea_OnBeginOverlap");
static_assert(offsetof(AntidoteArea_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'AntidoteArea_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnBeginOverlap, OtherActor) == 0x000008, "Member 'AntidoteArea_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnBeginOverlap, OtherComp) == 0x000010, "Member 'AntidoteArea_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'AntidoteArea_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'AntidoteArea_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnBeginOverlap, SweepResult) == 0x000020, "Member 'AntidoteArea_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stigma.AntidoteArea.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct AntidoteArea_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F78[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AntidoteArea_OnEndOverlap) == 0x000008, "Wrong alignment on AntidoteArea_OnEndOverlap");
static_assert(sizeof(AntidoteArea_OnEndOverlap) == 0x000020, "Wrong size on AntidoteArea_OnEndOverlap");
static_assert(offsetof(AntidoteArea_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'AntidoteArea_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnEndOverlap, OtherActor) == 0x000008, "Member 'AntidoteArea_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnEndOverlap, OtherComp) == 0x000010, "Member 'AntidoteArea_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AntidoteArea_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'AntidoteArea_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stigma.AntidoteArea.OnLoadSettings
// 0x0060 (0x0060 - 0x0000)
struct AntidoteArea_OnLoadSettings final
{
public:
	struct FConfig_AntidoteArea                   _settings;                                         // 0x0000(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntidoteArea_OnLoadSettings) == 0x000008, "Wrong alignment on AntidoteArea_OnLoadSettings");
static_assert(sizeof(AntidoteArea_OnLoadSettings) == 0x000060, "Wrong size on AntidoteArea_OnLoadSettings");
static_assert(offsetof(AntidoteArea_OnLoadSettings, _settings) == 0x000000, "Member 'AntidoteArea_OnLoadSettings::_settings' has a wrong offset!");

// Function Stigma.AntidoteArea.Start
// 0x0018 (0x0018 - 0x0000)
struct AntidoteArea_Start final
{
public:
	class ACharaBase*                             _thrower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjectBase*                            _weapon_obj;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0010(0x0006)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F79[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AntidoteArea_Start) == 0x000008, "Wrong alignment on AntidoteArea_Start");
static_assert(sizeof(AntidoteArea_Start) == 0x000018, "Wrong size on AntidoteArea_Start");
static_assert(offsetof(AntidoteArea_Start, _thrower) == 0x000000, "Member 'AntidoteArea_Start::_thrower' has a wrong offset!");
static_assert(offsetof(AntidoteArea_Start, _weapon_obj) == 0x000008, "Member 'AntidoteArea_Start::_weapon_obj' has a wrong offset!");
static_assert(offsetof(AntidoteArea_Start, _op_id) == 0x000010, "Member 'AntidoteArea_Start::_op_id' has a wrong offset!");

// Function Stigma.UI_BoosterSlot.GetBoosterID
// 0x0010 (0x0010 - 0x0000)
struct UI_BoosterSlot_GetBoosterID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSlot_GetBoosterID) == 0x000008, "Wrong alignment on UI_BoosterSlot_GetBoosterID");
static_assert(sizeof(UI_BoosterSlot_GetBoosterID) == 0x000010, "Wrong size on UI_BoosterSlot_GetBoosterID");
static_assert(offsetof(UI_BoosterSlot_GetBoosterID, ReturnValue) == 0x000000, "Member 'UI_BoosterSlot_GetBoosterID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PlayerJoinDetectable.OnPlayerJoin
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerJoinDetectable_OnPlayerJoin final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F82[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PlayerJoinDetectable_OnPlayerJoin) == 0x000008, "Wrong alignment on UI_PlayerJoinDetectable_OnPlayerJoin");
static_assert(sizeof(UI_PlayerJoinDetectable_OnPlayerJoin) == 0x000010, "Wrong size on UI_PlayerJoinDetectable_OnPlayerJoin");
static_assert(offsetof(UI_PlayerJoinDetectable_OnPlayerJoin, _ps) == 0x000000, "Member 'UI_PlayerJoinDetectable_OnPlayerJoin::_ps' has a wrong offset!");
static_assert(offsetof(UI_PlayerJoinDetectable_OnPlayerJoin, ReturnValue) == 0x000008, "Member 'UI_PlayerJoinDetectable_OnPlayerJoin::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PlayerJoinDetectable.OnPlayerLeaved
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerJoinDetectable_OnPlayerLeaved final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F83[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PlayerJoinDetectable_OnPlayerLeaved) == 0x000008, "Wrong alignment on UI_PlayerJoinDetectable_OnPlayerLeaved");
static_assert(sizeof(UI_PlayerJoinDetectable_OnPlayerLeaved) == 0x000010, "Wrong size on UI_PlayerJoinDetectable_OnPlayerLeaved");
static_assert(offsetof(UI_PlayerJoinDetectable_OnPlayerLeaved, _ps) == 0x000000, "Member 'UI_PlayerJoinDetectable_OnPlayerLeaved::_ps' has a wrong offset!");
static_assert(offsetof(UI_PlayerJoinDetectable_OnPlayerLeaved, ReturnValue) == 0x000008, "Member 'UI_PlayerJoinDetectable_OnPlayerLeaved::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PlayerJoinDetectable.OnPlayerUpdate
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerJoinDetectable_OnPlayerUpdate final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F84[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PlayerJoinDetectable_OnPlayerUpdate) == 0x000008, "Wrong alignment on UI_PlayerJoinDetectable_OnPlayerUpdate");
static_assert(sizeof(UI_PlayerJoinDetectable_OnPlayerUpdate) == 0x000010, "Wrong size on UI_PlayerJoinDetectable_OnPlayerUpdate");
static_assert(offsetof(UI_PlayerJoinDetectable_OnPlayerUpdate, _ps) == 0x000000, "Member 'UI_PlayerJoinDetectable_OnPlayerUpdate::_ps' has a wrong offset!");
static_assert(offsetof(UI_PlayerJoinDetectable_OnPlayerUpdate, ReturnValue) == 0x000008, "Member 'UI_PlayerJoinDetectable_OnPlayerUpdate::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PlayerJoinDetectable.RemovePlayerWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_PlayerJoinDetectable_RemovePlayerWidget final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerJoinDetectable_RemovePlayerWidget) == 0x000008, "Wrong alignment on UI_PlayerJoinDetectable_RemovePlayerWidget");
static_assert(sizeof(UI_PlayerJoinDetectable_RemovePlayerWidget) == 0x000008, "Wrong size on UI_PlayerJoinDetectable_RemovePlayerWidget");
static_assert(offsetof(UI_PlayerJoinDetectable_RemovePlayerWidget, _ps) == 0x000000, "Member 'UI_PlayerJoinDetectable_RemovePlayerWidget::_ps' has a wrong offset!");

// Function Stigma.UI_PlayerJoinDetectable.SetPlayerWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerJoinDetectable_SetPlayerWidget final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            _widget;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerJoinDetectable_SetPlayerWidget) == 0x000008, "Wrong alignment on UI_PlayerJoinDetectable_SetPlayerWidget");
static_assert(sizeof(UI_PlayerJoinDetectable_SetPlayerWidget) == 0x000010, "Wrong size on UI_PlayerJoinDetectable_SetPlayerWidget");
static_assert(offsetof(UI_PlayerJoinDetectable_SetPlayerWidget, _ps) == 0x000000, "Member 'UI_PlayerJoinDetectable_SetPlayerWidget::_ps' has a wrong offset!");
static_assert(offsetof(UI_PlayerJoinDetectable_SetPlayerWidget, _widget) == 0x000008, "Member 'UI_PlayerJoinDetectable_SetPlayerWidget::_widget' has a wrong offset!");

// Function Stigma.UI_PlayerJoinDetectable.GetPlayerWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerJoinDetectable_GetPlayerWidget final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerJoinDetectable_GetPlayerWidget) == 0x000008, "Wrong alignment on UI_PlayerJoinDetectable_GetPlayerWidget");
static_assert(sizeof(UI_PlayerJoinDetectable_GetPlayerWidget) == 0x000010, "Wrong size on UI_PlayerJoinDetectable_GetPlayerWidget");
static_assert(offsetof(UI_PlayerJoinDetectable_GetPlayerWidget, _ps) == 0x000000, "Member 'UI_PlayerJoinDetectable_GetPlayerWidget::_ps' has a wrong offset!");
static_assert(offsetof(UI_PlayerJoinDetectable_GetPlayerWidget, ReturnValue) == 0x000008, "Member 'UI_PlayerJoinDetectable_GetPlayerWidget::ReturnValue' has a wrong offset!");

// Function Stigma.FXCustomizable.OnQueryFX
// 0x00B0 (0x00B0 - 0x0000)
struct FXCustomizable_OnQueryFX final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCustomFX                              ReturnValue;                                       // 0x00A8(0x0003)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F86[0x5];                                     // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FXCustomizable_OnQueryFX) == 0x000008, "Wrong alignment on FXCustomizable_OnQueryFX");
static_assert(sizeof(FXCustomizable_OnQueryFX) == 0x0000B0, "Wrong size on FXCustomizable_OnQueryFX");
static_assert(offsetof(FXCustomizable_OnQueryFX, _hit) == 0x000000, "Member 'FXCustomizable_OnQueryFX::_hit' has a wrong offset!");
static_assert(offsetof(FXCustomizable_OnQueryFX, ReturnValue) == 0x0000A8, "Member 'FXCustomizable_OnQueryFX::ReturnValue' has a wrong offset!");

// Function Stigma.GoToWidget.ChangeTargetWidget
// 0x0008 (0x0008 - 0x0000)
struct GoToWidget_ChangeTargetWidget final
{
public:
	class UPreviewableWidget*                     _new_target_widget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoToWidget_ChangeTargetWidget) == 0x000008, "Wrong alignment on GoToWidget_ChangeTargetWidget");
static_assert(sizeof(GoToWidget_ChangeTargetWidget) == 0x000008, "Wrong size on GoToWidget_ChangeTargetWidget");
static_assert(offsetof(GoToWidget_ChangeTargetWidget, _new_target_widget) == 0x000000, "Member 'GoToWidget_ChangeTargetWidget::_new_target_widget' has a wrong offset!");

// Function Stigma.GoToWidget.OnWidgetOpened
// 0x0008 (0x0008 - 0x0000)
struct GoToWidget_OnWidgetOpened final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoToWidget_OnWidgetOpened) == 0x000008, "Wrong alignment on GoToWidget_OnWidgetOpened");
static_assert(sizeof(GoToWidget_OnWidgetOpened) == 0x000008, "Wrong size on GoToWidget_OnWidgetOpened");
static_assert(offsetof(GoToWidget_OnWidgetOpened, _widget) == 0x000000, "Member 'GoToWidget_OnWidgetOpened::_widget' has a wrong offset!");

// Function Stigma.BattleResultBlueprintLibrary.GetReport_ExpDetails
// 0x01F0 (0x01F0 - 0x0000)
struct BattleResultBlueprintLibrary_GetReport_ExpDetails final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleDecisionDetail                  _decision;                                         // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETeams                                        _my_team;                                          // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F87[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserBattleResult                      _result;                                           // 0x00E0(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMyBattleResult                        _my_result;                                        // 0x0170(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUserBattleResult_ExpDetail            ReturnValue;                                       // 0x01C8(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F88[0x4];                                     // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattleResultBlueprintLibrary_GetReport_ExpDetails) == 0x000008, "Wrong alignment on BattleResultBlueprintLibrary_GetReport_ExpDetails");
static_assert(sizeof(BattleResultBlueprintLibrary_GetReport_ExpDetails) == 0x0001F0, "Wrong size on BattleResultBlueprintLibrary_GetReport_ExpDetails");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_ExpDetails, _world_ctx) == 0x000000, "Member 'BattleResultBlueprintLibrary_GetReport_ExpDetails::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_ExpDetails, _decision) == 0x000008, "Member 'BattleResultBlueprintLibrary_GetReport_ExpDetails::_decision' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_ExpDetails, _my_team) == 0x0000D8, "Member 'BattleResultBlueprintLibrary_GetReport_ExpDetails::_my_team' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_ExpDetails, _result) == 0x0000E0, "Member 'BattleResultBlueprintLibrary_GetReport_ExpDetails::_result' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_ExpDetails, _my_result) == 0x000170, "Member 'BattleResultBlueprintLibrary_GetReport_ExpDetails::_my_result' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_ExpDetails, ReturnValue) == 0x0001C8, "Member 'BattleResultBlueprintLibrary_GetReport_ExpDetails::ReturnValue' has a wrong offset!");

// Function Stigma.BattleResultBlueprintLibrary.GetReport_LevelAndExp
// 0x00C0 (0x00C0 - 0x0000)
struct BattleResultBlueprintLibrary_GetReport_LevelAndExp final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserBattleResult                      _result;                                           // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUserBattleResult_UIValues             ReturnValue;                                       // 0x0098(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleResultBlueprintLibrary_GetReport_LevelAndExp) == 0x000008, "Wrong alignment on BattleResultBlueprintLibrary_GetReport_LevelAndExp");
static_assert(sizeof(BattleResultBlueprintLibrary_GetReport_LevelAndExp) == 0x0000C0, "Wrong size on BattleResultBlueprintLibrary_GetReport_LevelAndExp");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_LevelAndExp, _world_ctx) == 0x000000, "Member 'BattleResultBlueprintLibrary_GetReport_LevelAndExp::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_LevelAndExp, _result) == 0x000008, "Member 'BattleResultBlueprintLibrary_GetReport_LevelAndExp::_result' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetReport_LevelAndExp, ReturnValue) == 0x000098, "Member 'BattleResultBlueprintLibrary_GetReport_LevelAndExp::ReturnValue' has a wrong offset!");

// Function Stigma.BattleResultBlueprintLibrary.GetTotalExp
// 0x0060 (0x0060 - 0x0000)
struct BattleResultBlueprintLibrary_GetTotalExp final
{
public:
	struct FMyBattleResult                        _my_result;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F89[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattleResultBlueprintLibrary_GetTotalExp) == 0x000008, "Wrong alignment on BattleResultBlueprintLibrary_GetTotalExp");
static_assert(sizeof(BattleResultBlueprintLibrary_GetTotalExp) == 0x000060, "Wrong size on BattleResultBlueprintLibrary_GetTotalExp");
static_assert(offsetof(BattleResultBlueprintLibrary_GetTotalExp, _my_result) == 0x000000, "Member 'BattleResultBlueprintLibrary_GetTotalExp::_my_result' has a wrong offset!");
static_assert(offsetof(BattleResultBlueprintLibrary_GetTotalExp, ReturnValue) == 0x000058, "Member 'BattleResultBlueprintLibrary_GetTotalExp::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunTypeBoxItem.OnChangedGun
// 0x0010 (0x0010 - 0x0000)
struct UI_GunTypeBoxItem_OnChangedGun final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunTypeBoxItem_OnChangedGun) == 0x000008, "Wrong alignment on UI_GunTypeBoxItem_OnChangedGun");
static_assert(sizeof(UI_GunTypeBoxItem_OnChangedGun) == 0x000010, "Wrong size on UI_GunTypeBoxItem_OnChangedGun");
static_assert(offsetof(UI_GunTypeBoxItem_OnChangedGun, _gun_preset) == 0x000000, "Member 'UI_GunTypeBoxItem_OnChangedGun::_gun_preset' has a wrong offset!");

// Function Stigma.UI_GunTypeBoxItem.OnHoverGunPresetItem
// 0x0010 (0x0010 - 0x0000)
struct UI_GunTypeBoxItem_OnHoverGunPresetItem final
{
public:
	class UObject*                                _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_hovered;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GunTypeBoxItem_OnHoverGunPresetItem) == 0x000008, "Wrong alignment on UI_GunTypeBoxItem_OnHoverGunPresetItem");
static_assert(sizeof(UI_GunTypeBoxItem_OnHoverGunPresetItem) == 0x000010, "Wrong size on UI_GunTypeBoxItem_OnHoverGunPresetItem");
static_assert(offsetof(UI_GunTypeBoxItem_OnHoverGunPresetItem, _item) == 0x000000, "Member 'UI_GunTypeBoxItem_OnHoverGunPresetItem::_item' has a wrong offset!");
static_assert(offsetof(UI_GunTypeBoxItem_OnHoverGunPresetItem, _is_hovered) == 0x000008, "Member 'UI_GunTypeBoxItem_OnHoverGunPresetItem::_is_hovered' has a wrong offset!");

// Function Stigma.UI_GunTypeBoxItem.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_GunTypeBoxItem_SetTitle final
{
public:
	class FText                                   _gun_name;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunTypeBoxItem_SetTitle) == 0x000008, "Wrong alignment on UI_GunTypeBoxItem_SetTitle");
static_assert(sizeof(UI_GunTypeBoxItem_SetTitle) == 0x000018, "Wrong size on UI_GunTypeBoxItem_SetTitle");
static_assert(offsetof(UI_GunTypeBoxItem_SetTitle, _gun_name) == 0x000000, "Member 'UI_GunTypeBoxItem_SetTitle::_gun_name' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsSummonedBot
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsSummonedBot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsSummonedBot) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsSummonedBot");
static_assert(sizeof(MatchServicedPlayerState_IsSummonedBot) == 0x000001, "Wrong size on MatchServicedPlayerState_IsSummonedBot");
static_assert(offsetof(MatchServicedPlayerState_IsSummonedBot, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsSummonedBot::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.LocalSelectCharacter
// 0x0003 (0x0003 - 0x0000)
struct MatchServicedPlayerState_LocalSelectCharacter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_chara_change;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_init;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_LocalSelectCharacter) == 0x000001, "Wrong alignment on MatchServicedPlayerState_LocalSelectCharacter");
static_assert(sizeof(MatchServicedPlayerState_LocalSelectCharacter) == 0x000003, "Wrong size on MatchServicedPlayerState_LocalSelectCharacter");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectCharacter, _chara_type) == 0x000000, "Member 'MatchServicedPlayerState_LocalSelectCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectCharacter, _is_chara_change) == 0x000001, "Member 'MatchServicedPlayerState_LocalSelectCharacter::_is_chara_change' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectCharacter, _is_init) == 0x000002, "Member 'MatchServicedPlayerState_LocalSelectCharacter::_is_init' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.LocalSelectCostume
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_LocalSelectCostume final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F97[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item;                                             // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_LocalSelectCostume) == 0x000008, "Wrong alignment on MatchServicedPlayerState_LocalSelectCostume");
static_assert(sizeof(MatchServicedPlayerState_LocalSelectCostume) == 0x000018, "Wrong size on MatchServicedPlayerState_LocalSelectCostume");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectCostume, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_LocalSelectCostume::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectCostume, _item) == 0x000008, "Member 'MatchServicedPlayerState_LocalSelectCostume::_item' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.LocalSelectGun
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_LocalSelectGun final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F98[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             _gun_preset;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_LocalSelectGun) == 0x000008, "Wrong alignment on MatchServicedPlayerState_LocalSelectGun");
static_assert(sizeof(MatchServicedPlayerState_LocalSelectGun) == 0x000018, "Wrong size on MatchServicedPlayerState_LocalSelectGun");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectGun, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_LocalSelectGun::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_LocalSelectGun, _gun_preset) == 0x000008, "Member 'MatchServicedPlayerState_LocalSelectGun::_gun_preset' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.OnRep_JoinType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_OnRep_JoinType final
{
public:
	EJoinType                                     _old_join_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_OnRep_JoinType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_OnRep_JoinType");
static_assert(sizeof(MatchServicedPlayerState_OnRep_JoinType) == 0x000001, "Wrong size on MatchServicedPlayerState_OnRep_JoinType");
static_assert(offsetof(MatchServicedPlayerState_OnRep_JoinType, _old_join_type) == 0x000000, "Member 'MatchServicedPlayerState_OnRep_JoinType::_old_join_type' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SERVER_SetGun
// 0x00D8 (0x00D8 - 0x0000)
struct MatchServicedPlayerState_SERVER_SetGun final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F99[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunSpec                               _spec;                                             // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SERVER_SetGun) == 0x000008, "Wrong alignment on MatchServicedPlayerState_SERVER_SetGun");
static_assert(sizeof(MatchServicedPlayerState_SERVER_SetGun) == 0x0000D8, "Wrong size on MatchServicedPlayerState_SERVER_SetGun");
static_assert(offsetof(MatchServicedPlayerState_SERVER_SetGun, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_SERVER_SetGun::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_SERVER_SetGun, _spec) == 0x000008, "Member 'MatchServicedPlayerState_SERVER_SetGun::_spec' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SERVER_SetIsReadyToFight
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_SERVER_SetIsReadyToFight final
{
public:
	bool                                          _i_am_ready;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SERVER_SetIsReadyToFight) == 0x000001, "Wrong alignment on MatchServicedPlayerState_SERVER_SetIsReadyToFight");
static_assert(sizeof(MatchServicedPlayerState_SERVER_SetIsReadyToFight) == 0x000001, "Wrong size on MatchServicedPlayerState_SERVER_SetIsReadyToFight");
static_assert(offsetof(MatchServicedPlayerState_SERVER_SetIsReadyToFight, _i_am_ready) == 0x000000, "Member 'MatchServicedPlayerState_SERVER_SetIsReadyToFight::_i_am_ready' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SERVER_SetNetID
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerState_SERVER_SetNetID final
{
public:
	struct FNetID                                 _net_id;                                           // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SERVER_SetNetID) == 0x000001, "Wrong alignment on MatchServicedPlayerState_SERVER_SetNetID");
static_assert(sizeof(MatchServicedPlayerState_SERVER_SetNetID) == 0x000002, "Wrong size on MatchServicedPlayerState_SERVER_SetNetID");
static_assert(offsetof(MatchServicedPlayerState_SERVER_SetNetID, _net_id) == 0x000000, "Member 'MatchServicedPlayerState_SERVER_SetNetID::_net_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SERVER_SetUserID
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_SERVER_SetUserID final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SERVER_SetUserID) == 0x000008, "Wrong alignment on MatchServicedPlayerState_SERVER_SetUserID");
static_assert(sizeof(MatchServicedPlayerState_SERVER_SetUserID) == 0x000008, "Wrong size on MatchServicedPlayerState_SERVER_SetUserID");
static_assert(offsetof(MatchServicedPlayerState_SERVER_SetUserID, _user_id) == 0x000000, "Member 'MatchServicedPlayerState_SERVER_SetUserID::_user_id' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SetLocalCharacterIndex
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_SetLocalCharacterIndex final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SetLocalCharacterIndex) == 0x000004, "Wrong alignment on MatchServicedPlayerState_SetLocalCharacterIndex");
static_assert(sizeof(MatchServicedPlayerState_SetLocalCharacterIndex) == 0x000004, "Wrong size on MatchServicedPlayerState_SetLocalCharacterIndex");
static_assert(offsetof(MatchServicedPlayerState_SetLocalCharacterIndex, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_SetLocalCharacterIndex::_zidx' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SetLocalNewCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_SetLocalNewCharaType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SetLocalNewCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_SetLocalNewCharaType");
static_assert(sizeof(MatchServicedPlayerState_SetLocalNewCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_SetLocalNewCharaType");
static_assert(offsetof(MatchServicedPlayerState_SetLocalNewCharaType, _chara_type) == 0x000000, "Member 'MatchServicedPlayerState_SetLocalNewCharaType::_chara_type' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SetRelatedWidget
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_SetRelatedWidget final
{
public:
	class UUserWidget*                            _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SetRelatedWidget) == 0x000008, "Wrong alignment on MatchServicedPlayerState_SetRelatedWidget");
static_assert(sizeof(MatchServicedPlayerState_SetRelatedWidget) == 0x000008, "Wrong size on MatchServicedPlayerState_SetRelatedWidget");
static_assert(offsetof(MatchServicedPlayerState_SetRelatedWidget, _widget) == 0x000000, "Member 'MatchServicedPlayerState_SetRelatedWidget::_widget' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_CurrentCharaIdx
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_Setter_CurrentCharaIdx final
{
public:
	uint8                                         _idx;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_CurrentCharaIdx) == 0x000001, "Wrong alignment on MatchServicedPlayerState_Setter_CurrentCharaIdx");
static_assert(sizeof(MatchServicedPlayerState_Setter_CurrentCharaIdx) == 0x000001, "Wrong size on MatchServicedPlayerState_Setter_CurrentCharaIdx");
static_assert(offsetof(MatchServicedPlayerState_Setter_CurrentCharaIdx, _idx) == 0x000000, "Member 'MatchServicedPlayerState_Setter_CurrentCharaIdx::_idx' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_EnableChangeMaster
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_Setter_EnableChangeMaster final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_EnableChangeMaster) == 0x000001, "Wrong alignment on MatchServicedPlayerState_Setter_EnableChangeMaster");
static_assert(sizeof(MatchServicedPlayerState_Setter_EnableChangeMaster) == 0x000001, "Wrong size on MatchServicedPlayerState_Setter_EnableChangeMaster");
static_assert(offsetof(MatchServicedPlayerState_Setter_EnableChangeMaster, _value) == 0x000000, "Member 'MatchServicedPlayerState_Setter_EnableChangeMaster::_value' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_IsReadyToFight
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_Setter_IsReadyToFight final
{
public:
	bool                                          _ready;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_IsReadyToFight) == 0x000001, "Wrong alignment on MatchServicedPlayerState_Setter_IsReadyToFight");
static_assert(sizeof(MatchServicedPlayerState_Setter_IsReadyToFight) == 0x000001, "Wrong size on MatchServicedPlayerState_Setter_IsReadyToFight");
static_assert(offsetof(MatchServicedPlayerState_Setter_IsReadyToFight, _ready) == 0x000000, "Member 'MatchServicedPlayerState_Setter_IsReadyToFight::_ready' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_JoinType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_Setter_JoinType final
{
public:
	EJoinType                                     _join_type;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_JoinType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_Setter_JoinType");
static_assert(sizeof(MatchServicedPlayerState_Setter_JoinType) == 0x000001, "Wrong size on MatchServicedPlayerState_Setter_JoinType");
static_assert(offsetof(MatchServicedPlayerState_Setter_JoinType, _join_type) == 0x000000, "Member 'MatchServicedPlayerState_Setter_JoinType::_join_type' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_KPI
// 0x000C (0x000C - 0x0000)
struct MatchServicedPlayerState_Setter_KPI final
{
public:
	struct FPlayerKPI                             _player_kpi;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_KPI) == 0x000004, "Wrong alignment on MatchServicedPlayerState_Setter_KPI");
static_assert(sizeof(MatchServicedPlayerState_Setter_KPI) == 0x00000C, "Wrong size on MatchServicedPlayerState_Setter_KPI");
static_assert(offsetof(MatchServicedPlayerState_Setter_KPI, _player_kpi) == 0x000000, "Member 'MatchServicedPlayerState_Setter_KPI::_player_kpi' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_NewCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_Setter_NewCharaType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_NewCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_Setter_NewCharaType");
static_assert(sizeof(MatchServicedPlayerState_Setter_NewCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_Setter_NewCharaType");
static_assert(offsetof(MatchServicedPlayerState_Setter_NewCharaType, _chara_type) == 0x000000, "Member 'MatchServicedPlayerState_Setter_NewCharaType::_chara_type' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_PickedCharas
// 0x0118 (0x0118 - 0x0000)
struct MatchServicedPlayerState_Setter_PickedCharas final
{
public:
	struct FCharacterSet                          _charas;                                           // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_PickedCharas) == 0x000008, "Wrong alignment on MatchServicedPlayerState_Setter_PickedCharas");
static_assert(sizeof(MatchServicedPlayerState_Setter_PickedCharas) == 0x000118, "Wrong size on MatchServicedPlayerState_Setter_PickedCharas");
static_assert(offsetof(MatchServicedPlayerState_Setter_PickedCharas, _charas) == 0x000000, "Member 'MatchServicedPlayerState_Setter_PickedCharas::_charas' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Setter_User
// 0x00A0 (0x00A0 - 0x0000)
struct MatchServicedPlayerState_Setter_User final
{
public:
	struct FUserInBattle                          _user_in_battle;                                   // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Setter_User) == 0x000008, "Wrong alignment on MatchServicedPlayerState_Setter_User");
static_assert(sizeof(MatchServicedPlayerState_Setter_User) == 0x0000A0, "Wrong size on MatchServicedPlayerState_Setter_User");
static_assert(offsetof(MatchServicedPlayerState_Setter_User, _user_in_battle) == 0x000000, "Member 'MatchServicedPlayerState_Setter_User::_user_in_battle' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.SetUserProfile
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_SetUserProfile final
{
public:
	class UUserProfile*                           _profile;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_SetUserProfile) == 0x000008, "Wrong alignment on MatchServicedPlayerState_SetUserProfile");
static_assert(sizeof(MatchServicedPlayerState_SetUserProfile) == 0x000008, "Wrong size on MatchServicedPlayerState_SetUserProfile");
static_assert(offsetof(MatchServicedPlayerState_SetUserProfile, _profile) == 0x000000, "Member 'MatchServicedPlayerState_SetUserProfile::_profile' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Subscribe_OnChanged
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_Subscribe_OnChanged final
{
public:
	TDelegate<void(EChangedPlayerState _reason, class AMatchServicedPlayerState* _ps)> _proc;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Subscribe_OnChanged) == 0x000004, "Wrong alignment on MatchServicedPlayerState_Subscribe_OnChanged");
static_assert(sizeof(MatchServicedPlayerState_Subscribe_OnChanged) == 0x000010, "Wrong size on MatchServicedPlayerState_Subscribe_OnChanged");
static_assert(offsetof(MatchServicedPlayerState_Subscribe_OnChanged, _proc) == 0x000000, "Member 'MatchServicedPlayerState_Subscribe_OnChanged::_proc' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.TakeHasBeenChanged
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_TakeHasBeenChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_TakeHasBeenChanged) == 0x000001, "Wrong alignment on MatchServicedPlayerState_TakeHasBeenChanged");
static_assert(sizeof(MatchServicedPlayerState_TakeHasBeenChanged) == 0x000001, "Wrong size on MatchServicedPlayerState_TakeHasBeenChanged");
static_assert(offsetof(MatchServicedPlayerState_TakeHasBeenChanged, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_TakeHasBeenChanged::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.Unsubscribe_OnChanged
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_Unsubscribe_OnChanged final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_Unsubscribe_OnChanged) == 0x000008, "Wrong alignment on MatchServicedPlayerState_Unsubscribe_OnChanged");
static_assert(sizeof(MatchServicedPlayerState_Unsubscribe_OnChanged) == 0x000008, "Wrong size on MatchServicedPlayerState_Unsubscribe_OnChanged");
static_assert(offsetof(MatchServicedPlayerState_Unsubscribe_OnChanged, _obj) == 0x000000, "Member 'MatchServicedPlayerState_Unsubscribe_OnChanged::_obj' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.CanBeReady
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_CanBeReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_CanBeReady) == 0x000001, "Wrong alignment on MatchServicedPlayerState_CanBeReady");
static_assert(sizeof(MatchServicedPlayerState_CanBeReady) == 0x000001, "Wrong size on MatchServicedPlayerState_CanBeReady");
static_assert(offsetof(MatchServicedPlayerState_CanBeReady, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_CanBeReady::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.CanPickCharacter
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerState_CanPickCharacter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_CanPickCharacter) == 0x000001, "Wrong alignment on MatchServicedPlayerState_CanPickCharacter");
static_assert(sizeof(MatchServicedPlayerState_CanPickCharacter) == 0x000002, "Wrong size on MatchServicedPlayerState_CanPickCharacter");
static_assert(offsetof(MatchServicedPlayerState_CanPickCharacter, _chara_type) == 0x000000, "Member 'MatchServicedPlayerState_CanPickCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_CanPickCharacter, ReturnValue) == 0x000001, "Member 'MatchServicedPlayerState_CanPickCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetArmorType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetArmorType final
{
public:
	EArmorType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetArmorType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetArmorType");
static_assert(sizeof(MatchServicedPlayerState_GetArmorType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetArmorType");
static_assert(offsetof(MatchServicedPlayerState_GetArmorType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetArmorType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetBodyID
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_GetBodyID final
{
public:
	int32                                         _zidx_chara;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Skin_Body                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetBodyID) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetBodyID");
static_assert(sizeof(MatchServicedPlayerState_GetBodyID) == 0x000018, "Wrong size on MatchServicedPlayerState_GetBodyID");
static_assert(offsetof(MatchServicedPlayerState_GetBodyID, _zidx_chara) == 0x000000, "Member 'MatchServicedPlayerState_GetBodyID::_zidx_chara' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetBodyID, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetBodyID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetBoosterID
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_GetBoosterID final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Booster                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetBoosterID) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetBoosterID");
static_assert(sizeof(MatchServicedPlayerState_GetBoosterID) == 0x000018, "Wrong size on MatchServicedPlayerState_GetBoosterID");
static_assert(offsetof(MatchServicedPlayerState_GetBoosterID, _slot_zidx) == 0x000000, "Member 'MatchServicedPlayerState_GetBoosterID::_slot_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetBoosterID, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetBoosterID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetBoosterIndex
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_GetBoosterIndex final
{
public:
	struct FItemID_Booster                        _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9C[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedPlayerState_GetBoosterIndex) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetBoosterIndex");
static_assert(sizeof(MatchServicedPlayerState_GetBoosterIndex) == 0x000018, "Wrong size on MatchServicedPlayerState_GetBoosterIndex");
static_assert(offsetof(MatchServicedPlayerState_GetBoosterIndex, _item_id) == 0x000000, "Member 'MatchServicedPlayerState_GetBoosterIndex::_item_id' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetBoosterIndex, ReturnValue) == 0x000010, "Member 'MatchServicedPlayerState_GetBoosterIndex::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetBoosters
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetBoosters final
{
public:
	TArray<struct FItemID_Booster>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetBoosters) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetBoosters");
static_assert(sizeof(MatchServicedPlayerState_GetBoosters) == 0x000010, "Wrong size on MatchServicedPlayerState_GetBoosters");
static_assert(offsetof(MatchServicedPlayerState_GetBoosters, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetBoosters::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetBoosterTicketCount
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_GetBoosterTicketCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetBoosterTicketCount) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetBoosterTicketCount");
static_assert(sizeof(MatchServicedPlayerState_GetBoosterTicketCount) == 0x000004, "Wrong size on MatchServicedPlayerState_GetBoosterTicketCount");
static_assert(offsetof(MatchServicedPlayerState_GetBoosterTicketCount, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetBoosterTicketCount::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCharacter
// 0x0140 (0x0140 - 0x0000)
struct MatchServicedPlayerState_GetCharacter final
{
public:
	struct FCharacterSetting                      ReturnValue;                                       // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCharacter) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetCharacter");
static_assert(sizeof(MatchServicedPlayerState_GetCharacter) == 0x000140, "Wrong size on MatchServicedPlayerState_GetCharacter");
static_assert(offsetof(MatchServicedPlayerState_GetCharacter, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCharacterIcon
// 0x0028 (0x0028 - 0x0000)
struct MatchServicedPlayerState_GetCharacterIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCharacterIcon) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetCharacterIcon");
static_assert(sizeof(MatchServicedPlayerState_GetCharacterIcon) == 0x000028, "Wrong size on MatchServicedPlayerState_GetCharacterIcon");
static_assert(offsetof(MatchServicedPlayerState_GetCharacterIcon, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCharacterIcon::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCurrentCharacterIndex
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_GetCurrentCharacterIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCurrentCharacterIndex) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetCurrentCharacterIndex");
static_assert(sizeof(MatchServicedPlayerState_GetCurrentCharacterIndex) == 0x000004, "Wrong size on MatchServicedPlayerState_GetCurrentCharacterIndex");
static_assert(offsetof(MatchServicedPlayerState_GetCurrentCharacterIndex, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCurrentCharacterIndex::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCurrentCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetCurrentCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCurrentCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetCurrentCharaType");
static_assert(sizeof(MatchServicedPlayerState_GetCurrentCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetCurrentCharaType");
static_assert(offsetof(MatchServicedPlayerState_GetCurrentCharaType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCurrentCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCurrentGunPreset
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetCurrentGunPreset final
{
public:
	struct FGunPreset                             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCurrentGunPreset) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetCurrentGunPreset");
static_assert(sizeof(MatchServicedPlayerState_GetCurrentGunPreset) == 0x000010, "Wrong size on MatchServicedPlayerState_GetCurrentGunPreset");
static_assert(offsetof(MatchServicedPlayerState_GetCurrentGunPreset, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCurrentGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCurrentGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct MatchServicedPlayerState_GetCurrentGunSpec final
{
public:
	struct FGunSpec                               ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCurrentGunSpec) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetCurrentGunSpec");
static_assert(sizeof(MatchServicedPlayerState_GetCurrentGunSpec) == 0x0000D0, "Wrong size on MatchServicedPlayerState_GetCurrentGunSpec");
static_assert(offsetof(MatchServicedPlayerState_GetCurrentGunSpec, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCurrentGunSpec::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetCurrentlySelectedCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetCurrentlySelectedCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetCurrentlySelectedCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetCurrentlySelectedCharaType");
static_assert(sizeof(MatchServicedPlayerState_GetCurrentlySelectedCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetCurrentlySelectedCharaType");
static_assert(offsetof(MatchServicedPlayerState_GetCurrentlySelectedCharaType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetCurrentlySelectedCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetELO
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_GetELO final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetELO) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetELO");
static_assert(sizeof(MatchServicedPlayerState_GetELO) == 0x000004, "Wrong size on MatchServicedPlayerState_GetELO");
static_assert(offsetof(MatchServicedPlayerState_GetELO, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetELO::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetEmblem
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetEmblem final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetEmblem) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetEmblem");
static_assert(sizeof(MatchServicedPlayerState_GetEmblem) == 0x000010, "Wrong size on MatchServicedPlayerState_GetEmblem");
static_assert(offsetof(MatchServicedPlayerState_GetEmblem, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetEmblem::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetEnableChangeMaster
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetEnableChangeMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetEnableChangeMaster) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetEnableChangeMaster");
static_assert(sizeof(MatchServicedPlayerState_GetEnableChangeMaster) == 0x000001, "Wrong size on MatchServicedPlayerState_GetEnableChangeMaster");
static_assert(offsetof(MatchServicedPlayerState_GetEnableChangeMaster, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetEnableChangeMaster::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetGunPreset
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_GetGunPreset final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetGunPreset) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetGunPreset");
static_assert(sizeof(MatchServicedPlayerState_GetGunPreset) == 0x000018, "Wrong size on MatchServicedPlayerState_GetGunPreset");
static_assert(offsetof(MatchServicedPlayerState_GetGunPreset, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_GetGunPreset::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetGunPreset, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetGunSpec
// 0x00D8 (0x00D8 - 0x0000)
struct MatchServicedPlayerState_GetGunSpec final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunSpec                               ReturnValue;                                       // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetGunSpec) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetGunSpec");
static_assert(sizeof(MatchServicedPlayerState_GetGunSpec) == 0x0000D8, "Wrong size on MatchServicedPlayerState_GetGunSpec");
static_assert(offsetof(MatchServicedPlayerState_GetGunSpec, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_GetGunSpec::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetGunSpec, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetGunSpec::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetHeadID
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_GetHeadID final
{
public:
	int32                                         _zidx_chara;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Skin_Head                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetHeadID) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetHeadID");
static_assert(sizeof(MatchServicedPlayerState_GetHeadID) == 0x000018, "Wrong size on MatchServicedPlayerState_GetHeadID");
static_assert(offsetof(MatchServicedPlayerState_GetHeadID, _zidx_chara) == 0x000000, "Member 'MatchServicedPlayerState_GetHeadID::_zidx_chara' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetHeadID, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetHeadID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetJoinType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetJoinType final
{
public:
	EJoinType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetJoinType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetJoinType");
static_assert(sizeof(MatchServicedPlayerState_GetJoinType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetJoinType");
static_assert(offsetof(MatchServicedPlayerState_GetJoinType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetJoinType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetKPI
// 0x000C (0x000C - 0x0000)
struct MatchServicedPlayerState_GetKPI final
{
public:
	struct FPlayerKPI                             ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetKPI) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetKPI");
static_assert(sizeof(MatchServicedPlayerState_GetKPI) == 0x00000C, "Wrong size on MatchServicedPlayerState_GetKPI");
static_assert(offsetof(MatchServicedPlayerState_GetKPI, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetKPI::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetLocalCharacter
// 0x0128 (0x0128 - 0x0000)
struct MatchServicedPlayerState_GetLocalCharacter final
{
public:
	struct FLocalCharacterSet                     ReturnValue;                                       // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetLocalCharacter) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetLocalCharacter");
static_assert(sizeof(MatchServicedPlayerState_GetLocalCharacter) == 0x000128, "Wrong size on MatchServicedPlayerState_GetLocalCharacter");
static_assert(offsetof(MatchServicedPlayerState_GetLocalCharacter, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetLocalCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetLocalCharacterIndex
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_GetLocalCharacterIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetLocalCharacterIndex) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetLocalCharacterIndex");
static_assert(sizeof(MatchServicedPlayerState_GetLocalCharacterIndex) == 0x000004, "Wrong size on MatchServicedPlayerState_GetLocalCharacterIndex");
static_assert(offsetof(MatchServicedPlayerState_GetLocalCharacterIndex, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetLocalCharacterIndex::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetLocalCurrentCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetLocalCurrentCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetLocalCurrentCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetLocalCurrentCharaType");
static_assert(sizeof(MatchServicedPlayerState_GetLocalCurrentCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetLocalCurrentCharaType");
static_assert(offsetof(MatchServicedPlayerState_GetLocalCurrentCharaType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetLocalCurrentCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetLocalNewCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetLocalNewCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetLocalNewCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetLocalNewCharaType");
static_assert(sizeof(MatchServicedPlayerState_GetLocalNewCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetLocalNewCharaType");
static_assert(offsetof(MatchServicedPlayerState_GetLocalNewCharaType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetLocalNewCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetLocalPickedCharacter
// 0x0130 (0x0130 - 0x0000)
struct MatchServicedPlayerState_GetLocalPickedCharacter final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLocalCharacterSet                     ReturnValue;                                       // 0x0008(0x0128)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetLocalPickedCharacter) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetLocalPickedCharacter");
static_assert(sizeof(MatchServicedPlayerState_GetLocalPickedCharacter) == 0x000130, "Wrong size on MatchServicedPlayerState_GetLocalPickedCharacter");
static_assert(offsetof(MatchServicedPlayerState_GetLocalPickedCharacter, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_GetLocalPickedCharacter::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetLocalPickedCharacter, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetLocalPickedCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetLocalPickedCharacters
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetLocalPickedCharacters final
{
public:
	TArray<struct FLocalCharacterSet>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetLocalPickedCharacters) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetLocalPickedCharacters");
static_assert(sizeof(MatchServicedPlayerState_GetLocalPickedCharacters) == 0x000010, "Wrong size on MatchServicedPlayerState_GetLocalPickedCharacters");
static_assert(offsetof(MatchServicedPlayerState_GetLocalPickedCharacters, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetLocalPickedCharacters::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetNetID
// 0x0002 (0x0002 - 0x0000)
struct MatchServicedPlayerState_GetNetID final
{
public:
	struct FNetID                                 ReturnValue;                                       // 0x0000(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetNetID) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetNetID");
static_assert(sizeof(MatchServicedPlayerState_GetNetID) == 0x000002, "Wrong size on MatchServicedPlayerState_GetNetID");
static_assert(offsetof(MatchServicedPlayerState_GetNetID, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetNetID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetNewCharaType
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetNewCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetNewCharaType) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetNewCharaType");
static_assert(sizeof(MatchServicedPlayerState_GetNewCharaType) == 0x000001, "Wrong size on MatchServicedPlayerState_GetNewCharaType");
static_assert(offsetof(MatchServicedPlayerState_GetNewCharaType, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetNewCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct MatchServicedPlayerState_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetNickname) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetNickname");
static_assert(sizeof(MatchServicedPlayerState_GetNickname) == 0x000018, "Wrong size on MatchServicedPlayerState_GetNickname");
static_assert(offsetof(MatchServicedPlayerState_GetNickname, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetNicknameFX
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetNicknameFX final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetNicknameFX) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetNicknameFX");
static_assert(sizeof(MatchServicedPlayerState_GetNicknameFX) == 0x000010, "Wrong size on MatchServicedPlayerState_GetNicknameFX");
static_assert(offsetof(MatchServicedPlayerState_GetNicknameFX, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetNicknameFX::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetOwnCharacter
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_GetOwnCharacter final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetOwnCharacter) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetOwnCharacter");
static_assert(sizeof(MatchServicedPlayerState_GetOwnCharacter) == 0x000008, "Wrong size on MatchServicedPlayerState_GetOwnCharacter");
static_assert(offsetof(MatchServicedPlayerState_GetOwnCharacter, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetOwnCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetPassiveSkills
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetPassiveSkills final
{
public:
	TArray<struct FPassiveSkill>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetPassiveSkills) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetPassiveSkills");
static_assert(sizeof(MatchServicedPlayerState_GetPassiveSkills) == 0x000010, "Wrong size on MatchServicedPlayerState_GetPassiveSkills");
static_assert(offsetof(MatchServicedPlayerState_GetPassiveSkills, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetPassiveSkills::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetPickedCharacter
// 0x0148 (0x0148 - 0x0000)
struct MatchServicedPlayerState_GetPickedCharacter final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterSetting                      ReturnValue;                                       // 0x0008(0x0140)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetPickedCharacter) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetPickedCharacter");
static_assert(sizeof(MatchServicedPlayerState_GetPickedCharacter) == 0x000148, "Wrong size on MatchServicedPlayerState_GetPickedCharacter");
static_assert(offsetof(MatchServicedPlayerState_GetPickedCharacter, _zidx) == 0x000000, "Member 'MatchServicedPlayerState_GetPickedCharacter::_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetPickedCharacter, ReturnValue) == 0x000008, "Member 'MatchServicedPlayerState_GetPickedCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetPickedCharacterIndex
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_GetPickedCharacterIndex final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetPickedCharacterIndex) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetPickedCharacterIndex");
static_assert(sizeof(MatchServicedPlayerState_GetPickedCharacterIndex) == 0x000008, "Wrong size on MatchServicedPlayerState_GetPickedCharacterIndex");
static_assert(offsetof(MatchServicedPlayerState_GetPickedCharacterIndex, _chara_type) == 0x000000, "Member 'MatchServicedPlayerState_GetPickedCharacterIndex::_chara_type' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetPickedCharacterIndex, ReturnValue) == 0x000004, "Member 'MatchServicedPlayerState_GetPickedCharacterIndex::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetPickedCharaType
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_GetPickedCharaType final
{
public:
	int32                                         _zidx_chara;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA3[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedPlayerState_GetPickedCharaType) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetPickedCharaType");
static_assert(sizeof(MatchServicedPlayerState_GetPickedCharaType) == 0x000008, "Wrong size on MatchServicedPlayerState_GetPickedCharaType");
static_assert(offsetof(MatchServicedPlayerState_GetPickedCharaType, _zidx_chara) == 0x000000, "Member 'MatchServicedPlayerState_GetPickedCharaType::_zidx_chara' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_GetPickedCharaType, ReturnValue) == 0x000004, "Member 'MatchServicedPlayerState_GetPickedCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetPlayerSideAgainstLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer final
{
public:
	EPlayerSide                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer");
static_assert(sizeof(MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer) == 0x000001, "Wrong size on MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer");
static_assert(offsetof(MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetPlayerSideAgainstLocalPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetProfileCard
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetProfileCard final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetProfileCard) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetProfileCard");
static_assert(sizeof(MatchServicedPlayerState_GetProfileCard) == 0x000010, "Wrong size on MatchServicedPlayerState_GetProfileCard");
static_assert(offsetof(MatchServicedPlayerState_GetProfileCard, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetProfileCard::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetRelatedWidget
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_GetRelatedWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetRelatedWidget) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetRelatedWidget");
static_assert(sizeof(MatchServicedPlayerState_GetRelatedWidget) == 0x000008, "Wrong size on MatchServicedPlayerState_GetRelatedWidget");
static_assert(offsetof(MatchServicedPlayerState_GetRelatedWidget, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetRelatedWidget::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetTeam) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetTeam");
static_assert(sizeof(MatchServicedPlayerState_GetTeam) == 0x000001, "Wrong size on MatchServicedPlayerState_GetTeam");
static_assert(offsetof(MatchServicedPlayerState_GetTeam, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetTeam::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetTeamColorForHUD
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedPlayerState_GetTeamColorForHUD final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetTeamColorForHUD) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetTeamColorForHUD");
static_assert(sizeof(MatchServicedPlayerState_GetTeamColorForHUD) == 0x000010, "Wrong size on MatchServicedPlayerState_GetTeamColorForHUD");
static_assert(offsetof(MatchServicedPlayerState_GetTeamColorForHUD, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetTeamColorForHUD::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetTier
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_GetTier final
{
public:
	ETier                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetTier) == 0x000001, "Wrong alignment on MatchServicedPlayerState_GetTier");
static_assert(sizeof(MatchServicedPlayerState_GetTier) == 0x000001, "Wrong size on MatchServicedPlayerState_GetTier");
static_assert(offsetof(MatchServicedPlayerState_GetTier, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetTier::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetUsedBoosterCount
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_GetUsedBoosterCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetUsedBoosterCount) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetUsedBoosterCount");
static_assert(sizeof(MatchServicedPlayerState_GetUsedBoosterCount) == 0x000004, "Wrong size on MatchServicedPlayerState_GetUsedBoosterCount");
static_assert(offsetof(MatchServicedPlayerState_GetUsedBoosterCount, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetUsedBoosterCount::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetUser
// 0x00A0 (0x00A0 - 0x0000)
struct MatchServicedPlayerState_GetUser final
{
public:
	struct FUserInBattle                          ReturnValue;                                       // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetUser) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetUser");
static_assert(sizeof(MatchServicedPlayerState_GetUser) == 0x0000A0, "Wrong size on MatchServicedPlayerState_GetUser");
static_assert(offsetof(MatchServicedPlayerState_GetUser, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetUser::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetUserID
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_GetUserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetUserID) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetUserID");
static_assert(sizeof(MatchServicedPlayerState_GetUserID) == 0x000008, "Wrong size on MatchServicedPlayerState_GetUserID");
static_assert(offsetof(MatchServicedPlayerState_GetUserID, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetUserLevel
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedPlayerState_GetUserLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetUserLevel) == 0x000004, "Wrong alignment on MatchServicedPlayerState_GetUserLevel");
static_assert(sizeof(MatchServicedPlayerState_GetUserLevel) == 0x000004, "Wrong size on MatchServicedPlayerState_GetUserLevel");
static_assert(offsetof(MatchServicedPlayerState_GetUserLevel, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetUserLevel::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.GetUserProfile
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_GetUserProfile final
{
public:
	class UUserProfile*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_GetUserProfile) == 0x000008, "Wrong alignment on MatchServicedPlayerState_GetUserProfile");
static_assert(sizeof(MatchServicedPlayerState_GetUserProfile) == 0x000008, "Wrong size on MatchServicedPlayerState_GetUserProfile");
static_assert(offsetof(MatchServicedPlayerState_GetUserProfile, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_GetUserProfile::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.HasValidNetID
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_HasValidNetID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_HasValidNetID) == 0x000001, "Wrong alignment on MatchServicedPlayerState_HasValidNetID");
static_assert(sizeof(MatchServicedPlayerState_HasValidNetID) == 0x000001, "Wrong size on MatchServicedPlayerState_HasValidNetID");
static_assert(offsetof(MatchServicedPlayerState_HasValidNetID, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_HasValidNetID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.HasValidUserID
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_HasValidUserID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_HasValidUserID) == 0x000001, "Wrong alignment on MatchServicedPlayerState_HasValidUserID");
static_assert(sizeof(MatchServicedPlayerState_HasValidUserID) == 0x000001, "Wrong size on MatchServicedPlayerState_HasValidUserID");
static_assert(offsetof(MatchServicedPlayerState_HasValidUserID, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_HasValidUserID::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.HasValidValue
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_HasValidValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_HasValidValue) == 0x000001, "Wrong alignment on MatchServicedPlayerState_HasValidValue");
static_assert(sizeof(MatchServicedPlayerState_HasValidValue) == 0x000001, "Wrong size on MatchServicedPlayerState_HasValidValue");
static_assert(offsetof(MatchServicedPlayerState_HasValidValue, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_HasValidValue::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsACoach
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsACoach final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsACoach) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsACoach");
static_assert(sizeof(MatchServicedPlayerState_IsACoach) == 0x000001, "Wrong size on MatchServicedPlayerState_IsACoach");
static_assert(offsetof(MatchServicedPlayerState_IsACoach, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsACoach::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsAObserver
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsAObserver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsAObserver) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsAObserver");
static_assert(sizeof(MatchServicedPlayerState_IsAObserver) == 0x000001, "Wrong size on MatchServicedPlayerState_IsAObserver");
static_assert(offsetof(MatchServicedPlayerState_IsAObserver, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsAObserver::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsAPlayer
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsAPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsAPlayer) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsAPlayer");
static_assert(sizeof(MatchServicedPlayerState_IsAPlayer) == 0x000001, "Wrong size on MatchServicedPlayerState_IsAPlayer");
static_assert(offsetof(MatchServicedPlayerState_IsAPlayer, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsAPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsBlueSideForHUD
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsBlueSideForHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsBlueSideForHUD) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsBlueSideForHUD");
static_assert(sizeof(MatchServicedPlayerState_IsBlueSideForHUD) == 0x000001, "Wrong size on MatchServicedPlayerState_IsBlueSideForHUD");
static_assert(offsetof(MatchServicedPlayerState_IsBlueSideForHUD, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsBlueSideForHUD::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsBoosterSlotEnabled
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedPlayerState_IsBoosterSlotEnabled final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA4[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedPlayerState_IsBoosterSlotEnabled) == 0x000004, "Wrong alignment on MatchServicedPlayerState_IsBoosterSlotEnabled");
static_assert(sizeof(MatchServicedPlayerState_IsBoosterSlotEnabled) == 0x000008, "Wrong size on MatchServicedPlayerState_IsBoosterSlotEnabled");
static_assert(offsetof(MatchServicedPlayerState_IsBoosterSlotEnabled, _slot_zidx) == 0x000000, "Member 'MatchServicedPlayerState_IsBoosterSlotEnabled::_slot_zidx' has a wrong offset!");
static_assert(offsetof(MatchServicedPlayerState_IsBoosterSlotEnabled, ReturnValue) == 0x000004, "Member 'MatchServicedPlayerState_IsBoosterSlotEnabled::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsLocal
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsLocal) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsLocal");
static_assert(sizeof(MatchServicedPlayerState_IsLocal) == 0x000001, "Wrong size on MatchServicedPlayerState_IsLocal");
static_assert(offsetof(MatchServicedPlayerState_IsLocal, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsLocal::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsNotPlayer
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsNotPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsNotPlayer) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsNotPlayer");
static_assert(sizeof(MatchServicedPlayerState_IsNotPlayer) == 0x000001, "Wrong size on MatchServicedPlayerState_IsNotPlayer");
static_assert(offsetof(MatchServicedPlayerState_IsNotPlayer, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsNotPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsReadyToFight
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsReadyToFight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsReadyToFight) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsReadyToFight");
static_assert(sizeof(MatchServicedPlayerState_IsReadyToFight) == 0x000001, "Wrong size on MatchServicedPlayerState_IsReadyToFight");
static_assert(offsetof(MatchServicedPlayerState_IsReadyToFight, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsReadyToFight::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsRoomLeader
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsRoomLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsRoomLeader) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsRoomLeader");
static_assert(sizeof(MatchServicedPlayerState_IsRoomLeader) == 0x000001, "Wrong size on MatchServicedPlayerState_IsRoomLeader");
static_assert(offsetof(MatchServicedPlayerState_IsRoomLeader, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsRoomLeader::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedPlayerState.IsRoomManager
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedPlayerState_IsRoomManager final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedPlayerState_IsRoomManager) == 0x000001, "Wrong alignment on MatchServicedPlayerState_IsRoomManager");
static_assert(sizeof(MatchServicedPlayerState_IsRoomManager) == 0x000001, "Wrong size on MatchServicedPlayerState_IsRoomManager");
static_assert(offsetof(MatchServicedPlayerState_IsRoomManager, ReturnValue) == 0x000000, "Member 'MatchServicedPlayerState_IsRoomManager::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.DEBUG_ActivateInfinitedBullet
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_DEBUG_ActivateInfinitedBullet final
{
public:
	bool                                          _is_activated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_DEBUG_ActivateInfinitedBullet) == 0x000001, "Wrong alignment on BattlePlayerState_DEBUG_ActivateInfinitedBullet");
static_assert(sizeof(BattlePlayerState_DEBUG_ActivateInfinitedBullet) == 0x000001, "Wrong size on BattlePlayerState_DEBUG_ActivateInfinitedBullet");
static_assert(offsetof(BattlePlayerState_DEBUG_ActivateInfinitedBullet, _is_activated) == 0x000000, "Member 'BattlePlayerState_DEBUG_ActivateInfinitedBullet::_is_activated' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetBattleStoreBuffStackByItemID
// 0x0040 (0x0040 - 0x0000)
struct BattlePlayerState_GetBattleStoreBuffStackByItemID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _out_is_success;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FAC[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattleStore_BuffStack                 ReturnValue;                                       // 0x0018(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetBattleStoreBuffStackByItemID) == 0x000008, "Wrong alignment on BattlePlayerState_GetBattleStoreBuffStackByItemID");
static_assert(sizeof(BattlePlayerState_GetBattleStoreBuffStackByItemID) == 0x000040, "Wrong size on BattlePlayerState_GetBattleStoreBuffStackByItemID");
static_assert(offsetof(BattlePlayerState_GetBattleStoreBuffStackByItemID, _id) == 0x000000, "Member 'BattlePlayerState_GetBattleStoreBuffStackByItemID::_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_GetBattleStoreBuffStackByItemID, _out_is_success) == 0x000010, "Member 'BattlePlayerState_GetBattleStoreBuffStackByItemID::_out_is_success' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_GetBattleStoreBuffStackByItemID, ReturnValue) == 0x000018, "Member 'BattlePlayerState_GetBattleStoreBuffStackByItemID::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.OnRep_InGameMoney
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_OnRep_InGameMoney final
{
public:
	int32                                         _old_money;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_OnRep_InGameMoney) == 0x000004, "Wrong alignment on BattlePlayerState_OnRep_InGameMoney");
static_assert(sizeof(BattlePlayerState_OnRep_InGameMoney) == 0x000004, "Wrong size on BattlePlayerState_OnRep_InGameMoney");
static_assert(offsetof(BattlePlayerState_OnRep_InGameMoney, _old_money) == 0x000000, "Member 'BattlePlayerState_OnRep_InGameMoney::_old_money' has a wrong offset!");

// Function Stigma.BattlePlayerState.SERVER_AddAssistCount
// 0x00A8 (0x00A8 - 0x0000)
struct BattlePlayerState_SERVER_AddAssistCount final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_SERVER_AddAssistCount) == 0x000008, "Wrong alignment on BattlePlayerState_SERVER_AddAssistCount");
static_assert(sizeof(BattlePlayerState_SERVER_AddAssistCount) == 0x0000A8, "Wrong size on BattlePlayerState_SERVER_AddAssistCount");
static_assert(offsetof(BattlePlayerState_SERVER_AddAssistCount, _hit) == 0x000000, "Member 'BattlePlayerState_SERVER_AddAssistCount::_hit' has a wrong offset!");

// Function Stigma.BattlePlayerState.SERVER_AddDeathCount
// 0x00A8 (0x00A8 - 0x0000)
struct BattlePlayerState_SERVER_AddDeathCount final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_SERVER_AddDeathCount) == 0x000008, "Wrong alignment on BattlePlayerState_SERVER_AddDeathCount");
static_assert(sizeof(BattlePlayerState_SERVER_AddDeathCount) == 0x0000A8, "Wrong size on BattlePlayerState_SERVER_AddDeathCount");
static_assert(offsetof(BattlePlayerState_SERVER_AddDeathCount, _hit) == 0x000000, "Member 'BattlePlayerState_SERVER_AddDeathCount::_hit' has a wrong offset!");

// Function Stigma.BattlePlayerState.SERVER_AddKillCount
// 0x00A8 (0x00A8 - 0x0000)
struct BattlePlayerState_SERVER_AddKillCount final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_SERVER_AddKillCount) == 0x000008, "Wrong alignment on BattlePlayerState_SERVER_AddKillCount");
static_assert(sizeof(BattlePlayerState_SERVER_AddKillCount) == 0x0000A8, "Wrong size on BattlePlayerState_SERVER_AddKillCount");
static_assert(offsetof(BattlePlayerState_SERVER_AddKillCount, _hit) == 0x000000, "Member 'BattlePlayerState_SERVER_AddKillCount::_hit' has a wrong offset!");

// Function Stigma.BattlePlayerState.SERVER_IncreaseInGameMoney
// 0x000C (0x000C - 0x0000)
struct BattlePlayerState_SERVER_IncreaseInGameMoney final
{
public:
	int32                                         _inc_money;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoldRewardType                               _reward_type;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FAD[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _round;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_SERVER_IncreaseInGameMoney) == 0x000004, "Wrong alignment on BattlePlayerState_SERVER_IncreaseInGameMoney");
static_assert(sizeof(BattlePlayerState_SERVER_IncreaseInGameMoney) == 0x00000C, "Wrong size on BattlePlayerState_SERVER_IncreaseInGameMoney");
static_assert(offsetof(BattlePlayerState_SERVER_IncreaseInGameMoney, _inc_money) == 0x000000, "Member 'BattlePlayerState_SERVER_IncreaseInGameMoney::_inc_money' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_SERVER_IncreaseInGameMoney, _reward_type) == 0x000004, "Member 'BattlePlayerState_SERVER_IncreaseInGameMoney::_reward_type' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_SERVER_IncreaseInGameMoney, _round) == 0x000008, "Member 'BattlePlayerState_SERVER_IncreaseInGameMoney::_round' has a wrong offset!");

// Function Stigma.BattlePlayerState.SERVER_PayInGameMoney
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerState_SERVER_PayInGameMoney final
{
public:
	int32                                         _payment;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FAE[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerState_SERVER_PayInGameMoney) == 0x000004, "Wrong alignment on BattlePlayerState_SERVER_PayInGameMoney");
static_assert(sizeof(BattlePlayerState_SERVER_PayInGameMoney) == 0x000008, "Wrong size on BattlePlayerState_SERVER_PayInGameMoney");
static_assert(offsetof(BattlePlayerState_SERVER_PayInGameMoney, _payment) == 0x000000, "Member 'BattlePlayerState_SERVER_PayInGameMoney::_payment' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_SERVER_PayInGameMoney, ReturnValue) == 0x000004, "Member 'BattlePlayerState_SERVER_PayInGameMoney::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.SERVER_SetInSafeArea
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_SERVER_SetInSafeArea final
{
public:
	bool                                          _in_safe_area;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_SERVER_SetInSafeArea) == 0x000001, "Wrong alignment on BattlePlayerState_SERVER_SetInSafeArea");
static_assert(sizeof(BattlePlayerState_SERVER_SetInSafeArea) == 0x000001, "Wrong size on BattlePlayerState_SERVER_SetInSafeArea");
static_assert(offsetof(BattlePlayerState_SERVER_SetInSafeArea, _in_safe_area) == 0x000000, "Member 'BattlePlayerState_SERVER_SetInSafeArea::_in_safe_area' has a wrong offset!");

// Function Stigma.BattlePlayerState.CanRespawn
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_CanRespawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_CanRespawn) == 0x000001, "Wrong alignment on BattlePlayerState_CanRespawn");
static_assert(sizeof(BattlePlayerState_CanRespawn) == 0x000001, "Wrong size on BattlePlayerState_CanRespawn");
static_assert(offsetof(BattlePlayerState_CanRespawn, ReturnValue) == 0x000000, "Member 'BattlePlayerState_CanRespawn::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.CanRevive
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_CanRevive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_CanRevive) == 0x000001, "Wrong alignment on BattlePlayerState_CanRevive");
static_assert(sizeof(BattlePlayerState_CanRevive) == 0x000001, "Wrong size on BattlePlayerState_CanRevive");
static_assert(offsetof(BattlePlayerState_CanRevive, ReturnValue) == 0x000000, "Member 'BattlePlayerState_CanRevive::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.DEBUG_IsActivatedInfinitedBullet
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_DEBUG_IsActivatedInfinitedBullet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_DEBUG_IsActivatedInfinitedBullet) == 0x000001, "Wrong alignment on BattlePlayerState_DEBUG_IsActivatedInfinitedBullet");
static_assert(sizeof(BattlePlayerState_DEBUG_IsActivatedInfinitedBullet) == 0x000001, "Wrong size on BattlePlayerState_DEBUG_IsActivatedInfinitedBullet");
static_assert(offsetof(BattlePlayerState_DEBUG_IsActivatedInfinitedBullet, ReturnValue) == 0x000000, "Member 'BattlePlayerState_DEBUG_IsActivatedInfinitedBullet::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.FindBuffByCausingItemID
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerState_FindBuffByCausingItemID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuffBase*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_FindBuffByCausingItemID) == 0x000008, "Wrong alignment on BattlePlayerState_FindBuffByCausingItemID");
static_assert(sizeof(BattlePlayerState_FindBuffByCausingItemID) == 0x000018, "Wrong size on BattlePlayerState_FindBuffByCausingItemID");
static_assert(offsetof(BattlePlayerState_FindBuffByCausingItemID, _item_id) == 0x000000, "Member 'BattlePlayerState_FindBuffByCausingItemID::_item_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_FindBuffByCausingItemID, ReturnValue) == 0x000010, "Member 'BattlePlayerState_FindBuffByCausingItemID::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetAssistCount
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetAssistCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetAssistCount) == 0x000004, "Wrong alignment on BattlePlayerState_GetAssistCount");
static_assert(sizeof(BattlePlayerState_GetAssistCount) == 0x000004, "Wrong size on BattlePlayerState_GetAssistCount");
static_assert(offsetof(BattlePlayerState_GetAssistCount, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetAssistCount::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetBattleStoreItemPrice
// 0x0018 (0x0018 - 0x0000)
struct BattlePlayerState_GetBattleStoreItemPrice final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FAF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerState_GetBattleStoreItemPrice) == 0x000008, "Wrong alignment on BattlePlayerState_GetBattleStoreItemPrice");
static_assert(sizeof(BattlePlayerState_GetBattleStoreItemPrice) == 0x000018, "Wrong size on BattlePlayerState_GetBattleStoreItemPrice");
static_assert(offsetof(BattlePlayerState_GetBattleStoreItemPrice, _id) == 0x000000, "Member 'BattlePlayerState_GetBattleStoreItemPrice::_id' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_GetBattleStoreItemPrice, ReturnValue) == 0x000010, "Member 'BattlePlayerState_GetBattleStoreItemPrice::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetDeathCount
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetDeathCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetDeathCount) == 0x000004, "Wrong alignment on BattlePlayerState_GetDeathCount");
static_assert(sizeof(BattlePlayerState_GetDeathCount) == 0x000004, "Wrong size on BattlePlayerState_GetDeathCount");
static_assert(offsetof(BattlePlayerState_GetDeathCount, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetDeathCount::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetEnteredRound
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetEnteredRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetEnteredRound) == 0x000004, "Wrong alignment on BattlePlayerState_GetEnteredRound");
static_assert(sizeof(BattlePlayerState_GetEnteredRound) == 0x000004, "Wrong size on BattlePlayerState_GetEnteredRound");
static_assert(offsetof(BattlePlayerState_GetEnteredRound, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetEnteredRound::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetHP
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetHP) == 0x000004, "Wrong alignment on BattlePlayerState_GetHP");
static_assert(sizeof(BattlePlayerState_GetHP) == 0x000004, "Wrong size on BattlePlayerState_GetHP");
static_assert(offsetof(BattlePlayerState_GetHP, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetHP::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetHPRate
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetHPRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetHPRate) == 0x000004, "Wrong alignment on BattlePlayerState_GetHPRate");
static_assert(sizeof(BattlePlayerState_GetHPRate) == 0x000004, "Wrong size on BattlePlayerState_GetHPRate");
static_assert(offsetof(BattlePlayerState_GetHPRate, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetHPRate::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetInGameMoney
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetInGameMoney final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetInGameMoney) == 0x000004, "Wrong alignment on BattlePlayerState_GetInGameMoney");
static_assert(sizeof(BattlePlayerState_GetInGameMoney) == 0x000004, "Wrong size on BattlePlayerState_GetInGameMoney");
static_assert(offsetof(BattlePlayerState_GetInGameMoney, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetInGameMoney::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetKillCount
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetKillCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetKillCount) == 0x000004, "Wrong alignment on BattlePlayerState_GetKillCount");
static_assert(sizeof(BattlePlayerState_GetKillCount) == 0x000004, "Wrong size on BattlePlayerState_GetKillCount");
static_assert(offsetof(BattlePlayerState_GetKillCount, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetKillCount::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetRespawnDelayTime
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetRespawnDelayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetRespawnDelayTime) == 0x000004, "Wrong alignment on BattlePlayerState_GetRespawnDelayTime");
static_assert(sizeof(BattlePlayerState_GetRespawnDelayTime) == 0x000004, "Wrong size on BattlePlayerState_GetRespawnDelayTime");
static_assert(offsetof(BattlePlayerState_GetRespawnDelayTime, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetRespawnDelayTime::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.GetReviveCount
// 0x0004 (0x0004 - 0x0000)
struct BattlePlayerState_GetReviveCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_GetReviveCount) == 0x000004, "Wrong alignment on BattlePlayerState_GetReviveCount");
static_assert(sizeof(BattlePlayerState_GetReviveCount) == 0x000004, "Wrong size on BattlePlayerState_GetReviveCount");
static_assert(offsetof(BattlePlayerState_GetReviveCount, ReturnValue) == 0x000000, "Member 'BattlePlayerState_GetReviveCount::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.IsBreakInUser
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_IsBreakInUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_IsBreakInUser) == 0x000001, "Wrong alignment on BattlePlayerState_IsBreakInUser");
static_assert(sizeof(BattlePlayerState_IsBreakInUser) == 0x000001, "Wrong size on BattlePlayerState_IsBreakInUser");
static_assert(offsetof(BattlePlayerState_IsBreakInUser, ReturnValue) == 0x000000, "Member 'BattlePlayerState_IsBreakInUser::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.IsCharacterDied
// 0x0008 (0x0008 - 0x0000)
struct BattlePlayerState_IsCharacterDied final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePlayerState_IsCharacterDied) == 0x000004, "Wrong alignment on BattlePlayerState_IsCharacterDied");
static_assert(sizeof(BattlePlayerState_IsCharacterDied) == 0x000008, "Wrong size on BattlePlayerState_IsCharacterDied");
static_assert(offsetof(BattlePlayerState_IsCharacterDied, _zidx) == 0x000000, "Member 'BattlePlayerState_IsCharacterDied::_zidx' has a wrong offset!");
static_assert(offsetof(BattlePlayerState_IsCharacterDied, ReturnValue) == 0x000004, "Member 'BattlePlayerState_IsCharacterDied::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.IsDied
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_IsDied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_IsDied) == 0x000001, "Wrong alignment on BattlePlayerState_IsDied");
static_assert(sizeof(BattlePlayerState_IsDied) == 0x000001, "Wrong size on BattlePlayerState_IsDied");
static_assert(offsetof(BattlePlayerState_IsDied, ReturnValue) == 0x000000, "Member 'BattlePlayerState_IsDied::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.IsInSafeArea
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_IsInSafeArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_IsInSafeArea) == 0x000001, "Wrong alignment on BattlePlayerState_IsInSafeArea");
static_assert(sizeof(BattlePlayerState_IsInSafeArea) == 0x000001, "Wrong size on BattlePlayerState_IsInSafeArea");
static_assert(offsetof(BattlePlayerState_IsInSafeArea, ReturnValue) == 0x000000, "Member 'BattlePlayerState_IsInSafeArea::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.IsInvincible
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_IsInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_IsInvincible) == 0x000001, "Wrong alignment on BattlePlayerState_IsInvincible");
static_assert(sizeof(BattlePlayerState_IsInvincible) == 0x000001, "Wrong size on BattlePlayerState_IsInvincible");
static_assert(offsetof(BattlePlayerState_IsInvincible, ReturnValue) == 0x000000, "Member 'BattlePlayerState_IsInvincible::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePlayerState.IsSpectating
// 0x0001 (0x0001 - 0x0000)
struct BattlePlayerState_IsSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePlayerState_IsSpectating) == 0x000001, "Wrong alignment on BattlePlayerState_IsSpectating");
static_assert(sizeof(BattlePlayerState_IsSpectating) == 0x000001, "Wrong size on BattlePlayerState_IsSpectating");
static_assert(offsetof(BattlePlayerState_IsSpectating, ReturnValue) == 0x000000, "Member 'BattlePlayerState_IsSpectating::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_PlayerState.GetMoney
// 0x0004 (0x0004 - 0x0000)
struct BountyTDM_PlayerState_GetMoney final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_PlayerState_GetMoney) == 0x000004, "Wrong alignment on BountyTDM_PlayerState_GetMoney");
static_assert(sizeof(BountyTDM_PlayerState_GetMoney) == 0x000004, "Wrong size on BountyTDM_PlayerState_GetMoney");
static_assert(offsetof(BountyTDM_PlayerState_GetMoney, ReturnValue) == 0x000000, "Member 'BountyTDM_PlayerState_GetMoney::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_PlayerState.GetTransferTime
// 0x0004 (0x0004 - 0x0000)
struct BountyTDM_PlayerState_GetTransferTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_PlayerState_GetTransferTime) == 0x000004, "Wrong alignment on BountyTDM_PlayerState_GetTransferTime");
static_assert(sizeof(BountyTDM_PlayerState_GetTransferTime) == 0x000004, "Wrong size on BountyTDM_PlayerState_GetTransferTime");
static_assert(offsetof(BountyTDM_PlayerState_GetTransferTime, ReturnValue) == 0x000000, "Member 'BountyTDM_PlayerState_GetTransferTime::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_PlayerState.IsSendingMoney
// 0x0001 (0x0001 - 0x0000)
struct BountyTDM_PlayerState_IsSendingMoney final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_PlayerState_IsSendingMoney) == 0x000001, "Wrong alignment on BountyTDM_PlayerState_IsSendingMoney");
static_assert(sizeof(BountyTDM_PlayerState_IsSendingMoney) == 0x000001, "Wrong size on BountyTDM_PlayerState_IsSendingMoney");
static_assert(offsetof(BountyTDM_PlayerState_IsSendingMoney, ReturnValue) == 0x000000, "Member 'BountyTDM_PlayerState_IsSendingMoney::ReturnValue' has a wrong offset!");

// Function Stigma.UI_DuplicateKeyPanelBase.RegisterOnDuplicateKeyChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged final
{
public:
	TDelegate<void(struct FKeyMapping& _key_mapping, TArray<EInputAction>& _duplicated_actions)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged) == 0x000004, "Wrong alignment on UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged");
static_assert(sizeof(UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged) == 0x000010, "Wrong size on UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged");
static_assert(offsetof(UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged, _callback) == 0x000000, "Member 'UI_DuplicateKeyPanelBase_RegisterOnDuplicateKeyChanged::_callback' has a wrong offset!");

// Function Stigma.MatchServicedGameState.OnRep_ServerState
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameState_OnRep_ServerState final
{
public:
	EServerStatus                                 _old_state;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_OnRep_ServerState) == 0x000001, "Wrong alignment on MatchServicedGameState_OnRep_ServerState");
static_assert(sizeof(MatchServicedGameState_OnRep_ServerState) == 0x000001, "Wrong size on MatchServicedGameState_OnRep_ServerState");
static_assert(offsetof(MatchServicedGameState_OnRep_ServerState, _old_state) == 0x000000, "Member 'MatchServicedGameState_OnRep_ServerState::_old_state' has a wrong offset!");

// Function Stigma.MatchServicedGameState.RegisterGameSettingNotification
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedGameState_RegisterGameSettingNotification final
{
public:
	TDelegate<void(struct FGameSetting& _setting)> _func;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_RegisterGameSettingNotification) == 0x000004, "Wrong alignment on MatchServicedGameState_RegisterGameSettingNotification");
static_assert(sizeof(MatchServicedGameState_RegisterGameSettingNotification) == 0x000010, "Wrong size on MatchServicedGameState_RegisterGameSettingNotification");
static_assert(offsetof(MatchServicedGameState_RegisterGameSettingNotification, _func) == 0x000000, "Member 'MatchServicedGameState_RegisterGameSettingNotification::_func' has a wrong offset!");

// Function Stigma.MatchServicedGameState.RegisterPlayerJoinNotification
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedGameState_RegisterPlayerJoinNotification final
{
public:
	TDelegate<void(class APlayerState* _ps, EPlayerJoinEvent _event)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_RegisterPlayerJoinNotification) == 0x000004, "Wrong alignment on MatchServicedGameState_RegisterPlayerJoinNotification");
static_assert(sizeof(MatchServicedGameState_RegisterPlayerJoinNotification) == 0x000010, "Wrong size on MatchServicedGameState_RegisterPlayerJoinNotification");
static_assert(offsetof(MatchServicedGameState_RegisterPlayerJoinNotification, _callback) == 0x000000, "Member 'MatchServicedGameState_RegisterPlayerJoinNotification::_callback' has a wrong offset!");

// Function Stigma.MatchServicedGameState.SERVER_SetServerState
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameState_SERVER_SetServerState final
{
public:
	EServerStatus                                 _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_SERVER_SetServerState) == 0x000001, "Wrong alignment on MatchServicedGameState_SERVER_SetServerState");
static_assert(sizeof(MatchServicedGameState_SERVER_SetServerState) == 0x000001, "Wrong size on MatchServicedGameState_SERVER_SetServerState");
static_assert(offsetof(MatchServicedGameState_SERVER_SetServerState, _state) == 0x000000, "Member 'MatchServicedGameState_SERVER_SetServerState::_state' has a wrong offset!");

// Function Stigma.MatchServicedGameState.Setter_GameSetting
// 0x0040 (0x0040 - 0x0000)
struct MatchServicedGameState_Setter_GameSetting final
{
public:
	struct FGameSetting                           _setting;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_Setter_GameSetting) == 0x000008, "Wrong alignment on MatchServicedGameState_Setter_GameSetting");
static_assert(sizeof(MatchServicedGameState_Setter_GameSetting) == 0x000040, "Wrong size on MatchServicedGameState_Setter_GameSetting");
static_assert(offsetof(MatchServicedGameState_Setter_GameSetting, _setting) == 0x000000, "Member 'MatchServicedGameState_Setter_GameSetting::_setting' has a wrong offset!");

// Function Stigma.MatchServicedGameState.Setter_ServerState
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameState_Setter_ServerState final
{
public:
	EServerStatus                                 _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_Setter_ServerState) == 0x000001, "Wrong alignment on MatchServicedGameState_Setter_ServerState");
static_assert(sizeof(MatchServicedGameState_Setter_ServerState) == 0x000001, "Wrong size on MatchServicedGameState_Setter_ServerState");
static_assert(offsetof(MatchServicedGameState_Setter_ServerState, _state) == 0x000000, "Member 'MatchServicedGameState_Setter_ServerState::_state' has a wrong offset!");

// Function Stigma.MatchServicedGameState.UnregisterGameSettingNotification
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedGameState_UnregisterGameSettingNotification final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_UnregisterGameSettingNotification) == 0x000008, "Wrong alignment on MatchServicedGameState_UnregisterGameSettingNotification");
static_assert(sizeof(MatchServicedGameState_UnregisterGameSettingNotification) == 0x000008, "Wrong size on MatchServicedGameState_UnregisterGameSettingNotification");
static_assert(offsetof(MatchServicedGameState_UnregisterGameSettingNotification, _obj) == 0x000000, "Member 'MatchServicedGameState_UnregisterGameSettingNotification::_obj' has a wrong offset!");

// Function Stigma.MatchServicedGameState.UnregisterPlayerJoinNotification
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedGameState_UnregisterPlayerJoinNotification final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_UnregisterPlayerJoinNotification) == 0x000008, "Wrong alignment on MatchServicedGameState_UnregisterPlayerJoinNotification");
static_assert(sizeof(MatchServicedGameState_UnregisterPlayerJoinNotification) == 0x000008, "Wrong size on MatchServicedGameState_UnregisterPlayerJoinNotification");
static_assert(offsetof(MatchServicedGameState_UnregisterPlayerJoinNotification, _obj) == 0x000000, "Member 'MatchServicedGameState_UnregisterPlayerJoinNotification::_obj' has a wrong offset!");

// Function Stigma.MatchServicedGameState.GetGameSetting
// 0x0040 (0x0040 - 0x0000)
struct MatchServicedGameState_GetGameSetting final
{
public:
	struct FGameSetting                           ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_GetGameSetting) == 0x000008, "Wrong alignment on MatchServicedGameState_GetGameSetting");
static_assert(sizeof(MatchServicedGameState_GetGameSetting) == 0x000040, "Wrong size on MatchServicedGameState_GetGameSetting");
static_assert(offsetof(MatchServicedGameState_GetGameSetting, ReturnValue) == 0x000000, "Member 'MatchServicedGameState_GetGameSetting::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.GetMaxPlayableCharacterCount
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedGameState_GetMaxPlayableCharacterCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_GetMaxPlayableCharacterCount) == 0x000004, "Wrong alignment on MatchServicedGameState_GetMaxPlayableCharacterCount");
static_assert(sizeof(MatchServicedGameState_GetMaxPlayableCharacterCount) == 0x000004, "Wrong size on MatchServicedGameState_GetMaxPlayableCharacterCount");
static_assert(offsetof(MatchServicedGameState_GetMaxPlayableCharacterCount, ReturnValue) == 0x000000, "Member 'MatchServicedGameState_GetMaxPlayableCharacterCount::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.GetModeConfig
// 0x0370 (0x0370 - 0x0000)
struct MatchServicedGameState_GetModeConfig final
{
public:
	struct FMode                                  ReturnValue;                                       // 0x0000(0x0370)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_GetModeConfig) == 0x000008, "Wrong alignment on MatchServicedGameState_GetModeConfig");
static_assert(sizeof(MatchServicedGameState_GetModeConfig) == 0x000370, "Wrong size on MatchServicedGameState_GetModeConfig");
static_assert(offsetof(MatchServicedGameState_GetModeConfig, ReturnValue) == 0x000000, "Member 'MatchServicedGameState_GetModeConfig::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.GetRealPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct MatchServicedGameState_GetRealPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_GetRealPlayerCount) == 0x000004, "Wrong alignment on MatchServicedGameState_GetRealPlayerCount");
static_assert(sizeof(MatchServicedGameState_GetRealPlayerCount) == 0x000004, "Wrong size on MatchServicedGameState_GetRealPlayerCount");
static_assert(offsetof(MatchServicedGameState_GetRealPlayerCount, ReturnValue) == 0x000000, "Member 'MatchServicedGameState_GetRealPlayerCount::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.GetServerState
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameState_GetServerState final
{
public:
	EServerStatus                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_GetServerState) == 0x000001, "Wrong alignment on MatchServicedGameState_GetServerState");
static_assert(sizeof(MatchServicedGameState_GetServerState) == 0x000001, "Wrong size on MatchServicedGameState_GetServerState");
static_assert(offsetof(MatchServicedGameState_GetServerState, ReturnValue) == 0x000000, "Member 'MatchServicedGameState_GetServerState::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.GetTeamMemberCount
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedGameState_GetTeamMemberCount final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_GetTeamMemberCount) == 0x000004, "Wrong alignment on MatchServicedGameState_GetTeamMemberCount");
static_assert(sizeof(MatchServicedGameState_GetTeamMemberCount) == 0x000008, "Wrong size on MatchServicedGameState_GetTeamMemberCount");
static_assert(offsetof(MatchServicedGameState_GetTeamMemberCount, _Team) == 0x000000, "Member 'MatchServicedGameState_GetTeamMemberCount::_Team' has a wrong offset!");
static_assert(offsetof(MatchServicedGameState_GetTeamMemberCount, ReturnValue) == 0x000004, "Member 'MatchServicedGameState_GetTeamMemberCount::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.IsInBattle
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameState_IsInBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameState_IsInBattle) == 0x000001, "Wrong alignment on MatchServicedGameState_IsInBattle");
static_assert(sizeof(MatchServicedGameState_IsInBattle) == 0x000001, "Wrong size on MatchServicedGameState_IsInBattle");
static_assert(offsetof(MatchServicedGameState_IsInBattle, ReturnValue) == 0x000000, "Member 'MatchServicedGameState_IsInBattle::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameState.IsPickedCharaInTeam
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedGameState_IsPickedCharaInTeam final
{
public:
	struct FUserID                                _asker_id;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC3[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedGameState_IsPickedCharaInTeam) == 0x000008, "Wrong alignment on MatchServicedGameState_IsPickedCharaInTeam");
static_assert(sizeof(MatchServicedGameState_IsPickedCharaInTeam) == 0x000010, "Wrong size on MatchServicedGameState_IsPickedCharaInTeam");
static_assert(offsetof(MatchServicedGameState_IsPickedCharaInTeam, _asker_id) == 0x000000, "Member 'MatchServicedGameState_IsPickedCharaInTeam::_asker_id' has a wrong offset!");
static_assert(offsetof(MatchServicedGameState_IsPickedCharaInTeam, _chara_type) == 0x000008, "Member 'MatchServicedGameState_IsPickedCharaInTeam::_chara_type' has a wrong offset!");
static_assert(offsetof(MatchServicedGameState_IsPickedCharaInTeam, ReturnValue) == 0x000009, "Member 'MatchServicedGameState_IsPickedCharaInTeam::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetRemainTime
// 0x0008 (0x0008 - 0x0000)
struct BattleGameStateBase_GetRemainTime final
{
public:
	int32                                         _out_min;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_sec;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetRemainTime) == 0x000004, "Wrong alignment on BattleGameStateBase_GetRemainTime");
static_assert(sizeof(BattleGameStateBase_GetRemainTime) == 0x000008, "Wrong size on BattleGameStateBase_GetRemainTime");
static_assert(offsetof(BattleGameStateBase_GetRemainTime, _out_min) == 0x000000, "Member 'BattleGameStateBase_GetRemainTime::_out_min' has a wrong offset!");
static_assert(offsetof(BattleGameStateBase_GetRemainTime, _out_sec) == 0x000004, "Member 'BattleGameStateBase_GetRemainTime::_out_sec' has a wrong offset!");

// Function Stigma.BattleGameStateBase.SetBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct BattleGameStateBase_SetBattlePhase final
{
public:
	EBattleModePhase                              _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_SetBattlePhase) == 0x000001, "Wrong alignment on BattleGameStateBase_SetBattlePhase");
static_assert(sizeof(BattleGameStateBase_SetBattlePhase) == 0x000001, "Wrong size on BattleGameStateBase_SetBattlePhase");
static_assert(offsetof(BattleGameStateBase_SetBattlePhase, _phase) == 0x000000, "Member 'BattleGameStateBase_SetBattlePhase::_phase' has a wrong offset!");

// Function Stigma.BattleGameStateBase.SetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct BattleGameStateBase_SetCurrentRound final
{
public:
	int32                                         _round;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_SetCurrentRound) == 0x000004, "Wrong alignment on BattleGameStateBase_SetCurrentRound");
static_assert(sizeof(BattleGameStateBase_SetCurrentRound) == 0x000004, "Wrong size on BattleGameStateBase_SetCurrentRound");
static_assert(offsetof(BattleGameStateBase_SetCurrentRound, _round) == 0x000000, "Member 'BattleGameStateBase_SetCurrentRound::_round' has a wrong offset!");

// Function Stigma.BattleGameStateBase.Setter_BattlePhaseDurationSec
// 0x0004 (0x0004 - 0x0000)
struct BattleGameStateBase_Setter_BattlePhaseDurationSec final
{
public:
	int32                                         _sec;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_Setter_BattlePhaseDurationSec) == 0x000004, "Wrong alignment on BattleGameStateBase_Setter_BattlePhaseDurationSec");
static_assert(sizeof(BattleGameStateBase_Setter_BattlePhaseDurationSec) == 0x000004, "Wrong size on BattleGameStateBase_Setter_BattlePhaseDurationSec");
static_assert(offsetof(BattleGameStateBase_Setter_BattlePhaseDurationSec, _sec) == 0x000000, "Member 'BattleGameStateBase_Setter_BattlePhaseDurationSec::_sec' has a wrong offset!");

// Function Stigma.BattleGameStateBase.Setter_BattlePhaseRemainSec
// 0x0004 (0x0004 - 0x0000)
struct BattleGameStateBase_Setter_BattlePhaseRemainSec final
{
public:
	int32                                         _sec;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_Setter_BattlePhaseRemainSec) == 0x000004, "Wrong alignment on BattleGameStateBase_Setter_BattlePhaseRemainSec");
static_assert(sizeof(BattleGameStateBase_Setter_BattlePhaseRemainSec) == 0x000004, "Wrong size on BattleGameStateBase_Setter_BattlePhaseRemainSec");
static_assert(offsetof(BattleGameStateBase_Setter_BattlePhaseRemainSec, _sec) == 0x000000, "Member 'BattleGameStateBase_Setter_BattlePhaseRemainSec::_sec' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct BattleGameStateBase_GetBattlePhase final
{
public:
	EBattleModePhase                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetBattlePhase) == 0x000001, "Wrong alignment on BattleGameStateBase_GetBattlePhase");
static_assert(sizeof(BattleGameStateBase_GetBattlePhase) == 0x000001, "Wrong size on BattleGameStateBase_GetBattlePhase");
static_assert(offsetof(BattleGameStateBase_GetBattlePhase, ReturnValue) == 0x000000, "Member 'BattleGameStateBase_GetBattlePhase::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetBattlePhaseElapsedSec
// 0x0004 (0x0004 - 0x0000)
struct BattleGameStateBase_GetBattlePhaseElapsedSec final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetBattlePhaseElapsedSec) == 0x000004, "Wrong alignment on BattleGameStateBase_GetBattlePhaseElapsedSec");
static_assert(sizeof(BattleGameStateBase_GetBattlePhaseElapsedSec) == 0x000004, "Wrong size on BattleGameStateBase_GetBattlePhaseElapsedSec");
static_assert(offsetof(BattleGameStateBase_GetBattlePhaseElapsedSec, ReturnValue) == 0x000000, "Member 'BattleGameStateBase_GetBattlePhaseElapsedSec::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetBattlePhaseRemainSec
// 0x0004 (0x0004 - 0x0000)
struct BattleGameStateBase_GetBattlePhaseRemainSec final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetBattlePhaseRemainSec) == 0x000004, "Wrong alignment on BattleGameStateBase_GetBattlePhaseRemainSec");
static_assert(sizeof(BattleGameStateBase_GetBattlePhaseRemainSec) == 0x000004, "Wrong size on BattleGameStateBase_GetBattlePhaseRemainSec");
static_assert(offsetof(BattleGameStateBase_GetBattlePhaseRemainSec, ReturnValue) == 0x000000, "Member 'BattleGameStateBase_GetBattlePhaseRemainSec::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct BattleGameStateBase_GetCurrentRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetCurrentRound) == 0x000004, "Wrong alignment on BattleGameStateBase_GetCurrentRound");
static_assert(sizeof(BattleGameStateBase_GetCurrentRound) == 0x000004, "Wrong size on BattleGameStateBase_GetCurrentRound");
static_assert(offsetof(BattleGameStateBase_GetCurrentRound, ReturnValue) == 0x000000, "Member 'BattleGameStateBase_GetCurrentRound::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetKillCountByTeam
// 0x0008 (0x0008 - 0x0000)
struct BattleGameStateBase_GetKillCountByTeam final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetKillCountByTeam) == 0x000004, "Wrong alignment on BattleGameStateBase_GetKillCountByTeam");
static_assert(sizeof(BattleGameStateBase_GetKillCountByTeam) == 0x000008, "Wrong size on BattleGameStateBase_GetKillCountByTeam");
static_assert(offsetof(BattleGameStateBase_GetKillCountByTeam, _Team) == 0x000000, "Member 'BattleGameStateBase_GetKillCountByTeam::_Team' has a wrong offset!");
static_assert(offsetof(BattleGameStateBase_GetKillCountByTeam, ReturnValue) == 0x000004, "Member 'BattleGameStateBase_GetKillCountByTeam::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetTeamData
// 0x0018 (0x0018 - 0x0000)
struct BattleGameStateBase_GetTeamData final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTeamData                              ReturnValue;                                       // 0x0004(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetTeamData) == 0x000004, "Wrong alignment on BattleGameStateBase_GetTeamData");
static_assert(sizeof(BattleGameStateBase_GetTeamData) == 0x000018, "Wrong size on BattleGameStateBase_GetTeamData");
static_assert(offsetof(BattleGameStateBase_GetTeamData, _Team) == 0x000000, "Member 'BattleGameStateBase_GetTeamData::_Team' has a wrong offset!");
static_assert(offsetof(BattleGameStateBase_GetTeamData, ReturnValue) == 0x000004, "Member 'BattleGameStateBase_GetTeamData::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetTeamRank
// 0x0008 (0x0008 - 0x0000)
struct BattleGameStateBase_GetTeamRank final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetTeamRank) == 0x000004, "Wrong alignment on BattleGameStateBase_GetTeamRank");
static_assert(sizeof(BattleGameStateBase_GetTeamRank) == 0x000008, "Wrong size on BattleGameStateBase_GetTeamRank");
static_assert(offsetof(BattleGameStateBase_GetTeamRank, _Team) == 0x000000, "Member 'BattleGameStateBase_GetTeamRank::_Team' has a wrong offset!");
static_assert(offsetof(BattleGameStateBase_GetTeamRank, ReturnValue) == 0x000004, "Member 'BattleGameStateBase_GetTeamRank::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetTeamScore
// 0x0008 (0x0008 - 0x0000)
struct BattleGameStateBase_GetTeamScore final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FCA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetTeamScore) == 0x000004, "Wrong alignment on BattleGameStateBase_GetTeamScore");
static_assert(sizeof(BattleGameStateBase_GetTeamScore) == 0x000008, "Wrong size on BattleGameStateBase_GetTeamScore");
static_assert(offsetof(BattleGameStateBase_GetTeamScore, _Team) == 0x000000, "Member 'BattleGameStateBase_GetTeamScore::_Team' has a wrong offset!");
static_assert(offsetof(BattleGameStateBase_GetTeamScore, ReturnValue) == 0x000004, "Member 'BattleGameStateBase_GetTeamScore::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameStateBase.GetWinningTeam
// 0x0002 (0x0002 - 0x0000)
struct BattleGameStateBase_GetWinningTeam final
{
public:
	bool                                          _is_tie;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameStateBase_GetWinningTeam) == 0x000001, "Wrong alignment on BattleGameStateBase_GetWinningTeam");
static_assert(sizeof(BattleGameStateBase_GetWinningTeam) == 0x000002, "Wrong size on BattleGameStateBase_GetWinningTeam");
static_assert(offsetof(BattleGameStateBase_GetWinningTeam, _is_tie) == 0x000000, "Member 'BattleGameStateBase_GetWinningTeam::_is_tie' has a wrong offset!");
static_assert(offsetof(BattleGameStateBase_GetWinningTeam, ReturnValue) == 0x000001, "Member 'BattleGameStateBase_GetWinningTeam::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.IncTeamTotalBounty
// 0x0010 (0x0010 - 0x0000)
struct BountyTDM_GameState_IncTeamTotalBounty final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FCD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _inc_bounty;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABountyTDM_PlayerState*                 _increased_by;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_IncTeamTotalBounty) == 0x000008, "Wrong alignment on BountyTDM_GameState_IncTeamTotalBounty");
static_assert(sizeof(BountyTDM_GameState_IncTeamTotalBounty) == 0x000010, "Wrong size on BountyTDM_GameState_IncTeamTotalBounty");
static_assert(offsetof(BountyTDM_GameState_IncTeamTotalBounty, _Team) == 0x000000, "Member 'BountyTDM_GameState_IncTeamTotalBounty::_Team' has a wrong offset!");
static_assert(offsetof(BountyTDM_GameState_IncTeamTotalBounty, _inc_bounty) == 0x000004, "Member 'BountyTDM_GameState_IncTeamTotalBounty::_inc_bounty' has a wrong offset!");
static_assert(offsetof(BountyTDM_GameState_IncTeamTotalBounty, _increased_by) == 0x000008, "Member 'BountyTDM_GameState_IncTeamTotalBounty::_increased_by' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.SetCurrentPhase
// 0x0004 (0x0004 - 0x0000)
struct BountyTDM_GameState_SetCurrentPhase final
{
public:
	int32                                         _phase;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_SetCurrentPhase) == 0x000004, "Wrong alignment on BountyTDM_GameState_SetCurrentPhase");
static_assert(sizeof(BountyTDM_GameState_SetCurrentPhase) == 0x000004, "Wrong size on BountyTDM_GameState_SetCurrentPhase");
static_assert(offsetof(BountyTDM_GameState_SetCurrentPhase, _phase) == 0x000000, "Member 'BountyTDM_GameState_SetCurrentPhase::_phase' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetBountyRule
// 0x00A0 (0x00A0 - 0x0000)
struct BountyTDM_GameState_GetBountyRule final
{
public:
	struct FBountyRule                            ReturnValue;                                       // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetBountyRule) == 0x000008, "Wrong alignment on BountyTDM_GameState_GetBountyRule");
static_assert(sizeof(BountyTDM_GameState_GetBountyRule) == 0x0000A0, "Wrong size on BountyTDM_GameState_GetBountyRule");
static_assert(offsetof(BountyTDM_GameState_GetBountyRule, ReturnValue) == 0x000000, "Member 'BountyTDM_GameState_GetBountyRule::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetCurrentBountyPhase
// 0x0001 (0x0001 - 0x0000)
struct BountyTDM_GameState_GetCurrentBountyPhase final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetCurrentBountyPhase) == 0x000001, "Wrong alignment on BountyTDM_GameState_GetCurrentBountyPhase");
static_assert(sizeof(BountyTDM_GameState_GetCurrentBountyPhase) == 0x000001, "Wrong size on BountyTDM_GameState_GetCurrentBountyPhase");
static_assert(offsetof(BountyTDM_GameState_GetCurrentBountyPhase, ReturnValue) == 0x000000, "Member 'BountyTDM_GameState_GetCurrentBountyPhase::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetCurrentBountyPhaseDefine
// 0x0050 (0x0050 - 0x0000)
struct BountyTDM_GameState_GetCurrentBountyPhaseDefine final
{
public:
	struct FBountyPhaseDefine                     ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetCurrentBountyPhaseDefine) == 0x000008, "Wrong alignment on BountyTDM_GameState_GetCurrentBountyPhaseDefine");
static_assert(sizeof(BountyTDM_GameState_GetCurrentBountyPhaseDefine) == 0x000050, "Wrong size on BountyTDM_GameState_GetCurrentBountyPhaseDefine");
static_assert(offsetof(BountyTDM_GameState_GetCurrentBountyPhaseDefine, ReturnValue) == 0x000000, "Member 'BountyTDM_GameState_GetCurrentBountyPhaseDefine::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetGoldRule
// 0x0014 (0x0014 - 0x0000)
struct BountyTDM_GameState_GetGoldRule final
{
public:
	struct FBounty_GoldRule                       ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetGoldRule) == 0x000004, "Wrong alignment on BountyTDM_GameState_GetGoldRule");
static_assert(sizeof(BountyTDM_GameState_GetGoldRule) == 0x000014, "Wrong size on BountyTDM_GameState_GetGoldRule");
static_assert(offsetof(BountyTDM_GameState_GetGoldRule, ReturnValue) == 0x000000, "Member 'BountyTDM_GameState_GetGoldRule::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetStealProgressRatio
// 0x0008 (0x0008 - 0x0000)
struct BountyTDM_GameState_GetStealProgressRatio final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FCE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetStealProgressRatio) == 0x000004, "Wrong alignment on BountyTDM_GameState_GetStealProgressRatio");
static_assert(sizeof(BountyTDM_GameState_GetStealProgressRatio) == 0x000008, "Wrong size on BountyTDM_GameState_GetStealProgressRatio");
static_assert(offsetof(BountyTDM_GameState_GetStealProgressRatio, _Team) == 0x000000, "Member 'BountyTDM_GameState_GetStealProgressRatio::_Team' has a wrong offset!");
static_assert(offsetof(BountyTDM_GameState_GetStealProgressRatio, ReturnValue) == 0x000004, "Member 'BountyTDM_GameState_GetStealProgressRatio::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetStealProgressTime
// 0x0008 (0x0008 - 0x0000)
struct BountyTDM_GameState_GetStealProgressTime final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FCF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetStealProgressTime) == 0x000004, "Wrong alignment on BountyTDM_GameState_GetStealProgressTime");
static_assert(sizeof(BountyTDM_GameState_GetStealProgressTime) == 0x000008, "Wrong size on BountyTDM_GameState_GetStealProgressTime");
static_assert(offsetof(BountyTDM_GameState_GetStealProgressTime, _Team) == 0x000000, "Member 'BountyTDM_GameState_GetStealProgressTime::_Team' has a wrong offset!");
static_assert(offsetof(BountyTDM_GameState_GetStealProgressTime, ReturnValue) == 0x000004, "Member 'BountyTDM_GameState_GetStealProgressTime::ReturnValue' has a wrong offset!");

// Function Stigma.BountyTDM_GameState.GetTransferUnit
// 0x0004 (0x0004 - 0x0000)
struct BountyTDM_GameState_GetTransferUnit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_GameState_GetTransferUnit) == 0x000004, "Wrong alignment on BountyTDM_GameState_GetTransferUnit");
static_assert(sizeof(BountyTDM_GameState_GetTransferUnit) == 0x000004, "Wrong size on BountyTDM_GameState_GetTransferUnit");
static_assert(offsetof(BountyTDM_GameState_GetTransferUnit, ReturnValue) == 0x000000, "Member 'BountyTDM_GameState_GetTransferUnit::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDMission.OnMissionUpdated
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDMission_OnMissionUpdated final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _mission;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMission_OnMissionUpdated) == 0x000008, "Wrong alignment on UI_HUDMission_OnMissionUpdated");
static_assert(sizeof(UI_HUDMission_OnMissionUpdated) == 0x000010, "Wrong size on UI_HUDMission_OnMissionUpdated");
static_assert(offsetof(UI_HUDMission_OnMissionUpdated, _type) == 0x000000, "Member 'UI_HUDMission_OnMissionUpdated::_type' has a wrong offset!");
static_assert(offsetof(UI_HUDMission_OnMissionUpdated, _mission) == 0x000008, "Member 'UI_HUDMission_OnMissionUpdated::_mission' has a wrong offset!");

// Function Stigma.UI_HUDMission.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_HUDMission_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMission_SetDesc) == 0x000008, "Wrong alignment on UI_HUDMission_SetDesc");
static_assert(sizeof(UI_HUDMission_SetDesc) == 0x000018, "Wrong size on UI_HUDMission_SetDesc");
static_assert(offsetof(UI_HUDMission_SetDesc, _text) == 0x000000, "Member 'UI_HUDMission_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_HUDMission.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_HUDMission_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMission_SetTitle) == 0x000008, "Wrong alignment on UI_HUDMission_SetTitle");
static_assert(sizeof(UI_HUDMission_SetTitle) == 0x000018, "Wrong size on UI_HUDMission_SetTitle");
static_assert(offsetof(UI_HUDMission_SetTitle, _text) == 0x000000, "Member 'UI_HUDMission_SetTitle::_text' has a wrong offset!");

// Function Stigma.BTScore.GetScore
// 0x0010 (0x0010 - 0x0000)
struct BTScore_GetScore final
{
public:
	class AAdvancedAIController*                  _controller;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD6[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BTScore_GetScore) == 0x000008, "Wrong alignment on BTScore_GetScore");
static_assert(sizeof(BTScore_GetScore) == 0x000010, "Wrong size on BTScore_GetScore");
static_assert(offsetof(BTScore_GetScore, _controller) == 0x000000, "Member 'BTScore_GetScore::_controller' has a wrong offset!");
static_assert(offsetof(BTScore_GetScore, ReturnValue) == 0x000008, "Member 'BTScore_GetScore::ReturnValue' has a wrong offset!");

// Function Stigma.Breakable.OnBreaked
// 0x0010 (0x0010 - 0x0000)
struct Breakable_OnBreaked final
{
public:
	class FName                                   _step_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _current_hp;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDB[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Breakable_OnBreaked) == 0x000004, "Wrong alignment on Breakable_OnBreaked");
static_assert(sizeof(Breakable_OnBreaked) == 0x000010, "Wrong size on Breakable_OnBreaked");
static_assert(offsetof(Breakable_OnBreaked, _step_name) == 0x000000, "Member 'Breakable_OnBreaked::_step_name' has a wrong offset!");
static_assert(offsetof(Breakable_OnBreaked, _current_hp) == 0x000008, "Member 'Breakable_OnBreaked::_current_hp' has a wrong offset!");
static_assert(offsetof(Breakable_OnBreaked, ReturnValue) == 0x00000C, "Member 'Breakable_OnBreaked::ReturnValue' has a wrong offset!");

// Function Stigma.Breakable.OnRep_HP
// 0x0004 (0x0004 - 0x0000)
struct Breakable_OnRep_HP final
{
public:
	float                                         _old_hp;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakable_OnRep_HP) == 0x000004, "Wrong alignment on Breakable_OnRep_HP");
static_assert(sizeof(Breakable_OnRep_HP) == 0x000004, "Wrong size on Breakable_OnRep_HP");
static_assert(offsetof(Breakable_OnRep_HP, _old_hp) == 0x000000, "Member 'Breakable_OnRep_HP::_old_hp' has a wrong offset!");

// Function Stigma.Breakable.Setter_HP
// 0x0004 (0x0004 - 0x0000)
struct Breakable_Setter_HP final
{
public:
	float                                         _new_hp;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakable_Setter_HP) == 0x000004, "Wrong alignment on Breakable_Setter_HP");
static_assert(sizeof(Breakable_Setter_HP) == 0x000004, "Wrong size on Breakable_Setter_HP");
static_assert(offsetof(Breakable_Setter_HP, _new_hp) == 0x000000, "Member 'Breakable_Setter_HP::_new_hp' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefBackground.ShowDetail
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassBriefBackground_ShowDetail final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBriefBackground_ShowDetail) == 0x000001, "Wrong alignment on UI_BattlePassBriefBackground_ShowDetail");
static_assert(sizeof(UI_BattlePassBriefBackground_ShowDetail) == 0x000001, "Wrong size on UI_BattlePassBriefBackground_ShowDetail");
static_assert(offsetof(UI_BattlePassBriefBackground_ShowDetail, _show) == 0x000000, "Member 'UI_BattlePassBriefBackground_ShowDetail::_show' has a wrong offset!");

// Function Stigma.GunGraphValuesBlueprintLibrary.GetGunBuffedGraphValues
// 0x0720 (0x0720 - 0x0000)
struct GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunEntry_Main                         _Config;                                           // 0x0008(0x0350)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunEntry_Body                         _body_config;                                      // 0x0358(0x0368)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunAttribute_Common                   _gun_object_attribute;                             // 0x06C0(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunBuffEffect                         _effect;                                           // 0x06E4(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunGraphValues                        ReturnValue;                                       // 0x0704(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues) == 0x000008, "Wrong alignment on GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues");
static_assert(sizeof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues) == 0x000720, "Wrong size on GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues, _chara_type) == 0x000000, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues::_chara_type' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues, _Config) == 0x000008, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues::_Config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues, _body_config) == 0x000358, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues::_body_config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues, _gun_object_attribute) == 0x0006C0, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues::_gun_object_attribute' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues, _effect) == 0x0006E4, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues::_effect' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues, ReturnValue) == 0x000704, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffedGraphValues::ReturnValue' has a wrong offset!");

// Function Stigma.GunGraphValuesBlueprintLibrary.GetGunBuffEffectOfBoosters
// 0x0030 (0x0030 - 0x0000)
struct GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters final
{
public:
	TArray<struct FItemID_Booster>                _boosters;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunBuffEffect                         ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters) == 0x000008, "Wrong alignment on GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters");
static_assert(sizeof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters) == 0x000030, "Wrong size on GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters, _boosters) == 0x000000, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters::_boosters' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters, ReturnValue) == 0x000010, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfBoosters::ReturnValue' has a wrong offset!");

// Function Stigma.GunGraphValuesBlueprintLibrary.GetGunBuffEffectOfPassiveSkills
// 0x0030 (0x0030 - 0x0000)
struct GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills final
{
public:
	TArray<struct FPassiveSkill>                  _passive_skills;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunBuffEffect                         ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills) == 0x000008, "Wrong alignment on GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills");
static_assert(sizeof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills) == 0x000030, "Wrong size on GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills, _passive_skills) == 0x000000, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills::_passive_skills' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills, ReturnValue) == 0x000010, "Member 'GunGraphValuesBlueprintLibrary_GetGunBuffEffectOfPassiveSkills::ReturnValue' has a wrong offset!");

// Function Stigma.GunGraphValuesBlueprintLibrary.GetGunGraphValues
// 0x0700 (0x0700 - 0x0000)
struct GunGraphValuesBlueprintLibrary_GetGunGraphValues final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunEntry_Main                         _Config;                                           // 0x0008(0x0350)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunEntry_Body                         _body_config;                                      // 0x0358(0x0368)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunBuffEffect                         _effect;                                           // 0x06C0(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunGraphValues                        ReturnValue;                                       // 0x06E0(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE1[0x4];                                     // 0x06FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunGraphValuesBlueprintLibrary_GetGunGraphValues) == 0x000008, "Wrong alignment on GunGraphValuesBlueprintLibrary_GetGunGraphValues");
static_assert(sizeof(GunGraphValuesBlueprintLibrary_GetGunGraphValues) == 0x000700, "Wrong size on GunGraphValuesBlueprintLibrary_GetGunGraphValues");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunGraphValues, _chara_type) == 0x000000, "Member 'GunGraphValuesBlueprintLibrary_GetGunGraphValues::_chara_type' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunGraphValues, _Config) == 0x000008, "Member 'GunGraphValuesBlueprintLibrary_GetGunGraphValues::_Config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunGraphValues, _body_config) == 0x000358, "Member 'GunGraphValuesBlueprintLibrary_GetGunGraphValues::_body_config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunGraphValues, _effect) == 0x0006C0, "Member 'GunGraphValuesBlueprintLibrary_GetGunGraphValues::_effect' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunGraphValues, ReturnValue) == 0x0006E0, "Member 'GunGraphValuesBlueprintLibrary_GetGunGraphValues::ReturnValue' has a wrong offset!");

// Function Stigma.GunGraphValuesBlueprintLibrary.GetGunObjectGraphValues
// 0x0720 (0x0720 - 0x0000)
struct GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunEntry_Main                         _Config;                                           // 0x0008(0x0350)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunEntry_Body                         _body_config;                                      // 0x0358(0x0368)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunAttribute_Common                   _gun_object_attribute;                             // 0x06C0(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunBuffEffect                         _effect;                                           // 0x06E4(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunGraphValues                        ReturnValue;                                       // 0x0704(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues) == 0x000008, "Wrong alignment on GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues");
static_assert(sizeof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues) == 0x000720, "Wrong size on GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues, _chara_type) == 0x000000, "Member 'GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues::_chara_type' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues, _Config) == 0x000008, "Member 'GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues::_Config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues, _body_config) == 0x000358, "Member 'GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues::_body_config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues, _gun_object_attribute) == 0x0006C0, "Member 'GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues::_gun_object_attribute' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues, _effect) == 0x0006E4, "Member 'GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues::_effect' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues, ReturnValue) == 0x000704, "Member 'GunGraphValuesBlueprintLibrary_GetGunObjectGraphValues::ReturnValue' has a wrong offset!");

// Function Stigma.GunGraphValuesBlueprintLibrary.GetGunPartsGraphValues
// 0x0720 (0x0720 - 0x0000)
struct GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunEntry_Main                         _Config;                                           // 0x0008(0x0350)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunEntry_Body                         _body_config;                                      // 0x0358(0x0368)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGunAttribute_Common                   _gun_parts_attribute;                              // 0x06C0(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunBuffEffect                         _effect;                                           // 0x06E4(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunGraphValues                        ReturnValue;                                       // 0x0704(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues) == 0x000008, "Wrong alignment on GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues");
static_assert(sizeof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues) == 0x000720, "Wrong size on GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues, _chara_type) == 0x000000, "Member 'GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues::_chara_type' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues, _Config) == 0x000008, "Member 'GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues::_Config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues, _body_config) == 0x000358, "Member 'GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues::_body_config' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues, _gun_parts_attribute) == 0x0006C0, "Member 'GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues::_gun_parts_attribute' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues, _effect) == 0x0006E4, "Member 'GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues::_effect' has a wrong offset!");
static_assert(offsetof(GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues, ReturnValue) == 0x000704, "Member 'GunGraphValuesBlueprintLibrary_GetGunPartsGraphValues::ReturnValue' has a wrong offset!");

// Function Stigma.ThrowBase.OnCollide
// 0x00F0 (0x00F0 - 0x0000)
struct ThrowBase_OnCollide final
{
public:
	struct FHitResult                             _hit;                                              // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE8[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ThrowBase_OnCollide) == 0x000008, "Wrong alignment on ThrowBase_OnCollide");
static_assert(sizeof(ThrowBase_OnCollide) == 0x0000F0, "Wrong size on ThrowBase_OnCollide");
static_assert(offsetof(ThrowBase_OnCollide, _hit) == 0x000000, "Member 'ThrowBase_OnCollide::_hit' has a wrong offset!");
static_assert(offsetof(ThrowBase_OnCollide, ReturnValue) == 0x0000E8, "Member 'ThrowBase_OnCollide::ReturnValue' has a wrong offset!");

// Function Stigma.ThrowBase.OnGetStuckRotation
// 0x0018 (0x0018 - 0x0000)
struct ThrowBase_OnGetStuckRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowBase_OnGetStuckRotation) == 0x000008, "Wrong alignment on ThrowBase_OnGetStuckRotation");
static_assert(sizeof(ThrowBase_OnGetStuckRotation) == 0x000018, "Wrong size on ThrowBase_OnGetStuckRotation");
static_assert(offsetof(ThrowBase_OnGetStuckRotation, ReturnValue) == 0x000000, "Member 'ThrowBase_OnGetStuckRotation::ReturnValue' has a wrong offset!");

// Function Stigma.ThrowBase.GetLastVelocity
// 0x0018 (0x0018 - 0x0000)
struct ThrowBase_GetLastVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowBase_GetLastVelocity) == 0x000008, "Wrong alignment on ThrowBase_GetLastVelocity");
static_assert(sizeof(ThrowBase_GetLastVelocity) == 0x000018, "Wrong size on ThrowBase_GetLastVelocity");
static_assert(offsetof(ThrowBase_GetLastVelocity, ReturnValue) == 0x000000, "Member 'ThrowBase_GetLastVelocity::ReturnValue' has a wrong offset!");

// Function Stigma.ThrowBase.GetThrowActionGraphOperatorID
// 0x0006 (0x0006 - 0x0000)
struct ThrowBase_GetThrowActionGraphOperatorID final
{
public:
	struct FActionGraphOperatorID                 ReturnValue;                                       // 0x0000(0x0006)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowBase_GetThrowActionGraphOperatorID) == 0x000002, "Wrong alignment on ThrowBase_GetThrowActionGraphOperatorID");
static_assert(sizeof(ThrowBase_GetThrowActionGraphOperatorID) == 0x000006, "Wrong size on ThrowBase_GetThrowActionGraphOperatorID");
static_assert(offsetof(ThrowBase_GetThrowActionGraphOperatorID, ReturnValue) == 0x000000, "Member 'ThrowBase_GetThrowActionGraphOperatorID::ReturnValue' has a wrong offset!");

// Function Stigma.BombBase.OnExplosion
// 0x0001 (0x0001 - 0x0000)
struct BombBase_OnExplosion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BombBase_OnExplosion) == 0x000001, "Wrong alignment on BombBase_OnExplosion");
static_assert(sizeof(BombBase_OnExplosion) == 0x000001, "Wrong size on BombBase_OnExplosion");
static_assert(offsetof(BombBase_OnExplosion, ReturnValue) == 0x000000, "Member 'BombBase_OnExplosion::ReturnValue' has a wrong offset!");

// Function Stigma.BombBase.SERVER_HittedBombChara
// 0x00B0 (0x00B0 - 0x0000)
struct BombBase_SERVER_HittedBombChara final
{
public:
	class ACharaBase*                             _hitted;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitData                               _hit_data;                                         // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BombBase_SERVER_HittedBombChara) == 0x000008, "Wrong alignment on BombBase_SERVER_HittedBombChara");
static_assert(sizeof(BombBase_SERVER_HittedBombChara) == 0x0000B0, "Wrong size on BombBase_SERVER_HittedBombChara");
static_assert(offsetof(BombBase_SERVER_HittedBombChara, _hitted) == 0x000000, "Member 'BombBase_SERVER_HittedBombChara::_hitted' has a wrong offset!");
static_assert(offsetof(BombBase_SERVER_HittedBombChara, _hit_data) == 0x000008, "Member 'BombBase_SERVER_HittedBombChara::_hit_data' has a wrong offset!");

// Function Stigma.UI_ContentUnlocker.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_ContentUnlocker_SetDesc final
{
public:
	class FText                                   _Desc;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ContentUnlocker_SetDesc) == 0x000008, "Wrong alignment on UI_ContentUnlocker_SetDesc");
static_assert(sizeof(UI_ContentUnlocker_SetDesc) == 0x000018, "Wrong size on UI_ContentUnlocker_SetDesc");
static_assert(offsetof(UI_ContentUnlocker_SetDesc, _Desc) == 0x000000, "Member 'UI_ContentUnlocker_SetDesc::_Desc' has a wrong offset!");

// Function Stigma.UI_ContentUnlocker.SetIcon
// 0x0028 (0x0028 - 0x0000)
struct UI_ContentUnlocker_SetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ContentUnlocker_SetIcon) == 0x000008, "Wrong alignment on UI_ContentUnlocker_SetIcon");
static_assert(sizeof(UI_ContentUnlocker_SetIcon) == 0x000028, "Wrong size on UI_ContentUnlocker_SetIcon");
static_assert(offsetof(UI_ContentUnlocker_SetIcon, _Icon) == 0x000000, "Member 'UI_ContentUnlocker_SetIcon::_Icon' has a wrong offset!");

// Function Stigma.UI_ContentUnlocker.SetSubDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_ContentUnlocker_SetSubDesc final
{
public:
	class FText                                   _sub_desc;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ContentUnlocker_SetSubDesc) == 0x000008, "Wrong alignment on UI_ContentUnlocker_SetSubDesc");
static_assert(sizeof(UI_ContentUnlocker_SetSubDesc) == 0x000018, "Wrong size on UI_ContentUnlocker_SetSubDesc");
static_assert(offsetof(UI_ContentUnlocker_SetSubDesc, _sub_desc) == 0x000000, "Member 'UI_ContentUnlocker_SetSubDesc::_sub_desc' has a wrong offset!");

// Function Stigma.UI_ContentUnlocker.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_ContentUnlocker_SetTitle final
{
public:
	class FText                                   _Title;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ContentUnlocker_SetTitle) == 0x000008, "Wrong alignment on UI_ContentUnlocker_SetTitle");
static_assert(sizeof(UI_ContentUnlocker_SetTitle) == 0x000018, "Wrong size on UI_ContentUnlocker_SetTitle");
static_assert(offsetof(UI_ContentUnlocker_SetTitle, _Title) == 0x000000, "Member 'UI_ContentUnlocker_SetTitle::_Title' has a wrong offset!");

// Function Stigma.UI_ContentUnlocker.ShowGoToButton
// 0x0001 (0x0001 - 0x0000)
struct UI_ContentUnlocker_ShowGoToButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ContentUnlocker_ShowGoToButton) == 0x000001, "Wrong alignment on UI_ContentUnlocker_ShowGoToButton");
static_assert(sizeof(UI_ContentUnlocker_ShowGoToButton) == 0x000001, "Wrong size on UI_ContentUnlocker_ShowGoToButton");
static_assert(offsetof(UI_ContentUnlocker_ShowGoToButton, _show) == 0x000000, "Member 'UI_ContentUnlocker_ShowGoToButton::_show' has a wrong offset!");

// Function Stigma.StigmaGameInstance.ShowLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_ShowLoadingScreen final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaGameInstance_ShowLoadingScreen) == 0x000008, "Wrong alignment on StigmaGameInstance_ShowLoadingScreen");
static_assert(sizeof(StigmaGameInstance_ShowLoadingScreen) == 0x000010, "Wrong size on StigmaGameInstance_ShowLoadingScreen");
static_assert(offsetof(StigmaGameInstance_ShowLoadingScreen, _world_ctx) == 0x000000, "Member 'StigmaGameInstance_ShowLoadingScreen::_world_ctx' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_ShowLoadingScreen, Show) == 0x000008, "Member 'StigmaGameInstance_ShowLoadingScreen::Show' has a wrong offset!");

// Function Stigma.StigmaGameInstance.AddWishedGameMode
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_AddWishedGameMode final
{
public:
	EGameMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_AddWishedGameMode) == 0x000001, "Wrong alignment on StigmaGameInstance_AddWishedGameMode");
static_assert(sizeof(StigmaGameInstance_AddWishedGameMode) == 0x000001, "Wrong size on StigmaGameInstance_AddWishedGameMode");
static_assert(offsetof(StigmaGameInstance_AddWishedGameMode, _mode) == 0x000000, "Member 'StigmaGameInstance_AddWishedGameMode::_mode' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetChatManager
// 0x0008 (0x0008 - 0x0000)
struct StigmaGameInstance_GetChatManager final
{
public:
	class UChatManager*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetChatManager) == 0x000008, "Wrong alignment on StigmaGameInstance_GetChatManager");
static_assert(sizeof(StigmaGameInstance_GetChatManager) == 0x000008, "Wrong size on StigmaGameInstance_GetChatManager");
static_assert(offsetof(StigmaGameInstance_GetChatManager, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetChatManager::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetEmptyFriendList
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_GetEmptyFriendList final
{
public:
	TArray<class UUserProfile*>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetEmptyFriendList) == 0x000008, "Wrong alignment on StigmaGameInstance_GetEmptyFriendList");
static_assert(sizeof(StigmaGameInstance_GetEmptyFriendList) == 0x000010, "Wrong size on StigmaGameInstance_GetEmptyFriendList");
static_assert(offsetof(StigmaGameInstance_GetEmptyFriendList, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetEmptyFriendList::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetRecommendedGameMode
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_GetRecommendedGameMode final
{
public:
	EGameMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetRecommendedGameMode) == 0x000001, "Wrong alignment on StigmaGameInstance_GetRecommendedGameMode");
static_assert(sizeof(StigmaGameInstance_GetRecommendedGameMode) == 0x000001, "Wrong size on StigmaGameInstance_GetRecommendedGameMode");
static_assert(offsetof(StigmaGameInstance_GetRecommendedGameMode, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetRecommendedGameMode::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetSocialContext
// 0x0008 (0x0008 - 0x0000)
struct StigmaGameInstance_GetSocialContext final
{
public:
	class USocialContext*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetSocialContext) == 0x000008, "Wrong alignment on StigmaGameInstance_GetSocialContext");
static_assert(sizeof(StigmaGameInstance_GetSocialContext) == 0x000008, "Wrong size on StigmaGameInstance_GetSocialContext");
static_assert(offsetof(StigmaGameInstance_GetSocialContext, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetSocialContext::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetToastManager
// 0x0008 (0x0008 - 0x0000)
struct StigmaGameInstance_GetToastManager final
{
public:
	class UToastManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetToastManager) == 0x000008, "Wrong alignment on StigmaGameInstance_GetToastManager");
static_assert(sizeof(StigmaGameInstance_GetToastManager) == 0x000008, "Wrong size on StigmaGameInstance_GetToastManager");
static_assert(offsetof(StigmaGameInstance_GetToastManager, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetToastManager::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.LoadFromService_Characters
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_LoadFromService_Characters final
{
public:
	TArray<struct FNetCharacter>                  _infos;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_LoadFromService_Characters) == 0x000008, "Wrong alignment on StigmaGameInstance_LoadFromService_Characters");
static_assert(sizeof(StigmaGameInstance_LoadFromService_Characters) == 0x000010, "Wrong size on StigmaGameInstance_LoadFromService_Characters");
static_assert(offsetof(StigmaGameInstance_LoadFromService_Characters, _infos) == 0x000000, "Member 'StigmaGameInstance_LoadFromService_Characters::_infos' has a wrong offset!");

// Function Stigma.StigmaGameInstance.LoadFromService_LastUsedCharaType
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_LoadFromService_LastUsedCharaType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_LoadFromService_LastUsedCharaType) == 0x000001, "Wrong alignment on StigmaGameInstance_LoadFromService_LastUsedCharaType");
static_assert(sizeof(StigmaGameInstance_LoadFromService_LastUsedCharaType) == 0x000001, "Wrong size on StigmaGameInstance_LoadFromService_LastUsedCharaType");
static_assert(offsetof(StigmaGameInstance_LoadFromService_LastUsedCharaType, _chara_type) == 0x000000, "Member 'StigmaGameInstance_LoadFromService_LastUsedCharaType::_chara_type' has a wrong offset!");

// Function Stigma.StigmaGameInstance.OnQueryCloseWindow
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_OnQueryCloseWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_OnQueryCloseWindow) == 0x000001, "Wrong alignment on StigmaGameInstance_OnQueryCloseWindow");
static_assert(sizeof(StigmaGameInstance_OnQueryCloseWindow) == 0x000001, "Wrong size on StigmaGameInstance_OnQueryCloseWindow");
static_assert(offsetof(StigmaGameInstance_OnQueryCloseWindow, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_OnQueryCloseWindow::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.RegisterOnLobbyUIInitialized
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_RegisterOnLobbyUIInitialized final
{
public:
	TDelegate<void()>                             _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_RegisterOnLobbyUIInitialized) == 0x000004, "Wrong alignment on StigmaGameInstance_RegisterOnLobbyUIInitialized");
static_assert(sizeof(StigmaGameInstance_RegisterOnLobbyUIInitialized) == 0x000010, "Wrong size on StigmaGameInstance_RegisterOnLobbyUIInitialized");
static_assert(offsetof(StigmaGameInstance_RegisterOnLobbyUIInitialized, _callback) == 0x000000, "Member 'StigmaGameInstance_RegisterOnLobbyUIInitialized::_callback' has a wrong offset!");

// Function Stigma.StigmaGameInstance.RemoveWishedGameMode
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_RemoveWishedGameMode final
{
public:
	EGameMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_RemoveWishedGameMode) == 0x000001, "Wrong alignment on StigmaGameInstance_RemoveWishedGameMode");
static_assert(sizeof(StigmaGameInstance_RemoveWishedGameMode) == 0x000001, "Wrong size on StigmaGameInstance_RemoveWishedGameMode");
static_assert(offsetof(StigmaGameInstance_RemoveWishedGameMode, _mode) == 0x000000, "Member 'StigmaGameInstance_RemoveWishedGameMode::_mode' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetBattleSettingsForClient
// 0x0030 (0x0030 - 0x0000)
struct StigmaGameInstance_SetBattleSettingsForClient final
{
public:
	EGameMode                                     _game_mode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _map_name;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_tutorial_match;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FF9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _option;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetBattleSettingsForClient) == 0x000008, "Wrong alignment on StigmaGameInstance_SetBattleSettingsForClient");
static_assert(sizeof(StigmaGameInstance_SetBattleSettingsForClient) == 0x000030, "Wrong size on StigmaGameInstance_SetBattleSettingsForClient");
static_assert(offsetof(StigmaGameInstance_SetBattleSettingsForClient, _game_mode) == 0x000000, "Member 'StigmaGameInstance_SetBattleSettingsForClient::_game_mode' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_SetBattleSettingsForClient, _map_name) == 0x000008, "Member 'StigmaGameInstance_SetBattleSettingsForClient::_map_name' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_SetBattleSettingsForClient, _is_tutorial_match) == 0x000018, "Member 'StigmaGameInstance_SetBattleSettingsForClient::_is_tutorial_match' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_SetBattleSettingsForClient, _option) == 0x000020, "Member 'StigmaGameInstance_SetBattleSettingsForClient::_option' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetGunPreset
// 0x0018 (0x0018 - 0x0000)
struct StigmaGameInstance_SetGunPreset final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             _gun_preset;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetGunPreset) == 0x000008, "Wrong alignment on StigmaGameInstance_SetGunPreset");
static_assert(sizeof(StigmaGameInstance_SetGunPreset) == 0x000018, "Wrong size on StigmaGameInstance_SetGunPreset");
static_assert(offsetof(StigmaGameInstance_SetGunPreset, _chara_type) == 0x000000, "Member 'StigmaGameInstance_SetGunPreset::_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_SetGunPreset, _gun_preset) == 0x000008, "Member 'StigmaGameInstance_SetGunPreset::_gun_preset' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetPickRegion
// 0x0018 (0x0018 - 0x0000)
struct StigmaGameInstance_SetPickRegion final
{
public:
	class FString                                 _region_code;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _picked;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaGameInstance_SetPickRegion) == 0x000008, "Wrong alignment on StigmaGameInstance_SetPickRegion");
static_assert(sizeof(StigmaGameInstance_SetPickRegion) == 0x000018, "Wrong size on StigmaGameInstance_SetPickRegion");
static_assert(offsetof(StigmaGameInstance_SetPickRegion, _region_code) == 0x000000, "Member 'StigmaGameInstance_SetPickRegion::_region_code' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_SetPickRegion, _picked) == 0x000010, "Member 'StigmaGameInstance_SetPickRegion::_picked' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetPreviewChara
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_SetPreviewChara final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetPreviewChara) == 0x000001, "Wrong alignment on StigmaGameInstance_SetPreviewChara");
static_assert(sizeof(StigmaGameInstance_SetPreviewChara) == 0x000001, "Wrong size on StigmaGameInstance_SetPreviewChara");
static_assert(offsetof(StigmaGameInstance_SetPreviewChara, _chara_type) == 0x000000, "Member 'StigmaGameInstance_SetPreviewChara::_chara_type' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetPreviewCharaArmor
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_SetPreviewCharaArmor final
{
public:
	EArmorType                                    _Armor;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetPreviewCharaArmor) == 0x000001, "Wrong alignment on StigmaGameInstance_SetPreviewCharaArmor");
static_assert(sizeof(StigmaGameInstance_SetPreviewCharaArmor) == 0x000001, "Wrong size on StigmaGameInstance_SetPreviewCharaArmor");
static_assert(offsetof(StigmaGameInstance_SetPreviewCharaArmor, _Armor) == 0x000000, "Member 'StigmaGameInstance_SetPreviewCharaArmor::_Armor' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetPreviewCharaBodyID
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_SetPreviewCharaBodyID final
{
public:
	struct FItemID_Skin_Body                      _body_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetPreviewCharaBodyID) == 0x000008, "Wrong alignment on StigmaGameInstance_SetPreviewCharaBodyID");
static_assert(sizeof(StigmaGameInstance_SetPreviewCharaBodyID) == 0x000010, "Wrong size on StigmaGameInstance_SetPreviewCharaBodyID");
static_assert(offsetof(StigmaGameInstance_SetPreviewCharaBodyID, _body_id) == 0x000000, "Member 'StigmaGameInstance_SetPreviewCharaBodyID::_body_id' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetPreviewCharaHeadID
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_SetPreviewCharaHeadID final
{
public:
	struct FItemID_Skin_Head                      _head_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetPreviewCharaHeadID) == 0x000008, "Wrong alignment on StigmaGameInstance_SetPreviewCharaHeadID");
static_assert(sizeof(StigmaGameInstance_SetPreviewCharaHeadID) == 0x000010, "Wrong size on StigmaGameInstance_SetPreviewCharaHeadID");
static_assert(offsetof(StigmaGameInstance_SetPreviewCharaHeadID, _head_id) == 0x000000, "Member 'StigmaGameInstance_SetPreviewCharaHeadID::_head_id' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetUserPlayingAt
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_SetUserPlayingAt final
{
public:
	EUserPlayingAt                                _playing_at;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetUserPlayingAt) == 0x000001, "Wrong alignment on StigmaGameInstance_SetUserPlayingAt");
static_assert(sizeof(StigmaGameInstance_SetUserPlayingAt) == 0x000001, "Wrong size on StigmaGameInstance_SetUserPlayingAt");
static_assert(offsetof(StigmaGameInstance_SetUserPlayingAt, _playing_at) == 0x000000, "Member 'StigmaGameInstance_SetUserPlayingAt::_playing_at' has a wrong offset!");

// Function Stigma.StigmaGameInstance.SetWishedGameMode
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_SetWishedGameMode final
{
public:
	EGameMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_SetWishedGameMode) == 0x000001, "Wrong alignment on StigmaGameInstance_SetWishedGameMode");
static_assert(sizeof(StigmaGameInstance_SetWishedGameMode) == 0x000001, "Wrong size on StigmaGameInstance_SetWishedGameMode");
static_assert(offsetof(StigmaGameInstance_SetWishedGameMode, _mode) == 0x000000, "Member 'StigmaGameInstance_SetWishedGameMode::_mode' has a wrong offset!");

// Function Stigma.StigmaGameInstance.UpdateMatch_Matched
// 0x0020 (0x0020 - 0x0000)
struct StigmaGameInstance_UpdateMatch_Matched final
{
public:
	struct FMatchMakingInfo                       _match_info;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_UpdateMatch_Matched) == 0x000008, "Wrong alignment on StigmaGameInstance_UpdateMatch_Matched");
static_assert(sizeof(StigmaGameInstance_UpdateMatch_Matched) == 0x000020, "Wrong size on StigmaGameInstance_UpdateMatch_Matched");
static_assert(offsetof(StigmaGameInstance_UpdateMatch_Matched, _match_info) == 0x000000, "Member 'StigmaGameInstance_UpdateMatch_Matched::_match_info' has a wrong offset!");

// Function Stigma.StigmaGameInstance.UpdateMatch_WaitAck
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_UpdateMatch_WaitAck final
{
public:
	bool                                          _is_custom_game;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_UpdateMatch_WaitAck) == 0x000001, "Wrong alignment on StigmaGameInstance_UpdateMatch_WaitAck");
static_assert(sizeof(StigmaGameInstance_UpdateMatch_WaitAck) == 0x000001, "Wrong size on StigmaGameInstance_UpdateMatch_WaitAck");
static_assert(offsetof(StigmaGameInstance_UpdateMatch_WaitAck, _is_custom_game) == 0x000000, "Member 'StigmaGameInstance_UpdateMatch_WaitAck::_is_custom_game' has a wrong offset!");

// Function Stigma.StigmaGameInstance.AmIMatchBanned
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_AmIMatchBanned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_AmIMatchBanned) == 0x000001, "Wrong alignment on StigmaGameInstance_AmIMatchBanned");
static_assert(sizeof(StigmaGameInstance_AmIMatchBanned) == 0x000001, "Wrong size on StigmaGameInstance_AmIMatchBanned");
static_assert(offsetof(StigmaGameInstance_AmIMatchBanned, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_AmIMatchBanned::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.CanStartMatchMaking
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_CanStartMatchMaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_CanStartMatchMaking) == 0x000001, "Wrong alignment on StigmaGameInstance_CanStartMatchMaking");
static_assert(sizeof(StigmaGameInstance_CanStartMatchMaking) == 0x000001, "Wrong size on StigmaGameInstance_CanStartMatchMaking");
static_assert(offsetof(StigmaGameInstance_CanStartMatchMaking, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_CanStartMatchMaking::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetAllRegionCodes
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_GetAllRegionCodes final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetAllRegionCodes) == 0x000008, "Wrong alignment on StigmaGameInstance_GetAllRegionCodes");
static_assert(sizeof(StigmaGameInstance_GetAllRegionCodes) == 0x000010, "Wrong size on StigmaGameInstance_GetAllRegionCodes");
static_assert(offsetof(StigmaGameInstance_GetAllRegionCodes, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetAllRegionCodes::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetBattleResult_Decision
// 0x00D0 (0x00D0 - 0x0000)
struct StigmaGameInstance_GetBattleResult_Decision final
{
public:
	struct FBattleDecisionDetail                  ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetBattleResult_Decision) == 0x000008, "Wrong alignment on StigmaGameInstance_GetBattleResult_Decision");
static_assert(sizeof(StigmaGameInstance_GetBattleResult_Decision) == 0x0000D0, "Wrong size on StigmaGameInstance_GetBattleResult_Decision");
static_assert(offsetof(StigmaGameInstance_GetBattleResult_Decision, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetBattleResult_Decision::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetBattleResult_MyTeam
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_GetBattleResult_MyTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetBattleResult_MyTeam) == 0x000001, "Wrong alignment on StigmaGameInstance_GetBattleResult_MyTeam");
static_assert(sizeof(StigmaGameInstance_GetBattleResult_MyTeam) == 0x000001, "Wrong size on StigmaGameInstance_GetBattleResult_MyTeam");
static_assert(offsetof(StigmaGameInstance_GetBattleResult_MyTeam, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetBattleResult_MyTeam::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetBestPickedRegionData
// 0x0018 (0x0018 - 0x0000)
struct StigmaGameInstance_GetBestPickedRegionData final
{
public:
	struct FRegion                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetBestPickedRegionData) == 0x000008, "Wrong alignment on StigmaGameInstance_GetBestPickedRegionData");
static_assert(sizeof(StigmaGameInstance_GetBestPickedRegionData) == 0x000018, "Wrong size on StigmaGameInstance_GetBestPickedRegionData");
static_assert(offsetof(StigmaGameInstance_GetBestPickedRegionData, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetBestPickedRegionData::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetLocalPlayerContext
// 0x0008 (0x0008 - 0x0000)
struct StigmaGameInstance_GetLocalPlayerContext final
{
public:
	class ULocalPlayerContext*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetLocalPlayerContext) == 0x000008, "Wrong alignment on StigmaGameInstance_GetLocalPlayerContext");
static_assert(sizeof(StigmaGameInstance_GetLocalPlayerContext) == 0x000008, "Wrong size on StigmaGameInstance_GetLocalPlayerContext");
static_assert(offsetof(StigmaGameInstance_GetLocalPlayerContext, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetLocalPlayerContext::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetLoginElapsedSec
// 0x0004 (0x0004 - 0x0000)
struct StigmaGameInstance_GetLoginElapsedSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetLoginElapsedSec) == 0x000004, "Wrong alignment on StigmaGameInstance_GetLoginElapsedSec");
static_assert(sizeof(StigmaGameInstance_GetLoginElapsedSec) == 0x000004, "Wrong size on StigmaGameInstance_GetLoginElapsedSec");
static_assert(offsetof(StigmaGameInstance_GetLoginElapsedSec, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetLoginElapsedSec::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetMatchMakingContext
// 0x0098 (0x0098 - 0x0000)
struct StigmaGameInstance_GetMatchMakingContext final
{
public:
	struct FMatchContext                          ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetMatchMakingContext) == 0x000008, "Wrong alignment on StigmaGameInstance_GetMatchMakingContext");
static_assert(sizeof(StigmaGameInstance_GetMatchMakingContext) == 0x000098, "Wrong size on StigmaGameInstance_GetMatchMakingContext");
static_assert(offsetof(StigmaGameInstance_GetMatchMakingContext, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetMatchMakingContext::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetMatchMakingElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct StigmaGameInstance_GetMatchMakingElapsedTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetMatchMakingElapsedTime) == 0x000008, "Wrong alignment on StigmaGameInstance_GetMatchMakingElapsedTime");
static_assert(sizeof(StigmaGameInstance_GetMatchMakingElapsedTime) == 0x000008, "Wrong size on StigmaGameInstance_GetMatchMakingElapsedTime");
static_assert(offsetof(StigmaGameInstance_GetMatchMakingElapsedTime, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetMatchMakingElapsedTime::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetMatchMakingErrorMessage
// 0x0018 (0x0018 - 0x0000)
struct StigmaGameInstance_GetMatchMakingErrorMessage final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetMatchMakingErrorMessage) == 0x000008, "Wrong alignment on StigmaGameInstance_GetMatchMakingErrorMessage");
static_assert(sizeof(StigmaGameInstance_GetMatchMakingErrorMessage) == 0x000018, "Wrong size on StigmaGameInstance_GetMatchMakingErrorMessage");
static_assert(offsetof(StigmaGameInstance_GetMatchMakingErrorMessage, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetMatchMakingErrorMessage::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetMatchMakingStatus
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_GetMatchMakingStatus final
{
public:
	EFindMatchStatus                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetMatchMakingStatus) == 0x000001, "Wrong alignment on StigmaGameInstance_GetMatchMakingStatus");
static_assert(sizeof(StigmaGameInstance_GetMatchMakingStatus) == 0x000001, "Wrong size on StigmaGameInstance_GetMatchMakingStatus");
static_assert(offsetof(StigmaGameInstance_GetMatchMakingStatus, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetMatchMakingStatus::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetMatchOption
// 0x0038 (0x0038 - 0x0000)
struct StigmaGameInstance_GetMatchOption final
{
public:
	struct FMatchOption                           ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetMatchOption) == 0x000008, "Wrong alignment on StigmaGameInstance_GetMatchOption");
static_assert(sizeof(StigmaGameInstance_GetMatchOption) == 0x000038, "Wrong size on StigmaGameInstance_GetMatchOption");
static_assert(offsetof(StigmaGameInstance_GetMatchOption, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetMatchOption::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetNoticeBannerURL
// 0x0010 (0x0010 - 0x0000)
struct StigmaGameInstance_GetNoticeBannerURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetNoticeBannerURL) == 0x000008, "Wrong alignment on StigmaGameInstance_GetNoticeBannerURL");
static_assert(sizeof(StigmaGameInstance_GetNoticeBannerURL) == 0x000010, "Wrong size on StigmaGameInstance_GetNoticeBannerURL");
static_assert(offsetof(StigmaGameInstance_GetNoticeBannerURL, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetNoticeBannerURL::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetPlayerData_Nickname
// 0x0018 (0x0018 - 0x0000)
struct StigmaGameInstance_GetPlayerData_Nickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetPlayerData_Nickname) == 0x000008, "Wrong alignment on StigmaGameInstance_GetPlayerData_Nickname");
static_assert(sizeof(StigmaGameInstance_GetPlayerData_Nickname) == 0x000018, "Wrong size on StigmaGameInstance_GetPlayerData_Nickname");
static_assert(offsetof(StigmaGameInstance_GetPlayerData_Nickname, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetPlayerData_Nickname::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetPlayerData_UserID
// 0x0008 (0x0008 - 0x0000)
struct StigmaGameInstance_GetPlayerData_UserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetPlayerData_UserID) == 0x000008, "Wrong alignment on StigmaGameInstance_GetPlayerData_UserID");
static_assert(sizeof(StigmaGameInstance_GetPlayerData_UserID) == 0x000008, "Wrong size on StigmaGameInstance_GetPlayerData_UserID");
static_assert(offsetof(StigmaGameInstance_GetPlayerData_UserID, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetPlayerData_UserID::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetRegionData
// 0x0028 (0x0028 - 0x0000)
struct StigmaGameInstance_GetRegionData final
{
public:
	class FString                                 _region_code;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRegion                                ReturnValue;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetRegionData) == 0x000008, "Wrong alignment on StigmaGameInstance_GetRegionData");
static_assert(sizeof(StigmaGameInstance_GetRegionData) == 0x000028, "Wrong size on StigmaGameInstance_GetRegionData");
static_assert(offsetof(StigmaGameInstance_GetRegionData, _region_code) == 0x000000, "Member 'StigmaGameInstance_GetRegionData::_region_code' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_GetRegionData, ReturnValue) == 0x000010, "Member 'StigmaGameInstance_GetRegionData::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.GetServerSessionStatus
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_GetServerSessionStatus final
{
public:
	EServerSessionStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_GetServerSessionStatus) == 0x000001, "Wrong alignment on StigmaGameInstance_GetServerSessionStatus");
static_assert(sizeof(StigmaGameInstance_GetServerSessionStatus) == 0x000001, "Wrong size on StigmaGameInstance_GetServerSessionStatus");
static_assert(offsetof(StigmaGameInstance_GetServerSessionStatus, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_GetServerSessionStatus::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.IsInWishedGameMode
// 0x0002 (0x0002 - 0x0000)
struct StigmaGameInstance_IsInWishedGameMode final
{
public:
	EGameMode                                     _game_mode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_IsInWishedGameMode) == 0x000001, "Wrong alignment on StigmaGameInstance_IsInWishedGameMode");
static_assert(sizeof(StigmaGameInstance_IsInWishedGameMode) == 0x000002, "Wrong size on StigmaGameInstance_IsInWishedGameMode");
static_assert(offsetof(StigmaGameInstance_IsInWishedGameMode, _game_mode) == 0x000000, "Member 'StigmaGameInstance_IsInWishedGameMode::_game_mode' has a wrong offset!");
static_assert(offsetof(StigmaGameInstance_IsInWishedGameMode, ReturnValue) == 0x000001, "Member 'StigmaGameInstance_IsInWishedGameMode::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.IsMatchMaking
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_IsMatchMaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_IsMatchMaking) == 0x000001, "Wrong alignment on StigmaGameInstance_IsMatchMaking");
static_assert(sizeof(StigmaGameInstance_IsMatchMaking) == 0x000001, "Wrong size on StigmaGameInstance_IsMatchMaking");
static_assert(offsetof(StigmaGameInstance_IsMatchMaking, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_IsMatchMaking::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaGameInstance.IsMatchMakingCompleted
// 0x0001 (0x0001 - 0x0000)
struct StigmaGameInstance_IsMatchMakingCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaGameInstance_IsMatchMakingCompleted) == 0x000001, "Wrong alignment on StigmaGameInstance_IsMatchMakingCompleted");
static_assert(sizeof(StigmaGameInstance_IsMatchMakingCompleted) == 0x000001, "Wrong size on StigmaGameInstance_IsMatchMakingCompleted");
static_assert(offsetof(StigmaGameInstance_IsMatchMakingCompleted, ReturnValue) == 0x000000, "Member 'StigmaGameInstance_IsMatchMakingCompleted::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaCharacter.SetMesh
// 0x0028 (0x0028 - 0x0000)
struct StigmaCharacter_SetMesh final
{
public:
	struct FItemID                                _body_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _head_id;                                          // 0x0010(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    _armor_type;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFF[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCharacter_SetMesh) == 0x000008, "Wrong alignment on StigmaCharacter_SetMesh");
static_assert(sizeof(StigmaCharacter_SetMesh) == 0x000028, "Wrong size on StigmaCharacter_SetMesh");
static_assert(offsetof(StigmaCharacter_SetMesh, _body_id) == 0x000000, "Member 'StigmaCharacter_SetMesh::_body_id' has a wrong offset!");
static_assert(offsetof(StigmaCharacter_SetMesh, _head_id) == 0x000010, "Member 'StigmaCharacter_SetMesh::_head_id' has a wrong offset!");
static_assert(offsetof(StigmaCharacter_SetMesh, _armor_type) == 0x000020, "Member 'StigmaCharacter_SetMesh::_armor_type' has a wrong offset!");

// Function Stigma.StigmaCharacter.GetClassCharacterType
// 0x0001 (0x0001 - 0x0000)
struct StigmaCharacter_GetClassCharacterType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCharacter_GetClassCharacterType) == 0x000001, "Wrong alignment on StigmaCharacter_GetClassCharacterType");
static_assert(sizeof(StigmaCharacter_GetClassCharacterType) == 0x000001, "Wrong size on StigmaCharacter_GetClassCharacterType");
static_assert(offsetof(StigmaCharacter_GetClassCharacterType, ReturnValue) == 0x000000, "Member 'StigmaCharacter_GetClassCharacterType::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetShowLinkedSkillGuide
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetShowLinkedSkillGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetShowLinkedSkillGuide) == 0x000001, "Wrong alignment on CharaBase_GetShowLinkedSkillGuide");
static_assert(sizeof(CharaBase_GetShowLinkedSkillGuide) == 0x000001, "Wrong size on CharaBase_GetShowLinkedSkillGuide");
static_assert(offsetof(CharaBase_GetShowLinkedSkillGuide, ReturnValue) == 0x000000, "Member 'CharaBase_GetShowLinkedSkillGuide::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.SetShowLinkedSkillGuide
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SetShowLinkedSkillGuide final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetShowLinkedSkillGuide) == 0x000001, "Wrong alignment on CharaBase_SetShowLinkedSkillGuide");
static_assert(sizeof(CharaBase_SetShowLinkedSkillGuide) == 0x000001, "Wrong size on CharaBase_SetShowLinkedSkillGuide");
static_assert(offsetof(CharaBase_SetShowLinkedSkillGuide, _show) == 0x000000, "Member 'CharaBase_SetShowLinkedSkillGuide::_show' has a wrong offset!");

// Function Stigma.CharaBase.ALL_FireOneShot
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_ALL_FireOneShot final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShot                                  _shot;                                             // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_ALL_FireOneShot) == 0x000008, "Wrong alignment on CharaBase_ALL_FireOneShot");
static_assert(sizeof(CharaBase_ALL_FireOneShot) == 0x000030, "Wrong size on CharaBase_ALL_FireOneShot");
static_assert(offsetof(CharaBase_ALL_FireOneShot, _gun) == 0x000000, "Member 'CharaBase_ALL_FireOneShot::_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_ALL_FireOneShot, _shot) == 0x000008, "Member 'CharaBase_ALL_FireOneShot::_shot' has a wrong offset!");

// Function Stigma.CharaBase.ALL_MakeDiedState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_ALL_MakeDiedState final
{
public:
	bool                                          _died;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_ALL_MakeDiedState) == 0x000001, "Wrong alignment on CharaBase_ALL_MakeDiedState");
static_assert(sizeof(CharaBase_ALL_MakeDiedState) == 0x000001, "Wrong size on CharaBase_ALL_MakeDiedState");
static_assert(offsetof(CharaBase_ALL_MakeDiedState, _died) == 0x000000, "Member 'CharaBase_ALL_MakeDiedState::_died' has a wrong offset!");

// Function Stigma.CharaBase.AttachMesh
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_AttachMesh final
{
public:
	bool                                          _attach;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_AttachMesh) == 0x000001, "Wrong alignment on CharaBase_AttachMesh");
static_assert(sizeof(CharaBase_AttachMesh) == 0x000001, "Wrong size on CharaBase_AttachMesh");
static_assert(offsetof(CharaBase_AttachMesh, _attach) == 0x000000, "Member 'CharaBase_AttachMesh::_attach' has a wrong offset!");

// Function Stigma.CharaBase.BindGun
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_BindGun final
{
public:
	bool                                          _for_main;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2038[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AGunBase*                               _gun;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_BindGun) == 0x000008, "Wrong alignment on CharaBase_BindGun");
static_assert(sizeof(CharaBase_BindGun) == 0x000010, "Wrong size on CharaBase_BindGun");
static_assert(offsetof(CharaBase_BindGun, _for_main) == 0x000000, "Member 'CharaBase_BindGun::_for_main' has a wrong offset!");
static_assert(offsetof(CharaBase_BindGun, _gun) == 0x000008, "Member 'CharaBase_BindGun::_gun' has a wrong offset!");

// Function Stigma.CharaBase.CalcDamage
// 0x00C0 (0x00C0 - 0x0000)
struct CharaBase_CalcDamage final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageDef                             ReturnValue;                                       // 0x00A8(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2039[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_CalcDamage) == 0x000008, "Wrong alignment on CharaBase_CalcDamage");
static_assert(sizeof(CharaBase_CalcDamage) == 0x0000C0, "Wrong size on CharaBase_CalcDamage");
static_assert(offsetof(CharaBase_CalcDamage, _hit) == 0x000000, "Member 'CharaBase_CalcDamage::_hit' has a wrong offset!");
static_assert(offsetof(CharaBase_CalcDamage, ReturnValue) == 0x0000A8, "Member 'CharaBase_CalcDamage::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanUseBooster
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_CanUseBooster final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_CanUseBooster) == 0x000004, "Wrong alignment on CharaBase_CanUseBooster");
static_assert(sizeof(CharaBase_CanUseBooster) == 0x000008, "Wrong size on CharaBase_CanUseBooster");
static_assert(offsetof(CharaBase_CanUseBooster, _slot_zidx) == 0x000000, "Member 'CharaBase_CanUseBooster::_slot_zidx' has a wrong offset!");
static_assert(offsetof(CharaBase_CanUseBooster, ReturnValue) == 0x000004, "Member 'CharaBase_CanUseBooster::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.ChangeUpperState
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_ChangeUpperState final
{
public:
	EBodyUpperState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_force;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_ChangeUpperState) == 0x000001, "Wrong alignment on CharaBase_ChangeUpperState");
static_assert(sizeof(CharaBase_ChangeUpperState) == 0x000002, "Wrong size on CharaBase_ChangeUpperState");
static_assert(offsetof(CharaBase_ChangeUpperState, _state) == 0x000000, "Member 'CharaBase_ChangeUpperState::_state' has a wrong offset!");
static_assert(offsetof(CharaBase_ChangeUpperState, _is_force) == 0x000001, "Member 'CharaBase_ChangeUpperState::_is_force' has a wrong offset!");

// Function Stigma.CharaBase.CLIENT_EndRequest
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_CLIENT_EndRequest final
{
public:
	ECharaAction                                  _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CLIENT_EndRequest) == 0x000001, "Wrong alignment on CharaBase_CLIENT_EndRequest");
static_assert(sizeof(CharaBase_CLIENT_EndRequest) == 0x000001, "Wrong size on CharaBase_CLIENT_EndRequest");
static_assert(offsetof(CharaBase_CLIENT_EndRequest, _new_action) == 0x000000, "Member 'CharaBase_CLIENT_EndRequest::_new_action' has a wrong offset!");

// Function Stigma.CharaBase.CLIENT_Request
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_CLIENT_Request final
{
public:
	ECharaAction                                  _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _direction;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CLIENT_Request) == 0x000008, "Wrong alignment on CharaBase_CLIENT_Request");
static_assert(sizeof(CharaBase_CLIENT_Request) == 0x000020, "Wrong size on CharaBase_CLIENT_Request");
static_assert(offsetof(CharaBase_CLIENT_Request, _new_action) == 0x000000, "Member 'CharaBase_CLIENT_Request::_new_action' has a wrong offset!");
static_assert(offsetof(CharaBase_CLIENT_Request, _direction) == 0x000008, "Member 'CharaBase_CLIENT_Request::_direction' has a wrong offset!");

// Function Stigma.CharaBase.CLIENT_StartRequest
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_CLIENT_StartRequest final
{
public:
	ECharaAction                                  _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _direction;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CLIENT_StartRequest) == 0x000008, "Wrong alignment on CharaBase_CLIENT_StartRequest");
static_assert(sizeof(CharaBase_CLIENT_StartRequest) == 0x000020, "Wrong size on CharaBase_CLIENT_StartRequest");
static_assert(offsetof(CharaBase_CLIENT_StartRequest, _new_action) == 0x000000, "Member 'CharaBase_CLIENT_StartRequest::_new_action' has a wrong offset!");
static_assert(offsetof(CharaBase_CLIENT_StartRequest, _direction) == 0x000008, "Member 'CharaBase_CLIENT_StartRequest::_direction' has a wrong offset!");

// Function Stigma.CharaBase.CLIENT_StunPostProcess
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_CLIENT_StunPostProcess final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CLIENT_StunPostProcess) == 0x000001, "Wrong alignment on CharaBase_CLIENT_StunPostProcess");
static_assert(sizeof(CharaBase_CLIENT_StunPostProcess) == 0x000001, "Wrong size on CharaBase_CLIENT_StunPostProcess");
static_assert(offsetof(CharaBase_CLIENT_StunPostProcess, _enable) == 0x000000, "Member 'CharaBase_CLIENT_StunPostProcess::_enable' has a wrong offset!");

// Function Stigma.CharaBase.CreateGun
// 0x00E0 (0x00E0 - 0x0000)
struct CharaBase_CreateGun final
{
public:
	struct FGunSpec                               _spec;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _righthand;                                        // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203D[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AGunBase*                               ReturnValue;                                       // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CreateGun) == 0x000008, "Wrong alignment on CharaBase_CreateGun");
static_assert(sizeof(CharaBase_CreateGun) == 0x0000E0, "Wrong size on CharaBase_CreateGun");
static_assert(offsetof(CharaBase_CreateGun, _spec) == 0x000000, "Member 'CharaBase_CreateGun::_spec' has a wrong offset!");
static_assert(offsetof(CharaBase_CreateGun, _righthand) == 0x0000D0, "Member 'CharaBase_CreateGun::_righthand' has a wrong offset!");
static_assert(offsetof(CharaBase_CreateGun, ReturnValue) == 0x0000D8, "Member 'CharaBase_CreateGun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_ActivateInfinitedStock
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_ActivateInfinitedStock final
{
public:
	bool                                          _inf_stock;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_ActivateInfinitedStock) == 0x000001, "Wrong alignment on CharaBase_DEBUG_ActivateInfinitedStock");
static_assert(sizeof(CharaBase_DEBUG_ActivateInfinitedStock) == 0x000001, "Wrong size on CharaBase_DEBUG_ActivateInfinitedStock");
static_assert(offsetof(CharaBase_DEBUG_ActivateInfinitedStock, _inf_stock) == 0x000000, "Member 'CharaBase_DEBUG_ActivateInfinitedStock::_inf_stock' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_DEBUG_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetDebugString) == 0x000008, "Wrong alignment on CharaBase_DEBUG_GetDebugString");
static_assert(sizeof(CharaBase_DEBUG_GetDebugString) == 0x000010, "Wrong size on CharaBase_DEBUG_GetDebugString");
static_assert(offsetof(CharaBase_DEBUG_GetDebugString, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetDebugString::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_PlayHitEffects_BP
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBase_DEBUG_PlayHitEffects_BP final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203E[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_DEBUG_PlayHitEffects_BP) == 0x000008, "Wrong alignment on CharaBase_DEBUG_PlayHitEffects_BP");
static_assert(sizeof(CharaBase_DEBUG_PlayHitEffects_BP) == 0x0000B0, "Wrong size on CharaBase_DEBUG_PlayHitEffects_BP");
static_assert(offsetof(CharaBase_DEBUG_PlayHitEffects_BP, _hit) == 0x000000, "Member 'CharaBase_DEBUG_PlayHitEffects_BP::_hit' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_PlayHitEffects_BP, ReturnValue) == 0x0000A8, "Member 'CharaBase_DEBUG_PlayHitEffects_BP::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_Set1PVIdleBlendWeight
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_DEBUG_Set1PVIdleBlendWeight final
{
public:
	float                                         _weight;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_Set1PVIdleBlendWeight) == 0x000004, "Wrong alignment on CharaBase_DEBUG_Set1PVIdleBlendWeight");
static_assert(sizeof(CharaBase_DEBUG_Set1PVIdleBlendWeight) == 0x000004, "Wrong size on CharaBase_DEBUG_Set1PVIdleBlendWeight");
static_assert(offsetof(CharaBase_DEBUG_Set1PVIdleBlendWeight, _weight) == 0x000000, "Member 'CharaBase_DEBUG_Set1PVIdleBlendWeight::_weight' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetAutoStandUp
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetAutoStandUp final
{
public:
	EAutoStandUp                                  _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetAutoStandUp) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetAutoStandUp");
static_assert(sizeof(CharaBase_DEBUG_SetAutoStandUp) == 0x000001, "Wrong size on CharaBase_DEBUG_SetAutoStandUp");
static_assert(offsetof(CharaBase_DEBUG_SetAutoStandUp, _type) == 0x000000, "Member 'CharaBase_DEBUG_SetAutoStandUp::_type' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetCameraDistance
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_DEBUG_SetCameraDistance final
{
public:
	float                                         _dist;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _for_1pv;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_DEBUG_SetCameraDistance) == 0x000004, "Wrong alignment on CharaBase_DEBUG_SetCameraDistance");
static_assert(sizeof(CharaBase_DEBUG_SetCameraDistance) == 0x000008, "Wrong size on CharaBase_DEBUG_SetCameraDistance");
static_assert(offsetof(CharaBase_DEBUG_SetCameraDistance, _dist) == 0x000000, "Member 'CharaBase_DEBUG_SetCameraDistance::_dist' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_SetCameraDistance, _for_1pv) == 0x000004, "Member 'CharaBase_DEBUG_SetCameraDistance::_for_1pv' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetCameraOffset
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_DEBUG_SetCameraOffset final
{
public:
	struct FVector                                _offset;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _for_target;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _for_1pv;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2040[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_DEBUG_SetCameraOffset) == 0x000008, "Wrong alignment on CharaBase_DEBUG_SetCameraOffset");
static_assert(sizeof(CharaBase_DEBUG_SetCameraOffset) == 0x000020, "Wrong size on CharaBase_DEBUG_SetCameraOffset");
static_assert(offsetof(CharaBase_DEBUG_SetCameraOffset, _offset) == 0x000000, "Member 'CharaBase_DEBUG_SetCameraOffset::_offset' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_SetCameraOffset, _for_target) == 0x000018, "Member 'CharaBase_DEBUG_SetCameraOffset::_for_target' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_SetCameraOffset, _for_1pv) == 0x000019, "Member 'CharaBase_DEBUG_SetCameraOffset::_for_1pv' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetInvincible
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetInvincible final
{
public:
	bool                                          _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetInvincible) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetInvincible");
static_assert(sizeof(CharaBase_DEBUG_SetInvincible) == 0x000001, "Wrong size on CharaBase_DEBUG_SetInvincible");
static_assert(offsetof(CharaBase_DEBUG_SetInvincible, _state) == 0x000000, "Member 'CharaBase_DEBUG_SetInvincible::_state' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetNoCPPenalty
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetNoCPPenalty final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetNoCPPenalty) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetNoCPPenalty");
static_assert(sizeof(CharaBase_DEBUG_SetNoCPPenalty) == 0x000001, "Wrong size on CharaBase_DEBUG_SetNoCPPenalty");
static_assert(offsetof(CharaBase_DEBUG_SetNoCPPenalty, _value) == 0x000000, "Member 'CharaBase_DEBUG_SetNoCPPenalty::_value' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetPeriodicRepeatDuration
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_DEBUG_SetPeriodicRepeatDuration final
{
public:
	float                                         _duration;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetPeriodicRepeatDuration) == 0x000004, "Wrong alignment on CharaBase_DEBUG_SetPeriodicRepeatDuration");
static_assert(sizeof(CharaBase_DEBUG_SetPeriodicRepeatDuration) == 0x000004, "Wrong size on CharaBase_DEBUG_SetPeriodicRepeatDuration");
static_assert(offsetof(CharaBase_DEBUG_SetPeriodicRepeatDuration, _duration) == 0x000000, "Member 'CharaBase_DEBUG_SetPeriodicRepeatDuration::_duration' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetPeriodicRepeatType
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetPeriodicRepeatType final
{
public:
	EPeriodicRepeatType                           _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetPeriodicRepeatType) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetPeriodicRepeatType");
static_assert(sizeof(CharaBase_DEBUG_SetPeriodicRepeatType) == 0x000001, "Wrong size on CharaBase_DEBUG_SetPeriodicRepeatType");
static_assert(offsetof(CharaBase_DEBUG_SetPeriodicRepeatType, _type) == 0x000000, "Member 'CharaBase_DEBUG_SetPeriodicRepeatType::_type' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetRepeatAction
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_DEBUG_SetRepeatAction final
{
public:
	ECharaAction                                  _action_slot;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2041[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _interval;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetRepeatAction) == 0x000004, "Wrong alignment on CharaBase_DEBUG_SetRepeatAction");
static_assert(sizeof(CharaBase_DEBUG_SetRepeatAction) == 0x000008, "Wrong size on CharaBase_DEBUG_SetRepeatAction");
static_assert(offsetof(CharaBase_DEBUG_SetRepeatAction, _action_slot) == 0x000000, "Member 'CharaBase_DEBUG_SetRepeatAction::_action_slot' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_SetRepeatAction, _interval) == 0x000004, "Member 'CharaBase_DEBUG_SetRepeatAction::_interval' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetShowCharaState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetShowCharaState final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetShowCharaState) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetShowCharaState");
static_assert(sizeof(CharaBase_DEBUG_SetShowCharaState) == 0x000001, "Wrong size on CharaBase_DEBUG_SetShowCharaState");
static_assert(offsetof(CharaBase_DEBUG_SetShowCharaState, _show) == 0x000000, "Member 'CharaBase_DEBUG_SetShowCharaState::_show' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetShowCollisionTest
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetShowCollisionTest final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetShowCollisionTest) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetShowCollisionTest");
static_assert(sizeof(CharaBase_DEBUG_SetShowCollisionTest) == 0x000001, "Wrong size on CharaBase_DEBUG_SetShowCollisionTest");
static_assert(offsetof(CharaBase_DEBUG_SetShowCollisionTest, _show) == 0x000000, "Member 'CharaBase_DEBUG_SetShowCollisionTest::_show' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetShowDamage
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_DEBUG_SetShowDamage final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebug_DamageViewerType                       _type;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetShowDamage) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetShowDamage");
static_assert(sizeof(CharaBase_DEBUG_SetShowDamage) == 0x000002, "Wrong size on CharaBase_DEBUG_SetShowDamage");
static_assert(offsetof(CharaBase_DEBUG_SetShowDamage, _show) == 0x000000, "Member 'CharaBase_DEBUG_SetShowDamage::_show' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_SetShowDamage, _type) == 0x000001, "Member 'CharaBase_DEBUG_SetShowDamage::_type' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetShowPlayingHitFX
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetShowPlayingHitFX final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetShowPlayingHitFX) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetShowPlayingHitFX");
static_assert(sizeof(CharaBase_DEBUG_SetShowPlayingHitFX) == 0x000001, "Wrong size on CharaBase_DEBUG_SetShowPlayingHitFX");
static_assert(offsetof(CharaBase_DEBUG_SetShowPlayingHitFX, _show) == 0x000000, "Member 'CharaBase_DEBUG_SetShowPlayingHitFX::_show' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetShowState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetShowState final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetShowState) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetShowState");
static_assert(sizeof(CharaBase_DEBUG_SetShowState) == 0x000001, "Wrong size on CharaBase_DEBUG_SetShowState");
static_assert(offsetof(CharaBase_DEBUG_SetShowState, _show) == 0x000000, "Member 'CharaBase_DEBUG_SetShowState::_show' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetStaticCamera
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetStaticCamera final
{
public:
	bool                                          _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetStaticCamera) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetStaticCamera");
static_assert(sizeof(CharaBase_DEBUG_SetStaticCamera) == 0x000001, "Wrong size on CharaBase_DEBUG_SetStaticCamera");
static_assert(offsetof(CharaBase_DEBUG_SetStaticCamera, _state) == 0x000000, "Member 'CharaBase_DEBUG_SetStaticCamera::_state' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_SetZoom
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_SetZoom final
{
public:
	bool                                          _is_zoom;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_SetZoom) == 0x000001, "Wrong alignment on CharaBase_DEBUG_SetZoom");
static_assert(sizeof(CharaBase_DEBUG_SetZoom) == 0x000001, "Wrong size on CharaBase_DEBUG_SetZoom");
static_assert(offsetof(CharaBase_DEBUG_SetZoom, _is_zoom) == 0x000000, "Member 'CharaBase_DEBUG_SetZoom::_is_zoom' has a wrong offset!");

// Function Stigma.CharaBase.DriveDeviation
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_DriveDeviation final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DriveDeviation) == 0x000004, "Wrong alignment on CharaBase_DriveDeviation");
static_assert(sizeof(CharaBase_DriveDeviation) == 0x000004, "Wrong size on CharaBase_DriveDeviation");
static_assert(offsetof(CharaBase_DriveDeviation, _delta) == 0x000000, "Member 'CharaBase_DriveDeviation::_delta' has a wrong offset!");

// DelegateFunction Stigma.CharaBase.EventLowerAction__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_EventLowerAction__DelegateSignature final
{
public:
	EBodyLowerAction                              _data;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_EventLowerAction__DelegateSignature) == 0x000001, "Wrong alignment on CharaBase_EventLowerAction__DelegateSignature");
static_assert(sizeof(CharaBase_EventLowerAction__DelegateSignature) == 0x000001, "Wrong size on CharaBase_EventLowerAction__DelegateSignature");
static_assert(offsetof(CharaBase_EventLowerAction__DelegateSignature, _data) == 0x000000, "Member 'CharaBase_EventLowerAction__DelegateSignature::_data' has a wrong offset!");

// DelegateFunction Stigma.CharaBase.EventLowerState__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_EventLowerState__DelegateSignature final
{
public:
	EBodyLowerState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_EventLowerState__DelegateSignature) == 0x000001, "Wrong alignment on CharaBase_EventLowerState__DelegateSignature");
static_assert(sizeof(CharaBase_EventLowerState__DelegateSignature) == 0x000001, "Wrong size on CharaBase_EventLowerState__DelegateSignature");
static_assert(offsetof(CharaBase_EventLowerState__DelegateSignature, _state) == 0x000000, "Member 'CharaBase_EventLowerState__DelegateSignature::_state' has a wrong offset!");

// DelegateFunction Stigma.CharaBase.EventUpperState__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_EventUpperState__DelegateSignature final
{
public:
	EBodyUpperState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_EventUpperState__DelegateSignature) == 0x000001, "Wrong alignment on CharaBase_EventUpperState__DelegateSignature");
static_assert(sizeof(CharaBase_EventUpperState__DelegateSignature) == 0x000001, "Wrong size on CharaBase_EventUpperState__DelegateSignature");
static_assert(offsetof(CharaBase_EventUpperState__DelegateSignature, _state) == 0x000000, "Member 'CharaBase_EventUpperState__DelegateSignature::_state' has a wrong offset!");

// Function Stigma.CharaBase.GetCurrentLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetCurrentLookAtTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCurrentLookAtTarget) == 0x000008, "Wrong alignment on CharaBase_GetCurrentLookAtTarget");
static_assert(sizeof(CharaBase_GetCurrentLookAtTarget) == 0x000008, "Wrong size on CharaBase_GetCurrentLookAtTarget");
static_assert(offsetof(CharaBase_GetCurrentLookAtTarget, ReturnValue) == 0x000000, "Member 'CharaBase_GetCurrentLookAtTarget::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetDeviationAngle
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetDeviationAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetDeviationAngle) == 0x000004, "Wrong alignment on CharaBase_GetDeviationAngle");
static_assert(sizeof(CharaBase_GetDeviationAngle) == 0x000004, "Wrong size on CharaBase_GetDeviationAngle");
static_assert(offsetof(CharaBase_GetDeviationAngle, ReturnValue) == 0x000000, "Member 'CharaBase_GetDeviationAngle::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetInteractableActorByBounding
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetInteractableActorByBounding final
{
public:
	TArray<class AActor*>                         _out_actors;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2042[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetInteractableActorByBounding) == 0x000008, "Wrong alignment on CharaBase_GetInteractableActorByBounding");
static_assert(sizeof(CharaBase_GetInteractableActorByBounding) == 0x000018, "Wrong size on CharaBase_GetInteractableActorByBounding");
static_assert(offsetof(CharaBase_GetInteractableActorByBounding, _out_actors) == 0x000000, "Member 'CharaBase_GetInteractableActorByBounding::_out_actors' has a wrong offset!");
static_assert(offsetof(CharaBase_GetInteractableActorByBounding, ReturnValue) == 0x000010, "Member 'CharaBase_GetInteractableActorByBounding::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetKillReasonToAction
// 0x0218 (0x0218 - 0x0000)
struct CharaBase_GetKillReasonToAction final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2043[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FActionGraphEntry                      _entry;                                            // 0x0008(0x0208)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0210(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2044[0x7];                                     // 0x0211(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetKillReasonToAction) == 0x000008, "Wrong alignment on CharaBase_GetKillReasonToAction");
static_assert(sizeof(CharaBase_GetKillReasonToAction) == 0x000218, "Wrong size on CharaBase_GetKillReasonToAction");
static_assert(offsetof(CharaBase_GetKillReasonToAction, _op_id) == 0x000000, "Member 'CharaBase_GetKillReasonToAction::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_GetKillReasonToAction, _entry) == 0x000008, "Member 'CharaBase_GetKillReasonToAction::_entry' has a wrong offset!");
static_assert(offsetof(CharaBase_GetKillReasonToAction, ReturnValue) == 0x000210, "Member 'CharaBase_GetKillReasonToAction::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetOwningPlayerState
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetOwningPlayerState final
{
public:
	class AMatchServicedPlayerState*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetOwningPlayerState) == 0x000008, "Wrong alignment on CharaBase_GetOwningPlayerState");
static_assert(sizeof(CharaBase_GetOwningPlayerState) == 0x000008, "Wrong size on CharaBase_GetOwningPlayerState");
static_assert(offsetof(CharaBase_GetOwningPlayerState, ReturnValue) == 0x000000, "Member 'CharaBase_GetOwningPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetTotalDeviation
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetTotalDeviation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetTotalDeviation) == 0x000004, "Wrong alignment on CharaBase_GetTotalDeviation");
static_assert(sizeof(CharaBase_GetTotalDeviation) == 0x000004, "Wrong size on CharaBase_GetTotalDeviation");
static_assert(offsetof(CharaBase_GetTotalDeviation, ReturnValue) == 0x000000, "Member 'CharaBase_GetTotalDeviation::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetUIValues
// 0x0014 (0x0014 - 0x0000)
struct CharaBase_GetUIValues final
{
public:
	float                                         _deviation;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _hp;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max_hp;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _out_armor;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _recovery_hp;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetUIValues) == 0x000004, "Wrong alignment on CharaBase_GetUIValues");
static_assert(sizeof(CharaBase_GetUIValues) == 0x000014, "Wrong size on CharaBase_GetUIValues");
static_assert(offsetof(CharaBase_GetUIValues, _deviation) == 0x000000, "Member 'CharaBase_GetUIValues::_deviation' has a wrong offset!");
static_assert(offsetof(CharaBase_GetUIValues, _hp) == 0x000004, "Member 'CharaBase_GetUIValues::_hp' has a wrong offset!");
static_assert(offsetof(CharaBase_GetUIValues, _max_hp) == 0x000008, "Member 'CharaBase_GetUIValues::_max_hp' has a wrong offset!");
static_assert(offsetof(CharaBase_GetUIValues, _out_armor) == 0x00000C, "Member 'CharaBase_GetUIValues::_out_armor' has a wrong offset!");
static_assert(offsetof(CharaBase_GetUIValues, _recovery_hp) == 0x000010, "Member 'CharaBase_GetUIValues::_recovery_hp' has a wrong offset!");

// Function Stigma.CharaBase.INPUT_HandleMoveForward
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_INPUT_HandleMoveForward final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_INPUT_HandleMoveForward) == 0x000004, "Wrong alignment on CharaBase_INPUT_HandleMoveForward");
static_assert(sizeof(CharaBase_INPUT_HandleMoveForward) == 0x000004, "Wrong size on CharaBase_INPUT_HandleMoveForward");
static_assert(offsetof(CharaBase_INPUT_HandleMoveForward, _value) == 0x000000, "Member 'CharaBase_INPUT_HandleMoveForward::_value' has a wrong offset!");

// Function Stigma.CharaBase.INPUT_HandleMoveRight
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_INPUT_HandleMoveRight final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_INPUT_HandleMoveRight) == 0x000004, "Wrong alignment on CharaBase_INPUT_HandleMoveRight");
static_assert(sizeof(CharaBase_INPUT_HandleMoveRight) == 0x000004, "Wrong size on CharaBase_INPUT_HandleMoveRight");
static_assert(offsetof(CharaBase_INPUT_HandleMoveRight, _value) == 0x000000, "Member 'CharaBase_INPUT_HandleMoveRight::_value' has a wrong offset!");

// Function Stigma.CharaBase.IsExpired
// 0x0014 (0x0014 - 0x0000)
struct CharaBase_IsExpired final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_remain_time;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_duration;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2045[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_IsExpired) == 0x000004, "Wrong alignment on CharaBase_IsExpired");
static_assert(sizeof(CharaBase_IsExpired) == 0x000014, "Wrong size on CharaBase_IsExpired");
static_assert(offsetof(CharaBase_IsExpired, Param_Name) == 0x000000, "Member 'CharaBase_IsExpired::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBase_IsExpired, Out_remain_time) == 0x000008, "Member 'CharaBase_IsExpired::Out_remain_time' has a wrong offset!");
static_assert(offsetof(CharaBase_IsExpired, Out_duration) == 0x00000C, "Member 'CharaBase_IsExpired::Out_duration' has a wrong offset!");
static_assert(offsetof(CharaBase_IsExpired, ReturnValue) == 0x000010, "Member 'CharaBase_IsExpired::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsExpiredBoosterCooltime
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_IsExpiredBoosterCooltime final
{
public:
	int32                                         _booster_zidx;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_remain_time;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_duration;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2046[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_IsExpiredBoosterCooltime) == 0x000004, "Wrong alignment on CharaBase_IsExpiredBoosterCooltime");
static_assert(sizeof(CharaBase_IsExpiredBoosterCooltime) == 0x000010, "Wrong size on CharaBase_IsExpiredBoosterCooltime");
static_assert(offsetof(CharaBase_IsExpiredBoosterCooltime, _booster_zidx) == 0x000000, "Member 'CharaBase_IsExpiredBoosterCooltime::_booster_zidx' has a wrong offset!");
static_assert(offsetof(CharaBase_IsExpiredBoosterCooltime, Out_remain_time) == 0x000004, "Member 'CharaBase_IsExpiredBoosterCooltime::Out_remain_time' has a wrong offset!");
static_assert(offsetof(CharaBase_IsExpiredBoosterCooltime, Out_duration) == 0x000008, "Member 'CharaBase_IsExpiredBoosterCooltime::Out_duration' has a wrong offset!");
static_assert(offsetof(CharaBase_IsExpiredBoosterCooltime, ReturnValue) == 0x00000C, "Member 'CharaBase_IsExpiredBoosterCooltime::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnALL_Damaged
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_OnALL_Damaged final
{
public:
	struct FDamagedData                           _damaged_data;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2047[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_OnALL_Damaged) == 0x000008, "Wrong alignment on CharaBase_OnALL_Damaged");
static_assert(sizeof(CharaBase_OnALL_Damaged) == 0x000038, "Wrong size on CharaBase_OnALL_Damaged");
static_assert(offsetof(CharaBase_OnALL_Damaged, _damaged_data) == 0x000000, "Member 'CharaBase_OnALL_Damaged::_damaged_data' has a wrong offset!");
static_assert(offsetof(CharaBase_OnALL_Damaged, ReturnValue) == 0x000030, "Member 'CharaBase_OnALL_Damaged::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnALL_Hit
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBase_OnALL_Hit final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2048[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_OnALL_Hit) == 0x000008, "Wrong alignment on CharaBase_OnALL_Hit");
static_assert(sizeof(CharaBase_OnALL_Hit) == 0x0000B0, "Wrong size on CharaBase_OnALL_Hit");
static_assert(offsetof(CharaBase_OnALL_Hit, _hit) == 0x000000, "Member 'CharaBase_OnALL_Hit::_hit' has a wrong offset!");
static_assert(offsetof(CharaBase_OnALL_Hit, ReturnValue) == 0x0000A8, "Member 'CharaBase_OnALL_Hit::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnAnimNotify_LowerState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnAnimNotify_LowerState final
{
public:
	EBodyLowerState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnAnimNotify_LowerState) == 0x000001, "Wrong alignment on CharaBase_OnAnimNotify_LowerState");
static_assert(sizeof(CharaBase_OnAnimNotify_LowerState) == 0x000001, "Wrong size on CharaBase_OnAnimNotify_LowerState");
static_assert(offsetof(CharaBase_OnAnimNotify_LowerState, _state) == 0x000000, "Member 'CharaBase_OnAnimNotify_LowerState::_state' has a wrong offset!");

// Function Stigma.CharaBase.OnAnimNotify_MeleeAttack
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_OnAnimNotify_MeleeAttack final
{
public:
	bool                                          _begin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2049[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMeleeData                             _melee_data;                                       // 0x0004(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnAnimNotify_MeleeAttack) == 0x000004, "Wrong alignment on CharaBase_OnAnimNotify_MeleeAttack");
static_assert(sizeof(CharaBase_OnAnimNotify_MeleeAttack) == 0x000028, "Wrong size on CharaBase_OnAnimNotify_MeleeAttack");
static_assert(offsetof(CharaBase_OnAnimNotify_MeleeAttack, _begin) == 0x000000, "Member 'CharaBase_OnAnimNotify_MeleeAttack::_begin' has a wrong offset!");
static_assert(offsetof(CharaBase_OnAnimNotify_MeleeAttack, _melee_data) == 0x000004, "Member 'CharaBase_OnAnimNotify_MeleeAttack::_melee_data' has a wrong offset!");

// Function Stigma.CharaBase.OnCapsuleHit
// 0x0118 (0x0118 - 0x0000)
struct CharaBase_OnCapsuleHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnCapsuleHit) == 0x000008, "Wrong alignment on CharaBase_OnCapsuleHit");
static_assert(sizeof(CharaBase_OnCapsuleHit) == 0x000118, "Wrong size on CharaBase_OnCapsuleHit");
static_assert(offsetof(CharaBase_OnCapsuleHit, HitComponent) == 0x000000, "Member 'CharaBase_OnCapsuleHit::HitComponent' has a wrong offset!");
static_assert(offsetof(CharaBase_OnCapsuleHit, OtherActor) == 0x000008, "Member 'CharaBase_OnCapsuleHit::OtherActor' has a wrong offset!");
static_assert(offsetof(CharaBase_OnCapsuleHit, OtherComp) == 0x000010, "Member 'CharaBase_OnCapsuleHit::OtherComp' has a wrong offset!");
static_assert(offsetof(CharaBase_OnCapsuleHit, NormalImpulse) == 0x000018, "Member 'CharaBase_OnCapsuleHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CharaBase_OnCapsuleHit, Hit) == 0x000030, "Member 'CharaBase_OnCapsuleHit::Hit' has a wrong offset!");

// Function Stigma.CharaBase.OnChange_LowerAction
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_OnChange_LowerAction final
{
public:
	EBodyLowerAction                              _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnChange_LowerAction) == 0x000001, "Wrong alignment on CharaBase_OnChange_LowerAction");
static_assert(sizeof(CharaBase_OnChange_LowerAction) == 0x000002, "Wrong size on CharaBase_OnChange_LowerAction");
static_assert(offsetof(CharaBase_OnChange_LowerAction, _new_action) == 0x000000, "Member 'CharaBase_OnChange_LowerAction::_new_action' has a wrong offset!");
static_assert(offsetof(CharaBase_OnChange_LowerAction, ReturnValue) == 0x000001, "Member 'CharaBase_OnChange_LowerAction::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnChange_LowerState
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_OnChange_LowerState final
{
public:
	EBodyLowerState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnChange_LowerState) == 0x000001, "Wrong alignment on CharaBase_OnChange_LowerState");
static_assert(sizeof(CharaBase_OnChange_LowerState) == 0x000002, "Wrong size on CharaBase_OnChange_LowerState");
static_assert(offsetof(CharaBase_OnChange_LowerState, _state) == 0x000000, "Member 'CharaBase_OnChange_LowerState::_state' has a wrong offset!");
static_assert(offsetof(CharaBase_OnChange_LowerState, ReturnValue) == 0x000001, "Member 'CharaBase_OnChange_LowerState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnChange_UpperState
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_OnChange_UpperState final
{
public:
	EBodyUpperState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnChange_UpperState) == 0x000001, "Wrong alignment on CharaBase_OnChange_UpperState");
static_assert(sizeof(CharaBase_OnChange_UpperState) == 0x000002, "Wrong size on CharaBase_OnChange_UpperState");
static_assert(offsetof(CharaBase_OnChange_UpperState, _state) == 0x000000, "Member 'CharaBase_OnChange_UpperState::_state' has a wrong offset!");
static_assert(offsetof(CharaBase_OnChange_UpperState, ReturnValue) == 0x000001, "Member 'CharaBase_OnChange_UpperState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnChanged_NetID
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_OnChanged_NetID final
{
public:
	struct FNetID                                 _id;                                               // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnChanged_NetID) == 0x000001, "Wrong alignment on CharaBase_OnChanged_NetID");
static_assert(sizeof(CharaBase_OnChanged_NetID) == 0x000003, "Wrong size on CharaBase_OnChanged_NetID");
static_assert(offsetof(CharaBase_OnChanged_NetID, _id) == 0x000000, "Member 'CharaBase_OnChanged_NetID::_id' has a wrong offset!");
static_assert(offsetof(CharaBase_OnChanged_NetID, ReturnValue) == 0x000002, "Member 'CharaBase_OnChanged_NetID::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnCLIENT_Stun
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_OnCLIENT_Stun final
{
public:
	bool                                          _stunned;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnCLIENT_Stun) == 0x000001, "Wrong alignment on CharaBase_OnCLIENT_Stun");
static_assert(sizeof(CharaBase_OnCLIENT_Stun) == 0x000002, "Wrong size on CharaBase_OnCLIENT_Stun");
static_assert(offsetof(CharaBase_OnCLIENT_Stun, _stunned) == 0x000000, "Member 'CharaBase_OnCLIENT_Stun::_stunned' has a wrong offset!");
static_assert(offsetof(CharaBase_OnCLIENT_Stun, ReturnValue) == 0x000001, "Member 'CharaBase_OnCLIENT_Stun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnEnabledUIMode
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_OnEnabledUIMode final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnEnabledUIMode) == 0x000001, "Wrong alignment on CharaBase_OnEnabledUIMode");
static_assert(sizeof(CharaBase_OnEnabledUIMode) == 0x000002, "Wrong size on CharaBase_OnEnabledUIMode");
static_assert(offsetof(CharaBase_OnEnabledUIMode, _enable) == 0x000000, "Member 'CharaBase_OnEnabledUIMode::_enable' has a wrong offset!");
static_assert(offsetof(CharaBase_OnEnabledUIMode, ReturnValue) == 0x000001, "Member 'CharaBase_OnEnabledUIMode::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnHitImpact
// 0x00A8 (0x00A8 - 0x0000)
struct CharaBase_OnHitImpact final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnHitImpact) == 0x000008, "Wrong alignment on CharaBase_OnHitImpact");
static_assert(sizeof(CharaBase_OnHitImpact) == 0x0000A8, "Wrong size on CharaBase_OnHitImpact");
static_assert(offsetof(CharaBase_OnHitImpact, _hit) == 0x000000, "Member 'CharaBase_OnHitImpact::_hit' has a wrong offset!");

// Function Stigma.CharaBase.OnLoadSettings
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnLoadSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnLoadSettings) == 0x000001, "Wrong alignment on CharaBase_OnLoadSettings");
static_assert(sizeof(CharaBase_OnLoadSettings) == 0x000001, "Wrong size on CharaBase_OnLoadSettings");
static_assert(offsetof(CharaBase_OnLoadSettings, ReturnValue) == 0x000000, "Member 'CharaBase_OnLoadSettings::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_Armor
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_OnRep_Armor final
{
public:
	float                                         _old_armor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_Armor) == 0x000004, "Wrong alignment on CharaBase_OnRep_Armor");
static_assert(sizeof(CharaBase_OnRep_Armor) == 0x000004, "Wrong size on CharaBase_OnRep_Armor");
static_assert(offsetof(CharaBase_OnRep_Armor, _old_armor) == 0x000000, "Member 'CharaBase_OnRep_Armor::_old_armor' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_CurrentRecovery
// 0x0014 (0x0014 - 0x0000)
struct CharaBase_OnRep_CurrentRecovery final
{
public:
	struct FHPRecovery                            _old_recovery;                                     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_CurrentRecovery) == 0x000004, "Wrong alignment on CharaBase_OnRep_CurrentRecovery");
static_assert(sizeof(CharaBase_OnRep_CurrentRecovery) == 0x000014, "Wrong size on CharaBase_OnRep_CurrentRecovery");
static_assert(offsetof(CharaBase_OnRep_CurrentRecovery, _old_recovery) == 0x000000, "Member 'CharaBase_OnRep_CurrentRecovery::_old_recovery' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_DEBUG_Panel_ActiveIndex
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_OnRep_DEBUG_Panel_ActiveIndex final
{
public:
	int32                                         _old_index;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_DEBUG_Panel_ActiveIndex) == 0x000004, "Wrong alignment on CharaBase_OnRep_DEBUG_Panel_ActiveIndex");
static_assert(sizeof(CharaBase_OnRep_DEBUG_Panel_ActiveIndex) == 0x000004, "Wrong size on CharaBase_OnRep_DEBUG_Panel_ActiveIndex");
static_assert(offsetof(CharaBase_OnRep_DEBUG_Panel_ActiveIndex, _old_index) == 0x000000, "Member 'CharaBase_OnRep_DEBUG_Panel_ActiveIndex::_old_index' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_HoldingProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_OnRep_HoldingProp final
{
public:
	class AThrowBase*                             _old_prop;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_HoldingProp) == 0x000008, "Wrong alignment on CharaBase_OnRep_HoldingProp");
static_assert(sizeof(CharaBase_OnRep_HoldingProp) == 0x000008, "Wrong size on CharaBase_OnRep_HoldingProp");
static_assert(offsetof(CharaBase_OnRep_HoldingProp, _old_prop) == 0x000000, "Member 'CharaBase_OnRep_HoldingProp::_old_prop' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_IsAntidoteState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnRep_IsAntidoteState final
{
public:
	bool                                          _old_value;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_IsAntidoteState) == 0x000001, "Wrong alignment on CharaBase_OnRep_IsAntidoteState");
static_assert(sizeof(CharaBase_OnRep_IsAntidoteState) == 0x000001, "Wrong size on CharaBase_OnRep_IsAntidoteState");
static_assert(offsetof(CharaBase_OnRep_IsAntidoteState, _old_value) == 0x000000, "Member 'CharaBase_OnRep_IsAntidoteState::_old_value' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_IsBoneBreaked
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnRep_IsBoneBreaked final
{
public:
	bool                                          _old_value;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_IsBoneBreaked) == 0x000001, "Wrong alignment on CharaBase_OnRep_IsBoneBreaked");
static_assert(sizeof(CharaBase_OnRep_IsBoneBreaked) == 0x000001, "Wrong size on CharaBase_OnRep_IsBoneBreaked");
static_assert(offsetof(CharaBase_OnRep_IsBoneBreaked, _old_value) == 0x000000, "Member 'CharaBase_OnRep_IsBoneBreaked::_old_value' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_IsTurnoffSound
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnRep_IsTurnoffSound final
{
public:
	bool                                          _old_value;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_IsTurnoffSound) == 0x000001, "Wrong alignment on CharaBase_OnRep_IsTurnoffSound");
static_assert(sizeof(CharaBase_OnRep_IsTurnoffSound) == 0x000001, "Wrong size on CharaBase_OnRep_IsTurnoffSound");
static_assert(offsetof(CharaBase_OnRep_IsTurnoffSound, _old_value) == 0x000000, "Member 'CharaBase_OnRep_IsTurnoffSound::_old_value' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_LootedGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_OnRep_LootedGun final
{
public:
	class AGunBase*                               _old_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_LootedGun) == 0x000008, "Wrong alignment on CharaBase_OnRep_LootedGun");
static_assert(sizeof(CharaBase_OnRep_LootedGun) == 0x000008, "Wrong size on CharaBase_OnRep_LootedGun");
static_assert(offsetof(CharaBase_OnRep_LootedGun, _old_gun) == 0x000000, "Member 'CharaBase_OnRep_LootedGun::_old_gun' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_LowerAction
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnRep_LowerAction final
{
public:
	EBodyLowerAction                              _old_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_LowerAction) == 0x000001, "Wrong alignment on CharaBase_OnRep_LowerAction");
static_assert(sizeof(CharaBase_OnRep_LowerAction) == 0x000001, "Wrong size on CharaBase_OnRep_LowerAction");
static_assert(offsetof(CharaBase_OnRep_LowerAction, _old_action) == 0x000000, "Member 'CharaBase_OnRep_LowerAction::_old_action' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_LowerState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnRep_LowerState final
{
public:
	EBodyLowerState                               _old_state;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_LowerState) == 0x000001, "Wrong alignment on CharaBase_OnRep_LowerState");
static_assert(sizeof(CharaBase_OnRep_LowerState) == 0x000001, "Wrong size on CharaBase_OnRep_LowerState");
static_assert(offsetof(CharaBase_OnRep_LowerState, _old_state) == 0x000000, "Member 'CharaBase_OnRep_LowerState::_old_state' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_OwnGun_Left
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_OnRep_OwnGun_Left final
{
public:
	class AGunBase*                               _old_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_OwnGun_Left) == 0x000008, "Wrong alignment on CharaBase_OnRep_OwnGun_Left");
static_assert(sizeof(CharaBase_OnRep_OwnGun_Left) == 0x000008, "Wrong size on CharaBase_OnRep_OwnGun_Left");
static_assert(offsetof(CharaBase_OnRep_OwnGun_Left, _old_gun) == 0x000000, "Member 'CharaBase_OnRep_OwnGun_Left::_old_gun' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_OwnGun_Right
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_OnRep_OwnGun_Right final
{
public:
	class AGunBase*                               _old_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_OwnGun_Right) == 0x000008, "Wrong alignment on CharaBase_OnRep_OwnGun_Right");
static_assert(sizeof(CharaBase_OnRep_OwnGun_Right) == 0x000008, "Wrong size on CharaBase_OnRep_OwnGun_Right");
static_assert(offsetof(CharaBase_OnRep_OwnGun_Right, _old_gun) == 0x000000, "Member 'CharaBase_OnRep_OwnGun_Right::_old_gun' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_PiercingProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_OnRep_PiercingProp final
{
public:
	class APiercingObjectBase*                    _old_prop;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_PiercingProp) == 0x000008, "Wrong alignment on CharaBase_OnRep_PiercingProp");
static_assert(sizeof(CharaBase_OnRep_PiercingProp) == 0x000008, "Wrong size on CharaBase_OnRep_PiercingProp");
static_assert(offsetof(CharaBase_OnRep_PiercingProp, _old_prop) == 0x000000, "Member 'CharaBase_OnRep_PiercingProp::_old_prop' has a wrong offset!");

// Function Stigma.CharaBase.OnRep_UpperState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnRep_UpperState final
{
public:
	EBodyUpperState                               _old_state;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnRep_UpperState) == 0x000001, "Wrong alignment on CharaBase_OnRep_UpperState");
static_assert(sizeof(CharaBase_OnRep_UpperState) == 0x000001, "Wrong size on CharaBase_OnRep_UpperState");
static_assert(offsetof(CharaBase_OnRep_UpperState, _old_state) == 0x000000, "Member 'CharaBase_OnRep_UpperState::_old_state' has a wrong offset!");

// Function Stigma.CharaBase.OnSERVER_Died
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBase_OnSERVER_Died final
{
public:
	struct FHitData                               _last_hit_data;                                    // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204A[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_OnSERVER_Died) == 0x000008, "Wrong alignment on CharaBase_OnSERVER_Died");
static_assert(sizeof(CharaBase_OnSERVER_Died) == 0x0000B0, "Wrong size on CharaBase_OnSERVER_Died");
static_assert(offsetof(CharaBase_OnSERVER_Died, _last_hit_data) == 0x000000, "Member 'CharaBase_OnSERVER_Died::_last_hit_data' has a wrong offset!");
static_assert(offsetof(CharaBase_OnSERVER_Died, ReturnValue) == 0x0000A8, "Member 'CharaBase_OnSERVER_Died::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnTick
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_OnTick final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204B[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_OnTick) == 0x000004, "Wrong alignment on CharaBase_OnTick");
static_assert(sizeof(CharaBase_OnTick) == 0x000008, "Wrong size on CharaBase_OnTick");
static_assert(offsetof(CharaBase_OnTick, _delta) == 0x000000, "Member 'CharaBase_OnTick::_delta' has a wrong offset!");
static_assert(offsetof(CharaBase_OnTick, ReturnValue) == 0x000004, "Member 'CharaBase_OnTick::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.OnUpdateMoveSpeed
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_OnUpdateMoveSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_OnUpdateMoveSpeed) == 0x000001, "Wrong alignment on CharaBase_OnUpdateMoveSpeed");
static_assert(sizeof(CharaBase_OnUpdateMoveSpeed) == 0x000001, "Wrong size on CharaBase_OnUpdateMoveSpeed");
static_assert(offsetof(CharaBase_OnUpdateMoveSpeed, ReturnValue) == 0x000000, "Member 'CharaBase_OnUpdateMoveSpeed::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.PlayFacialMotion
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_PlayFacialMotion final
{
public:
	ECharaFacialType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_PlayFacialMotion) == 0x000001, "Wrong alignment on CharaBase_PlayFacialMotion");
static_assert(sizeof(CharaBase_PlayFacialMotion) == 0x000001, "Wrong size on CharaBase_PlayFacialMotion");
static_assert(offsetof(CharaBase_PlayFacialMotion, Type) == 0x000000, "Member 'CharaBase_PlayFacialMotion::Type' has a wrong offset!");

// Function Stigma.CharaBase.PlayHitEffects
// 0x00B0 (0x00B0 - 0x0000)
struct CharaBase_PlayHitEffects final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204C[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_PlayHitEffects) == 0x000008, "Wrong alignment on CharaBase_PlayHitEffects");
static_assert(sizeof(CharaBase_PlayHitEffects) == 0x0000B0, "Wrong size on CharaBase_PlayHitEffects");
static_assert(offsetof(CharaBase_PlayHitEffects, _hit) == 0x000000, "Member 'CharaBase_PlayHitEffects::_hit' has a wrong offset!");
static_assert(offsetof(CharaBase_PlayHitEffects, ReturnValue) == 0x0000A8, "Member 'CharaBase_PlayHitEffects::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.RequestStandUpDirection
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_RequestStandUpDirection final
{
public:
	float                                         _forward;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _right;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RequestStandUpDirection) == 0x000004, "Wrong alignment on CharaBase_RequestStandUpDirection");
static_assert(sizeof(CharaBase_RequestStandUpDirection) == 0x000008, "Wrong size on CharaBase_RequestStandUpDirection");
static_assert(offsetof(CharaBase_RequestStandUpDirection, _forward) == 0x000000, "Member 'CharaBase_RequestStandUpDirection::_forward' has a wrong offset!");
static_assert(offsetof(CharaBase_RequestStandUpDirection, _right) == 0x000004, "Member 'CharaBase_RequestStandUpDirection::_right' has a wrong offset!");

// Function Stigma.CharaBase.ResetForRespawn
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_ResetForRespawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_ResetForRespawn) == 0x000001, "Wrong alignment on CharaBase_ResetForRespawn");
static_assert(sizeof(CharaBase_ResetForRespawn) == 0x000001, "Wrong size on CharaBase_ResetForRespawn");
static_assert(offsetof(CharaBase_ResetForRespawn, ReturnValue) == 0x000000, "Member 'CharaBase_ResetForRespawn::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.RPC_ALL_Damaged
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_RPC_ALL_Damaged final
{
public:
	struct FNetDamagedData                        _data;                                             // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_ALL_Damaged) == 0x000008, "Wrong alignment on CharaBase_RPC_ALL_Damaged");
static_assert(sizeof(CharaBase_RPC_ALL_Damaged) == 0x000028, "Wrong size on CharaBase_RPC_ALL_Damaged");
static_assert(offsetof(CharaBase_RPC_ALL_Damaged, _data) == 0x000000, "Member 'CharaBase_RPC_ALL_Damaged::_data' has a wrong offset!");

// Function Stigma.CharaBase.RPC_ALL_PiercingShot_AG
// 0x0090 (0x0090 - 0x0000)
struct CharaBase_RPC_ALL_PiercingShot_AG final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_204D[0xA];                                     // 0x0006(0x000A)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             _start_point;                                      // 0x0010(0x0060)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _end_point;                                        // 0x0070(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APiercingObjectBase*                    _obj;                                              // 0x0088(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_ALL_PiercingShot_AG) == 0x000010, "Wrong alignment on CharaBase_RPC_ALL_PiercingShot_AG");
static_assert(sizeof(CharaBase_RPC_ALL_PiercingShot_AG) == 0x000090, "Wrong size on CharaBase_RPC_ALL_PiercingShot_AG");
static_assert(offsetof(CharaBase_RPC_ALL_PiercingShot_AG, _op_id) == 0x000000, "Member 'CharaBase_RPC_ALL_PiercingShot_AG::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_PiercingShot_AG, _start_point) == 0x000010, "Member 'CharaBase_RPC_ALL_PiercingShot_AG::_start_point' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_PiercingShot_AG, _end_point) == 0x000070, "Member 'CharaBase_RPC_ALL_PiercingShot_AG::_end_point' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_PiercingShot_AG, _obj) == 0x000088, "Member 'CharaBase_RPC_ALL_PiercingShot_AG::_obj' has a wrong offset!");

// Function Stigma.CharaBase.RPC_ALL_Respawn
// 0x0040 (0x0040 - 0x0000)
struct CharaBase_RPC_ALL_Respawn final
{
public:
	bool                                          _for_round_reset;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _location;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rotation;                                         // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMoveSyncID                            _sync_id;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_204F[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_RPC_ALL_Respawn) == 0x000008, "Wrong alignment on CharaBase_RPC_ALL_Respawn");
static_assert(sizeof(CharaBase_RPC_ALL_Respawn) == 0x000040, "Wrong size on CharaBase_RPC_ALL_Respawn");
static_assert(offsetof(CharaBase_RPC_ALL_Respawn, _for_round_reset) == 0x000000, "Member 'CharaBase_RPC_ALL_Respawn::_for_round_reset' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_Respawn, _location) == 0x000008, "Member 'CharaBase_RPC_ALL_Respawn::_location' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_Respawn, _rotation) == 0x000020, "Member 'CharaBase_RPC_ALL_Respawn::_rotation' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_Respawn, _sync_id) == 0x000038, "Member 'CharaBase_RPC_ALL_Respawn::_sync_id' has a wrong offset!");

// Function Stigma.CharaBase.RPC_ALL_ThrowObject_AG
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_RPC_ALL_ThrowObject_AG final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2050[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FTransform>                     _start_points;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        _end_points;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AThrowBase*                             _throw_object;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_ALL_ThrowObject_AG) == 0x000008, "Wrong alignment on CharaBase_RPC_ALL_ThrowObject_AG");
static_assert(sizeof(CharaBase_RPC_ALL_ThrowObject_AG) == 0x000030, "Wrong size on CharaBase_RPC_ALL_ThrowObject_AG");
static_assert(offsetof(CharaBase_RPC_ALL_ThrowObject_AG, _op_id) == 0x000000, "Member 'CharaBase_RPC_ALL_ThrowObject_AG::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_ThrowObject_AG, _start_points) == 0x000008, "Member 'CharaBase_RPC_ALL_ThrowObject_AG::_start_points' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_ThrowObject_AG, _end_points) == 0x000018, "Member 'CharaBase_RPC_ALL_ThrowObject_AG::_end_points' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_ALL_ThrowObject_AG, _throw_object) == 0x000028, "Member 'CharaBase_RPC_ALL_ThrowObject_AG::_throw_object' has a wrong offset!");

// Function Stigma.CharaBase.RPC_ALL_UseBooster
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_RPC_ALL_UseBooster final
{
public:
	struct FItemID_Booster                        _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_ALL_UseBooster) == 0x000008, "Wrong alignment on CharaBase_RPC_ALL_UseBooster");
static_assert(sizeof(CharaBase_RPC_ALL_UseBooster) == 0x000010, "Wrong size on CharaBase_RPC_ALL_UseBooster");
static_assert(offsetof(CharaBase_RPC_ALL_UseBooster, _item_id) == 0x000000, "Member 'CharaBase_RPC_ALL_UseBooster::_item_id' has a wrong offset!");

// Function Stigma.CharaBase.RPC_CLIENT_UpperState_ACK
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_RPC_CLIENT_UpperState_ACK final
{
public:
	EBodyUpperState                               _prev;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyUpperState                               _curr;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_CLIENT_UpperState_ACK) == 0x000001, "Wrong alignment on CharaBase_RPC_CLIENT_UpperState_ACK");
static_assert(sizeof(CharaBase_RPC_CLIENT_UpperState_ACK) == 0x000002, "Wrong size on CharaBase_RPC_CLIENT_UpperState_ACK");
static_assert(offsetof(CharaBase_RPC_CLIENT_UpperState_ACK, _prev) == 0x000000, "Member 'CharaBase_RPC_CLIENT_UpperState_ACK::_prev' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_CLIENT_UpperState_ACK, _curr) == 0x000001, "Member 'CharaBase_RPC_CLIENT_UpperState_ACK::_curr' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_DEBUG_ChangeGun
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_RPC_SERVER_DEBUG_ChangeGun final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_main_gun;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _setup_own_gun;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_DEBUG_ChangeGun) == 0x000001, "Wrong alignment on CharaBase_RPC_SERVER_DEBUG_ChangeGun");
static_assert(sizeof(CharaBase_RPC_SERVER_DEBUG_ChangeGun) == 0x000003, "Wrong size on CharaBase_RPC_SERVER_DEBUG_ChangeGun");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_ChangeGun, _gun_type) == 0x000000, "Member 'CharaBase_RPC_SERVER_DEBUG_ChangeGun::_gun_type' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_ChangeGun, _is_main_gun) == 0x000001, "Member 'CharaBase_RPC_SERVER_DEBUG_ChangeGun::_is_main_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_ChangeGun, _setup_own_gun) == 0x000002, "Member 'CharaBase_RPC_SERVER_DEBUG_ChangeGun::_setup_own_gun' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_DEBUG_HoldProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_RPC_SERVER_DEBUG_HoldProp final
{
public:
	TSubclassOf<class AThrowBase>                 _prop_type;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_DEBUG_HoldProp) == 0x000008, "Wrong alignment on CharaBase_RPC_SERVER_DEBUG_HoldProp");
static_assert(sizeof(CharaBase_RPC_SERVER_DEBUG_HoldProp) == 0x000008, "Wrong size on CharaBase_RPC_SERVER_DEBUG_HoldProp");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_HoldProp, _prop_type) == 0x000000, "Member 'CharaBase_RPC_SERVER_DEBUG_HoldProp::_prop_type' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_DEBUG_LowerState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_RPC_SERVER_DEBUG_LowerState final
{
public:
	EBodyLowerState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_DEBUG_LowerState) == 0x000001, "Wrong alignment on CharaBase_RPC_SERVER_DEBUG_LowerState");
static_assert(sizeof(CharaBase_RPC_SERVER_DEBUG_LowerState) == 0x000001, "Wrong size on CharaBase_RPC_SERVER_DEBUG_LowerState");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_LowerState, _state) == 0x000000, "Member 'CharaBase_RPC_SERVER_DEBUG_LowerState::_state' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_DEBUG_SetCharacterSetting
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2051[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting) == 0x000008, "Wrong alignment on CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting");
static_assert(sizeof(CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting) == 0x000018, "Wrong size on CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting, _item_id) == 0x000000, "Member 'CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting::_item_id' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting, _slot) == 0x000010, "Member 'CharaBase_RPC_SERVER_DEBUG_SetCharacterSetting::_slot' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_DEBUG_SetPassiveSkillLevel
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel final
{
public:
	struct FPassiveSkillID                        _skill_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2052[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel) == 0x000008, "Wrong alignment on CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel");
static_assert(sizeof(CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel) == 0x000018, "Wrong size on CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel, _skill_id) == 0x000000, "Member 'CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel::_skill_id' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel, _level) == 0x000010, "Member 'CharaBase_RPC_SERVER_DEBUG_SetPassiveSkillLevel::_level' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_P2P_Hit_AG
// 0x00A8 (0x00A8 - 0x0000)
struct CharaBase_RPC_SERVER_P2P_Hit_AG final
{
public:
	struct FHitData                               _data;                                             // 0x0000(0x00A8)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_P2P_Hit_AG) == 0x000008, "Wrong alignment on CharaBase_RPC_SERVER_P2P_Hit_AG");
static_assert(sizeof(CharaBase_RPC_SERVER_P2P_Hit_AG) == 0x0000A8, "Wrong size on CharaBase_RPC_SERVER_P2P_Hit_AG");
static_assert(offsetof(CharaBase_RPC_SERVER_P2P_Hit_AG, _data) == 0x000000, "Member 'CharaBase_RPC_SERVER_P2P_Hit_AG::_data' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_PiercingShot_AG
// 0x0090 (0x0090 - 0x0000)
struct CharaBase_RPC_SERVER_PiercingShot_AG final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2053[0xA];                                     // 0x0006(0x000A)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             _start_point;                                      // 0x0010(0x0060)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _end_point;                                        // 0x0070(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2054[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_RPC_SERVER_PiercingShot_AG) == 0x000010, "Wrong alignment on CharaBase_RPC_SERVER_PiercingShot_AG");
static_assert(sizeof(CharaBase_RPC_SERVER_PiercingShot_AG) == 0x000090, "Wrong size on CharaBase_RPC_SERVER_PiercingShot_AG");
static_assert(offsetof(CharaBase_RPC_SERVER_PiercingShot_AG, _op_id) == 0x000000, "Member 'CharaBase_RPC_SERVER_PiercingShot_AG::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_PiercingShot_AG, _start_point) == 0x000010, "Member 'CharaBase_RPC_SERVER_PiercingShot_AG::_start_point' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_PiercingShot_AG, _end_point) == 0x000070, "Member 'CharaBase_RPC_SERVER_PiercingShot_AG::_end_point' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_RequestPurchaseItem
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_RPC_SERVER_RequestPurchaseItem final
{
public:
	class AProp_Store*                            Prop_Store;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _item_idx;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2055[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_RPC_SERVER_RequestPurchaseItem) == 0x000008, "Wrong alignment on CharaBase_RPC_SERVER_RequestPurchaseItem");
static_assert(sizeof(CharaBase_RPC_SERVER_RequestPurchaseItem) == 0x000010, "Wrong size on CharaBase_RPC_SERVER_RequestPurchaseItem");
static_assert(offsetof(CharaBase_RPC_SERVER_RequestPurchaseItem, Prop_Store) == 0x000000, "Member 'CharaBase_RPC_SERVER_RequestPurchaseItem::Prop_Store' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_RequestPurchaseItem, _item_idx) == 0x000008, "Member 'CharaBase_RPC_SERVER_RequestPurchaseItem::_item_idx' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_ThrowObject_AG
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_RPC_SERVER_ThrowObject_AG final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2056[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FTransform>                     _start_points;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        _end_points;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_ThrowObject_AG) == 0x000008, "Wrong alignment on CharaBase_RPC_SERVER_ThrowObject_AG");
static_assert(sizeof(CharaBase_RPC_SERVER_ThrowObject_AG) == 0x000028, "Wrong size on CharaBase_RPC_SERVER_ThrowObject_AG");
static_assert(offsetof(CharaBase_RPC_SERVER_ThrowObject_AG, _op_id) == 0x000000, "Member 'CharaBase_RPC_SERVER_ThrowObject_AG::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_ThrowObject_AG, _start_points) == 0x000008, "Member 'CharaBase_RPC_SERVER_ThrowObject_AG::_start_points' has a wrong offset!");
static_assert(offsetof(CharaBase_RPC_SERVER_ThrowObject_AG, _end_points) == 0x000018, "Member 'CharaBase_RPC_SERVER_ThrowObject_AG::_end_points' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_UpperState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_RPC_SERVER_UpperState final
{
public:
	EBodyUpperState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_UpperState) == 0x000001, "Wrong alignment on CharaBase_RPC_SERVER_UpperState");
static_assert(sizeof(CharaBase_RPC_SERVER_UpperState) == 0x000001, "Wrong size on CharaBase_RPC_SERVER_UpperState");
static_assert(offsetof(CharaBase_RPC_SERVER_UpperState, _state) == 0x000000, "Member 'CharaBase_RPC_SERVER_UpperState::_state' has a wrong offset!");

// Function Stigma.CharaBase.RPC_SERVER_UseBooster
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_RPC_SERVER_UseBooster final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_RPC_SERVER_UseBooster) == 0x000004, "Wrong alignment on CharaBase_RPC_SERVER_UseBooster");
static_assert(sizeof(CharaBase_RPC_SERVER_UseBooster) == 0x000004, "Wrong size on CharaBase_RPC_SERVER_UseBooster");
static_assert(offsetof(CharaBase_RPC_SERVER_UseBooster, _slot_zidx) == 0x000000, "Member 'CharaBase_RPC_SERVER_UseBooster::_slot_zidx' has a wrong offset!");

// Function Stigma.CharaBase.ScanObstacle
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_ScanObstacle final
{
public:
	EObstacleScanResult                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_ScanObstacle) == 0x000001, "Wrong alignment on CharaBase_ScanObstacle");
static_assert(sizeof(CharaBase_ScanObstacle) == 0x000001, "Wrong size on CharaBase_ScanObstacle");
static_assert(offsetof(CharaBase_ScanObstacle, ReturnValue) == 0x000000, "Member 'CharaBase_ScanObstacle::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_AddAbnormal
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SERVER_AddAbnormal final
{
public:
	EAbnormal                                     _abnormal_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_AddAbnormal) == 0x000001, "Wrong alignment on CharaBase_SERVER_AddAbnormal");
static_assert(sizeof(CharaBase_SERVER_AddAbnormal) == 0x000001, "Wrong size on CharaBase_SERVER_AddAbnormal");
static_assert(offsetof(CharaBase_SERVER_AddAbnormal, _abnormal_type) == 0x000000, "Member 'CharaBase_SERVER_AddAbnormal::_abnormal_type' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_AssignTeamForAI
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SERVER_AssignTeamForAI final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_AssignTeamForAI) == 0x000001, "Wrong alignment on CharaBase_SERVER_AssignTeamForAI");
static_assert(sizeof(CharaBase_SERVER_AssignTeamForAI) == 0x000001, "Wrong size on CharaBase_SERVER_AssignTeamForAI");
static_assert(offsetof(CharaBase_SERVER_AssignTeamForAI, _Team) == 0x000000, "Member 'CharaBase_SERVER_AssignTeamForAI::_Team' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_LoadMagazine
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_SERVER_LoadMagazine final
{
public:
	EGunnerJobReason                              _reason;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_main_hand_hold_gun;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_LoadMagazine) == 0x000001, "Wrong alignment on CharaBase_SERVER_LoadMagazine");
static_assert(sizeof(CharaBase_SERVER_LoadMagazine) == 0x000003, "Wrong size on CharaBase_SERVER_LoadMagazine");
static_assert(offsetof(CharaBase_SERVER_LoadMagazine, _reason) == 0x000000, "Member 'CharaBase_SERVER_LoadMagazine::_reason' has a wrong offset!");
static_assert(offsetof(CharaBase_SERVER_LoadMagazine, Is_main_hand_hold_gun) == 0x000001, "Member 'CharaBase_SERVER_LoadMagazine::Is_main_hand_hold_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_SERVER_LoadMagazine, ReturnValue) == 0x000002, "Member 'CharaBase_SERVER_LoadMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_RemoveAbnormal
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SERVER_RemoveAbnormal final
{
public:
	EAbnormal                                     _abnormal_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_RemoveAbnormal) == 0x000001, "Wrong alignment on CharaBase_SERVER_RemoveAbnormal");
static_assert(sizeof(CharaBase_SERVER_RemoveAbnormal) == 0x000001, "Wrong size on CharaBase_SERVER_RemoveAbnormal");
static_assert(offsetof(CharaBase_SERVER_RemoveAbnormal, _abnormal_type) == 0x000000, "Member 'CharaBase_SERVER_RemoveAbnormal::_abnormal_type' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_SetHoldingProp
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_SERVER_SetHoldingProp final
{
public:
	class AThrowBase*                             _prop;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectState                                  _obj_state_for_old;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2057[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_SERVER_SetHoldingProp) == 0x000008, "Wrong alignment on CharaBase_SERVER_SetHoldingProp");
static_assert(sizeof(CharaBase_SERVER_SetHoldingProp) == 0x000010, "Wrong size on CharaBase_SERVER_SetHoldingProp");
static_assert(offsetof(CharaBase_SERVER_SetHoldingProp, _prop) == 0x000000, "Member 'CharaBase_SERVER_SetHoldingProp::_prop' has a wrong offset!");
static_assert(offsetof(CharaBase_SERVER_SetHoldingProp, _obj_state_for_old) == 0x000008, "Member 'CharaBase_SERVER_SetHoldingProp::_obj_state_for_old' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_SetIsTurnoffSound
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SERVER_SetIsTurnoffSound final
{
public:
	bool                                          _turn_off;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_SetIsTurnoffSound) == 0x000001, "Wrong alignment on CharaBase_SERVER_SetIsTurnoffSound");
static_assert(sizeof(CharaBase_SERVER_SetIsTurnoffSound) == 0x000001, "Wrong size on CharaBase_SERVER_SetIsTurnoffSound");
static_assert(offsetof(CharaBase_SERVER_SetIsTurnoffSound, _turn_off) == 0x000000, "Member 'CharaBase_SERVER_SetIsTurnoffSound::_turn_off' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_SetLootedGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_SERVER_SetLootedGun final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_SetLootedGun) == 0x000008, "Wrong alignment on CharaBase_SERVER_SetLootedGun");
static_assert(sizeof(CharaBase_SERVER_SetLootedGun) == 0x000008, "Wrong size on CharaBase_SERVER_SetLootedGun");
static_assert(offsetof(CharaBase_SERVER_SetLootedGun, _gun) == 0x000000, "Member 'CharaBase_SERVER_SetLootedGun::_gun' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_SetNetID
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_SERVER_SetNetID final
{
public:
	struct FNetID                                 _id;                                               // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_SetNetID) == 0x000001, "Wrong alignment on CharaBase_SERVER_SetNetID");
static_assert(sizeof(CharaBase_SERVER_SetNetID) == 0x000002, "Wrong size on CharaBase_SERVER_SetNetID");
static_assert(offsetof(CharaBase_SERVER_SetNetID, _id) == 0x000000, "Member 'CharaBase_SERVER_SetNetID::_id' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_SetPiercingProp
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_SERVER_SetPiercingProp final
{
public:
	class APiercingObjectBase*                    _prop;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectState                                  _obj_state_for_old;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2058[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_SERVER_SetPiercingProp) == 0x000008, "Wrong alignment on CharaBase_SERVER_SetPiercingProp");
static_assert(sizeof(CharaBase_SERVER_SetPiercingProp) == 0x000010, "Wrong size on CharaBase_SERVER_SetPiercingProp");
static_assert(offsetof(CharaBase_SERVER_SetPiercingProp, _prop) == 0x000000, "Member 'CharaBase_SERVER_SetPiercingProp::_prop' has a wrong offset!");
static_assert(offsetof(CharaBase_SERVER_SetPiercingProp, _obj_state_for_old) == 0x000008, "Member 'CharaBase_SERVER_SetPiercingProp::_obj_state_for_old' has a wrong offset!");

// Function Stigma.CharaBase.SERVER_StartStun
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_SERVER_StartStun final
{
public:
	struct FStunTypeParam                         _param;                                            // 0x0000(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SERVER_StartStun) == 0x000001, "Wrong alignment on CharaBase_SERVER_StartStun");
static_assert(sizeof(CharaBase_SERVER_StartStun) == 0x000003, "Wrong size on CharaBase_SERVER_StartStun");
static_assert(offsetof(CharaBase_SERVER_StartStun, _param) == 0x000000, "Member 'CharaBase_SERVER_StartStun::_param' has a wrong offset!");

// Function Stigma.CharaBase.SetCameraMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SetCameraMotionBlur final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetCameraMotionBlur) == 0x000001, "Wrong alignment on CharaBase_SetCameraMotionBlur");
static_assert(sizeof(CharaBase_SetCameraMotionBlur) == 0x000001, "Wrong size on CharaBase_SetCameraMotionBlur");
static_assert(offsetof(CharaBase_SetCameraMotionBlur, _value) == 0x000000, "Member 'CharaBase_SetCameraMotionBlur::_value' has a wrong offset!");

// Function Stigma.CharaBase.SetControlSpeedRate
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_SetControlSpeedRate final
{
public:
	float                                         _move_rate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _rot_yaw_rate;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetControlSpeedRate) == 0x000004, "Wrong alignment on CharaBase_SetControlSpeedRate");
static_assert(sizeof(CharaBase_SetControlSpeedRate) == 0x000008, "Wrong size on CharaBase_SetControlSpeedRate");
static_assert(offsetof(CharaBase_SetControlSpeedRate, _move_rate) == 0x000000, "Member 'CharaBase_SetControlSpeedRate::_move_rate' has a wrong offset!");
static_assert(offsetof(CharaBase_SetControlSpeedRate, _rot_yaw_rate) == 0x000004, "Member 'CharaBase_SetControlSpeedRate::_rot_yaw_rate' has a wrong offset!");

// Function Stigma.CharaBase.SetControlYaw
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_SetControlYaw final
{
public:
	float                                         _yaw;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetControlYaw) == 0x000004, "Wrong alignment on CharaBase_SetControlYaw");
static_assert(sizeof(CharaBase_SetControlYaw) == 0x000004, "Wrong size on CharaBase_SetControlYaw");
static_assert(offsetof(CharaBase_SetControlYaw, _yaw) == 0x000000, "Member 'CharaBase_SetControlYaw::_yaw' has a wrong offset!");

// Function Stigma.CharaBase.SetGunSpec
// 0x00D8 (0x00D8 - 0x0000)
struct CharaBase_SetGunSpec final
{
public:
	struct FGunSpec                               _gun_spec;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Should_make_gun;                                   // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2059[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_SetGunSpec) == 0x000008, "Wrong alignment on CharaBase_SetGunSpec");
static_assert(sizeof(CharaBase_SetGunSpec) == 0x0000D8, "Wrong size on CharaBase_SetGunSpec");
static_assert(offsetof(CharaBase_SetGunSpec, _gun_spec) == 0x000000, "Member 'CharaBase_SetGunSpec::_gun_spec' has a wrong offset!");
static_assert(offsetof(CharaBase_SetGunSpec, Should_make_gun) == 0x0000D0, "Member 'CharaBase_SetGunSpec::Should_make_gun' has a wrong offset!");

// Function Stigma.CharaBase.SetInputDirection_Forward
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_SetInputDirection_Forward final
{
public:
	float                                         _val;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetInputDirection_Forward) == 0x000004, "Wrong alignment on CharaBase_SetInputDirection_Forward");
static_assert(sizeof(CharaBase_SetInputDirection_Forward) == 0x000004, "Wrong size on CharaBase_SetInputDirection_Forward");
static_assert(offsetof(CharaBase_SetInputDirection_Forward, _val) == 0x000000, "Member 'CharaBase_SetInputDirection_Forward::_val' has a wrong offset!");

// Function Stigma.CharaBase.SetInputDirection_Right
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_SetInputDirection_Right final
{
public:
	float                                         _val;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetInputDirection_Right) == 0x000004, "Wrong alignment on CharaBase_SetInputDirection_Right");
static_assert(sizeof(CharaBase_SetInputDirection_Right) == 0x000004, "Wrong size on CharaBase_SetInputDirection_Right");
static_assert(offsetof(CharaBase_SetInputDirection_Right, _val) == 0x000000, "Member 'CharaBase_SetInputDirection_Right::_val' has a wrong offset!");

// Function Stigma.CharaBase.SetMeshMaterials
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_SetMeshMaterials final
{
public:
	class UMeshComponent*                         Meshcom;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _materialinterface;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _materialinterface_trans;                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _copymaterial;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Materialindex;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOriginMaterials                       Timedmaterials;                                    // 0x0020(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          _onematerialonly;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FOriginMaterials                       ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetMeshMaterials) == 0x000008, "Wrong alignment on CharaBase_SetMeshMaterials");
static_assert(sizeof(CharaBase_SetMeshMaterials) == 0x000048, "Wrong size on CharaBase_SetMeshMaterials");
static_assert(offsetof(CharaBase_SetMeshMaterials, Meshcom) == 0x000000, "Member 'CharaBase_SetMeshMaterials::Meshcom' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, _materialinterface) == 0x000008, "Member 'CharaBase_SetMeshMaterials::_materialinterface' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, _materialinterface_trans) == 0x000010, "Member 'CharaBase_SetMeshMaterials::_materialinterface_trans' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, _copymaterial) == 0x000018, "Member 'CharaBase_SetMeshMaterials::_copymaterial' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, Materialindex) == 0x00001C, "Member 'CharaBase_SetMeshMaterials::Materialindex' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, Timedmaterials) == 0x000020, "Member 'CharaBase_SetMeshMaterials::Timedmaterials' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, _onematerialonly) == 0x000030, "Member 'CharaBase_SetMeshMaterials::_onematerialonly' has a wrong offset!");
static_assert(offsetof(CharaBase_SetMeshMaterials, ReturnValue) == 0x000038, "Member 'CharaBase_SetMeshMaterials::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.SetPhysicalState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SetPhysicalState final
{
public:
	EBodyPhysicalState                            _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetPhysicalState) == 0x000001, "Wrong alignment on CharaBase_SetPhysicalState");
static_assert(sizeof(CharaBase_SetPhysicalState) == 0x000001, "Wrong size on CharaBase_SetPhysicalState");
static_assert(offsetof(CharaBase_SetPhysicalState, _state) == 0x000000, "Member 'CharaBase_SetPhysicalState::_state' has a wrong offset!");

// Function Stigma.CharaBase.SetScanWorld_PostProcess
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_SetScanWorld_PostProcess final
{
public:
	float                                         _blendweight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _radius;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetScanWorld_PostProcess) == 0x000004, "Wrong alignment on CharaBase_SetScanWorld_PostProcess");
static_assert(sizeof(CharaBase_SetScanWorld_PostProcess) == 0x000008, "Wrong size on CharaBase_SetScanWorld_PostProcess");
static_assert(offsetof(CharaBase_SetScanWorld_PostProcess, _blendweight) == 0x000000, "Member 'CharaBase_SetScanWorld_PostProcess::_blendweight' has a wrong offset!");
static_assert(offsetof(CharaBase_SetScanWorld_PostProcess, _radius) == 0x000004, "Member 'CharaBase_SetScanWorld_PostProcess::_radius' has a wrong offset!");

// Function Stigma.CharaBase.Setter_Armor
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_Setter_Armor final
{
public:
	float                                         _new_armor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_Armor) == 0x000004, "Wrong alignment on CharaBase_Setter_Armor");
static_assert(sizeof(CharaBase_Setter_Armor) == 0x000004, "Wrong size on CharaBase_Setter_Armor");
static_assert(offsetof(CharaBase_Setter_Armor, _new_armor) == 0x000000, "Member 'CharaBase_Setter_Armor::_new_armor' has a wrong offset!");

// Function Stigma.CharaBase.Setter_DelayDuration
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_Setter_DelayDuration final
{
public:
	float                                         _duration;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_DelayDuration) == 0x000004, "Wrong alignment on CharaBase_Setter_DelayDuration");
static_assert(sizeof(CharaBase_Setter_DelayDuration) == 0x000004, "Wrong size on CharaBase_Setter_DelayDuration");
static_assert(offsetof(CharaBase_Setter_DelayDuration, _duration) == 0x000000, "Member 'CharaBase_Setter_DelayDuration::_duration' has a wrong offset!");

// Function Stigma.CharaBase.Setter_Gears
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_Setter_Gears final
{
public:
	TArray<struct FGear>                          _new_gears;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_Gears) == 0x000008, "Wrong alignment on CharaBase_Setter_Gears");
static_assert(sizeof(CharaBase_Setter_Gears) == 0x000010, "Wrong size on CharaBase_Setter_Gears");
static_assert(offsetof(CharaBase_Setter_Gears, _new_gears) == 0x000000, "Member 'CharaBase_Setter_Gears::_new_gears' has a wrong offset!");

// Function Stigma.CharaBase.Setter_HoldingProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_Setter_HoldingProp final
{
public:
	class AThrowBase*                             _new_prop;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_HoldingProp) == 0x000008, "Wrong alignment on CharaBase_Setter_HoldingProp");
static_assert(sizeof(CharaBase_Setter_HoldingProp) == 0x000008, "Wrong size on CharaBase_Setter_HoldingProp");
static_assert(offsetof(CharaBase_Setter_HoldingProp, _new_prop) == 0x000000, "Member 'CharaBase_Setter_HoldingProp::_new_prop' has a wrong offset!");

// Function Stigma.CharaBase.Setter_InvincibleMode
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_InvincibleMode final
{
public:
	EInvincibleMode                               _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_InvincibleMode) == 0x000001, "Wrong alignment on CharaBase_Setter_InvincibleMode");
static_assert(sizeof(CharaBase_Setter_InvincibleMode) == 0x000001, "Wrong size on CharaBase_Setter_InvincibleMode");
static_assert(offsetof(CharaBase_Setter_InvincibleMode, _mode) == 0x000000, "Member 'CharaBase_Setter_InvincibleMode::_mode' has a wrong offset!");

// Function Stigma.CharaBase.Setter_IsAntidoteState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_IsAntidoteState final
{
public:
	bool                                          _is_antidote_state;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_IsAntidoteState) == 0x000001, "Wrong alignment on CharaBase_Setter_IsAntidoteState");
static_assert(sizeof(CharaBase_Setter_IsAntidoteState) == 0x000001, "Wrong size on CharaBase_Setter_IsAntidoteState");
static_assert(offsetof(CharaBase_Setter_IsAntidoteState, _is_antidote_state) == 0x000000, "Member 'CharaBase_Setter_IsAntidoteState::_is_antidote_state' has a wrong offset!");

// Function Stigma.CharaBase.Setter_IsBoneBreaked
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_IsBoneBreaked final
{
public:
	bool                                          _is_bone_breaked;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_IsBoneBreaked) == 0x000001, "Wrong alignment on CharaBase_Setter_IsBoneBreaked");
static_assert(sizeof(CharaBase_Setter_IsBoneBreaked) == 0x000001, "Wrong size on CharaBase_Setter_IsBoneBreaked");
static_assert(offsetof(CharaBase_Setter_IsBoneBreaked, _is_bone_breaked) == 0x000000, "Member 'CharaBase_Setter_IsBoneBreaked::_is_bone_breaked' has a wrong offset!");

// Function Stigma.CharaBase.Setter_IsTurnoffSound
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_IsTurnoffSound final
{
public:
	bool                                          _is_turn_off;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_IsTurnoffSound) == 0x000001, "Wrong alignment on CharaBase_Setter_IsTurnoffSound");
static_assert(sizeof(CharaBase_Setter_IsTurnoffSound) == 0x000001, "Wrong size on CharaBase_Setter_IsTurnoffSound");
static_assert(offsetof(CharaBase_Setter_IsTurnoffSound, _is_turn_off) == 0x000000, "Member 'CharaBase_Setter_IsTurnoffSound::_is_turn_off' has a wrong offset!");

// Function Stigma.CharaBase.Setter_LootedGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_Setter_LootedGun final
{
public:
	class AGunBase*                               _new_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_LootedGun) == 0x000008, "Wrong alignment on CharaBase_Setter_LootedGun");
static_assert(sizeof(CharaBase_Setter_LootedGun) == 0x000008, "Wrong size on CharaBase_Setter_LootedGun");
static_assert(offsetof(CharaBase_Setter_LootedGun, _new_gun) == 0x000000, "Member 'CharaBase_Setter_LootedGun::_new_gun' has a wrong offset!");

// Function Stigma.CharaBase.Setter_LowerAction
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_LowerAction final
{
public:
	EBodyLowerAction                              _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_LowerAction) == 0x000001, "Wrong alignment on CharaBase_Setter_LowerAction");
static_assert(sizeof(CharaBase_Setter_LowerAction) == 0x000001, "Wrong size on CharaBase_Setter_LowerAction");
static_assert(offsetof(CharaBase_Setter_LowerAction, _new_action) == 0x000000, "Member 'CharaBase_Setter_LowerAction::_new_action' has a wrong offset!");

// Function Stigma.CharaBase.Setter_LowerState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_LowerState final
{
public:
	EBodyLowerState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_LowerState) == 0x000001, "Wrong alignment on CharaBase_Setter_LowerState");
static_assert(sizeof(CharaBase_Setter_LowerState) == 0x000001, "Wrong size on CharaBase_Setter_LowerState");
static_assert(offsetof(CharaBase_Setter_LowerState, _state) == 0x000000, "Member 'CharaBase_Setter_LowerState::_state' has a wrong offset!");

// Function Stigma.CharaBase.Setter_OwnGun_Left
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_Setter_OwnGun_Left final
{
public:
	class AGunBase*                               _new_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_OwnGun_Left) == 0x000008, "Wrong alignment on CharaBase_Setter_OwnGun_Left");
static_assert(sizeof(CharaBase_Setter_OwnGun_Left) == 0x000008, "Wrong size on CharaBase_Setter_OwnGun_Left");
static_assert(offsetof(CharaBase_Setter_OwnGun_Left, _new_gun) == 0x000000, "Member 'CharaBase_Setter_OwnGun_Left::_new_gun' has a wrong offset!");

// Function Stigma.CharaBase.Setter_OwnGun_Right
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_Setter_OwnGun_Right final
{
public:
	class AGunBase*                               _new_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_OwnGun_Right) == 0x000008, "Wrong alignment on CharaBase_Setter_OwnGun_Right");
static_assert(sizeof(CharaBase_Setter_OwnGun_Right) == 0x000008, "Wrong size on CharaBase_Setter_OwnGun_Right");
static_assert(offsetof(CharaBase_Setter_OwnGun_Right, _new_gun) == 0x000000, "Member 'CharaBase_Setter_OwnGun_Right::_new_gun' has a wrong offset!");

// Function Stigma.CharaBase.Setter_Penalty_LegInjury_Parts
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_Penalty_LegInjury_Parts final
{
public:
	EBodyParts                                    _parts;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_Penalty_LegInjury_Parts) == 0x000001, "Wrong alignment on CharaBase_Setter_Penalty_LegInjury_Parts");
static_assert(sizeof(CharaBase_Setter_Penalty_LegInjury_Parts) == 0x000001, "Wrong size on CharaBase_Setter_Penalty_LegInjury_Parts");
static_assert(offsetof(CharaBase_Setter_Penalty_LegInjury_Parts, _parts) == 0x000000, "Member 'CharaBase_Setter_Penalty_LegInjury_Parts::_parts' has a wrong offset!");

// Function Stigma.CharaBase.Setter_PiercingProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_Setter_PiercingProp final
{
public:
	class APiercingObjectBase*                    _new_prop;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_PiercingProp) == 0x000008, "Wrong alignment on CharaBase_Setter_PiercingProp");
static_assert(sizeof(CharaBase_Setter_PiercingProp) == 0x000008, "Wrong size on CharaBase_Setter_PiercingProp");
static_assert(offsetof(CharaBase_Setter_PiercingProp, _new_prop) == 0x000000, "Member 'CharaBase_Setter_PiercingProp::_new_prop' has a wrong offset!");

// Function Stigma.CharaBase.Setter_ScopeMode
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_ScopeMode final
{
public:
	bool                                          _scope_mode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_ScopeMode) == 0x000001, "Wrong alignment on CharaBase_Setter_ScopeMode");
static_assert(sizeof(CharaBase_Setter_ScopeMode) == 0x000001, "Wrong size on CharaBase_Setter_ScopeMode");
static_assert(offsetof(CharaBase_Setter_ScopeMode, _scope_mode) == 0x000000, "Member 'CharaBase_Setter_ScopeMode::_scope_mode' has a wrong offset!");

// Function Stigma.CharaBase.Setter_StunTypeParam
// 0x0003 (0x0003 - 0x0000)
struct CharaBase_Setter_StunTypeParam final
{
public:
	struct FStunTypeParam                         _param;                                            // 0x0000(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_StunTypeParam) == 0x000001, "Wrong alignment on CharaBase_Setter_StunTypeParam");
static_assert(sizeof(CharaBase_Setter_StunTypeParam) == 0x000003, "Wrong size on CharaBase_Setter_StunTypeParam");
static_assert(offsetof(CharaBase_Setter_StunTypeParam, _param) == 0x000000, "Member 'CharaBase_Setter_StunTypeParam::_param' has a wrong offset!");

// Function Stigma.CharaBase.Setter_UpperState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_Setter_UpperState final
{
public:
	EBodyUpperState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Setter_UpperState) == 0x000001, "Wrong alignment on CharaBase_Setter_UpperState");
static_assert(sizeof(CharaBase_Setter_UpperState) == 0x000001, "Wrong size on CharaBase_Setter_UpperState");
static_assert(offsetof(CharaBase_Setter_UpperState, _state) == 0x000000, "Member 'CharaBase_Setter_UpperState::_state' has a wrong offset!");

// Function Stigma.CharaBase.SetTimedMaterial
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_SetTimedMaterial final
{
public:
	class UMaterialInterface*                     _materialinterface;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _copymaterial;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _onematerialonly;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205C[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _onematerialindex;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _materialinterface_trans;                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bodyonly;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_SetTimedMaterial) == 0x000008, "Wrong alignment on CharaBase_SetTimedMaterial");
static_assert(sizeof(CharaBase_SetTimedMaterial) == 0x000020, "Wrong size on CharaBase_SetTimedMaterial");
static_assert(offsetof(CharaBase_SetTimedMaterial, _materialinterface) == 0x000000, "Member 'CharaBase_SetTimedMaterial::_materialinterface' has a wrong offset!");
static_assert(offsetof(CharaBase_SetTimedMaterial, _copymaterial) == 0x000008, "Member 'CharaBase_SetTimedMaterial::_copymaterial' has a wrong offset!");
static_assert(offsetof(CharaBase_SetTimedMaterial, _onematerialonly) == 0x000009, "Member 'CharaBase_SetTimedMaterial::_onematerialonly' has a wrong offset!");
static_assert(offsetof(CharaBase_SetTimedMaterial, _onematerialindex) == 0x00000C, "Member 'CharaBase_SetTimedMaterial::_onematerialindex' has a wrong offset!");
static_assert(offsetof(CharaBase_SetTimedMaterial, _materialinterface_trans) == 0x000010, "Member 'CharaBase_SetTimedMaterial::_materialinterface_trans' has a wrong offset!");
static_assert(offsetof(CharaBase_SetTimedMaterial, _bodyonly) == 0x000018, "Member 'CharaBase_SetTimedMaterial::_bodyonly' has a wrong offset!");

// Function Stigma.CharaBase.SetTimedMaterialExcludeMaterials
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_SetTimedMaterialExcludeMaterials final
{
public:
	TArray<int32>                                 Excludematerials;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetTimedMaterialExcludeMaterials) == 0x000008, "Wrong alignment on CharaBase_SetTimedMaterialExcludeMaterials");
static_assert(sizeof(CharaBase_SetTimedMaterialExcludeMaterials) == 0x000020, "Wrong size on CharaBase_SetTimedMaterialExcludeMaterials");
static_assert(offsetof(CharaBase_SetTimedMaterialExcludeMaterials, Excludematerials) == 0x000000, "Member 'CharaBase_SetTimedMaterialExcludeMaterials::Excludematerials' has a wrong offset!");
static_assert(offsetof(CharaBase_SetTimedMaterialExcludeMaterials, ReturnValue) == 0x000010, "Member 'CharaBase_SetTimedMaterialExcludeMaterials::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.SetUIMode
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_SetUIMode final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetUIMode) == 0x000001, "Wrong alignment on CharaBase_SetUIMode");
static_assert(sizeof(CharaBase_SetUIMode) == 0x000001, "Wrong size on CharaBase_SetUIMode");
static_assert(offsetof(CharaBase_SetUIMode, _enable) == 0x000000, "Member 'CharaBase_SetUIMode::_enable' has a wrong offset!");

// Function Stigma.CharaBase.SetupCameraConfig
// 0x00C8 (0x00C8 - 0x0000)
struct CharaBase_SetupCameraConfig final
{
public:
	struct FConfig_Camera                         _config_camera;                                    // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _use_zoom_in;                                      // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205E[0x6];                                     // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_SetupCameraConfig) == 0x000008, "Wrong alignment on CharaBase_SetupCameraConfig");
static_assert(sizeof(CharaBase_SetupCameraConfig) == 0x0000C8, "Wrong size on CharaBase_SetupCameraConfig");
static_assert(offsetof(CharaBase_SetupCameraConfig, _config_camera) == 0x000000, "Member 'CharaBase_SetupCameraConfig::_config_camera' has a wrong offset!");
static_assert(offsetof(CharaBase_SetupCameraConfig, _use_zoom_in) == 0x0000C0, "Member 'CharaBase_SetupCameraConfig::_use_zoom_in' has a wrong offset!");
static_assert(offsetof(CharaBase_SetupCameraConfig, ReturnValue) == 0x0000C1, "Member 'CharaBase_SetupCameraConfig::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.SetupCollisionForMate
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_SetupCollisionForMate final
{
public:
	class ACharaBase*                             _mate;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetupCollisionForMate) == 0x000008, "Wrong alignment on CharaBase_SetupCollisionForMate");
static_assert(sizeof(CharaBase_SetupCollisionForMate) == 0x000008, "Wrong size on CharaBase_SetupCollisionForMate");
static_assert(offsetof(CharaBase_SetupCollisionForMate, _mate) == 0x000000, "Member 'CharaBase_SetupCollisionForMate::_mate' has a wrong offset!");

// Function Stigma.CharaBase.SetZoom
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_SetZoom final
{
public:
	bool                                          _is_zoom_in;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _force_zoom;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SetZoom) == 0x000001, "Wrong alignment on CharaBase_SetZoom");
static_assert(sizeof(CharaBase_SetZoom) == 0x000002, "Wrong size on CharaBase_SetZoom");
static_assert(offsetof(CharaBase_SetZoom, _is_zoom_in) == 0x000000, "Member 'CharaBase_SetZoom::_is_zoom_in' has a wrong offset!");
static_assert(offsetof(CharaBase_SetZoom, _force_zoom) == 0x000001, "Member 'CharaBase_SetZoom::_force_zoom' has a wrong offset!");

// Function Stigma.CharaBase.StartActionGraph
// 0x0028 (0x0028 - 0x0000)
struct CharaBase_StartActionGraph final
{
public:
	ECharaAction                                  _idx_ag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _vector;                                           // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2060[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_StartActionGraph) == 0x000008, "Wrong alignment on CharaBase_StartActionGraph");
static_assert(sizeof(CharaBase_StartActionGraph) == 0x000028, "Wrong size on CharaBase_StartActionGraph");
static_assert(offsetof(CharaBase_StartActionGraph, _idx_ag) == 0x000000, "Member 'CharaBase_StartActionGraph::_idx_ag' has a wrong offset!");
static_assert(offsetof(CharaBase_StartActionGraph, _vector) == 0x000008, "Member 'CharaBase_StartActionGraph::_vector' has a wrong offset!");
static_assert(offsetof(CharaBase_StartActionGraph, ReturnValue) == 0x000020, "Member 'CharaBase_StartActionGraph::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.StartCameraDirecting
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_StartCameraDirecting final
{
public:
	struct FCameraDirectingParams                 _params;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_StartCameraDirecting) == 0x000004, "Wrong alignment on CharaBase_StartCameraDirecting");
static_assert(sizeof(CharaBase_StartCameraDirecting) == 0x000020, "Wrong size on CharaBase_StartCameraDirecting");
static_assert(offsetof(CharaBase_StartCameraDirecting, _params) == 0x000000, "Member 'CharaBase_StartCameraDirecting::_params' has a wrong offset!");

// Function Stigma.CharaBase.StartCooltime
// 0x000C (0x000C - 0x0000)
struct CharaBase_StartCooltime final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_StartCooltime) == 0x000004, "Wrong alignment on CharaBase_StartCooltime");
static_assert(sizeof(CharaBase_StartCooltime) == 0x00000C, "Wrong size on CharaBase_StartCooltime");
static_assert(offsetof(CharaBase_StartCooltime, Param_Name) == 0x000000, "Member 'CharaBase_StartCooltime::Param_Name' has a wrong offset!");
static_assert(offsetof(CharaBase_StartCooltime, Duration) == 0x000008, "Member 'CharaBase_StartCooltime::Duration' has a wrong offset!");

// Function Stigma.CharaBase.StartSideView
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_StartSideView final
{
public:
	ESideViewSide                                 _side;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_StartSideView) == 0x000001, "Wrong alignment on CharaBase_StartSideView");
static_assert(sizeof(CharaBase_StartSideView) == 0x000001, "Wrong size on CharaBase_StartSideView");
static_assert(offsetof(CharaBase_StartSideView, _side) == 0x000000, "Member 'CharaBase_StartSideView::_side' has a wrong offset!");

// Function Stigma.CharaBase.Subscribe_OnPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_Subscribe_OnPlayerStateChanged final
{
public:
	TDelegate<void(EChangedPlayerState _reason, class AMatchServicedPlayerState* _ps)> _proc;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Subscribe_OnPlayerStateChanged) == 0x000004, "Wrong alignment on CharaBase_Subscribe_OnPlayerStateChanged");
static_assert(sizeof(CharaBase_Subscribe_OnPlayerStateChanged) == 0x000010, "Wrong size on CharaBase_Subscribe_OnPlayerStateChanged");
static_assert(offsetof(CharaBase_Subscribe_OnPlayerStateChanged, _proc) == 0x000000, "Member 'CharaBase_Subscribe_OnPlayerStateChanged::_proc' has a wrong offset!");

// Function Stigma.CharaBase.SyncRotation
// 0x0030 (0x0030 - 0x0000)
struct CharaBase_SyncRotation final
{
public:
	float                                         _angle;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2061[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _dir;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _ctx;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_SyncRotation) == 0x000008, "Wrong alignment on CharaBase_SyncRotation");
static_assert(sizeof(CharaBase_SyncRotation) == 0x000030, "Wrong size on CharaBase_SyncRotation");
static_assert(offsetof(CharaBase_SyncRotation, _angle) == 0x000000, "Member 'CharaBase_SyncRotation::_angle' has a wrong offset!");
static_assert(offsetof(CharaBase_SyncRotation, _dir) == 0x000008, "Member 'CharaBase_SyncRotation::_dir' has a wrong offset!");
static_assert(offsetof(CharaBase_SyncRotation, _ctx) == 0x000020, "Member 'CharaBase_SyncRotation::_ctx' has a wrong offset!");

// Function Stigma.CharaBase.TryToInteract
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_TryToInteract final
{
public:
	bool                                          _press_key;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2062[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 _target;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_TryToInteract) == 0x000008, "Wrong alignment on CharaBase_TryToInteract");
static_assert(sizeof(CharaBase_TryToInteract) == 0x000010, "Wrong size on CharaBase_TryToInteract");
static_assert(offsetof(CharaBase_TryToInteract, _press_key) == 0x000000, "Member 'CharaBase_TryToInteract::_press_key' has a wrong offset!");
static_assert(offsetof(CharaBase_TryToInteract, _target) == 0x000008, "Member 'CharaBase_TryToInteract::_target' has a wrong offset!");

// Function Stigma.CharaBase.Unsubscribe_OnPlayerStateChanged
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_Unsubscribe_OnPlayerStateChanged final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Unsubscribe_OnPlayerStateChanged) == 0x000008, "Wrong alignment on CharaBase_Unsubscribe_OnPlayerStateChanged");
static_assert(sizeof(CharaBase_Unsubscribe_OnPlayerStateChanged) == 0x000008, "Wrong size on CharaBase_Unsubscribe_OnPlayerStateChanged");
static_assert(offsetof(CharaBase_Unsubscribe_OnPlayerStateChanged, _obj) == 0x000000, "Member 'CharaBase_Unsubscribe_OnPlayerStateChanged::_obj' has a wrong offset!");

// Function Stigma.CharaBase.UpdateOutlineColor
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_UpdateOutlineColor final
{
public:
	bool                                          _force_update;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_UpdateOutlineColor) == 0x000001, "Wrong alignment on CharaBase_UpdateOutlineColor");
static_assert(sizeof(CharaBase_UpdateOutlineColor) == 0x000001, "Wrong size on CharaBase_UpdateOutlineColor");
static_assert(offsetof(CharaBase_UpdateOutlineColor, _force_update) == 0x000000, "Member 'CharaBase_UpdateOutlineColor::_force_update' has a wrong offset!");

// Function Stigma.CharaBase.CalcBodyDeviation
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_CalcBodyDeviation final
{
public:
	struct FBodyDeviation                         ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CalcBodyDeviation) == 0x000004, "Wrong alignment on CharaBase_CalcBodyDeviation");
static_assert(sizeof(CharaBase_CalcBodyDeviation) == 0x000020, "Wrong size on CharaBase_CalcBodyDeviation");
static_assert(offsetof(CharaBase_CalcBodyDeviation, ReturnValue) == 0x000000, "Member 'CharaBase_CalcBodyDeviation::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanChangeLowerAction
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_CanChangeLowerAction final
{
public:
	EBodyLowerAction                              _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CanChangeLowerAction) == 0x000001, "Wrong alignment on CharaBase_CanChangeLowerAction");
static_assert(sizeof(CharaBase_CanChangeLowerAction) == 0x000002, "Wrong size on CharaBase_CanChangeLowerAction");
static_assert(offsetof(CharaBase_CanChangeLowerAction, _new_action) == 0x000000, "Member 'CharaBase_CanChangeLowerAction::_new_action' has a wrong offset!");
static_assert(offsetof(CharaBase_CanChangeLowerAction, ReturnValue) == 0x000001, "Member 'CharaBase_CanChangeLowerAction::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanChangeLowerState
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_CanChangeLowerState final
{
public:
	EBodyLowerState                               _new_state;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CanChangeLowerState) == 0x000001, "Wrong alignment on CharaBase_CanChangeLowerState");
static_assert(sizeof(CharaBase_CanChangeLowerState) == 0x000002, "Wrong size on CharaBase_CanChangeLowerState");
static_assert(offsetof(CharaBase_CanChangeLowerState, _new_state) == 0x000000, "Member 'CharaBase_CanChangeLowerState::_new_state' has a wrong offset!");
static_assert(offsetof(CharaBase_CanChangeLowerState, ReturnValue) == 0x000001, "Member 'CharaBase_CanChangeLowerState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanChangeUpperState
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_CanChangeUpperState final
{
public:
	EBodyUpperState                               _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CanChangeUpperState) == 0x000001, "Wrong alignment on CharaBase_CanChangeUpperState");
static_assert(sizeof(CharaBase_CanChangeUpperState) == 0x000002, "Wrong size on CharaBase_CanChangeUpperState");
static_assert(offsetof(CharaBase_CanChangeUpperState, _state) == 0x000000, "Member 'CharaBase_CanChangeUpperState::_state' has a wrong offset!");
static_assert(offsetof(CharaBase_CanChangeUpperState, ReturnValue) == 0x000001, "Member 'CharaBase_CanChangeUpperState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanInteract
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_CanInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CanInteract) == 0x000001, "Wrong alignment on CharaBase_CanInteract");
static_assert(sizeof(CharaBase_CanInteract) == 0x000001, "Wrong size on CharaBase_CanInteract");
static_assert(offsetof(CharaBase_CanInteract, ReturnValue) == 0x000000, "Member 'CharaBase_CanInteract::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanStandUp
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_CanStandUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CanStandUp) == 0x000001, "Wrong alignment on CharaBase_CanStandUp");
static_assert(sizeof(CharaBase_CanStandUp) == 0x000001, "Wrong size on CharaBase_CanStandUp");
static_assert(offsetof(CharaBase_CanStandUp, ReturnValue) == 0x000000, "Member 'CharaBase_CanStandUp::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.CanTurn
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_CanTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_CanTurn) == 0x000001, "Wrong alignment on CharaBase_CanTurn");
static_assert(sizeof(CharaBase_CanTurn) == 0x000001, "Wrong size on CharaBase_CanTurn");
static_assert(offsetof(CharaBase_CanTurn, ReturnValue) == 0x000000, "Member 'CharaBase_CanTurn::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetAutoStandUp
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetAutoStandUp final
{
public:
	EAutoStandUp                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetAutoStandUp) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetAutoStandUp");
static_assert(sizeof(CharaBase_DEBUG_GetAutoStandUp) == 0x000001, "Wrong size on CharaBase_DEBUG_GetAutoStandUp");
static_assert(offsetof(CharaBase_DEBUG_GetAutoStandUp, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetAutoStandUp::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetCameraDistance
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_DEBUG_GetCameraDistance final
{
public:
	bool                                          _for_1pv;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2063[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetCameraDistance) == 0x000004, "Wrong alignment on CharaBase_DEBUG_GetCameraDistance");
static_assert(sizeof(CharaBase_DEBUG_GetCameraDistance) == 0x000008, "Wrong size on CharaBase_DEBUG_GetCameraDistance");
static_assert(offsetof(CharaBase_DEBUG_GetCameraDistance, _for_1pv) == 0x000000, "Member 'CharaBase_DEBUG_GetCameraDistance::_for_1pv' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_GetCameraDistance, ReturnValue) == 0x000004, "Member 'CharaBase_DEBUG_GetCameraDistance::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetCameraOffset
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_DEBUG_GetCameraOffset final
{
public:
	bool                                          _for_target;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _for_1pv;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2064[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetCameraOffset) == 0x000008, "Wrong alignment on CharaBase_DEBUG_GetCameraOffset");
static_assert(sizeof(CharaBase_DEBUG_GetCameraOffset) == 0x000020, "Wrong size on CharaBase_DEBUG_GetCameraOffset");
static_assert(offsetof(CharaBase_DEBUG_GetCameraOffset, _for_target) == 0x000000, "Member 'CharaBase_DEBUG_GetCameraOffset::_for_target' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_GetCameraOffset, _for_1pv) == 0x000001, "Member 'CharaBase_DEBUG_GetCameraOffset::_for_1pv' has a wrong offset!");
static_assert(offsetof(CharaBase_DEBUG_GetCameraOffset, ReturnValue) == 0x000008, "Member 'CharaBase_DEBUG_GetCameraOffset::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetNoCPPenalty
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetNoCPPenalty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetNoCPPenalty) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetNoCPPenalty");
static_assert(sizeof(CharaBase_DEBUG_GetNoCPPenalty) == 0x000001, "Wrong size on CharaBase_DEBUG_GetNoCPPenalty");
static_assert(offsetof(CharaBase_DEBUG_GetNoCPPenalty, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetNoCPPenalty::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetPeriodicRepeatDuration
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_DEBUG_GetPeriodicRepeatDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetPeriodicRepeatDuration) == 0x000004, "Wrong alignment on CharaBase_DEBUG_GetPeriodicRepeatDuration");
static_assert(sizeof(CharaBase_DEBUG_GetPeriodicRepeatDuration) == 0x000004, "Wrong size on CharaBase_DEBUG_GetPeriodicRepeatDuration");
static_assert(offsetof(CharaBase_DEBUG_GetPeriodicRepeatDuration, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetPeriodicRepeatDuration::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetPeriodicRepeatType
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetPeriodicRepeatType final
{
public:
	EPeriodicRepeatType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetPeriodicRepeatType) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetPeriodicRepeatType");
static_assert(sizeof(CharaBase_DEBUG_GetPeriodicRepeatType) == 0x000001, "Wrong size on CharaBase_DEBUG_GetPeriodicRepeatType");
static_assert(offsetof(CharaBase_DEBUG_GetPeriodicRepeatType, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetPeriodicRepeatType::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetRepeatAction
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetRepeatAction final
{
public:
	ECharaAction                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetRepeatAction) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetRepeatAction");
static_assert(sizeof(CharaBase_DEBUG_GetRepeatAction) == 0x000001, "Wrong size on CharaBase_DEBUG_GetRepeatAction");
static_assert(offsetof(CharaBase_DEBUG_GetRepeatAction, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetRepeatAction::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetShowCharaState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetShowCharaState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetShowCharaState) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetShowCharaState");
static_assert(sizeof(CharaBase_DEBUG_GetShowCharaState) == 0x000001, "Wrong size on CharaBase_DEBUG_GetShowCharaState");
static_assert(offsetof(CharaBase_DEBUG_GetShowCharaState, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetShowCharaState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetShowCollisionTest
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetShowCollisionTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetShowCollisionTest) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetShowCollisionTest");
static_assert(sizeof(CharaBase_DEBUG_GetShowCollisionTest) == 0x000001, "Wrong size on CharaBase_DEBUG_GetShowCollisionTest");
static_assert(offsetof(CharaBase_DEBUG_GetShowCollisionTest, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetShowCollisionTest::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetShowDamage
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetShowDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetShowDamage) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetShowDamage");
static_assert(sizeof(CharaBase_DEBUG_GetShowDamage) == 0x000001, "Wrong size on CharaBase_DEBUG_GetShowDamage");
static_assert(offsetof(CharaBase_DEBUG_GetShowDamage, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetShowDamage::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetShowPlayingHitFX
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetShowPlayingHitFX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetShowPlayingHitFX) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetShowPlayingHitFX");
static_assert(sizeof(CharaBase_DEBUG_GetShowPlayingHitFX) == 0x000001, "Wrong size on CharaBase_DEBUG_GetShowPlayingHitFX");
static_assert(offsetof(CharaBase_DEBUG_GetShowPlayingHitFX, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetShowPlayingHitFX::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_GetShowState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_GetShowState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_GetShowState) == 0x000001, "Wrong alignment on CharaBase_DEBUG_GetShowState");
static_assert(sizeof(CharaBase_DEBUG_GetShowState) == 0x000001, "Wrong size on CharaBase_DEBUG_GetShowState");
static_assert(offsetof(CharaBase_DEBUG_GetShowState, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_GetShowState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_IsActivatedInfinitedStock
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_IsActivatedInfinitedStock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_IsActivatedInfinitedStock) == 0x000001, "Wrong alignment on CharaBase_DEBUG_IsActivatedInfinitedStock");
static_assert(sizeof(CharaBase_DEBUG_IsActivatedInfinitedStock) == 0x000001, "Wrong size on CharaBase_DEBUG_IsActivatedInfinitedStock");
static_assert(offsetof(CharaBase_DEBUG_IsActivatedInfinitedStock, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_IsActivatedInfinitedStock::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_IsInvincible
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_IsInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_IsInvincible) == 0x000001, "Wrong alignment on CharaBase_DEBUG_IsInvincible");
static_assert(sizeof(CharaBase_DEBUG_IsInvincible) == 0x000001, "Wrong size on CharaBase_DEBUG_IsInvincible");
static_assert(offsetof(CharaBase_DEBUG_IsInvincible, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_IsInvincible::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.DEBUG_IsStaticCamera
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_DEBUG_IsStaticCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_DEBUG_IsStaticCamera) == 0x000001, "Wrong alignment on CharaBase_DEBUG_IsStaticCamera");
static_assert(sizeof(CharaBase_DEBUG_IsStaticCamera) == 0x000001, "Wrong size on CharaBase_DEBUG_IsStaticCamera");
static_assert(offsetof(CharaBase_DEBUG_IsStaticCamera, ReturnValue) == 0x000000, "Member 'CharaBase_DEBUG_IsStaticCamera::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.FindActionGraphNode
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_FindActionGraphNode final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2065[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class UActionGraphNode*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_FindActionGraphNode) == 0x000008, "Wrong alignment on CharaBase_FindActionGraphNode");
static_assert(sizeof(CharaBase_FindActionGraphNode) == 0x000010, "Wrong size on CharaBase_FindActionGraphNode");
static_assert(offsetof(CharaBase_FindActionGraphNode, _op_id) == 0x000000, "Member 'CharaBase_FindActionGraphNode::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_FindActionGraphNode, ReturnValue) == 0x000008, "Member 'CharaBase_FindActionGraphNode::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GameState
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GameState final
{
public:
	class ABattleGameStateBase*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GameState) == 0x000008, "Wrong alignment on CharaBase_GameState");
static_assert(sizeof(CharaBase_GameState) == 0x000008, "Wrong size on CharaBase_GameState");
static_assert(offsetof(CharaBase_GameState, ReturnValue) == 0x000000, "Member 'CharaBase_GameState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.Get1PVMeshOffset
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_Get1PVMeshOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_Get1PVMeshOffset) == 0x000008, "Wrong alignment on CharaBase_Get1PVMeshOffset");
static_assert(sizeof(CharaBase_Get1PVMeshOffset) == 0x000018, "Wrong size on CharaBase_Get1PVMeshOffset");
static_assert(offsetof(CharaBase_Get1PVMeshOffset, ReturnValue) == 0x000000, "Member 'CharaBase_Get1PVMeshOffset::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetAbnormals
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetAbnormals final
{
public:
	struct FAbnormals                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetAbnormals) == 0x000001, "Wrong alignment on CharaBase_GetAbnormals");
static_assert(sizeof(CharaBase_GetAbnormals) == 0x000001, "Wrong size on CharaBase_GetAbnormals");
static_assert(offsetof(CharaBase_GetAbnormals, ReturnValue) == 0x000000, "Member 'CharaBase_GetAbnormals::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetActionGraph
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetActionGraph final
{
public:
	ECharaAction                                  _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2066[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UActionGraph*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetActionGraph) == 0x000008, "Wrong alignment on CharaBase_GetActionGraph");
static_assert(sizeof(CharaBase_GetActionGraph) == 0x000010, "Wrong size on CharaBase_GetActionGraph");
static_assert(offsetof(CharaBase_GetActionGraph, _slot) == 0x000000, "Member 'CharaBase_GetActionGraph::_slot' has a wrong offset!");
static_assert(offsetof(CharaBase_GetActionGraph, ReturnValue) == 0x000008, "Member 'CharaBase_GetActionGraph::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetActionGraphID
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetActionGraphID final
{
public:
	ECharaAction                                  _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2067[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FActionGraphID                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetActionGraphID) == 0x000008, "Wrong alignment on CharaBase_GetActionGraphID");
static_assert(sizeof(CharaBase_GetActionGraphID) == 0x000018, "Wrong size on CharaBase_GetActionGraphID");
static_assert(offsetof(CharaBase_GetActionGraphID, _slot) == 0x000000, "Member 'CharaBase_GetActionGraphID::_slot' has a wrong offset!");
static_assert(offsetof(CharaBase_GetActionGraphID, ReturnValue) == 0x000008, "Member 'CharaBase_GetActionGraphID::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetActionMate
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetActionMate final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetActionMate) == 0x000008, "Wrong alignment on CharaBase_GetActionMate");
static_assert(sizeof(CharaBase_GetActionMate) == 0x000008, "Wrong size on CharaBase_GetActionMate");
static_assert(offsetof(CharaBase_GetActionMate, ReturnValue) == 0x000000, "Member 'CharaBase_GetActionMate::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetActivationInfo_ActionGraph
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetActivationInfo_ActionGraph final
{
public:
	ECharaAction                                  _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2068[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FActionGraph_ActivationInfo            ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetActivationInfo_ActionGraph) == 0x000004, "Wrong alignment on CharaBase_GetActivationInfo_ActionGraph");
static_assert(sizeof(CharaBase_GetActivationInfo_ActionGraph) == 0x000008, "Wrong size on CharaBase_GetActivationInfo_ActionGraph");
static_assert(offsetof(CharaBase_GetActivationInfo_ActionGraph, _slot) == 0x000000, "Member 'CharaBase_GetActivationInfo_ActionGraph::_slot' has a wrong offset!");
static_assert(offsetof(CharaBase_GetActivationInfo_ActionGraph, ReturnValue) == 0x000004, "Member 'CharaBase_GetActivationInfo_ActionGraph::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetAimStartPoint
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetAimStartPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetAimStartPoint) == 0x000008, "Wrong alignment on CharaBase_GetAimStartPoint");
static_assert(sizeof(CharaBase_GetAimStartPoint) == 0x000018, "Wrong size on CharaBase_GetAimStartPoint");
static_assert(offsetof(CharaBase_GetAimStartPoint, ReturnValue) == 0x000000, "Member 'CharaBase_GetAimStartPoint::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetAllAbnormals
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetAllAbnormals final
{
public:
	TArray<EAbnormal>                             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetAllAbnormals) == 0x000008, "Wrong alignment on CharaBase_GetAllAbnormals");
static_assert(sizeof(CharaBase_GetAllAbnormals) == 0x000010, "Wrong size on CharaBase_GetAllAbnormals");
static_assert(offsetof(CharaBase_GetAllAbnormals, ReturnValue) == 0x000000, "Member 'CharaBase_GetAllAbnormals::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetAnimInst
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetAnimInst final
{
public:
	class USpecterAnimInstance*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetAnimInst) == 0x000008, "Wrong alignment on CharaBase_GetAnimInst");
static_assert(sizeof(CharaBase_GetAnimInst) == 0x000008, "Wrong size on CharaBase_GetAnimInst");
static_assert(offsetof(CharaBase_GetAnimInst, ReturnValue) == 0x000000, "Member 'CharaBase_GetAnimInst::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetArmor
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetArmor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetArmor) == 0x000004, "Wrong alignment on CharaBase_GetArmor");
static_assert(sizeof(CharaBase_GetArmor) == 0x000004, "Wrong size on CharaBase_GetArmor");
static_assert(offsetof(CharaBase_GetArmor, ReturnValue) == 0x000000, "Member 'CharaBase_GetArmor::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetArmor_PriceIncrease
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetArmor_PriceIncrease final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetArmor_PriceIncrease) == 0x000004, "Wrong alignment on CharaBase_GetArmor_PriceIncrease");
static_assert(sizeof(CharaBase_GetArmor_PriceIncrease) == 0x000004, "Wrong size on CharaBase_GetArmor_PriceIncrease");
static_assert(offsetof(CharaBase_GetArmor_PriceIncrease, ReturnValue) == 0x000000, "Member 'CharaBase_GetArmor_PriceIncrease::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetArmorOriginPrice
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetArmorOriginPrice final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetArmorOriginPrice) == 0x000004, "Wrong alignment on CharaBase_GetArmorOriginPrice");
static_assert(sizeof(CharaBase_GetArmorOriginPrice) == 0x000004, "Wrong size on CharaBase_GetArmorOriginPrice");
static_assert(offsetof(CharaBase_GetArmorOriginPrice, ReturnValue) == 0x000000, "Member 'CharaBase_GetArmorOriginPrice::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetArmorPrice
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetArmorPrice final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetArmorPrice) == 0x000004, "Wrong alignment on CharaBase_GetArmorPrice");
static_assert(sizeof(CharaBase_GetArmorPrice) == 0x000004, "Wrong size on CharaBase_GetArmorPrice");
static_assert(offsetof(CharaBase_GetArmorPrice, ReturnValue) == 0x000000, "Member 'CharaBase_GetArmorPrice::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetAvailableActiveSkill
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetAvailableActiveSkill final
{
public:
	class ACharaBase*                             _enemy;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaAction                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2069[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetAvailableActiveSkill) == 0x000008, "Wrong alignment on CharaBase_GetAvailableActiveSkill");
static_assert(sizeof(CharaBase_GetAvailableActiveSkill) == 0x000010, "Wrong size on CharaBase_GetAvailableActiveSkill");
static_assert(offsetof(CharaBase_GetAvailableActiveSkill, _enemy) == 0x000000, "Member 'CharaBase_GetAvailableActiveSkill::_enemy' has a wrong offset!");
static_assert(offsetof(CharaBase_GetAvailableActiveSkill, ReturnValue) == 0x000008, "Member 'CharaBase_GetAvailableActiveSkill::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBodyDeviation
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetBodyDeviation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetBodyDeviation) == 0x000004, "Wrong alignment on CharaBase_GetBodyDeviation");
static_assert(sizeof(CharaBase_GetBodyDeviation) == 0x000004, "Wrong size on CharaBase_GetBodyDeviation");
static_assert(offsetof(CharaBase_GetBodyDeviation, ReturnValue) == 0x000000, "Member 'CharaBase_GetBodyDeviation::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBodyItemID
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetBodyItemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetBodyItemID) == 0x000008, "Wrong alignment on CharaBase_GetBodyItemID");
static_assert(sizeof(CharaBase_GetBodyItemID) == 0x000010, "Wrong size on CharaBase_GetBodyItemID");
static_assert(offsetof(CharaBase_GetBodyItemID, ReturnValue) == 0x000000, "Member 'CharaBase_GetBodyItemID::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBone
// 0x000C (0x000C - 0x0000)
struct CharaBase_GetBone final
{
public:
	class FName                                   _bone_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetBone) == 0x000004, "Wrong alignment on CharaBase_GetBone");
static_assert(sizeof(CharaBase_GetBone) == 0x00000C, "Wrong size on CharaBase_GetBone");
static_assert(offsetof(CharaBase_GetBone, _bone_name) == 0x000000, "Member 'CharaBase_GetBone::_bone_name' has a wrong offset!");
static_assert(offsetof(CharaBase_GetBone, ReturnValue) == 0x000008, "Member 'CharaBase_GetBone::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBoneName
// 0x000C (0x000C - 0x0000)
struct CharaBase_GetBoneName final
{
public:
	EBones                                        _bones;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetBoneName) == 0x000004, "Wrong alignment on CharaBase_GetBoneName");
static_assert(sizeof(CharaBase_GetBoneName) == 0x00000C, "Wrong size on CharaBase_GetBoneName");
static_assert(offsetof(CharaBase_GetBoneName, _bones) == 0x000000, "Member 'CharaBase_GetBoneName::_bones' has a wrong offset!");
static_assert(offsetof(CharaBase_GetBoneName, ReturnValue) == 0x000004, "Member 'CharaBase_GetBoneName::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBoosterCooltimeProgress
// 0x000C (0x000C - 0x0000)
struct CharaBase_GetBoosterCooltimeProgress final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _excluding_active_time;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetBoosterCooltimeProgress) == 0x000004, "Wrong alignment on CharaBase_GetBoosterCooltimeProgress");
static_assert(sizeof(CharaBase_GetBoosterCooltimeProgress) == 0x00000C, "Wrong size on CharaBase_GetBoosterCooltimeProgress");
static_assert(offsetof(CharaBase_GetBoosterCooltimeProgress, _slot_zidx) == 0x000000, "Member 'CharaBase_GetBoosterCooltimeProgress::_slot_zidx' has a wrong offset!");
static_assert(offsetof(CharaBase_GetBoosterCooltimeProgress, _excluding_active_time) == 0x000004, "Member 'CharaBase_GetBoosterCooltimeProgress::_excluding_active_time' has a wrong offset!");
static_assert(offsetof(CharaBase_GetBoosterCooltimeProgress, ReturnValue) == 0x000008, "Member 'CharaBase_GetBoosterCooltimeProgress::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBoosterID
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetBoosterID final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Booster                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetBoosterID) == 0x000008, "Wrong alignment on CharaBase_GetBoosterID");
static_assert(sizeof(CharaBase_GetBoosterID) == 0x000018, "Wrong size on CharaBase_GetBoosterID");
static_assert(offsetof(CharaBase_GetBoosterID, _slot_zidx) == 0x000000, "Member 'CharaBase_GetBoosterID::_slot_zidx' has a wrong offset!");
static_assert(offsetof(CharaBase_GetBoosterID, ReturnValue) == 0x000008, "Member 'CharaBase_GetBoosterID::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetBoundKeyForSkill
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_GetBoundKeyForSkill final
{
public:
	ECharaAction                                  _action;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKeyMapping                            ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetBoundKeyForSkill) == 0x000008, "Wrong alignment on CharaBase_GetBoundKeyForSkill");
static_assert(sizeof(CharaBase_GetBoundKeyForSkill) == 0x000038, "Wrong size on CharaBase_GetBoundKeyForSkill");
static_assert(offsetof(CharaBase_GetBoundKeyForSkill, _action) == 0x000000, "Member 'CharaBase_GetBoundKeyForSkill::_action' has a wrong offset!");
static_assert(offsetof(CharaBase_GetBoundKeyForSkill, ReturnValue) == 0x000008, "Member 'CharaBase_GetBoundKeyForSkill::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCalculatedMaxHP
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetCalculatedMaxHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCalculatedMaxHP) == 0x000004, "Wrong alignment on CharaBase_GetCalculatedMaxHP");
static_assert(sizeof(CharaBase_GetCalculatedMaxHP) == 0x000004, "Wrong size on CharaBase_GetCalculatedMaxHP");
static_assert(offsetof(CharaBase_GetCalculatedMaxHP, ReturnValue) == 0x000000, "Member 'CharaBase_GetCalculatedMaxHP::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCamera) == 0x000008, "Wrong alignment on CharaBase_GetCamera");
static_assert(sizeof(CharaBase_GetCamera) == 0x000008, "Wrong size on CharaBase_GetCamera");
static_assert(offsetof(CharaBase_GetCamera, ReturnValue) == 0x000000, "Member 'CharaBase_GetCamera::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCameraBoom
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetCameraBoom final
{
public:
	class UCameraBoomComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCameraBoom) == 0x000008, "Wrong alignment on CharaBase_GetCameraBoom");
static_assert(sizeof(CharaBase_GetCameraBoom) == 0x000008, "Wrong size on CharaBase_GetCameraBoom");
static_assert(offsetof(CharaBase_GetCameraBoom, ReturnValue) == 0x000000, "Member 'CharaBase_GetCameraBoom::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig
// 0x09E0 (0x09E0 - 0x0000)
struct CharaBase_GetConfig final
{
public:
	struct FCharacterDefine                       ReturnValue;                                       // 0x0000(0x09E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig) == 0x000008, "Wrong alignment on CharaBase_GetConfig");
static_assert(sizeof(CharaBase_GetConfig) == 0x0009E0, "Wrong size on CharaBase_GetConfig");
static_assert(offsetof(CharaBase_GetConfig, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_Armor
// 0x01A8 (0x01A8 - 0x0000)
struct CharaBase_GetConfig_Armor final
{
public:
	struct FConfig_Armor                          ReturnValue;                                       // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_Armor) == 0x000008, "Wrong alignment on CharaBase_GetConfig_Armor");
static_assert(sizeof(CharaBase_GetConfig_Armor) == 0x0001A8, "Wrong size on CharaBase_GetConfig_Armor");
static_assert(offsetof(CharaBase_GetConfig_Armor, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_Armor::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_Armor_MaxArmor
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetConfig_Armor_MaxArmor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_Armor_MaxArmor) == 0x000004, "Wrong alignment on CharaBase_GetConfig_Armor_MaxArmor");
static_assert(sizeof(CharaBase_GetConfig_Armor_MaxArmor) == 0x000004, "Wrong size on CharaBase_GetConfig_Armor_MaxArmor");
static_assert(offsetof(CharaBase_GetConfig_Armor_MaxArmor, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_Armor_MaxArmor::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_BaseDamage_Fist
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetConfig_BaseDamage_Fist final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_BaseDamage_Fist) == 0x000004, "Wrong alignment on CharaBase_GetConfig_BaseDamage_Fist");
static_assert(sizeof(CharaBase_GetConfig_BaseDamage_Fist) == 0x000004, "Wrong size on CharaBase_GetConfig_BaseDamage_Fist");
static_assert(offsetof(CharaBase_GetConfig_BaseDamage_Fist, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_BaseDamage_Fist::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_BaseDamage_Foot
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetConfig_BaseDamage_Foot final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_BaseDamage_Foot) == 0x000004, "Wrong alignment on CharaBase_GetConfig_BaseDamage_Foot");
static_assert(sizeof(CharaBase_GetConfig_BaseDamage_Foot) == 0x000004, "Wrong size on CharaBase_GetConfig_BaseDamage_Foot");
static_assert(offsetof(CharaBase_GetConfig_BaseDamage_Foot, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_BaseDamage_Foot::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_Camera
// 0x00C0 (0x00C0 - 0x0000)
struct CharaBase_GetConfig_Camera final
{
public:
	struct FConfig_Camera                         ReturnValue;                                       // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_Camera) == 0x000008, "Wrong alignment on CharaBase_GetConfig_Camera");
static_assert(sizeof(CharaBase_GetConfig_Camera) == 0x0000C0, "Wrong size on CharaBase_GetConfig_Camera");
static_assert(offsetof(CharaBase_GetConfig_Camera, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_Camera::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_FX
// 0x0050 (0x0050 - 0x0000)
struct CharaBase_GetConfig_FX final
{
public:
	struct FConfig_CharaFX                        ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_FX) == 0x000008, "Wrong alignment on CharaBase_GetConfig_FX");
static_assert(sizeof(CharaBase_GetConfig_FX) == 0x000050, "Wrong size on CharaBase_GetConfig_FX");
static_assert(offsetof(CharaBase_GetConfig_FX, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_FX::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_MaxHP
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetConfig_MaxHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_MaxHP) == 0x000004, "Wrong alignment on CharaBase_GetConfig_MaxHP");
static_assert(sizeof(CharaBase_GetConfig_MaxHP) == 0x000004, "Wrong size on CharaBase_GetConfig_MaxHP");
static_assert(offsetof(CharaBase_GetConfig_MaxHP, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_MaxHP::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_Penalty_LegInjury_Duration
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetConfig_Penalty_LegInjury_Duration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_Penalty_LegInjury_Duration) == 0x000004, "Wrong alignment on CharaBase_GetConfig_Penalty_LegInjury_Duration");
static_assert(sizeof(CharaBase_GetConfig_Penalty_LegInjury_Duration) == 0x000004, "Wrong size on CharaBase_GetConfig_Penalty_LegInjury_Duration");
static_assert(offsetof(CharaBase_GetConfig_Penalty_LegInjury_Duration, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_Penalty_LegInjury_Duration::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_Penalty_LegInjury_SpeedRate
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetConfig_Penalty_LegInjury_SpeedRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_Penalty_LegInjury_SpeedRate) == 0x000004, "Wrong alignment on CharaBase_GetConfig_Penalty_LegInjury_SpeedRate");
static_assert(sizeof(CharaBase_GetConfig_Penalty_LegInjury_SpeedRate) == 0x000004, "Wrong size on CharaBase_GetConfig_Penalty_LegInjury_SpeedRate");
static_assert(offsetof(CharaBase_GetConfig_Penalty_LegInjury_SpeedRate, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_Penalty_LegInjury_SpeedRate::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetConfig_Sound
// 0x00A0 (0x00A0 - 0x0000)
struct CharaBase_GetConfig_Sound final
{
public:
	struct FConfig_CharaSound                     ReturnValue;                                       // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetConfig_Sound) == 0x000008, "Wrong alignment on CharaBase_GetConfig_Sound");
static_assert(sizeof(CharaBase_GetConfig_Sound) == 0x0000A0, "Wrong size on CharaBase_GetConfig_Sound");
static_assert(offsetof(CharaBase_GetConfig_Sound, ReturnValue) == 0x000000, "Member 'CharaBase_GetConfig_Sound::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetControlPower
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetControlPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetControlPower) == 0x000004, "Wrong alignment on CharaBase_GetControlPower");
static_assert(sizeof(CharaBase_GetControlPower) == 0x000004, "Wrong size on CharaBase_GetControlPower");
static_assert(offsetof(CharaBase_GetControlPower, ReturnValue) == 0x000000, "Member 'CharaBase_GetControlPower::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetControlPowerFactor
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetControlPowerFactor final
{
public:
	const class AGunBase*                         _gun;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206E[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetControlPowerFactor) == 0x000008, "Wrong alignment on CharaBase_GetControlPowerFactor");
static_assert(sizeof(CharaBase_GetControlPowerFactor) == 0x000010, "Wrong size on CharaBase_GetControlPowerFactor");
static_assert(offsetof(CharaBase_GetControlPowerFactor, _gun) == 0x000000, "Member 'CharaBase_GetControlPowerFactor::_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetControlPowerFactor, ReturnValue) == 0x000008, "Member 'CharaBase_GetControlPowerFactor::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetControlPowerGap
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetControlPowerGap final
{
public:
	bool                                          _is_main_hand_gun;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetControlPowerGap) == 0x000004, "Wrong alignment on CharaBase_GetControlPowerGap");
static_assert(sizeof(CharaBase_GetControlPowerGap) == 0x000008, "Wrong size on CharaBase_GetControlPowerGap");
static_assert(offsetof(CharaBase_GetControlPowerGap, _is_main_hand_gun) == 0x000000, "Member 'CharaBase_GetControlPowerGap::_is_main_hand_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetControlPowerGap, ReturnValue) == 0x000004, "Member 'CharaBase_GetControlPowerGap::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCurrentActionGraph
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetCurrentActionGraph final
{
public:
	class UActionGraph*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCurrentActionGraph) == 0x000008, "Wrong alignment on CharaBase_GetCurrentActionGraph");
static_assert(sizeof(CharaBase_GetCurrentActionGraph) == 0x000008, "Wrong size on CharaBase_GetCurrentActionGraph");
static_assert(offsetof(CharaBase_GetCurrentActionGraph, ReturnValue) == 0x000000, "Member 'CharaBase_GetCurrentActionGraph::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCurrentArmor_AllGears
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetCurrentArmor_AllGears final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCurrentArmor_AllGears) == 0x000004, "Wrong alignment on CharaBase_GetCurrentArmor_AllGears");
static_assert(sizeof(CharaBase_GetCurrentArmor_AllGears) == 0x000004, "Wrong size on CharaBase_GetCurrentArmor_AllGears");
static_assert(offsetof(CharaBase_GetCurrentArmor_AllGears, ReturnValue) == 0x000000, "Member 'CharaBase_GetCurrentArmor_AllGears::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCurrentAverageArmor
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetCurrentAverageArmor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCurrentAverageArmor) == 0x000004, "Wrong alignment on CharaBase_GetCurrentAverageArmor");
static_assert(sizeof(CharaBase_GetCurrentAverageArmor) == 0x000004, "Wrong size on CharaBase_GetCurrentAverageArmor");
static_assert(offsetof(CharaBase_GetCurrentAverageArmor, ReturnValue) == 0x000000, "Member 'CharaBase_GetCurrentAverageArmor::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetCurrentGunnerMode
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetCurrentGunnerMode final
{
public:
	EGunnerType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetCurrentGunnerMode) == 0x000001, "Wrong alignment on CharaBase_GetCurrentGunnerMode");
static_assert(sizeof(CharaBase_GetCurrentGunnerMode) == 0x000001, "Wrong size on CharaBase_GetCurrentGunnerMode");
static_assert(offsetof(CharaBase_GetCurrentGunnerMode, ReturnValue) == 0x000000, "Member 'CharaBase_GetCurrentGunnerMode::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetExclamationComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetExclamationComponent final
{
public:
	class UMaterialBillboardComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetExclamationComponent) == 0x000008, "Wrong alignment on CharaBase_GetExclamationComponent");
static_assert(sizeof(CharaBase_GetExclamationComponent) == 0x000008, "Wrong size on CharaBase_GetExclamationComponent");
static_assert(offsetof(CharaBase_GetExclamationComponent, ReturnValue) == 0x000000, "Member 'CharaBase_GetExclamationComponent::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetFireRecoil
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetFireRecoil final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetFireRecoil) == 0x000008, "Wrong alignment on CharaBase_GetFireRecoil");
static_assert(sizeof(CharaBase_GetFireRecoil) == 0x000018, "Wrong size on CharaBase_GetFireRecoil");
static_assert(offsetof(CharaBase_GetFireRecoil, _gun) == 0x000000, "Member 'CharaBase_GetFireRecoil::_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetFireRecoil, ReturnValue) == 0x000008, "Member 'CharaBase_GetFireRecoil::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGameConfig
// 0x0560 (0x0560 - 0x0000)
struct CharaBase_GetGameConfig final
{
public:
	struct FConfig_Game                           ReturnValue;                                       // 0x0000(0x0560)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGameConfig) == 0x000008, "Wrong alignment on CharaBase_GetGameConfig");
static_assert(sizeof(CharaBase_GetGameConfig) == 0x000560, "Wrong size on CharaBase_GetGameConfig");
static_assert(offsetof(CharaBase_GetGameConfig, ReturnValue) == 0x000000, "Member 'CharaBase_GetGameConfig::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGunEntryMain
// 0x0358 (0x0358 - 0x0000)
struct CharaBase_GetGunEntryMain final
{
public:
	bool                                          Is_main_hand_hold_gun;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2070[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunEntry_Main                         ReturnValue;                                       // 0x0008(0x0350)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGunEntryMain) == 0x000008, "Wrong alignment on CharaBase_GetGunEntryMain");
static_assert(sizeof(CharaBase_GetGunEntryMain) == 0x000358, "Wrong size on CharaBase_GetGunEntryMain");
static_assert(offsetof(CharaBase_GetGunEntryMain, Is_main_hand_hold_gun) == 0x000000, "Member 'CharaBase_GetGunEntryMain::Is_main_hand_hold_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetGunEntryMain, ReturnValue) == 0x000008, "Member 'CharaBase_GetGunEntryMain::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGunInCurHand
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetGunInCurHand final
{
public:
	bool                                          _is_main_hand;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2071[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AGunBase*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGunInCurHand) == 0x000008, "Wrong alignment on CharaBase_GetGunInCurHand");
static_assert(sizeof(CharaBase_GetGunInCurHand) == 0x000010, "Wrong size on CharaBase_GetGunInCurHand");
static_assert(offsetof(CharaBase_GetGunInCurHand, _is_main_hand) == 0x000000, "Member 'CharaBase_GetGunInCurHand::_is_main_hand' has a wrong offset!");
static_assert(offsetof(CharaBase_GetGunInCurHand, ReturnValue) == 0x000008, "Member 'CharaBase_GetGunInCurHand::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGunPreset
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetGunPreset final
{
public:
	struct FGunPreset                             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGunPreset) == 0x000008, "Wrong alignment on CharaBase_GetGunPreset");
static_assert(sizeof(CharaBase_GetGunPreset) == 0x000010, "Wrong size on CharaBase_GetGunPreset");
static_assert(offsetof(CharaBase_GetGunPreset, ReturnValue) == 0x000000, "Member 'CharaBase_GetGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGunScopeTypeInCurHand
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_GetGunScopeTypeInCurHand final
{
public:
	bool                                          Is_main_hand_hold_gun;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScopeType                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGunScopeTypeInCurHand) == 0x000001, "Wrong alignment on CharaBase_GetGunScopeTypeInCurHand");
static_assert(sizeof(CharaBase_GetGunScopeTypeInCurHand) == 0x000002, "Wrong size on CharaBase_GetGunScopeTypeInCurHand");
static_assert(offsetof(CharaBase_GetGunScopeTypeInCurHand, Is_main_hand_hold_gun) == 0x000000, "Member 'CharaBase_GetGunScopeTypeInCurHand::Is_main_hand_hold_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetGunScopeTypeInCurHand, ReturnValue) == 0x000001, "Member 'CharaBase_GetGunScopeTypeInCurHand::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct CharaBase_GetGunSpec final
{
public:
	struct FGunSpec                               ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGunSpec) == 0x000008, "Wrong alignment on CharaBase_GetGunSpec");
static_assert(sizeof(CharaBase_GetGunSpec) == 0x0000D0, "Wrong size on CharaBase_GetGunSpec");
static_assert(offsetof(CharaBase_GetGunSpec, ReturnValue) == 0x000000, "Member 'CharaBase_GetGunSpec::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetGunType
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetGunType final
{
public:
	EGunType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetGunType) == 0x000001, "Wrong alignment on CharaBase_GetGunType");
static_assert(sizeof(CharaBase_GetGunType) == 0x000001, "Wrong size on CharaBase_GetGunType");
static_assert(offsetof(CharaBase_GetGunType, ReturnValue) == 0x000000, "Member 'CharaBase_GetGunType::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetHalfHeight) == 0x000004, "Wrong alignment on CharaBase_GetHalfHeight");
static_assert(sizeof(CharaBase_GetHalfHeight) == 0x000004, "Wrong size on CharaBase_GetHalfHeight");
static_assert(offsetof(CharaBase_GetHalfHeight, ReturnValue) == 0x000000, "Member 'CharaBase_GetHalfHeight::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetHeadItemID
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetHeadItemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetHeadItemID) == 0x000008, "Wrong alignment on CharaBase_GetHeadItemID");
static_assert(sizeof(CharaBase_GetHeadItemID) == 0x000010, "Wrong size on CharaBase_GetHeadItemID");
static_assert(offsetof(CharaBase_GetHeadItemID, ReturnValue) == 0x000000, "Member 'CharaBase_GetHeadItemID::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetHoldingProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetHoldingProp final
{
public:
	class AThrowBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetHoldingProp) == 0x000008, "Wrong alignment on CharaBase_GetHoldingProp");
static_assert(sizeof(CharaBase_GetHoldingProp) == 0x000008, "Wrong size on CharaBase_GetHoldingProp");
static_assert(offsetof(CharaBase_GetHoldingProp, ReturnValue) == 0x000000, "Member 'CharaBase_GetHoldingProp::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetHP
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetHP) == 0x000004, "Wrong alignment on CharaBase_GetHP");
static_assert(sizeof(CharaBase_GetHP) == 0x000004, "Wrong size on CharaBase_GetHP");
static_assert(offsetof(CharaBase_GetHP, ReturnValue) == 0x000000, "Member 'CharaBase_GetHP::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetHPRate
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetHPRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetHPRate) == 0x000004, "Wrong alignment on CharaBase_GetHPRate");
static_assert(sizeof(CharaBase_GetHPRate) == 0x000004, "Wrong size on CharaBase_GetHPRate");
static_assert(offsetof(CharaBase_GetHPRate, ReturnValue) == 0x000000, "Member 'CharaBase_GetHPRate::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetInitialGunDeviation
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetInitialGunDeviation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetInitialGunDeviation) == 0x000004, "Wrong alignment on CharaBase_GetInitialGunDeviation");
static_assert(sizeof(CharaBase_GetInitialGunDeviation) == 0x000004, "Wrong size on CharaBase_GetInitialGunDeviation");
static_assert(offsetof(CharaBase_GetInitialGunDeviation, ReturnValue) == 0x000000, "Member 'CharaBase_GetInitialGunDeviation::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetInputDirection
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetInputDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetInputDirection) == 0x000008, "Wrong alignment on CharaBase_GetInputDirection");
static_assert(sizeof(CharaBase_GetInputDirection) == 0x000018, "Wrong size on CharaBase_GetInputDirection");
static_assert(offsetof(CharaBase_GetInputDirection, ReturnValue) == 0x000000, "Member 'CharaBase_GetInputDirection::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetInteractionTarget
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetInteractionTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetInteractionTarget) == 0x000008, "Wrong alignment on CharaBase_GetInteractionTarget");
static_assert(sizeof(CharaBase_GetInteractionTarget) == 0x000008, "Wrong size on CharaBase_GetInteractionTarget");
static_assert(offsetof(CharaBase_GetInteractionTarget, ReturnValue) == 0x000000, "Member 'CharaBase_GetInteractionTarget::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetIsReloading
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetIsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetIsReloading) == 0x000001, "Wrong alignment on CharaBase_GetIsReloading");
static_assert(sizeof(CharaBase_GetIsReloading) == 0x000001, "Wrong size on CharaBase_GetIsReloading");
static_assert(offsetof(CharaBase_GetIsReloading, ReturnValue) == 0x000000, "Member 'CharaBase_GetIsReloading::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetKillLogText
// 0x0020 (0x0020 - 0x0000)
struct CharaBase_GetKillLogText final
{
public:
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0000(0x0006)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2072[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetKillLogText) == 0x000008, "Wrong alignment on CharaBase_GetKillLogText");
static_assert(sizeof(CharaBase_GetKillLogText) == 0x000020, "Wrong size on CharaBase_GetKillLogText");
static_assert(offsetof(CharaBase_GetKillLogText, _op_id) == 0x000000, "Member 'CharaBase_GetKillLogText::_op_id' has a wrong offset!");
static_assert(offsetof(CharaBase_GetKillLogText, ReturnValue) == 0x000008, "Member 'CharaBase_GetKillLogText::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetLoadedBulletCount
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetLoadedBulletCount final
{
public:
	bool                                          Is_main_hand_hold_gun;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2073[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetLoadedBulletCount) == 0x000004, "Wrong alignment on CharaBase_GetLoadedBulletCount");
static_assert(sizeof(CharaBase_GetLoadedBulletCount) == 0x000008, "Wrong size on CharaBase_GetLoadedBulletCount");
static_assert(offsetof(CharaBase_GetLoadedBulletCount, Is_main_hand_hold_gun) == 0x000000, "Member 'CharaBase_GetLoadedBulletCount::Is_main_hand_hold_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetLoadedBulletCount, ReturnValue) == 0x000004, "Member 'CharaBase_GetLoadedBulletCount::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetLookAtRay
// 0x0038 (0x0038 - 0x0000)
struct CharaBase_GetLookAtRay final
{
public:
	float                                         _distance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2074[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _out_start;                                        // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _out_end;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetLookAtRay) == 0x000008, "Wrong alignment on CharaBase_GetLookAtRay");
static_assert(sizeof(CharaBase_GetLookAtRay) == 0x000038, "Wrong size on CharaBase_GetLookAtRay");
static_assert(offsetof(CharaBase_GetLookAtRay, _distance) == 0x000000, "Member 'CharaBase_GetLookAtRay::_distance' has a wrong offset!");
static_assert(offsetof(CharaBase_GetLookAtRay, _out_start) == 0x000008, "Member 'CharaBase_GetLookAtRay::_out_start' has a wrong offset!");
static_assert(offsetof(CharaBase_GetLookAtRay, _out_end) == 0x000020, "Member 'CharaBase_GetLookAtRay::_out_end' has a wrong offset!");

// Function Stigma.CharaBase.GetLowerAction
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetLowerAction final
{
public:
	EBodyLowerAction                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetLowerAction) == 0x000001, "Wrong alignment on CharaBase_GetLowerAction");
static_assert(sizeof(CharaBase_GetLowerAction) == 0x000001, "Wrong size on CharaBase_GetLowerAction");
static_assert(offsetof(CharaBase_GetLowerAction, ReturnValue) == 0x000000, "Member 'CharaBase_GetLowerAction::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetLowerState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetLowerState final
{
public:
	EBodyLowerState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetLowerState) == 0x000001, "Wrong alignment on CharaBase_GetLowerState");
static_assert(sizeof(CharaBase_GetLowerState) == 0x000001, "Wrong size on CharaBase_GetLowerState");
static_assert(offsetof(CharaBase_GetLowerState, ReturnValue) == 0x000000, "Member 'CharaBase_GetLowerState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetMagazineCapacity
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetMagazineCapacity final
{
public:
	bool                                          Is_main_hand_hold_gun;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2075[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetMagazineCapacity) == 0x000004, "Wrong alignment on CharaBase_GetMagazineCapacity");
static_assert(sizeof(CharaBase_GetMagazineCapacity) == 0x000008, "Wrong size on CharaBase_GetMagazineCapacity");
static_assert(offsetof(CharaBase_GetMagazineCapacity, Is_main_hand_hold_gun) == 0x000000, "Member 'CharaBase_GetMagazineCapacity::Is_main_hand_hold_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetMagazineCapacity, ReturnValue) == 0x000004, "Member 'CharaBase_GetMagazineCapacity::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetMagazineCount
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetMagazineCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetMagazineCount) == 0x000004, "Wrong alignment on CharaBase_GetMagazineCount");
static_assert(sizeof(CharaBase_GetMagazineCount) == 0x000004, "Wrong size on CharaBase_GetMagazineCount");
static_assert(offsetof(CharaBase_GetMagazineCount, ReturnValue) == 0x000000, "Member 'CharaBase_GetMagazineCount::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetMaxArmor_AllGears
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetMaxArmor_AllGears final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetMaxArmor_AllGears) == 0x000004, "Wrong alignment on CharaBase_GetMaxArmor_AllGears");
static_assert(sizeof(CharaBase_GetMaxArmor_AllGears) == 0x000004, "Wrong size on CharaBase_GetMaxArmor_AllGears");
static_assert(offsetof(CharaBase_GetMaxArmor_AllGears, ReturnValue) == 0x000000, "Member 'CharaBase_GetMaxArmor_AllGears::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetMaxAverageArmor
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetMaxAverageArmor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetMaxAverageArmor) == 0x000004, "Wrong alignment on CharaBase_GetMaxAverageArmor");
static_assert(sizeof(CharaBase_GetMaxAverageArmor) == 0x000004, "Wrong size on CharaBase_GetMaxAverageArmor");
static_assert(offsetof(CharaBase_GetMaxAverageArmor, ReturnValue) == 0x000000, "Member 'CharaBase_GetMaxAverageArmor::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetMeleeAttackPoint
// 0x0048 (0x0048 - 0x0000)
struct CharaBase_GetMeleeAttackPoint final
{
public:
	EMeleeAttackPoint                             _point;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2076[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _radius_scaler;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _capsule_height_scaler;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2077[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _out_loc_start;                                    // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _out_loc_end;                                      // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _out_radius;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2078[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetMeleeAttackPoint) == 0x000008, "Wrong alignment on CharaBase_GetMeleeAttackPoint");
static_assert(sizeof(CharaBase_GetMeleeAttackPoint) == 0x000048, "Wrong size on CharaBase_GetMeleeAttackPoint");
static_assert(offsetof(CharaBase_GetMeleeAttackPoint, _point) == 0x000000, "Member 'CharaBase_GetMeleeAttackPoint::_point' has a wrong offset!");
static_assert(offsetof(CharaBase_GetMeleeAttackPoint, _radius_scaler) == 0x000004, "Member 'CharaBase_GetMeleeAttackPoint::_radius_scaler' has a wrong offset!");
static_assert(offsetof(CharaBase_GetMeleeAttackPoint, _capsule_height_scaler) == 0x000008, "Member 'CharaBase_GetMeleeAttackPoint::_capsule_height_scaler' has a wrong offset!");
static_assert(offsetof(CharaBase_GetMeleeAttackPoint, _out_loc_start) == 0x000010, "Member 'CharaBase_GetMeleeAttackPoint::_out_loc_start' has a wrong offset!");
static_assert(offsetof(CharaBase_GetMeleeAttackPoint, _out_loc_end) == 0x000028, "Member 'CharaBase_GetMeleeAttackPoint::_out_loc_end' has a wrong offset!");
static_assert(offsetof(CharaBase_GetMeleeAttackPoint, _out_radius) == 0x000040, "Member 'CharaBase_GetMeleeAttackPoint::_out_radius' has a wrong offset!");

// Function Stigma.CharaBase.GetNextMagazine
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetNextMagazine final
{
public:
	struct FMagazine                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetNextMagazine) == 0x000001, "Wrong alignment on CharaBase_GetNextMagazine");
static_assert(sizeof(CharaBase_GetNextMagazine) == 0x000001, "Wrong size on CharaBase_GetNextMagazine");
static_assert(offsetof(CharaBase_GetNextMagazine, ReturnValue) == 0x000000, "Member 'CharaBase_GetNextMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct CharaBase_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetNickname) == 0x000008, "Wrong alignment on CharaBase_GetNickname");
static_assert(sizeof(CharaBase_GetNickname) == 0x000018, "Wrong size on CharaBase_GetNickname");
static_assert(offsetof(CharaBase_GetNickname, ReturnValue) == 0x000000, "Member 'CharaBase_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetOwnMainGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetOwnMainGun final
{
public:
	class AGunBase*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetOwnMainGun) == 0x000008, "Wrong alignment on CharaBase_GetOwnMainGun");
static_assert(sizeof(CharaBase_GetOwnMainGun) == 0x000008, "Wrong size on CharaBase_GetOwnMainGun");
static_assert(offsetof(CharaBase_GetOwnMainGun, ReturnValue) == 0x000000, "Member 'CharaBase_GetOwnMainGun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetOwnSubGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetOwnSubGun final
{
public:
	class AGunBase*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetOwnSubGun) == 0x000008, "Wrong alignment on CharaBase_GetOwnSubGun");
static_assert(sizeof(CharaBase_GetOwnSubGun) == 0x000008, "Wrong size on CharaBase_GetOwnSubGun");
static_assert(offsetof(CharaBase_GetOwnSubGun, ReturnValue) == 0x000000, "Member 'CharaBase_GetOwnSubGun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPartsByBone
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_GetPartsByBone final
{
public:
	EBones                                        _bones;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetPartsByBone) == 0x000001, "Wrong alignment on CharaBase_GetPartsByBone");
static_assert(sizeof(CharaBase_GetPartsByBone) == 0x000002, "Wrong size on CharaBase_GetPartsByBone");
static_assert(offsetof(CharaBase_GetPartsByBone, _bones) == 0x000000, "Member 'CharaBase_GetPartsByBone::_bones' has a wrong offset!");
static_assert(offsetof(CharaBase_GetPartsByBone, ReturnValue) == 0x000001, "Member 'CharaBase_GetPartsByBone::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPartsByBoneName
// 0x000C (0x000C - 0x0000)
struct CharaBase_GetPartsByBoneName final
{
public:
	class FName                                   _bone_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2079[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_GetPartsByBoneName) == 0x000004, "Wrong alignment on CharaBase_GetPartsByBoneName");
static_assert(sizeof(CharaBase_GetPartsByBoneName) == 0x00000C, "Wrong size on CharaBase_GetPartsByBoneName");
static_assert(offsetof(CharaBase_GetPartsByBoneName, _bone_name) == 0x000000, "Member 'CharaBase_GetPartsByBoneName::_bone_name' has a wrong offset!");
static_assert(offsetof(CharaBase_GetPartsByBoneName, ReturnValue) == 0x000008, "Member 'CharaBase_GetPartsByBoneName::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPiercingProp
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetPiercingProp final
{
public:
	class APiercingObjectBase*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetPiercingProp) == 0x000008, "Wrong alignment on CharaBase_GetPiercingProp");
static_assert(sizeof(CharaBase_GetPiercingProp) == 0x000008, "Wrong size on CharaBase_GetPiercingProp");
static_assert(offsetof(CharaBase_GetPiercingProp, ReturnValue) == 0x000000, "Member 'CharaBase_GetPiercingProp::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPing
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetPing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetPing) == 0x000004, "Wrong alignment on CharaBase_GetPing");
static_assert(sizeof(CharaBase_GetPing) == 0x000004, "Wrong size on CharaBase_GetPing");
static_assert(offsetof(CharaBase_GetPing, ReturnValue) == 0x000000, "Member 'CharaBase_GetPing::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPingQuality
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetPingQuality final
{
public:
	EPingQuality                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetPingQuality) == 0x000001, "Wrong alignment on CharaBase_GetPingQuality");
static_assert(sizeof(CharaBase_GetPingQuality) == 0x000001, "Wrong size on CharaBase_GetPingQuality");
static_assert(offsetof(CharaBase_GetPingQuality, ReturnValue) == 0x000000, "Member 'CharaBase_GetPingQuality::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetPlayerName) == 0x000008, "Wrong alignment on CharaBase_GetPlayerName");
static_assert(sizeof(CharaBase_GetPlayerName) == 0x000010, "Wrong size on CharaBase_GetPlayerName");
static_assert(offsetof(CharaBase_GetPlayerName, ReturnValue) == 0x000000, "Member 'CharaBase_GetPlayerName::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetPortraitIcon
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetPortraitIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetPortraitIcon) == 0x000008, "Wrong alignment on CharaBase_GetPortraitIcon");
static_assert(sizeof(CharaBase_GetPortraitIcon) == 0x000008, "Wrong size on CharaBase_GetPortraitIcon");
static_assert(offsetof(CharaBase_GetPortraitIcon, ReturnValue) == 0x000000, "Member 'CharaBase_GetPortraitIcon::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetRecoilCameraRate
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetRecoilCameraRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetRecoilCameraRate) == 0x000004, "Wrong alignment on CharaBase_GetRecoilCameraRate");
static_assert(sizeof(CharaBase_GetRecoilCameraRate) == 0x000004, "Wrong size on CharaBase_GetRecoilCameraRate");
static_assert(offsetof(CharaBase_GetRecoilCameraRate, ReturnValue) == 0x000000, "Member 'CharaBase_GetRecoilCameraRate::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetRecoilCrosshairOffset
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetRecoilCrosshairOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetRecoilCrosshairOffset) == 0x000008, "Wrong alignment on CharaBase_GetRecoilCrosshairOffset");
static_assert(sizeof(CharaBase_GetRecoilCrosshairOffset) == 0x000010, "Wrong size on CharaBase_GetRecoilCrosshairOffset");
static_assert(offsetof(CharaBase_GetRecoilCrosshairOffset, ReturnValue) == 0x000000, "Member 'CharaBase_GetRecoilCrosshairOffset::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetRemainBulletPercentage
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetRemainBulletPercentage final
{
public:
	bool                                          Is_main_hand_hold_gun;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetRemainBulletPercentage) == 0x000004, "Wrong alignment on CharaBase_GetRemainBulletPercentage");
static_assert(sizeof(CharaBase_GetRemainBulletPercentage) == 0x000008, "Wrong size on CharaBase_GetRemainBulletPercentage");
static_assert(offsetof(CharaBase_GetRemainBulletPercentage, Is_main_hand_hold_gun) == 0x000000, "Member 'CharaBase_GetRemainBulletPercentage::Is_main_hand_hold_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_GetRemainBulletPercentage, ReturnValue) == 0x000004, "Member 'CharaBase_GetRemainBulletPercentage::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetShouldShowReloadGuide
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetShouldShowReloadGuide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetShouldShowReloadGuide) == 0x000001, "Wrong alignment on CharaBase_GetShouldShowReloadGuide");
static_assert(sizeof(CharaBase_GetShouldShowReloadGuide) == 0x000001, "Wrong size on CharaBase_GetShouldShowReloadGuide");
static_assert(offsetof(CharaBase_GetShouldShowReloadGuide, ReturnValue) == 0x000000, "Member 'CharaBase_GetShouldShowReloadGuide::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetSpecialMainGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetSpecialMainGun final
{
public:
	class AGunBase*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetSpecialMainGun) == 0x000008, "Wrong alignment on CharaBase_GetSpecialMainGun");
static_assert(sizeof(CharaBase_GetSpecialMainGun) == 0x000008, "Wrong size on CharaBase_GetSpecialMainGun");
static_assert(offsetof(CharaBase_GetSpecialMainGun, ReturnValue) == 0x000000, "Member 'CharaBase_GetSpecialMainGun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetSpecialSubGun
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetSpecialSubGun final
{
public:
	class AGunBase*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetSpecialSubGun) == 0x000008, "Wrong alignment on CharaBase_GetSpecialSubGun");
static_assert(sizeof(CharaBase_GetSpecialSubGun) == 0x000008, "Wrong size on CharaBase_GetSpecialSubGun");
static_assert(offsetof(CharaBase_GetSpecialSubGun, ReturnValue) == 0x000000, "Member 'CharaBase_GetSpecialSubGun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetSpeed) == 0x000004, "Wrong alignment on CharaBase_GetSpeed");
static_assert(sizeof(CharaBase_GetSpeed) == 0x000004, "Wrong size on CharaBase_GetSpeed");
static_assert(offsetof(CharaBase_GetSpeed, ReturnValue) == 0x000000, "Member 'CharaBase_GetSpeed::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetTeam) == 0x000001, "Wrong alignment on CharaBase_GetTeam");
static_assert(sizeof(CharaBase_GetTeam) == 0x000001, "Wrong size on CharaBase_GetTeam");
static_assert(offsetof(CharaBase_GetTeam, ReturnValue) == 0x000000, "Member 'CharaBase_GetTeam::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetTotalBulletCount
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetTotalBulletCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetTotalBulletCount) == 0x000004, "Wrong alignment on CharaBase_GetTotalBulletCount");
static_assert(sizeof(CharaBase_GetTotalBulletCount) == 0x000004, "Wrong size on CharaBase_GetTotalBulletCount");
static_assert(offsetof(CharaBase_GetTotalBulletCount, ReturnValue) == 0x000000, "Member 'CharaBase_GetTotalBulletCount::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetTotalSpareBulletCount
// 0x0004 (0x0004 - 0x0000)
struct CharaBase_GetTotalSpareBulletCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetTotalSpareBulletCount) == 0x000004, "Wrong alignment on CharaBase_GetTotalSpareBulletCount");
static_assert(sizeof(CharaBase_GetTotalSpareBulletCount) == 0x000004, "Wrong size on CharaBase_GetTotalSpareBulletCount");
static_assert(offsetof(CharaBase_GetTotalSpareBulletCount, ReturnValue) == 0x000000, "Member 'CharaBase_GetTotalSpareBulletCount::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetUpperState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_GetUpperState final
{
public:
	EBodyUpperState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetUpperState) == 0x000001, "Wrong alignment on CharaBase_GetUpperState");
static_assert(sizeof(CharaBase_GetUpperState) == 0x000001, "Wrong size on CharaBase_GetUpperState");
static_assert(offsetof(CharaBase_GetUpperState, ReturnValue) == 0x000000, "Member 'CharaBase_GetUpperState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetWeaponInCurHand
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_GetWeaponInCurHand final
{
public:
	bool                                          _is_main_hand;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AObjectBase*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetWeaponInCurHand) == 0x000008, "Wrong alignment on CharaBase_GetWeaponInCurHand");
static_assert(sizeof(CharaBase_GetWeaponInCurHand) == 0x000010, "Wrong size on CharaBase_GetWeaponInCurHand");
static_assert(offsetof(CharaBase_GetWeaponInCurHand, _is_main_hand) == 0x000000, "Member 'CharaBase_GetWeaponInCurHand::_is_main_hand' has a wrong offset!");
static_assert(offsetof(CharaBase_GetWeaponInCurHand, ReturnValue) == 0x000008, "Member 'CharaBase_GetWeaponInCurHand::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetWeaponInCurMainHand
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetWeaponInCurMainHand final
{
public:
	class AObjectBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetWeaponInCurMainHand) == 0x000008, "Wrong alignment on CharaBase_GetWeaponInCurMainHand");
static_assert(sizeof(CharaBase_GetWeaponInCurMainHand) == 0x000008, "Wrong size on CharaBase_GetWeaponInCurMainHand");
static_assert(offsetof(CharaBase_GetWeaponInCurMainHand, ReturnValue) == 0x000000, "Member 'CharaBase_GetWeaponInCurMainHand::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.GetWeaponInCurSubHand
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_GetWeaponInCurSubHand final
{
public:
	class AObjectBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_GetWeaponInCurSubHand) == 0x000008, "Wrong alignment on CharaBase_GetWeaponInCurSubHand");
static_assert(sizeof(CharaBase_GetWeaponInCurSubHand) == 0x000008, "Wrong size on CharaBase_GetWeaponInCurSubHand");
static_assert(offsetof(CharaBase_GetWeaponInCurSubHand, ReturnValue) == 0x000000, "Member 'CharaBase_GetWeaponInCurSubHand::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.HasControlPowerPenalty
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_HasControlPowerPenalty final
{
public:
	bool                                          _is_main_hand_gun;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_HasControlPowerPenalty) == 0x000001, "Wrong alignment on CharaBase_HasControlPowerPenalty");
static_assert(sizeof(CharaBase_HasControlPowerPenalty) == 0x000002, "Wrong size on CharaBase_HasControlPowerPenalty");
static_assert(offsetof(CharaBase_HasControlPowerPenalty, _is_main_hand_gun) == 0x000000, "Member 'CharaBase_HasControlPowerPenalty::_is_main_hand_gun' has a wrong offset!");
static_assert(offsetof(CharaBase_HasControlPowerPenalty, ReturnValue) == 0x000001, "Member 'CharaBase_HasControlPowerPenalty::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.HasPostPonedDeath
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_HasPostPonedDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_HasPostPonedDeath) == 0x000001, "Wrong alignment on CharaBase_HasPostPonedDeath");
static_assert(sizeof(CharaBase_HasPostPonedDeath) == 0x000001, "Wrong size on CharaBase_HasPostPonedDeath");
static_assert(offsetof(CharaBase_HasPostPonedDeath, ReturnValue) == 0x000000, "Member 'CharaBase_HasPostPonedDeath::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.HasScopeGun
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_HasScopeGun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_HasScopeGun) == 0x000001, "Wrong alignment on CharaBase_HasScopeGun");
static_assert(sizeof(CharaBase_HasScopeGun) == 0x000001, "Wrong size on CharaBase_HasScopeGun");
static_assert(offsetof(CharaBase_HasScopeGun, ReturnValue) == 0x000000, "Member 'CharaBase_HasScopeGun::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsActable
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsActable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsActable) == 0x000001, "Wrong alignment on CharaBase_IsActable");
static_assert(sizeof(CharaBase_IsActable) == 0x000001, "Wrong size on CharaBase_IsActable");
static_assert(offsetof(CharaBase_IsActable, ReturnValue) == 0x000000, "Member 'CharaBase_IsActable::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsActionCooltimeExpired
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_IsActionCooltimeExpired final
{
public:
	ECharaAction                                  _action_type;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsActionCooltimeExpired) == 0x000001, "Wrong alignment on CharaBase_IsActionCooltimeExpired");
static_assert(sizeof(CharaBase_IsActionCooltimeExpired) == 0x000002, "Wrong size on CharaBase_IsActionCooltimeExpired");
static_assert(offsetof(CharaBase_IsActionCooltimeExpired, _action_type) == 0x000000, "Member 'CharaBase_IsActionCooltimeExpired::_action_type' has a wrong offset!");
static_assert(offsetof(CharaBase_IsActionCooltimeExpired, ReturnValue) == 0x000001, "Member 'CharaBase_IsActionCooltimeExpired::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsAIControlled
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsAIControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsAIControlled) == 0x000001, "Wrong alignment on CharaBase_IsAIControlled");
static_assert(sizeof(CharaBase_IsAIControlled) == 0x000001, "Wrong size on CharaBase_IsAIControlled");
static_assert(offsetof(CharaBase_IsAIControlled, ReturnValue) == 0x000000, "Member 'CharaBase_IsAIControlled::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsAlive) == 0x000001, "Wrong alignment on CharaBase_IsAlive");
static_assert(sizeof(CharaBase_IsAlive) == 0x000001, "Wrong size on CharaBase_IsAlive");
static_assert(offsetof(CharaBase_IsAlive, ReturnValue) == 0x000000, "Member 'CharaBase_IsAlive::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsAlly
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_IsAlly final
{
public:
	const class ACharaBase*                       _other;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_IsAlly) == 0x000008, "Wrong alignment on CharaBase_IsAlly");
static_assert(sizeof(CharaBase_IsAlly) == 0x000010, "Wrong size on CharaBase_IsAlly");
static_assert(offsetof(CharaBase_IsAlly, _other) == 0x000000, "Member 'CharaBase_IsAlly::_other' has a wrong offset!");
static_assert(offsetof(CharaBase_IsAlly, ReturnValue) == 0x000008, "Member 'CharaBase_IsAlly::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsAntidoteState
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsAntidoteState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsAntidoteState) == 0x000001, "Wrong alignment on CharaBase_IsAntidoteState");
static_assert(sizeof(CharaBase_IsAntidoteState) == 0x000001, "Wrong size on CharaBase_IsAntidoteState");
static_assert(offsetof(CharaBase_IsAntidoteState, ReturnValue) == 0x000000, "Member 'CharaBase_IsAntidoteState::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsAnyServer
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsAnyServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsAnyServer) == 0x000001, "Wrong alignment on CharaBase_IsAnyServer");
static_assert(sizeof(CharaBase_IsAnyServer) == 0x000001, "Wrong size on CharaBase_IsAnyServer");
static_assert(offsetof(CharaBase_IsAnyServer, ReturnValue) == 0x000000, "Member 'CharaBase_IsAnyServer::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsBlocking
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsBlocking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsBlocking) == 0x000001, "Wrong alignment on CharaBase_IsBlocking");
static_assert(sizeof(CharaBase_IsBlocking) == 0x000001, "Wrong size on CharaBase_IsBlocking");
static_assert(offsetof(CharaBase_IsBlocking, ReturnValue) == 0x000000, "Member 'CharaBase_IsBlocking::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsBoneBreaked
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsBoneBreaked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsBoneBreaked) == 0x000001, "Wrong alignment on CharaBase_IsBoneBreaked");
static_assert(sizeof(CharaBase_IsBoneBreaked) == 0x000001, "Wrong size on CharaBase_IsBoneBreaked");
static_assert(offsetof(CharaBase_IsBoneBreaked, ReturnValue) == 0x000000, "Member 'CharaBase_IsBoneBreaked::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsBulletproofProtected
// 0x0002 (0x0002 - 0x0000)
struct CharaBase_IsBulletproofProtected final
{
public:
	EBones                                        _bone;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsBulletproofProtected) == 0x000001, "Wrong alignment on CharaBase_IsBulletproofProtected");
static_assert(sizeof(CharaBase_IsBulletproofProtected) == 0x000002, "Wrong size on CharaBase_IsBulletproofProtected");
static_assert(offsetof(CharaBase_IsBulletproofProtected, _bone) == 0x000000, "Member 'CharaBase_IsBulletproofProtected::_bone' has a wrong offset!");
static_assert(offsetof(CharaBase_IsBulletproofProtected, ReturnValue) == 0x000001, "Member 'CharaBase_IsBulletproofProtected::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsDediServer
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsDediServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsDediServer) == 0x000001, "Wrong alignment on CharaBase_IsDediServer");
static_assert(sizeof(CharaBase_IsDediServer) == 0x000001, "Wrong size on CharaBase_IsDediServer");
static_assert(offsetof(CharaBase_IsDediServer, ReturnValue) == 0x000000, "Member 'CharaBase_IsDediServer::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsDied
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsDied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsDied) == 0x000001, "Wrong alignment on CharaBase_IsDied");
static_assert(sizeof(CharaBase_IsDied) == 0x000001, "Wrong size on CharaBase_IsDied");
static_assert(offsetof(CharaBase_IsDied, ReturnValue) == 0x000000, "Member 'CharaBase_IsDied::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsDisarmed
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsDisarmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsDisarmed) == 0x000001, "Wrong alignment on CharaBase_IsDisarmed");
static_assert(sizeof(CharaBase_IsDisarmed) == 0x000001, "Wrong size on CharaBase_IsDisarmed");
static_assert(offsetof(CharaBase_IsDisarmed, ReturnValue) == 0x000000, "Member 'CharaBase_IsDisarmed::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsDiscovered
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsDiscovered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsDiscovered) == 0x000001, "Wrong alignment on CharaBase_IsDiscovered");
static_assert(sizeof(CharaBase_IsDiscovered) == 0x000001, "Wrong size on CharaBase_IsDiscovered");
static_assert(offsetof(CharaBase_IsDiscovered, ReturnValue) == 0x000000, "Member 'CharaBase_IsDiscovered::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsEnemy
// 0x0010 (0x0010 - 0x0000)
struct CharaBase_IsEnemy final
{
public:
	const class ACharaBase*                       _other;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharaBase_IsEnemy) == 0x000008, "Wrong alignment on CharaBase_IsEnemy");
static_assert(sizeof(CharaBase_IsEnemy) == 0x000010, "Wrong size on CharaBase_IsEnemy");
static_assert(offsetof(CharaBase_IsEnemy, _other) == 0x000000, "Member 'CharaBase_IsEnemy::_other' has a wrong offset!");
static_assert(offsetof(CharaBase_IsEnemy, ReturnValue) == 0x000008, "Member 'CharaBase_IsEnemy::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsFalling
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsFalling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsFalling) == 0x000001, "Wrong alignment on CharaBase_IsFalling");
static_assert(sizeof(CharaBase_IsFalling) == 0x000001, "Wrong size on CharaBase_IsFalling");
static_assert(offsetof(CharaBase_IsFalling, ReturnValue) == 0x000000, "Member 'CharaBase_IsFalling::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsFullMagazine
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsFullMagazine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsFullMagazine) == 0x000001, "Wrong alignment on CharaBase_IsFullMagazine");
static_assert(sizeof(CharaBase_IsFullMagazine) == 0x000001, "Wrong size on CharaBase_IsFullMagazine");
static_assert(offsetof(CharaBase_IsFullMagazine, ReturnValue) == 0x000000, "Member 'CharaBase_IsFullMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsInteracting) == 0x000001, "Wrong alignment on CharaBase_IsInteracting");
static_assert(sizeof(CharaBase_IsInteracting) == 0x000001, "Wrong size on CharaBase_IsInteracting");
static_assert(offsetof(CharaBase_IsInteracting, ReturnValue) == 0x000000, "Member 'CharaBase_IsInteracting::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsInvincible
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsInvincible) == 0x000001, "Wrong alignment on CharaBase_IsInvincible");
static_assert(sizeof(CharaBase_IsInvincible) == 0x000001, "Wrong size on CharaBase_IsInvincible");
static_assert(offsetof(CharaBase_IsInvincible, ReturnValue) == 0x000000, "Member 'CharaBase_IsInvincible::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsJumping
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsJumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsJumping) == 0x000001, "Wrong alignment on CharaBase_IsJumping");
static_assert(sizeof(CharaBase_IsJumping) == 0x000001, "Wrong size on CharaBase_IsJumping");
static_assert(offsetof(CharaBase_IsJumping, ReturnValue) == 0x000000, "Member 'CharaBase_IsJumping::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsListenServer
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsListenServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsListenServer) == 0x000001, "Wrong alignment on CharaBase_IsListenServer");
static_assert(sizeof(CharaBase_IsListenServer) == 0x000001, "Wrong size on CharaBase_IsListenServer");
static_assert(offsetof(CharaBase_IsListenServer, ReturnValue) == 0x000000, "Member 'CharaBase_IsListenServer::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsLocalOrSpectated
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsLocalOrSpectated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsLocalOrSpectated) == 0x000001, "Wrong alignment on CharaBase_IsLocalOrSpectated");
static_assert(sizeof(CharaBase_IsLocalOrSpectated) == 0x000001, "Wrong size on CharaBase_IsLocalOrSpectated");
static_assert(offsetof(CharaBase_IsLocalOrSpectated, ReturnValue) == 0x000000, "Member 'CharaBase_IsLocalOrSpectated::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsLyingOrPronning
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsLyingOrPronning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsLyingOrPronning) == 0x000001, "Wrong alignment on CharaBase_IsLyingOrPronning");
static_assert(sizeof(CharaBase_IsLyingOrPronning) == 0x000001, "Wrong size on CharaBase_IsLyingOrPronning");
static_assert(offsetof(CharaBase_IsLyingOrPronning, ReturnValue) == 0x000000, "Member 'CharaBase_IsLyingOrPronning::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsMovable
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsMovable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsMovable) == 0x000001, "Wrong alignment on CharaBase_IsMovable");
static_assert(sizeof(CharaBase_IsMovable) == 0x000001, "Wrong size on CharaBase_IsMovable");
static_assert(offsetof(CharaBase_IsMovable, ReturnValue) == 0x000000, "Member 'CharaBase_IsMovable::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsUIMode
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsUIMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsUIMode) == 0x000001, "Wrong alignment on CharaBase_IsUIMode");
static_assert(sizeof(CharaBase_IsUIMode) == 0x000001, "Wrong size on CharaBase_IsUIMode");
static_assert(offsetof(CharaBase_IsUIMode, ReturnValue) == 0x000000, "Member 'CharaBase_IsUIMode::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.IsUnfireable
// 0x0001 (0x0001 - 0x0000)
struct CharaBase_IsUnfireable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_IsUnfireable) == 0x000001, "Wrong alignment on CharaBase_IsUnfireable");
static_assert(sizeof(CharaBase_IsUnfireable) == 0x000001, "Wrong size on CharaBase_IsUnfireable");
static_assert(offsetof(CharaBase_IsUnfireable, ReturnValue) == 0x000000, "Member 'CharaBase_IsUnfireable::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.MoveComponent
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_MoveComponent final
{
public:
	class USpecterCharaMovementComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_MoveComponent) == 0x000008, "Wrong alignment on CharaBase_MoveComponent");
static_assert(sizeof(CharaBase_MoveComponent) == 0x000008, "Wrong size on CharaBase_MoveComponent");
static_assert(offsetof(CharaBase_MoveComponent, ReturnValue) == 0x000000, "Member 'CharaBase_MoveComponent::ReturnValue' has a wrong offset!");

// Function Stigma.CharaBase.PlayerController
// 0x0008 (0x0008 - 0x0000)
struct CharaBase_PlayerController final
{
public:
	class ABattlePlayerControllerBase*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharaBase_PlayerController) == 0x000008, "Wrong alignment on CharaBase_PlayerController");
static_assert(sizeof(CharaBase_PlayerController) == 0x000008, "Wrong size on CharaBase_PlayerController");
static_assert(offsetof(CharaBase_PlayerController, ReturnValue) == 0x000000, "Member 'CharaBase_PlayerController::ReturnValue' has a wrong offset!");

// Function Stigma.AICharaBase.ArrivePatrolLocation
// 0x0001 (0x0001 - 0x0000)
struct AICharaBase_ArrivePatrolLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharaBase_ArrivePatrolLocation) == 0x000001, "Wrong alignment on AICharaBase_ArrivePatrolLocation");
static_assert(sizeof(AICharaBase_ArrivePatrolLocation) == 0x000001, "Wrong size on AICharaBase_ArrivePatrolLocation");
static_assert(offsetof(AICharaBase_ArrivePatrolLocation, ReturnValue) == 0x000000, "Member 'AICharaBase_ArrivePatrolLocation::ReturnValue' has a wrong offset!");

// Function Stigma.AICharaBase.GetTargetPatrolLocation
// 0x0018 (0x0018 - 0x0000)
struct AICharaBase_GetTargetPatrolLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharaBase_GetTargetPatrolLocation) == 0x000008, "Wrong alignment on AICharaBase_GetTargetPatrolLocation");
static_assert(sizeof(AICharaBase_GetTargetPatrolLocation) == 0x000018, "Wrong size on AICharaBase_GetTargetPatrolLocation");
static_assert(offsetof(AICharaBase_GetTargetPatrolLocation, ReturnValue) == 0x000000, "Member 'AICharaBase_GetTargetPatrolLocation::ReturnValue' has a wrong offset!");

// Function Stigma.AICharaBase.IsSummoned
// 0x0001 (0x0001 - 0x0000)
struct AICharaBase_IsSummoned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharaBase_IsSummoned) == 0x000001, "Wrong alignment on AICharaBase_IsSummoned");
static_assert(sizeof(AICharaBase_IsSummoned) == 0x000001, "Wrong size on AICharaBase_IsSummoned");
static_assert(offsetof(AICharaBase_IsSummoned, ReturnValue) == 0x000000, "Member 'AICharaBase_IsSummoned::ReturnValue' has a wrong offset!");

// Function Stigma.AGO_Charge.DestroyChargeComp
// 0x0001 (0x0001 - 0x0000)
struct AGO_Charge_DestroyChargeComp final
{
public:
	bool                                          _forced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGO_Charge_DestroyChargeComp) == 0x000001, "Wrong alignment on AGO_Charge_DestroyChargeComp");
static_assert(sizeof(AGO_Charge_DestroyChargeComp) == 0x000001, "Wrong size on AGO_Charge_DestroyChargeComp");
static_assert(offsetof(AGO_Charge_DestroyChargeComp, _forced) == 0x000000, "Member 'AGO_Charge_DestroyChargeComp::_forced' has a wrong offset!");

// Function Stigma.UI_DamageIndicator.OnShow
// 0x0018 (0x0018 - 0x0000)
struct UI_DamageIndicator_OnShow final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2087[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             _chara;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2088[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_DamageIndicator_OnShow) == 0x000008, "Wrong alignment on UI_DamageIndicator_OnShow");
static_assert(sizeof(UI_DamageIndicator_OnShow) == 0x000018, "Wrong size on UI_DamageIndicator_OnShow");
static_assert(offsetof(UI_DamageIndicator_OnShow, _show) == 0x000000, "Member 'UI_DamageIndicator_OnShow::_show' has a wrong offset!");
static_assert(offsetof(UI_DamageIndicator_OnShow, _chara) == 0x000008, "Member 'UI_DamageIndicator_OnShow::_chara' has a wrong offset!");
static_assert(offsetof(UI_DamageIndicator_OnShow, ReturnValue) == 0x000010, "Member 'UI_DamageIndicator_OnShow::ReturnValue' has a wrong offset!");

// Function Stigma.UI_DamageIndicator.SetHitCount
// 0x0040 (0x0040 - 0x0000)
struct UI_DamageIndicator_SetHitCount final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2089[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDamagedData                           _damaged_data;                                     // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208A[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_DamageIndicator_SetHitCount) == 0x000008, "Wrong alignment on UI_DamageIndicator_SetHitCount");
static_assert(sizeof(UI_DamageIndicator_SetHitCount) == 0x000040, "Wrong size on UI_DamageIndicator_SetHitCount");
static_assert(offsetof(UI_DamageIndicator_SetHitCount, _count) == 0x000000, "Member 'UI_DamageIndicator_SetHitCount::_count' has a wrong offset!");
static_assert(offsetof(UI_DamageIndicator_SetHitCount, _damaged_data) == 0x000008, "Member 'UI_DamageIndicator_SetHitCount::_damaged_data' has a wrong offset!");
static_assert(offsetof(UI_DamageIndicator_SetHitCount, ReturnValue) == 0x000038, "Member 'UI_DamageIndicator_SetHitCount::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Announce.GetAnnouceCount
// 0x0004 (0x0004 - 0x0000)
struct UI_Announce_GetAnnouceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Announce_GetAnnouceCount) == 0x000004, "Wrong alignment on UI_Announce_GetAnnouceCount");
static_assert(sizeof(UI_Announce_GetAnnouceCount) == 0x000004, "Wrong size on UI_Announce_GetAnnouceCount");
static_assert(offsetof(UI_Announce_GetAnnouceCount, ReturnValue) == 0x000000, "Member 'UI_Announce_GetAnnouceCount::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Announce.IsShowing
// 0x0001 (0x0001 - 0x0000)
struct UI_Announce_IsShowing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Announce_IsShowing) == 0x000001, "Wrong alignment on UI_Announce_IsShowing");
static_assert(sizeof(UI_Announce_IsShowing) == 0x000001, "Wrong size on UI_Announce_IsShowing");
static_assert(offsetof(UI_Announce_IsShowing, ReturnValue) == 0x000000, "Member 'UI_Announce_IsShowing::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.GoBack
// 0x0001 (0x0001 - 0x0000)
struct UI_LobbyPage_GoBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LobbyPage_GoBack) == 0x000001, "Wrong alignment on UI_LobbyPage_GoBack");
static_assert(sizeof(UI_LobbyPage_GoBack) == 0x000001, "Wrong size on UI_LobbyPage_GoBack");
static_assert(offsetof(UI_LobbyPage_GoBack, ReturnValue) == 0x000000, "Member 'UI_LobbyPage_GoBack::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.HandleOnKeyClose
// 0x0001 (0x0001 - 0x0000)
struct UI_LobbyPage_HandleOnKeyClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LobbyPage_HandleOnKeyClose) == 0x000001, "Wrong alignment on UI_LobbyPage_HandleOnKeyClose");
static_assert(sizeof(UI_LobbyPage_HandleOnKeyClose) == 0x000001, "Wrong size on UI_LobbyPage_HandleOnKeyClose");
static_assert(offsetof(UI_LobbyPage_HandleOnKeyClose, ReturnValue) == 0x000000, "Member 'UI_LobbyPage_HandleOnKeyClose::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnClosePage
// 0x0002 (0x0002 - 0x0000)
struct UI_LobbyPage_OnClosePage final
{
public:
	ELobbyPage                                    _next_page;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LobbyPage_OnClosePage) == 0x000001, "Wrong alignment on UI_LobbyPage_OnClosePage");
static_assert(sizeof(UI_LobbyPage_OnClosePage) == 0x000002, "Wrong size on UI_LobbyPage_OnClosePage");
static_assert(offsetof(UI_LobbyPage_OnClosePage, _next_page) == 0x000000, "Member 'UI_LobbyPage_OnClosePage::_next_page' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnClosePage, ReturnValue) == 0x000001, "Member 'UI_LobbyPage_OnClosePage::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnMatchChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_LobbyPage_OnMatchChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LobbyPage_OnMatchChanged) == 0x000001, "Wrong alignment on UI_LobbyPage_OnMatchChanged");
static_assert(sizeof(UI_LobbyPage_OnMatchChanged) == 0x000001, "Wrong size on UI_LobbyPage_OnMatchChanged");
static_assert(offsetof(UI_LobbyPage_OnMatchChanged, ReturnValue) == 0x000000, "Member 'UI_LobbyPage_OnMatchChanged::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnOpenPage
// 0x0003 (0x0003 - 0x0000)
struct UI_LobbyPage_OnOpenPage final
{
public:
	EItemCategory                                 _option;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbyPage                                    _prev_page;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LobbyPage_OnOpenPage) == 0x000001, "Wrong alignment on UI_LobbyPage_OnOpenPage");
static_assert(sizeof(UI_LobbyPage_OnOpenPage) == 0x000003, "Wrong size on UI_LobbyPage_OnOpenPage");
static_assert(offsetof(UI_LobbyPage_OnOpenPage, _option) == 0x000000, "Member 'UI_LobbyPage_OnOpenPage::_option' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnOpenPage, _prev_page) == 0x000001, "Member 'UI_LobbyPage_OnOpenPage::_prev_page' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnOpenPage, ReturnValue) == 0x000002, "Member 'UI_LobbyPage_OnOpenPage::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnParty_CharacterUpdated
// 0x0110 (0x0110 - 0x0000)
struct UI_LobbyPage_OnParty_CharacterUpdated final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharSpec                              _chara;                                            // 0x0008(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A3[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_LobbyPage_OnParty_CharacterUpdated) == 0x000008, "Wrong alignment on UI_LobbyPage_OnParty_CharacterUpdated");
static_assert(sizeof(UI_LobbyPage_OnParty_CharacterUpdated) == 0x000110, "Wrong size on UI_LobbyPage_OnParty_CharacterUpdated");
static_assert(offsetof(UI_LobbyPage_OnParty_CharacterUpdated, _user_id) == 0x000000, "Member 'UI_LobbyPage_OnParty_CharacterUpdated::_user_id' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_CharacterUpdated, _chara) == 0x000008, "Member 'UI_LobbyPage_OnParty_CharacterUpdated::_chara' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_CharacterUpdated, ReturnValue) == 0x000108, "Member 'UI_LobbyPage_OnParty_CharacterUpdated::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnParty_Entered
// 0x0010 (0x0010 - 0x0000)
struct UI_LobbyPage_OnParty_Entered final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_LobbyPage_OnParty_Entered) == 0x000008, "Wrong alignment on UI_LobbyPage_OnParty_Entered");
static_assert(sizeof(UI_LobbyPage_OnParty_Entered) == 0x000010, "Wrong size on UI_LobbyPage_OnParty_Entered");
static_assert(offsetof(UI_LobbyPage_OnParty_Entered, _party) == 0x000000, "Member 'UI_LobbyPage_OnParty_Entered::_party' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_Entered, ReturnValue) == 0x000008, "Member 'UI_LobbyPage_OnParty_Entered::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnParty_Exited
// 0x0001 (0x0001 - 0x0000)
struct UI_LobbyPage_OnParty_Exited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LobbyPage_OnParty_Exited) == 0x000001, "Wrong alignment on UI_LobbyPage_OnParty_Exited");
static_assert(sizeof(UI_LobbyPage_OnParty_Exited) == 0x000001, "Wrong size on UI_LobbyPage_OnParty_Exited");
static_assert(offsetof(UI_LobbyPage_OnParty_Exited, ReturnValue) == 0x000000, "Member 'UI_LobbyPage_OnParty_Exited::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnParty_LeaderUpdated
// 0x0010 (0x0010 - 0x0000)
struct UI_LobbyPage_OnParty_LeaderUpdated final
{
public:
	struct FUserID                                _leader_id;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_LobbyPage_OnParty_LeaderUpdated) == 0x000008, "Wrong alignment on UI_LobbyPage_OnParty_LeaderUpdated");
static_assert(sizeof(UI_LobbyPage_OnParty_LeaderUpdated) == 0x000010, "Wrong size on UI_LobbyPage_OnParty_LeaderUpdated");
static_assert(offsetof(UI_LobbyPage_OnParty_LeaderUpdated, _leader_id) == 0x000000, "Member 'UI_LobbyPage_OnParty_LeaderUpdated::_leader_id' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_LeaderUpdated, ReturnValue) == 0x000008, "Member 'UI_LobbyPage_OnParty_LeaderUpdated::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnParty_MemberAdded
// 0x0018 (0x0018 - 0x0000)
struct UI_LobbyPage_OnParty_MemberAdded final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UUserProfile*                     _member;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A6[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_LobbyPage_OnParty_MemberAdded) == 0x000008, "Wrong alignment on UI_LobbyPage_OnParty_MemberAdded");
static_assert(sizeof(UI_LobbyPage_OnParty_MemberAdded) == 0x000018, "Wrong size on UI_LobbyPage_OnParty_MemberAdded");
static_assert(offsetof(UI_LobbyPage_OnParty_MemberAdded, _party) == 0x000000, "Member 'UI_LobbyPage_OnParty_MemberAdded::_party' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_MemberAdded, _member) == 0x000008, "Member 'UI_LobbyPage_OnParty_MemberAdded::_member' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_MemberAdded, ReturnValue) == 0x000010, "Member 'UI_LobbyPage_OnParty_MemberAdded::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LobbyPage.OnParty_MemberDeleted
// 0x0018 (0x0018 - 0x0000)
struct UI_LobbyPage_OnParty_MemberDeleted final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_LobbyPage_OnParty_MemberDeleted) == 0x000008, "Wrong alignment on UI_LobbyPage_OnParty_MemberDeleted");
static_assert(sizeof(UI_LobbyPage_OnParty_MemberDeleted) == 0x000018, "Wrong size on UI_LobbyPage_OnParty_MemberDeleted");
static_assert(offsetof(UI_LobbyPage_OnParty_MemberDeleted, _party) == 0x000000, "Member 'UI_LobbyPage_OnParty_MemberDeleted::_party' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_MemberDeleted, _user_id) == 0x000008, "Member 'UI_LobbyPage_OnParty_MemberDeleted::_user_id' has a wrong offset!");
static_assert(offsetof(UI_LobbyPage_OnParty_MemberDeleted, ReturnValue) == 0x000010, "Member 'UI_LobbyPage_OnParty_MemberDeleted::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ChatBox.ChangeChannel
// 0x0002 (0x0002 - 0x0000)
struct UI_ChatBox_ChangeChannel final
{
public:
	EChatBoxChannelType                           _channel;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _change_hint_text;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_ChangeChannel) == 0x000001, "Wrong alignment on UI_ChatBox_ChangeChannel");
static_assert(sizeof(UI_ChatBox_ChangeChannel) == 0x000002, "Wrong size on UI_ChatBox_ChangeChannel");
static_assert(offsetof(UI_ChatBox_ChangeChannel, _channel) == 0x000000, "Member 'UI_ChatBox_ChangeChannel::_channel' has a wrong offset!");
static_assert(offsetof(UI_ChatBox_ChangeChannel, _change_hint_text) == 0x000001, "Member 'UI_ChatBox_ChangeChannel::_change_hint_text' has a wrong offset!");

// Function Stigma.UI_ChatBox.ChangeInputState
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatBox_ChangeInputState final
{
public:
	EChatBoxInputStateType                        _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_ChangeInputState) == 0x000001, "Wrong alignment on UI_ChatBox_ChangeInputState");
static_assert(sizeof(UI_ChatBox_ChangeInputState) == 0x000001, "Wrong size on UI_ChatBox_ChangeInputState");
static_assert(offsetof(UI_ChatBox_ChangeInputState, _state) == 0x000000, "Member 'UI_ChatBox_ChangeInputState::_state' has a wrong offset!");

// Function Stigma.UI_ChatBox.ChangePanelState
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatBox_ChangePanelState final
{
public:
	EChatBoxPanelStateType                        _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_ChangePanelState) == 0x000001, "Wrong alignment on UI_ChatBox_ChangePanelState");
static_assert(sizeof(UI_ChatBox_ChangePanelState) == 0x000001, "Wrong size on UI_ChatBox_ChangePanelState");
static_assert(offsetof(UI_ChatBox_ChangePanelState, _state) == 0x000000, "Member 'UI_ChatBox_ChangePanelState::_state' has a wrong offset!");

// Function Stigma.UI_ChatBox.EnablePartyCheck
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatBox_EnablePartyCheck final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_EnablePartyCheck) == 0x000001, "Wrong alignment on UI_ChatBox_EnablePartyCheck");
static_assert(sizeof(UI_ChatBox_EnablePartyCheck) == 0x000001, "Wrong size on UI_ChatBox_EnablePartyCheck");
static_assert(offsetof(UI_ChatBox_EnablePartyCheck, _flag) == 0x000000, "Member 'UI_ChatBox_EnablePartyCheck::_flag' has a wrong offset!");

// Function Stigma.UI_ChatBox.EnqueueChatHistory
// 0x0058 (0x0058 - 0x0000)
struct UI_ChatBox_EnqueueChatHistory final
{
public:
	struct FChatMsg                               _slot_data;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_EnqueueChatHistory) == 0x000008, "Wrong alignment on UI_ChatBox_EnqueueChatHistory");
static_assert(sizeof(UI_ChatBox_EnqueueChatHistory) == 0x000058, "Wrong size on UI_ChatBox_EnqueueChatHistory");
static_assert(offsetof(UI_ChatBox_EnqueueChatHistory, _slot_data) == 0x000000, "Member 'UI_ChatBox_EnqueueChatHistory::_slot_data' has a wrong offset!");

// Function Stigma.UI_ChatBox.OnTextChange
// 0x0018 (0x0018 - 0x0000)
struct UI_ChatBox_OnTextChange final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_OnTextChange) == 0x000008, "Wrong alignment on UI_ChatBox_OnTextChange");
static_assert(sizeof(UI_ChatBox_OnTextChange) == 0x000018, "Wrong size on UI_ChatBox_OnTextChange");
static_assert(offsetof(UI_ChatBox_OnTextChange, Text) == 0x000000, "Member 'UI_ChatBox_OnTextChange::Text' has a wrong offset!");

// Function Stigma.UI_ChatBox.OnTextCommit
// 0x0018 (0x0018 - 0x0000)
struct UI_ChatBox_OnTextCommit final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_OnTextCommit) == 0x000008, "Wrong alignment on UI_ChatBox_OnTextCommit");
static_assert(sizeof(UI_ChatBox_OnTextCommit) == 0x000018, "Wrong size on UI_ChatBox_OnTextCommit");
static_assert(offsetof(UI_ChatBox_OnTextCommit, _text) == 0x000000, "Member 'UI_ChatBox_OnTextCommit::_text' has a wrong offset!");

// DelegateFunction Stigma.UI_ChatBox.OnUserCommitPartyChatDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature final
{
public:
	struct FChatMsg                               _message;                                          // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature");
static_assert(sizeof(UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature) == 0x000058, "Wrong size on UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature");
static_assert(offsetof(UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature, _message) == 0x000000, "Member 'UI_ChatBox_OnUserCommitPartyChatDelegate__DelegateSignature::_message' has a wrong offset!");

// DelegateFunction Stigma.UI_ChatBox.OnUserCommitShoutChatDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature final
{
public:
	struct FChatMsg                               _message;                                          // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature");
static_assert(sizeof(UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature) == 0x000058, "Wrong size on UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature");
static_assert(offsetof(UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature, _message) == 0x000000, "Member 'UI_ChatBox_OnUserCommitShoutChatDelegate__DelegateSignature::_message' has a wrong offset!");

// DelegateFunction Stigma.UI_ChatBox.OnUserCommitTeamChatDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature final
{
public:
	struct FChatMsg                               _message;                                          // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature");
static_assert(sizeof(UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature) == 0x000058, "Wrong size on UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature");
static_assert(offsetof(UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature, _message) == 0x000000, "Member 'UI_ChatBox_OnUserCommitTeamChatDelegate__DelegateSignature::_message' has a wrong offset!");

// Function Stigma.UI_ChatBox.SelectRadioChatCategory
// 0x0004 (0x0004 - 0x0000)
struct UI_ChatBox_SelectRadioChatCategory final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_SelectRadioChatCategory) == 0x000004, "Wrong alignment on UI_ChatBox_SelectRadioChatCategory");
static_assert(sizeof(UI_ChatBox_SelectRadioChatCategory) == 0x000004, "Wrong size on UI_ChatBox_SelectRadioChatCategory");
static_assert(offsetof(UI_ChatBox_SelectRadioChatCategory, _idx) == 0x000000, "Member 'UI_ChatBox_SelectRadioChatCategory::_idx' has a wrong offset!");

// Function Stigma.UI_ChatBox.SelectRadioChatListItem
// 0x0004 (0x0004 - 0x0000)
struct UI_ChatBox_SelectRadioChatListItem final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_SelectRadioChatListItem) == 0x000004, "Wrong alignment on UI_ChatBox_SelectRadioChatListItem");
static_assert(sizeof(UI_ChatBox_SelectRadioChatListItem) == 0x000004, "Wrong size on UI_ChatBox_SelectRadioChatListItem");
static_assert(offsetof(UI_ChatBox_SelectRadioChatListItem, _idx) == 0x000000, "Member 'UI_ChatBox_SelectRadioChatListItem::_idx' has a wrong offset!");

// Function Stigma.UI_ChatBox.SetAllowChat
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatBox_SetAllowChat final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_SetAllowChat) == 0x000001, "Wrong alignment on UI_ChatBox_SetAllowChat");
static_assert(sizeof(UI_ChatBox_SetAllowChat) == 0x000001, "Wrong size on UI_ChatBox_SetAllowChat");
static_assert(offsetof(UI_ChatBox_SetAllowChat, _flag) == 0x000000, "Member 'UI_ChatBox_SetAllowChat::_flag' has a wrong offset!");

// Function Stigma.UI_ChatBox.SetAllowedChannels
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatBox_SetAllowedChannels final
{
public:
	EChatBoxChannelType                           _channels;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_SetAllowedChannels) == 0x000001, "Wrong alignment on UI_ChatBox_SetAllowedChannels");
static_assert(sizeof(UI_ChatBox_SetAllowedChannels) == 0x000001, "Wrong size on UI_ChatBox_SetAllowedChannels");
static_assert(offsetof(UI_ChatBox_SetAllowedChannels, _channels) == 0x000000, "Member 'UI_ChatBox_SetAllowedChannels::_channels' has a wrong offset!");

// Function Stigma.UI_ChatBox.SetAllowedShout
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatBox_SetAllowedShout final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_SetAllowedShout) == 0x000001, "Wrong alignment on UI_ChatBox_SetAllowedShout");
static_assert(sizeof(UI_ChatBox_SetAllowedShout) == 0x000001, "Wrong size on UI_ChatBox_SetAllowedShout");
static_assert(offsetof(UI_ChatBox_SetAllowedShout, _flag) == 0x000000, "Member 'UI_ChatBox_SetAllowedShout::_flag' has a wrong offset!");

// Function Stigma.UI_ChatBox.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct UI_ChatBox_SetHintText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatBox_SetHintText) == 0x000008, "Wrong alignment on UI_ChatBox_SetHintText");
static_assert(sizeof(UI_ChatBox_SetHintText) == 0x000018, "Wrong size on UI_ChatBox_SetHintText");
static_assert(offsetof(UI_ChatBox_SetHintText, _text) == 0x000000, "Member 'UI_ChatBox_SetHintText::_text' has a wrong offset!");

// Function Stigma.MissionArea.ActivateArea
// 0x0001 (0x0001 - 0x0000)
struct MissionArea_ActivateArea final
{
public:
	bool                                          _activate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionArea_ActivateArea) == 0x000001, "Wrong alignment on MissionArea_ActivateArea");
static_assert(sizeof(MissionArea_ActivateArea) == 0x000001, "Wrong size on MissionArea_ActivateArea");
static_assert(offsetof(MissionArea_ActivateArea, _activate) == 0x000000, "Member 'MissionArea_ActivateArea::_activate' has a wrong offset!");

// Function Stigma.MissionArea.OnCharaBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct MissionArea_OnCharaBeginOverlap final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionArea_OnCharaBeginOverlap) == 0x000008, "Wrong alignment on MissionArea_OnCharaBeginOverlap");
static_assert(sizeof(MissionArea_OnCharaBeginOverlap) == 0x000008, "Wrong size on MissionArea_OnCharaBeginOverlap");
static_assert(offsetof(MissionArea_OnCharaBeginOverlap, _chara) == 0x000000, "Member 'MissionArea_OnCharaBeginOverlap::_chara' has a wrong offset!");

// Function Stigma.MissionArea.OnCharaEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct MissionArea_OnCharaEndOverlap final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionArea_OnCharaEndOverlap) == 0x000008, "Wrong alignment on MissionArea_OnCharaEndOverlap");
static_assert(sizeof(MissionArea_OnCharaEndOverlap) == 0x000008, "Wrong size on MissionArea_OnCharaEndOverlap");
static_assert(offsetof(MissionArea_OnCharaEndOverlap, _chara) == 0x000000, "Member 'MissionArea_OnCharaEndOverlap::_chara' has a wrong offset!");

// Function Stigma.AGO_MeleeAttack.SetAttackPriorityColor
// 0x0001 (0x0001 - 0x0000)
struct AGO_MeleeAttack_SetAttackPriorityColor final
{
public:
	EAttackPriority                               _attackpriority;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AGO_MeleeAttack_SetAttackPriorityColor) == 0x000001, "Wrong alignment on AGO_MeleeAttack_SetAttackPriorityColor");
static_assert(sizeof(AGO_MeleeAttack_SetAttackPriorityColor) == 0x000001, "Wrong size on AGO_MeleeAttack_SetAttackPriorityColor");
static_assert(offsetof(AGO_MeleeAttack_SetAttackPriorityColor, _attackpriority) == 0x000000, "Member 'AGO_MeleeAttack_SetAttackPriorityColor::_attackpriority' has a wrong offset!");

// Function Stigma.MissionCondition.OnConditionReported
// 0x0020 (0x0020 - 0x0000)
struct MissionCondition_OnConditionReported final
{
public:
	struct FMissionConditionInfo                  _info;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionCondition_OnConditionReported) == 0x000008, "Wrong alignment on MissionCondition_OnConditionReported");
static_assert(sizeof(MissionCondition_OnConditionReported) == 0x000020, "Wrong size on MissionCondition_OnConditionReported");
static_assert(offsetof(MissionCondition_OnConditionReported, _info) == 0x000000, "Member 'MissionCondition_OnConditionReported::_info' has a wrong offset!");

// Function Stigma.MissionCondition.FailOnCalled
// 0x0001 (0x0001 - 0x0000)
struct MissionCondition_FailOnCalled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionCondition_FailOnCalled) == 0x000001, "Wrong alignment on MissionCondition_FailOnCalled");
static_assert(sizeof(MissionCondition_FailOnCalled) == 0x000001, "Wrong size on MissionCondition_FailOnCalled");
static_assert(offsetof(MissionCondition_FailOnCalled, ReturnValue) == 0x000000, "Member 'MissionCondition_FailOnCalled::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_KillLogPanel.AddKillLogSlot
// 0x0028 (0x0028 - 0x0000)
struct HUD_KillLogPanel_AddKillLogSlot final
{
public:
	struct FKillLog                               _kill_log;                                         // 0x0000(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogPanel_AddKillLogSlot) == 0x000008, "Wrong alignment on HUD_KillLogPanel_AddKillLogSlot");
static_assert(sizeof(HUD_KillLogPanel_AddKillLogSlot) == 0x000028, "Wrong size on HUD_KillLogPanel_AddKillLogSlot");
static_assert(offsetof(HUD_KillLogPanel_AddKillLogSlot, _kill_log) == 0x000000, "Member 'HUD_KillLogPanel_AddKillLogSlot::_kill_log' has a wrong offset!");

// Function Stigma.HUD_KillLogPanel.AddKillLogSlot_Bounty
// 0x0018 (0x0018 - 0x0000)
struct HUD_KillLogPanel_AddKillLogSlot_Bounty final
{
public:
	struct FActionLog_Bounty                      _bounty_log;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogPanel_AddKillLogSlot_Bounty) == 0x000008, "Wrong alignment on HUD_KillLogPanel_AddKillLogSlot_Bounty");
static_assert(sizeof(HUD_KillLogPanel_AddKillLogSlot_Bounty) == 0x000018, "Wrong size on HUD_KillLogPanel_AddKillLogSlot_Bounty");
static_assert(offsetof(HUD_KillLogPanel_AddKillLogSlot_Bounty, _bounty_log) == 0x000000, "Member 'HUD_KillLogPanel_AddKillLogSlot_Bounty::_bounty_log' has a wrong offset!");

// Function Stigma.HUD_KillLogPanel.AddKillLogSlot_ForRevive
// 0x0010 (0x0010 - 0x0000)
struct HUD_KillLogPanel_AddKillLogSlot_ForRevive final
{
public:
	struct FKillLog_ForRevive                     _kill_log_revive;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogPanel_AddKillLogSlot_ForRevive) == 0x000008, "Wrong alignment on HUD_KillLogPanel_AddKillLogSlot_ForRevive");
static_assert(sizeof(HUD_KillLogPanel_AddKillLogSlot_ForRevive) == 0x000010, "Wrong size on HUD_KillLogPanel_AddKillLogSlot_ForRevive");
static_assert(offsetof(HUD_KillLogPanel_AddKillLogSlot_ForRevive, _kill_log_revive) == 0x000000, "Member 'HUD_KillLogPanel_AddKillLogSlot_ForRevive::_kill_log_revive' has a wrong offset!");

// Function Stigma.HUD_KillLogPanel.GetSlotClassType
// 0x0008 (0x0008 - 0x0000)
struct HUD_KillLogPanel_GetSlotClassType final
{
public:
	TSubclassOf<class UHUD_KillLogSlot>           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogPanel_GetSlotClassType) == 0x000008, "Wrong alignment on HUD_KillLogPanel_GetSlotClassType");
static_assert(sizeof(HUD_KillLogPanel_GetSlotClassType) == 0x000008, "Wrong size on HUD_KillLogPanel_GetSlotClassType");
static_assert(offsetof(HUD_KillLogPanel_GetSlotClassType, ReturnValue) == 0x000000, "Member 'HUD_KillLogPanel_GetSlotClassType::ReturnValue' has a wrong offset!");

// Function Stigma.PreviewActor.GetPreviewActorType
// 0x0001 (0x0001 - 0x0000)
struct PreviewActor_GetPreviewActorType final
{
public:
	EPreviewActorType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreviewActor_GetPreviewActorType) == 0x000001, "Wrong alignment on PreviewActor_GetPreviewActorType");
static_assert(sizeof(PreviewActor_GetPreviewActorType) == 0x000001, "Wrong size on PreviewActor_GetPreviewActorType");
static_assert(offsetof(PreviewActor_GetPreviewActorType, ReturnValue) == 0x000000, "Member 'PreviewActor_GetPreviewActorType::ReturnValue' has a wrong offset!");

// Function Stigma.AIDeco_Base.PerformConditionCheck
// 0x0010 (0x0010 - 0x0000)
struct AIDeco_Base_PerformConditionCheck final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AIDeco_Base_PerformConditionCheck) == 0x000008, "Wrong alignment on AIDeco_Base_PerformConditionCheck");
static_assert(sizeof(AIDeco_Base_PerformConditionCheck) == 0x000010, "Wrong size on AIDeco_Base_PerformConditionCheck");
static_assert(offsetof(AIDeco_Base_PerformConditionCheck, OwnerActor) == 0x000000, "Member 'AIDeco_Base_PerformConditionCheck::OwnerActor' has a wrong offset!");
static_assert(offsetof(AIDeco_Base_PerformConditionCheck, ReturnValue) == 0x000008, "Member 'AIDeco_Base_PerformConditionCheck::ReturnValue' has a wrong offset!");

// Function Stigma.SafeBase.OnCharaBeginOverlapped
// 0x0008 (0x0008 - 0x0000)
struct SafeBase_OnCharaBeginOverlapped final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_OnCharaBeginOverlapped) == 0x000008, "Wrong alignment on SafeBase_OnCharaBeginOverlapped");
static_assert(sizeof(SafeBase_OnCharaBeginOverlapped) == 0x000008, "Wrong size on SafeBase_OnCharaBeginOverlapped");
static_assert(offsetof(SafeBase_OnCharaBeginOverlapped, _chara) == 0x000000, "Member 'SafeBase_OnCharaBeginOverlapped::_chara' has a wrong offset!");

// Function Stigma.SafeBase.OnCharaEndOverlapped
// 0x0008 (0x0008 - 0x0000)
struct SafeBase_OnCharaEndOverlapped final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_OnCharaEndOverlapped) == 0x000008, "Wrong alignment on SafeBase_OnCharaEndOverlapped");
static_assert(sizeof(SafeBase_OnCharaEndOverlapped) == 0x000008, "Wrong size on SafeBase_OnCharaEndOverlapped");
static_assert(offsetof(SafeBase_OnCharaEndOverlapped, _chara) == 0x000000, "Member 'SafeBase_OnCharaEndOverlapped::_chara' has a wrong offset!");

// Function Stigma.SafeBase.OnRep_InteractChara
// 0x0008 (0x0008 - 0x0000)
struct SafeBase_OnRep_InteractChara final
{
public:
	class ACharaBase*                             _old_chara;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_OnRep_InteractChara) == 0x000008, "Wrong alignment on SafeBase_OnRep_InteractChara");
static_assert(sizeof(SafeBase_OnRep_InteractChara) == 0x000008, "Wrong size on SafeBase_OnRep_InteractChara");
static_assert(offsetof(SafeBase_OnRep_InteractChara, _old_chara) == 0x000000, "Member 'SafeBase_OnRep_InteractChara::_old_chara' has a wrong offset!");

// Function Stigma.SafeBase.SERVER_SetSafeState
// 0x0001 (0x0001 - 0x0000)
struct SafeBase_SERVER_SetSafeState final
{
public:
	ESafeState                                    _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_SERVER_SetSafeState) == 0x000001, "Wrong alignment on SafeBase_SERVER_SetSafeState");
static_assert(sizeof(SafeBase_SERVER_SetSafeState) == 0x000001, "Wrong size on SafeBase_SERVER_SetSafeState");
static_assert(offsetof(SafeBase_SERVER_SetSafeState, _state) == 0x000000, "Member 'SafeBase_SERVER_SetSafeState::_state' has a wrong offset!");

// Function Stigma.SafeBase.Setter_InteractChara
// 0x0008 (0x0008 - 0x0000)
struct SafeBase_Setter_InteractChara final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_Setter_InteractChara) == 0x000008, "Wrong alignment on SafeBase_Setter_InteractChara");
static_assert(sizeof(SafeBase_Setter_InteractChara) == 0x000008, "Wrong size on SafeBase_Setter_InteractChara");
static_assert(offsetof(SafeBase_Setter_InteractChara, _chara) == 0x000000, "Member 'SafeBase_Setter_InteractChara::_chara' has a wrong offset!");

// Function Stigma.SafeBase.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct SafeBase_CanInteract final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SafeBase_CanInteract) == 0x000008, "Wrong alignment on SafeBase_CanInteract");
static_assert(sizeof(SafeBase_CanInteract) == 0x000010, "Wrong size on SafeBase_CanInteract");
static_assert(offsetof(SafeBase_CanInteract, _involver) == 0x000000, "Member 'SafeBase_CanInteract::_involver' has a wrong offset!");
static_assert(offsetof(SafeBase_CanInteract, ReturnValue) == 0x000008, "Member 'SafeBase_CanInteract::ReturnValue' has a wrong offset!");

// Function Stigma.SafeBase.GetActorDisplayName
// 0x0018 (0x0018 - 0x0000)
struct SafeBase_GetActorDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_GetActorDisplayName) == 0x000008, "Wrong alignment on SafeBase_GetActorDisplayName");
static_assert(sizeof(SafeBase_GetActorDisplayName) == 0x000018, "Wrong size on SafeBase_GetActorDisplayName");
static_assert(offsetof(SafeBase_GetActorDisplayName, ReturnValue) == 0x000000, "Member 'SafeBase_GetActorDisplayName::ReturnValue' has a wrong offset!");

// Function Stigma.SafeBase.GetActorIcon
// 0x0008 (0x0008 - 0x0000)
struct SafeBase_GetActorIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_GetActorIcon) == 0x000008, "Wrong alignment on SafeBase_GetActorIcon");
static_assert(sizeof(SafeBase_GetActorIcon) == 0x000008, "Wrong size on SafeBase_GetActorIcon");
static_assert(offsetof(SafeBase_GetActorIcon, ReturnValue) == 0x000000, "Member 'SafeBase_GetActorIcon::ReturnValue' has a wrong offset!");

// Function Stigma.SafeBase.GetDisplayText
// 0x0020 (0x0020 - 0x0000)
struct SafeBase_GetDisplayText final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_GetDisplayText) == 0x000008, "Wrong alignment on SafeBase_GetDisplayText");
static_assert(sizeof(SafeBase_GetDisplayText) == 0x000020, "Wrong size on SafeBase_GetDisplayText");
static_assert(offsetof(SafeBase_GetDisplayText, _involver) == 0x000000, "Member 'SafeBase_GetDisplayText::_involver' has a wrong offset!");
static_assert(offsetof(SafeBase_GetDisplayText, ReturnValue) == 0x000008, "Member 'SafeBase_GetDisplayText::ReturnValue' has a wrong offset!");

// Function Stigma.SafeBase.GetOwnTeam
// 0x0001 (0x0001 - 0x0000)
struct SafeBase_GetOwnTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SafeBase_GetOwnTeam) == 0x000001, "Wrong alignment on SafeBase_GetOwnTeam");
static_assert(sizeof(SafeBase_GetOwnTeam) == 0x000001, "Wrong size on SafeBase_GetOwnTeam");
static_assert(offsetof(SafeBase_GetOwnTeam, ReturnValue) == 0x000000, "Member 'SafeBase_GetOwnTeam::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_EmoticonWidgetBase.InitWidget
// 0x0138 (0x0138 - 0x0000)
struct HUD_EmoticonWidgetBase_InitWidget final
{
public:
	struct FConfig_Emoticon                       _emoticon_def;                                     // 0x0000(0x0138)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_EmoticonWidgetBase_InitWidget) == 0x000008, "Wrong alignment on HUD_EmoticonWidgetBase_InitWidget");
static_assert(sizeof(HUD_EmoticonWidgetBase_InitWidget) == 0x000138, "Wrong size on HUD_EmoticonWidgetBase_InitWidget");
static_assert(offsetof(HUD_EmoticonWidgetBase_InitWidget, _emoticon_def) == 0x000000, "Member 'HUD_EmoticonWidgetBase_InitWidget::_emoticon_def' has a wrong offset!");

// Function Stigma.Annihilation_PlayerController.RPC_CLIENT_AddSupplyStoreLog
// 0x0018 (0x0018 - 0x0000)
struct Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog final
{
public:
	class ASupplyStore*                           _store;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _value;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_cool;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog) == 0x000008, "Wrong alignment on Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog");
static_assert(sizeof(Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog) == 0x000018, "Wrong size on Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog");
static_assert(offsetof(Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog, _store) == 0x000000, "Member 'Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog::_store' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog, _index) == 0x000008, "Member 'Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog::_index' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog, _value) == 0x00000C, "Member 'Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog::_value' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog, _is_cool) == 0x000010, "Member 'Annihilation_PlayerController_RPC_CLIENT_AddSupplyStoreLog::_is_cool' has a wrong offset!");

// Function Stigma.Annihilation_PlayerController.RPC_SERVER_RequestPurchase_SupplyItem
// 0x0010 (0x0010 - 0x0000)
struct Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem final
{
public:
	class ASupplyStore*                           _store;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E1[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem) == 0x000008, "Wrong alignment on Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem");
static_assert(sizeof(Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem) == 0x000010, "Wrong size on Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem");
static_assert(offsetof(Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem, _store) == 0x000000, "Member 'Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem::_store' has a wrong offset!");
static_assert(offsetof(Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem, _index) == 0x000008, "Member 'Annihilation_PlayerController_RPC_SERVER_RequestPurchase_SupplyItem::_index' has a wrong offset!");

// Function Stigma.Annihilation_PlayerController.GetEnemyTeam
// 0x0001 (0x0001 - 0x0000)
struct Annihilation_PlayerController_GetEnemyTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Annihilation_PlayerController_GetEnemyTeam) == 0x000001, "Wrong alignment on Annihilation_PlayerController_GetEnemyTeam");
static_assert(sizeof(Annihilation_PlayerController_GetEnemyTeam) == 0x000001, "Wrong size on Annihilation_PlayerController_GetEnemyTeam");
static_assert(offsetof(Annihilation_PlayerController_GetEnemyTeam, ReturnValue) == 0x000000, "Member 'Annihilation_PlayerController_GetEnemyTeam::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.CanRewardAnyMissions
// 0x0028 (0x0028 - 0x0000)
struct LocalPlayerContextTool_CanRewardAnyMissions final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _check_only_auto_reward;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _task_id;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E4[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_CanRewardAnyMissions) == 0x000008, "Wrong alignment on LocalPlayerContextTool_CanRewardAnyMissions");
static_assert(sizeof(LocalPlayerContextTool_CanRewardAnyMissions) == 0x000028, "Wrong size on LocalPlayerContextTool_CanRewardAnyMissions");
static_assert(offsetof(LocalPlayerContextTool_CanRewardAnyMissions, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_CanRewardAnyMissions::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_CanRewardAnyMissions, _check_only_auto_reward) == 0x000008, "Member 'LocalPlayerContextTool_CanRewardAnyMissions::_check_only_auto_reward' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_CanRewardAnyMissions, _task_id) == 0x000010, "Member 'LocalPlayerContextTool_CanRewardAnyMissions::_task_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_CanRewardAnyMissions, ReturnValue) == 0x000020, "Member 'LocalPlayerContextTool_CanRewardAnyMissions::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.FindAppliedFunctionsByID
// 0x0050 (0x0050 - 0x0000)
struct LocalPlayerContextTool_FindAppliedFunctionsByID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _func_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAppliedFunction                       _out_function;                                     // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E5[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_FindAppliedFunctionsByID) == 0x000008, "Wrong alignment on LocalPlayerContextTool_FindAppliedFunctionsByID");
static_assert(sizeof(LocalPlayerContextTool_FindAppliedFunctionsByID) == 0x000050, "Wrong size on LocalPlayerContextTool_FindAppliedFunctionsByID");
static_assert(offsetof(LocalPlayerContextTool_FindAppliedFunctionsByID, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_FindAppliedFunctionsByID::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindAppliedFunctionsByID, _func_id) == 0x000008, "Member 'LocalPlayerContextTool_FindAppliedFunctionsByID::_func_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindAppliedFunctionsByID, _out_function) == 0x000018, "Member 'LocalPlayerContextTool_FindAppliedFunctionsByID::_out_function' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindAppliedFunctionsByID, ReturnValue) == 0x000048, "Member 'LocalPlayerContextTool_FindAppliedFunctionsByID::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.FindGMFunctionByGMFuncID
// 0x0060 (0x0060 - 0x0000)
struct LocalPlayerContextTool_FindGMFunctionByGMFuncID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _gm_func_id;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGMFunction                            _out_function;                                     // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E7[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_FindGMFunctionByGMFuncID) == 0x000008, "Wrong alignment on LocalPlayerContextTool_FindGMFunctionByGMFuncID");
static_assert(sizeof(LocalPlayerContextTool_FindGMFunctionByGMFuncID) == 0x000060, "Wrong size on LocalPlayerContextTool_FindGMFunctionByGMFuncID");
static_assert(offsetof(LocalPlayerContextTool_FindGMFunctionByGMFuncID, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_FindGMFunctionByGMFuncID::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindGMFunctionByGMFuncID, _gm_func_id) == 0x000008, "Member 'LocalPlayerContextTool_FindGMFunctionByGMFuncID::_gm_func_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindGMFunctionByGMFuncID, _out_function) == 0x000010, "Member 'LocalPlayerContextTool_FindGMFunctionByGMFuncID::_out_function' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindGMFunctionByGMFuncID, ReturnValue) == 0x000058, "Member 'LocalPlayerContextTool_FindGMFunctionByGMFuncID::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.FindMission
// 0x0038 (0x0038 - 0x0000)
struct LocalPlayerContextTool_FindMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _task_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        _mission_id;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMission*                               ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContextTool_FindMission) == 0x000008, "Wrong alignment on LocalPlayerContextTool_FindMission");
static_assert(sizeof(LocalPlayerContextTool_FindMission) == 0x000038, "Wrong size on LocalPlayerContextTool_FindMission");
static_assert(offsetof(LocalPlayerContextTool_FindMission, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_FindMission::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindMission, _task_id) == 0x000008, "Member 'LocalPlayerContextTool_FindMission::_task_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindMission, _idx) == 0x000018, "Member 'LocalPlayerContextTool_FindMission::_idx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindMission, _mission_id) == 0x000020, "Member 'LocalPlayerContextTool_FindMission::_mission_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_FindMission, ReturnValue) == 0x000030, "Member 'LocalPlayerContextTool_FindMission::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.Get
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerContextTool_Get final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayerContext*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContextTool_Get) == 0x000008, "Wrong alignment on LocalPlayerContextTool_Get");
static_assert(sizeof(LocalPlayerContextTool_Get) == 0x000010, "Wrong size on LocalPlayerContextTool_Get");
static_assert(offsetof(LocalPlayerContextTool_Get, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_Get::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_Get, ReturnValue) == 0x000008, "Member 'LocalPlayerContextTool_Get::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.GetCompetitionInfoManager
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerContextTool_GetCompetitionInfoManager final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCompetitionInfoManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContextTool_GetCompetitionInfoManager) == 0x000008, "Wrong alignment on LocalPlayerContextTool_GetCompetitionInfoManager");
static_assert(sizeof(LocalPlayerContextTool_GetCompetitionInfoManager) == 0x000010, "Wrong size on LocalPlayerContextTool_GetCompetitionInfoManager");
static_assert(offsetof(LocalPlayerContextTool_GetCompetitionInfoManager, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_GetCompetitionInfoManager::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetCompetitionInfoManager, ReturnValue) == 0x000008, "Member 'LocalPlayerContextTool_GetCompetitionInfoManager::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.GetCompletedMissionCountByTaskID
// 0x0020 (0x0020 - 0x0000)
struct LocalPlayerContextTool_GetCompletedMissionCountByTaskID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _task_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E9[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_GetCompletedMissionCountByTaskID) == 0x000008, "Wrong alignment on LocalPlayerContextTool_GetCompletedMissionCountByTaskID");
static_assert(sizeof(LocalPlayerContextTool_GetCompletedMissionCountByTaskID) == 0x000020, "Wrong size on LocalPlayerContextTool_GetCompletedMissionCountByTaskID");
static_assert(offsetof(LocalPlayerContextTool_GetCompletedMissionCountByTaskID, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_GetCompletedMissionCountByTaskID::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetCompletedMissionCountByTaskID, _task_id) == 0x000008, "Member 'LocalPlayerContextTool_GetCompletedMissionCountByTaskID::_task_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetCompletedMissionCountByTaskID, ReturnValue) == 0x000018, "Member 'LocalPlayerContextTool_GetCompletedMissionCountByTaskID::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.GetMissionsByTaskID
// 0x0028 (0x0028 - 0x0000)
struct LocalPlayerContextTool_GetMissionsByTaskID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _task_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMission*>                       _out_missions;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContextTool_GetMissionsByTaskID) == 0x000008, "Wrong alignment on LocalPlayerContextTool_GetMissionsByTaskID");
static_assert(sizeof(LocalPlayerContextTool_GetMissionsByTaskID) == 0x000028, "Wrong size on LocalPlayerContextTool_GetMissionsByTaskID");
static_assert(offsetof(LocalPlayerContextTool_GetMissionsByTaskID, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_GetMissionsByTaskID::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetMissionsByTaskID, _task_id) == 0x000008, "Member 'LocalPlayerContextTool_GetMissionsByTaskID::_task_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetMissionsByTaskID, _out_missions) == 0x000018, "Member 'LocalPlayerContextTool_GetMissionsByTaskID::_out_missions' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.GetProgressingTrackMission
// 0x0078 (0x0078 - 0x0000)
struct LocalPlayerContextTool_GetProgressingTrackMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_EventPage                      _track_id;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EMissionProgressType>                    _progress_types;                                   // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _get_first;                                        // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EA[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContextTool_GetProgressingTrackMission) == 0x000008, "Wrong alignment on LocalPlayerContextTool_GetProgressingTrackMission");
static_assert(sizeof(LocalPlayerContextTool_GetProgressingTrackMission) == 0x000078, "Wrong size on LocalPlayerContextTool_GetProgressingTrackMission");
static_assert(offsetof(LocalPlayerContextTool_GetProgressingTrackMission, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_GetProgressingTrackMission::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetProgressingTrackMission, _track_id) == 0x000008, "Member 'LocalPlayerContextTool_GetProgressingTrackMission::_track_id' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetProgressingTrackMission, _progress_types) == 0x000018, "Member 'LocalPlayerContextTool_GetProgressingTrackMission::_progress_types' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetProgressingTrackMission, _get_first) == 0x000068, "Member 'LocalPlayerContextTool_GetProgressingTrackMission::_get_first' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_GetProgressingTrackMission, ReturnValue) == 0x000070, "Member 'LocalPlayerContextTool_GetProgressingTrackMission::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.HasMasterMission
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerContextTool_HasMasterMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EB[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_HasMasterMission) == 0x000008, "Wrong alignment on LocalPlayerContextTool_HasMasterMission");
static_assert(sizeof(LocalPlayerContextTool_HasMasterMission) == 0x000010, "Wrong size on LocalPlayerContextTool_HasMasterMission");
static_assert(offsetof(LocalPlayerContextTool_HasMasterMission, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_HasMasterMission::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_HasMasterMission, _chara_type) == 0x000008, "Member 'LocalPlayerContextTool_HasMasterMission::_chara_type' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_HasMasterMission, ReturnValue) == 0x000009, "Member 'LocalPlayerContextTool_HasMasterMission::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.IsBoosterSlotActive
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerContextTool_IsBoosterSlotActive final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot_zidx;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EC[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_IsBoosterSlotActive) == 0x000008, "Wrong alignment on LocalPlayerContextTool_IsBoosterSlotActive");
static_assert(sizeof(LocalPlayerContextTool_IsBoosterSlotActive) == 0x000010, "Wrong size on LocalPlayerContextTool_IsBoosterSlotActive");
static_assert(offsetof(LocalPlayerContextTool_IsBoosterSlotActive, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_IsBoosterSlotActive::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_IsBoosterSlotActive, _slot_zidx) == 0x000008, "Member 'LocalPlayerContextTool_IsBoosterSlotActive::_slot_zidx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_IsBoosterSlotActive, ReturnValue) == 0x00000C, "Member 'LocalPlayerContextTool_IsBoosterSlotActive::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.IsMasterFirstMissionCompleted
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerContextTool_IsMasterFirstMissionCompleted final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20ED[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalPlayerContextTool_IsMasterFirstMissionCompleted) == 0x000008, "Wrong alignment on LocalPlayerContextTool_IsMasterFirstMissionCompleted");
static_assert(sizeof(LocalPlayerContextTool_IsMasterFirstMissionCompleted) == 0x000010, "Wrong size on LocalPlayerContextTool_IsMasterFirstMissionCompleted");
static_assert(offsetof(LocalPlayerContextTool_IsMasterFirstMissionCompleted, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_IsMasterFirstMissionCompleted::_world_ctx' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_IsMasterFirstMissionCompleted, _chara_type) == 0x000008, "Member 'LocalPlayerContextTool_IsMasterFirstMissionCompleted::_chara_type' has a wrong offset!");
static_assert(offsetof(LocalPlayerContextTool_IsMasterFirstMissionCompleted, ReturnValue) == 0x000009, "Member 'LocalPlayerContextTool_IsMasterFirstMissionCompleted::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContextTool.MarkRefreshInventoryRedDot
// 0x0008 (0x0008 - 0x0000)
struct LocalPlayerContextTool_MarkRefreshInventoryRedDot final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContextTool_MarkRefreshInventoryRedDot) == 0x000008, "Wrong alignment on LocalPlayerContextTool_MarkRefreshInventoryRedDot");
static_assert(sizeof(LocalPlayerContextTool_MarkRefreshInventoryRedDot) == 0x000008, "Wrong size on LocalPlayerContextTool_MarkRefreshInventoryRedDot");
static_assert(offsetof(LocalPlayerContextTool_MarkRefreshInventoryRedDot, _world_ctx) == 0x000000, "Member 'LocalPlayerContextTool_MarkRefreshInventoryRedDot::_world_ctx' has a wrong offset!");

// Function Stigma.UI_MissionBriefContainer.OnMissionUpdated
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionBriefContainer_OnMissionUpdated final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _mission;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefContainer_OnMissionUpdated) == 0x000008, "Wrong alignment on UI_MissionBriefContainer_OnMissionUpdated");
static_assert(sizeof(UI_MissionBriefContainer_OnMissionUpdated) == 0x000010, "Wrong size on UI_MissionBriefContainer_OnMissionUpdated");
static_assert(offsetof(UI_MissionBriefContainer_OnMissionUpdated, _type) == 0x000000, "Member 'UI_MissionBriefContainer_OnMissionUpdated::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionBriefContainer_OnMissionUpdated, _mission) == 0x000008, "Member 'UI_MissionBriefContainer_OnMissionUpdated::_mission' has a wrong offset!");

// Function Stigma.UI_MissionBriefContainer.SetLocked
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionBriefContainer_SetLocked final
{
public:
	EMissionType                                  _mission_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _limited_level;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefContainer_SetLocked) == 0x000004, "Wrong alignment on UI_MissionBriefContainer_SetLocked");
static_assert(sizeof(UI_MissionBriefContainer_SetLocked) == 0x000008, "Wrong size on UI_MissionBriefContainer_SetLocked");
static_assert(offsetof(UI_MissionBriefContainer_SetLocked, _mission_type) == 0x000000, "Member 'UI_MissionBriefContainer_SetLocked::_mission_type' has a wrong offset!");
static_assert(offsetof(UI_MissionBriefContainer_SetLocked, _limited_level) == 0x000004, "Member 'UI_MissionBriefContainer_SetLocked::_limited_level' has a wrong offset!");

// Function Stigma.UI_MailListItem.OnClickSelect
// 0x0001 (0x0001 - 0x0000)
struct UI_MailListItem_OnClickSelect final
{
public:
	bool                                          _is_selected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailListItem_OnClickSelect) == 0x000001, "Wrong alignment on UI_MailListItem_OnClickSelect");
static_assert(sizeof(UI_MailListItem_OnClickSelect) == 0x000001, "Wrong size on UI_MailListItem_OnClickSelect");
static_assert(offsetof(UI_MailListItem_OnClickSelect, _is_selected) == 0x000000, "Member 'UI_MailListItem_OnClickSelect::_is_selected' has a wrong offset!");

// Function Stigma.HUD_KillStreakWidget.InitWidget
// 0x00E0 (0x00E0 - 0x0000)
struct HUD_KillStreakWidget_InitWidget final
{
public:
	struct FKillStreakDefine                      _kill_streak_def;                                  // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillStreakWidget_InitWidget) == 0x000008, "Wrong alignment on HUD_KillStreakWidget_InitWidget");
static_assert(sizeof(HUD_KillStreakWidget_InitWidget) == 0x0000E0, "Wrong size on HUD_KillStreakWidget_InitWidget");
static_assert(offsetof(HUD_KillStreakWidget_InitWidget, _kill_streak_def) == 0x000000, "Member 'HUD_KillStreakWidget_InitWidget::_kill_streak_def' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupContainerMaster_InitWidget final
{
public:
	struct FItemID_EventPage                      _master_event_id;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_InitWidget) == 0x000008, "Wrong alignment on UI_MissionPopupContainerMaster_InitWidget");
static_assert(sizeof(UI_MissionPopupContainerMaster_InitWidget) == 0x000010, "Wrong size on UI_MissionPopupContainerMaster_InitWidget");
static_assert(offsetof(UI_MissionPopupContainerMaster_InitWidget, _master_event_id) == 0x000000, "Member 'UI_MissionPopupContainerMaster_InitWidget::_master_event_id' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.OnMasterButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupContainerMaster_OnMasterButtonSelected final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_MissionPopupContainerMaster_OnMasterButtonSelected) == 0x000008, "Wrong alignment on UI_MissionPopupContainerMaster_OnMasterButtonSelected");
static_assert(sizeof(UI_MissionPopupContainerMaster_OnMasterButtonSelected) == 0x000010, "Wrong size on UI_MissionPopupContainerMaster_OnMasterButtonSelected");
static_assert(offsetof(UI_MissionPopupContainerMaster_OnMasterButtonSelected, _widget) == 0x000000, "Member 'UI_MissionPopupContainerMaster_OnMasterButtonSelected::_widget' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerMaster_OnMasterButtonSelected, _selected) == 0x000008, "Member 'UI_MissionPopupContainerMaster_OnMasterButtonSelected::_selected' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.SetCanReward
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerMaster_SetCanReward final
{
public:
	bool                                          _can_reward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_SetCanReward) == 0x000001, "Wrong alignment on UI_MissionPopupContainerMaster_SetCanReward");
static_assert(sizeof(UI_MissionPopupContainerMaster_SetCanReward) == 0x000001, "Wrong size on UI_MissionPopupContainerMaster_SetCanReward");
static_assert(offsetof(UI_MissionPopupContainerMaster_SetCanReward, _can_reward) == 0x000000, "Member 'UI_MissionPopupContainerMaster_SetCanReward::_can_reward' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.SetMasterExpPercent
// 0x0004 (0x0004 - 0x0000)
struct UI_MissionPopupContainerMaster_SetMasterExpPercent final
{
public:
	float                                         _percent;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_SetMasterExpPercent) == 0x000004, "Wrong alignment on UI_MissionPopupContainerMaster_SetMasterExpPercent");
static_assert(sizeof(UI_MissionPopupContainerMaster_SetMasterExpPercent) == 0x000004, "Wrong size on UI_MissionPopupContainerMaster_SetMasterExpPercent");
static_assert(offsetof(UI_MissionPopupContainerMaster_SetMasterExpPercent, _percent) == 0x000000, "Member 'UI_MissionPopupContainerMaster_SetMasterExpPercent::_percent' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.SetMissionChangeCount
// 0x0004 (0x0004 - 0x0000)
struct UI_MissionPopupContainerMaster_SetMissionChangeCount final
{
public:
	int32                                         _current_count;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_SetMissionChangeCount) == 0x000004, "Wrong alignment on UI_MissionPopupContainerMaster_SetMissionChangeCount");
static_assert(sizeof(UI_MissionPopupContainerMaster_SetMissionChangeCount) == 0x000004, "Wrong size on UI_MissionPopupContainerMaster_SetMissionChangeCount");
static_assert(offsetof(UI_MissionPopupContainerMaster_SetMissionChangeCount, _current_count) == 0x000000, "Member 'UI_MissionPopupContainerMaster_SetMissionChangeCount::_current_count' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupContainerMaster_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_SetTitle) == 0x000008, "Wrong alignment on UI_MissionPopupContainerMaster_SetTitle");
static_assert(sizeof(UI_MissionPopupContainerMaster_SetTitle) == 0x000018, "Wrong size on UI_MissionPopupContainerMaster_SetTitle");
static_assert(offsetof(UI_MissionPopupContainerMaster_SetTitle, _text) == 0x000000, "Member 'UI_MissionPopupContainerMaster_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.SetTitleReward
// 0x00F0 (0x00F0 - 0x0000)
struct UI_MissionPopupContainerMaster_SetTitleReward final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FF[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            _brush;                                            // 0x0020(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_SetTitleReward) == 0x000010, "Wrong alignment on UI_MissionPopupContainerMaster_SetTitleReward");
static_assert(sizeof(UI_MissionPopupContainerMaster_SetTitleReward) == 0x0000F0, "Wrong size on UI_MissionPopupContainerMaster_SetTitleReward");
static_assert(offsetof(UI_MissionPopupContainerMaster_SetTitleReward, _text) == 0x000000, "Member 'UI_MissionPopupContainerMaster_SetTitleReward::_text' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerMaster_SetTitleReward, _brush) == 0x000020, "Member 'UI_MissionPopupContainerMaster_SetTitleReward::_brush' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.UserLevelLocked
// 0x0004 (0x0004 - 0x0000)
struct UI_MissionPopupContainerMaster_UserLevelLocked final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_UserLevelLocked) == 0x000004, "Wrong alignment on UI_MissionPopupContainerMaster_UserLevelLocked");
static_assert(sizeof(UI_MissionPopupContainerMaster_UserLevelLocked) == 0x000004, "Wrong size on UI_MissionPopupContainerMaster_UserLevelLocked");
static_assert(offsetof(UI_MissionPopupContainerMaster_UserLevelLocked, _level) == 0x000000, "Member 'UI_MissionPopupContainerMaster_UserLevelLocked::_level' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerMaster.GetCurrentCharaType
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerMaster_GetCurrentCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerMaster_GetCurrentCharaType) == 0x000001, "Wrong alignment on UI_MissionPopupContainerMaster_GetCurrentCharaType");
static_assert(sizeof(UI_MissionPopupContainerMaster_GetCurrentCharaType) == 0x000001, "Wrong size on UI_MissionPopupContainerMaster_GetCurrentCharaType");
static_assert(offsetof(UI_MissionPopupContainerMaster_GetCurrentCharaType, ReturnValue) == 0x000000, "Member 'UI_MissionPopupContainerMaster_GetCurrentCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.AIRoamingPointVolume.GetRandomLocationInVolume
// 0x0018 (0x0018 - 0x0000)
struct AIRoamingPointVolume_GetRandomLocationInVolume final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIRoamingPointVolume_GetRandomLocationInVolume) == 0x000008, "Wrong alignment on AIRoamingPointVolume_GetRandomLocationInVolume");
static_assert(sizeof(AIRoamingPointVolume_GetRandomLocationInVolume) == 0x000018, "Wrong size on AIRoamingPointVolume_GetRandomLocationInVolume");
static_assert(offsetof(AIRoamingPointVolume_GetRandomLocationInVolume, ReturnValue) == 0x000000, "Member 'AIRoamingPointVolume_GetRandomLocationInVolume::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.AddAIAsPlayer
// 0x0058 (0x0058 - 0x0000)
struct MatchServicedGameMode_AddAIAsPlayer final
{
public:
	class FString                                 _nickname;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        _Team;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2102[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class AAICharaBase>               _Class;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2103[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UBehaviorTree*                          _BT;                                               // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAI_Characteristic                     _characteristic;                                   // 0x0030(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _hp_scaler;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _armor_scaler;                                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _action_stock_scaler;                              // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _bullet_scaler;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2104[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class AMatchServicedPlayerState*              ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_AddAIAsPlayer) == 0x000008, "Wrong alignment on MatchServicedGameMode_AddAIAsPlayer");
static_assert(sizeof(MatchServicedGameMode_AddAIAsPlayer) == 0x000058, "Wrong size on MatchServicedGameMode_AddAIAsPlayer");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _nickname) == 0x000000, "Member 'MatchServicedGameMode_AddAIAsPlayer::_nickname' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _Team) == 0x000010, "Member 'MatchServicedGameMode_AddAIAsPlayer::_Team' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _Class) == 0x000018, "Member 'MatchServicedGameMode_AddAIAsPlayer::_Class' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _chara_type) == 0x000020, "Member 'MatchServicedGameMode_AddAIAsPlayer::_chara_type' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _BT) == 0x000028, "Member 'MatchServicedGameMode_AddAIAsPlayer::_BT' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _characteristic) == 0x000030, "Member 'MatchServicedGameMode_AddAIAsPlayer::_characteristic' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _hp_scaler) == 0x00003C, "Member 'MatchServicedGameMode_AddAIAsPlayer::_hp_scaler' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _armor_scaler) == 0x000040, "Member 'MatchServicedGameMode_AddAIAsPlayer::_armor_scaler' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _action_stock_scaler) == 0x000044, "Member 'MatchServicedGameMode_AddAIAsPlayer::_action_stock_scaler' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, _bullet_scaler) == 0x000048, "Member 'MatchServicedGameMode_AddAIAsPlayer::_bullet_scaler' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddAIAsPlayer, ReturnValue) == 0x000050, "Member 'MatchServicedGameMode_AddAIAsPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.AddMissionConditionReport
// 0x0028 (0x0028 - 0x0000)
struct MatchServicedGameMode_AddMissionConditionReport final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionConditionType                         _type;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2105[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _sub_type;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2106[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MatchServicedGameMode_AddMissionConditionReport) == 0x000008, "Wrong alignment on MatchServicedGameMode_AddMissionConditionReport");
static_assert(sizeof(MatchServicedGameMode_AddMissionConditionReport) == 0x000028, "Wrong size on MatchServicedGameMode_AddMissionConditionReport");
static_assert(offsetof(MatchServicedGameMode_AddMissionConditionReport, _user_id) == 0x000000, "Member 'MatchServicedGameMode_AddMissionConditionReport::_user_id' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddMissionConditionReport, _type) == 0x000008, "Member 'MatchServicedGameMode_AddMissionConditionReport::_type' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddMissionConditionReport, _sub_type) == 0x000010, "Member 'MatchServicedGameMode_AddMissionConditionReport::_sub_type' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddMissionConditionReport, _value) == 0x000020, "Member 'MatchServicedGameMode_AddMissionConditionReport::_value' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.AddPlaceHolder
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedGameMode_AddPlaceHolder final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2107[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _elo;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMatchServicedPlayerState*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_AddPlaceHolder) == 0x000008, "Wrong alignment on MatchServicedGameMode_AddPlaceHolder");
static_assert(sizeof(MatchServicedGameMode_AddPlaceHolder) == 0x000010, "Wrong size on MatchServicedGameMode_AddPlaceHolder");
static_assert(offsetof(MatchServicedGameMode_AddPlaceHolder, _Team) == 0x000000, "Member 'MatchServicedGameMode_AddPlaceHolder::_Team' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddPlaceHolder, _elo) == 0x000004, "Member 'MatchServicedGameMode_AddPlaceHolder::_elo' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_AddPlaceHolder, ReturnValue) == 0x000008, "Member 'MatchServicedGameMode_AddPlaceHolder::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.FindPlayerStartByTeam
// 0x0010 (0x0010 - 0x0000)
struct MatchServicedGameMode_FindPlayerStartByTeam final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2108[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerStart*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_FindPlayerStartByTeam) == 0x000008, "Wrong alignment on MatchServicedGameMode_FindPlayerStartByTeam");
static_assert(sizeof(MatchServicedGameMode_FindPlayerStartByTeam) == 0x000010, "Wrong size on MatchServicedGameMode_FindPlayerStartByTeam");
static_assert(offsetof(MatchServicedGameMode_FindPlayerStartByTeam, _Team) == 0x000000, "Member 'MatchServicedGameMode_FindPlayerStartByTeam::_Team' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_FindPlayerStartByTeam, ReturnValue) == 0x000008, "Member 'MatchServicedGameMode_FindPlayerStartByTeam::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.OnQuery_IsReadyForStarting
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameMode_OnQuery_IsReadyForStarting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_OnQuery_IsReadyForStarting) == 0x000001, "Wrong alignment on MatchServicedGameMode_OnQuery_IsReadyForStarting");
static_assert(sizeof(MatchServicedGameMode_OnQuery_IsReadyForStarting) == 0x000001, "Wrong size on MatchServicedGameMode_OnQuery_IsReadyForStarting");
static_assert(offsetof(MatchServicedGameMode_OnQuery_IsReadyForStarting, ReturnValue) == 0x000000, "Member 'MatchServicedGameMode_OnQuery_IsReadyForStarting::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.OnQuery_SendBattlePing
// 0x0001 (0x0001 - 0x0000)
struct MatchServicedGameMode_OnQuery_SendBattlePing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_OnQuery_SendBattlePing) == 0x000001, "Wrong alignment on MatchServicedGameMode_OnQuery_SendBattlePing");
static_assert(sizeof(MatchServicedGameMode_OnQuery_SendBattlePing) == 0x000001, "Wrong size on MatchServicedGameMode_OnQuery_SendBattlePing");
static_assert(offsetof(MatchServicedGameMode_OnQuery_SendBattlePing, ReturnValue) == 0x000000, "Member 'MatchServicedGameMode_OnQuery_SendBattlePing::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.GetTeamMemberCount
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedGameMode_GetTeamMemberCount final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2109[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_GetTeamMemberCount) == 0x000004, "Wrong alignment on MatchServicedGameMode_GetTeamMemberCount");
static_assert(sizeof(MatchServicedGameMode_GetTeamMemberCount) == 0x000008, "Wrong size on MatchServicedGameMode_GetTeamMemberCount");
static_assert(offsetof(MatchServicedGameMode_GetTeamMemberCount, _Team) == 0x000000, "Member 'MatchServicedGameMode_GetTeamMemberCount::_Team' has a wrong offset!");
static_assert(offsetof(MatchServicedGameMode_GetTeamMemberCount, ReturnValue) == 0x000004, "Member 'MatchServicedGameMode_GetTeamMemberCount::ReturnValue' has a wrong offset!");

// Function Stigma.MatchServicedGameMode.OnQuery_FinishBattle
// 0x0008 (0x0008 - 0x0000)
struct MatchServicedGameMode_OnQuery_FinishBattle final
{
public:
	struct FBattleFinish                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchServicedGameMode_OnQuery_FinishBattle) == 0x000004, "Wrong alignment on MatchServicedGameMode_OnQuery_FinishBattle");
static_assert(sizeof(MatchServicedGameMode_OnQuery_FinishBattle) == 0x000008, "Wrong size on MatchServicedGameMode_OnQuery_FinishBattle");
static_assert(offsetof(MatchServicedGameMode_OnQuery_FinishBattle, ReturnValue) == 0x000000, "Member 'MatchServicedGameMode_OnQuery_FinishBattle::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomGameMode.GetStartingDuration
// 0x0004 (0x0004 - 0x0000)
struct WaitingRoomGameMode_GetStartingDuration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameMode_GetStartingDuration) == 0x000004, "Wrong alignment on WaitingRoomGameMode_GetStartingDuration");
static_assert(sizeof(WaitingRoomGameMode_GetStartingDuration) == 0x000004, "Wrong size on WaitingRoomGameMode_GetStartingDuration");
static_assert(offsetof(WaitingRoomGameMode_GetStartingDuration, ReturnValue) == 0x000000, "Member 'WaitingRoomGameMode_GetStartingDuration::ReturnValue' has a wrong offset!");

// Function Stigma.AISense_CustomHearing.ReportNoiseCustomEvent
// 0x0040 (0x0040 - 0x0000)
struct AISense_CustomHearing_ReportNoiseCustomEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 Instigator;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0034(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210D[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AISense_CustomHearing_ReportNoiseCustomEvent) == 0x000008, "Wrong alignment on AISense_CustomHearing_ReportNoiseCustomEvent");
static_assert(sizeof(AISense_CustomHearing_ReportNoiseCustomEvent) == 0x000040, "Wrong size on AISense_CustomHearing_ReportNoiseCustomEvent");
static_assert(offsetof(AISense_CustomHearing_ReportNoiseCustomEvent, WorldContextObject) == 0x000000, "Member 'AISense_CustomHearing_ReportNoiseCustomEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AISense_CustomHearing_ReportNoiseCustomEvent, NoiseLocation) == 0x000008, "Member 'AISense_CustomHearing_ReportNoiseCustomEvent::NoiseLocation' has a wrong offset!");
static_assert(offsetof(AISense_CustomHearing_ReportNoiseCustomEvent, Loudness) == 0x000020, "Member 'AISense_CustomHearing_ReportNoiseCustomEvent::Loudness' has a wrong offset!");
static_assert(offsetof(AISense_CustomHearing_ReportNoiseCustomEvent, Instigator) == 0x000028, "Member 'AISense_CustomHearing_ReportNoiseCustomEvent::Instigator' has a wrong offset!");
static_assert(offsetof(AISense_CustomHearing_ReportNoiseCustomEvent, MaxRange) == 0x000030, "Member 'AISense_CustomHearing_ReportNoiseCustomEvent::MaxRange' has a wrong offset!");
static_assert(offsetof(AISense_CustomHearing_ReportNoiseCustomEvent, Tag) == 0x000034, "Member 'AISense_CustomHearing_ReportNoiseCustomEvent::Tag' has a wrong offset!");

// Function Stigma.AISpawner.GetAliveCharaCount
// 0x0004 (0x0004 - 0x0000)
struct AISpawner_GetAliveCharaCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISpawner_GetAliveCharaCount) == 0x000004, "Wrong alignment on AISpawner_GetAliveCharaCount");
static_assert(sizeof(AISpawner_GetAliveCharaCount) == 0x000004, "Wrong size on AISpawner_GetAliveCharaCount");
static_assert(offsetof(AISpawner_GetAliveCharaCount, ReturnValue) == 0x000000, "Member 'AISpawner_GetAliveCharaCount::ReturnValue' has a wrong offset!");

// Function Stigma.AISpawner.GetRemainCharaCount
// 0x0004 (0x0004 - 0x0000)
struct AISpawner_GetRemainCharaCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISpawner_GetRemainCharaCount) == 0x000004, "Wrong alignment on AISpawner_GetRemainCharaCount");
static_assert(sizeof(AISpawner_GetRemainCharaCount) == 0x000004, "Wrong size on AISpawner_GetRemainCharaCount");
static_assert(offsetof(AISpawner_GetRemainCharaCount, ReturnValue) == 0x000000, "Member 'AISpawner_GetRemainCharaCount::ReturnValue' has a wrong offset!");

// Function Stigma.AISpawner.GetTotalSpawnCount
// 0x0004 (0x0004 - 0x0000)
struct AISpawner_GetTotalSpawnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISpawner_GetTotalSpawnCount) == 0x000004, "Wrong alignment on AISpawner_GetTotalSpawnCount");
static_assert(sizeof(AISpawner_GetTotalSpawnCount) == 0x000004, "Wrong size on AISpawner_GetTotalSpawnCount");
static_assert(offsetof(AISpawner_GetTotalSpawnCount, ReturnValue) == 0x000000, "Member 'AISpawner_GetTotalSpawnCount::ReturnValue' has a wrong offset!");

// Function Stigma.AISpawner.IsDestoriedAllCharas
// 0x0001 (0x0001 - 0x0000)
struct AISpawner_IsDestoriedAllCharas final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISpawner_IsDestoriedAllCharas) == 0x000001, "Wrong alignment on AISpawner_IsDestoriedAllCharas");
static_assert(sizeof(AISpawner_IsDestoriedAllCharas) == 0x000001, "Wrong size on AISpawner_IsDestoriedAllCharas");
static_assert(offsetof(AISpawner_IsDestoriedAllCharas, ReturnValue) == 0x000000, "Member 'AISpawner_IsDestoriedAllCharas::ReturnValue' has a wrong offset!");

// Function Stigma.MannequinManager.Bind
// 0x0008 (0x0008 - 0x0000)
struct MannequinManager_Bind final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MannequinManager_Bind) == 0x000008, "Wrong alignment on MannequinManager_Bind");
static_assert(sizeof(MannequinManager_Bind) == 0x000008, "Wrong size on MannequinManager_Bind");
static_assert(offsetof(MannequinManager_Bind, _ps) == 0x000000, "Member 'MannequinManager_Bind::_ps' has a wrong offset!");

// Function Stigma.MannequinManager.ShowDummy
// 0x0004 (0x0004 - 0x0000)
struct MannequinManager_ShowDummy final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MannequinManager_ShowDummy) == 0x000004, "Wrong alignment on MannequinManager_ShowDummy");
static_assert(sizeof(MannequinManager_ShowDummy) == 0x000004, "Wrong size on MannequinManager_ShowDummy");
static_assert(offsetof(MannequinManager_ShowDummy, _idx) == 0x000000, "Member 'MannequinManager_ShowDummy::_idx' has a wrong offset!");

// Function Stigma.MannequinManager.GetCurrentMannequin
// 0x0008 (0x0008 - 0x0000)
struct MannequinManager_GetCurrentMannequin final
{
public:
	class AMannequin*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MannequinManager_GetCurrentMannequin) == 0x000008, "Wrong alignment on MannequinManager_GetCurrentMannequin");
static_assert(sizeof(MannequinManager_GetCurrentMannequin) == 0x000008, "Wrong size on MannequinManager_GetCurrentMannequin");
static_assert(offsetof(MannequinManager_GetCurrentMannequin, ReturnValue) == 0x000000, "Member 'MannequinManager_GetCurrentMannequin::ReturnValue' has a wrong offset!");

// Function Stigma.MannequinManager.GetMannequin
// 0x0010 (0x0010 - 0x0000)
struct MannequinManager_GetMannequin final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2111[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class AMannequin*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MannequinManager_GetMannequin) == 0x000008, "Wrong alignment on MannequinManager_GetMannequin");
static_assert(sizeof(MannequinManager_GetMannequin) == 0x000010, "Wrong size on MannequinManager_GetMannequin");
static_assert(offsetof(MannequinManager_GetMannequin, _idx) == 0x000000, "Member 'MannequinManager_GetMannequin::_idx' has a wrong offset!");
static_assert(offsetof(MannequinManager_GetMannequin, ReturnValue) == 0x000008, "Member 'MannequinManager_GetMannequin::ReturnValue' has a wrong offset!");

// Function Stigma.MannequinManager.GetMannequinCount
// 0x0004 (0x0004 - 0x0000)
struct MannequinManager_GetMannequinCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MannequinManager_GetMannequinCount) == 0x000004, "Wrong alignment on MannequinManager_GetMannequinCount");
static_assert(sizeof(MannequinManager_GetMannequinCount) == 0x000004, "Wrong size on MannequinManager_GetMannequinCount");
static_assert(offsetof(MannequinManager_GetMannequinCount, ReturnValue) == 0x000000, "Member 'MannequinManager_GetMannequinCount::ReturnValue' has a wrong offset!");

// Function Stigma.MannequinManager.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct MannequinManager_GetPlayerState final
{
public:
	class AMatchServicedPlayerState*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MannequinManager_GetPlayerState) == 0x000008, "Wrong alignment on MannequinManager_GetPlayerState");
static_assert(sizeof(MannequinManager_GetPlayerState) == 0x000008, "Wrong size on MannequinManager_GetPlayerState");
static_assert(offsetof(MannequinManager_GetPlayerState, ReturnValue) == 0x000000, "Member 'MannequinManager_GetPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.AITools.CompareValue
// 0x0014 (0x0014 - 0x0000)
struct AITools_CompareValue final
{
public:
	ECompareFunc                                  _op;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2113[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _v1;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _v2;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _tolerance;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2114[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AITools_CompareValue) == 0x000004, "Wrong alignment on AITools_CompareValue");
static_assert(sizeof(AITools_CompareValue) == 0x000014, "Wrong size on AITools_CompareValue");
static_assert(offsetof(AITools_CompareValue, _op) == 0x000000, "Member 'AITools_CompareValue::_op' has a wrong offset!");
static_assert(offsetof(AITools_CompareValue, _v1) == 0x000004, "Member 'AITools_CompareValue::_v1' has a wrong offset!");
static_assert(offsetof(AITools_CompareValue, _v2) == 0x000008, "Member 'AITools_CompareValue::_v2' has a wrong offset!");
static_assert(offsetof(AITools_CompareValue, _tolerance) == 0x00000C, "Member 'AITools_CompareValue::_tolerance' has a wrong offset!");
static_assert(offsetof(AITools_CompareValue, ReturnValue) == 0x000010, "Member 'AITools_CompareValue::ReturnValue' has a wrong offset!");

// Function Stigma.AITools.ThrowDice
// 0x0008 (0x0008 - 0x0000)
struct AITools_ThrowDice final
{
public:
	float                                         _guide;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2115[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AITools_ThrowDice) == 0x000004, "Wrong alignment on AITools_ThrowDice");
static_assert(sizeof(AITools_ThrowDice) == 0x000008, "Wrong size on AITools_ThrowDice");
static_assert(offsetof(AITools_ThrowDice, _guide) == 0x000000, "Member 'AITools_ThrowDice::_guide' has a wrong offset!");
static_assert(offsetof(AITools_ThrowDice, ReturnValue) == 0x000004, "Member 'AITools_ThrowDice::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameModeBase.OnCharaIsKilled
// 0x0018 (0x0018 - 0x0000)
struct BattleGameModeBase_OnCharaIsKilled final
{
public:
	class AController*                            _killer;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _killed;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _assist;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameModeBase_OnCharaIsKilled) == 0x000008, "Wrong alignment on BattleGameModeBase_OnCharaIsKilled");
static_assert(sizeof(BattleGameModeBase_OnCharaIsKilled) == 0x000018, "Wrong size on BattleGameModeBase_OnCharaIsKilled");
static_assert(offsetof(BattleGameModeBase_OnCharaIsKilled, _killer) == 0x000000, "Member 'BattleGameModeBase_OnCharaIsKilled::_killer' has a wrong offset!");
static_assert(offsetof(BattleGameModeBase_OnCharaIsKilled, _killed) == 0x000008, "Member 'BattleGameModeBase_OnCharaIsKilled::_killed' has a wrong offset!");
static_assert(offsetof(BattleGameModeBase_OnCharaIsKilled, _assist) == 0x000010, "Member 'BattleGameModeBase_OnCharaIsKilled::_assist' has a wrong offset!");

// Function Stigma.BattleGameModeBase.OnQuery_EndOfRound
// 0x0001 (0x0001 - 0x0000)
struct BattleGameModeBase_OnQuery_EndOfRound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameModeBase_OnQuery_EndOfRound) == 0x000001, "Wrong alignment on BattleGameModeBase_OnQuery_EndOfRound");
static_assert(sizeof(BattleGameModeBase_OnQuery_EndOfRound) == 0x000001, "Wrong size on BattleGameModeBase_OnQuery_EndOfRound");
static_assert(offsetof(BattleGameModeBase_OnQuery_EndOfRound, ReturnValue) == 0x000000, "Member 'BattleGameModeBase_OnQuery_EndOfRound::ReturnValue' has a wrong offset!");

// Function Stigma.BattleGameModeBase.GetCurrentBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct BattleGameModeBase_GetCurrentBattlePhase final
{
public:
	EBattleModePhase                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleGameModeBase_GetCurrentBattlePhase) == 0x000001, "Wrong alignment on BattleGameModeBase_GetCurrentBattlePhase");
static_assert(sizeof(BattleGameModeBase_GetCurrentBattlePhase) == 0x000001, "Wrong size on BattleGameModeBase_GetCurrentBattlePhase");
static_assert(offsetof(BattleGameModeBase_GetCurrentBattlePhase, ReturnValue) == 0x000000, "Member 'BattleGameModeBase_GetCurrentBattlePhase::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDMode.OnBind
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDMode_OnBind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_OnBind) == 0x000001, "Wrong alignment on UI_HUDMode_OnBind");
static_assert(sizeof(UI_HUDMode_OnBind) == 0x000001, "Wrong size on UI_HUDMode_OnBind");
static_assert(offsetof(UI_HUDMode_OnBind, ReturnValue) == 0x000000, "Member 'UI_HUDMode_OnBind::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDMode.OnHitAndDamage
// 0x0038 (0x0038 - 0x0000)
struct UI_HUDMode_OnHitAndDamage final
{
public:
	struct FDamagedData                           _damage;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2118[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDMode_OnHitAndDamage) == 0x000008, "Wrong alignment on UI_HUDMode_OnHitAndDamage");
static_assert(sizeof(UI_HUDMode_OnHitAndDamage) == 0x000038, "Wrong size on UI_HUDMode_OnHitAndDamage");
static_assert(offsetof(UI_HUDMode_OnHitAndDamage, _damage) == 0x000000, "Member 'UI_HUDMode_OnHitAndDamage::_damage' has a wrong offset!");
static_assert(offsetof(UI_HUDMode_OnHitAndDamage, ReturnValue) == 0x000030, "Member 'UI_HUDMode_OnHitAndDamage::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDMode.OnTargetRespawned
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDMode_OnTargetRespawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_OnTargetRespawned) == 0x000001, "Wrong alignment on UI_HUDMode_OnTargetRespawned");
static_assert(sizeof(UI_HUDMode_OnTargetRespawned) == 0x000001, "Wrong size on UI_HUDMode_OnTargetRespawned");
static_assert(offsetof(UI_HUDMode_OnTargetRespawned, ReturnValue) == 0x000000, "Member 'UI_HUDMode_OnTargetRespawned::ReturnValue' has a wrong offset!");

// Function Stigma.Annihilation_GameMode.RegisterBarrierDoor
// 0x0008 (0x0008 - 0x0000)
struct Annihilation_GameMode_RegisterBarrierDoor final
{
public:
	class ADoorBase*                              _door;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Annihilation_GameMode_RegisterBarrierDoor) == 0x000008, "Wrong alignment on Annihilation_GameMode_RegisterBarrierDoor");
static_assert(sizeof(Annihilation_GameMode_RegisterBarrierDoor) == 0x000008, "Wrong size on Annihilation_GameMode_RegisterBarrierDoor");
static_assert(offsetof(Annihilation_GameMode_RegisterBarrierDoor, _door) == 0x000000, "Member 'Annihilation_GameMode_RegisterBarrierDoor::_door' has a wrong offset!");

// Function Stigma.Annihilation_GameState.GetGoldRule
// 0x0060 (0x0060 - 0x0000)
struct Annihilation_GameState_GetGoldRule final
{
public:
	struct FAnnihilation_GoldRule                 ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Annihilation_GameState_GetGoldRule) == 0x000008, "Wrong alignment on Annihilation_GameState_GetGoldRule");
static_assert(sizeof(Annihilation_GameState_GetGoldRule) == 0x000060, "Wrong size on Annihilation_GameState_GetGoldRule");
static_assert(offsetof(Annihilation_GameState_GetGoldRule, ReturnValue) == 0x000000, "Member 'Annihilation_GameState_GetGoldRule::ReturnValue' has a wrong offset!");

// Function Stigma.Annihilation_GameState.GetRule
// 0x0020 (0x0020 - 0x0000)
struct Annihilation_GameState_GetRule final
{
public:
	struct FAnnihilationRule                      ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Annihilation_GameState_GetRule) == 0x000008, "Wrong alignment on Annihilation_GameState_GetRule");
static_assert(sizeof(Annihilation_GameState_GetRule) == 0x000020, "Wrong size on Annihilation_GameState_GetRule");
static_assert(offsetof(Annihilation_GameState_GetRule, ReturnValue) == 0x000000, "Member 'Annihilation_GameState_GetRule::ReturnValue' has a wrong offset!");

// Function Stigma.Annihilation_GameState.IsFactionChanged
// 0x0001 (0x0001 - 0x0000)
struct Annihilation_GameState_IsFactionChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Annihilation_GameState_IsFactionChanged) == 0x000001, "Wrong alignment on Annihilation_GameState_IsFactionChanged");
static_assert(sizeof(Annihilation_GameState_IsFactionChanged) == 0x000001, "Wrong size on Annihilation_GameState_IsFactionChanged");
static_assert(offsetof(Annihilation_GameState_IsFactionChanged, ReturnValue) == 0x000000, "Member 'Annihilation_GameState_IsFactionChanged::ReturnValue' has a wrong offset!");

// Function Stigma.Annihilation_GameState.IsFactionChangedRound
// 0x0001 (0x0001 - 0x0000)
struct Annihilation_GameState_IsFactionChangedRound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Annihilation_GameState_IsFactionChangedRound) == 0x000001, "Wrong alignment on Annihilation_GameState_IsFactionChangedRound");
static_assert(sizeof(Annihilation_GameState_IsFactionChangedRound) == 0x000001, "Wrong size on Annihilation_GameState_IsFactionChangedRound");
static_assert(offsetof(Annihilation_GameState_IsFactionChangedRound, ReturnValue) == 0x000000, "Member 'Annihilation_GameState_IsFactionChangedRound::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Option_DescBase.InitByEntry
// 0x0040 (0x0040 - 0x0000)
struct UI_Option_DescBase_InitByEntry final
{
public:
	struct FOptionDescEntry                       _entry;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Option_DescBase_InitByEntry) == 0x000008, "Wrong alignment on UI_Option_DescBase_InitByEntry");
static_assert(sizeof(UI_Option_DescBase_InitByEntry) == 0x000040, "Wrong size on UI_Option_DescBase_InitByEntry");
static_assert(offsetof(UI_Option_DescBase_InitByEntry, _entry) == 0x000000, "Member 'UI_Option_DescBase_InitByEntry::_entry' has a wrong offset!");

// Function Stigma.UI_ModeSelectPopupBase.DoStartCustomGame
// 0x0018 (0x0018 - 0x0000)
struct UI_ModeSelectPopupBase_DoStartCustomGame final
{
public:
	class FString                                 _battle_ids;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ModeSelectPopupBase_DoStartCustomGame) == 0x000008, "Wrong alignment on UI_ModeSelectPopupBase_DoStartCustomGame");
static_assert(sizeof(UI_ModeSelectPopupBase_DoStartCustomGame) == 0x000018, "Wrong size on UI_ModeSelectPopupBase_DoStartCustomGame");
static_assert(offsetof(UI_ModeSelectPopupBase_DoStartCustomGame, _battle_ids) == 0x000000, "Member 'UI_ModeSelectPopupBase_DoStartCustomGame::_battle_ids' has a wrong offset!");
static_assert(offsetof(UI_ModeSelectPopupBase_DoStartCustomGame, ReturnValue) == 0x000010, "Member 'UI_ModeSelectPopupBase_DoStartCustomGame::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ModeSelectPopupBase.OnAck_DeleteParty
// 0x0030 (0x0030 - 0x0000)
struct UI_ModeSelectPopupBase_OnAck_DeleteParty final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_PartyDelete                       _ack;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ModeSelectPopupBase_OnAck_DeleteParty) == 0x000008, "Wrong alignment on UI_ModeSelectPopupBase_OnAck_DeleteParty");
static_assert(sizeof(UI_ModeSelectPopupBase_OnAck_DeleteParty) == 0x000030, "Wrong size on UI_ModeSelectPopupBase_OnAck_DeleteParty");
static_assert(offsetof(UI_ModeSelectPopupBase_OnAck_DeleteParty, _rcode) == 0x000000, "Member 'UI_ModeSelectPopupBase_OnAck_DeleteParty::_rcode' has a wrong offset!");
static_assert(offsetof(UI_ModeSelectPopupBase_OnAck_DeleteParty, _ack) == 0x000008, "Member 'UI_ModeSelectPopupBase_OnAck_DeleteParty::_ack' has a wrong offset!");
static_assert(offsetof(UI_ModeSelectPopupBase_OnAck_DeleteParty, ReturnValue) == 0x000010, "Member 'UI_ModeSelectPopupBase_OnAck_DeleteParty::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ModeSelectPopupBase.OnAck_StartMatchMaking
// 0x0028 (0x0028 - 0x0000)
struct UI_ModeSelectPopupBase_OnAck_StartMatchMaking final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FACK_FindMatch                         _ack;                                              // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2120[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FNetReply                              ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ModeSelectPopupBase_OnAck_StartMatchMaking) == 0x000008, "Wrong alignment on UI_ModeSelectPopupBase_OnAck_StartMatchMaking");
static_assert(sizeof(UI_ModeSelectPopupBase_OnAck_StartMatchMaking) == 0x000028, "Wrong size on UI_ModeSelectPopupBase_OnAck_StartMatchMaking");
static_assert(offsetof(UI_ModeSelectPopupBase_OnAck_StartMatchMaking, _rcode) == 0x000000, "Member 'UI_ModeSelectPopupBase_OnAck_StartMatchMaking::_rcode' has a wrong offset!");
static_assert(offsetof(UI_ModeSelectPopupBase_OnAck_StartMatchMaking, _ack) == 0x000001, "Member 'UI_ModeSelectPopupBase_OnAck_StartMatchMaking::_ack' has a wrong offset!");
static_assert(offsetof(UI_ModeSelectPopupBase_OnAck_StartMatchMaking, ReturnValue) == 0x000008, "Member 'UI_ModeSelectPopupBase_OnAck_StartMatchMaking::ReturnValue' has a wrong offset!");

// Function Stigma.ReviverBase.GetAttachParent
// 0x0008 (0x0008 - 0x0000)
struct ReviverBase_GetAttachParent final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReviverBase_GetAttachParent) == 0x000008, "Wrong alignment on ReviverBase_GetAttachParent");
static_assert(sizeof(ReviverBase_GetAttachParent) == 0x000008, "Wrong size on ReviverBase_GetAttachParent");
static_assert(offsetof(ReviverBase_GetAttachParent, ReturnValue) == 0x000000, "Member 'ReviverBase_GetAttachParent::ReturnValue' has a wrong offset!");

// Function Stigma.PlayNiagaraFPS.GetSpawnedEffect
// 0x0008 (0x0008 - 0x0000)
struct PlayNiagaraFPS_GetSpawnedEffect final
{
public:
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayNiagaraFPS_GetSpawnedEffect) == 0x000008, "Wrong alignment on PlayNiagaraFPS_GetSpawnedEffect");
static_assert(sizeof(PlayNiagaraFPS_GetSpawnedEffect) == 0x000008, "Wrong size on PlayNiagaraFPS_GetSpawnedEffect");
static_assert(offsetof(PlayNiagaraFPS_GetSpawnedEffect, ReturnValue) == 0x000000, "Member 'PlayNiagaraFPS_GetSpawnedEffect::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.CalcBattlePassResult
// 0x0030 (0x0030 - 0x0000)
struct BattlePassHelper_CalcBattlePassResult final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _added_pass_exp;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_cur_level;                                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_level_exp;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_added_level_exp;                              // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _out_is_max_level;                                 // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212D[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_CalcBattlePassResult) == 0x000008, "Wrong alignment on BattlePassHelper_CalcBattlePassResult");
static_assert(sizeof(BattlePassHelper_CalcBattlePassResult) == 0x000030, "Wrong size on BattlePassHelper_CalcBattlePassResult");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _world_ctx) == 0x000000, "Member 'BattlePassHelper_CalcBattlePassResult::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _pass_id) == 0x000008, "Member 'BattlePassHelper_CalcBattlePassResult::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _added_pass_exp) == 0x000018, "Member 'BattlePassHelper_CalcBattlePassResult::_added_pass_exp' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _out_cur_level) == 0x00001C, "Member 'BattlePassHelper_CalcBattlePassResult::_out_cur_level' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _out_level_exp) == 0x000020, "Member 'BattlePassHelper_CalcBattlePassResult::_out_level_exp' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _out_added_level_exp) == 0x000024, "Member 'BattlePassHelper_CalcBattlePassResult::_out_added_level_exp' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, _out_is_max_level) == 0x000028, "Member 'BattlePassHelper_CalcBattlePassResult::_out_is_max_level' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_CalcBattlePassResult, ReturnValue) == 0x000029, "Member 'BattlePassHelper_CalcBattlePassResult::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetActivedBattlePassInfo
// 0x0088 (0x0088 - 0x0000)
struct BattlePassHelper_GetActivedBattlePassInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattlePassInfo                        _out_info;                                         // 0x0008(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212E[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_GetActivedBattlePassInfo) == 0x000008, "Wrong alignment on BattlePassHelper_GetActivedBattlePassInfo");
static_assert(sizeof(BattlePassHelper_GetActivedBattlePassInfo) == 0x000088, "Wrong size on BattlePassHelper_GetActivedBattlePassInfo");
static_assert(offsetof(BattlePassHelper_GetActivedBattlePassInfo, _world_ctx) == 0x000000, "Member 'BattlePassHelper_GetActivedBattlePassInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetActivedBattlePassInfo, _out_info) == 0x000008, "Member 'BattlePassHelper_GetActivedBattlePassInfo::_out_info' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetActivedBattlePassInfo, ReturnValue) == 0x000080, "Member 'BattlePassHelper_GetActivedBattlePassInfo::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetAllBattlePassIDs
// 0x0018 (0x0018 - 0x0000)
struct BattlePassHelper_GetAllBattlePassIDs final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID_BattlePass>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassHelper_GetAllBattlePassIDs) == 0x000008, "Wrong alignment on BattlePassHelper_GetAllBattlePassIDs");
static_assert(sizeof(BattlePassHelper_GetAllBattlePassIDs) == 0x000018, "Wrong size on BattlePassHelper_GetAllBattlePassIDs");
static_assert(offsetof(BattlePassHelper_GetAllBattlePassIDs, _world_ctx) == 0x000000, "Member 'BattlePassHelper_GetAllBattlePassIDs::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetAllBattlePassIDs, ReturnValue) == 0x000008, "Member 'BattlePassHelper_GetAllBattlePassIDs::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetBattlePassCurrentWeek
// 0x0018 (0x0018 - 0x0000)
struct BattlePassHelper_GetBattlePassCurrentWeek final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_GetBattlePassCurrentWeek) == 0x000008, "Wrong alignment on BattlePassHelper_GetBattlePassCurrentWeek");
static_assert(sizeof(BattlePassHelper_GetBattlePassCurrentWeek) == 0x000018, "Wrong size on BattlePassHelper_GetBattlePassCurrentWeek");
static_assert(offsetof(BattlePassHelper_GetBattlePassCurrentWeek, _pass_id) == 0x000000, "Member 'BattlePassHelper_GetBattlePassCurrentWeek::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassCurrentWeek, ReturnValue) == 0x000010, "Member 'BattlePassHelper_GetBattlePassCurrentWeek::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetBattlePassInfo
// 0x0098 (0x0098 - 0x0000)
struct BattlePassHelper_GetBattlePassInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattlePassInfo                        _out_info;                                         // 0x0018(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2130[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_GetBattlePassInfo) == 0x000008, "Wrong alignment on BattlePassHelper_GetBattlePassInfo");
static_assert(sizeof(BattlePassHelper_GetBattlePassInfo) == 0x000098, "Wrong size on BattlePassHelper_GetBattlePassInfo");
static_assert(offsetof(BattlePassHelper_GetBattlePassInfo, _world_ctx) == 0x000000, "Member 'BattlePassHelper_GetBattlePassInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassInfo, _pass_id) == 0x000008, "Member 'BattlePassHelper_GetBattlePassInfo::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassInfo, _out_info) == 0x000018, "Member 'BattlePassHelper_GetBattlePassInfo::_out_info' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassInfo, ReturnValue) == 0x000090, "Member 'BattlePassHelper_GetBattlePassInfo::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetBattlePassLevelConfig
// 0x0050 (0x0050 - 0x0000)
struct BattlePassHelper_GetBattlePassLevelConfig final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2131[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattlePassLevelConfig                 _out_config;                                       // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2132[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_GetBattlePassLevelConfig) == 0x000008, "Wrong alignment on BattlePassHelper_GetBattlePassLevelConfig");
static_assert(sizeof(BattlePassHelper_GetBattlePassLevelConfig) == 0x000050, "Wrong size on BattlePassHelper_GetBattlePassLevelConfig");
static_assert(offsetof(BattlePassHelper_GetBattlePassLevelConfig, _pass_id) == 0x000000, "Member 'BattlePassHelper_GetBattlePassLevelConfig::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassLevelConfig, _level) == 0x000010, "Member 'BattlePassHelper_GetBattlePassLevelConfig::_level' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassLevelConfig, _out_config) == 0x000018, "Member 'BattlePassHelper_GetBattlePassLevelConfig::_out_config' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassLevelConfig, ReturnValue) == 0x000048, "Member 'BattlePassHelper_GetBattlePassLevelConfig::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetBattlePassMaxLevel
// 0x0018 (0x0018 - 0x0000)
struct BattlePassHelper_GetBattlePassMaxLevel final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2133[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_GetBattlePassMaxLevel) == 0x000008, "Wrong alignment on BattlePassHelper_GetBattlePassMaxLevel");
static_assert(sizeof(BattlePassHelper_GetBattlePassMaxLevel) == 0x000018, "Wrong size on BattlePassHelper_GetBattlePassMaxLevel");
static_assert(offsetof(BattlePassHelper_GetBattlePassMaxLevel, _pass_id) == 0x000000, "Member 'BattlePassHelper_GetBattlePassMaxLevel::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassMaxLevel, ReturnValue) == 0x000010, "Member 'BattlePassHelper_GetBattlePassMaxLevel::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetBattlePassMissionConfig
// 0x0038 (0x0038 - 0x0000)
struct BattlePassHelper_GetBattlePassMissionConfig final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _week;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2134[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattlePassMissionConfig               _out_config;                                       // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2135[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_GetBattlePassMissionConfig) == 0x000008, "Wrong alignment on BattlePassHelper_GetBattlePassMissionConfig");
static_assert(sizeof(BattlePassHelper_GetBattlePassMissionConfig) == 0x000038, "Wrong size on BattlePassHelper_GetBattlePassMissionConfig");
static_assert(offsetof(BattlePassHelper_GetBattlePassMissionConfig, _pass_id) == 0x000000, "Member 'BattlePassHelper_GetBattlePassMissionConfig::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassMissionConfig, _week) == 0x000010, "Member 'BattlePassHelper_GetBattlePassMissionConfig::_week' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassMissionConfig, _out_config) == 0x000018, "Member 'BattlePassHelper_GetBattlePassMissionConfig::_out_config' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetBattlePassMissionConfig, ReturnValue) == 0x000030, "Member 'BattlePassHelper_GetBattlePassMissionConfig::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.GetNoMissionBattlePassIDs
// 0x0018 (0x0018 - 0x0000)
struct BattlePassHelper_GetNoMissionBattlePassIDs final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID_BattlePass>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassHelper_GetNoMissionBattlePassIDs) == 0x000008, "Wrong alignment on BattlePassHelper_GetNoMissionBattlePassIDs");
static_assert(sizeof(BattlePassHelper_GetNoMissionBattlePassIDs) == 0x000018, "Wrong size on BattlePassHelper_GetNoMissionBattlePassIDs");
static_assert(offsetof(BattlePassHelper_GetNoMissionBattlePassIDs, _world_ctx) == 0x000000, "Member 'BattlePassHelper_GetNoMissionBattlePassIDs::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_GetNoMissionBattlePassIDs, ReturnValue) == 0x000008, "Member 'BattlePassHelper_GetNoMissionBattlePassIDs::ReturnValue' has a wrong offset!");

// Function Stigma.BattlePassHelper.IsActivedBattlePass
// 0x0020 (0x0020 - 0x0000)
struct BattlePassHelper_IsActivedBattlePass final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2136[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BattlePassHelper_IsActivedBattlePass) == 0x000008, "Wrong alignment on BattlePassHelper_IsActivedBattlePass");
static_assert(sizeof(BattlePassHelper_IsActivedBattlePass) == 0x000020, "Wrong size on BattlePassHelper_IsActivedBattlePass");
static_assert(offsetof(BattlePassHelper_IsActivedBattlePass, _world_ctx) == 0x000000, "Member 'BattlePassHelper_IsActivedBattlePass::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_IsActivedBattlePass, _pass_id) == 0x000008, "Member 'BattlePassHelper_IsActivedBattlePass::_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePassHelper_IsActivedBattlePass, ReturnValue) == 0x000018, "Member 'BattlePassHelper_IsActivedBattlePass::ReturnValue' has a wrong offset!");

// Function Stigma.BattleStoreBlueprintLibrary.SortGunListItems
// 0x0028 (0x0028 - 0x0000)
struct BattleStoreBlueprintLibrary_SortGunListItems final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGunEntry_Main>                 _entries;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FGunEntry_Main>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleStoreBlueprintLibrary_SortGunListItems) == 0x000008, "Wrong alignment on BattleStoreBlueprintLibrary_SortGunListItems");
static_assert(sizeof(BattleStoreBlueprintLibrary_SortGunListItems) == 0x000028, "Wrong size on BattleStoreBlueprintLibrary_SortGunListItems");
static_assert(offsetof(BattleStoreBlueprintLibrary_SortGunListItems, _world_ctx) == 0x000000, "Member 'BattleStoreBlueprintLibrary_SortGunListItems::_world_ctx' has a wrong offset!");
static_assert(offsetof(BattleStoreBlueprintLibrary_SortGunListItems, _entries) == 0x000008, "Member 'BattleStoreBlueprintLibrary_SortGunListItems::_entries' has a wrong offset!");
static_assert(offsetof(BattleStoreBlueprintLibrary_SortGunListItems, ReturnValue) == 0x000018, "Member 'BattleStoreBlueprintLibrary_SortGunListItems::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ShopGunFilter.OnSelectedGunFilter
// 0x0004 (0x0004 - 0x0000)
struct UI_ShopGunFilter_OnSelectedGunFilter final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopGunFilter_OnSelectedGunFilter) == 0x000004, "Wrong alignment on UI_ShopGunFilter_OnSelectedGunFilter");
static_assert(sizeof(UI_ShopGunFilter_OnSelectedGunFilter) == 0x000004, "Wrong size on UI_ShopGunFilter_OnSelectedGunFilter");
static_assert(offsetof(UI_ShopGunFilter_OnSelectedGunFilter, _idx) == 0x000000, "Member 'UI_ShopGunFilter_OnSelectedGunFilter::_idx' has a wrong offset!");

// Function Stigma.BountyTDM_PlayerController.RPC_ALL_Bounty_Hacking
// 0x0010 (0x0010 - 0x0000)
struct BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking final
{
public:
	class ACharaBase*                             _hacker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASafeBase*                              _target;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking) == 0x000008, "Wrong alignment on BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking");
static_assert(sizeof(BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking) == 0x000010, "Wrong size on BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking");
static_assert(offsetof(BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking, _hacker) == 0x000000, "Member 'BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking::_hacker' has a wrong offset!");
static_assert(offsetof(BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking, _target) == 0x000008, "Member 'BountyTDM_PlayerController_RPC_ALL_Bounty_Hacking::_target' has a wrong offset!");

// Function Stigma.BriefUser.GetCharaType
// 0x0001 (0x0001 - 0x0000)
struct BriefUser_GetCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetCharaType) == 0x000001, "Wrong alignment on BriefUser_GetCharaType");
static_assert(sizeof(BriefUser_GetCharaType) == 0x000001, "Wrong size on BriefUser_GetCharaType");
static_assert(offsetof(BriefUser_GetCharaType, ReturnValue) == 0x000000, "Member 'BriefUser_GetCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetEmblem
// 0x0010 (0x0010 - 0x0000)
struct BriefUser_GetEmblem final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetEmblem) == 0x000008, "Wrong alignment on BriefUser_GetEmblem");
static_assert(sizeof(BriefUser_GetEmblem) == 0x000010, "Wrong size on BriefUser_GetEmblem");
static_assert(offsetof(BriefUser_GetEmblem, ReturnValue) == 0x000000, "Member 'BriefUser_GetEmblem::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct BriefUser_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetLevel) == 0x000004, "Wrong alignment on BriefUser_GetLevel");
static_assert(sizeof(BriefUser_GetLevel) == 0x000004, "Wrong size on BriefUser_GetLevel");
static_assert(offsetof(BriefUser_GetLevel, ReturnValue) == 0x000000, "Member 'BriefUser_GetLevel::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct BriefUser_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetNickname) == 0x000008, "Wrong alignment on BriefUser_GetNickname");
static_assert(sizeof(BriefUser_GetNickname) == 0x000018, "Wrong size on BriefUser_GetNickname");
static_assert(offsetof(BriefUser_GetNickname, ReturnValue) == 0x000000, "Member 'BriefUser_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetNicknameFX
// 0x0010 (0x0010 - 0x0000)
struct BriefUser_GetNicknameFX final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetNicknameFX) == 0x000008, "Wrong alignment on BriefUser_GetNicknameFX");
static_assert(sizeof(BriefUser_GetNicknameFX) == 0x000010, "Wrong size on BriefUser_GetNicknameFX");
static_assert(offsetof(BriefUser_GetNicknameFX, ReturnValue) == 0x000000, "Member 'BriefUser_GetNicknameFX::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetPlayingAt
// 0x0001 (0x0001 - 0x0000)
struct BriefUser_GetPlayingAt final
{
public:
	EUserPlayingAt                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetPlayingAt) == 0x000001, "Wrong alignment on BriefUser_GetPlayingAt");
static_assert(sizeof(BriefUser_GetPlayingAt) == 0x000001, "Wrong size on BriefUser_GetPlayingAt");
static_assert(offsetof(BriefUser_GetPlayingAt, ReturnValue) == 0x000000, "Member 'BriefUser_GetPlayingAt::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetProfileCard
// 0x0010 (0x0010 - 0x0000)
struct BriefUser_GetProfileCard final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetProfileCard) == 0x000008, "Wrong alignment on BriefUser_GetProfileCard");
static_assert(sizeof(BriefUser_GetProfileCard) == 0x000010, "Wrong size on BriefUser_GetProfileCard");
static_assert(offsetof(BriefUser_GetProfileCard, ReturnValue) == 0x000000, "Member 'BriefUser_GetProfileCard::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetTier
// 0x0001 (0x0001 - 0x0000)
struct BriefUser_GetTier final
{
public:
	ETier                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetTier) == 0x000001, "Wrong alignment on BriefUser_GetTier");
static_assert(sizeof(BriefUser_GetTier) == 0x000001, "Wrong size on BriefUser_GetTier");
static_assert(offsetof(BriefUser_GetTier, ReturnValue) == 0x000000, "Member 'BriefUser_GetTier::ReturnValue' has a wrong offset!");

// Function Stigma.BriefUser.GetUserID
// 0x0008 (0x0008 - 0x0000)
struct BriefUser_GetUserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefUser_GetUserID) == 0x000008, "Wrong alignment on BriefUser_GetUserID");
static_assert(sizeof(BriefUser_GetUserID) == 0x000008, "Wrong size on BriefUser_GetUserID");
static_assert(offsetof(BriefUser_GetUserID, ReturnValue) == 0x000000, "Member 'BriefUser_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.CustomGameSlotBlueprintLibrary.IsEmptySlot
// 0x0028 (0x0028 - 0x0000)
struct CustomGameSlotBlueprintLibrary_IsEmptySlot final
{
public:
	struct FCustomGameSlot                        _slot;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213D[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CustomGameSlotBlueprintLibrary_IsEmptySlot) == 0x000008, "Wrong alignment on CustomGameSlotBlueprintLibrary_IsEmptySlot");
static_assert(sizeof(CustomGameSlotBlueprintLibrary_IsEmptySlot) == 0x000028, "Wrong size on CustomGameSlotBlueprintLibrary_IsEmptySlot");
static_assert(offsetof(CustomGameSlotBlueprintLibrary_IsEmptySlot, _slot) == 0x000000, "Member 'CustomGameSlotBlueprintLibrary_IsEmptySlot::_slot' has a wrong offset!");
static_assert(offsetof(CustomGameSlotBlueprintLibrary_IsEmptySlot, ReturnValue) == 0x000020, "Member 'CustomGameSlotBlueprintLibrary_IsEmptySlot::ReturnValue' has a wrong offset!");

// Function Stigma.CustomGameSlotBlueprintLibrary.IsValid
// 0x000C (0x000C - 0x0000)
struct CustomGameSlotBlueprintLibrary_IsValid final
{
public:
	struct FCustomGameSlotIndex                   _index;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213E[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CustomGameSlotBlueprintLibrary_IsValid) == 0x000004, "Wrong alignment on CustomGameSlotBlueprintLibrary_IsValid");
static_assert(sizeof(CustomGameSlotBlueprintLibrary_IsValid) == 0x00000C, "Wrong size on CustomGameSlotBlueprintLibrary_IsValid");
static_assert(offsetof(CustomGameSlotBlueprintLibrary_IsValid, _index) == 0x000000, "Member 'CustomGameSlotBlueprintLibrary_IsValid::_index' has a wrong offset!");
static_assert(offsetof(CustomGameSlotBlueprintLibrary_IsValid, ReturnValue) == 0x000008, "Member 'CustomGameSlotBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function Stigma.CustomGameSlotBlueprintLibrary.ToString
// 0x0018 (0x0018 - 0x0000)
struct CustomGameSlotBlueprintLibrary_ToString final
{
public:
	struct FCustomGameSlotIndex                   _index;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGameSlotBlueprintLibrary_ToString) == 0x000008, "Wrong alignment on CustomGameSlotBlueprintLibrary_ToString");
static_assert(sizeof(CustomGameSlotBlueprintLibrary_ToString) == 0x000018, "Wrong size on CustomGameSlotBlueprintLibrary_ToString");
static_assert(offsetof(CustomGameSlotBlueprintLibrary_ToString, _index) == 0x000000, "Member 'CustomGameSlotBlueprintLibrary_ToString::_index' has a wrong offset!");
static_assert(offsetof(CustomGameSlotBlueprintLibrary_ToString, ReturnValue) == 0x000008, "Member 'CustomGameSlotBlueprintLibrary_ToString::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TabBase.OnChangeActionSetting
// 0x0001 (0x0001 - 0x0000)
struct UI_TabBase_OnChangeActionSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TabBase_OnChangeActionSetting) == 0x000001, "Wrong alignment on UI_TabBase_OnChangeActionSetting");
static_assert(sizeof(UI_TabBase_OnChangeActionSetting) == 0x000001, "Wrong size on UI_TabBase_OnChangeActionSetting");
static_assert(offsetof(UI_TabBase_OnChangeActionSetting, ReturnValue) == 0x000000, "Member 'UI_TabBase_OnChangeActionSetting::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TabBase.OnDiscoverEnemy
// 0x0010 (0x0010 - 0x0000)
struct UI_TabBase_OnDiscoverEnemy final
{
public:
	class ACharaBase*                             _enemy;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _discovered;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2140[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_TabBase_OnDiscoverEnemy) == 0x000008, "Wrong alignment on UI_TabBase_OnDiscoverEnemy");
static_assert(sizeof(UI_TabBase_OnDiscoverEnemy) == 0x000010, "Wrong size on UI_TabBase_OnDiscoverEnemy");
static_assert(offsetof(UI_TabBase_OnDiscoverEnemy, _enemy) == 0x000000, "Member 'UI_TabBase_OnDiscoverEnemy::_enemy' has a wrong offset!");
static_assert(offsetof(UI_TabBase_OnDiscoverEnemy, _discovered) == 0x000008, "Member 'UI_TabBase_OnDiscoverEnemy::_discovered' has a wrong offset!");
static_assert(offsetof(UI_TabBase_OnDiscoverEnemy, ReturnValue) == 0x000009, "Member 'UI_TabBase_OnDiscoverEnemy::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TabBase.OnShow
// 0x0002 (0x0002 - 0x0000)
struct UI_TabBase_OnShow final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TabBase_OnShow) == 0x000001, "Wrong alignment on UI_TabBase_OnShow");
static_assert(sizeof(UI_TabBase_OnShow) == 0x000002, "Wrong size on UI_TabBase_OnShow");
static_assert(offsetof(UI_TabBase_OnShow, _show) == 0x000000, "Member 'UI_TabBase_OnShow::_show' has a wrong offset!");
static_assert(offsetof(UI_TabBase_OnShow, ReturnValue) == 0x000001, "Member 'UI_TabBase_OnShow::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TabBase.Show
// 0x0001 (0x0001 - 0x0000)
struct UI_TabBase_Show final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TabBase_Show) == 0x000001, "Wrong alignment on UI_TabBase_Show");
static_assert(sizeof(UI_TabBase_Show) == 0x000001, "Wrong size on UI_TabBase_Show");
static_assert(offsetof(UI_TabBase_Show, _show) == 0x000000, "Member 'UI_TabBase_Show::_show' has a wrong offset!");

// Function Stigma.FovStaticMeshComponent.Get1PVMatrix
// 0x0100 (0x0100 - 0x0000)
struct FovStaticMeshComponent_Get1PVMatrix final
{
public:
	struct FMatrix                                ModelMatrix;                                       // 0x0000(0x0080)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0080(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FovStaticMeshComponent_Get1PVMatrix) == 0x000010, "Wrong alignment on FovStaticMeshComponent_Get1PVMatrix");
static_assert(sizeof(FovStaticMeshComponent_Get1PVMatrix) == 0x000100, "Wrong size on FovStaticMeshComponent_Get1PVMatrix");
static_assert(offsetof(FovStaticMeshComponent_Get1PVMatrix, ModelMatrix) == 0x000000, "Member 'FovStaticMeshComponent_Get1PVMatrix::ModelMatrix' has a wrong offset!");
static_assert(offsetof(FovStaticMeshComponent_Get1PVMatrix, ReturnValue) == 0x000080, "Member 'FovStaticMeshComponent_Get1PVMatrix::ReturnValue' has a wrong offset!");

// Function Stigma.NPC_ActionDummy.AddTarget
// 0x0008 (0x0008 - 0x0000)
struct NPC_ActionDummy_AddTarget final
{
public:
	class ACharaBase*                             _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ActionDummy_AddTarget) == 0x000008, "Wrong alignment on NPC_ActionDummy_AddTarget");
static_assert(sizeof(NPC_ActionDummy_AddTarget) == 0x000008, "Wrong size on NPC_ActionDummy_AddTarget");
static_assert(offsetof(NPC_ActionDummy_AddTarget, _target) == 0x000000, "Member 'NPC_ActionDummy_AddTarget::_target' has a wrong offset!");

// Function Stigma.NPC_ActionDummy.RemoveTarget
// 0x0008 (0x0008 - 0x0000)
struct NPC_ActionDummy_RemoveTarget final
{
public:
	class ACharaBase*                             _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ActionDummy_RemoveTarget) == 0x000008, "Wrong alignment on NPC_ActionDummy_RemoveTarget");
static_assert(sizeof(NPC_ActionDummy_RemoveTarget) == 0x000008, "Wrong size on NPC_ActionDummy_RemoveTarget");
static_assert(offsetof(NPC_ActionDummy_RemoveTarget, _target) == 0x000000, "Member 'NPC_ActionDummy_RemoveTarget::_target' has a wrong offset!");

// Function Stigma.NPC_ActionDummy.SetAutoRepeatAttack
// 0x0001 (0x0001 - 0x0000)
struct NPC_ActionDummy_SetAutoRepeatAttack final
{
public:
	bool                                          _on;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ActionDummy_SetAutoRepeatAttack) == 0x000001, "Wrong alignment on NPC_ActionDummy_SetAutoRepeatAttack");
static_assert(sizeof(NPC_ActionDummy_SetAutoRepeatAttack) == 0x000001, "Wrong size on NPC_ActionDummy_SetAutoRepeatAttack");
static_assert(offsetof(NPC_ActionDummy_SetAutoRepeatAttack, _on) == 0x000000, "Member 'NPC_ActionDummy_SetAutoRepeatAttack::_on' has a wrong offset!");

// Function Stigma.NPC_ActionDummy.IsAutoRepeatingAttack
// 0x0001 (0x0001 - 0x0000)
struct NPC_ActionDummy_IsAutoRepeatingAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_ActionDummy_IsAutoRepeatingAttack) == 0x000001, "Wrong alignment on NPC_ActionDummy_IsAutoRepeatingAttack");
static_assert(sizeof(NPC_ActionDummy_IsAutoRepeatingAttack) == 0x000001, "Wrong size on NPC_ActionDummy_IsAutoRepeatingAttack");
static_assert(offsetof(NPC_ActionDummy_IsAutoRepeatingAttack, ReturnValue) == 0x000000, "Member 'NPC_ActionDummy_IsAutoRepeatingAttack::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Survey.OnAnswerQuestion
// 0x00A8 (0x00A8 - 0x0000)
struct UI_Survey_OnAnswerQuestion final
{
public:
	struct FSurveyQuestion                        _question;                                         // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSurveyAnswer                          _answer;                                           // 0x0078(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2147[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_Survey_OnAnswerQuestion) == 0x000008, "Wrong alignment on UI_Survey_OnAnswerQuestion");
static_assert(sizeof(UI_Survey_OnAnswerQuestion) == 0x0000A8, "Wrong size on UI_Survey_OnAnswerQuestion");
static_assert(offsetof(UI_Survey_OnAnswerQuestion, _question) == 0x000000, "Member 'UI_Survey_OnAnswerQuestion::_question' has a wrong offset!");
static_assert(offsetof(UI_Survey_OnAnswerQuestion, _answer) == 0x000078, "Member 'UI_Survey_OnAnswerQuestion::_answer' has a wrong offset!");
static_assert(offsetof(UI_Survey_OnAnswerQuestion, ReturnValue) == 0x0000A0, "Member 'UI_Survey_OnAnswerQuestion::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Survey.OnShowQuestion
// 0x0088 (0x0088 - 0x0000)
struct UI_Survey_OnShowQuestion final
{
public:
	ESurveyUIPhase                                _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2148[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSurveyQuestion                        _question;                                         // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2149[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_Survey_OnShowQuestion) == 0x000008, "Wrong alignment on UI_Survey_OnShowQuestion");
static_assert(sizeof(UI_Survey_OnShowQuestion) == 0x000088, "Wrong size on UI_Survey_OnShowQuestion");
static_assert(offsetof(UI_Survey_OnShowQuestion, _phase) == 0x000000, "Member 'UI_Survey_OnShowQuestion::_phase' has a wrong offset!");
static_assert(offsetof(UI_Survey_OnShowQuestion, _question) == 0x000008, "Member 'UI_Survey_OnShowQuestion::_question' has a wrong offset!");
static_assert(offsetof(UI_Survey_OnShowQuestion, ReturnValue) == 0x000080, "Member 'UI_Survey_OnShowQuestion::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Survey.GetCurrentPhase
// 0x0001 (0x0001 - 0x0000)
struct UI_Survey_GetCurrentPhase final
{
public:
	ESurveyUIPhase                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Survey_GetCurrentPhase) == 0x000001, "Wrong alignment on UI_Survey_GetCurrentPhase");
static_assert(sizeof(UI_Survey_GetCurrentPhase) == 0x000001, "Wrong size on UI_Survey_GetCurrentPhase");
static_assert(offsetof(UI_Survey_GetCurrentPhase, ReturnValue) == 0x000000, "Member 'UI_Survey_GetCurrentPhase::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.FilterGoodsObjects
// 0x0030 (0x0030 - 0x0000)
struct ShopHelper_FilterGoodsObjects final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGoodsObject*>                   _goods_objects;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGoodsFilterInfo                       _filter;                                           // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UGoodsObject*>                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_FilterGoodsObjects) == 0x000008, "Wrong alignment on ShopHelper_FilterGoodsObjects");
static_assert(sizeof(ShopHelper_FilterGoodsObjects) == 0x000030, "Wrong size on ShopHelper_FilterGoodsObjects");
static_assert(offsetof(ShopHelper_FilterGoodsObjects, _world_ctx) == 0x000000, "Member 'ShopHelper_FilterGoodsObjects::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_FilterGoodsObjects, _goods_objects) == 0x000008, "Member 'ShopHelper_FilterGoodsObjects::_goods_objects' has a wrong offset!");
static_assert(offsetof(ShopHelper_FilterGoodsObjects, _filter) == 0x000018, "Member 'ShopHelper_FilterGoodsObjects::_filter' has a wrong offset!");
static_assert(offsetof(ShopHelper_FilterGoodsObjects, ReturnValue) == 0x000020, "Member 'ShopHelper_FilterGoodsObjects::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.FilterGoodsPeriod
// 0x0028 (0x0028 - 0x0000)
struct ShopHelper_FilterGoodsPeriod final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGoodsObject*>                   _goods_objects;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UGoodsObject*>                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_FilterGoodsPeriod) == 0x000008, "Wrong alignment on ShopHelper_FilterGoodsPeriod");
static_assert(sizeof(ShopHelper_FilterGoodsPeriod) == 0x000028, "Wrong size on ShopHelper_FilterGoodsPeriod");
static_assert(offsetof(ShopHelper_FilterGoodsPeriod, _world_ctx) == 0x000000, "Member 'ShopHelper_FilterGoodsPeriod::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_FilterGoodsPeriod, _goods_objects) == 0x000008, "Member 'ShopHelper_FilterGoodsPeriod::_goods_objects' has a wrong offset!");
static_assert(offsetof(ShopHelper_FilterGoodsPeriod, ReturnValue) == 0x000018, "Member 'ShopHelper_FilterGoodsPeriod::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.GetGoodsOwningInfo
// 0x0200 (0x0200 - 0x0000)
struct ShopHelper_GetGoodsOwningInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Goods                          _goods_define;                                     // 0x0008(0x01F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGoodsOwningInfo                              ReturnValue;                                       // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214B[0x7];                                     // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ShopHelper_GetGoodsOwningInfo) == 0x000008, "Wrong alignment on ShopHelper_GetGoodsOwningInfo");
static_assert(sizeof(ShopHelper_GetGoodsOwningInfo) == 0x000200, "Wrong size on ShopHelper_GetGoodsOwningInfo");
static_assert(offsetof(ShopHelper_GetGoodsOwningInfo, _world_ctx) == 0x000000, "Member 'ShopHelper_GetGoodsOwningInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_GetGoodsOwningInfo, _goods_define) == 0x000008, "Member 'ShopHelper_GetGoodsOwningInfo::_goods_define' has a wrong offset!");
static_assert(offsetof(ShopHelper_GetGoodsOwningInfo, ReturnValue) == 0x0001F8, "Member 'ShopHelper_GetGoodsOwningInfo::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.GetUITags
// 0x0018 (0x0018 - 0x0000)
struct ShopHelper_GetUITags final
{
public:
	struct FGoodsTag                              _goods_tag;                                        // 0x0000(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_214C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EItemUITag>                            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_GetUITags) == 0x000008, "Wrong alignment on ShopHelper_GetUITags");
static_assert(sizeof(ShopHelper_GetUITags) == 0x000018, "Wrong size on ShopHelper_GetUITags");
static_assert(offsetof(ShopHelper_GetUITags, _goods_tag) == 0x000000, "Member 'ShopHelper_GetUITags::_goods_tag' has a wrong offset!");
static_assert(offsetof(ShopHelper_GetUITags, ReturnValue) == 0x000008, "Member 'ShopHelper_GetUITags::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.HasAnyGoodsTag
// 0x0006 (0x0006 - 0x0000)
struct ShopHelper_HasAnyGoodsTag final
{
public:
	struct FGoodsTag                              _goods_tag;                                        // 0x0000(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_HasAnyGoodsTag) == 0x000001, "Wrong alignment on ShopHelper_HasAnyGoodsTag");
static_assert(sizeof(ShopHelper_HasAnyGoodsTag) == 0x000006, "Wrong size on ShopHelper_HasAnyGoodsTag");
static_assert(offsetof(ShopHelper_HasAnyGoodsTag, _goods_tag) == 0x000000, "Member 'ShopHelper_HasAnyGoodsTag::_goods_tag' has a wrong offset!");
static_assert(offsetof(ShopHelper_HasAnyGoodsTag, ReturnValue) == 0x000005, "Member 'ShopHelper_HasAnyGoodsTag::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.IsBundleGoods
// 0x0010 (0x0010 - 0x0000)
struct ShopHelper_IsBundleGoods final
{
public:
	class UGoodsObject*                           _goods;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ShopHelper_IsBundleGoods) == 0x000008, "Wrong alignment on ShopHelper_IsBundleGoods");
static_assert(sizeof(ShopHelper_IsBundleGoods) == 0x000010, "Wrong size on ShopHelper_IsBundleGoods");
static_assert(offsetof(ShopHelper_IsBundleGoods, _goods) == 0x000000, "Member 'ShopHelper_IsBundleGoods::_goods' has a wrong offset!");
static_assert(offsetof(ShopHelper_IsBundleGoods, ReturnValue) == 0x000008, "Member 'ShopHelper_IsBundleGoods::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.IsPurchasableCurrency
// 0x0002 (0x0002 - 0x0000)
struct ShopHelper_IsPurchasableCurrency final
{
public:
	ECurrencyTypes                                _currency_type;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_IsPurchasableCurrency) == 0x000001, "Wrong alignment on ShopHelper_IsPurchasableCurrency");
static_assert(sizeof(ShopHelper_IsPurchasableCurrency) == 0x000002, "Wrong size on ShopHelper_IsPurchasableCurrency");
static_assert(offsetof(ShopHelper_IsPurchasableCurrency, _currency_type) == 0x000000, "Member 'ShopHelper_IsPurchasableCurrency::_currency_type' has a wrong offset!");
static_assert(offsetof(ShopHelper_IsPurchasableCurrency, ReturnValue) == 0x000001, "Member 'ShopHelper_IsPurchasableCurrency::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.IsPurchasableFromLevelCondition
// 0x0200 (0x0200 - 0x0000)
struct ShopHelper_IsPurchasableFromLevelCondition final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Goods                          _goods_define;                                     // 0x0008(0x01F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214E[0x7];                                     // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ShopHelper_IsPurchasableFromLevelCondition) == 0x000008, "Wrong alignment on ShopHelper_IsPurchasableFromLevelCondition");
static_assert(sizeof(ShopHelper_IsPurchasableFromLevelCondition) == 0x000200, "Wrong size on ShopHelper_IsPurchasableFromLevelCondition");
static_assert(offsetof(ShopHelper_IsPurchasableFromLevelCondition, _world_ctx) == 0x000000, "Member 'ShopHelper_IsPurchasableFromLevelCondition::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_IsPurchasableFromLevelCondition, _goods_define) == 0x000008, "Member 'ShopHelper_IsPurchasableFromLevelCondition::_goods_define' has a wrong offset!");
static_assert(offsetof(ShopHelper_IsPurchasableFromLevelCondition, ReturnValue) == 0x0001F8, "Member 'ShopHelper_IsPurchasableFromLevelCondition::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.MakeCurrencyItem
// 0x0020 (0x0020 - 0x0000)
struct ShopHelper_MakeCurrencyItem final
{
public:
	struct FItemIDRef                             _currency_id;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _currency_value;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UInvenItem*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_MakeCurrencyItem) == 0x000008, "Wrong alignment on ShopHelper_MakeCurrencyItem");
static_assert(sizeof(ShopHelper_MakeCurrencyItem) == 0x000020, "Wrong size on ShopHelper_MakeCurrencyItem");
static_assert(offsetof(ShopHelper_MakeCurrencyItem, _currency_id) == 0x000000, "Member 'ShopHelper_MakeCurrencyItem::_currency_id' has a wrong offset!");
static_assert(offsetof(ShopHelper_MakeCurrencyItem, _currency_value) == 0x000010, "Member 'ShopHelper_MakeCurrencyItem::_currency_value' has a wrong offset!");
static_assert(offsetof(ShopHelper_MakeCurrencyItem, ReturnValue) == 0x000018, "Member 'ShopHelper_MakeCurrencyItem::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.MakeInvenItemFromRewardItem
// 0x0020 (0x0020 - 0x0000)
struct ShopHelper_MakeInvenItemFromRewardItem final
{
public:
	struct FRewardItem                            _reward_item;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInvenItem*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_MakeInvenItemFromRewardItem) == 0x000008, "Wrong alignment on ShopHelper_MakeInvenItemFromRewardItem");
static_assert(sizeof(ShopHelper_MakeInvenItemFromRewardItem) == 0x000020, "Wrong size on ShopHelper_MakeInvenItemFromRewardItem");
static_assert(offsetof(ShopHelper_MakeInvenItemFromRewardItem, _reward_item) == 0x000000, "Member 'ShopHelper_MakeInvenItemFromRewardItem::_reward_item' has a wrong offset!");
static_assert(offsetof(ShopHelper_MakeInvenItemFromRewardItem, ReturnValue) == 0x000018, "Member 'ShopHelper_MakeInvenItemFromRewardItem::ReturnValue' has a wrong offset!");

// Function Stigma.ShopHelper.ShowCantPurchasableMessageBox
// 0x0020 (0x0020 - 0x0000)
struct ShopHelper_ShowCantPurchasableMessageBox final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Currency                       _currency_id;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _ask_quick_purchase;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2150[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ShopHelper_ShowCantPurchasableMessageBox) == 0x000008, "Wrong alignment on ShopHelper_ShowCantPurchasableMessageBox");
static_assert(sizeof(ShopHelper_ShowCantPurchasableMessageBox) == 0x000020, "Wrong size on ShopHelper_ShowCantPurchasableMessageBox");
static_assert(offsetof(ShopHelper_ShowCantPurchasableMessageBox, _world_ctx) == 0x000000, "Member 'ShopHelper_ShowCantPurchasableMessageBox::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_ShowCantPurchasableMessageBox, _currency_id) == 0x000008, "Member 'ShopHelper_ShowCantPurchasableMessageBox::_currency_id' has a wrong offset!");
static_assert(offsetof(ShopHelper_ShowCantPurchasableMessageBox, _ask_quick_purchase) == 0x000018, "Member 'ShopHelper_ShowCantPurchasableMessageBox::_ask_quick_purchase' has a wrong offset!");

// Function Stigma.ShopHelper.ShowPurchaseFailureToastMessage
// 0x0018 (0x0018 - 0x0000)
struct ShopHelper_ShowPurchaseFailureToastMessage final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Currency                       _currency_id;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_ShowPurchaseFailureToastMessage) == 0x000008, "Wrong alignment on ShopHelper_ShowPurchaseFailureToastMessage");
static_assert(sizeof(ShopHelper_ShowPurchaseFailureToastMessage) == 0x000018, "Wrong size on ShopHelper_ShowPurchaseFailureToastMessage");
static_assert(offsetof(ShopHelper_ShowPurchaseFailureToastMessage, _world_ctx) == 0x000000, "Member 'ShopHelper_ShowPurchaseFailureToastMessage::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_ShowPurchaseFailureToastMessage, _currency_id) == 0x000008, "Member 'ShopHelper_ShowPurchaseFailureToastMessage::_currency_id' has a wrong offset!");

// Function Stigma.ShopHelper.SortGoodsObjects
// 0x0030 (0x0030 - 0x0000)
struct ShopHelper_SortGoodsObjects final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGoodsObject*>                   _goods_list;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EShopSortType                                 _sort_type;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_ascending;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2151[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UGoodsObject*>                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopHelper_SortGoodsObjects) == 0x000008, "Wrong alignment on ShopHelper_SortGoodsObjects");
static_assert(sizeof(ShopHelper_SortGoodsObjects) == 0x000030, "Wrong size on ShopHelper_SortGoodsObjects");
static_assert(offsetof(ShopHelper_SortGoodsObjects, _world_ctx) == 0x000000, "Member 'ShopHelper_SortGoodsObjects::_world_ctx' has a wrong offset!");
static_assert(offsetof(ShopHelper_SortGoodsObjects, _goods_list) == 0x000008, "Member 'ShopHelper_SortGoodsObjects::_goods_list' has a wrong offset!");
static_assert(offsetof(ShopHelper_SortGoodsObjects, _sort_type) == 0x000018, "Member 'ShopHelper_SortGoodsObjects::_sort_type' has a wrong offset!");
static_assert(offsetof(ShopHelper_SortGoodsObjects, _is_ascending) == 0x000019, "Member 'ShopHelper_SortGoodsObjects::_is_ascending' has a wrong offset!");
static_assert(offsetof(ShopHelper_SortGoodsObjects, ReturnValue) == 0x000020, "Member 'ShopHelper_SortGoodsObjects::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_GunPreset.Config
// 0x0008 (0x0008 - 0x0000)
struct LVData_GunPreset_Config final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_GunPreset_Config) == 0x000008, "Wrong alignment on LVData_GunPreset_Config");
static_assert(sizeof(LVData_GunPreset_Config) == 0x000008, "Wrong size on LVData_GunPreset_Config");
static_assert(offsetof(LVData_GunPreset_Config, _gun_object) == 0x000000, "Member 'LVData_GunPreset_Config::_gun_object' has a wrong offset!");

// Function Stigma.LVData_GunPreset.GetGunObject
// 0x0008 (0x0008 - 0x0000)
struct LVData_GunPreset_GetGunObject final
{
public:
	class UGunObject*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_GunPreset_GetGunObject) == 0x000008, "Wrong alignment on LVData_GunPreset_GetGunObject");
static_assert(sizeof(LVData_GunPreset_GetGunObject) == 0x000008, "Wrong size on LVData_GunPreset_GetGunObject");
static_assert(offsetof(LVData_GunPreset_GetGunObject, ReturnValue) == 0x000000, "Member 'LVData_GunPreset_GetGunObject::ReturnValue' has a wrong offset!");

// Function Stigma.ModeUtil.IsSatisfied
// 0x0018 (0x0018 - 0x0000)
struct ModeUtil_IsSatisfied final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModeUnlockCondition                   _condition;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2155[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ModeUtil_IsSatisfied) == 0x000008, "Wrong alignment on ModeUtil_IsSatisfied");
static_assert(sizeof(ModeUtil_IsSatisfied) == 0x000018, "Wrong size on ModeUtil_IsSatisfied");
static_assert(offsetof(ModeUtil_IsSatisfied, _world_ctx) == 0x000000, "Member 'ModeUtil_IsSatisfied::_world_ctx' has a wrong offset!");
static_assert(offsetof(ModeUtil_IsSatisfied, _condition) == 0x000008, "Member 'ModeUtil_IsSatisfied::_condition' has a wrong offset!");
static_assert(offsetof(ModeUtil_IsSatisfied, ReturnValue) == 0x000010, "Member 'ModeUtil_IsSatisfied::ReturnValue' has a wrong offset!");

// Function Stigma.ModeUtil.ToText
// 0x0028 (0x0028 - 0x0000)
struct ModeUtil_ToText final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModeUnlockCondition                   _condition;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModeUtil_ToText) == 0x000008, "Wrong alignment on ModeUtil_ToText");
static_assert(sizeof(ModeUtil_ToText) == 0x000028, "Wrong size on ModeUtil_ToText");
static_assert(offsetof(ModeUtil_ToText, _world_ctx) == 0x000000, "Member 'ModeUtil_ToText::_world_ctx' has a wrong offset!");
static_assert(offsetof(ModeUtil_ToText, _condition) == 0x000008, "Member 'ModeUtil_ToText::_condition' has a wrong offset!");
static_assert(offsetof(ModeUtil_ToText, ReturnValue) == 0x000010, "Member 'ModeUtil_ToText::ReturnValue' has a wrong offset!");

// Function Stigma.Marker_Chara.DetermineState
// 0x0001 (0x0001 - 0x0000)
struct Marker_Chara_DetermineState final
{
public:
	ECharaMarkerState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Marker_Chara_DetermineState) == 0x000001, "Wrong alignment on Marker_Chara_DetermineState");
static_assert(sizeof(Marker_Chara_DetermineState) == 0x000001, "Wrong size on Marker_Chara_DetermineState");
static_assert(offsetof(Marker_Chara_DetermineState, ReturnValue) == 0x000000, "Member 'Marker_Chara_DetermineState::ReturnValue' has a wrong offset!");

// Function Stigma.Marker_Chara.GetMarkerColor
// 0x0010 (0x0010 - 0x0000)
struct Marker_Chara_GetMarkerColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Marker_Chara_GetMarkerColor) == 0x000004, "Wrong alignment on Marker_Chara_GetMarkerColor");
static_assert(sizeof(Marker_Chara_GetMarkerColor) == 0x000010, "Wrong size on Marker_Chara_GetMarkerColor");
static_assert(offsetof(Marker_Chara_GetMarkerColor, ReturnValue) == 0x000000, "Member 'Marker_Chara_GetMarkerColor::ReturnValue' has a wrong offset!");

// Function Stigma.Marker_Chara.GetSide
// 0x0001 (0x0001 - 0x0000)
struct Marker_Chara_GetSide final
{
public:
	EPlayerSide                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Marker_Chara_GetSide) == 0x000001, "Wrong alignment on Marker_Chara_GetSide");
static_assert(sizeof(Marker_Chara_GetSide) == 0x000001, "Wrong size on Marker_Chara_GetSide");
static_assert(offsetof(Marker_Chara_GetSide, ReturnValue) == 0x000000, "Member 'Marker_Chara_GetSide::ReturnValue' has a wrong offset!");

// Function Stigma.Marker_Chara.IsBountyTarget
// 0x0001 (0x0001 - 0x0000)
struct Marker_Chara_IsBountyTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Marker_Chara_IsBountyTarget) == 0x000001, "Wrong alignment on Marker_Chara_IsBountyTarget");
static_assert(sizeof(Marker_Chara_IsBountyTarget) == 0x000001, "Wrong size on Marker_Chara_IsBountyTarget");
static_assert(offsetof(Marker_Chara_IsBountyTarget, ReturnValue) == 0x000000, "Member 'Marker_Chara_IsBountyTarget::ReturnValue' has a wrong offset!");

// Function Stigma.Occupation_GameMode.AddOccupyScore
// 0x0008 (0x0008 - 0x0000)
struct Occupation_GameMode_AddOccupyScore final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2159[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _additional_score;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Occupation_GameMode_AddOccupyScore) == 0x000004, "Wrong alignment on Occupation_GameMode_AddOccupyScore");
static_assert(sizeof(Occupation_GameMode_AddOccupyScore) == 0x000008, "Wrong size on Occupation_GameMode_AddOccupyScore");
static_assert(offsetof(Occupation_GameMode_AddOccupyScore, _Team) == 0x000000, "Member 'Occupation_GameMode_AddOccupyScore::_Team' has a wrong offset!");
static_assert(offsetof(Occupation_GameMode_AddOccupyScore, _additional_score) == 0x000004, "Member 'Occupation_GameMode_AddOccupyScore::_additional_score' has a wrong offset!");

// Function Stigma.Occupation_GameMode.NotifyOccupyArea
// 0x0018 (0x0018 - 0x0000)
struct Occupation_GameMode_NotifyOccupyArea final
{
public:
	ETeams                                        _prev_team;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        _curr_team;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             _occupant;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOccupationArea*                        _area;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Occupation_GameMode_NotifyOccupyArea) == 0x000008, "Wrong alignment on Occupation_GameMode_NotifyOccupyArea");
static_assert(sizeof(Occupation_GameMode_NotifyOccupyArea) == 0x000018, "Wrong size on Occupation_GameMode_NotifyOccupyArea");
static_assert(offsetof(Occupation_GameMode_NotifyOccupyArea, _prev_team) == 0x000000, "Member 'Occupation_GameMode_NotifyOccupyArea::_prev_team' has a wrong offset!");
static_assert(offsetof(Occupation_GameMode_NotifyOccupyArea, _curr_team) == 0x000001, "Member 'Occupation_GameMode_NotifyOccupyArea::_curr_team' has a wrong offset!");
static_assert(offsetof(Occupation_GameMode_NotifyOccupyArea, _occupant) == 0x000008, "Member 'Occupation_GameMode_NotifyOccupyArea::_occupant' has a wrong offset!");
static_assert(offsetof(Occupation_GameMode_NotifyOccupyArea, _area) == 0x000010, "Member 'Occupation_GameMode_NotifyOccupyArea::_area' has a wrong offset!");

// Function Stigma.UserProfile.GetCharaBody
// 0x0010 (0x0010 - 0x0000)
struct UserProfile_GetCharaBody final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetCharaBody) == 0x000008, "Wrong alignment on UserProfile_GetCharaBody");
static_assert(sizeof(UserProfile_GetCharaBody) == 0x000010, "Wrong size on UserProfile_GetCharaBody");
static_assert(offsetof(UserProfile_GetCharaBody, ReturnValue) == 0x000000, "Member 'UserProfile_GetCharaBody::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetCharaHead
// 0x0010 (0x0010 - 0x0000)
struct UserProfile_GetCharaHead final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetCharaHead) == 0x000008, "Wrong alignment on UserProfile_GetCharaHead");
static_assert(sizeof(UserProfile_GetCharaHead) == 0x000010, "Wrong size on UserProfile_GetCharaHead");
static_assert(offsetof(UserProfile_GetCharaHead, ReturnValue) == 0x000000, "Member 'UserProfile_GetCharaHead::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetCharaType
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_GetCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetCharaType) == 0x000001, "Wrong alignment on UserProfile_GetCharaType");
static_assert(sizeof(UserProfile_GetCharaType) == 0x000001, "Wrong size on UserProfile_GetCharaType");
static_assert(offsetof(UserProfile_GetCharaType, ReturnValue) == 0x000000, "Member 'UserProfile_GetCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetElapsedCreateTimeString
// 0x0010 (0x0010 - 0x0000)
struct UserProfile_GetElapsedCreateTimeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetElapsedCreateTimeString) == 0x000008, "Wrong alignment on UserProfile_GetElapsedCreateTimeString");
static_assert(sizeof(UserProfile_GetElapsedCreateTimeString) == 0x000010, "Wrong size on UserProfile_GetElapsedCreateTimeString");
static_assert(offsetof(UserProfile_GetElapsedCreateTimeString, ReturnValue) == 0x000000, "Member 'UserProfile_GetElapsedCreateTimeString::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetEmblem
// 0x0010 (0x0010 - 0x0000)
struct UserProfile_GetEmblem final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetEmblem) == 0x000008, "Wrong alignment on UserProfile_GetEmblem");
static_assert(sizeof(UserProfile_GetEmblem) == 0x000010, "Wrong size on UserProfile_GetEmblem");
static_assert(offsetof(UserProfile_GetEmblem, ReturnValue) == 0x000000, "Member 'UserProfile_GetEmblem::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct UserProfile_GetGunSpec final
{
public:
	struct FGunSpec                               ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetGunSpec) == 0x000008, "Wrong alignment on UserProfile_GetGunSpec");
static_assert(sizeof(UserProfile_GetGunSpec) == 0x0000D0, "Wrong size on UserProfile_GetGunSpec");
static_assert(offsetof(UserProfile_GetGunSpec, ReturnValue) == 0x000000, "Member 'UserProfile_GetGunSpec::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct UserProfile_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetLevel) == 0x000004, "Wrong alignment on UserProfile_GetLevel");
static_assert(sizeof(UserProfile_GetLevel) == 0x000004, "Wrong size on UserProfile_GetLevel");
static_assert(offsetof(UserProfile_GetLevel, ReturnValue) == 0x000000, "Member 'UserProfile_GetLevel::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct UserProfile_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetNickname) == 0x000008, "Wrong alignment on UserProfile_GetNickname");
static_assert(sizeof(UserProfile_GetNickname) == 0x000018, "Wrong size on UserProfile_GetNickname");
static_assert(offsetof(UserProfile_GetNickname, ReturnValue) == 0x000000, "Member 'UserProfile_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetNicknameFX
// 0x0010 (0x0010 - 0x0000)
struct UserProfile_GetNicknameFX final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetNicknameFX) == 0x000008, "Wrong alignment on UserProfile_GetNicknameFX");
static_assert(sizeof(UserProfile_GetNicknameFX) == 0x000010, "Wrong size on UserProfile_GetNicknameFX");
static_assert(offsetof(UserProfile_GetNicknameFX, ReturnValue) == 0x000000, "Member 'UserProfile_GetNicknameFX::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetPlayingAt
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_GetPlayingAt final
{
public:
	EUserPlayingAt                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetPlayingAt) == 0x000001, "Wrong alignment on UserProfile_GetPlayingAt");
static_assert(sizeof(UserProfile_GetPlayingAt) == 0x000001, "Wrong size on UserProfile_GetPlayingAt");
static_assert(offsetof(UserProfile_GetPlayingAt, ReturnValue) == 0x000000, "Member 'UserProfile_GetPlayingAt::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetProfileCard
// 0x0010 (0x0010 - 0x0000)
struct UserProfile_GetProfileCard final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetProfileCard) == 0x000008, "Wrong alignment on UserProfile_GetProfileCard");
static_assert(sizeof(UserProfile_GetProfileCard) == 0x000010, "Wrong size on UserProfile_GetProfileCard");
static_assert(offsetof(UserProfile_GetProfileCard, ReturnValue) == 0x000000, "Member 'UserProfile_GetProfileCard::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetProfileType
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_GetProfileType final
{
public:
	EUserProfileType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetProfileType) == 0x000001, "Wrong alignment on UserProfile_GetProfileType");
static_assert(sizeof(UserProfile_GetProfileType) == 0x000001, "Wrong size on UserProfile_GetProfileType");
static_assert(offsetof(UserProfile_GetProfileType, ReturnValue) == 0x000000, "Member 'UserProfile_GetProfileType::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetSocialPriorityLevel
// 0x0004 (0x0004 - 0x0000)
struct UserProfile_GetSocialPriorityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetSocialPriorityLevel) == 0x000004, "Wrong alignment on UserProfile_GetSocialPriorityLevel");
static_assert(sizeof(UserProfile_GetSocialPriorityLevel) == 0x000004, "Wrong size on UserProfile_GetSocialPriorityLevel");
static_assert(offsetof(UserProfile_GetSocialPriorityLevel, ReturnValue) == 0x000000, "Member 'UserProfile_GetSocialPriorityLevel::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetTier
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_GetTier final
{
public:
	ETier                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetTier) == 0x000001, "Wrong alignment on UserProfile_GetTier");
static_assert(sizeof(UserProfile_GetTier) == 0x000001, "Wrong size on UserProfile_GetTier");
static_assert(offsetof(UserProfile_GetTier, ReturnValue) == 0x000000, "Member 'UserProfile_GetTier::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.GetUserID
// 0x0008 (0x0008 - 0x0000)
struct UserProfile_GetUserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_GetUserID) == 0x000008, "Wrong alignment on UserProfile_GetUserID");
static_assert(sizeof(UserProfile_GetUserID) == 0x000008, "Wrong size on UserProfile_GetUserID");
static_assert(offsetof(UserProfile_GetUserID, ReturnValue) == 0x000000, "Member 'UserProfile_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.HasValidCharacter
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_HasValidCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_HasValidCharacter) == 0x000001, "Wrong alignment on UserProfile_HasValidCharacter");
static_assert(sizeof(UserProfile_HasValidCharacter) == 0x000001, "Wrong size on UserProfile_HasValidCharacter");
static_assert(offsetof(UserProfile_HasValidCharacter, ReturnValue) == 0x000000, "Member 'UserProfile_HasValidCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.HasValidProfile
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_HasValidProfile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_HasValidProfile) == 0x000001, "Wrong alignment on UserProfile_HasValidProfile");
static_assert(sizeof(UserProfile_HasValidProfile) == 0x000001, "Wrong size on UserProfile_HasValidProfile");
static_assert(offsetof(UserProfile_HasValidProfile, ReturnValue) == 0x000000, "Member 'UserProfile_HasValidProfile::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.IsMine
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_IsMine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_IsMine) == 0x000001, "Wrong alignment on UserProfile_IsMine");
static_assert(sizeof(UserProfile_IsMine) == 0x000001, "Wrong size on UserProfile_IsMine");
static_assert(offsetof(UserProfile_IsMine, ReturnValue) == 0x000000, "Member 'UserProfile_IsMine::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.IsOnline
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_IsOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_IsOnline) == 0x000001, "Wrong alignment on UserProfile_IsOnline");
static_assert(sizeof(UserProfile_IsOnline) == 0x000001, "Wrong size on UserProfile_IsOnline");
static_assert(offsetof(UserProfile_IsOnline, ReturnValue) == 0x000000, "Member 'UserProfile_IsOnline::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.IsPlayingAt
// 0x0002 (0x0002 - 0x0000)
struct UserProfile_IsPlayingAt final
{
public:
	EUserPlayingAt                                _playing_at;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_IsPlayingAt) == 0x000001, "Wrong alignment on UserProfile_IsPlayingAt");
static_assert(sizeof(UserProfile_IsPlayingAt) == 0x000002, "Wrong size on UserProfile_IsPlayingAt");
static_assert(offsetof(UserProfile_IsPlayingAt, _playing_at) == 0x000000, "Member 'UserProfile_IsPlayingAt::_playing_at' has a wrong offset!");
static_assert(offsetof(UserProfile_IsPlayingAt, ReturnValue) == 0x000001, "Member 'UserProfile_IsPlayingAt::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.IsPlayingAtBattle
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_IsPlayingAtBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_IsPlayingAtBattle) == 0x000001, "Wrong alignment on UserProfile_IsPlayingAtBattle");
static_assert(sizeof(UserProfile_IsPlayingAtBattle) == 0x000001, "Wrong size on UserProfile_IsPlayingAtBattle");
static_assert(offsetof(UserProfile_IsPlayingAtBattle, ReturnValue) == 0x000000, "Member 'UserProfile_IsPlayingAtBattle::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfile.IsPlayingAtLobby
// 0x0001 (0x0001 - 0x0000)
struct UserProfile_IsPlayingAtLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfile_IsPlayingAtLobby) == 0x000001, "Wrong alignment on UserProfile_IsPlayingAtLobby");
static_assert(sizeof(UserProfile_IsPlayingAtLobby) == 0x000001, "Wrong size on UserProfile_IsPlayingAtLobby");
static_assert(offsetof(UserProfile_IsPlayingAtLobby, ReturnValue) == 0x000000, "Member 'UserProfile_IsPlayingAtLobby::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RewardedItems.InitWidget
// 0x0020 (0x0020 - 0x0000)
struct UI_RewardedItems_InitWidget final
{
public:
	struct FRewardPlain                           _reward_plain;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardedItems_InitWidget) == 0x000008, "Wrong alignment on UI_RewardedItems_InitWidget");
static_assert(sizeof(UI_RewardedItems_InitWidget) == 0x000020, "Wrong size on UI_RewardedItems_InitWidget");
static_assert(offsetof(UI_RewardedItems_InitWidget, _reward_plain) == 0x000000, "Member 'UI_RewardedItems_InitWidget::_reward_plain' has a wrong offset!");

// Function Stigma.UI_ShopPage.FindGoodsObject
// 0x0018 (0x0018 - 0x0000)
struct UI_ShopPage_FindGoodsObject final
{
public:
	struct FGoodsID                               _goods_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGoodsObject*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_FindGoodsObject) == 0x000008, "Wrong alignment on UI_ShopPage_FindGoodsObject");
static_assert(sizeof(UI_ShopPage_FindGoodsObject) == 0x000018, "Wrong size on UI_ShopPage_FindGoodsObject");
static_assert(offsetof(UI_ShopPage_FindGoodsObject, _goods_id) == 0x000000, "Member 'UI_ShopPage_FindGoodsObject::_goods_id' has a wrong offset!");
static_assert(offsetof(UI_ShopPage_FindGoodsObject, ReturnValue) == 0x000010, "Member 'UI_ShopPage_FindGoodsObject::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ShopPage.OnMainTabChanged
// 0x000C (0x000C - 0x0000)
struct UI_ShopPage_OnMainTabChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_OnMainTabChanged) == 0x000004, "Wrong alignment on UI_ShopPage_OnMainTabChanged");
static_assert(sizeof(UI_ShopPage_OnMainTabChanged) == 0x00000C, "Wrong size on UI_ShopPage_OnMainTabChanged");
static_assert(offsetof(UI_ShopPage_OnMainTabChanged, _id) == 0x000000, "Member 'UI_ShopPage_OnMainTabChanged::_id' has a wrong offset!");
static_assert(offsetof(UI_ShopPage_OnMainTabChanged, _idx) == 0x000008, "Member 'UI_ShopPage_OnMainTabChanged::_idx' has a wrong offset!");

// Function Stigma.UI_ShopPage.OnSelectGunFilter
// 0x0001 (0x0001 - 0x0000)
struct UI_ShopPage_OnSelectGunFilter final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_OnSelectGunFilter) == 0x000001, "Wrong alignment on UI_ShopPage_OnSelectGunFilter");
static_assert(sizeof(UI_ShopPage_OnSelectGunFilter) == 0x000001, "Wrong size on UI_ShopPage_OnSelectGunFilter");
static_assert(offsetof(UI_ShopPage_OnSelectGunFilter, _gun_type) == 0x000000, "Member 'UI_ShopPage_OnSelectGunFilter::_gun_type' has a wrong offset!");

// Function Stigma.UI_ShopPage.OnSelectionSortMenu
// 0x000C (0x000C - 0x0000)
struct UI_ShopPage_OnSelectionSortMenu final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_OnSelectionSortMenu) == 0x000004, "Wrong alignment on UI_ShopPage_OnSelectionSortMenu");
static_assert(sizeof(UI_ShopPage_OnSelectionSortMenu) == 0x00000C, "Wrong size on UI_ShopPage_OnSelectionSortMenu");
static_assert(offsetof(UI_ShopPage_OnSelectionSortMenu, _id) == 0x000000, "Member 'UI_ShopPage_OnSelectionSortMenu::_id' has a wrong offset!");
static_assert(offsetof(UI_ShopPage_OnSelectionSortMenu, _idx) == 0x000008, "Member 'UI_ShopPage_OnSelectionSortMenu::_idx' has a wrong offset!");

// Function Stigma.UI_ShopPage.OnSelectMasterFilter
// 0x0001 (0x0001 - 0x0000)
struct UI_ShopPage_OnSelectMasterFilter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_OnSelectMasterFilter) == 0x000001, "Wrong alignment on UI_ShopPage_OnSelectMasterFilter");
static_assert(sizeof(UI_ShopPage_OnSelectMasterFilter) == 0x000001, "Wrong size on UI_ShopPage_OnSelectMasterFilter");
static_assert(offsetof(UI_ShopPage_OnSelectMasterFilter, _chara_type) == 0x000000, "Member 'UI_ShopPage_OnSelectMasterFilter::_chara_type' has a wrong offset!");

// Function Stigma.UI_ShopPage.OnSubTabChanged
// 0x000C (0x000C - 0x0000)
struct UI_ShopPage_OnSubTabChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_OnSubTabChanged) == 0x000004, "Wrong alignment on UI_ShopPage_OnSubTabChanged");
static_assert(sizeof(UI_ShopPage_OnSubTabChanged) == 0x00000C, "Wrong size on UI_ShopPage_OnSubTabChanged");
static_assert(offsetof(UI_ShopPage_OnSubTabChanged, _id) == 0x000000, "Member 'UI_ShopPage_OnSubTabChanged::_id' has a wrong offset!");
static_assert(offsetof(UI_ShopPage_OnSubTabChanged, _idx) == 0x000008, "Member 'UI_ShopPage_OnSubTabChanged::_idx' has a wrong offset!");

// Function Stigma.UI_ShopPage.OnUpdateGoods
// 0x0001 (0x0001 - 0x0000)
struct UI_ShopPage_OnUpdateGoods final
{
public:
	EUserEvent                                    _event;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_OnUpdateGoods) == 0x000001, "Wrong alignment on UI_ShopPage_OnUpdateGoods");
static_assert(sizeof(UI_ShopPage_OnUpdateGoods) == 0x000001, "Wrong size on UI_ShopPage_OnUpdateGoods");
static_assert(offsetof(UI_ShopPage_OnUpdateGoods, _event) == 0x000000, "Member 'UI_ShopPage_OnUpdateGoods::_event' has a wrong offset!");

// Function Stigma.UI_ShopPage.ScrollToGoods
// 0x0010 (0x0010 - 0x0000)
struct UI_ShopPage_ScrollToGoods final
{
public:
	struct FGoodsID                               _goods_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_ScrollToGoods) == 0x000008, "Wrong alignment on UI_ShopPage_ScrollToGoods");
static_assert(sizeof(UI_ShopPage_ScrollToGoods) == 0x000010, "Wrong size on UI_ShopPage_ScrollToGoods");
static_assert(offsetof(UI_ShopPage_ScrollToGoods, _goods_id) == 0x000000, "Member 'UI_ShopPage_ScrollToGoods::_goods_id' has a wrong offset!");

// Function Stigma.UI_ShopPage.SelectCategory
// 0x0001 (0x0001 - 0x0000)
struct UI_ShopPage_SelectCategory final
{
public:
	EGoodsCategory                                _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_SelectCategory) == 0x000001, "Wrong alignment on UI_ShopPage_SelectCategory");
static_assert(sizeof(UI_ShopPage_SelectCategory) == 0x000001, "Wrong size on UI_ShopPage_SelectCategory");
static_assert(offsetof(UI_ShopPage_SelectCategory, _category) == 0x000000, "Member 'UI_ShopPage_SelectCategory::_category' has a wrong offset!");

// Function Stigma.UI_ShopPage.SelectSubCategory
// 0x0008 (0x0008 - 0x0000)
struct UI_ShopPage_SelectSubCategory final
{
public:
	class FName                                   _tab_id;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopPage_SelectSubCategory) == 0x000004, "Wrong alignment on UI_ShopPage_SelectSubCategory");
static_assert(sizeof(UI_ShopPage_SelectSubCategory) == 0x000008, "Wrong size on UI_ShopPage_SelectSubCategory");
static_assert(offsetof(UI_ShopPage_SelectSubCategory, _tab_id) == 0x000000, "Member 'UI_ShopPage_SelectSubCategory::_tab_id' has a wrong offset!");

// Function Stigma.GoToWidgetHelper.GotoMasterObtain
// 0x0010 (0x0010 - 0x0000)
struct GoToWidgetHelper_GotoMasterObtain final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2169[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GoToWidgetHelper_GotoMasterObtain) == 0x000008, "Wrong alignment on GoToWidgetHelper_GotoMasterObtain");
static_assert(sizeof(GoToWidgetHelper_GotoMasterObtain) == 0x000010, "Wrong size on GoToWidgetHelper_GotoMasterObtain");
static_assert(offsetof(GoToWidgetHelper_GotoMasterObtain, _outer) == 0x000000, "Member 'GoToWidgetHelper_GotoMasterObtain::_outer' has a wrong offset!");
static_assert(offsetof(GoToWidgetHelper_GotoMasterObtain, _chara_type) == 0x000008, "Member 'GoToWidgetHelper_GotoMasterObtain::_chara_type' has a wrong offset!");

// Function Stigma.GoToWidgetHelper.GoToWidget
// 0x0020 (0x0020 - 0x0000)
struct GoToWidgetHelper_GoToWidget final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _go_to_widget_id;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         _detailer_params;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoToWidgetHelper_GoToWidget) == 0x000008, "Wrong alignment on GoToWidgetHelper_GoToWidget");
static_assert(sizeof(GoToWidgetHelper_GoToWidget) == 0x000020, "Wrong size on GoToWidgetHelper_GoToWidget");
static_assert(offsetof(GoToWidgetHelper_GoToWidget, _outer) == 0x000000, "Member 'GoToWidgetHelper_GoToWidget::_outer' has a wrong offset!");
static_assert(offsetof(GoToWidgetHelper_GoToWidget, _go_to_widget_id) == 0x000008, "Member 'GoToWidgetHelper_GoToWidget::_go_to_widget_id' has a wrong offset!");
static_assert(offsetof(GoToWidgetHelper_GoToWidget, _detailer_params) == 0x000010, "Member 'GoToWidgetHelper_GoToWidget::_detailer_params' has a wrong offset!");

// Function Stigma.UI_SelectWeaponPanel.OnChangedGun
// 0x0010 (0x0010 - 0x0000)
struct UI_SelectWeaponPanel_OnChangedGun final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SelectWeaponPanel_OnChangedGun) == 0x000008, "Wrong alignment on UI_SelectWeaponPanel_OnChangedGun");
static_assert(sizeof(UI_SelectWeaponPanel_OnChangedGun) == 0x000010, "Wrong size on UI_SelectWeaponPanel_OnChangedGun");
static_assert(offsetof(UI_SelectWeaponPanel_OnChangedGun, _gun_preset) == 0x000000, "Member 'UI_SelectWeaponPanel_OnChangedGun::_gun_preset' has a wrong offset!");

// Function Stigma.UI_SelectWeaponPanel.OnChangedMaster
// 0x0008 (0x0008 - 0x0000)
struct UI_SelectWeaponPanel_OnChangedMaster final
{
public:
	bool                                          _is_selected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _selected_master_idx;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SelectWeaponPanel_OnChangedMaster) == 0x000004, "Wrong alignment on UI_SelectWeaponPanel_OnChangedMaster");
static_assert(sizeof(UI_SelectWeaponPanel_OnChangedMaster) == 0x000008, "Wrong size on UI_SelectWeaponPanel_OnChangedMaster");
static_assert(offsetof(UI_SelectWeaponPanel_OnChangedMaster, _is_selected) == 0x000000, "Member 'UI_SelectWeaponPanel_OnChangedMaster::_is_selected' has a wrong offset!");
static_assert(offsetof(UI_SelectWeaponPanel_OnChangedMaster, _chara_type) == 0x000001, "Member 'UI_SelectWeaponPanel_OnChangedMaster::_chara_type' has a wrong offset!");
static_assert(offsetof(UI_SelectWeaponPanel_OnChangedMaster, _selected_master_idx) == 0x000004, "Member 'UI_SelectWeaponPanel_OnChangedMaster::_selected_master_idx' has a wrong offset!");

// Function Stigma.UI_SelectWeaponPanel.OnHoverGunPresetItem
// 0x0010 (0x0010 - 0x0000)
struct UI_SelectWeaponPanel_OnHoverGunPresetItem final
{
public:
	class UObject*                                _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_hover;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_SelectWeaponPanel_OnHoverGunPresetItem) == 0x000008, "Wrong alignment on UI_SelectWeaponPanel_OnHoverGunPresetItem");
static_assert(sizeof(UI_SelectWeaponPanel_OnHoverGunPresetItem) == 0x000010, "Wrong size on UI_SelectWeaponPanel_OnHoverGunPresetItem");
static_assert(offsetof(UI_SelectWeaponPanel_OnHoverGunPresetItem, _item) == 0x000000, "Member 'UI_SelectWeaponPanel_OnHoverGunPresetItem::_item' has a wrong offset!");
static_assert(offsetof(UI_SelectWeaponPanel_OnHoverGunPresetItem, _is_hover) == 0x000008, "Member 'UI_SelectWeaponPanel_OnHoverGunPresetItem::_is_hover' has a wrong offset!");

// Function Stigma.UI_SelectWeaponPanel.OnPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_SelectWeaponPanel_OnPlayerStateChanged final
{
public:
	EChangedPlayerState                           _reason;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AMatchServicedPlayerState*              _ps;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SelectWeaponPanel_OnPlayerStateChanged) == 0x000008, "Wrong alignment on UI_SelectWeaponPanel_OnPlayerStateChanged");
static_assert(sizeof(UI_SelectWeaponPanel_OnPlayerStateChanged) == 0x000010, "Wrong size on UI_SelectWeaponPanel_OnPlayerStateChanged");
static_assert(offsetof(UI_SelectWeaponPanel_OnPlayerStateChanged, _reason) == 0x000000, "Member 'UI_SelectWeaponPanel_OnPlayerStateChanged::_reason' has a wrong offset!");
static_assert(offsetof(UI_SelectWeaponPanel_OnPlayerStateChanged, _ps) == 0x000008, "Member 'UI_SelectWeaponPanel_OnPlayerStateChanged::_ps' has a wrong offset!");

// Function Stigma.UI_SelectWeaponPanel.SetSelectMaster
// 0x0004 (0x0004 - 0x0000)
struct UI_SelectWeaponPanel_SetSelectMaster final
{
public:
	int32                                         _master_idx;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SelectWeaponPanel_SetSelectMaster) == 0x000004, "Wrong alignment on UI_SelectWeaponPanel_SetSelectMaster");
static_assert(sizeof(UI_SelectWeaponPanel_SetSelectMaster) == 0x000004, "Wrong size on UI_SelectWeaponPanel_SetSelectMaster");
static_assert(offsetof(UI_SelectWeaponPanel_SetSelectMaster, _master_idx) == 0x000000, "Member 'UI_SelectWeaponPanel_SetSelectMaster::_master_idx' has a wrong offset!");

// Function Stigma.UI_SelectWeaponPanel.UpdateDetail
// 0x0018 (0x0018 - 0x0000)
struct UI_SelectWeaponPanel_UpdateDetail final
{
public:
	class UGunObject*                             _origin_gun_obj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             _compared_gun_obj;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2170[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_SelectWeaponPanel_UpdateDetail) == 0x000008, "Wrong alignment on UI_SelectWeaponPanel_UpdateDetail");
static_assert(sizeof(UI_SelectWeaponPanel_UpdateDetail) == 0x000018, "Wrong size on UI_SelectWeaponPanel_UpdateDetail");
static_assert(offsetof(UI_SelectWeaponPanel_UpdateDetail, _origin_gun_obj) == 0x000000, "Member 'UI_SelectWeaponPanel_UpdateDetail::_origin_gun_obj' has a wrong offset!");
static_assert(offsetof(UI_SelectWeaponPanel_UpdateDetail, _compared_gun_obj) == 0x000008, "Member 'UI_SelectWeaponPanel_UpdateDetail::_compared_gun_obj' has a wrong offset!");
static_assert(offsetof(UI_SelectWeaponPanel_UpdateDetail, _chara_type) == 0x000010, "Member 'UI_SelectWeaponPanel_UpdateDetail::_chara_type' has a wrong offset!");

// Function Stigma.BuffBase.ActivateBuff
// 0x0001 (0x0001 - 0x0000)
struct BuffBase_ActivateBuff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_ActivateBuff) == 0x000001, "Wrong alignment on BuffBase_ActivateBuff");
static_assert(sizeof(BuffBase_ActivateBuff) == 0x000001, "Wrong size on BuffBase_ActivateBuff");
static_assert(offsetof(BuffBase_ActivateBuff, ReturnValue) == 0x000000, "Member 'BuffBase_ActivateBuff::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.DeactivateBuff
// 0x0001 (0x0001 - 0x0000)
struct BuffBase_DeactivateBuff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_DeactivateBuff) == 0x000001, "Wrong alignment on BuffBase_DeactivateBuff");
static_assert(sizeof(BuffBase_DeactivateBuff) == 0x000001, "Wrong size on BuffBase_DeactivateBuff");
static_assert(offsetof(BuffBase_DeactivateBuff, ReturnValue) == 0x000000, "Member 'BuffBase_DeactivateBuff::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.GetActiveTimeProgress
// 0x0004 (0x0004 - 0x0000)
struct BuffBase_GetActiveTimeProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_GetActiveTimeProgress) == 0x000004, "Wrong alignment on BuffBase_GetActiveTimeProgress");
static_assert(sizeof(BuffBase_GetActiveTimeProgress) == 0x000004, "Wrong size on BuffBase_GetActiveTimeProgress");
static_assert(offsetof(BuffBase_GetActiveTimeProgress, ReturnValue) == 0x000000, "Member 'BuffBase_GetActiveTimeProgress::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.OnFirstUpdate
// 0x001C (0x001C - 0x0000)
struct BuffBase_OnFirstUpdate final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuffStats                             _buff_stats;                                       // 0x0004(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_OnFirstUpdate) == 0x000004, "Wrong alignment on BuffBase_OnFirstUpdate");
static_assert(sizeof(BuffBase_OnFirstUpdate) == 0x00001C, "Wrong size on BuffBase_OnFirstUpdate");
static_assert(offsetof(BuffBase_OnFirstUpdate, _delta) == 0x000000, "Member 'BuffBase_OnFirstUpdate::_delta' has a wrong offset!");
static_assert(offsetof(BuffBase_OnFirstUpdate, _buff_stats) == 0x000004, "Member 'BuffBase_OnFirstUpdate::_buff_stats' has a wrong offset!");

// Function Stigma.BuffBase.OnUpdateBuff
// 0x001C (0x001C - 0x0000)
struct BuffBase_OnUpdateBuff final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuffStats                             _buff_stats;                                       // 0x0004(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_OnUpdateBuff) == 0x000004, "Wrong alignment on BuffBase_OnUpdateBuff");
static_assert(sizeof(BuffBase_OnUpdateBuff) == 0x00001C, "Wrong size on BuffBase_OnUpdateBuff");
static_assert(offsetof(BuffBase_OnUpdateBuff, _delta) == 0x000000, "Member 'BuffBase_OnUpdateBuff::_delta' has a wrong offset!");
static_assert(offsetof(BuffBase_OnUpdateBuff, _buff_stats) == 0x000004, "Member 'BuffBase_OnUpdateBuff::_buff_stats' has a wrong offset!");

// Function Stigma.BuffBase.GetBuffOptions
// 0x0018 (0x0018 - 0x0000)
struct BuffBase_GetBuffOptions final
{
public:
	int32                                         _buff_level;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2172[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FBuffEffectOption>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_GetBuffOptions) == 0x000008, "Wrong alignment on BuffBase_GetBuffOptions");
static_assert(sizeof(BuffBase_GetBuffOptions) == 0x000018, "Wrong size on BuffBase_GetBuffOptions");
static_assert(offsetof(BuffBase_GetBuffOptions, _buff_level) == 0x000000, "Member 'BuffBase_GetBuffOptions::_buff_level' has a wrong offset!");
static_assert(offsetof(BuffBase_GetBuffOptions, ReturnValue) == 0x000008, "Member 'BuffBase_GetBuffOptions::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct BuffBase_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_GetDuration) == 0x000004, "Wrong alignment on BuffBase_GetDuration");
static_assert(sizeof(BuffBase_GetDuration) == 0x000004, "Wrong size on BuffBase_GetDuration");
static_assert(offsetof(BuffBase_GetDuration, ReturnValue) == 0x000000, "Member 'BuffBase_GetDuration::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.GetLimitType
// 0x0001 (0x0001 - 0x0000)
struct BuffBase_GetLimitType final
{
public:
	EBuffLimitType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_GetLimitType) == 0x000001, "Wrong alignment on BuffBase_GetLimitType");
static_assert(sizeof(BuffBase_GetLimitType) == 0x000001, "Wrong size on BuffBase_GetLimitType");
static_assert(offsetof(BuffBase_GetLimitType, ReturnValue) == 0x000000, "Member 'BuffBase_GetLimitType::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.IsActivating
// 0x0001 (0x0001 - 0x0000)
struct BuffBase_IsActivating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_IsActivating) == 0x000001, "Wrong alignment on BuffBase_IsActivating");
static_assert(sizeof(BuffBase_IsActivating) == 0x000001, "Wrong size on BuffBase_IsActivating");
static_assert(offsetof(BuffBase_IsActivating, ReturnValue) == 0x000000, "Member 'BuffBase_IsActivating::ReturnValue' has a wrong offset!");

// Function Stigma.BuffBase.IsProperVariable
// 0x0001 (0x0001 - 0x0000)
struct BuffBase_IsProperVariable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffBase_IsProperVariable) == 0x000001, "Wrong alignment on BuffBase_IsProperVariable");
static_assert(sizeof(BuffBase_IsProperVariable) == 0x000001, "Wrong size on BuffBase_IsProperVariable");
static_assert(offsetof(BuffBase_IsProperVariable, ReturnValue) == 0x000000, "Member 'BuffBase_IsProperVariable::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RoundResultBase.InitWidget
// 0x000C (0x000C - 0x0000)
struct UI_RoundResultBase_InitWidget final
{
public:
	struct FRoundResult                           _result;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _override_life_time;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RoundResultBase_InitWidget) == 0x000004, "Wrong alignment on UI_RoundResultBase_InitWidget");
static_assert(sizeof(UI_RoundResultBase_InitWidget) == 0x00000C, "Wrong size on UI_RoundResultBase_InitWidget");
static_assert(offsetof(UI_RoundResultBase_InitWidget, _result) == 0x000000, "Member 'UI_RoundResultBase_InitWidget::_result' has a wrong offset!");
static_assert(offsetof(UI_RoundResultBase_InitWidget, _override_life_time) == 0x000008, "Member 'UI_RoundResultBase_InitWidget::_override_life_time' has a wrong offset!");

// Function Stigma.UI_TDM_MainScore.UpdateWinningTeam
// 0x0002 (0x0002 - 0x0000)
struct UI_TDM_MainScore_UpdateWinningTeam final
{
public:
	bool                                          _is_tie;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _my_team;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TDM_MainScore_UpdateWinningTeam) == 0x000001, "Wrong alignment on UI_TDM_MainScore_UpdateWinningTeam");
static_assert(sizeof(UI_TDM_MainScore_UpdateWinningTeam) == 0x000002, "Wrong size on UI_TDM_MainScore_UpdateWinningTeam");
static_assert(offsetof(UI_TDM_MainScore_UpdateWinningTeam, _is_tie) == 0x000000, "Member 'UI_TDM_MainScore_UpdateWinningTeam::_is_tie' has a wrong offset!");
static_assert(offsetof(UI_TDM_MainScore_UpdateWinningTeam, _my_team) == 0x000001, "Member 'UI_TDM_MainScore_UpdateWinningTeam::_my_team' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxGroupBase.ClearAllSelections
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_TextCheckBoxGroupBase_ClearAllSelections final
{
public:
	bool                                          _invoke_callback;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_TextCheckBoxGroupBase_ClearAllSelections) == 0x000001, "Wrong alignment on Ctrl_TextCheckBoxGroupBase_ClearAllSelections");
static_assert(sizeof(Ctrl_TextCheckBoxGroupBase_ClearAllSelections) == 0x000001, "Wrong size on Ctrl_TextCheckBoxGroupBase_ClearAllSelections");
static_assert(offsetof(Ctrl_TextCheckBoxGroupBase_ClearAllSelections, _invoke_callback) == 0x000000, "Member 'Ctrl_TextCheckBoxGroupBase_ClearAllSelections::_invoke_callback' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxGroupBase.RegisterOnStateChange
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange final
{
public:
	TDelegate<void(class UCtrl_TextCheckBoxBase* _check_box, class FName& _id, bool _is_checked)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange) == 0x000004, "Wrong alignment on Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange");
static_assert(sizeof(Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange) == 0x000010, "Wrong size on Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange");
static_assert(offsetof(Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange, _callback) == 0x000000, "Member 'Ctrl_TextCheckBoxGroupBase_RegisterOnStateChange::_callback' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxGroupBase.SetCheckStateByID
// 0x000C (0x000C - 0x0000)
struct Ctrl_TextCheckBoxGroupBase_SetCheckStateByID final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_check;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217A[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_TextCheckBoxGroupBase_SetCheckStateByID) == 0x000004, "Wrong alignment on Ctrl_TextCheckBoxGroupBase_SetCheckStateByID");
static_assert(sizeof(Ctrl_TextCheckBoxGroupBase_SetCheckStateByID) == 0x00000C, "Wrong size on Ctrl_TextCheckBoxGroupBase_SetCheckStateByID");
static_assert(offsetof(Ctrl_TextCheckBoxGroupBase_SetCheckStateByID, _id) == 0x000000, "Member 'Ctrl_TextCheckBoxGroupBase_SetCheckStateByID::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_TextCheckBoxGroupBase_SetCheckStateByID, _is_check) == 0x000008, "Member 'Ctrl_TextCheckBoxGroupBase_SetCheckStateByID::_is_check' has a wrong offset!");
static_assert(offsetof(Ctrl_TextCheckBoxGroupBase_SetCheckStateByID, _invoke_callback) == 0x000009, "Member 'Ctrl_TextCheckBoxGroupBase_SetCheckStateByID::_invoke_callback' has a wrong offset!");

// Function Stigma.UI_SocialContainer.OnPartyEntered
// 0x0008 (0x0008 - 0x0000)
struct UI_SocialContainer_OnPartyEntered final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialContainer_OnPartyEntered) == 0x000008, "Wrong alignment on UI_SocialContainer_OnPartyEntered");
static_assert(sizeof(UI_SocialContainer_OnPartyEntered) == 0x000008, "Wrong size on UI_SocialContainer_OnPartyEntered");
static_assert(offsetof(UI_SocialContainer_OnPartyEntered, _party) == 0x000000, "Member 'UI_SocialContainer_OnPartyEntered::_party' has a wrong offset!");

// Function Stigma.UI_RewardMissionSlot.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_RewardMissionSlot_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardMissionSlot_SetDesc) == 0x000008, "Wrong alignment on UI_RewardMissionSlot_SetDesc");
static_assert(sizeof(UI_RewardMissionSlot_SetDesc) == 0x000018, "Wrong size on UI_RewardMissionSlot_SetDesc");
static_assert(offsetof(UI_RewardMissionSlot_SetDesc, _text) == 0x000000, "Member 'UI_RewardMissionSlot_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_RewardMissionSlot.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_RewardMissionSlot_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardMissionSlot_SetTitle) == 0x000008, "Wrong alignment on UI_RewardMissionSlot_SetTitle");
static_assert(sizeof(UI_RewardMissionSlot_SetTitle) == 0x000018, "Wrong size on UI_RewardMissionSlot_SetTitle");
static_assert(offsetof(UI_RewardMissionSlot_SetTitle, _text) == 0x000000, "Member 'UI_RewardMissionSlot_SetTitle::_text' has a wrong offset!");

// Function Stigma.LVData_CompetitionRankingItem.Config
// 0x0010 (0x0010 - 0x0000)
struct LVData_CompetitionRankingItem_Config final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UCompetitionPlayer*                     _entry;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_CompetitionRankingItem_Config) == 0x000008, "Wrong alignment on LVData_CompetitionRankingItem_Config");
static_assert(sizeof(LVData_CompetitionRankingItem_Config) == 0x000010, "Wrong size on LVData_CompetitionRankingItem_Config");
static_assert(offsetof(LVData_CompetitionRankingItem_Config, _competition_type) == 0x000000, "Member 'LVData_CompetitionRankingItem_Config::_competition_type' has a wrong offset!");
static_assert(offsetof(LVData_CompetitionRankingItem_Config, _entry) == 0x000008, "Member 'LVData_CompetitionRankingItem_Config::_entry' has a wrong offset!");

// Function Stigma.InteractionComponent.GetOrCreateInteractionUI
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_GetOrCreateInteractionUI final
{
public:
	class UUI_Interaction*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetOrCreateInteractionUI) == 0x000008, "Wrong alignment on InteractionComponent_GetOrCreateInteractionUI");
static_assert(sizeof(InteractionComponent_GetOrCreateInteractionUI) == 0x000008, "Wrong size on InteractionComponent_GetOrCreateInteractionUI");
static_assert(offsetof(InteractionComponent_GetOrCreateInteractionUI, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetOrCreateInteractionUI::ReturnValue' has a wrong offset!");

// Function Stigma.InteractionComponent.RPC_ALL_TryInteract
// 0x0018 (0x0018 - 0x0000)
struct InteractionComponent_RPC_ALL_TryInteract final
{
public:
	class AActor*                                 _interactive_target;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _key_pressed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2183[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _param;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionResult                            _result;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2184[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(InteractionComponent_RPC_ALL_TryInteract) == 0x000008, "Wrong alignment on InteractionComponent_RPC_ALL_TryInteract");
static_assert(sizeof(InteractionComponent_RPC_ALL_TryInteract) == 0x000018, "Wrong size on InteractionComponent_RPC_ALL_TryInteract");
static_assert(offsetof(InteractionComponent_RPC_ALL_TryInteract, _interactive_target) == 0x000000, "Member 'InteractionComponent_RPC_ALL_TryInteract::_interactive_target' has a wrong offset!");
static_assert(offsetof(InteractionComponent_RPC_ALL_TryInteract, _key_pressed) == 0x000008, "Member 'InteractionComponent_RPC_ALL_TryInteract::_key_pressed' has a wrong offset!");
static_assert(offsetof(InteractionComponent_RPC_ALL_TryInteract, _param) == 0x00000C, "Member 'InteractionComponent_RPC_ALL_TryInteract::_param' has a wrong offset!");
static_assert(offsetof(InteractionComponent_RPC_ALL_TryInteract, _result) == 0x000010, "Member 'InteractionComponent_RPC_ALL_TryInteract::_result' has a wrong offset!");

// Function Stigma.InteractionComponent.RPC_SERVER_TryInteract
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_RPC_SERVER_TryInteract final
{
public:
	class AActor*                                 _interactive_target;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _key_pressed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2185[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _param;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_RPC_SERVER_TryInteract) == 0x000008, "Wrong alignment on InteractionComponent_RPC_SERVER_TryInteract");
static_assert(sizeof(InteractionComponent_RPC_SERVER_TryInteract) == 0x000010, "Wrong size on InteractionComponent_RPC_SERVER_TryInteract");
static_assert(offsetof(InteractionComponent_RPC_SERVER_TryInteract, _interactive_target) == 0x000000, "Member 'InteractionComponent_RPC_SERVER_TryInteract::_interactive_target' has a wrong offset!");
static_assert(offsetof(InteractionComponent_RPC_SERVER_TryInteract, _key_pressed) == 0x000008, "Member 'InteractionComponent_RPC_SERVER_TryInteract::_key_pressed' has a wrong offset!");
static_assert(offsetof(InteractionComponent_RPC_SERVER_TryInteract, _param) == 0x00000C, "Member 'InteractionComponent_RPC_SERVER_TryInteract::_param' has a wrong offset!");

// Function Stigma.InteractionComponent.TryInteraction
// 0x0002 (0x0002 - 0x0000)
struct InteractionComponent_TryInteraction final
{
public:
	bool                                          _pressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_TryInteraction) == 0x000001, "Wrong alignment on InteractionComponent_TryInteraction");
static_assert(sizeof(InteractionComponent_TryInteraction) == 0x000002, "Wrong size on InteractionComponent_TryInteraction");
static_assert(offsetof(InteractionComponent_TryInteraction, _pressed) == 0x000000, "Member 'InteractionComponent_TryInteraction::_pressed' has a wrong offset!");
static_assert(offsetof(InteractionComponent_TryInteraction, ReturnValue) == 0x000001, "Member 'InteractionComponent_TryInteraction::ReturnValue' has a wrong offset!");

// Function Stigma.InteractionComponent.GetInteractiveTarget
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_GetInteractiveTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetInteractiveTarget) == 0x000008, "Wrong alignment on InteractionComponent_GetInteractiveTarget");
static_assert(sizeof(InteractionComponent_GetInteractiveTarget) == 0x000008, "Wrong size on InteractionComponent_GetInteractiveTarget");
static_assert(offsetof(InteractionComponent_GetInteractiveTarget, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetInteractiveTarget::ReturnValue' has a wrong offset!");

// Function Stigma.InteractionComponent.GetLookAtRay
// 0x0030 (0x0030 - 0x0000)
struct InteractionComponent_GetLookAtRay final
{
public:
	struct FVector                                _out_start;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _out_end;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetLookAtRay) == 0x000008, "Wrong alignment on InteractionComponent_GetLookAtRay");
static_assert(sizeof(InteractionComponent_GetLookAtRay) == 0x000030, "Wrong size on InteractionComponent_GetLookAtRay");
static_assert(offsetof(InteractionComponent_GetLookAtRay, _out_start) == 0x000000, "Member 'InteractionComponent_GetLookAtRay::_out_start' has a wrong offset!");
static_assert(offsetof(InteractionComponent_GetLookAtRay, _out_end) == 0x000018, "Member 'InteractionComponent_GetLookAtRay::_out_end' has a wrong offset!");

// Function Stigma.UI_ToastMessageBase.SetActive
// 0x0001 (0x0001 - 0x0000)
struct UI_ToastMessageBase_SetActive final
{
public:
	bool                                          _is_show;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ToastMessageBase_SetActive) == 0x000001, "Wrong alignment on UI_ToastMessageBase_SetActive");
static_assert(sizeof(UI_ToastMessageBase_SetActive) == 0x000001, "Wrong size on UI_ToastMessageBase_SetActive");
static_assert(offsetof(UI_ToastMessageBase_SetActive, _is_show) == 0x000000, "Member 'UI_ToastMessageBase_SetActive::_is_show' has a wrong offset!");

// Function Stigma.UI_ToastMessageBase.SetScale
// 0x0004 (0x0004 - 0x0000)
struct UI_ToastMessageBase_SetScale final
{
public:
	float                                         _scale;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ToastMessageBase_SetScale) == 0x000004, "Wrong alignment on UI_ToastMessageBase_SetScale");
static_assert(sizeof(UI_ToastMessageBase_SetScale) == 0x000004, "Wrong size on UI_ToastMessageBase_SetScale");
static_assert(offsetof(UI_ToastMessageBase_SetScale, _scale) == 0x000000, "Member 'UI_ToastMessageBase_SetScale::_scale' has a wrong offset!");

// Function Stigma.Debug_DamageViewerComponent.OnActivation
// 0x0002 (0x0002 - 0x0000)
struct Debug_DamageViewerComponent_OnActivation final
{
public:
	bool                                          _is_activated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebug_DamageViewerType                       _type;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Debug_DamageViewerComponent_OnActivation) == 0x000001, "Wrong alignment on Debug_DamageViewerComponent_OnActivation");
static_assert(sizeof(Debug_DamageViewerComponent_OnActivation) == 0x000002, "Wrong size on Debug_DamageViewerComponent_OnActivation");
static_assert(offsetof(Debug_DamageViewerComponent_OnActivation, _is_activated) == 0x000000, "Member 'Debug_DamageViewerComponent_OnActivation::_is_activated' has a wrong offset!");
static_assert(offsetof(Debug_DamageViewerComponent_OnActivation, _type) == 0x000001, "Member 'Debug_DamageViewerComponent_OnActivation::_type' has a wrong offset!");

// Function Stigma.Debug_DamageViewerComponent.OnAddDamage
// 0x0030 (0x0030 - 0x0000)
struct Debug_DamageViewerComponent_OnAddDamage final
{
public:
	struct FDamagedData                           _damage;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Debug_DamageViewerComponent_OnAddDamage) == 0x000008, "Wrong alignment on Debug_DamageViewerComponent_OnAddDamage");
static_assert(sizeof(Debug_DamageViewerComponent_OnAddDamage) == 0x000030, "Wrong size on Debug_DamageViewerComponent_OnAddDamage");
static_assert(offsetof(Debug_DamageViewerComponent_OnAddDamage, _damage) == 0x000000, "Member 'Debug_DamageViewerComponent_OnAddDamage::_damage' has a wrong offset!");

// Function Stigma.UI_TDM_SubScoreContainer.SetBGBrush
// 0x00D0 (0x00D0 - 0x0000)
struct UI_TDM_SubScoreContainer_SetBGBrush final
{
public:
	struct FSlateBrush                            _brush;                                            // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TDM_SubScoreContainer_SetBGBrush) == 0x000010, "Wrong alignment on UI_TDM_SubScoreContainer_SetBGBrush");
static_assert(sizeof(UI_TDM_SubScoreContainer_SetBGBrush) == 0x0000D0, "Wrong size on UI_TDM_SubScoreContainer_SetBGBrush");
static_assert(offsetof(UI_TDM_SubScoreContainer_SetBGBrush, _brush) == 0x000000, "Member 'UI_TDM_SubScoreContainer_SetBGBrush::_brush' has a wrong offset!");

// Function Stigma.GunnerSystemComponent_Snipe.Setter_ElapsedChargingTime
// 0x0004 (0x0004 - 0x0000)
struct GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime final
{
public:
	float                                         _elapsed_time;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime) == 0x000004, "Wrong alignment on GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime");
static_assert(sizeof(GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime) == 0x000004, "Wrong size on GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime");
static_assert(offsetof(GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime, _elapsed_time) == 0x000000, "Member 'GunnerSystemComponent_Snipe_Setter_ElapsedChargingTime::_elapsed_time' has a wrong offset!");

// Function Stigma.HitDataBlueprintLibrary.GetDamage
// 0x00C0 (0x00C0 - 0x0000)
struct HitDataBlueprintLibrary_GetDamage final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageDef                             ReturnValue;                                       // 0x00A8(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_218D[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(HitDataBlueprintLibrary_GetDamage) == 0x000008, "Wrong alignment on HitDataBlueprintLibrary_GetDamage");
static_assert(sizeof(HitDataBlueprintLibrary_GetDamage) == 0x0000C0, "Wrong size on HitDataBlueprintLibrary_GetDamage");
static_assert(offsetof(HitDataBlueprintLibrary_GetDamage, _hit) == 0x000000, "Member 'HitDataBlueprintLibrary_GetDamage::_hit' has a wrong offset!");
static_assert(offsetof(HitDataBlueprintLibrary_GetDamage, ReturnValue) == 0x0000A8, "Member 'HitDataBlueprintLibrary_GetDamage::ReturnValue' has a wrong offset!");

// Function Stigma.CameraBoomComponent.SetCameraDirectingParams
// 0x0020 (0x0020 - 0x0000)
struct CameraBoomComponent_SetCameraDirectingParams final
{
public:
	struct FCameraDirectingParams                 Params_0;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBoomComponent_SetCameraDirectingParams) == 0x000004, "Wrong alignment on CameraBoomComponent_SetCameraDirectingParams");
static_assert(sizeof(CameraBoomComponent_SetCameraDirectingParams) == 0x000020, "Wrong size on CameraBoomComponent_SetCameraDirectingParams");
static_assert(offsetof(CameraBoomComponent_SetCameraDirectingParams, Params_0) == 0x000000, "Member 'CameraBoomComponent_SetCameraDirectingParams::Params_0' has a wrong offset!");

// Function Stigma.CameraBoomComponent.SetMode
// 0x0002 (0x0002 - 0x0000)
struct CameraBoomComponent_SetMode final
{
public:
	ECameraWalkMode                               _new_mode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _smoothing;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBoomComponent_SetMode) == 0x000001, "Wrong alignment on CameraBoomComponent_SetMode");
static_assert(sizeof(CameraBoomComponent_SetMode) == 0x000002, "Wrong size on CameraBoomComponent_SetMode");
static_assert(offsetof(CameraBoomComponent_SetMode, _new_mode) == 0x000000, "Member 'CameraBoomComponent_SetMode::_new_mode' has a wrong offset!");
static_assert(offsetof(CameraBoomComponent_SetMode, _smoothing) == 0x000001, "Member 'CameraBoomComponent_SetMode::_smoothing' has a wrong offset!");

// Function Stigma.CameraBoomComponent.SetSideViewAimLocation
// 0x0018 (0x0018 - 0x0000)
struct CameraBoomComponent_SetSideViewAimLocation final
{
public:
	struct FVector                                _loc;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBoomComponent_SetSideViewAimLocation) == 0x000008, "Wrong alignment on CameraBoomComponent_SetSideViewAimLocation");
static_assert(sizeof(CameraBoomComponent_SetSideViewAimLocation) == 0x000018, "Wrong size on CameraBoomComponent_SetSideViewAimLocation");
static_assert(offsetof(CameraBoomComponent_SetSideViewAimLocation, _loc) == 0x000000, "Member 'CameraBoomComponent_SetSideViewAimLocation::_loc' has a wrong offset!");

// Function Stigma.CameraBoomComponent.SetSideViewTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct CameraBoomComponent_SetSideViewTargetLocation final
{
public:
	struct FVector                                _loc;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBoomComponent_SetSideViewTargetLocation) == 0x000008, "Wrong alignment on CameraBoomComponent_SetSideViewTargetLocation");
static_assert(sizeof(CameraBoomComponent_SetSideViewTargetLocation) == 0x000018, "Wrong size on CameraBoomComponent_SetSideViewTargetLocation");
static_assert(offsetof(CameraBoomComponent_SetSideViewTargetLocation, _loc) == 0x000000, "Member 'CameraBoomComponent_SetSideViewTargetLocation::_loc' has a wrong offset!");

// Function Stigma.CameraBoomComponent.GetMode
// 0x0001 (0x0001 - 0x0000)
struct CameraBoomComponent_GetMode final
{
public:
	ECameraWalkMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraBoomComponent_GetMode) == 0x000001, "Wrong alignment on CameraBoomComponent_GetMode");
static_assert(sizeof(CameraBoomComponent_GetMode) == 0x000001, "Wrong size on CameraBoomComponent_GetMode");
static_assert(offsetof(CameraBoomComponent_GetMode, ReturnValue) == 0x000000, "Member 'CameraBoomComponent_GetMode::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.ChangeInputMappingContext
// 0x0010 (0x0010 - 0x0000)
struct KeyBindingSubsys_ChangeInputMappingContext final
{
public:
	class ULocalPlayer*                           _local_player;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIMCType                                      _imc_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_active;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2192[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(KeyBindingSubsys_ChangeInputMappingContext) == 0x000008, "Wrong alignment on KeyBindingSubsys_ChangeInputMappingContext");
static_assert(sizeof(KeyBindingSubsys_ChangeInputMappingContext) == 0x000010, "Wrong size on KeyBindingSubsys_ChangeInputMappingContext");
static_assert(offsetof(KeyBindingSubsys_ChangeInputMappingContext, _local_player) == 0x000000, "Member 'KeyBindingSubsys_ChangeInputMappingContext::_local_player' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_ChangeInputMappingContext, _imc_type) == 0x000008, "Member 'KeyBindingSubsys_ChangeInputMappingContext::_imc_type' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_ChangeInputMappingContext, _is_active) == 0x000009, "Member 'KeyBindingSubsys_ChangeInputMappingContext::_is_active' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.FindKeyMapping
// 0x0038 (0x0038 - 0x0000)
struct KeyBindingSubsys_FindKeyMapping final
{
public:
	EInputAction                                  _input_action;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputSlotType                                _slot_type;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2193[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKeyMapping                            ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_FindKeyMapping) == 0x000008, "Wrong alignment on KeyBindingSubsys_FindKeyMapping");
static_assert(sizeof(KeyBindingSubsys_FindKeyMapping) == 0x000038, "Wrong size on KeyBindingSubsys_FindKeyMapping");
static_assert(offsetof(KeyBindingSubsys_FindKeyMapping, _input_action) == 0x000000, "Member 'KeyBindingSubsys_FindKeyMapping::_input_action' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_FindKeyMapping, _slot_type) == 0x000001, "Member 'KeyBindingSubsys_FindKeyMapping::_slot_type' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_FindKeyMapping, _chara_type) == 0x000002, "Member 'KeyBindingSubsys_FindKeyMapping::_chara_type' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_FindKeyMapping, ReturnValue) == 0x000008, "Member 'KeyBindingSubsys_FindKeyMapping::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.FindKeyMappings
// 0x00A0 (0x00A0 - 0x0000)
struct KeyBindingSubsys_FindKeyMappings final
{
public:
	EInputAction                                  _input_action;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2194[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKeyMappings                           ReturnValue;                                       // 0x0008(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_FindKeyMappings) == 0x000008, "Wrong alignment on KeyBindingSubsys_FindKeyMappings");
static_assert(sizeof(KeyBindingSubsys_FindKeyMappings) == 0x0000A0, "Wrong size on KeyBindingSubsys_FindKeyMappings");
static_assert(offsetof(KeyBindingSubsys_FindKeyMappings, _input_action) == 0x000000, "Member 'KeyBindingSubsys_FindKeyMappings::_input_action' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_FindKeyMappings, _chara_type) == 0x000001, "Member 'KeyBindingSubsys_FindKeyMappings::_chara_type' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_FindKeyMappings, ReturnValue) == 0x000008, "Member 'KeyBindingSubsys_FindKeyMappings::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.GetKeyByIMC
// 0x0028 (0x0028 - 0x0000)
struct KeyBindingSubsys_GetKeyByIMC final
{
public:
	class ULocalPlayer*                           _local_player;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIMCType                                      _imc_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputAction                                  _input_action;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2195[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKey                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_GetKeyByIMC) == 0x000008, "Wrong alignment on KeyBindingSubsys_GetKeyByIMC");
static_assert(sizeof(KeyBindingSubsys_GetKeyByIMC) == 0x000028, "Wrong size on KeyBindingSubsys_GetKeyByIMC");
static_assert(offsetof(KeyBindingSubsys_GetKeyByIMC, _local_player) == 0x000000, "Member 'KeyBindingSubsys_GetKeyByIMC::_local_player' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_GetKeyByIMC, _imc_type) == 0x000008, "Member 'KeyBindingSubsys_GetKeyByIMC::_imc_type' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_GetKeyByIMC, _input_action) == 0x000009, "Member 'KeyBindingSubsys_GetKeyByIMC::_input_action' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_GetKeyByIMC, ReturnValue) == 0x000010, "Member 'KeyBindingSubsys_GetKeyByIMC::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.GetKeyDisplayText
// 0x0030 (0x0030 - 0x0000)
struct KeyBindingSubsys_GetKeyDisplayText final
{
public:
	struct FKey                                   _Key;                                              // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_GetKeyDisplayText) == 0x000008, "Wrong alignment on KeyBindingSubsys_GetKeyDisplayText");
static_assert(sizeof(KeyBindingSubsys_GetKeyDisplayText) == 0x000030, "Wrong size on KeyBindingSubsys_GetKeyDisplayText");
static_assert(offsetof(KeyBindingSubsys_GetKeyDisplayText, _Key) == 0x000000, "Member 'KeyBindingSubsys_GetKeyDisplayText::_Key' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_GetKeyDisplayText, ReturnValue) == 0x000018, "Member 'KeyBindingSubsys_GetKeyDisplayText::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.HasMappingContext
// 0x0010 (0x0010 - 0x0000)
struct KeyBindingSubsys_HasMappingContext final
{
public:
	class ULocalPlayer*                           _local_player;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIMCType                                      _imc_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2196[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(KeyBindingSubsys_HasMappingContext) == 0x000008, "Wrong alignment on KeyBindingSubsys_HasMappingContext");
static_assert(sizeof(KeyBindingSubsys_HasMappingContext) == 0x000010, "Wrong size on KeyBindingSubsys_HasMappingContext");
static_assert(offsetof(KeyBindingSubsys_HasMappingContext, _local_player) == 0x000000, "Member 'KeyBindingSubsys_HasMappingContext::_local_player' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_HasMappingContext, _imc_type) == 0x000008, "Member 'KeyBindingSubsys_HasMappingContext::_imc_type' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_HasMappingContext, ReturnValue) == 0x000009, "Member 'KeyBindingSubsys_HasMappingContext::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.IsCombinationKey
// 0x0020 (0x0020 - 0x0000)
struct KeyBindingSubsys_IsCombinationKey final
{
public:
	struct FKey                                   _Key;                                              // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2197[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(KeyBindingSubsys_IsCombinationKey) == 0x000008, "Wrong alignment on KeyBindingSubsys_IsCombinationKey");
static_assert(sizeof(KeyBindingSubsys_IsCombinationKey) == 0x000020, "Wrong size on KeyBindingSubsys_IsCombinationKey");
static_assert(offsetof(KeyBindingSubsys_IsCombinationKey, _Key) == 0x000000, "Member 'KeyBindingSubsys_IsCombinationKey::_Key' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_IsCombinationKey, ReturnValue) == 0x000018, "Member 'KeyBindingSubsys_IsCombinationKey::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.IsUsedInterceptor
// 0x0001 (0x0001 - 0x0000)
struct KeyBindingSubsys_IsUsedInterceptor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_IsUsedInterceptor) == 0x000001, "Wrong alignment on KeyBindingSubsys_IsUsedInterceptor");
static_assert(sizeof(KeyBindingSubsys_IsUsedInterceptor) == 0x000001, "Wrong size on KeyBindingSubsys_IsUsedInterceptor");
static_assert(offsetof(KeyBindingSubsys_IsUsedInterceptor, ReturnValue) == 0x000000, "Member 'KeyBindingSubsys_IsUsedInterceptor::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.IsValidInputKey
// 0x0020 (0x0020 - 0x0000)
struct KeyBindingSubsys_IsValidInputKey final
{
public:
	struct FKey                                   _Key;                                              // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2198[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(KeyBindingSubsys_IsValidInputKey) == 0x000008, "Wrong alignment on KeyBindingSubsys_IsValidInputKey");
static_assert(sizeof(KeyBindingSubsys_IsValidInputKey) == 0x000020, "Wrong size on KeyBindingSubsys_IsValidInputKey");
static_assert(offsetof(KeyBindingSubsys_IsValidInputKey, _Key) == 0x000000, "Member 'KeyBindingSubsys_IsValidInputKey::_Key' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_IsValidInputKey, ReturnValue) == 0x000018, "Member 'KeyBindingSubsys_IsValidInputKey::ReturnValue' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.RequestInputKeyInterceptor
// 0x0008 (0x0008 - 0x0000)
struct KeyBindingSubsys_RequestInputKeyInterceptor final
{
public:
	class UCtrl_OptionKeyBindBase*                _host;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_RequestInputKeyInterceptor) == 0x000008, "Wrong alignment on KeyBindingSubsys_RequestInputKeyInterceptor");
static_assert(sizeof(KeyBindingSubsys_RequestInputKeyInterceptor) == 0x000008, "Wrong size on KeyBindingSubsys_RequestInputKeyInterceptor");
static_assert(offsetof(KeyBindingSubsys_RequestInputKeyInterceptor, _host) == 0x000000, "Member 'KeyBindingSubsys_RequestInputKeyInterceptor::_host' has a wrong offset!");

// Function Stigma.KeyBindingSubsys.StopInputKeyInterceptor
// 0x0002 (0x0002 - 0x0000)
struct KeyBindingSubsys_StopInputKeyInterceptor final
{
public:
	bool                                          _is_roll_back;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_update_key_mapping;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingSubsys_StopInputKeyInterceptor) == 0x000001, "Wrong alignment on KeyBindingSubsys_StopInputKeyInterceptor");
static_assert(sizeof(KeyBindingSubsys_StopInputKeyInterceptor) == 0x000002, "Wrong size on KeyBindingSubsys_StopInputKeyInterceptor");
static_assert(offsetof(KeyBindingSubsys_StopInputKeyInterceptor, _is_roll_back) == 0x000000, "Member 'KeyBindingSubsys_StopInputKeyInterceptor::_is_roll_back' has a wrong offset!");
static_assert(offsetof(KeyBindingSubsys_StopInputKeyInterceptor, _is_update_key_mapping) == 0x000001, "Member 'KeyBindingSubsys_StopInputKeyInterceptor::_is_update_key_mapping' has a wrong offset!");

// Function Stigma.CamMesh.GetCamIndex
// 0x0004 (0x0004 - 0x0000)
struct CamMesh_GetCamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamMesh_GetCamIndex) == 0x000004, "Wrong alignment on CamMesh_GetCamIndex");
static_assert(sizeof(CamMesh_GetCamIndex) == 0x000004, "Wrong size on CamMesh_GetCamIndex");
static_assert(offsetof(CamMesh_GetCamIndex, ReturnValue) == 0x000000, "Member 'CamMesh_GetCamIndex::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Tooltip.AddTooltipKey
// 0x0030 (0x0030 - 0x0000)
struct UI_Tooltip_AddTooltipKey final
{
public:
	struct FTooltipKeyInfo                        _key_info;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Tooltip_AddTooltipKey) == 0x000008, "Wrong alignment on UI_Tooltip_AddTooltipKey");
static_assert(sizeof(UI_Tooltip_AddTooltipKey) == 0x000030, "Wrong size on UI_Tooltip_AddTooltipKey");
static_assert(offsetof(UI_Tooltip_AddTooltipKey, _key_info) == 0x000000, "Member 'UI_Tooltip_AddTooltipKey::_key_info' has a wrong offset!");

// Function Stigma.UI_Tooltip.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_Tooltip_SetDesc final
{
public:
	class FText                                   _Desc;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Tooltip_SetDesc) == 0x000008, "Wrong alignment on UI_Tooltip_SetDesc");
static_assert(sizeof(UI_Tooltip_SetDesc) == 0x000018, "Wrong size on UI_Tooltip_SetDesc");
static_assert(offsetof(UI_Tooltip_SetDesc, _Desc) == 0x000000, "Member 'UI_Tooltip_SetDesc::_Desc' has a wrong offset!");

// Function Stigma.UI_Tooltip.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_Tooltip_SetTitle final
{
public:
	class FText                                   _Title;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Tooltip_SetTitle) == 0x000008, "Wrong alignment on UI_Tooltip_SetTitle");
static_assert(sizeof(UI_Tooltip_SetTitle) == 0x000018, "Wrong size on UI_Tooltip_SetTitle");
static_assert(offsetof(UI_Tooltip_SetTitle, _Title) == 0x000000, "Member 'UI_Tooltip_SetTitle::_Title' has a wrong offset!");

// Function Stigma.UI_Tooltip.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct UI_Tooltip_SetWidth final
{
public:
	float                                         _width;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Tooltip_SetWidth) == 0x000004, "Wrong alignment on UI_Tooltip_SetWidth");
static_assert(sizeof(UI_Tooltip_SetWidth) == 0x000004, "Wrong size on UI_Tooltip_SetWidth");
static_assert(offsetof(UI_Tooltip_SetWidth, _width) == 0x000000, "Member 'UI_Tooltip_SetWidth::_width' has a wrong offset!");

// Function Stigma.Challenge_GameMode.OnMissionUpdated
// 0x0010 (0x0010 - 0x0000)
struct Challenge_GameMode_OnMissionUpdated final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _mission;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_GameMode_OnMissionUpdated) == 0x000008, "Wrong alignment on Challenge_GameMode_OnMissionUpdated");
static_assert(sizeof(Challenge_GameMode_OnMissionUpdated) == 0x000010, "Wrong size on Challenge_GameMode_OnMissionUpdated");
static_assert(offsetof(Challenge_GameMode_OnMissionUpdated, _type) == 0x000000, "Member 'Challenge_GameMode_OnMissionUpdated::_type' has a wrong offset!");
static_assert(offsetof(Challenge_GameMode_OnMissionUpdated, _mission) == 0x000008, "Member 'Challenge_GameMode_OnMissionUpdated::_mission' has a wrong offset!");

// Function Stigma.Challenge_GameMode.GetCharConfig_AI
// 0x0068 (0x0068 - 0x0000)
struct Challenge_GameMode_GetCharConfig_AI final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Challenge_AIChara              ReturnValue;                                       // 0x0008(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_GameMode_GetCharConfig_AI) == 0x000008, "Wrong alignment on Challenge_GameMode_GetCharConfig_AI");
static_assert(sizeof(Challenge_GameMode_GetCharConfig_AI) == 0x000068, "Wrong size on Challenge_GameMode_GetCharConfig_AI");
static_assert(offsetof(Challenge_GameMode_GetCharConfig_AI, _index) == 0x000000, "Member 'Challenge_GameMode_GetCharConfig_AI::_index' has a wrong offset!");
static_assert(offsetof(Challenge_GameMode_GetCharConfig_AI, ReturnValue) == 0x000008, "Member 'Challenge_GameMode_GetCharConfig_AI::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_GameMode.GetCurrentWaveIndex
// 0x0004 (0x0004 - 0x0000)
struct Challenge_GameMode_GetCurrentWaveIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_GameMode_GetCurrentWaveIndex) == 0x000004, "Wrong alignment on Challenge_GameMode_GetCurrentWaveIndex");
static_assert(sizeof(Challenge_GameMode_GetCurrentWaveIndex) == 0x000004, "Wrong size on Challenge_GameMode_GetCurrentWaveIndex");
static_assert(offsetof(Challenge_GameMode_GetCurrentWaveIndex, ReturnValue) == 0x000000, "Member 'Challenge_GameMode_GetCurrentWaveIndex::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_GameMode.GetCurrentWaves
// 0x0010 (0x0010 - 0x0000)
struct Challenge_GameMode_GetCurrentWaves final
{
public:
	struct FChallengeWaves                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_GameMode_GetCurrentWaves) == 0x000008, "Wrong alignment on Challenge_GameMode_GetCurrentWaves");
static_assert(sizeof(Challenge_GameMode_GetCurrentWaves) == 0x000010, "Wrong size on Challenge_GameMode_GetCurrentWaves");
static_assert(offsetof(Challenge_GameMode_GetCurrentWaves, ReturnValue) == 0x000000, "Member 'Challenge_GameMode_GetCurrentWaves::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_GameMode.GetNextWaves
// 0x0010 (0x0010 - 0x0000)
struct Challenge_GameMode_GetNextWaves final
{
public:
	struct FChallengeWaves                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_GameMode_GetNextWaves) == 0x000008, "Wrong alignment on Challenge_GameMode_GetNextWaves");
static_assert(sizeof(Challenge_GameMode_GetNextWaves) == 0x000010, "Wrong size on Challenge_GameMode_GetNextWaves");
static_assert(offsetof(Challenge_GameMode_GetNextWaves, ReturnValue) == 0x000000, "Member 'Challenge_GameMode_GetNextWaves::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_GameMode.GetSpawnPoint
// 0x0010 (0x0010 - 0x0000)
struct Challenge_GameMode_GetSpawnPoint final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerStart_AI*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_GameMode_GetSpawnPoint) == 0x000008, "Wrong alignment on Challenge_GameMode_GetSpawnPoint");
static_assert(sizeof(Challenge_GameMode_GetSpawnPoint) == 0x000010, "Wrong size on Challenge_GameMode_GetSpawnPoint");
static_assert(offsetof(Challenge_GameMode_GetSpawnPoint, _index) == 0x000000, "Member 'Challenge_GameMode_GetSpawnPoint::_index' has a wrong offset!");
static_assert(offsetof(Challenge_GameMode_GetSpawnPoint, ReturnValue) == 0x000008, "Member 'Challenge_GameMode_GetSpawnPoint::ReturnValue' has a wrong offset!");

// Function Stigma.DoorBase.Setter_IsOpened
// 0x0001 (0x0001 - 0x0000)
struct DoorBase_Setter_IsOpened final
{
public:
	bool                                          _is_opened;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorBase_Setter_IsOpened) == 0x000001, "Wrong alignment on DoorBase_Setter_IsOpened");
static_assert(sizeof(DoorBase_Setter_IsOpened) == 0x000001, "Wrong size on DoorBase_Setter_IsOpened");
static_assert(offsetof(DoorBase_Setter_IsOpened, _is_opened) == 0x000000, "Member 'DoorBase_Setter_IsOpened::_is_opened' has a wrong offset!");

// Function Stigma.UI_TextDialogue.SetSpeed
// 0x0004 (0x0004 - 0x0000)
struct UI_TextDialogue_SetSpeed final
{
public:
	int32                                         _Speed;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TextDialogue_SetSpeed) == 0x000004, "Wrong alignment on UI_TextDialogue_SetSpeed");
static_assert(sizeof(UI_TextDialogue_SetSpeed) == 0x000004, "Wrong size on UI_TextDialogue_SetSpeed");
static_assert(offsetof(UI_TextDialogue_SetSpeed, _Speed) == 0x000000, "Member 'UI_TextDialogue_SetSpeed::_Speed' has a wrong offset!");

// Function Stigma.UI_TextDialogue.SetText
// 0x0018 (0x0018 - 0x0000)
struct UI_TextDialogue_SetText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TextDialogue_SetText) == 0x000008, "Wrong alignment on UI_TextDialogue_SetText");
static_assert(sizeof(UI_TextDialogue_SetText) == 0x000018, "Wrong size on UI_TextDialogue_SetText");
static_assert(offsetof(UI_TextDialogue_SetText, _text) == 0x000000, "Member 'UI_TextDialogue_SetText::_text' has a wrong offset!");

// Function Stigma.UI_TextDialogue_Mission.GetMission
// 0x0008 (0x0008 - 0x0000)
struct UI_TextDialogue_Mission_GetMission final
{
public:
	class UMission*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TextDialogue_Mission_GetMission) == 0x000008, "Wrong alignment on UI_TextDialogue_Mission_GetMission");
static_assert(sizeof(UI_TextDialogue_Mission_GetMission) == 0x000008, "Wrong size on UI_TextDialogue_Mission_GetMission");
static_assert(offsetof(UI_TextDialogue_Mission_GetMission, ReturnValue) == 0x000000, "Member 'UI_TextDialogue_Mission_GetMission::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_PlayerController.OnFinishRound
// 0x0040 (0x0040 - 0x0000)
struct Challenge_PlayerController_OnFinishRound final
{
public:
	struct FChallengeResult                       _prev;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FChallengeResult                       _result;                                           // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerController_OnFinishRound) == 0x000004, "Wrong alignment on Challenge_PlayerController_OnFinishRound");
static_assert(sizeof(Challenge_PlayerController_OnFinishRound) == 0x000040, "Wrong size on Challenge_PlayerController_OnFinishRound");
static_assert(offsetof(Challenge_PlayerController_OnFinishRound, _prev) == 0x000000, "Member 'Challenge_PlayerController_OnFinishRound::_prev' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerController_OnFinishRound, _result) == 0x000020, "Member 'Challenge_PlayerController_OnFinishRound::_result' has a wrong offset!");

// Function Stigma.Challenge_PlayerController.RPC_CLIENT_ChallengeResult
// 0x0020 (0x0020 - 0x0000)
struct Challenge_PlayerController_RPC_CLIENT_ChallengeResult final
{
public:
	TArray<struct FACK_ChallengeRead>             _top3;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _rankers;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerController_RPC_CLIENT_ChallengeResult) == 0x000008, "Wrong alignment on Challenge_PlayerController_RPC_CLIENT_ChallengeResult");
static_assert(sizeof(Challenge_PlayerController_RPC_CLIENT_ChallengeResult) == 0x000020, "Wrong size on Challenge_PlayerController_RPC_CLIENT_ChallengeResult");
static_assert(offsetof(Challenge_PlayerController_RPC_CLIENT_ChallengeResult, _top3) == 0x000000, "Member 'Challenge_PlayerController_RPC_CLIENT_ChallengeResult::_top3' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerController_RPC_CLIENT_ChallengeResult, _rankers) == 0x000010, "Member 'Challenge_PlayerController_RPC_CLIENT_ChallengeResult::_rankers' has a wrong offset!");

// Function Stigma.Challenge_PlayerController.RPC_CLIENT_FinishRound
// 0x0040 (0x0040 - 0x0000)
struct Challenge_PlayerController_RPC_CLIENT_FinishRound final
{
public:
	struct FChallengeResult                       _prev;                                             // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FChallengeResult                       _result;                                           // 0x0020(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerController_RPC_CLIENT_FinishRound) == 0x000004, "Wrong alignment on Challenge_PlayerController_RPC_CLIENT_FinishRound");
static_assert(sizeof(Challenge_PlayerController_RPC_CLIENT_FinishRound) == 0x000040, "Wrong size on Challenge_PlayerController_RPC_CLIENT_FinishRound");
static_assert(offsetof(Challenge_PlayerController_RPC_CLIENT_FinishRound, _prev) == 0x000000, "Member 'Challenge_PlayerController_RPC_CLIENT_FinishRound::_prev' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerController_RPC_CLIENT_FinishRound, _result) == 0x000020, "Member 'Challenge_PlayerController_RPC_CLIENT_FinishRound::_result' has a wrong offset!");

// Function Stigma.Challenge_PlayerController.RPC_SERVER_DriveNextRound
// 0x0001 (0x0001 - 0x0000)
struct Challenge_PlayerController_RPC_SERVER_DriveNextRound final
{
public:
	bool                                          _is_round_clear;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerController_RPC_SERVER_DriveNextRound) == 0x000001, "Wrong alignment on Challenge_PlayerController_RPC_SERVER_DriveNextRound");
static_assert(sizeof(Challenge_PlayerController_RPC_SERVER_DriveNextRound) == 0x000001, "Wrong size on Challenge_PlayerController_RPC_SERVER_DriveNextRound");
static_assert(offsetof(Challenge_PlayerController_RPC_SERVER_DriveNextRound, _is_round_clear) == 0x000000, "Member 'Challenge_PlayerController_RPC_SERVER_DriveNextRound::_is_round_clear' has a wrong offset!");

// Function Stigma.Challenge_PlayerController.ShowChallengeResult
// 0x0020 (0x0020 - 0x0000)
struct Challenge_PlayerController_ShowChallengeResult final
{
public:
	TArray<struct FACK_ChallengeRead>             _top3;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _rankers;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerController_ShowChallengeResult) == 0x000008, "Wrong alignment on Challenge_PlayerController_ShowChallengeResult");
static_assert(sizeof(Challenge_PlayerController_ShowChallengeResult) == 0x000020, "Wrong size on Challenge_PlayerController_ShowChallengeResult");
static_assert(offsetof(Challenge_PlayerController_ShowChallengeResult, _top3) == 0x000000, "Member 'Challenge_PlayerController_ShowChallengeResult::_top3' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerController_ShowChallengeResult, _rankers) == 0x000010, "Member 'Challenge_PlayerController_ShowChallengeResult::_rankers' has a wrong offset!");

// Function Stigma.Challenge_PlayerState.GetBattleResult
// 0x0040 (0x0040 - 0x0000)
struct Challenge_PlayerState_GetBattleResult final
{
public:
	struct FBattleResult_Challenge                ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerState_GetBattleResult) == 0x000008, "Wrong alignment on Challenge_PlayerState_GetBattleResult");
static_assert(sizeof(Challenge_PlayerState_GetBattleResult) == 0x000040, "Wrong size on Challenge_PlayerState_GetBattleResult");
static_assert(offsetof(Challenge_PlayerState_GetBattleResult, ReturnValue) == 0x000000, "Member 'Challenge_PlayerState_GetBattleResult::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_PlayerState.GetBounsBoosterCount
// 0x0004 (0x0004 - 0x0000)
struct Challenge_PlayerState_GetBounsBoosterCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_PlayerState_GetBounsBoosterCount) == 0x000004, "Wrong alignment on Challenge_PlayerState_GetBounsBoosterCount");
static_assert(sizeof(Challenge_PlayerState_GetBounsBoosterCount) == 0x000004, "Wrong size on Challenge_PlayerState_GetBounsBoosterCount");
static_assert(offsetof(Challenge_PlayerState_GetBounsBoosterCount, ReturnValue) == 0x000000, "Member 'Challenge_PlayerState_GetBounsBoosterCount::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetBuyCount
// 0x0004 (0x0004 - 0x0000)
struct GoodsObject_GetBuyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetBuyCount) == 0x000004, "Wrong alignment on GoodsObject_GetBuyCount");
static_assert(sizeof(GoodsObject_GetBuyCount) == 0x000004, "Wrong size on GoodsObject_GetBuyCount");
static_assert(offsetof(GoodsObject_GetBuyCount, ReturnValue) == 0x000000, "Member 'GoodsObject_GetBuyCount::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetConfig
// 0x01F0 (0x01F0 - 0x0000)
struct GoodsObject_GetConfig final
{
public:
	struct FConfig_Goods                          ReturnValue;                                       // 0x0000(0x01F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetConfig) == 0x000008, "Wrong alignment on GoodsObject_GetConfig");
static_assert(sizeof(GoodsObject_GetConfig) == 0x0001F0, "Wrong size on GoodsObject_GetConfig");
static_assert(offsetof(GoodsObject_GetConfig, ReturnValue) == 0x000000, "Member 'GoodsObject_GetConfig::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetCurrencyCode
// 0x0010 (0x0010 - 0x0000)
struct GoodsObject_GetCurrencyCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetCurrencyCode) == 0x000008, "Wrong alignment on GoodsObject_GetCurrencyCode");
static_assert(sizeof(GoodsObject_GetCurrencyCode) == 0x000010, "Wrong size on GoodsObject_GetCurrencyCode");
static_assert(offsetof(GoodsObject_GetCurrencyCode, ReturnValue) == 0x000000, "Member 'GoodsObject_GetCurrencyCode::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetDiscount
// 0x0004 (0x0004 - 0x0000)
struct GoodsObject_GetDiscount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetDiscount) == 0x000004, "Wrong alignment on GoodsObject_GetDiscount");
static_assert(sizeof(GoodsObject_GetDiscount) == 0x000004, "Wrong size on GoodsObject_GetDiscount");
static_assert(offsetof(GoodsObject_GetDiscount, ReturnValue) == 0x000000, "Member 'GoodsObject_GetDiscount::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetDisplayNameText
// 0x0018 (0x0018 - 0x0000)
struct GoodsObject_GetDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetDisplayNameText) == 0x000008, "Wrong alignment on GoodsObject_GetDisplayNameText");
static_assert(sizeof(GoodsObject_GetDisplayNameText) == 0x000018, "Wrong size on GoodsObject_GetDisplayNameText");
static_assert(offsetof(GoodsObject_GetDisplayNameText, ReturnValue) == 0x000000, "Member 'GoodsObject_GetDisplayNameText::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetDisplaySlot
// 0x0004 (0x0004 - 0x0000)
struct GoodsObject_GetDisplaySlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetDisplaySlot) == 0x000004, "Wrong alignment on GoodsObject_GetDisplaySlot");
static_assert(sizeof(GoodsObject_GetDisplaySlot) == 0x000004, "Wrong size on GoodsObject_GetDisplaySlot");
static_assert(offsetof(GoodsObject_GetDisplaySlot, ReturnValue) == 0x000000, "Member 'GoodsObject_GetDisplaySlot::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetGoodsDesc
// 0x0010 (0x0010 - 0x0000)
struct GoodsObject_GetGoodsDesc final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetGoodsDesc) == 0x000008, "Wrong alignment on GoodsObject_GetGoodsDesc");
static_assert(sizeof(GoodsObject_GetGoodsDesc) == 0x000010, "Wrong size on GoodsObject_GetGoodsDesc");
static_assert(offsetof(GoodsObject_GetGoodsDesc, ReturnValue) == 0x000000, "Member 'GoodsObject_GetGoodsDesc::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetIcon
// 0x0028 (0x0028 - 0x0000)
struct GoodsObject_GetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetIcon) == 0x000008, "Wrong alignment on GoodsObject_GetIcon");
static_assert(sizeof(GoodsObject_GetIcon) == 0x000028, "Wrong size on GoodsObject_GetIcon");
static_assert(offsetof(GoodsObject_GetIcon, ReturnValue) == 0x000000, "Member 'GoodsObject_GetIcon::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetItemID
// 0x0010 (0x0010 - 0x0000)
struct GoodsObject_GetItemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetItemID) == 0x000008, "Wrong alignment on GoodsObject_GetItemID");
static_assert(sizeof(GoodsObject_GetItemID) == 0x000010, "Wrong size on GoodsObject_GetItemID");
static_assert(offsetof(GoodsObject_GetItemID, ReturnValue) == 0x000000, "Member 'GoodsObject_GetItemID::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetLaunchingDate
// 0x0008 (0x0008 - 0x0000)
struct GoodsObject_GetLaunchingDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetLaunchingDate) == 0x000008, "Wrong alignment on GoodsObject_GetLaunchingDate");
static_assert(sizeof(GoodsObject_GetLaunchingDate) == 0x000008, "Wrong size on GoodsObject_GetLaunchingDate");
static_assert(offsetof(GoodsObject_GetLaunchingDate, ReturnValue) == 0x000000, "Member 'GoodsObject_GetLaunchingDate::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetPrice
// 0x0004 (0x0004 - 0x0000)
struct GoodsObject_GetPrice final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetPrice) == 0x000004, "Wrong alignment on GoodsObject_GetPrice");
static_assert(sizeof(GoodsObject_GetPrice) == 0x000004, "Wrong size on GoodsObject_GetPrice");
static_assert(offsetof(GoodsObject_GetPrice, ReturnValue) == 0x000000, "Member 'GoodsObject_GetPrice::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetPriceType
// 0x0010 (0x0010 - 0x0000)
struct GoodsObject_GetPriceType final
{
public:
	struct FItemID_Currency                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetPriceType) == 0x000008, "Wrong alignment on GoodsObject_GetPriceType");
static_assert(sizeof(GoodsObject_GetPriceType) == 0x000010, "Wrong size on GoodsObject_GetPriceType");
static_assert(offsetof(GoodsObject_GetPriceType, ReturnValue) == 0x000000, "Member 'GoodsObject_GetPriceType::ReturnValue' has a wrong offset!");

// Function Stigma.GoodsObject.GetTags
// 0x0005 (0x0005 - 0x0000)
struct GoodsObject_GetTags final
{
public:
	struct FGoodsTag                              ReturnValue;                                       // 0x0000(0x0005)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoodsObject_GetTags) == 0x000001, "Wrong alignment on GoodsObject_GetTags");
static_assert(sizeof(GoodsObject_GetTags) == 0x000005, "Wrong size on GoodsObject_GetTags");
static_assert(offsetof(GoodsObject_GetTags, ReturnValue) == 0x000000, "Member 'GoodsObject_GetTags::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.GetHeartBit
// 0x0010 (0x0010 - 0x0000)
struct OnlineAccount_GetHeartBit final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineAccount_GetHeartBit) == 0x000008, "Wrong alignment on OnlineAccount_GetHeartBit");
static_assert(sizeof(OnlineAccount_GetHeartBit) == 0x000010, "Wrong size on OnlineAccount_GetHeartBit");
static_assert(offsetof(OnlineAccount_GetHeartBit, WorldContextObject) == 0x000000, "Member 'OnlineAccount_GetHeartBit::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineAccount_GetHeartBit, ReturnValue) == 0x000008, "Member 'OnlineAccount_GetHeartBit::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.GetPublisher
// 0x0010 (0x0010 - 0x0000)
struct OnlineAccount_GetPublisher final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPublisher                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineAccount_GetPublisher) == 0x000008, "Wrong alignment on OnlineAccount_GetPublisher");
static_assert(sizeof(OnlineAccount_GetPublisher) == 0x000010, "Wrong size on OnlineAccount_GetPublisher");
static_assert(offsetof(OnlineAccount_GetPublisher, WorldContextObject) == 0x000000, "Member 'OnlineAccount_GetPublisher::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineAccount_GetPublisher, ReturnValue) == 0x000008, "Member 'OnlineAccount_GetPublisher::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.GetPublisherID
// 0x0018 (0x0018 - 0x0000)
struct OnlineAccount_GetPublisherID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineAccount_GetPublisherID) == 0x000008, "Wrong alignment on OnlineAccount_GetPublisherID");
static_assert(sizeof(OnlineAccount_GetPublisherID) == 0x000018, "Wrong size on OnlineAccount_GetPublisherID");
static_assert(offsetof(OnlineAccount_GetPublisherID, WorldContextObject) == 0x000000, "Member 'OnlineAccount_GetPublisherID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineAccount_GetPublisherID, ReturnValue) == 0x000008, "Member 'OnlineAccount_GetPublisherID::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.GetPublisherToken
// 0x0018 (0x0018 - 0x0000)
struct OnlineAccount_GetPublisherToken final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineAccount_GetPublisherToken) == 0x000008, "Wrong alignment on OnlineAccount_GetPublisherToken");
static_assert(sizeof(OnlineAccount_GetPublisherToken) == 0x000018, "Wrong size on OnlineAccount_GetPublisherToken");
static_assert(offsetof(OnlineAccount_GetPublisherToken, _world_ctx) == 0x000000, "Member 'OnlineAccount_GetPublisherToken::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineAccount_GetPublisherToken, ReturnValue) == 0x000008, "Member 'OnlineAccount_GetPublisherToken::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.GetToken
// 0x0018 (0x0018 - 0x0000)
struct OnlineAccount_GetToken final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineAccount_GetToken) == 0x000008, "Wrong alignment on OnlineAccount_GetToken");
static_assert(sizeof(OnlineAccount_GetToken) == 0x000018, "Wrong size on OnlineAccount_GetToken");
static_assert(offsetof(OnlineAccount_GetToken, _world_ctx) == 0x000000, "Member 'OnlineAccount_GetToken::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineAccount_GetToken, ReturnValue) == 0x000008, "Member 'OnlineAccount_GetToken::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.IsAuthenticated
// 0x0010 (0x0010 - 0x0000)
struct OnlineAccount_IsAuthenticated final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineAccount_IsAuthenticated) == 0x000008, "Wrong alignment on OnlineAccount_IsAuthenticated");
static_assert(sizeof(OnlineAccount_IsAuthenticated) == 0x000010, "Wrong size on OnlineAccount_IsAuthenticated");
static_assert(offsetof(OnlineAccount_IsAuthenticated, WorldContextObject) == 0x000000, "Member 'OnlineAccount_IsAuthenticated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineAccount_IsAuthenticated, ReturnValue) == 0x000008, "Member 'OnlineAccount_IsAuthenticated::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.SetAuthenticated
// 0x0010 (0x0010 - 0x0000)
struct OnlineAccount_SetAuthenticated final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B1[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineAccount_SetAuthenticated) == 0x000008, "Wrong alignment on OnlineAccount_SetAuthenticated");
static_assert(sizeof(OnlineAccount_SetAuthenticated) == 0x000010, "Wrong size on OnlineAccount_SetAuthenticated");
static_assert(offsetof(OnlineAccount_SetAuthenticated, WorldContextObject) == 0x000000, "Member 'OnlineAccount_SetAuthenticated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineAccount_SetAuthenticated, Flag) == 0x000008, "Member 'OnlineAccount_SetAuthenticated::Flag' has a wrong offset!");
static_assert(offsetof(OnlineAccount_SetAuthenticated, ReturnValue) == 0x000009, "Member 'OnlineAccount_SetAuthenticated::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineAccount.SetPublisher
// 0x0010 (0x0010 - 0x0000)
struct OnlineAccount_SetPublisher final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPublisher                                    _Publisher;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineAccount_SetPublisher) == 0x000008, "Wrong alignment on OnlineAccount_SetPublisher");
static_assert(sizeof(OnlineAccount_SetPublisher) == 0x000010, "Wrong size on OnlineAccount_SetPublisher");
static_assert(offsetof(OnlineAccount_SetPublisher, WorldContextObject) == 0x000000, "Member 'OnlineAccount_SetPublisher::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineAccount_SetPublisher, _Publisher) == 0x000008, "Member 'OnlineAccount_SetPublisher::_Publisher' has a wrong offset!");

// Function Stigma.OnlineAccount.SetPublisherID
// 0x0018 (0x0018 - 0x0000)
struct OnlineAccount_SetPublisherID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Name;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineAccount_SetPublisherID) == 0x000008, "Wrong alignment on OnlineAccount_SetPublisherID");
static_assert(sizeof(OnlineAccount_SetPublisherID) == 0x000018, "Wrong size on OnlineAccount_SetPublisherID");
static_assert(offsetof(OnlineAccount_SetPublisherID, _world_ctx) == 0x000000, "Member 'OnlineAccount_SetPublisherID::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineAccount_SetPublisherID, _Name) == 0x000008, "Member 'OnlineAccount_SetPublisherID::_Name' has a wrong offset!");

// Function Stigma.OnlineAccount.SetPublisherToken
// 0x0018 (0x0018 - 0x0000)
struct OnlineAccount_SetPublisherToken final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Token;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineAccount_SetPublisherToken) == 0x000008, "Wrong alignment on OnlineAccount_SetPublisherToken");
static_assert(sizeof(OnlineAccount_SetPublisherToken) == 0x000018, "Wrong size on OnlineAccount_SetPublisherToken");
static_assert(offsetof(OnlineAccount_SetPublisherToken, _world_ctx) == 0x000000, "Member 'OnlineAccount_SetPublisherToken::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineAccount_SetPublisherToken, _Token) == 0x000008, "Member 'OnlineAccount_SetPublisherToken::_Token' has a wrong offset!");

// Function Stigma.OnlineAccount.ShouldBeEnterAccountID
// 0x0010 (0x0010 - 0x0000)
struct OnlineAccount_ShouldBeEnterAccountID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineAccount_ShouldBeEnterAccountID) == 0x000008, "Wrong alignment on OnlineAccount_ShouldBeEnterAccountID");
static_assert(sizeof(OnlineAccount_ShouldBeEnterAccountID) == 0x000010, "Wrong size on OnlineAccount_ShouldBeEnterAccountID");
static_assert(offsetof(OnlineAccount_ShouldBeEnterAccountID, _world_ctx) == 0x000000, "Member 'OnlineAccount_ShouldBeEnterAccountID::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineAccount_ShouldBeEnterAccountID, ReturnValue) == 0x000008, "Member 'OnlineAccount_ShouldBeEnterAccountID::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.CalcRankWithCurrentBattleResult
// 0x0088 (0x0088 - 0x0000)
struct Challenge_SubSystem_CalcRankWithCurrentBattleResult final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _top3;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _rankers;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBattleResult_Challenge                _current_battle_result;                            // 0x0028(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _out_top3;                                         // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _out_rankers;                                      // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_CalcRankWithCurrentBattleResult) == 0x000008, "Wrong alignment on Challenge_SubSystem_CalcRankWithCurrentBattleResult");
static_assert(sizeof(Challenge_SubSystem_CalcRankWithCurrentBattleResult) == 0x000088, "Wrong size on Challenge_SubSystem_CalcRankWithCurrentBattleResult");
static_assert(offsetof(Challenge_SubSystem_CalcRankWithCurrentBattleResult, _world_ctx) == 0x000000, "Member 'Challenge_SubSystem_CalcRankWithCurrentBattleResult::_world_ctx' has a wrong offset!");
static_assert(offsetof(Challenge_SubSystem_CalcRankWithCurrentBattleResult, _top3) == 0x000008, "Member 'Challenge_SubSystem_CalcRankWithCurrentBattleResult::_top3' has a wrong offset!");
static_assert(offsetof(Challenge_SubSystem_CalcRankWithCurrentBattleResult, _rankers) == 0x000018, "Member 'Challenge_SubSystem_CalcRankWithCurrentBattleResult::_rankers' has a wrong offset!");
static_assert(offsetof(Challenge_SubSystem_CalcRankWithCurrentBattleResult, _current_battle_result) == 0x000028, "Member 'Challenge_SubSystem_CalcRankWithCurrentBattleResult::_current_battle_result' has a wrong offset!");
static_assert(offsetof(Challenge_SubSystem_CalcRankWithCurrentBattleResult, _out_top3) == 0x000068, "Member 'Challenge_SubSystem_CalcRankWithCurrentBattleResult::_out_top3' has a wrong offset!");
static_assert(offsetof(Challenge_SubSystem_CalcRankWithCurrentBattleResult, _out_rankers) == 0x000078, "Member 'Challenge_SubSystem_CalcRankWithCurrentBattleResult::_out_rankers' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.JumpToBestRound
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_JumpToBestRound final
{
public:
	float                                         _delay_before_jump;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_JumpToBestRound) == 0x000004, "Wrong alignment on Challenge_SubSystem_JumpToBestRound");
static_assert(sizeof(Challenge_SubSystem_JumpToBestRound) == 0x000004, "Wrong size on Challenge_SubSystem_JumpToBestRound");
static_assert(offsetof(Challenge_SubSystem_JumpToBestRound, _delay_before_jump) == 0x000000, "Member 'Challenge_SubSystem_JumpToBestRound::_delay_before_jump' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.ReadMyChallengeRanks
// 0x0010 (0x0010 - 0x0000)
struct Challenge_SubSystem_ReadMyChallengeRanks final
{
public:
	TDelegate<void()>                             _proc;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_ReadMyChallengeRanks) == 0x000004, "Wrong alignment on Challenge_SubSystem_ReadMyChallengeRanks");
static_assert(sizeof(Challenge_SubSystem_ReadMyChallengeRanks) == 0x000010, "Wrong size on Challenge_SubSystem_ReadMyChallengeRanks");
static_assert(offsetof(Challenge_SubSystem_ReadMyChallengeRanks, _proc) == 0x000000, "Member 'Challenge_SubSystem_ReadMyChallengeRanks::_proc' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.StartChallengeMode
// 0x0001 (0x0001 - 0x0000)
struct Challenge_SubSystem_StartChallengeMode final
{
public:
	bool                                          _is_first_round;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_StartChallengeMode) == 0x000001, "Wrong alignment on Challenge_SubSystem_StartChallengeMode");
static_assert(sizeof(Challenge_SubSystem_StartChallengeMode) == 0x000001, "Wrong size on Challenge_SubSystem_StartChallengeMode");
static_assert(offsetof(Challenge_SubSystem_StartChallengeMode, _is_first_round) == 0x000000, "Member 'Challenge_SubSystem_StartChallengeMode::_is_first_round' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetBounsTicket
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetBounsTicket final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetBounsTicket) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetBounsTicket");
static_assert(sizeof(Challenge_SubSystem_GetBounsTicket) == 0x000004, "Wrong size on Challenge_SubSystem_GetBounsTicket");
static_assert(offsetof(Challenge_SubSystem_GetBounsTicket, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetBounsTicket::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetCurrentBlackCoin
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetCurrentBlackCoin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetCurrentBlackCoin) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetCurrentBlackCoin");
static_assert(sizeof(Challenge_SubSystem_GetCurrentBlackCoin) == 0x000004, "Wrong size on Challenge_SubSystem_GetCurrentBlackCoin");
static_assert(offsetof(Challenge_SubSystem_GetCurrentBlackCoin, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetCurrentBlackCoin::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetCurrentGold
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetCurrentGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetCurrentGold) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetCurrentGold");
static_assert(sizeof(Challenge_SubSystem_GetCurrentGold) == 0x000004, "Wrong size on Challenge_SubSystem_GetCurrentGold");
static_assert(offsetof(Challenge_SubSystem_GetCurrentGold, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetCurrentGold::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetCurrentRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetCurrentRound) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetCurrentRound");
static_assert(sizeof(Challenge_SubSystem_GetCurrentRound) == 0x000004, "Wrong size on Challenge_SubSystem_GetCurrentRound");
static_assert(offsetof(Challenge_SubSystem_GetCurrentRound, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetCurrentRound::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetCurrentRoundConfig
// 0x0038 (0x0038 - 0x0000)
struct Challenge_SubSystem_GetCurrentRoundConfig final
{
public:
	struct FConfig_ChallengeRound                 ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetCurrentRoundConfig) == 0x000008, "Wrong alignment on Challenge_SubSystem_GetCurrentRoundConfig");
static_assert(sizeof(Challenge_SubSystem_GetCurrentRoundConfig) == 0x000038, "Wrong size on Challenge_SubSystem_GetCurrentRoundConfig");
static_assert(offsetof(Challenge_SubSystem_GetCurrentRoundConfig, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetCurrentRoundConfig::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetLastRound
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetLastRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetLastRound) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetLastRound");
static_assert(sizeof(Challenge_SubSystem_GetLastRound) == 0x000004, "Wrong size on Challenge_SubSystem_GetLastRound");
static_assert(offsetof(Challenge_SubSystem_GetLastRound, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetLastRound::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetPrevBestScore
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetPrevBestScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetPrevBestScore) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetPrevBestScore");
static_assert(sizeof(Challenge_SubSystem_GetPrevBestScore) == 0x000004, "Wrong size on Challenge_SubSystem_GetPrevBestScore");
static_assert(offsetof(Challenge_SubSystem_GetPrevBestScore, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetPrevBestScore::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetPrevResult
// 0x0020 (0x0020 - 0x0000)
struct Challenge_SubSystem_GetPrevResult final
{
public:
	struct FChallengeResult                       ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetPrevResult) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetPrevResult");
static_assert(sizeof(Challenge_SubSystem_GetPrevResult) == 0x000020, "Wrong size on Challenge_SubSystem_GetPrevResult");
static_assert(offsetof(Challenge_SubSystem_GetPrevResult, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetPrevResult::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetStartRound
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetStartRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetStartRound) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetStartRound");
static_assert(sizeof(Challenge_SubSystem_GetStartRound) == 0x000004, "Wrong size on Challenge_SubSystem_GetStartRound");
static_assert(offsetof(Challenge_SubSystem_GetStartRound, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetStartRound::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.GetTicketUsed
// 0x0004 (0x0004 - 0x0000)
struct Challenge_SubSystem_GetTicketUsed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_GetTicketUsed) == 0x000004, "Wrong alignment on Challenge_SubSystem_GetTicketUsed");
static_assert(sizeof(Challenge_SubSystem_GetTicketUsed) == 0x000004, "Wrong size on Challenge_SubSystem_GetTicketUsed");
static_assert(offsetof(Challenge_SubSystem_GetTicketUsed, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_GetTicketUsed::ReturnValue' has a wrong offset!");

// Function Stigma.Challenge_SubSystem.IsStartRound
// 0x0001 (0x0001 - 0x0000)
struct Challenge_SubSystem_IsStartRound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Challenge_SubSystem_IsStartRound) == 0x000001, "Wrong alignment on Challenge_SubSystem_IsStartRound");
static_assert(sizeof(Challenge_SubSystem_IsStartRound) == 0x000001, "Wrong size on Challenge_SubSystem_IsStartRound");
static_assert(offsetof(Challenge_SubSystem_IsStartRound, ReturnValue) == 0x000000, "Member 'Challenge_SubSystem_IsStartRound::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterDefineBlueprintLibrary.GetActionGraphID
// 0x09F8 (0x09F8 - 0x0000)
struct CharacterDefineBlueprintLibrary_GetActionGraphID final
{
public:
	struct FCharacterDefine                       _define;                                           // 0x0000(0x09E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECharaAction                                  _slot;                                             // 0x09E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B5[0x7];                                     // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FActionGraphID                         ReturnValue;                                       // 0x09E8(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDefineBlueprintLibrary_GetActionGraphID) == 0x000008, "Wrong alignment on CharacterDefineBlueprintLibrary_GetActionGraphID");
static_assert(sizeof(CharacterDefineBlueprintLibrary_GetActionGraphID) == 0x0009F8, "Wrong size on CharacterDefineBlueprintLibrary_GetActionGraphID");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetActionGraphID, _define) == 0x000000, "Member 'CharacterDefineBlueprintLibrary_GetActionGraphID::_define' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetActionGraphID, _slot) == 0x0009E0, "Member 'CharacterDefineBlueprintLibrary_GetActionGraphID::_slot' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetActionGraphID, ReturnValue) == 0x0009E8, "Member 'CharacterDefineBlueprintLibrary_GetActionGraphID::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterDefineBlueprintLibrary.GetCharaBuffedGraphValue
// 0x0A08 (0x0A08 - 0x0000)
struct CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue final
{
public:
	struct FCharacterDefine                       _define;                                           // 0x0000(0x09E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharaBuffEffect                       _effect;                                           // 0x09E0(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharaGraphValue                       ReturnValue;                                       // 0x09F4(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue) == 0x000008, "Wrong alignment on CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue");
static_assert(sizeof(CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue) == 0x000A08, "Wrong size on CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue, _define) == 0x000000, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue::_define' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue, _effect) == 0x0009E0, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue::_effect' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue, ReturnValue) == 0x0009F4, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffedGraphValue::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterDefineBlueprintLibrary.GetCharaBuffEffectOfBoosters
// 0x0028 (0x0028 - 0x0000)
struct CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters final
{
public:
	TArray<struct FItemID_Booster>                _boosters;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharaBuffEffect                       ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B6[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters) == 0x000008, "Wrong alignment on CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters");
static_assert(sizeof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters) == 0x000028, "Wrong size on CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters, _boosters) == 0x000000, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters::_boosters' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters, ReturnValue) == 0x000010, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfBoosters::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterDefineBlueprintLibrary.GetCharaBuffEffectOfPassiveSkills
// 0x0028 (0x0028 - 0x0000)
struct CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills final
{
public:
	TArray<struct FPassiveSkill>                  _passive_skills;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharaBuffEffect                       ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B7[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills) == 0x000008, "Wrong alignment on CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills");
static_assert(sizeof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills) == 0x000028, "Wrong size on CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills, _passive_skills) == 0x000000, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills::_passive_skills' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills, ReturnValue) == 0x000010, "Member 'CharacterDefineBlueprintLibrary_GetCharaBuffEffectOfPassiveSkills::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterDefineBlueprintLibrary.GetCharaType
// 0x09E8 (0x09E8 - 0x0000)
struct CharacterDefineBlueprintLibrary_GetCharaType final
{
public:
	struct FCharacterDefine                       _define;                                           // 0x0000(0x09E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECharaType                                    ReturnValue;                                       // 0x09E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B8[0x7];                                     // 0x09E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterDefineBlueprintLibrary_GetCharaType) == 0x000008, "Wrong alignment on CharacterDefineBlueprintLibrary_GetCharaType");
static_assert(sizeof(CharacterDefineBlueprintLibrary_GetCharaType) == 0x0009E8, "Wrong size on CharacterDefineBlueprintLibrary_GetCharaType");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaType, _define) == 0x000000, "Member 'CharacterDefineBlueprintLibrary_GetCharaType::_define' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetCharaType, ReturnValue) == 0x0009E0, "Member 'CharacterDefineBlueprintLibrary_GetCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterDefineBlueprintLibrary.GetGraphValue
// 0x09F8 (0x09F8 - 0x0000)
struct CharacterDefineBlueprintLibrary_GetGraphValue final
{
public:
	struct FCharacterDefine                       _define;                                           // 0x0000(0x09E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharaGraphValue                       ReturnValue;                                       // 0x09E0(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B9[0x4];                                     // 0x09F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterDefineBlueprintLibrary_GetGraphValue) == 0x000008, "Wrong alignment on CharacterDefineBlueprintLibrary_GetGraphValue");
static_assert(sizeof(CharacterDefineBlueprintLibrary_GetGraphValue) == 0x0009F8, "Wrong size on CharacterDefineBlueprintLibrary_GetGraphValue");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetGraphValue, _define) == 0x000000, "Member 'CharacterDefineBlueprintLibrary_GetGraphValue::_define' has a wrong offset!");
static_assert(offsetof(CharacterDefineBlueprintLibrary_GetGraphValue, ReturnValue) == 0x0009E0, "Member 'CharacterDefineBlueprintLibrary_GetGraphValue::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterInfoBlueprintLibrary.CalcControlPower
// 0x0068 (0x0068 - 0x0000)
struct CharacterInfoBlueprintLibrary_CalcControlPower final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterInfo                         _info;                                             // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BA[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterInfoBlueprintLibrary_CalcControlPower) == 0x000008, "Wrong alignment on CharacterInfoBlueprintLibrary_CalcControlPower");
static_assert(sizeof(CharacterInfoBlueprintLibrary_CalcControlPower) == 0x000068, "Wrong size on CharacterInfoBlueprintLibrary_CalcControlPower");
static_assert(offsetof(CharacterInfoBlueprintLibrary_CalcControlPower, _world_ctx) == 0x000000, "Member 'CharacterInfoBlueprintLibrary_CalcControlPower::_world_ctx' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_CalcControlPower, _info) == 0x000008, "Member 'CharacterInfoBlueprintLibrary_CalcControlPower::_info' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_CalcControlPower, ReturnValue) == 0x000060, "Member 'CharacterInfoBlueprintLibrary_CalcControlPower::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterInfoBlueprintLibrary.GetArmorType
// 0x0060 (0x0060 - 0x0000)
struct CharacterInfoBlueprintLibrary_GetArmorType final
{
public:
	struct FCharacterInfo                         _info;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EArmorType                                    ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BB[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterInfoBlueprintLibrary_GetArmorType) == 0x000008, "Wrong alignment on CharacterInfoBlueprintLibrary_GetArmorType");
static_assert(sizeof(CharacterInfoBlueprintLibrary_GetArmorType) == 0x000060, "Wrong size on CharacterInfoBlueprintLibrary_GetArmorType");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetArmorType, _info) == 0x000000, "Member 'CharacterInfoBlueprintLibrary_GetArmorType::_info' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetArmorType, ReturnValue) == 0x000058, "Member 'CharacterInfoBlueprintLibrary_GetArmorType::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterInfoBlueprintLibrary.GetBullets
// 0x0060 (0x0060 - 0x0000)
struct CharacterInfoBlueprintLibrary_GetBullets final
{
public:
	struct FCharacterInfo                         _info;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBulletType                                   _out_bullet_type;                                  // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletTip                                    _out_bullet_tip;                                   // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BC[0x5];                                     // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterInfoBlueprintLibrary_GetBullets) == 0x000008, "Wrong alignment on CharacterInfoBlueprintLibrary_GetBullets");
static_assert(sizeof(CharacterInfoBlueprintLibrary_GetBullets) == 0x000060, "Wrong size on CharacterInfoBlueprintLibrary_GetBullets");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetBullets, _info) == 0x000000, "Member 'CharacterInfoBlueprintLibrary_GetBullets::_info' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetBullets, _out_bullet_type) == 0x000058, "Member 'CharacterInfoBlueprintLibrary_GetBullets::_out_bullet_type' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetBullets, _out_bullet_tip) == 0x000059, "Member 'CharacterInfoBlueprintLibrary_GetBullets::_out_bullet_tip' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetBullets, ReturnValue) == 0x00005A, "Member 'CharacterInfoBlueprintLibrary_GetBullets::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterInfoBlueprintLibrary.GetBulletTipID
// 0x0060 (0x0060 - 0x0000)
struct CharacterInfoBlueprintLibrary_GetBulletTipID final
{
public:
	struct FCharacterInfo                         _info;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBulletTip                                    ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BD[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterInfoBlueprintLibrary_GetBulletTipID) == 0x000008, "Wrong alignment on CharacterInfoBlueprintLibrary_GetBulletTipID");
static_assert(sizeof(CharacterInfoBlueprintLibrary_GetBulletTipID) == 0x000060, "Wrong size on CharacterInfoBlueprintLibrary_GetBulletTipID");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetBulletTipID, _info) == 0x000000, "Member 'CharacterInfoBlueprintLibrary_GetBulletTipID::_info' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_GetBulletTipID, ReturnValue) == 0x000058, "Member 'CharacterInfoBlueprintLibrary_GetBulletTipID::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterInfoBlueprintLibrary.IsEquipedItemID
// 0x0070 (0x0070 - 0x0000)
struct CharacterInfoBlueprintLibrary_IsEquipedItemID final
{
public:
	struct FCharacterInfo                         _info;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FItemID                                _id;                                               // 0x0058(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BE[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CharacterInfoBlueprintLibrary_IsEquipedItemID) == 0x000008, "Wrong alignment on CharacterInfoBlueprintLibrary_IsEquipedItemID");
static_assert(sizeof(CharacterInfoBlueprintLibrary_IsEquipedItemID) == 0x000070, "Wrong size on CharacterInfoBlueprintLibrary_IsEquipedItemID");
static_assert(offsetof(CharacterInfoBlueprintLibrary_IsEquipedItemID, _info) == 0x000000, "Member 'CharacterInfoBlueprintLibrary_IsEquipedItemID::_info' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_IsEquipedItemID, _id) == 0x000058, "Member 'CharacterInfoBlueprintLibrary_IsEquipedItemID::_id' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_IsEquipedItemID, ReturnValue) == 0x000068, "Member 'CharacterInfoBlueprintLibrary_IsEquipedItemID::ReturnValue' has a wrong offset!");

// Function Stigma.CharacterInfoBlueprintLibrary.ToNetCharacter
// 0x00A8 (0x00A8 - 0x0000)
struct CharacterInfoBlueprintLibrary_ToNetCharacter final
{
public:
	struct FCharacterInfo                         _info;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetCharacter                          ReturnValue;                                       // 0x0058(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInfoBlueprintLibrary_ToNetCharacter) == 0x000008, "Wrong alignment on CharacterInfoBlueprintLibrary_ToNetCharacter");
static_assert(sizeof(CharacterInfoBlueprintLibrary_ToNetCharacter) == 0x0000A8, "Wrong size on CharacterInfoBlueprintLibrary_ToNetCharacter");
static_assert(offsetof(CharacterInfoBlueprintLibrary_ToNetCharacter, _info) == 0x000000, "Member 'CharacterInfoBlueprintLibrary_ToNetCharacter::_info' has a wrong offset!");
static_assert(offsetof(CharacterInfoBlueprintLibrary_ToNetCharacter, ReturnValue) == 0x000058, "Member 'CharacterInfoBlueprintLibrary_ToNetCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TeamResultItem.GetResult
// 0x00D0 (0x00D0 - 0x0000)
struct UI_TeamResultItem_GetResult final
{
public:
	struct FBattleDecisionDetail                  ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TeamResultItem_GetResult) == 0x000008, "Wrong alignment on UI_TeamResultItem_GetResult");
static_assert(sizeof(UI_TeamResultItem_GetResult) == 0x0000D0, "Wrong size on UI_TeamResultItem_GetResult");
static_assert(offsetof(UI_TeamResultItem_GetResult, ReturnValue) == 0x000000, "Member 'UI_TeamResultItem_GetResult::ReturnValue' has a wrong offset!");

// Function Stigma.ChatManager.RegisterOnChatMsgAdded
// 0x0010 (0x0010 - 0x0000)
struct ChatManager_RegisterOnChatMsgAdded final
{
public:
	TDelegate<void(struct FChatMsg& _msg)>        _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_RegisterOnChatMsgAdded) == 0x000004, "Wrong alignment on ChatManager_RegisterOnChatMsgAdded");
static_assert(sizeof(ChatManager_RegisterOnChatMsgAdded) == 0x000010, "Wrong size on ChatManager_RegisterOnChatMsgAdded");
static_assert(offsetof(ChatManager_RegisterOnChatMsgAdded, _callback) == 0x000000, "Member 'ChatManager_RegisterOnChatMsgAdded::_callback' has a wrong offset!");

// Function Stigma.ChatManager.RegisterOnChatMsgCleared
// 0x0010 (0x0010 - 0x0000)
struct ChatManager_RegisterOnChatMsgCleared final
{
public:
	TDelegate<void()>                             _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_RegisterOnChatMsgCleared) == 0x000004, "Wrong alignment on ChatManager_RegisterOnChatMsgCleared");
static_assert(sizeof(ChatManager_RegisterOnChatMsgCleared) == 0x000010, "Wrong size on ChatManager_RegisterOnChatMsgCleared");
static_assert(offsetof(ChatManager_RegisterOnChatMsgCleared, _callback) == 0x000000, "Member 'ChatManager_RegisterOnChatMsgCleared::_callback' has a wrong offset!");

// Function Stigma.ChatManager.RegisterOnStartChatReceived
// 0x0010 (0x0010 - 0x0000)
struct ChatManager_RegisterOnStartChatReceived final
{
public:
	TDelegate<void()>                             _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_RegisterOnStartChatReceived) == 0x000004, "Wrong alignment on ChatManager_RegisterOnStartChatReceived");
static_assert(sizeof(ChatManager_RegisterOnStartChatReceived) == 0x000010, "Wrong size on ChatManager_RegisterOnStartChatReceived");
static_assert(offsetof(ChatManager_RegisterOnStartChatReceived, _callback) == 0x000000, "Member 'ChatManager_RegisterOnStartChatReceived::_callback' has a wrong offset!");

// Function Stigma.ChatManager.UnRegisterOnChatMsgAdded
// 0x0008 (0x0008 - 0x0000)
struct ChatManager_UnRegisterOnChatMsgAdded final
{
public:
	const class UObject*                          _bind_owner;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_UnRegisterOnChatMsgAdded) == 0x000008, "Wrong alignment on ChatManager_UnRegisterOnChatMsgAdded");
static_assert(sizeof(ChatManager_UnRegisterOnChatMsgAdded) == 0x000008, "Wrong size on ChatManager_UnRegisterOnChatMsgAdded");
static_assert(offsetof(ChatManager_UnRegisterOnChatMsgAdded, _bind_owner) == 0x000000, "Member 'ChatManager_UnRegisterOnChatMsgAdded::_bind_owner' has a wrong offset!");

// Function Stigma.ChatManager.UnRegisterOnChatMsgCleared
// 0x0008 (0x0008 - 0x0000)
struct ChatManager_UnRegisterOnChatMsgCleared final
{
public:
	const class UObject*                          _bind_owner;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_UnRegisterOnChatMsgCleared) == 0x000008, "Wrong alignment on ChatManager_UnRegisterOnChatMsgCleared");
static_assert(sizeof(ChatManager_UnRegisterOnChatMsgCleared) == 0x000008, "Wrong size on ChatManager_UnRegisterOnChatMsgCleared");
static_assert(offsetof(ChatManager_UnRegisterOnChatMsgCleared, _bind_owner) == 0x000000, "Member 'ChatManager_UnRegisterOnChatMsgCleared::_bind_owner' has a wrong offset!");

// Function Stigma.ChatManager.UnRegisterOnStartChatReceived
// 0x0008 (0x0008 - 0x0000)
struct ChatManager_UnRegisterOnStartChatReceived final
{
public:
	const class UObject*                          _bind_owner;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_UnRegisterOnStartChatReceived) == 0x000008, "Wrong alignment on ChatManager_UnRegisterOnStartChatReceived");
static_assert(sizeof(ChatManager_UnRegisterOnStartChatReceived) == 0x000008, "Wrong size on ChatManager_UnRegisterOnStartChatReceived");
static_assert(offsetof(ChatManager_UnRegisterOnStartChatReceived, _bind_owner) == 0x000000, "Member 'ChatManager_UnRegisterOnStartChatReceived::_bind_owner' has a wrong offset!");

// Function Stigma.UI_TutorialMissionGuide.GetMission
// 0x0008 (0x0008 - 0x0000)
struct UI_TutorialMissionGuide_GetMission final
{
public:
	class UMission*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TutorialMissionGuide_GetMission) == 0x000008, "Wrong alignment on UI_TutorialMissionGuide_GetMission");
static_assert(sizeof(UI_TutorialMissionGuide_GetMission) == 0x000008, "Wrong size on UI_TutorialMissionGuide_GetMission");
static_assert(offsetof(UI_TutorialMissionGuide_GetMission, ReturnValue) == 0x000000, "Member 'UI_TutorialMissionGuide_GetMission::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TutorialMissionGuide.OnMissionUpdated
// 0x0010 (0x0010 - 0x0000)
struct UI_TutorialMissionGuide_OnMissionUpdated final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TutorialMissionGuide_OnMissionUpdated) == 0x000008, "Wrong alignment on UI_TutorialMissionGuide_OnMissionUpdated");
static_assert(sizeof(UI_TutorialMissionGuide_OnMissionUpdated) == 0x000010, "Wrong size on UI_TutorialMissionGuide_OnMissionUpdated");
static_assert(offsetof(UI_TutorialMissionGuide_OnMissionUpdated, _type) == 0x000000, "Member 'UI_TutorialMissionGuide_OnMissionUpdated::_type' has a wrong offset!");
static_assert(offsetof(UI_TutorialMissionGuide_OnMissionUpdated, _updated_mission) == 0x000008, "Member 'UI_TutorialMissionGuide_OnMissionUpdated::_updated_mission' has a wrong offset!");

// Function Stigma.UI_TutorialMissionGuide.SetTargetMission
// 0x0028 (0x0028 - 0x0000)
struct UI_TutorialMissionGuide_SetTargetMission final
{
public:
	struct FItemID                                _task_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Mission>             _mission_ids;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _show_title;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C7[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_TutorialMissionGuide_SetTargetMission) == 0x000008, "Wrong alignment on UI_TutorialMissionGuide_SetTargetMission");
static_assert(sizeof(UI_TutorialMissionGuide_SetTargetMission) == 0x000028, "Wrong size on UI_TutorialMissionGuide_SetTargetMission");
static_assert(offsetof(UI_TutorialMissionGuide_SetTargetMission, _task_id) == 0x000000, "Member 'UI_TutorialMissionGuide_SetTargetMission::_task_id' has a wrong offset!");
static_assert(offsetof(UI_TutorialMissionGuide_SetTargetMission, _mission_ids) == 0x000010, "Member 'UI_TutorialMissionGuide_SetTargetMission::_mission_ids' has a wrong offset!");
static_assert(offsetof(UI_TutorialMissionGuide_SetTargetMission, _show_title) == 0x000020, "Member 'UI_TutorialMissionGuide_SetTargetMission::_show_title' has a wrong offset!");

// Function Stigma.UI_TutorialMissionGuide.GetIsmissionChecked
// 0x0001 (0x0001 - 0x0000)
struct UI_TutorialMissionGuide_GetIsmissionChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TutorialMissionGuide_GetIsmissionChecked) == 0x000001, "Wrong alignment on UI_TutorialMissionGuide_GetIsmissionChecked");
static_assert(sizeof(UI_TutorialMissionGuide_GetIsmissionChecked) == 0x000001, "Wrong size on UI_TutorialMissionGuide_GetIsmissionChecked");
static_assert(offsetof(UI_TutorialMissionGuide_GetIsmissionChecked, ReturnValue) == 0x000000, "Member 'UI_TutorialMissionGuide_GetIsmissionChecked::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_ActuationSwitch.StartInteraction
// 0x0010 (0x0010 - 0x0000)
struct CLB_ActuationSwitch_StartInteraction final
{
public:
	class ACharaBase*                             _interactor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CD[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CLB_ActuationSwitch_StartInteraction) == 0x000008, "Wrong alignment on CLB_ActuationSwitch_StartInteraction");
static_assert(sizeof(CLB_ActuationSwitch_StartInteraction) == 0x000010, "Wrong size on CLB_ActuationSwitch_StartInteraction");
static_assert(offsetof(CLB_ActuationSwitch_StartInteraction, _interactor) == 0x000000, "Member 'CLB_ActuationSwitch_StartInteraction::_interactor' has a wrong offset!");
static_assert(offsetof(CLB_ActuationSwitch_StartInteraction, ReturnValue) == 0x000008, "Member 'CLB_ActuationSwitch_StartInteraction::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_ActuationSwitch.StopInteraction
// 0x0008 (0x0008 - 0x0000)
struct CLB_ActuationSwitch_StopInteraction final
{
public:
	class ACharaBase*                             _interactor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_ActuationSwitch_StopInteraction) == 0x000008, "Wrong alignment on CLB_ActuationSwitch_StopInteraction");
static_assert(sizeof(CLB_ActuationSwitch_StopInteraction) == 0x000008, "Wrong size on CLB_ActuationSwitch_StopInteraction");
static_assert(offsetof(CLB_ActuationSwitch_StopInteraction, _interactor) == 0x000000, "Member 'CLB_ActuationSwitch_StopInteraction::_interactor' has a wrong offset!");

// Function Stigma.FireSystemComponent.RPC_ALL_Fire
// 0x0028 (0x0028 - 0x0000)
struct FireSystemComponent_RPC_ALL_Fire final
{
public:
	struct FShot                                  _shot;                                             // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireSystemComponent_RPC_ALL_Fire) == 0x000008, "Wrong alignment on FireSystemComponent_RPC_ALL_Fire");
static_assert(sizeof(FireSystemComponent_RPC_ALL_Fire) == 0x000028, "Wrong size on FireSystemComponent_RPC_ALL_Fire");
static_assert(offsetof(FireSystemComponent_RPC_ALL_Fire, _shot) == 0x000000, "Member 'FireSystemComponent_RPC_ALL_Fire::_shot' has a wrong offset!");

// Function Stigma.FireSystemComponent.RPC_SERVER_Fire
// 0x0028 (0x0028 - 0x0000)
struct FireSystemComponent_RPC_SERVER_Fire final
{
public:
	struct FShot                                  _shot;                                             // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireSystemComponent_RPC_SERVER_Fire) == 0x000008, "Wrong alignment on FireSystemComponent_RPC_SERVER_Fire");
static_assert(sizeof(FireSystemComponent_RPC_SERVER_Fire) == 0x000028, "Wrong size on FireSystemComponent_RPC_SERVER_Fire");
static_assert(offsetof(FireSystemComponent_RPC_SERVER_Fire, _shot) == 0x000000, "Member 'FireSystemComponent_RPC_SERVER_Fire::_shot' has a wrong offset!");

// Function Stigma.CLB_Sector.GetPlayerStart
// 0x0008 (0x0008 - 0x0000)
struct CLB_Sector_GetPlayerStart final
{
public:
	class APlayerStart*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_Sector_GetPlayerStart) == 0x000008, "Wrong alignment on CLB_Sector_GetPlayerStart");
static_assert(sizeof(CLB_Sector_GetPlayerStart) == 0x000008, "Wrong size on CLB_Sector_GetPlayerStart");
static_assert(offsetof(CLB_Sector_GetPlayerStart, ReturnValue) == 0x000000, "Member 'CLB_Sector_GetPlayerStart::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_Sector.GetSectorType
// 0x0001 (0x0001 - 0x0000)
struct CLB_Sector_GetSectorType final
{
public:
	ECLB_SectorType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_Sector_GetSectorType) == 0x000001, "Wrong alignment on CLB_Sector_GetSectorType");
static_assert(sizeof(CLB_Sector_GetSectorType) == 0x000001, "Wrong size on CLB_Sector_GetSectorType");
static_assert(offsetof(CLB_Sector_GetSectorType, ReturnValue) == 0x000000, "Member 'CLB_Sector_GetSectorType::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_DefensionSector.GetElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct CLB_DefensionSector_GetElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_DefensionSector_GetElapsedTime) == 0x000004, "Wrong alignment on CLB_DefensionSector_GetElapsedTime");
static_assert(sizeof(CLB_DefensionSector_GetElapsedTime) == 0x000004, "Wrong size on CLB_DefensionSector_GetElapsedTime");
static_assert(offsetof(CLB_DefensionSector_GetElapsedTime, ReturnValue) == 0x000000, "Member 'CLB_DefensionSector_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TooltipKeyContainer.AddTooltipKey
// 0x0030 (0x0030 - 0x0000)
struct UI_TooltipKeyContainer_AddTooltipKey final
{
public:
	struct FTooltipKeyInfo                        _key_info;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TooltipKeyContainer_AddTooltipKey) == 0x000008, "Wrong alignment on UI_TooltipKeyContainer_AddTooltipKey");
static_assert(sizeof(UI_TooltipKeyContainer_AddTooltipKey) == 0x000030, "Wrong size on UI_TooltipKeyContainer_AddTooltipKey");
static_assert(offsetof(UI_TooltipKeyContainer_AddTooltipKey, _key_info) == 0x000000, "Member 'UI_TooltipKeyContainer_AddTooltipKey::_key_info' has a wrong offset!");

// Function Stigma.CLB_GameMode.OnFinishLoading
// 0x0004 (0x0004 - 0x0000)
struct CLB_GameMode_OnFinishLoading final
{
public:
	int32                                         _uuid;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_GameMode_OnFinishLoading) == 0x000004, "Wrong alignment on CLB_GameMode_OnFinishLoading");
static_assert(sizeof(CLB_GameMode_OnFinishLoading) == 0x000004, "Wrong size on CLB_GameMode_OnFinishLoading");
static_assert(offsetof(CLB_GameMode_OnFinishLoading, _uuid) == 0x000000, "Member 'CLB_GameMode_OnFinishLoading::_uuid' has a wrong offset!");

// Function Stigma.CLB_GameMode.GetCollaborationConfig
// 0x0010 (0x0010 - 0x0000)
struct CLB_GameMode_GetCollaborationConfig final
{
public:
	struct FConfig_CollaborationMode              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_GameMode_GetCollaborationConfig) == 0x000008, "Wrong alignment on CLB_GameMode_GetCollaborationConfig");
static_assert(sizeof(CLB_GameMode_GetCollaborationConfig) == 0x000010, "Wrong size on CLB_GameMode_GetCollaborationConfig");
static_assert(offsetof(CLB_GameMode_GetCollaborationConfig, ReturnValue) == 0x000000, "Member 'CLB_GameMode_GetCollaborationConfig::ReturnValue' has a wrong offset!");

// Function Stigma.EventCaster.PublishEvent
// 0x0048 (0x0048 - 0x0000)
struct EventCaster_PublishEvent final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _event_name;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _subject;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _target;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _with;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _int_value;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _vector;                                           // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCaster_PublishEvent) == 0x000008, "Wrong alignment on EventCaster_PublishEvent");
static_assert(sizeof(EventCaster_PublishEvent) == 0x000048, "Wrong size on EventCaster_PublishEvent");
static_assert(offsetof(EventCaster_PublishEvent, _world_ctx) == 0x000000, "Member 'EventCaster_PublishEvent::_world_ctx' has a wrong offset!");
static_assert(offsetof(EventCaster_PublishEvent, _event_name) == 0x000008, "Member 'EventCaster_PublishEvent::_event_name' has a wrong offset!");
static_assert(offsetof(EventCaster_PublishEvent, _subject) == 0x000010, "Member 'EventCaster_PublishEvent::_subject' has a wrong offset!");
static_assert(offsetof(EventCaster_PublishEvent, _target) == 0x000018, "Member 'EventCaster_PublishEvent::_target' has a wrong offset!");
static_assert(offsetof(EventCaster_PublishEvent, _with) == 0x000020, "Member 'EventCaster_PublishEvent::_with' has a wrong offset!");
static_assert(offsetof(EventCaster_PublishEvent, _int_value) == 0x000028, "Member 'EventCaster_PublishEvent::_int_value' has a wrong offset!");
static_assert(offsetof(EventCaster_PublishEvent, _vector) == 0x000030, "Member 'EventCaster_PublishEvent::_vector' has a wrong offset!");

// Function Stigma.EventCaster.SubscribeEvent
// 0x0020 (0x0020 - 0x0000)
struct EventCaster_SubscribeEvent final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _event_name;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName& _event_name, struct FCastedEvent& _event)> _handler;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCaster_SubscribeEvent) == 0x000008, "Wrong alignment on EventCaster_SubscribeEvent");
static_assert(sizeof(EventCaster_SubscribeEvent) == 0x000020, "Wrong size on EventCaster_SubscribeEvent");
static_assert(offsetof(EventCaster_SubscribeEvent, _world_ctx) == 0x000000, "Member 'EventCaster_SubscribeEvent::_world_ctx' has a wrong offset!");
static_assert(offsetof(EventCaster_SubscribeEvent, _event_name) == 0x000008, "Member 'EventCaster_SubscribeEvent::_event_name' has a wrong offset!");
static_assert(offsetof(EventCaster_SubscribeEvent, _handler) == 0x000010, "Member 'EventCaster_SubscribeEvent::_handler' has a wrong offset!");

// Function Stigma.EventCaster.UnsubscribeAllEvents
// 0x0008 (0x0008 - 0x0000)
struct EventCaster_UnsubscribeAllEvents final
{
public:
	const class UObject*                          _object;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCaster_UnsubscribeAllEvents) == 0x000008, "Wrong alignment on EventCaster_UnsubscribeAllEvents");
static_assert(sizeof(EventCaster_UnsubscribeAllEvents) == 0x000008, "Wrong size on EventCaster_UnsubscribeAllEvents");
static_assert(offsetof(EventCaster_UnsubscribeAllEvents, _object) == 0x000000, "Member 'EventCaster_UnsubscribeAllEvents::_object' has a wrong offset!");

// Function Stigma.EventCaster.UnsubscribeEvent
// 0x0010 (0x0010 - 0x0000)
struct EventCaster_UnsubscribeEvent final
{
public:
	class FName                                   _event_name;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _object;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCaster_UnsubscribeEvent) == 0x000008, "Wrong alignment on EventCaster_UnsubscribeEvent");
static_assert(sizeof(EventCaster_UnsubscribeEvent) == 0x000010, "Wrong size on EventCaster_UnsubscribeEvent");
static_assert(offsetof(EventCaster_UnsubscribeEvent, _event_name) == 0x000000, "Member 'EventCaster_UnsubscribeEvent::_event_name' has a wrong offset!");
static_assert(offsetof(EventCaster_UnsubscribeEvent, _object) == 0x000008, "Member 'EventCaster_UnsubscribeEvent::_object' has a wrong offset!");

// Function Stigma.CLB_GameState.Setter_ActiveDoor
// 0x0008 (0x0008 - 0x0000)
struct CLB_GameState_Setter_ActiveDoor final
{
public:
	class ADoorBase*                              _door;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_GameState_Setter_ActiveDoor) == 0x000008, "Wrong alignment on CLB_GameState_Setter_ActiveDoor");
static_assert(sizeof(CLB_GameState_Setter_ActiveDoor) == 0x000008, "Wrong size on CLB_GameState_Setter_ActiveDoor");
static_assert(offsetof(CLB_GameState_Setter_ActiveDoor, _door) == 0x000000, "Member 'CLB_GameState_Setter_ActiveDoor::_door' has a wrong offset!");

// Function Stigma.CLB_GameState.Setter_Phase
// 0x0001 (0x0001 - 0x0000)
struct CLB_GameState_Setter_Phase final
{
public:
	ECLBModePhase                                 _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_GameState_Setter_Phase) == 0x000001, "Wrong alignment on CLB_GameState_Setter_Phase");
static_assert(sizeof(CLB_GameState_Setter_Phase) == 0x000001, "Wrong size on CLB_GameState_Setter_Phase");
static_assert(offsetof(CLB_GameState_Setter_Phase, _phase) == 0x000000, "Member 'CLB_GameState_Setter_Phase::_phase' has a wrong offset!");

// Function Stigma.CLB_GameState.GetSectorRemainTime
// 0x0004 (0x0004 - 0x0000)
struct CLB_GameState_GetSectorRemainTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_GameState_GetSectorRemainTime) == 0x000004, "Wrong alignment on CLB_GameState_GetSectorRemainTime");
static_assert(sizeof(CLB_GameState_GetSectorRemainTime) == 0x000004, "Wrong size on CLB_GameState_GetSectorRemainTime");
static_assert(offsetof(CLB_GameState_GetSectorRemainTime, ReturnValue) == 0x000000, "Member 'CLB_GameState_GetSectorRemainTime::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.GetEditableTabDefine
// 0x0450 (0x0450 - 0x0000)
struct Ctrl_CommonTabPanel_GetEditableTabDefine final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTabDefine                             ReturnValue;                                       // 0x0010(0x0440)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTabPanel_GetEditableTabDefine) == 0x000010, "Wrong alignment on Ctrl_CommonTabPanel_GetEditableTabDefine");
static_assert(sizeof(Ctrl_CommonTabPanel_GetEditableTabDefine) == 0x000450, "Wrong size on Ctrl_CommonTabPanel_GetEditableTabDefine");
static_assert(offsetof(Ctrl_CommonTabPanel_GetEditableTabDefine, _id) == 0x000000, "Member 'Ctrl_CommonTabPanel_GetEditableTabDefine::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_GetEditableTabDefine, ReturnValue) == 0x000010, "Member 'Ctrl_CommonTabPanel_GetEditableTabDefine::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.GetEditableTabDefineFromIdx
// 0x0450 (0x0450 - 0x0000)
struct Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DE[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTabDefine                             ReturnValue;                                       // 0x0010(0x0440)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx) == 0x000010, "Wrong alignment on Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx");
static_assert(sizeof(Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx) == 0x000450, "Wrong size on Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx");
static_assert(offsetof(Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx, _idx) == 0x000000, "Member 'Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx::_idx' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx, ReturnValue) == 0x000010, "Member 'Ctrl_CommonTabPanel_GetEditableTabDefineFromIdx::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.SetReRegisterTab
// 0x000C (0x000C - 0x0000)
struct Ctrl_CommonTabPanel_SetReRegisterTab final
{
public:
	class FName                                   _tab_id;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_register;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DF[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonTabPanel_SetReRegisterTab) == 0x000004, "Wrong alignment on Ctrl_CommonTabPanel_SetReRegisterTab");
static_assert(sizeof(Ctrl_CommonTabPanel_SetReRegisterTab) == 0x00000C, "Wrong size on Ctrl_CommonTabPanel_SetReRegisterTab");
static_assert(offsetof(Ctrl_CommonTabPanel_SetReRegisterTab, _tab_id) == 0x000000, "Member 'Ctrl_CommonTabPanel_SetReRegisterTab::_tab_id' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_SetReRegisterTab, _is_register) == 0x000008, "Member 'Ctrl_CommonTabPanel_SetReRegisterTab::_is_register' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.SetSelectedIdx
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_CommonTabPanel_SetSelectedIdx final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _call_on_tab_changed;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonTabPanel_SetSelectedIdx) == 0x000004, "Wrong alignment on Ctrl_CommonTabPanel_SetSelectedIdx");
static_assert(sizeof(Ctrl_CommonTabPanel_SetSelectedIdx) == 0x000008, "Wrong size on Ctrl_CommonTabPanel_SetSelectedIdx");
static_assert(offsetof(Ctrl_CommonTabPanel_SetSelectedIdx, _idx) == 0x000000, "Member 'Ctrl_CommonTabPanel_SetSelectedIdx::_idx' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_SetSelectedIdx, _call_on_tab_changed) == 0x000004, "Member 'Ctrl_CommonTabPanel_SetSelectedIdx::_call_on_tab_changed' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.SetSelectedTabID
// 0x000C (0x000C - 0x0000)
struct Ctrl_CommonTabPanel_SetSelectedTabID final
{
public:
	class FName                                   _tab_id;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _call_on_tab_changed;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E1[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonTabPanel_SetSelectedTabID) == 0x000004, "Wrong alignment on Ctrl_CommonTabPanel_SetSelectedTabID");
static_assert(sizeof(Ctrl_CommonTabPanel_SetSelectedTabID) == 0x00000C, "Wrong size on Ctrl_CommonTabPanel_SetSelectedTabID");
static_assert(offsetof(Ctrl_CommonTabPanel_SetSelectedTabID, _tab_id) == 0x000000, "Member 'Ctrl_CommonTabPanel_SetSelectedTabID::_tab_id' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_SetSelectedTabID, _call_on_tab_changed) == 0x000008, "Member 'Ctrl_CommonTabPanel_SetSelectedTabID::_call_on_tab_changed' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.GetAllTabDefine
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_CommonTabPanel_GetAllTabDefine final
{
public:
	TArray<struct FTabDefine>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTabPanel_GetAllTabDefine) == 0x000008, "Wrong alignment on Ctrl_CommonTabPanel_GetAllTabDefine");
static_assert(sizeof(Ctrl_CommonTabPanel_GetAllTabDefine) == 0x000010, "Wrong size on Ctrl_CommonTabPanel_GetAllTabDefine");
static_assert(offsetof(Ctrl_CommonTabPanel_GetAllTabDefine, ReturnValue) == 0x000000, "Member 'Ctrl_CommonTabPanel_GetAllTabDefine::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.GetIndexOfID
// 0x000C (0x000C - 0x0000)
struct Ctrl_CommonTabPanel_GetIndexOfID final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTabPanel_GetIndexOfID) == 0x000004, "Wrong alignment on Ctrl_CommonTabPanel_GetIndexOfID");
static_assert(sizeof(Ctrl_CommonTabPanel_GetIndexOfID) == 0x00000C, "Wrong size on Ctrl_CommonTabPanel_GetIndexOfID");
static_assert(offsetof(Ctrl_CommonTabPanel_GetIndexOfID, _id) == 0x000000, "Member 'Ctrl_CommonTabPanel_GetIndexOfID::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_GetIndexOfID, ReturnValue) == 0x000008, "Member 'Ctrl_CommonTabPanel_GetIndexOfID::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.GetSelectedID
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_CommonTabPanel_GetSelectedID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTabPanel_GetSelectedID) == 0x000004, "Wrong alignment on Ctrl_CommonTabPanel_GetSelectedID");
static_assert(sizeof(Ctrl_CommonTabPanel_GetSelectedID) == 0x000008, "Wrong size on Ctrl_CommonTabPanel_GetSelectedID");
static_assert(offsetof(Ctrl_CommonTabPanel_GetSelectedID, ReturnValue) == 0x000000, "Member 'Ctrl_CommonTabPanel_GetSelectedID::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonTabPanel.GetTabDefine
// 0x0450 (0x0450 - 0x0000)
struct Ctrl_CommonTabPanel_GetTabDefine final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E2[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTabDefine                             ReturnValue;                                       // 0x0010(0x0440)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTabPanel_GetTabDefine) == 0x000010, "Wrong alignment on Ctrl_CommonTabPanel_GetTabDefine");
static_assert(sizeof(Ctrl_CommonTabPanel_GetTabDefine) == 0x000450, "Wrong size on Ctrl_CommonTabPanel_GetTabDefine");
static_assert(offsetof(Ctrl_CommonTabPanel_GetTabDefine, _id) == 0x000000, "Member 'Ctrl_CommonTabPanel_GetTabDefine::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonTabPanel_GetTabDefine, ReturnValue) == 0x000010, "Member 'Ctrl_CommonTabPanel_GetTabDefine::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_VerticalTabPanel.OnTabSelected
// 0x000C (0x000C - 0x0000)
struct Ctrl_VerticalTabPanel_OnTabSelected final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_VerticalTabPanel_OnTabSelected) == 0x000004, "Wrong alignment on Ctrl_VerticalTabPanel_OnTabSelected");
static_assert(sizeof(Ctrl_VerticalTabPanel_OnTabSelected) == 0x00000C, "Wrong size on Ctrl_VerticalTabPanel_OnTabSelected");
static_assert(offsetof(Ctrl_VerticalTabPanel_OnTabSelected, _id) == 0x000000, "Member 'Ctrl_VerticalTabPanel_OnTabSelected::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_VerticalTabPanel_OnTabSelected, _idx) == 0x000008, "Member 'Ctrl_VerticalTabPanel_OnTabSelected::_idx' has a wrong offset!");

// Function Stigma.CLB_InterMissionTrigger.GetRemainWaitingTime
// 0x0004 (0x0004 - 0x0000)
struct CLB_InterMissionTrigger_GetRemainWaitingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_InterMissionTrigger_GetRemainWaitingTime) == 0x000004, "Wrong alignment on CLB_InterMissionTrigger_GetRemainWaitingTime");
static_assert(sizeof(CLB_InterMissionTrigger_GetRemainWaitingTime) == 0x000004, "Wrong size on CLB_InterMissionTrigger_GetRemainWaitingTime");
static_assert(offsetof(CLB_InterMissionTrigger_GetRemainWaitingTime, ReturnValue) == 0x000000, "Member 'CLB_InterMissionTrigger_GetRemainWaitingTime::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_InterMissionTrigger.IsFinishedInterMission
// 0x0001 (0x0001 - 0x0000)
struct CLB_InterMissionTrigger_IsFinishedInterMission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_InterMissionTrigger_IsFinishedInterMission) == 0x000001, "Wrong alignment on CLB_InterMissionTrigger_IsFinishedInterMission");
static_assert(sizeof(CLB_InterMissionTrigger_IsFinishedInterMission) == 0x000001, "Wrong size on CLB_InterMissionTrigger_IsFinishedInterMission");
static_assert(offsetof(CLB_InterMissionTrigger_IsFinishedInterMission, ReturnValue) == 0x000000, "Member 'CLB_InterMissionTrigger_IsFinishedInterMission::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_InterMissionTrigger.IsStartInterMission
// 0x0001 (0x0001 - 0x0000)
struct CLB_InterMissionTrigger_IsStartInterMission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_InterMissionTrigger_IsStartInterMission) == 0x000001, "Wrong alignment on CLB_InterMissionTrigger_IsStartInterMission");
static_assert(sizeof(CLB_InterMissionTrigger_IsStartInterMission) == 0x000001, "Wrong size on CLB_InterMissionTrigger_IsStartInterMission");
static_assert(offsetof(CLB_InterMissionTrigger_IsStartInterMission, ReturnValue) == 0x000000, "Member 'CLB_InterMissionTrigger_IsStartInterMission::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.MakeBoosterID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_MakeBoosterID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Booster                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_MakeBoosterID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_MakeBoosterID");
static_assert(sizeof(ItemIDsBlueprintLibrary_MakeBoosterID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_MakeBoosterID");
static_assert(offsetof(ItemIDsBlueprintLibrary_MakeBoosterID, _item_id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_MakeBoosterID::_item_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_MakeBoosterID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_MakeBoosterID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.MakeItemIDByCategories
// 0x0018 (0x0018 - 0x0000)
struct ItemIDsBlueprintLibrary_MakeItemIDByCategories final
{
public:
	EBoosterAcquisitionType                       _acq_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _serial_number;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_MakeItemIDByCategories) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_MakeItemIDByCategories");
static_assert(sizeof(ItemIDsBlueprintLibrary_MakeItemIDByCategories) == 0x000018, "Wrong size on ItemIDsBlueprintLibrary_MakeItemIDByCategories");
static_assert(offsetof(ItemIDsBlueprintLibrary_MakeItemIDByCategories, _acq_type) == 0x000000, "Member 'ItemIDsBlueprintLibrary_MakeItemIDByCategories::_acq_type' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_MakeItemIDByCategories, _serial_number) == 0x000004, "Member 'ItemIDsBlueprintLibrary_MakeItemIDByCategories::_serial_number' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_MakeItemIDByCategories, ReturnValue) == 0x000008, "Member 'ItemIDsBlueprintLibrary_MakeItemIDByCategories::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToAnnouncerID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToAnnouncerID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Announcer                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToAnnouncerID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToAnnouncerID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToAnnouncerID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToAnnouncerID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToAnnouncerID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToAnnouncerID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToAnnouncerID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToAnnouncerID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToBattlePassID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToBattlePassID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToBattlePassID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToBattlePassID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToBattlePassID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToBattlePassID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBattlePassID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToBattlePassID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBattlePassID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToBattlePassID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToBodyID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToBodyID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Skin_Body                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToBodyID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToBodyID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToBodyID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToBodyID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBodyID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToBodyID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBodyID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToBodyID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToBoosterID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToBoosterID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Booster                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToBoosterID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToBoosterID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToBoosterID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToBoosterID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBoosterID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToBoosterID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBoosterID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToBoosterID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToBuffID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToBuffID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Buff                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToBuffID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToBuffID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToBuffID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToBuffID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBuffID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToBuffID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToBuffID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToBuffID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToCurrencyID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToCurrencyID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Currency                       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToCurrencyID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToCurrencyID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToCurrencyID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToCurrencyID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToCurrencyID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToCurrencyID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToCurrencyID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToCurrencyID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToEventPageID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToEventPageID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_EventPage                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToEventPageID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToEventPageID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToEventPageID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToEventPageID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToEventPageID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToEventPageID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToEventPageID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToEventPageID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGoodsID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGoodsID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGoodsID                               ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGoodsID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGoodsID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGoodsID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGoodsID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGoodsID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGoodsID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGoodsID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGoodsID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunBodyID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunBodyID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Body                       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunBodyID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunBodyID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunBodyID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunBodyID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunBodyID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunBodyID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunBodyID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunBodyID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunCharmID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunCharmID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Charm                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunCharmID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunCharmID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunCharmID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunCharmID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunCharmID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunCharmID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunCharmID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunCharmID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunFrontID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunFrontID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Front                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunFrontID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunFrontID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunFrontID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunFrontID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunFrontID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunFrontID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunFrontID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunFrontID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunMagazineID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunMagazineID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Magazine                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunMagazineID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunMagazineID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunMagazineID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunMagazineID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunMagazineID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunMagazineID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunMagazineID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunMagazineID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunSightID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunSightID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Sight                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunSightID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunSightID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunSightID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunSightID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunSightID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunSightID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunSightID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunSightID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunSlideID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunSlideID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Slide                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunSlideID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunSlideID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunSlideID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunSlideID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunSlideID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunSlideID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunSlideID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunSlideID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToGunStickerID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToGunStickerID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Sticker                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToGunStickerID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToGunStickerID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToGunStickerID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToGunStickerID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunStickerID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToGunStickerID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToGunStickerID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToGunStickerID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToHeadID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToHeadID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Skin_Head                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToHeadID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToHeadID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToHeadID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToHeadID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToHeadID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToHeadID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToHeadID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToHeadID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToHeadIDRef
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToHeadIDRef final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Head                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToHeadIDRef) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToHeadIDRef");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToHeadIDRef) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToHeadIDRef");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToHeadIDRef, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToHeadIDRef::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToHeadIDRef, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToHeadIDRef::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToItemIDRef
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToItemIDRef final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef                             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToItemIDRef) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToItemIDRef");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToItemIDRef) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToItemIDRef");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToItemIDRef, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToItemIDRef::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToItemIDRef, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToItemIDRef::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToMissionID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToMissionID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Mission                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToMissionID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToMissionID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToMissionID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToMissionID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToMissionID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToMissionID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToMissionID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToMissionID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToPassiveSkillID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToPassiveSkillID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPassiveSkillID                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToPassiveSkillID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToPassiveSkillID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToPassiveSkillID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToPassiveSkillID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToPassiveSkillID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToPassiveSkillID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToPassiveSkillID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToPassiveSkillID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToRandomBoxID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToRandomBoxID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_RandomBox                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToRandomBoxID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToRandomBoxID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToRandomBoxID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToRandomBoxID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToRandomBoxID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToRandomBoxID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToRandomBoxID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToRandomBoxID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToRecruitID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToRecruitID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Recruit                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToRecruitID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToRecruitID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToRecruitID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToRecruitID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToRecruitID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToRecruitID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToRecruitID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToRecruitID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDsBlueprintLibrary.ToStackID
// 0x0020 (0x0020 - 0x0000)
struct ItemIDsBlueprintLibrary_ToStackID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Stack                          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDsBlueprintLibrary_ToStackID) == 0x000008, "Wrong alignment on ItemIDsBlueprintLibrary_ToStackID");
static_assert(sizeof(ItemIDsBlueprintLibrary_ToStackID) == 0x000020, "Wrong size on ItemIDsBlueprintLibrary_ToStackID");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToStackID, _id) == 0x000000, "Member 'ItemIDsBlueprintLibrary_ToStackID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDsBlueprintLibrary_ToStackID, ReturnValue) == 0x000010, "Member 'ItemIDsBlueprintLibrary_ToStackID::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_PatrolPoint.GetPatrolLocation
// 0x0018 (0x0018 - 0x0000)
struct CLB_PatrolPoint_GetPatrolLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_PatrolPoint_GetPatrolLocation) == 0x000008, "Wrong alignment on CLB_PatrolPoint_GetPatrolLocation");
static_assert(sizeof(CLB_PatrolPoint_GetPatrolLocation) == 0x000018, "Wrong size on CLB_PatrolPoint_GetPatrolLocation");
static_assert(offsetof(CLB_PatrolPoint_GetPatrolLocation, ReturnValue) == 0x000000, "Member 'CLB_PatrolPoint_GetPatrolLocation::ReturnValue' has a wrong offset!");

// Function Stigma.DepthSenseComponent.GetVisualizedTexture
// 0x0008 (0x0008 - 0x0000)
struct DepthSenseComponent_GetVisualizedTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DepthSenseComponent_GetVisualizedTexture) == 0x000008, "Wrong alignment on DepthSenseComponent_GetVisualizedTexture");
static_assert(sizeof(DepthSenseComponent_GetVisualizedTexture) == 0x000008, "Wrong size on DepthSenseComponent_GetVisualizedTexture");
static_assert(offsetof(DepthSenseComponent_GetVisualizedTexture, ReturnValue) == 0x000000, "Member 'DepthSenseComponent_GetVisualizedTexture::ReturnValue' has a wrong offset!");

// Function Stigma.UI_SeasonRewardPopup.SetValue
// 0x0038 (0x0038 - 0x0000)
struct UI_SeasonRewardPopup_SetValue final
{
public:
	struct FBC_SeasonReward                       _packet;                                           // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SeasonRewardPopup_SetValue) == 0x000008, "Wrong alignment on UI_SeasonRewardPopup_SetValue");
static_assert(sizeof(UI_SeasonRewardPopup_SetValue) == 0x000038, "Wrong size on UI_SeasonRewardPopup_SetValue");
static_assert(offsetof(UI_SeasonRewardPopup_SetValue, _packet) == 0x000000, "Member 'UI_SeasonRewardPopup_SetValue::_packet' has a wrong offset!");

// Function Stigma.ItemBoxBase.OnPickupItem
// 0x0008 (0x0008 - 0x0000)
struct ItemBoxBase_OnPickupItem final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxBase_OnPickupItem) == 0x000008, "Wrong alignment on ItemBoxBase_OnPickupItem");
static_assert(sizeof(ItemBoxBase_OnPickupItem) == 0x000008, "Wrong size on ItemBoxBase_OnPickupItem");
static_assert(offsetof(ItemBoxBase_OnPickupItem, _involver) == 0x000000, "Member 'ItemBoxBase_OnPickupItem::_involver' has a wrong offset!");

// Function Stigma.ItemBoxBase.RPC_All_OnPickupItem
// 0x0008 (0x0008 - 0x0000)
struct ItemBoxBase_RPC_All_OnPickupItem final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxBase_RPC_All_OnPickupItem) == 0x000008, "Wrong alignment on ItemBoxBase_RPC_All_OnPickupItem");
static_assert(sizeof(ItemBoxBase_RPC_All_OnPickupItem) == 0x000008, "Wrong size on ItemBoxBase_RPC_All_OnPickupItem");
static_assert(offsetof(ItemBoxBase_RPC_All_OnPickupItem, _involver) == 0x000000, "Member 'ItemBoxBase_RPC_All_OnPickupItem::_involver' has a wrong offset!");

// Function Stigma.ItemBoxBase.SetInteraction
// 0x0001 (0x0001 - 0x0000)
struct ItemBoxBase_SetInteraction final
{
public:
	bool                                          _is_interaction;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxBase_SetInteraction) == 0x000001, "Wrong alignment on ItemBoxBase_SetInteraction");
static_assert(sizeof(ItemBoxBase_SetInteraction) == 0x000001, "Wrong size on ItemBoxBase_SetInteraction");
static_assert(offsetof(ItemBoxBase_SetInteraction, _is_interaction) == 0x000000, "Member 'ItemBoxBase_SetInteraction::_is_interaction' has a wrong offset!");

// Function Stigma.ItemBoxBase.Setter_CanPickup
// 0x0001 (0x0001 - 0x0000)
struct ItemBoxBase_Setter_CanPickup final
{
public:
	bool                                          _can_pickup;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxBase_Setter_CanPickup) == 0x000001, "Wrong alignment on ItemBoxBase_Setter_CanPickup");
static_assert(sizeof(ItemBoxBase_Setter_CanPickup) == 0x000001, "Wrong size on ItemBoxBase_Setter_CanPickup");
static_assert(offsetof(ItemBoxBase_Setter_CanPickup, _can_pickup) == 0x000000, "Member 'ItemBoxBase_Setter_CanPickup::_can_pickup' has a wrong offset!");

// Function Stigma.ItemBoxBase.GetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct ItemBoxBase_GetDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBoxBase_GetDisplayText) == 0x000008, "Wrong alignment on ItemBoxBase_GetDisplayText");
static_assert(sizeof(ItemBoxBase_GetDisplayText) == 0x000018, "Wrong size on ItemBoxBase_GetDisplayText");
static_assert(offsetof(ItemBoxBase_GetDisplayText, ReturnValue) == 0x000000, "Member 'ItemBoxBase_GetDisplayText::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_PlayerController.OnAddNotifyMessage
// 0x0018 (0x0018 - 0x0000)
struct CLB_PlayerController_OnAddNotifyMessage final
{
public:
	class FString                                 _text;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _life_time;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F0[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CLB_PlayerController_OnAddNotifyMessage) == 0x000008, "Wrong alignment on CLB_PlayerController_OnAddNotifyMessage");
static_assert(sizeof(CLB_PlayerController_OnAddNotifyMessage) == 0x000018, "Wrong size on CLB_PlayerController_OnAddNotifyMessage");
static_assert(offsetof(CLB_PlayerController_OnAddNotifyMessage, _text) == 0x000000, "Member 'CLB_PlayerController_OnAddNotifyMessage::_text' has a wrong offset!");
static_assert(offsetof(CLB_PlayerController_OnAddNotifyMessage, _life_time) == 0x000010, "Member 'CLB_PlayerController_OnAddNotifyMessage::_life_time' has a wrong offset!");

// Function Stigma.CLB_PlayerController.OnChangeActiveDoor
// 0x0010 (0x0010 - 0x0000)
struct CLB_PlayerController_OnChangeActiveDoor final
{
public:
	class ADoorBase*                              _door;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CLB_PlayerController_OnChangeActiveDoor) == 0x000008, "Wrong alignment on CLB_PlayerController_OnChangeActiveDoor");
static_assert(sizeof(CLB_PlayerController_OnChangeActiveDoor) == 0x000010, "Wrong size on CLB_PlayerController_OnChangeActiveDoor");
static_assert(offsetof(CLB_PlayerController_OnChangeActiveDoor, _door) == 0x000000, "Member 'CLB_PlayerController_OnChangeActiveDoor::_door' has a wrong offset!");
static_assert(offsetof(CLB_PlayerController_OnChangeActiveDoor, ReturnValue) == 0x000008, "Member 'CLB_PlayerController_OnChangeActiveDoor::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_PlayerController.OnChangePhase
// 0x0002 (0x0002 - 0x0000)
struct CLB_PlayerController_OnChangePhase final
{
public:
	ECLBModePhase                                 _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_PlayerController_OnChangePhase) == 0x000001, "Wrong alignment on CLB_PlayerController_OnChangePhase");
static_assert(sizeof(CLB_PlayerController_OnChangePhase) == 0x000002, "Wrong size on CLB_PlayerController_OnChangePhase");
static_assert(offsetof(CLB_PlayerController_OnChangePhase, _phase) == 0x000000, "Member 'CLB_PlayerController_OnChangePhase::_phase' has a wrong offset!");
static_assert(offsetof(CLB_PlayerController_OnChangePhase, ReturnValue) == 0x000001, "Member 'CLB_PlayerController_OnChangePhase::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_PlayerController.RPC_CLIENT_AddNotifyMessage
// 0x0018 (0x0018 - 0x0000)
struct CLB_PlayerController_RPC_CLIENT_AddNotifyMessage final
{
public:
	class FString                                 _text;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _life_time;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F2[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CLB_PlayerController_RPC_CLIENT_AddNotifyMessage) == 0x000008, "Wrong alignment on CLB_PlayerController_RPC_CLIENT_AddNotifyMessage");
static_assert(sizeof(CLB_PlayerController_RPC_CLIENT_AddNotifyMessage) == 0x000018, "Wrong size on CLB_PlayerController_RPC_CLIENT_AddNotifyMessage");
static_assert(offsetof(CLB_PlayerController_RPC_CLIENT_AddNotifyMessage, _text) == 0x000000, "Member 'CLB_PlayerController_RPC_CLIENT_AddNotifyMessage::_text' has a wrong offset!");
static_assert(offsetof(CLB_PlayerController_RPC_CLIENT_AddNotifyMessage, _life_time) == 0x000010, "Member 'CLB_PlayerController_RPC_CLIENT_AddNotifyMessage::_life_time' has a wrong offset!");

// Function Stigma.CLB_PlayerState.SetRemainLife
// 0x0004 (0x0004 - 0x0000)
struct CLB_PlayerState_SetRemainLife final
{
public:
	int32                                         _Life;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_PlayerState_SetRemainLife) == 0x000004, "Wrong alignment on CLB_PlayerState_SetRemainLife");
static_assert(sizeof(CLB_PlayerState_SetRemainLife) == 0x000004, "Wrong size on CLB_PlayerState_SetRemainLife");
static_assert(offsetof(CLB_PlayerState_SetRemainLife, _Life) == 0x000000, "Member 'CLB_PlayerState_SetRemainLife::_Life' has a wrong offset!");

// Function Stigma.CLB_PlayerState.GetRemainLife
// 0x0004 (0x0004 - 0x0000)
struct CLB_PlayerState_GetRemainLife final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_PlayerState_GetRemainLife) == 0x000004, "Wrong alignment on CLB_PlayerState_GetRemainLife");
static_assert(sizeof(CLB_PlayerState_GetRemainLife) == 0x000004, "Wrong size on CLB_PlayerState_GetRemainLife");
static_assert(offsetof(CLB_PlayerState_GetRemainLife, ReturnValue) == 0x000000, "Member 'CLB_PlayerState_GetRemainLife::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_PlayerState.GetTotalPoints
// 0x0004 (0x0004 - 0x0000)
struct CLB_PlayerState_GetTotalPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_PlayerState_GetTotalPoints) == 0x000004, "Wrong alignment on CLB_PlayerState_GetTotalPoints");
static_assert(sizeof(CLB_PlayerState_GetTotalPoints) == 0x000004, "Wrong size on CLB_PlayerState_GetTotalPoints");
static_assert(offsetof(CLB_PlayerState_GetTotalPoints, ReturnValue) == 0x000000, "Member 'CLB_PlayerState_GetTotalPoints::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_SectorManager.GetPlayerStart
// 0x0008 (0x0008 - 0x0000)
struct CLB_SectorManager_GetPlayerStart final
{
public:
	class APlayerStart*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_SectorManager_GetPlayerStart) == 0x000008, "Wrong alignment on CLB_SectorManager_GetPlayerStart");
static_assert(sizeof(CLB_SectorManager_GetPlayerStart) == 0x000008, "Wrong size on CLB_SectorManager_GetPlayerStart");
static_assert(offsetof(CLB_SectorManager_GetPlayerStart, ReturnValue) == 0x000000, "Member 'CLB_SectorManager_GetPlayerStart::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_SectorManager.OnFinishSector
// 0x0008 (0x0008 - 0x0000)
struct CLB_SectorManager_OnFinishSector final
{
public:
	class ACLB_Sector*                            Sector;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_SectorManager_OnFinishSector) == 0x000008, "Wrong alignment on CLB_SectorManager_OnFinishSector");
static_assert(sizeof(CLB_SectorManager_OnFinishSector) == 0x000008, "Wrong size on CLB_SectorManager_OnFinishSector");
static_assert(offsetof(CLB_SectorManager_OnFinishSector, Sector) == 0x000000, "Member 'CLB_SectorManager_OnFinishSector::Sector' has a wrong offset!");

// Function Stigma.UI_RecruitResultPopup.CreateGun
// 0x0008 (0x0008 - 0x0000)
struct UI_RecruitResultPopup_CreateGun final
{
public:
	class UGunObject*                             Gun_obj;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitResultPopup_CreateGun) == 0x000008, "Wrong alignment on UI_RecruitResultPopup_CreateGun");
static_assert(sizeof(UI_RecruitResultPopup_CreateGun) == 0x000008, "Wrong size on UI_RecruitResultPopup_CreateGun");
static_assert(offsetof(UI_RecruitResultPopup_CreateGun, Gun_obj) == 0x000000, "Member 'UI_RecruitResultPopup_CreateGun::Gun_obj' has a wrong offset!");

// Function Stigma.UI_RecruitResultPopup.GetGun
// 0x0008 (0x0008 - 0x0000)
struct UI_RecruitResultPopup_GetGun final
{
public:
	class AGunBase*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitResultPopup_GetGun) == 0x000008, "Wrong alignment on UI_RecruitResultPopup_GetGun");
static_assert(sizeof(UI_RecruitResultPopup_GetGun) == 0x000008, "Wrong size on UI_RecruitResultPopup_GetGun");
static_assert(offsetof(UI_RecruitResultPopup_GetGun, ReturnValue) == 0x000000, "Member 'UI_RecruitResultPopup_GetGun::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecruitResultPopup.OnClickResultConfirm
// 0x0010 (0x0010 - 0x0000)
struct UI_RecruitResultPopup_OnClickResultConfirm final
{
public:
	class UAnimatableWidget*                      _btn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RecruitResultPopup_OnClickResultConfirm) == 0x000008, "Wrong alignment on UI_RecruitResultPopup_OnClickResultConfirm");
static_assert(sizeof(UI_RecruitResultPopup_OnClickResultConfirm) == 0x000010, "Wrong size on UI_RecruitResultPopup_OnClickResultConfirm");
static_assert(offsetof(UI_RecruitResultPopup_OnClickResultConfirm, _btn) == 0x000000, "Member 'UI_RecruitResultPopup_OnClickResultConfirm::_btn' has a wrong offset!");
static_assert(offsetof(UI_RecruitResultPopup_OnClickResultConfirm, _selected) == 0x000008, "Member 'UI_RecruitResultPopup_OnClickResultConfirm::_selected' has a wrong offset!");

// Function Stigma.UI_RecruitResultPopup.OnRewardWidgetShowEnd
// 0x0008 (0x0008 - 0x0000)
struct UI_RecruitResultPopup_OnRewardWidgetShowEnd final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitResultPopup_OnRewardWidgetShowEnd) == 0x000008, "Wrong alignment on UI_RecruitResultPopup_OnRewardWidgetShowEnd");
static_assert(sizeof(UI_RecruitResultPopup_OnRewardWidgetShowEnd) == 0x000008, "Wrong size on UI_RecruitResultPopup_OnRewardWidgetShowEnd");
static_assert(offsetof(UI_RecruitResultPopup_OnRewardWidgetShowEnd, _widget) == 0x000000, "Member 'UI_RecruitResultPopup_OnRewardWidgetShowEnd::_widget' has a wrong offset!");

// Function Stigma.BlueprintCollaborationSecurmentLibrary.GetSecurmentZoneName
// 0x0018 (0x0018 - 0x0000)
struct BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName final
{
public:
	int32                                         _score;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName) == 0x000008, "Wrong alignment on BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName");
static_assert(sizeof(BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName) == 0x000018, "Wrong size on BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName");
static_assert(offsetof(BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName, _score) == 0x000000, "Member 'BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName::_score' has a wrong offset!");
static_assert(offsetof(BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName, ReturnValue) == 0x000008, "Member 'BlueprintCollaborationSecurmentLibrary_GetSecurmentZoneName::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_SecurementZone.GetOverlappedPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct CLB_SecurementZone_GetOverlappedPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_SecurementZone_GetOverlappedPlayerCount) == 0x000004, "Wrong alignment on CLB_SecurementZone_GetOverlappedPlayerCount");
static_assert(sizeof(CLB_SecurementZone_GetOverlappedPlayerCount) == 0x000004, "Wrong size on CLB_SecurementZone_GetOverlappedPlayerCount");
static_assert(offsetof(CLB_SecurementZone_GetOverlappedPlayerCount, ReturnValue) == 0x000000, "Member 'CLB_SecurementZone_GetOverlappedPlayerCount::ReturnValue' has a wrong offset!");

// Function Stigma.CLB_SecurementZone.Setter_IsActivated
// 0x0001 (0x0001 - 0x0000)
struct CLB_SecurementZone_Setter_IsActivated final
{
public:
	bool                                          _is_activated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CLB_SecurementZone_Setter_IsActivated) == 0x000001, "Wrong alignment on CLB_SecurementZone_Setter_IsActivated");
static_assert(sizeof(CLB_SecurementZone_Setter_IsActivated) == 0x000001, "Wrong size on CLB_SecurementZone_Setter_IsActivated");
static_assert(offsetof(CLB_SecurementZone_Setter_IsActivated, _is_activated) == 0x000000, "Member 'CLB_SecurementZone_Setter_IsActivated::_is_activated' has a wrong offset!");

// Function Stigma.LocalRegistry.GetBool
// 0x0018 (0x0018 - 0x0000)
struct LocalRegistry_GetBool final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _default;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2202[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalRegistry_GetBool) == 0x000008, "Wrong alignment on LocalRegistry_GetBool");
static_assert(sizeof(LocalRegistry_GetBool) == 0x000018, "Wrong size on LocalRegistry_GetBool");
static_assert(offsetof(LocalRegistry_GetBool, _Key) == 0x000000, "Member 'LocalRegistry_GetBool::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetBool, _default) == 0x000010, "Member 'LocalRegistry_GetBool::_default' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetBool, ReturnValue) == 0x000011, "Member 'LocalRegistry_GetBool::ReturnValue' has a wrong offset!");

// Function Stigma.LocalRegistry.GetFloat
// 0x0018 (0x0018 - 0x0000)
struct LocalRegistry_GetFloat final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _default;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalRegistry_GetFloat) == 0x000008, "Wrong alignment on LocalRegistry_GetFloat");
static_assert(sizeof(LocalRegistry_GetFloat) == 0x000018, "Wrong size on LocalRegistry_GetFloat");
static_assert(offsetof(LocalRegistry_GetFloat, _Key) == 0x000000, "Member 'LocalRegistry_GetFloat::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetFloat, _default) == 0x000010, "Member 'LocalRegistry_GetFloat::_default' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetFloat, ReturnValue) == 0x000014, "Member 'LocalRegistry_GetFloat::ReturnValue' has a wrong offset!");

// Function Stigma.LocalRegistry.GetInt32
// 0x0018 (0x0018 - 0x0000)
struct LocalRegistry_GetInt32 final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _default;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalRegistry_GetInt32) == 0x000008, "Wrong alignment on LocalRegistry_GetInt32");
static_assert(sizeof(LocalRegistry_GetInt32) == 0x000018, "Wrong size on LocalRegistry_GetInt32");
static_assert(offsetof(LocalRegistry_GetInt32, _Key) == 0x000000, "Member 'LocalRegistry_GetInt32::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetInt32, _default) == 0x000010, "Member 'LocalRegistry_GetInt32::_default' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetInt32, ReturnValue) == 0x000014, "Member 'LocalRegistry_GetInt32::ReturnValue' has a wrong offset!");

// Function Stigma.LocalRegistry.GetString
// 0x0030 (0x0030 - 0x0000)
struct LocalRegistry_GetString final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _default;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalRegistry_GetString) == 0x000008, "Wrong alignment on LocalRegistry_GetString");
static_assert(sizeof(LocalRegistry_GetString) == 0x000030, "Wrong size on LocalRegistry_GetString");
static_assert(offsetof(LocalRegistry_GetString, _Key) == 0x000000, "Member 'LocalRegistry_GetString::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetString, _default) == 0x000010, "Member 'LocalRegistry_GetString::_default' has a wrong offset!");
static_assert(offsetof(LocalRegistry_GetString, ReturnValue) == 0x000020, "Member 'LocalRegistry_GetString::ReturnValue' has a wrong offset!");

// Function Stigma.LocalRegistry.SetBool
// 0x0018 (0x0018 - 0x0000)
struct LocalRegistry_SetBool final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _value;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2203[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalRegistry_SetBool) == 0x000008, "Wrong alignment on LocalRegistry_SetBool");
static_assert(sizeof(LocalRegistry_SetBool) == 0x000018, "Wrong size on LocalRegistry_SetBool");
static_assert(offsetof(LocalRegistry_SetBool, _Key) == 0x000000, "Member 'LocalRegistry_SetBool::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_SetBool, _value) == 0x000010, "Member 'LocalRegistry_SetBool::_value' has a wrong offset!");

// Function Stigma.LocalRegistry.SetFloat
// 0x0018 (0x0018 - 0x0000)
struct LocalRegistry_SetFloat final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _value;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2204[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalRegistry_SetFloat) == 0x000008, "Wrong alignment on LocalRegistry_SetFloat");
static_assert(sizeof(LocalRegistry_SetFloat) == 0x000018, "Wrong size on LocalRegistry_SetFloat");
static_assert(offsetof(LocalRegistry_SetFloat, _Key) == 0x000000, "Member 'LocalRegistry_SetFloat::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_SetFloat, _value) == 0x000010, "Member 'LocalRegistry_SetFloat::_value' has a wrong offset!");

// Function Stigma.LocalRegistry.SetInt32
// 0x0018 (0x0018 - 0x0000)
struct LocalRegistry_SetInt32 final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2205[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LocalRegistry_SetInt32) == 0x000008, "Wrong alignment on LocalRegistry_SetInt32");
static_assert(sizeof(LocalRegistry_SetInt32) == 0x000018, "Wrong size on LocalRegistry_SetInt32");
static_assert(offsetof(LocalRegistry_SetInt32, _Key) == 0x000000, "Member 'LocalRegistry_SetInt32::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_SetInt32, _value) == 0x000010, "Member 'LocalRegistry_SetInt32::_value' has a wrong offset!");

// Function Stigma.LocalRegistry.SetString
// 0x0020 (0x0020 - 0x0000)
struct LocalRegistry_SetString final
{
public:
	class FString                                 _Key;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _value;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalRegistry_SetString) == 0x000008, "Wrong alignment on LocalRegistry_SetString");
static_assert(sizeof(LocalRegistry_SetString) == 0x000020, "Wrong size on LocalRegistry_SetString");
static_assert(offsetof(LocalRegistry_SetString, _Key) == 0x000000, "Member 'LocalRegistry_SetString::_Key' has a wrong offset!");
static_assert(offsetof(LocalRegistry_SetString, _value) == 0x000010, "Member 'LocalRegistry_SetString::_value' has a wrong offset!");

// Function Stigma.CoinBase.OnPickup
// 0x0008 (0x0008 - 0x0000)
struct CoinBase_OnPickup final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBase_OnPickup) == 0x000008, "Wrong alignment on CoinBase_OnPickup");
static_assert(sizeof(CoinBase_OnPickup) == 0x000008, "Wrong size on CoinBase_OnPickup");
static_assert(offsetof(CoinBase_OnPickup, _involver) == 0x000000, "Member 'CoinBase_OnPickup::_involver' has a wrong offset!");

// Function Stigma.CoinBase.RPC_All_OnPickupItem
// 0x0008 (0x0008 - 0x0000)
struct CoinBase_RPC_All_OnPickupItem final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoinBase_RPC_All_OnPickupItem) == 0x000008, "Wrong alignment on CoinBase_RPC_All_OnPickupItem");
static_assert(sizeof(CoinBase_RPC_All_OnPickupItem) == 0x000008, "Wrong size on CoinBase_RPC_All_OnPickupItem");
static_assert(offsetof(CoinBase_RPC_All_OnPickupItem, _involver) == 0x000000, "Member 'CoinBase_RPC_All_OnPickupItem::_involver' has a wrong offset!");

// Function Stigma.LemmingsGameZone.OnBeginOverlap_KillZone
// 0x0108 (0x0108 - 0x0000)
struct LemmingsGameZone_OnBeginOverlap_KillZone final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_OnBeginOverlap_KillZone) == 0x000008, "Wrong alignment on LemmingsGameZone_OnBeginOverlap_KillZone");
static_assert(sizeof(LemmingsGameZone_OnBeginOverlap_KillZone) == 0x000108, "Wrong size on LemmingsGameZone_OnBeginOverlap_KillZone");
static_assert(offsetof(LemmingsGameZone_OnBeginOverlap_KillZone, OverlappedComponent) == 0x000000, "Member 'LemmingsGameZone_OnBeginOverlap_KillZone::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_OnBeginOverlap_KillZone, OtherActor) == 0x000008, "Member 'LemmingsGameZone_OnBeginOverlap_KillZone::OtherActor' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_OnBeginOverlap_KillZone, OtherComp) == 0x000010, "Member 'LemmingsGameZone_OnBeginOverlap_KillZone::OtherComp' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_OnBeginOverlap_KillZone, OtherBodyIndex) == 0x000018, "Member 'LemmingsGameZone_OnBeginOverlap_KillZone::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_OnBeginOverlap_KillZone, bFromSweep) == 0x00001C, "Member 'LemmingsGameZone_OnBeginOverlap_KillZone::bFromSweep' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_OnBeginOverlap_KillZone, SweepResult) == 0x000020, "Member 'LemmingsGameZone_OnBeginOverlap_KillZone::SweepResult' has a wrong offset!");

// Function Stigma.LemmingsGameZone.OnChange_GameState
// 0x0020 (0x0020 - 0x0000)
struct LemmingsGameZone_OnChange_GameState final
{
public:
	struct FLemmingsGameState                     _state;                                            // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220F[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LemmingsGameZone_OnChange_GameState) == 0x000004, "Wrong alignment on LemmingsGameZone_OnChange_GameState");
static_assert(sizeof(LemmingsGameZone_OnChange_GameState) == 0x000020, "Wrong size on LemmingsGameZone_OnChange_GameState");
static_assert(offsetof(LemmingsGameZone_OnChange_GameState, _state) == 0x000000, "Member 'LemmingsGameZone_OnChange_GameState::_state' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_OnChange_GameState, ReturnValue) == 0x00001C, "Member 'LemmingsGameZone_OnChange_GameState::ReturnValue' has a wrong offset!");

// Function Stigma.LemmingsGameZone.RPC_ALL_LemmingDied
// 0x0010 (0x0010 - 0x0000)
struct LemmingsGameZone_RPC_ALL_LemmingDied final
{
public:
	class ANPC_Lemming*                           _lemming;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_killed_by_player;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2210[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LemmingsGameZone_RPC_ALL_LemmingDied) == 0x000008, "Wrong alignment on LemmingsGameZone_RPC_ALL_LemmingDied");
static_assert(sizeof(LemmingsGameZone_RPC_ALL_LemmingDied) == 0x000010, "Wrong size on LemmingsGameZone_RPC_ALL_LemmingDied");
static_assert(offsetof(LemmingsGameZone_RPC_ALL_LemmingDied, _lemming) == 0x000000, "Member 'LemmingsGameZone_RPC_ALL_LemmingDied::_lemming' has a wrong offset!");
static_assert(offsetof(LemmingsGameZone_RPC_ALL_LemmingDied, _is_killed_by_player) == 0x000008, "Member 'LemmingsGameZone_RPC_ALL_LemmingDied::_is_killed_by_player' has a wrong offset!");

// Function Stigma.LemmingsGameZone.Setter_GameState
// 0x001C (0x001C - 0x0000)
struct LemmingsGameZone_Setter_GameState final
{
public:
	struct FLemmingsGameState                     _new_state;                                        // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_Setter_GameState) == 0x000004, "Wrong alignment on LemmingsGameZone_Setter_GameState");
static_assert(sizeof(LemmingsGameZone_Setter_GameState) == 0x00001C, "Wrong size on LemmingsGameZone_Setter_GameState");
static_assert(offsetof(LemmingsGameZone_Setter_GameState, _new_state) == 0x000000, "Member 'LemmingsGameZone_Setter_GameState::_new_state' has a wrong offset!");

// Function Stigma.LemmingsGameZone.StartGame
// 0x0008 (0x0008 - 0x0000)
struct LemmingsGameZone_StartGame final
{
public:
	class ACharaBase*                             _user;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_StartGame) == 0x000008, "Wrong alignment on LemmingsGameZone_StartGame");
static_assert(sizeof(LemmingsGameZone_StartGame) == 0x000008, "Wrong size on LemmingsGameZone_StartGame");
static_assert(offsetof(LemmingsGameZone_StartGame, _user) == 0x000000, "Member 'LemmingsGameZone_StartGame::_user' has a wrong offset!");

// Function Stigma.LemmingsGameZone.GetCurrentWave
// 0x0004 (0x0004 - 0x0000)
struct LemmingsGameZone_GetCurrentWave final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_GetCurrentWave) == 0x000004, "Wrong alignment on LemmingsGameZone_GetCurrentWave");
static_assert(sizeof(LemmingsGameZone_GetCurrentWave) == 0x000004, "Wrong size on LemmingsGameZone_GetCurrentWave");
static_assert(offsetof(LemmingsGameZone_GetCurrentWave, ReturnValue) == 0x000000, "Member 'LemmingsGameZone_GetCurrentWave::ReturnValue' has a wrong offset!");

// Function Stigma.LemmingsGameZone.GetPoint
// 0x0004 (0x0004 - 0x0000)
struct LemmingsGameZone_GetPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_GetPoint) == 0x000004, "Wrong alignment on LemmingsGameZone_GetPoint");
static_assert(sizeof(LemmingsGameZone_GetPoint) == 0x000004, "Wrong size on LemmingsGameZone_GetPoint");
static_assert(offsetof(LemmingsGameZone_GetPoint, ReturnValue) == 0x000000, "Member 'LemmingsGameZone_GetPoint::ReturnValue' has a wrong offset!");

// Function Stigma.LemmingsGameZone.GetWaveCount
// 0x0004 (0x0004 - 0x0000)
struct LemmingsGameZone_GetWaveCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_GetWaveCount) == 0x000004, "Wrong alignment on LemmingsGameZone_GetWaveCount");
static_assert(sizeof(LemmingsGameZone_GetWaveCount) == 0x000004, "Wrong size on LemmingsGameZone_GetWaveCount");
static_assert(offsetof(LemmingsGameZone_GetWaveCount, ReturnValue) == 0x000000, "Member 'LemmingsGameZone_GetWaveCount::ReturnValue' has a wrong offset!");

// Function Stigma.LemmingsGameZone.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct LemmingsGameZone_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LemmingsGameZone_IsPlaying) == 0x000001, "Wrong alignment on LemmingsGameZone_IsPlaying");
static_assert(sizeof(LemmingsGameZone_IsPlaying) == 0x000001, "Wrong size on LemmingsGameZone_IsPlaying");
static_assert(offsetof(LemmingsGameZone_IsPlaying, ReturnValue) == 0x000000, "Member 'LemmingsGameZone_IsPlaying::ReturnValue' has a wrong offset!");

// Function Stigma.VoiceSubsystem.OnFinishedVoiceInfo
// 0x0058 (0x0058 - 0x0000)
struct VoiceSubsystem_OnFinishedVoiceInfo final
{
public:
	struct FToPlayVoiceInfo                       _finished_voice_info;                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoiceSubsystem_OnFinishedVoiceInfo) == 0x000008, "Wrong alignment on VoiceSubsystem_OnFinishedVoiceInfo");
static_assert(sizeof(VoiceSubsystem_OnFinishedVoiceInfo) == 0x000058, "Wrong size on VoiceSubsystem_OnFinishedVoiceInfo");
static_assert(offsetof(VoiceSubsystem_OnFinishedVoiceInfo, _finished_voice_info) == 0x000000, "Member 'VoiceSubsystem_OnFinishedVoiceInfo::_finished_voice_info' has a wrong offset!");

// Function Stigma.VoiceSubsystem.SetVoiceIgnored
// 0x0001 (0x0001 - 0x0000)
struct VoiceSubsystem_SetVoiceIgnored final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoiceSubsystem_SetVoiceIgnored) == 0x000001, "Wrong alignment on VoiceSubsystem_SetVoiceIgnored");
static_assert(sizeof(VoiceSubsystem_SetVoiceIgnored) == 0x000001, "Wrong size on VoiceSubsystem_SetVoiceIgnored");
static_assert(offsetof(VoiceSubsystem_SetVoiceIgnored, _value) == 0x000000, "Member 'VoiceSubsystem_SetVoiceIgnored::_value' has a wrong offset!");

// Function Stigma.Prop_Store.CLIENT_RequestPurchase
// 0x0010 (0x0010 - 0x0000)
struct Prop_Store_CLIENT_RequestPurchase final
{
public:
	int32                                         _item_index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2214[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             _involver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Prop_Store_CLIENT_RequestPurchase) == 0x000008, "Wrong alignment on Prop_Store_CLIENT_RequestPurchase");
static_assert(sizeof(Prop_Store_CLIENT_RequestPurchase) == 0x000010, "Wrong size on Prop_Store_CLIENT_RequestPurchase");
static_assert(offsetof(Prop_Store_CLIENT_RequestPurchase, _item_index) == 0x000000, "Member 'Prop_Store_CLIENT_RequestPurchase::_item_index' has a wrong offset!");
static_assert(offsetof(Prop_Store_CLIENT_RequestPurchase, _involver) == 0x000008, "Member 'Prop_Store_CLIENT_RequestPurchase::_involver' has a wrong offset!");

// Function Stigma.Prop_Store.RPC_ALL_SuccessPurchase
// 0x0010 (0x0010 - 0x0000)
struct Prop_Store_RPC_ALL_SuccessPurchase final
{
public:
	int32                                         _item_index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2215[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             _involver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Prop_Store_RPC_ALL_SuccessPurchase) == 0x000008, "Wrong alignment on Prop_Store_RPC_ALL_SuccessPurchase");
static_assert(sizeof(Prop_Store_RPC_ALL_SuccessPurchase) == 0x000010, "Wrong size on Prop_Store_RPC_ALL_SuccessPurchase");
static_assert(offsetof(Prop_Store_RPC_ALL_SuccessPurchase, _item_index) == 0x000000, "Member 'Prop_Store_RPC_ALL_SuccessPurchase::_item_index' has a wrong offset!");
static_assert(offsetof(Prop_Store_RPC_ALL_SuccessPurchase, _involver) == 0x000008, "Member 'Prop_Store_RPC_ALL_SuccessPurchase::_involver' has a wrong offset!");

// Function Stigma.Prop_Store.GetItem
// 0x0018 (0x0018 - 0x0000)
struct Prop_Store_GetItem final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2216[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             _involver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProp_StoreItem*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Prop_Store_GetItem) == 0x000008, "Wrong alignment on Prop_Store_GetItem");
static_assert(sizeof(Prop_Store_GetItem) == 0x000018, "Wrong size on Prop_Store_GetItem");
static_assert(offsetof(Prop_Store_GetItem, _index) == 0x000000, "Member 'Prop_Store_GetItem::_index' has a wrong offset!");
static_assert(offsetof(Prop_Store_GetItem, _involver) == 0x000008, "Member 'Prop_Store_GetItem::_involver' has a wrong offset!");
static_assert(offsetof(Prop_Store_GetItem, ReturnValue) == 0x000010, "Member 'Prop_Store_GetItem::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_PointUI.Tutorial_PointUI
// 0x0038 (0x0038 - 0x0000)
struct UIGuide_PointUI_Tutorial_PointUI final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _id_to_point;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   _guide_key;                                        // 0x0010(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _guide_input;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2218[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _wait_time;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_PointUI*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_PointUI_Tutorial_PointUI) == 0x000008, "Wrong alignment on UIGuide_PointUI_Tutorial_PointUI");
static_assert(sizeof(UIGuide_PointUI_Tutorial_PointUI) == 0x000038, "Wrong size on UIGuide_PointUI_Tutorial_PointUI");
static_assert(offsetof(UIGuide_PointUI_Tutorial_PointUI, _tutorial) == 0x000000, "Member 'UIGuide_PointUI_Tutorial_PointUI::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_PointUI_Tutorial_PointUI, _id_to_point) == 0x000008, "Member 'UIGuide_PointUI_Tutorial_PointUI::_id_to_point' has a wrong offset!");
static_assert(offsetof(UIGuide_PointUI_Tutorial_PointUI, _guide_key) == 0x000010, "Member 'UIGuide_PointUI_Tutorial_PointUI::_guide_key' has a wrong offset!");
static_assert(offsetof(UIGuide_PointUI_Tutorial_PointUI, _guide_input) == 0x000028, "Member 'UIGuide_PointUI_Tutorial_PointUI::_guide_input' has a wrong offset!");
static_assert(offsetof(UIGuide_PointUI_Tutorial_PointUI, _wait_time) == 0x00002C, "Member 'UIGuide_PointUI_Tutorial_PointUI::_wait_time' has a wrong offset!");
static_assert(offsetof(UIGuide_PointUI_Tutorial_PointUI, ReturnValue) == 0x000030, "Member 'UIGuide_PointUI_Tutorial_PointUI::ReturnValue' has a wrong offset!");

// Function Stigma.CollaborationModeStore.SERVER_Internal_Set_Interactable_Property
// 0x0001 (0x0001 - 0x0000)
struct CollaborationModeStore_SERVER_Internal_Set_Interactable_Property final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollaborationModeStore_SERVER_Internal_Set_Interactable_Property) == 0x000001, "Wrong alignment on CollaborationModeStore_SERVER_Internal_Set_Interactable_Property");
static_assert(sizeof(CollaborationModeStore_SERVER_Internal_Set_Interactable_Property) == 0x000001, "Wrong size on CollaborationModeStore_SERVER_Internal_Set_Interactable_Property");
static_assert(offsetof(CollaborationModeStore_SERVER_Internal_Set_Interactable_Property, _value) == 0x000000, "Member 'CollaborationModeStore_SERVER_Internal_Set_Interactable_Property::_value' has a wrong offset!");

// Function Stigma.CollaborationModeStore.Setter_IsIndicateable
// 0x0001 (0x0001 - 0x0000)
struct CollaborationModeStore_Setter_IsIndicateable final
{
public:
	bool                                          _is_indicateable;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollaborationModeStore_Setter_IsIndicateable) == 0x000001, "Wrong alignment on CollaborationModeStore_Setter_IsIndicateable");
static_assert(sizeof(CollaborationModeStore_Setter_IsIndicateable) == 0x000001, "Wrong size on CollaborationModeStore_Setter_IsIndicateable");
static_assert(offsetof(CollaborationModeStore_Setter_IsIndicateable, _is_indicateable) == 0x000000, "Member 'CollaborationModeStore_Setter_IsIndicateable::_is_indicateable' has a wrong offset!");

// Function Stigma.CollaborationModeStore.Setter_IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct CollaborationModeStore_Setter_IsInteractable final
{
public:
	bool                                          _is_interactable;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollaborationModeStore_Setter_IsInteractable) == 0x000001, "Wrong alignment on CollaborationModeStore_Setter_IsInteractable");
static_assert(sizeof(CollaborationModeStore_Setter_IsInteractable) == 0x000001, "Wrong size on CollaborationModeStore_Setter_IsInteractable");
static_assert(offsetof(CollaborationModeStore_Setter_IsInteractable, _is_interactable) == 0x000000, "Member 'CollaborationModeStore_Setter_IsInteractable::_is_interactable' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetCompetitionState
// 0x0001 (0x0001 - 0x0000)
struct CompetitionBriefPlayer_GetCompetitionState final
{
public:
	ECompetitionState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetCompetitionState) == 0x000001, "Wrong alignment on CompetitionBriefPlayer_GetCompetitionState");
static_assert(sizeof(CompetitionBriefPlayer_GetCompetitionState) == 0x000001, "Wrong size on CompetitionBriefPlayer_GetCompetitionState");
static_assert(offsetof(CompetitionBriefPlayer_GetCompetitionState, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetCompetitionState::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetBreakEndAt
// 0x0008 (0x0008 - 0x0000)
struct CompetitionBriefPlayer_GetBreakEndAt final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetBreakEndAt) == 0x000008, "Wrong alignment on CompetitionBriefPlayer_GetBreakEndAt");
static_assert(sizeof(CompetitionBriefPlayer_GetBreakEndAt) == 0x000008, "Wrong size on CompetitionBriefPlayer_GetBreakEndAt");
static_assert(offsetof(CompetitionBriefPlayer_GetBreakEndAt, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetBreakEndAt::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetCompetitionType
// 0x0001 (0x0001 - 0x0000)
struct CompetitionBriefPlayer_GetCompetitionType final
{
public:
	ECompetitionType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetCompetitionType) == 0x000001, "Wrong alignment on CompetitionBriefPlayer_GetCompetitionType");
static_assert(sizeof(CompetitionBriefPlayer_GetCompetitionType) == 0x000001, "Wrong size on CompetitionBriefPlayer_GetCompetitionType");
static_assert(offsetof(CompetitionBriefPlayer_GetCompetitionType, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetCompetitionType::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetEndAt
// 0x0008 (0x0008 - 0x0000)
struct CompetitionBriefPlayer_GetEndAt final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetEndAt) == 0x000008, "Wrong alignment on CompetitionBriefPlayer_GetEndAt");
static_assert(sizeof(CompetitionBriefPlayer_GetEndAt) == 0x000008, "Wrong size on CompetitionBriefPlayer_GetEndAt");
static_assert(offsetof(CompetitionBriefPlayer_GetEndAt, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetEndAt::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct CompetitionBriefPlayer_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetNickname) == 0x000008, "Wrong alignment on CompetitionBriefPlayer_GetNickname");
static_assert(sizeof(CompetitionBriefPlayer_GetNickname) == 0x000018, "Wrong size on CompetitionBriefPlayer_GetNickname");
static_assert(offsetof(CompetitionBriefPlayer_GetNickname, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetPlayingAt
// 0x0001 (0x0001 - 0x0000)
struct CompetitionBriefPlayer_GetPlayingAt final
{
public:
	EUserPlayingAt                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetPlayingAt) == 0x000001, "Wrong alignment on CompetitionBriefPlayer_GetPlayingAt");
static_assert(sizeof(CompetitionBriefPlayer_GetPlayingAt) == 0x000001, "Wrong size on CompetitionBriefPlayer_GetPlayingAt");
static_assert(offsetof(CompetitionBriefPlayer_GetPlayingAt, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetPlayingAt::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetRank
// 0x0004 (0x0004 - 0x0000)
struct CompetitionBriefPlayer_GetRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetRank) == 0x000004, "Wrong alignment on CompetitionBriefPlayer_GetRank");
static_assert(sizeof(CompetitionBriefPlayer_GetRank) == 0x000004, "Wrong size on CompetitionBriefPlayer_GetRank");
static_assert(offsetof(CompetitionBriefPlayer_GetRank, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetRank::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetRankPoint
// 0x0004 (0x0004 - 0x0000)
struct CompetitionBriefPlayer_GetRankPoint final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetRankPoint) == 0x000004, "Wrong alignment on CompetitionBriefPlayer_GetRankPoint");
static_assert(sizeof(CompetitionBriefPlayer_GetRankPoint) == 0x000004, "Wrong size on CompetitionBriefPlayer_GetRankPoint");
static_assert(offsetof(CompetitionBriefPlayer_GetRankPoint, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetRankPoint::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.GetUserID
// 0x0008 (0x0008 - 0x0000)
struct CompetitionBriefPlayer_GetUserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_GetUserID) == 0x000008, "Wrong alignment on CompetitionBriefPlayer_GetUserID");
static_assert(sizeof(CompetitionBriefPlayer_GetUserID) == 0x000008, "Wrong size on CompetitionBriefPlayer_GetUserID");
static_assert(offsetof(CompetitionBriefPlayer_GetUserID, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.IsInBattle
// 0x0001 (0x0001 - 0x0000)
struct CompetitionBriefPlayer_IsInBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_IsInBattle) == 0x000001, "Wrong alignment on CompetitionBriefPlayer_IsInBattle");
static_assert(sizeof(CompetitionBriefPlayer_IsInBattle) == 0x000001, "Wrong size on CompetitionBriefPlayer_IsInBattle");
static_assert(offsetof(CompetitionBriefPlayer_IsInBattle, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_IsInBattle::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefPlayer.IsMyBrief
// 0x0001 (0x0001 - 0x0000)
struct CompetitionBriefPlayer_IsMyBrief final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefPlayer_IsMyBrief) == 0x000001, "Wrong alignment on CompetitionBriefPlayer_IsMyBrief");
static_assert(sizeof(CompetitionBriefPlayer_IsMyBrief) == 0x000001, "Wrong size on CompetitionBriefPlayer_IsMyBrief");
static_assert(offsetof(CompetitionBriefPlayer_IsMyBrief, ReturnValue) == 0x000000, "Member 'CompetitionBriefPlayer_IsMyBrief::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefInfo.GetBriefPlayers
// 0x0010 (0x0010 - 0x0000)
struct CompetitionBriefInfo_GetBriefPlayers final
{
public:
	TArray<class UCompetitionBriefPlayer*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefInfo_GetBriefPlayers) == 0x000008, "Wrong alignment on CompetitionBriefInfo_GetBriefPlayers");
static_assert(sizeof(CompetitionBriefInfo_GetBriefPlayers) == 0x000010, "Wrong size on CompetitionBriefInfo_GetBriefPlayers");
static_assert(offsetof(CompetitionBriefInfo_GetBriefPlayers, ReturnValue) == 0x000000, "Member 'CompetitionBriefInfo_GetBriefPlayers::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefInfo.GetMyBriefPlayer
// 0x0008 (0x0008 - 0x0000)
struct CompetitionBriefInfo_GetMyBriefPlayer final
{
public:
	class UCompetitionBriefPlayer*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefInfo_GetMyBriefPlayer) == 0x000008, "Wrong alignment on CompetitionBriefInfo_GetMyBriefPlayer");
static_assert(sizeof(CompetitionBriefInfo_GetMyBriefPlayer) == 0x000008, "Wrong size on CompetitionBriefInfo_GetMyBriefPlayer");
static_assert(offsetof(CompetitionBriefInfo_GetMyBriefPlayer, ReturnValue) == 0x000000, "Member 'CompetitionBriefInfo_GetMyBriefPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionBriefInfo.GetMyPlayerState
// 0x0001 (0x0001 - 0x0000)
struct CompetitionBriefInfo_GetMyPlayerState final
{
public:
	ECompetitionState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionBriefInfo_GetMyPlayerState) == 0x000001, "Wrong alignment on CompetitionBriefInfo_GetMyPlayerState");
static_assert(sizeof(CompetitionBriefInfo_GetMyPlayerState) == 0x000001, "Wrong size on CompetitionBriefInfo_GetMyPlayerState");
static_assert(offsetof(CompetitionBriefInfo_GetMyPlayerState, ReturnValue) == 0x000000, "Member 'CompetitionBriefInfo_GetMyPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_PlayerSlot.InitPlayer
// 0x0010 (0x0010 - 0x0000)
struct HUD_PlayerSlot_InitPlayer final
{
public:
	class ABattlePlayerState*                     _player_state;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _zidx_chara;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_blue_team;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_show_hp;                                       // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2221[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(HUD_PlayerSlot_InitPlayer) == 0x000008, "Wrong alignment on HUD_PlayerSlot_InitPlayer");
static_assert(sizeof(HUD_PlayerSlot_InitPlayer) == 0x000010, "Wrong size on HUD_PlayerSlot_InitPlayer");
static_assert(offsetof(HUD_PlayerSlot_InitPlayer, _player_state) == 0x000000, "Member 'HUD_PlayerSlot_InitPlayer::_player_state' has a wrong offset!");
static_assert(offsetof(HUD_PlayerSlot_InitPlayer, _zidx_chara) == 0x000008, "Member 'HUD_PlayerSlot_InitPlayer::_zidx_chara' has a wrong offset!");
static_assert(offsetof(HUD_PlayerSlot_InitPlayer, _is_blue_team) == 0x00000C, "Member 'HUD_PlayerSlot_InitPlayer::_is_blue_team' has a wrong offset!");
static_assert(offsetof(HUD_PlayerSlot_InitPlayer, _is_show_hp) == 0x00000D, "Member 'HUD_PlayerSlot_InitPlayer::_is_show_hp' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetPlayerState
// 0x0001 (0x0001 - 0x0000)
struct CompetitionPlayer_GetPlayerState final
{
public:
	ECompetitionState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetPlayerState) == 0x000001, "Wrong alignment on CompetitionPlayer_GetPlayerState");
static_assert(sizeof(CompetitionPlayer_GetPlayerState) == 0x000001, "Wrong size on CompetitionPlayer_GetPlayerState");
static_assert(offsetof(CompetitionPlayer_GetPlayerState, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetAssist
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetAssist final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetAssist) == 0x000004, "Wrong alignment on CompetitionPlayer_GetAssist");
static_assert(sizeof(CompetitionPlayer_GetAssist) == 0x000004, "Wrong size on CompetitionPlayer_GetAssist");
static_assert(offsetof(CompetitionPlayer_GetAssist, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetAssist::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetBriefPlayer
// 0x0008 (0x0008 - 0x0000)
struct CompetitionPlayer_GetBriefPlayer final
{
public:
	class UCompetitionBriefPlayer*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetBriefPlayer) == 0x000008, "Wrong alignment on CompetitionPlayer_GetBriefPlayer");
static_assert(sizeof(CompetitionPlayer_GetBriefPlayer) == 0x000008, "Wrong size on CompetitionPlayer_GetBriefPlayer");
static_assert(offsetof(CompetitionPlayer_GetBriefPlayer, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetBriefPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetCompetCount
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetCompetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetCompetCount) == 0x000004, "Wrong alignment on CompetitionPlayer_GetCompetCount");
static_assert(sizeof(CompetitionPlayer_GetCompetCount) == 0x000004, "Wrong size on CompetitionPlayer_GetCompetCount");
static_assert(offsetof(CompetitionPlayer_GetCompetCount, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetCompetCount::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetDeath
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetDeath final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetDeath) == 0x000004, "Wrong alignment on CompetitionPlayer_GetDeath");
static_assert(sizeof(CompetitionPlayer_GetDeath) == 0x000004, "Wrong size on CompetitionPlayer_GetDeath");
static_assert(offsetof(CompetitionPlayer_GetDeath, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetDeath::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetEmblemID
// 0x0010 (0x0010 - 0x0000)
struct CompetitionPlayer_GetEmblemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetEmblemID) == 0x000008, "Wrong alignment on CompetitionPlayer_GetEmblemID");
static_assert(sizeof(CompetitionPlayer_GetEmblemID) == 0x000010, "Wrong size on CompetitionPlayer_GetEmblemID");
static_assert(offsetof(CompetitionPlayer_GetEmblemID, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetEmblemID::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetKill
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetKill final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetKill) == 0x000004, "Wrong alignment on CompetitionPlayer_GetKill");
static_assert(sizeof(CompetitionPlayer_GetKill) == 0x000004, "Wrong size on CompetitionPlayer_GetKill");
static_assert(offsetof(CompetitionPlayer_GetKill, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetKill::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetLevel) == 0x000004, "Wrong alignment on CompetitionPlayer_GetLevel");
static_assert(sizeof(CompetitionPlayer_GetLevel) == 0x000004, "Wrong size on CompetitionPlayer_GetLevel");
static_assert(offsetof(CompetitionPlayer_GetLevel, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetLevel::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetNicknameFXID
// 0x0010 (0x0010 - 0x0000)
struct CompetitionPlayer_GetNicknameFXID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetNicknameFXID) == 0x000008, "Wrong alignment on CompetitionPlayer_GetNicknameFXID");
static_assert(sizeof(CompetitionPlayer_GetNicknameFXID) == 0x000010, "Wrong size on CompetitionPlayer_GetNicknameFXID");
static_assert(offsetof(CompetitionPlayer_GetNicknameFXID, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetNicknameFXID::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetPlayTime
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetPlayTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetPlayTime) == 0x000004, "Wrong alignment on CompetitionPlayer_GetPlayTime");
static_assert(sizeof(CompetitionPlayer_GetPlayTime) == 0x000004, "Wrong size on CompetitionPlayer_GetPlayTime");
static_assert(offsetof(CompetitionPlayer_GetPlayTime, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetPlayTime::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetProfileCardID
// 0x0010 (0x0010 - 0x0000)
struct CompetitionPlayer_GetProfileCardID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetProfileCardID) == 0x000008, "Wrong alignment on CompetitionPlayer_GetProfileCardID");
static_assert(sizeof(CompetitionPlayer_GetProfileCardID) == 0x000010, "Wrong size on CompetitionPlayer_GetProfileCardID");
static_assert(offsetof(CompetitionPlayer_GetProfileCardID, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetProfileCardID::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetRewardCount
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetRewardCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetRewardCount) == 0x000004, "Wrong alignment on CompetitionPlayer_GetRewardCount");
static_assert(sizeof(CompetitionPlayer_GetRewardCount) == 0x000004, "Wrong size on CompetitionPlayer_GetRewardCount");
static_assert(offsetof(CompetitionPlayer_GetRewardCount, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetRewardCount::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetTier
// 0x0001 (0x0001 - 0x0000)
struct CompetitionPlayer_GetTier final
{
public:
	ETier                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetTier) == 0x000001, "Wrong alignment on CompetitionPlayer_GetTier");
static_assert(sizeof(CompetitionPlayer_GetTier) == 0x000001, "Wrong size on CompetitionPlayer_GetTier");
static_assert(offsetof(CompetitionPlayer_GetTier, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetTier::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetTopRank
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetTopRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetTopRank) == 0x000004, "Wrong alignment on CompetitionPlayer_GetTopRank");
static_assert(sizeof(CompetitionPlayer_GetTopRank) == 0x000004, "Wrong size on CompetitionPlayer_GetTopRank");
static_assert(offsetof(CompetitionPlayer_GetTopRank, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetTopRank::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetWin1Count
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetWin1Count final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetWin1Count) == 0x000004, "Wrong alignment on CompetitionPlayer_GetWin1Count");
static_assert(sizeof(CompetitionPlayer_GetWin1Count) == 0x000004, "Wrong size on CompetitionPlayer_GetWin1Count");
static_assert(offsetof(CompetitionPlayer_GetWin1Count, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetWin1Count::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.GetWin2Count
// 0x0004 (0x0004 - 0x0000)
struct CompetitionPlayer_GetWin2Count final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_GetWin2Count) == 0x000004, "Wrong alignment on CompetitionPlayer_GetWin2Count");
static_assert(sizeof(CompetitionPlayer_GetWin2Count) == 0x000004, "Wrong size on CompetitionPlayer_GetWin2Count");
static_assert(offsetof(CompetitionPlayer_GetWin2Count, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_GetWin2Count::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionPlayer.IsMyPlayer
// 0x0001 (0x0001 - 0x0000)
struct CompetitionPlayer_IsMyPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionPlayer_IsMyPlayer) == 0x000001, "Wrong alignment on CompetitionPlayer_IsMyPlayer");
static_assert(sizeof(CompetitionPlayer_IsMyPlayer) == 0x000001, "Wrong size on CompetitionPlayer_IsMyPlayer");
static_assert(offsetof(CompetitionPlayer_IsMyPlayer, ReturnValue) == 0x000000, "Member 'CompetitionPlayer_IsMyPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.Create
// 0x00E0 (0x00E0 - 0x0000)
struct GunObject_Create final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunSpec                               _gun_spec;                                         // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGunObject*                             ReturnValue;                                       // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_Create) == 0x000008, "Wrong alignment on GunObject_Create");
static_assert(sizeof(GunObject_Create) == 0x0000E0, "Wrong size on GunObject_Create");
static_assert(offsetof(GunObject_Create, _outer) == 0x000000, "Member 'GunObject_Create::_outer' has a wrong offset!");
static_assert(offsetof(GunObject_Create, _gun_spec) == 0x000008, "Member 'GunObject_Create::_gun_spec' has a wrong offset!");
static_assert(offsetof(GunObject_Create, ReturnValue) == 0x0000D8, "Member 'GunObject_Create::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsAccessorySlot
// 0x0002 (0x0002 - 0x0000)
struct GunObject_IsAccessorySlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsAccessorySlot) == 0x000001, "Wrong alignment on GunObject_IsAccessorySlot");
static_assert(sizeof(GunObject_IsAccessorySlot) == 0x000002, "Wrong size on GunObject_IsAccessorySlot");
static_assert(offsetof(GunObject_IsAccessorySlot, _slot) == 0x000000, "Member 'GunObject_IsAccessorySlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsAccessorySlot, ReturnValue) == 0x000001, "Member 'GunObject_IsAccessorySlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsCharmSlot
// 0x0002 (0x0002 - 0x0000)
struct GunObject_IsCharmSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsCharmSlot) == 0x000001, "Wrong alignment on GunObject_IsCharmSlot");
static_assert(sizeof(GunObject_IsCharmSlot) == 0x000002, "Wrong size on GunObject_IsCharmSlot");
static_assert(offsetof(GunObject_IsCharmSlot, _slot) == 0x000000, "Member 'GunObject_IsCharmSlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsCharmSlot, ReturnValue) == 0x000001, "Member 'GunObject_IsCharmSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsStickerSlot
// 0x0002 (0x0002 - 0x0000)
struct GunObject_IsStickerSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsStickerSlot) == 0x000001, "Wrong alignment on GunObject_IsStickerSlot");
static_assert(sizeof(GunObject_IsStickerSlot) == 0x000002, "Wrong size on GunObject_IsStickerSlot");
static_assert(offsetof(GunObject_IsStickerSlot, _slot) == 0x000000, "Member 'GunObject_IsStickerSlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsStickerSlot, ReturnValue) == 0x000001, "Member 'GunObject_IsStickerSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.ItemCategoryToPartsSlot
// 0x0020 (0x0020 - 0x0000)
struct GunObject_ItemCategoryToPartsSlot final
{
public:
	EItemCategory                                 _item_category;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2227[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2228[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_ItemCategoryToPartsSlot) == 0x000008, "Wrong alignment on GunObject_ItemCategoryToPartsSlot");
static_assert(sizeof(GunObject_ItemCategoryToPartsSlot) == 0x000020, "Wrong size on GunObject_ItemCategoryToPartsSlot");
static_assert(offsetof(GunObject_ItemCategoryToPartsSlot, _item_category) == 0x000000, "Member 'GunObject_ItemCategoryToPartsSlot::_item_category' has a wrong offset!");
static_assert(offsetof(GunObject_ItemCategoryToPartsSlot, _item_id) == 0x000008, "Member 'GunObject_ItemCategoryToPartsSlot::_item_id' has a wrong offset!");
static_assert(offsetof(GunObject_ItemCategoryToPartsSlot, ReturnValue) == 0x000018, "Member 'GunObject_ItemCategoryToPartsSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.PartsSlotToItemCategory
// 0x0002 (0x0002 - 0x0000)
struct GunObject_PartsSlotToItemCategory final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_PartsSlotToItemCategory) == 0x000001, "Wrong alignment on GunObject_PartsSlotToItemCategory");
static_assert(sizeof(GunObject_PartsSlotToItemCategory) == 0x000002, "Wrong size on GunObject_PartsSlotToItemCategory");
static_assert(offsetof(GunObject_PartsSlotToItemCategory, _slot) == 0x000000, "Member 'GunObject_PartsSlotToItemCategory::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_PartsSlotToItemCategory, ReturnValue) == 0x000001, "Member 'GunObject_PartsSlotToItemCategory::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.BindUpdatedEvent
// 0x0010 (0x0010 - 0x0000)
struct GunObject_BindUpdatedEvent final
{
public:
	TDelegate<void(class UGunObject* Object)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_BindUpdatedEvent) == 0x000004, "Wrong alignment on GunObject_BindUpdatedEvent");
static_assert(sizeof(GunObject_BindUpdatedEvent) == 0x000010, "Wrong size on GunObject_BindUpdatedEvent");
static_assert(offsetof(GunObject_BindUpdatedEvent, _event) == 0x000000, "Member 'GunObject_BindUpdatedEvent::_event' has a wrong offset!");

// DelegateFunction Stigma.GunObject.D_OnUpdatedSpec__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GunObject_D_OnUpdatedSpec__DelegateSignature final
{
public:
	class UGunObject*                             Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_D_OnUpdatedSpec__DelegateSignature) == 0x000008, "Wrong alignment on GunObject_D_OnUpdatedSpec__DelegateSignature");
static_assert(sizeof(GunObject_D_OnUpdatedSpec__DelegateSignature) == 0x000008, "Wrong size on GunObject_D_OnUpdatedSpec__DelegateSignature");
static_assert(offsetof(GunObject_D_OnUpdatedSpec__DelegateSignature, Object) == 0x000000, "Member 'GunObject_D_OnUpdatedSpec__DelegateSignature::Object' has a wrong offset!");

// Function Stigma.GunObject.SetAccessory
// 0x0020 (0x0020 - 0x0000)
struct GunObject_SetAccessory final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2229[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_shop_preview;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_SetAccessory) == 0x000008, "Wrong alignment on GunObject_SetAccessory");
static_assert(sizeof(GunObject_SetAccessory) == 0x000020, "Wrong size on GunObject_SetAccessory");
static_assert(offsetof(GunObject_SetAccessory, _slot) == 0x000000, "Member 'GunObject_SetAccessory::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_SetAccessory, _item_id) == 0x000008, "Member 'GunObject_SetAccessory::_item_id' has a wrong offset!");
static_assert(offsetof(GunObject_SetAccessory, _is_shop_preview) == 0x000018, "Member 'GunObject_SetAccessory::_is_shop_preview' has a wrong offset!");

// Function Stigma.GunObject.SetBody
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetBody final
{
public:
	struct FItemID_Gun_Body                       _body_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetBody) == 0x000008, "Wrong alignment on GunObject_SetBody");
static_assert(sizeof(GunObject_SetBody) == 0x000010, "Wrong size on GunObject_SetBody");
static_assert(offsetof(GunObject_SetBody, _body_id) == 0x000000, "Member 'GunObject_SetBody::_body_id' has a wrong offset!");

// Function Stigma.GunObject.SetBulletTip
// 0x0001 (0x0001 - 0x0000)
struct GunObject_SetBulletTip final
{
public:
	EBulletTip                                    _bullet_tip;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetBulletTip) == 0x000001, "Wrong alignment on GunObject_SetBulletTip");
static_assert(sizeof(GunObject_SetBulletTip) == 0x000001, "Wrong size on GunObject_SetBulletTip");
static_assert(offsetof(GunObject_SetBulletTip, _bullet_tip) == 0x000000, "Member 'GunObject_SetBulletTip::_bullet_tip' has a wrong offset!");

// Function Stigma.GunObject.SetCharm
// 0x0020 (0x0020 - 0x0000)
struct GunObject_SetCharm final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Gun_Charm                      _charm_id;                                         // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_shop_preview;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_SetCharm) == 0x000008, "Wrong alignment on GunObject_SetCharm");
static_assert(sizeof(GunObject_SetCharm) == 0x000020, "Wrong size on GunObject_SetCharm");
static_assert(offsetof(GunObject_SetCharm, _slot) == 0x000000, "Member 'GunObject_SetCharm::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_SetCharm, _charm_id) == 0x000008, "Member 'GunObject_SetCharm::_charm_id' has a wrong offset!");
static_assert(offsetof(GunObject_SetCharm, _is_shop_preview) == 0x000018, "Member 'GunObject_SetCharm::_is_shop_preview' has a wrong offset!");

// Function Stigma.GunObject.SetFront
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetFront final
{
public:
	struct FItemID_Gun_Front                      _front_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetFront) == 0x000008, "Wrong alignment on GunObject_SetFront");
static_assert(sizeof(GunObject_SetFront) == 0x000010, "Wrong size on GunObject_SetFront");
static_assert(offsetof(GunObject_SetFront, _front_id) == 0x000000, "Member 'GunObject_SetFront::_front_id' has a wrong offset!");

// Function Stigma.GunObject.SetMagazine
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetMagazine final
{
public:
	struct FItemID_Gun_Magazine                   _magazine_id;                                      // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetMagazine) == 0x000008, "Wrong alignment on GunObject_SetMagazine");
static_assert(sizeof(GunObject_SetMagazine) == 0x000010, "Wrong size on GunObject_SetMagazine");
static_assert(offsetof(GunObject_SetMagazine, _magazine_id) == 0x000000, "Member 'GunObject_SetMagazine::_magazine_id' has a wrong offset!");

// Function Stigma.GunObject.SetPartsID
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetPartsID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetPartsID) == 0x000008, "Wrong alignment on GunObject_SetPartsID");
static_assert(sizeof(GunObject_SetPartsID) == 0x000010, "Wrong size on GunObject_SetPartsID");
static_assert(offsetof(GunObject_SetPartsID, _item_id) == 0x000000, "Member 'GunObject_SetPartsID::_item_id' has a wrong offset!");

// Function Stigma.GunObject.SetPresetName
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetPresetName final
{
public:
	class FString                                 _preset_name;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetPresetName) == 0x000008, "Wrong alignment on GunObject_SetPresetName");
static_assert(sizeof(GunObject_SetPresetName) == 0x000010, "Wrong size on GunObject_SetPresetName");
static_assert(offsetof(GunObject_SetPresetName, _preset_name) == 0x000000, "Member 'GunObject_SetPresetName::_preset_name' has a wrong offset!");

// Function Stigma.GunObject.SetSight
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetSight final
{
public:
	struct FItemID_Gun_Sight                      _sight_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetSight) == 0x000008, "Wrong alignment on GunObject_SetSight");
static_assert(sizeof(GunObject_SetSight) == 0x000010, "Wrong size on GunObject_SetSight");
static_assert(offsetof(GunObject_SetSight, _sight_id) == 0x000000, "Member 'GunObject_SetSight::_sight_id' has a wrong offset!");

// Function Stigma.GunObject.SetSlide
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetSlide final
{
public:
	struct FItemID_Gun_Slide                      _slide_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetSlide) == 0x000008, "Wrong alignment on GunObject_SetSlide");
static_assert(sizeof(GunObject_SetSlide) == 0x000010, "Wrong size on GunObject_SetSlide");
static_assert(offsetof(GunObject_SetSlide, _slide_id) == 0x000000, "Member 'GunObject_SetSlide::_slide_id' has a wrong offset!");

// Function Stigma.GunObject.SetSticker
// 0x0020 (0x0020 - 0x0000)
struct GunObject_SetSticker final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Gun_Sticker                    _sticker_id;                                       // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_shop_preview;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_SetSticker) == 0x000008, "Wrong alignment on GunObject_SetSticker");
static_assert(sizeof(GunObject_SetSticker) == 0x000020, "Wrong size on GunObject_SetSticker");
static_assert(offsetof(GunObject_SetSticker, _slot) == 0x000000, "Member 'GunObject_SetSticker::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_SetSticker, _sticker_id) == 0x000008, "Member 'GunObject_SetSticker::_sticker_id' has a wrong offset!");
static_assert(offsetof(GunObject_SetSticker, _is_shop_preview) == 0x000018, "Member 'GunObject_SetSticker::_is_shop_preview' has a wrong offset!");

// Function Stigma.GunObject.SetTopSight
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetTopSight final
{
public:
	struct FItemID_Gun_Sight                      _top_sight_id;                                     // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetTopSight) == 0x000008, "Wrong alignment on GunObject_SetTopSight");
static_assert(sizeof(GunObject_SetTopSight) == 0x000010, "Wrong size on GunObject_SetTopSight");
static_assert(offsetof(GunObject_SetTopSight, _top_sight_id) == 0x000000, "Member 'GunObject_SetTopSight::_top_sight_id' has a wrong offset!");

// Function Stigma.GunObject.SetUnderSight
// 0x0010 (0x0010 - 0x0000)
struct GunObject_SetUnderSight final
{
public:
	struct FItemID_Gun_Sight                      _under_sight_id;                                   // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_SetUnderSight) == 0x000008, "Wrong alignment on GunObject_SetUnderSight");
static_assert(sizeof(GunObject_SetUnderSight) == 0x000010, "Wrong size on GunObject_SetUnderSight");
static_assert(offsetof(GunObject_SetUnderSight, _under_sight_id) == 0x000000, "Member 'GunObject_SetUnderSight::_under_sight_id' has a wrong offset!");

// Function Stigma.GunObject.UnBindUpdatedEvent
// 0x0008 (0x0008 - 0x0000)
struct GunObject_UnBindUpdatedEvent final
{
public:
	class UObject*                                _binder;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_UnBindUpdatedEvent) == 0x000008, "Wrong alignment on GunObject_UnBindUpdatedEvent");
static_assert(sizeof(GunObject_UnBindUpdatedEvent) == 0x000008, "Wrong size on GunObject_UnBindUpdatedEvent");
static_assert(offsetof(GunObject_UnBindUpdatedEvent, _binder) == 0x000000, "Member 'GunObject_UnBindUpdatedEvent::_binder' has a wrong offset!");

// Function Stigma.GunObject.UpdateGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct GunObject_UpdateGunSpec final
{
public:
	struct FGunSpec                               Param__spec;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_UpdateGunSpec) == 0x000008, "Wrong alignment on GunObject_UpdateGunSpec");
static_assert(sizeof(GunObject_UpdateGunSpec) == 0x0000D0, "Wrong size on GunObject_UpdateGunSpec");
static_assert(offsetof(GunObject_UpdateGunSpec, Param__spec) == 0x000000, "Member 'GunObject_UpdateGunSpec::Param__spec' has a wrong offset!");

// Function Stigma.GunObject.CalculateEquipablePartsCnt
// 0x0004 (0x0004 - 0x0000)
struct GunObject_CalculateEquipablePartsCnt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_CalculateEquipablePartsCnt) == 0x000004, "Wrong alignment on GunObject_CalculateEquipablePartsCnt");
static_assert(sizeof(GunObject_CalculateEquipablePartsCnt) == 0x000004, "Wrong size on GunObject_CalculateEquipablePartsCnt");
static_assert(offsetof(GunObject_CalculateEquipablePartsCnt, ReturnValue) == 0x000000, "Member 'GunObject_CalculateEquipablePartsCnt::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.CalculateEquippedPartsCnt
// 0x0004 (0x0004 - 0x0000)
struct GunObject_CalculateEquippedPartsCnt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_CalculateEquippedPartsCnt) == 0x000004, "Wrong alignment on GunObject_CalculateEquippedPartsCnt");
static_assert(sizeof(GunObject_CalculateEquippedPartsCnt) == 0x000004, "Wrong size on GunObject_CalculateEquippedPartsCnt");
static_assert(offsetof(GunObject_CalculateEquippedPartsCnt, ReturnValue) == 0x000000, "Member 'GunObject_CalculateEquippedPartsCnt::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.DuplicatedGunObject
// 0x0008 (0x0008 - 0x0000)
struct GunObject_DuplicatedGunObject final
{
public:
	class UGunObject*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_DuplicatedGunObject) == 0x000008, "Wrong alignment on GunObject_DuplicatedGunObject");
static_assert(sizeof(GunObject_DuplicatedGunObject) == 0x000008, "Wrong size on GunObject_DuplicatedGunObject");
static_assert(offsetof(GunObject_DuplicatedGunObject, ReturnValue) == 0x000000, "Member 'GunObject_DuplicatedGunObject::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.FindPartsSlotByID
// 0x0018 (0x0018 - 0x0000)
struct GunObject_FindPartsSlotByID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_FindPartsSlotByID) == 0x000008, "Wrong alignment on GunObject_FindPartsSlotByID");
static_assert(sizeof(GunObject_FindPartsSlotByID) == 0x000018, "Wrong size on GunObject_FindPartsSlotByID");
static_assert(offsetof(GunObject_FindPartsSlotByID, _item_id) == 0x000000, "Member 'GunObject_FindPartsSlotByID::_item_id' has a wrong offset!");
static_assert(offsetof(GunObject_FindPartsSlotByID, ReturnValue) == 0x000010, "Member 'GunObject_FindPartsSlotByID::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetBody
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetBody final
{
public:
	struct FItemID_Gun_Body                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetBody) == 0x000008, "Wrong alignment on GunObject_GetBody");
static_assert(sizeof(GunObject_GetBody) == 0x000010, "Wrong size on GunObject_GetBody");
static_assert(offsetof(GunObject_GetBody, ReturnValue) == 0x000000, "Member 'GunObject_GetBody::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetBulletTip
// 0x0001 (0x0001 - 0x0000)
struct GunObject_GetBulletTip final
{
public:
	EBulletTip                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetBulletTip) == 0x000001, "Wrong alignment on GunObject_GetBulletTip");
static_assert(sizeof(GunObject_GetBulletTip) == 0x000001, "Wrong size on GunObject_GetBulletTip");
static_assert(offsetof(GunObject_GetBulletTip, ReturnValue) == 0x000000, "Member 'GunObject_GetBulletTip::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetCharm_Body
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetCharm_Body final
{
public:
	struct FItemID_Gun_Charm                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetCharm_Body) == 0x000008, "Wrong alignment on GunObject_GetCharm_Body");
static_assert(sizeof(GunObject_GetCharm_Body) == 0x000010, "Wrong size on GunObject_GetCharm_Body");
static_assert(offsetof(GunObject_GetCharm_Body, ReturnValue) == 0x000000, "Member 'GunObject_GetCharm_Body::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetCharm_Magazine
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetCharm_Magazine final
{
public:
	struct FItemID_Gun_Charm                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetCharm_Magazine) == 0x000008, "Wrong alignment on GunObject_GetCharm_Magazine");
static_assert(sizeof(GunObject_GetCharm_Magazine) == 0x000010, "Wrong size on GunObject_GetCharm_Magazine");
static_assert(offsetof(GunObject_GetCharm_Magazine, ReturnValue) == 0x000000, "Member 'GunObject_GetCharm_Magazine::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetExpireAt
// 0x0008 (0x0008 - 0x0000)
struct GunObject_GetExpireAt final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetExpireAt) == 0x000008, "Wrong alignment on GunObject_GetExpireAt");
static_assert(sizeof(GunObject_GetExpireAt) == 0x000008, "Wrong size on GunObject_GetExpireAt");
static_assert(offsetof(GunObject_GetExpireAt, ReturnValue) == 0x000000, "Member 'GunObject_GetExpireAt::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetFront
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetFront final
{
public:
	struct FItemID_Gun_Front                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetFront) == 0x000008, "Wrong alignment on GunObject_GetFront");
static_assert(sizeof(GunObject_GetFront) == 0x000010, "Wrong size on GunObject_GetFront");
static_assert(offsetof(GunObject_GetFront, ReturnValue) == 0x000000, "Member 'GunObject_GetFront::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetGunPartsID
// 0x0018 (0x0018 - 0x0000)
struct GunObject_GetGunPartsID final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2230[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetGunPartsID) == 0x000008, "Wrong alignment on GunObject_GetGunPartsID");
static_assert(sizeof(GunObject_GetGunPartsID) == 0x000018, "Wrong size on GunObject_GetGunPartsID");
static_assert(offsetof(GunObject_GetGunPartsID, _slot) == 0x000000, "Member 'GunObject_GetGunPartsID::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_GetGunPartsID, ReturnValue) == 0x000008, "Member 'GunObject_GetGunPartsID::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetGunPreset
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetGunPreset final
{
public:
	struct FGunPreset                             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetGunPreset) == 0x000008, "Wrong alignment on GunObject_GetGunPreset");
static_assert(sizeof(GunObject_GetGunPreset) == 0x000010, "Wrong size on GunObject_GetGunPreset");
static_assert(offsetof(GunObject_GetGunPreset, ReturnValue) == 0x000000, "Member 'GunObject_GetGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetGunPresetSlot
// 0x0004 (0x0004 - 0x0000)
struct GunObject_GetGunPresetSlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetGunPresetSlot) == 0x000004, "Wrong alignment on GunObject_GetGunPresetSlot");
static_assert(sizeof(GunObject_GetGunPresetSlot) == 0x000004, "Wrong size on GunObject_GetGunPresetSlot");
static_assert(offsetof(GunObject_GetGunPresetSlot, ReturnValue) == 0x000000, "Member 'GunObject_GetGunPresetSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct GunObject_GetGunSpec final
{
public:
	struct FGunSpec                               ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetGunSpec) == 0x000008, "Wrong alignment on GunObject_GetGunSpec");
static_assert(sizeof(GunObject_GetGunSpec) == 0x0000D0, "Wrong size on GunObject_GetGunSpec");
static_assert(offsetof(GunObject_GetGunSpec, ReturnValue) == 0x000000, "Member 'GunObject_GetGunSpec::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetGunType
// 0x0001 (0x0001 - 0x0000)
struct GunObject_GetGunType final
{
public:
	EGunType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetGunType) == 0x000001, "Wrong alignment on GunObject_GetGunType");
static_assert(sizeof(GunObject_GetGunType) == 0x000001, "Wrong size on GunObject_GetGunType");
static_assert(offsetof(GunObject_GetGunType, ReturnValue) == 0x000000, "Member 'GunObject_GetGunType::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetMagazine
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetMagazine final
{
public:
	struct FItemID_Gun_Magazine                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetMagazine) == 0x000008, "Wrong alignment on GunObject_GetMagazine");
static_assert(sizeof(GunObject_GetMagazine) == 0x000010, "Wrong size on GunObject_GetMagazine");
static_assert(offsetof(GunObject_GetMagazine, ReturnValue) == 0x000000, "Member 'GunObject_GetMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetPresetName
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetPresetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetPresetName) == 0x000008, "Wrong alignment on GunObject_GetPresetName");
static_assert(sizeof(GunObject_GetPresetName) == 0x000010, "Wrong size on GunObject_GetPresetName");
static_assert(offsetof(GunObject_GetPresetName, ReturnValue) == 0x000000, "Member 'GunObject_GetPresetName::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetSlide
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetSlide final
{
public:
	struct FItemID_Gun_Slide                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetSlide) == 0x000008, "Wrong alignment on GunObject_GetSlide");
static_assert(sizeof(GunObject_GetSlide) == 0x000010, "Wrong size on GunObject_GetSlide");
static_assert(offsetof(GunObject_GetSlide, ReturnValue) == 0x000000, "Member 'GunObject_GetSlide::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetSticker_Body
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetSticker_Body final
{
public:
	struct FItemID_Gun_Sticker                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetSticker_Body) == 0x000008, "Wrong alignment on GunObject_GetSticker_Body");
static_assert(sizeof(GunObject_GetSticker_Body) == 0x000010, "Wrong size on GunObject_GetSticker_Body");
static_assert(offsetof(GunObject_GetSticker_Body, ReturnValue) == 0x000000, "Member 'GunObject_GetSticker_Body::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetSticker_Body2
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetSticker_Body2 final
{
public:
	struct FItemID_Gun_Sticker                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetSticker_Body2) == 0x000008, "Wrong alignment on GunObject_GetSticker_Body2");
static_assert(sizeof(GunObject_GetSticker_Body2) == 0x000010, "Wrong size on GunObject_GetSticker_Body2");
static_assert(offsetof(GunObject_GetSticker_Body2, ReturnValue) == 0x000000, "Member 'GunObject_GetSticker_Body2::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetTopSight
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetTopSight final
{
public:
	struct FItemID_Gun_Sight                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetTopSight) == 0x000008, "Wrong alignment on GunObject_GetTopSight");
static_assert(sizeof(GunObject_GetTopSight) == 0x000010, "Wrong size on GunObject_GetTopSight");
static_assert(offsetof(GunObject_GetTopSight, ReturnValue) == 0x000000, "Member 'GunObject_GetTopSight::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetUnderSight
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetUnderSight final
{
public:
	struct FItemID_Gun_Sight                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetUnderSight) == 0x000008, "Wrong alignment on GunObject_GetUnderSight");
static_assert(sizeof(GunObject_GetUnderSight) == 0x000010, "Wrong size on GunObject_GetUnderSight");
static_assert(offsetof(GunObject_GetUnderSight, ReturnValue) == 0x000000, "Member 'GunObject_GetUnderSight::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.GetUnownedGunParts
// 0x0010 (0x0010 - 0x0000)
struct GunObject_GetUnownedGunParts final
{
public:
	TArray<EGunPartsSlot>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_GetUnownedGunParts) == 0x000008, "Wrong alignment on GunObject_GetUnownedGunParts");
static_assert(sizeof(GunObject_GetUnownedGunParts) == 0x000010, "Wrong size on GunObject_GetUnownedGunParts");
static_assert(offsetof(GunObject_GetUnownedGunParts, ReturnValue) == 0x000000, "Member 'GunObject_GetUnownedGunParts::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsActivatedSlot
// 0x0002 (0x0002 - 0x0000)
struct GunObject_IsActivatedSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsActivatedSlot) == 0x000001, "Wrong alignment on GunObject_IsActivatedSlot");
static_assert(sizeof(GunObject_IsActivatedSlot) == 0x000002, "Wrong size on GunObject_IsActivatedSlot");
static_assert(offsetof(GunObject_IsActivatedSlot, _slot) == 0x000000, "Member 'GunObject_IsActivatedSlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsActivatedSlot, ReturnValue) == 0x000001, "Member 'GunObject_IsActivatedSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsBookmarked
// 0x0001 (0x0001 - 0x0000)
struct GunObject_IsBookmarked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsBookmarked) == 0x000001, "Wrong alignment on GunObject_IsBookmarked");
static_assert(sizeof(GunObject_IsBookmarked) == 0x000001, "Wrong size on GunObject_IsBookmarked");
static_assert(offsetof(GunObject_IsBookmarked, ReturnValue) == 0x000000, "Member 'GunObject_IsBookmarked::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsDefaultPartsSlot
// 0x0002 (0x0002 - 0x0000)
struct GunObject_IsDefaultPartsSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsDefaultPartsSlot) == 0x000001, "Wrong alignment on GunObject_IsDefaultPartsSlot");
static_assert(sizeof(GunObject_IsDefaultPartsSlot) == 0x000002, "Wrong size on GunObject_IsDefaultPartsSlot");
static_assert(offsetof(GunObject_IsDefaultPartsSlot, _slot) == 0x000000, "Member 'GunObject_IsDefaultPartsSlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsDefaultPartsSlot, ReturnValue) == 0x000001, "Member 'GunObject_IsDefaultPartsSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsEqual
// 0x0010 (0x0010 - 0x0000)
struct GunObject_IsEqual final
{
public:
	const class UGunObject*                       _gun_object;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2231[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_IsEqual) == 0x000008, "Wrong alignment on GunObject_IsEqual");
static_assert(sizeof(GunObject_IsEqual) == 0x000010, "Wrong size on GunObject_IsEqual");
static_assert(offsetof(GunObject_IsEqual, _gun_object) == 0x000000, "Member 'GunObject_IsEqual::_gun_object' has a wrong offset!");
static_assert(offsetof(GunObject_IsEqual, ReturnValue) == 0x000008, "Member 'GunObject_IsEqual::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsEquippedItem
// 0x0018 (0x0018 - 0x0000)
struct GunObject_IsEquippedItem final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2232[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_IsEquippedItem) == 0x000008, "Wrong alignment on GunObject_IsEquippedItem");
static_assert(sizeof(GunObject_IsEquippedItem) == 0x000018, "Wrong size on GunObject_IsEquippedItem");
static_assert(offsetof(GunObject_IsEquippedItem, _item_id) == 0x000000, "Member 'GunObject_IsEquippedItem::_item_id' has a wrong offset!");
static_assert(offsetof(GunObject_IsEquippedItem, ReturnValue) == 0x000010, "Member 'GunObject_IsEquippedItem::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsEquippedItemToSlot
// 0x0020 (0x0020 - 0x0000)
struct GunObject_IsEquippedItemToSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2233[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2234[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunObject_IsEquippedItemToSlot) == 0x000008, "Wrong alignment on GunObject_IsEquippedItemToSlot");
static_assert(sizeof(GunObject_IsEquippedItemToSlot) == 0x000020, "Wrong size on GunObject_IsEquippedItemToSlot");
static_assert(offsetof(GunObject_IsEquippedItemToSlot, _slot) == 0x000000, "Member 'GunObject_IsEquippedItemToSlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsEquippedItemToSlot, _item_id) == 0x000008, "Member 'GunObject_IsEquippedItemToSlot::_item_id' has a wrong offset!");
static_assert(offsetof(GunObject_IsEquippedItemToSlot, ReturnValue) == 0x000018, "Member 'GunObject_IsEquippedItemToSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsExpiredGun
// 0x0001 (0x0001 - 0x0000)
struct GunObject_IsExpiredGun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsExpiredGun) == 0x000001, "Wrong alignment on GunObject_IsExpiredGun");
static_assert(sizeof(GunObject_IsExpiredGun) == 0x000001, "Wrong size on GunObject_IsExpiredGun");
static_assert(offsetof(GunObject_IsExpiredGun, ReturnValue) == 0x000000, "Member 'GunObject_IsExpiredGun::ReturnValue' has a wrong offset!");

// Function Stigma.GunObject.IsHiddenSlot
// 0x0002 (0x0002 - 0x0000)
struct GunObject_IsHiddenSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunObject_IsHiddenSlot) == 0x000001, "Wrong alignment on GunObject_IsHiddenSlot");
static_assert(sizeof(GunObject_IsHiddenSlot) == 0x000002, "Wrong size on GunObject_IsHiddenSlot");
static_assert(offsetof(GunObject_IsHiddenSlot, _slot) == 0x000000, "Member 'GunObject_IsHiddenSlot::_slot' has a wrong offset!");
static_assert(offsetof(GunObject_IsHiddenSlot, ReturnValue) == 0x000001, "Member 'GunObject_IsHiddenSlot::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionInfo.GetMyPlayer
// 0x0008 (0x0008 - 0x0000)
struct CompetitionInfo_GetMyPlayer final
{
public:
	class UCompetitionPlayer*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionInfo_GetMyPlayer) == 0x000008, "Wrong alignment on CompetitionInfo_GetMyPlayer");
static_assert(sizeof(CompetitionInfo_GetMyPlayer) == 0x000008, "Wrong size on CompetitionInfo_GetMyPlayer");
static_assert(offsetof(CompetitionInfo_GetMyPlayer, ReturnValue) == 0x000000, "Member 'CompetitionInfo_GetMyPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionInfo.GetPlayers
// 0x0010 (0x0010 - 0x0000)
struct CompetitionInfo_GetPlayers final
{
public:
	TArray<class UCompetitionPlayer*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionInfo_GetPlayers) == 0x000008, "Wrong alignment on CompetitionInfo_GetPlayers");
static_assert(sizeof(CompetitionInfo_GetPlayers) == 0x000010, "Wrong size on CompetitionInfo_GetPlayers");
static_assert(offsetof(CompetitionInfo_GetPlayers, ReturnValue) == 0x000000, "Member 'CompetitionInfo_GetPlayers::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionInfoManager.GetCompetitionBrief
// 0x0010 (0x0010 - 0x0000)
struct CompetitionInfoManager_GetCompetitionBrief final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2236[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UCompetitionBriefInfo*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionInfoManager_GetCompetitionBrief) == 0x000008, "Wrong alignment on CompetitionInfoManager_GetCompetitionBrief");
static_assert(sizeof(CompetitionInfoManager_GetCompetitionBrief) == 0x000010, "Wrong size on CompetitionInfoManager_GetCompetitionBrief");
static_assert(offsetof(CompetitionInfoManager_GetCompetitionBrief, _competition_type) == 0x000000, "Member 'CompetitionInfoManager_GetCompetitionBrief::_competition_type' has a wrong offset!");
static_assert(offsetof(CompetitionInfoManager_GetCompetitionBrief, ReturnValue) == 0x000008, "Member 'CompetitionInfoManager_GetCompetitionBrief::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionInfoManager.GetCompetitionPlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct CompetitionInfoManager_GetCompetitionPlayerInfo final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2237[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UCompetitionInfo*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionInfoManager_GetCompetitionPlayerInfo) == 0x000008, "Wrong alignment on CompetitionInfoManager_GetCompetitionPlayerInfo");
static_assert(sizeof(CompetitionInfoManager_GetCompetitionPlayerInfo) == 0x000010, "Wrong size on CompetitionInfoManager_GetCompetitionPlayerInfo");
static_assert(offsetof(CompetitionInfoManager_GetCompetitionPlayerInfo, _competition_type) == 0x000000, "Member 'CompetitionInfoManager_GetCompetitionPlayerInfo::_competition_type' has a wrong offset!");
static_assert(offsetof(CompetitionInfoManager_GetCompetitionPlayerInfo, ReturnValue) == 0x000008, "Member 'CompetitionInfoManager_GetCompetitionPlayerInfo::ReturnValue' has a wrong offset!");

// Function Stigma.CompetitionInfoManager.SetUseFastStart
// 0x0002 (0x0002 - 0x0000)
struct CompetitionInfoManager_SetUseFastStart final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionInfoManager_SetUseFastStart) == 0x000001, "Wrong alignment on CompetitionInfoManager_SetUseFastStart");
static_assert(sizeof(CompetitionInfoManager_SetUseFastStart) == 0x000002, "Wrong size on CompetitionInfoManager_SetUseFastStart");
static_assert(offsetof(CompetitionInfoManager_SetUseFastStart, _competition_type) == 0x000000, "Member 'CompetitionInfoManager_SetUseFastStart::_competition_type' has a wrong offset!");
static_assert(offsetof(CompetitionInfoManager_SetUseFastStart, _use) == 0x000001, "Member 'CompetitionInfoManager_SetUseFastStart::_use' has a wrong offset!");

// Function Stigma.CompetitionInfoManager.IsEnable
// 0x0002 (0x0002 - 0x0000)
struct CompetitionInfoManager_IsEnable final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetitionInfoManager_IsEnable) == 0x000001, "Wrong alignment on CompetitionInfoManager_IsEnable");
static_assert(sizeof(CompetitionInfoManager_IsEnable) == 0x000002, "Wrong size on CompetitionInfoManager_IsEnable");
static_assert(offsetof(CompetitionInfoManager_IsEnable, _competition_type) == 0x000000, "Member 'CompetitionInfoManager_IsEnable::_competition_type' has a wrong offset!");
static_assert(offsetof(CompetitionInfoManager_IsEnable, ReturnValue) == 0x000001, "Member 'CompetitionInfoManager_IsEnable::ReturnValue' has a wrong offset!");

// Function Stigma.Config.CheckVersion
// 0x0018 (0x0018 - 0x0000)
struct Config_CheckVersion final
{
public:
	class FString                                 _Version;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Config_CheckVersion) == 0x000008, "Wrong alignment on Config_CheckVersion");
static_assert(sizeof(Config_CheckVersion) == 0x000018, "Wrong size on Config_CheckVersion");
static_assert(offsetof(Config_CheckVersion, _Version) == 0x000000, "Member 'Config_CheckVersion::_Version' has a wrong offset!");
static_assert(offsetof(Config_CheckVersion, ReturnValue) == 0x000010, "Member 'Config_CheckVersion::ReturnValue' has a wrong offset!");

// Function Stigma.Config.CompareVersion
// 0x0028 (0x0028 - 0x0000)
struct Config_CompareVersion final
{
public:
	class FString                                 _Version1;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Version2;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223C[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Config_CompareVersion) == 0x000008, "Wrong alignment on Config_CompareVersion");
static_assert(sizeof(Config_CompareVersion) == 0x000028, "Wrong size on Config_CompareVersion");
static_assert(offsetof(Config_CompareVersion, _Version1) == 0x000000, "Member 'Config_CompareVersion::_Version1' has a wrong offset!");
static_assert(offsetof(Config_CompareVersion, _Version2) == 0x000010, "Member 'Config_CompareVersion::_Version2' has a wrong offset!");
static_assert(offsetof(Config_CompareVersion, ReturnValue) == 0x000020, "Member 'Config_CompareVersion::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetAPIURL
// 0x0028 (0x0028 - 0x0000)
struct Config_GetAPIURL final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _uri;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetAPIURL) == 0x000008, "Wrong alignment on Config_GetAPIURL");
static_assert(sizeof(Config_GetAPIURL) == 0x000028, "Wrong size on Config_GetAPIURL");
static_assert(offsetof(Config_GetAPIURL, _world_ctx) == 0x000000, "Member 'Config_GetAPIURL::_world_ctx' has a wrong offset!");
static_assert(offsetof(Config_GetAPIURL, _uri) == 0x000008, "Member 'Config_GetAPIURL::_uri' has a wrong offset!");
static_assert(offsetof(Config_GetAPIURL, ReturnValue) == 0x000018, "Member 'Config_GetAPIURL::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetMQURL
// 0x0018 (0x0018 - 0x0000)
struct Config_GetMQURL final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetMQURL) == 0x000008, "Wrong alignment on Config_GetMQURL");
static_assert(sizeof(Config_GetMQURL) == 0x000018, "Wrong size on Config_GetMQURL");
static_assert(offsetof(Config_GetMQURL, _world_ctx) == 0x000000, "Member 'Config_GetMQURL::_world_ctx' has a wrong offset!");
static_assert(offsetof(Config_GetMQURL, ReturnValue) == 0x000008, "Member 'Config_GetMQURL::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetRunEnvironment
// 0x0001 (0x0001 - 0x0000)
struct Config_GetRunEnvironment final
{
public:
	ERunEnv                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetRunEnvironment) == 0x000001, "Wrong alignment on Config_GetRunEnvironment");
static_assert(sizeof(Config_GetRunEnvironment) == 0x000001, "Wrong size on Config_GetRunEnvironment");
static_assert(offsetof(Config_GetRunEnvironment, ReturnValue) == 0x000000, "Member 'Config_GetRunEnvironment::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetRunEnvironmentName
// 0x0010 (0x0010 - 0x0000)
struct Config_GetRunEnvironmentName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetRunEnvironmentName) == 0x000008, "Wrong alignment on Config_GetRunEnvironmentName");
static_assert(sizeof(Config_GetRunEnvironmentName) == 0x000010, "Wrong size on Config_GetRunEnvironmentName");
static_assert(offsetof(Config_GetRunEnvironmentName, ReturnValue) == 0x000000, "Member 'Config_GetRunEnvironmentName::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetSteamAppID
// 0x0004 (0x0004 - 0x0000)
struct Config_GetSteamAppID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetSteamAppID) == 0x000004, "Wrong alignment on Config_GetSteamAppID");
static_assert(sizeof(Config_GetSteamAppID) == 0x000004, "Wrong size on Config_GetSteamAppID");
static_assert(offsetof(Config_GetSteamAppID, ReturnValue) == 0x000000, "Member 'Config_GetSteamAppID::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetVersionString
// 0x0018 (0x0018 - 0x0000)
struct Config_GetVersionString final
{
public:
	bool                                          _with_revision;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetVersionString) == 0x000008, "Wrong alignment on Config_GetVersionString");
static_assert(sizeof(Config_GetVersionString) == 0x000018, "Wrong size on Config_GetVersionString");
static_assert(offsetof(Config_GetVersionString, _with_revision) == 0x000000, "Member 'Config_GetVersionString::_with_revision' has a wrong offset!");
static_assert(offsetof(Config_GetVersionString, ReturnValue) == 0x000008, "Member 'Config_GetVersionString::ReturnValue' has a wrong offset!");

// Function Stigma.Config.GetWebsocketURL
// 0x0018 (0x0018 - 0x0000)
struct Config_GetWebsocketURL final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_GetWebsocketURL) == 0x000008, "Wrong alignment on Config_GetWebsocketURL");
static_assert(sizeof(Config_GetWebsocketURL) == 0x000018, "Wrong size on Config_GetWebsocketURL");
static_assert(offsetof(Config_GetWebsocketURL, _world_ctx) == 0x000000, "Member 'Config_GetWebsocketURL::_world_ctx' has a wrong offset!");
static_assert(offsetof(Config_GetWebsocketURL, ReturnValue) == 0x000008, "Member 'Config_GetWebsocketURL::ReturnValue' has a wrong offset!");

// Function Stigma.Config.IsDevelopping
// 0x0001 (0x0001 - 0x0000)
struct Config_IsDevelopping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_IsDevelopping) == 0x000001, "Wrong alignment on Config_IsDevelopping");
static_assert(sizeof(Config_IsDevelopping) == 0x000001, "Wrong size on Config_IsDevelopping");
static_assert(offsetof(Config_IsDevelopping, ReturnValue) == 0x000000, "Member 'Config_IsDevelopping::ReturnValue' has a wrong offset!");

// Function Stigma.Config.IsRunEnvironment
// 0x0002 (0x0002 - 0x0000)
struct Config_IsRunEnvironment final
{
public:
	ERunEnv                                       Run_type;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_IsRunEnvironment) == 0x000001, "Wrong alignment on Config_IsRunEnvironment");
static_assert(sizeof(Config_IsRunEnvironment) == 0x000002, "Wrong size on Config_IsRunEnvironment");
static_assert(offsetof(Config_IsRunEnvironment, Run_type) == 0x000000, "Member 'Config_IsRunEnvironment::Run_type' has a wrong offset!");
static_assert(offsetof(Config_IsRunEnvironment, ReturnValue) == 0x000001, "Member 'Config_IsRunEnvironment::ReturnValue' has a wrong offset!");

// Function Stigma.Config.IsStaging
// 0x0001 (0x0001 - 0x0000)
struct Config_IsStaging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Config_IsStaging) == 0x000001, "Wrong alignment on Config_IsStaging");
static_assert(sizeof(Config_IsStaging) == 0x000001, "Wrong size on Config_IsStaging");
static_assert(offsetof(Config_IsStaging, ReturnValue) == 0x000000, "Member 'Config_IsStaging::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.AddMissionConditionReport
// 0x0020 (0x0020 - 0x0000)
struct PlayerContext_AddMissionConditionReport final
{
public:
	EMissionConditionType                         _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2244[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _sub_type;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2245[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_AddMissionConditionReport) == 0x000008, "Wrong alignment on PlayerContext_AddMissionConditionReport");
static_assert(sizeof(PlayerContext_AddMissionConditionReport) == 0x000020, "Wrong size on PlayerContext_AddMissionConditionReport");
static_assert(offsetof(PlayerContext_AddMissionConditionReport, _type) == 0x000000, "Member 'PlayerContext_AddMissionConditionReport::_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_AddMissionConditionReport, _sub_type) == 0x000008, "Member 'PlayerContext_AddMissionConditionReport::_sub_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_AddMissionConditionReport, _value) == 0x000018, "Member 'PlayerContext_AddMissionConditionReport::_value' has a wrong offset!");

// Function Stigma.PlayerContext.BindOnMissionUpdatedEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_BindOnMissionUpdatedEvent final
{
public:
	TDelegate<void(EMissionUpdateType _type, class UMission* _mission)> _proc;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_BindOnMissionUpdatedEvent) == 0x000004, "Wrong alignment on PlayerContext_BindOnMissionUpdatedEvent");
static_assert(sizeof(PlayerContext_BindOnMissionUpdatedEvent) == 0x000010, "Wrong size on PlayerContext_BindOnMissionUpdatedEvent");
static_assert(offsetof(PlayerContext_BindOnMissionUpdatedEvent, _proc) == 0x000000, "Member 'PlayerContext_BindOnMissionUpdatedEvent::_proc' has a wrong offset!");

// Function Stigma.PlayerContext.DEBUG_SetPassiveSkillLevel
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_DEBUG_SetPassiveSkillLevel final
{
public:
	struct FPassiveSkillID                        _skill_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_level;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2246[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_DEBUG_SetPassiveSkillLevel) == 0x000008, "Wrong alignment on PlayerContext_DEBUG_SetPassiveSkillLevel");
static_assert(sizeof(PlayerContext_DEBUG_SetPassiveSkillLevel) == 0x000018, "Wrong size on PlayerContext_DEBUG_SetPassiveSkillLevel");
static_assert(offsetof(PlayerContext_DEBUG_SetPassiveSkillLevel, _skill_id) == 0x000000, "Member 'PlayerContext_DEBUG_SetPassiveSkillLevel::_skill_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_DEBUG_SetPassiveSkillLevel, _skill_level) == 0x000010, "Member 'PlayerContext_DEBUG_SetPassiveSkillLevel::_skill_level' has a wrong offset!");

// Function Stigma.PlayerContext.GetFilteredInvenItems
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetFilteredInvenItems final
{
public:
	bool                                          _include_box;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _include_currency;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _include_function;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2247[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetFilteredInvenItems) == 0x000008, "Wrong alignment on PlayerContext_GetFilteredInvenItems");
static_assert(sizeof(PlayerContext_GetFilteredInvenItems) == 0x000018, "Wrong size on PlayerContext_GetFilteredInvenItems");
static_assert(offsetof(PlayerContext_GetFilteredInvenItems, _include_box) == 0x000000, "Member 'PlayerContext_GetFilteredInvenItems::_include_box' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetFilteredInvenItems, _include_currency) == 0x000001, "Member 'PlayerContext_GetFilteredInvenItems::_include_currency' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetFilteredInvenItems, _include_function) == 0x000002, "Member 'PlayerContext_GetFilteredInvenItems::_include_function' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetFilteredInvenItems, ReturnValue) == 0x000008, "Member 'PlayerContext_GetFilteredInvenItems::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetOptimalGunByControlPower
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetOptimalGunByControlPower final
{
public:
	float                                         _chara_cp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2248[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UGunObject*                             _cur_gun;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetOptimalGunByControlPower) == 0x000008, "Wrong alignment on PlayerContext_GetOptimalGunByControlPower");
static_assert(sizeof(PlayerContext_GetOptimalGunByControlPower) == 0x000018, "Wrong size on PlayerContext_GetOptimalGunByControlPower");
static_assert(offsetof(PlayerContext_GetOptimalGunByControlPower, _chara_cp) == 0x000000, "Member 'PlayerContext_GetOptimalGunByControlPower::_chara_cp' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetOptimalGunByControlPower, _cur_gun) == 0x000008, "Member 'PlayerContext_GetOptimalGunByControlPower::_cur_gun' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetOptimalGunByControlPower, ReturnValue) == 0x000010, "Member 'PlayerContext_GetOptimalGunByControlPower::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.OnMissionUpdated
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_OnMissionUpdated final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2249[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _mission;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_OnMissionUpdated) == 0x000008, "Wrong alignment on PlayerContext_OnMissionUpdated");
static_assert(sizeof(PlayerContext_OnMissionUpdated) == 0x000010, "Wrong size on PlayerContext_OnMissionUpdated");
static_assert(offsetof(PlayerContext_OnMissionUpdated, _type) == 0x000000, "Member 'PlayerContext_OnMissionUpdated::_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_OnMissionUpdated, _mission) == 0x000008, "Member 'PlayerContext_OnMissionUpdated::_mission' has a wrong offset!");

// Function Stigma.PlayerContext.RefreshCharacterOwnInfo
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_RefreshCharacterOwnInfo final
{
public:
	bool                                          _is_in_battle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_RefreshCharacterOwnInfo) == 0x000001, "Wrong alignment on PlayerContext_RefreshCharacterOwnInfo");
static_assert(sizeof(PlayerContext_RefreshCharacterOwnInfo) == 0x000001, "Wrong size on PlayerContext_RefreshCharacterOwnInfo");
static_assert(offsetof(PlayerContext_RefreshCharacterOwnInfo, _is_in_battle) == 0x000000, "Member 'PlayerContext_RefreshCharacterOwnInfo::_is_in_battle' has a wrong offset!");

// Function Stigma.PlayerContext.RefreshGunOwnInfo
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_RefreshGunOwnInfo final
{
public:
	bool                                          _is_in_battle;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_RefreshGunOwnInfo) == 0x000001, "Wrong alignment on PlayerContext_RefreshGunOwnInfo");
static_assert(sizeof(PlayerContext_RefreshGunOwnInfo) == 0x000001, "Wrong size on PlayerContext_RefreshGunOwnInfo");
static_assert(offsetof(PlayerContext_RefreshGunOwnInfo, _is_in_battle) == 0x000000, "Member 'PlayerContext_RefreshGunOwnInfo::_is_in_battle' has a wrong offset!");

// Function Stigma.PlayerContext.SetEmblem
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_SetEmblem final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetEmblem) == 0x000008, "Wrong alignment on PlayerContext_SetEmblem");
static_assert(sizeof(PlayerContext_SetEmblem) == 0x000010, "Wrong size on PlayerContext_SetEmblem");
static_assert(offsetof(PlayerContext_SetEmblem, _item_id) == 0x000000, "Member 'PlayerContext_SetEmblem::_item_id' has a wrong offset!");

// Function Stigma.PlayerContext.SetNicknameFX
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_SetNicknameFX final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetNicknameFX) == 0x000008, "Wrong alignment on PlayerContext_SetNicknameFX");
static_assert(sizeof(PlayerContext_SetNicknameFX) == 0x000010, "Wrong size on PlayerContext_SetNicknameFX");
static_assert(offsetof(PlayerContext_SetNicknameFX, _item_id) == 0x000000, "Member 'PlayerContext_SetNicknameFX::_item_id' has a wrong offset!");

// Function Stigma.PlayerContext.SetProfileCard
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_SetProfileCard final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_SetProfileCard) == 0x000008, "Wrong alignment on PlayerContext_SetProfileCard");
static_assert(sizeof(PlayerContext_SetProfileCard) == 0x000010, "Wrong size on PlayerContext_SetProfileCard");
static_assert(offsetof(PlayerContext_SetProfileCard, _item_id) == 0x000000, "Member 'PlayerContext_SetProfileCard::_item_id' has a wrong offset!");

// Function Stigma.PlayerContext.UnBindOnMissionUpdatedEvent
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_UnBindOnMissionUpdatedEvent final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_UnBindOnMissionUpdatedEvent) == 0x000008, "Wrong alignment on PlayerContext_UnBindOnMissionUpdatedEvent");
static_assert(sizeof(PlayerContext_UnBindOnMissionUpdatedEvent) == 0x000008, "Wrong size on PlayerContext_UnBindOnMissionUpdatedEvent");
static_assert(offsetof(PlayerContext_UnBindOnMissionUpdatedEvent, _obj) == 0x000000, "Member 'PlayerContext_UnBindOnMissionUpdatedEvent::_obj' has a wrong offset!");

// Function Stigma.PlayerContext.FindFunctionByTarget
// 0x0040 (0x0040 - 0x0000)
struct PlayerContext_FindFunctionByTarget final
{
public:
	EFuncTarget                                   _target;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FAppliedFunction                       _function;                                         // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224B[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_FindFunctionByTarget) == 0x000008, "Wrong alignment on PlayerContext_FindFunctionByTarget");
static_assert(sizeof(PlayerContext_FindFunctionByTarget) == 0x000040, "Wrong size on PlayerContext_FindFunctionByTarget");
static_assert(offsetof(PlayerContext_FindFunctionByTarget, _target) == 0x000000, "Member 'PlayerContext_FindFunctionByTarget::_target' has a wrong offset!");
static_assert(offsetof(PlayerContext_FindFunctionByTarget, _function) == 0x000008, "Member 'PlayerContext_FindFunctionByTarget::_function' has a wrong offset!");
static_assert(offsetof(PlayerContext_FindFunctionByTarget, ReturnValue) == 0x000038, "Member 'PlayerContext_FindFunctionByTarget::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.FindGunObjectByPreset
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_FindGunObjectByPreset final
{
public:
	struct FGunPreset                             _preset;                                           // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_FindGunObjectByPreset) == 0x000008, "Wrong alignment on PlayerContext_FindGunObjectByPreset");
static_assert(sizeof(PlayerContext_FindGunObjectByPreset) == 0x000018, "Wrong size on PlayerContext_FindGunObjectByPreset");
static_assert(offsetof(PlayerContext_FindGunObjectByPreset, _preset) == 0x000000, "Member 'PlayerContext_FindGunObjectByPreset::_preset' has a wrong offset!");
static_assert(offsetof(PlayerContext_FindGunObjectByPreset, ReturnValue) == 0x000010, "Member 'PlayerContext_FindGunObjectByPreset::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetActiveFunctions
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetActiveFunctions final
{
public:
	TArray<struct FActiveFunction>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetActiveFunctions) == 0x000008, "Wrong alignment on PlayerContext_GetActiveFunctions");
static_assert(sizeof(PlayerContext_GetActiveFunctions) == 0x000010, "Wrong size on PlayerContext_GetActiveFunctions");
static_assert(offsetof(PlayerContext_GetActiveFunctions, ReturnValue) == 0x000000, "Member 'PlayerContext_GetActiveFunctions::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetAllCharacters
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetAllCharacters final
{
public:
	TArray<struct FCharacterInfo>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetAllCharacters) == 0x000008, "Wrong alignment on PlayerContext_GetAllCharacters");
static_assert(sizeof(PlayerContext_GetAllCharacters) == 0x000010, "Wrong size on PlayerContext_GetAllCharacters");
static_assert(offsetof(PlayerContext_GetAllCharacters, ReturnValue) == 0x000000, "Member 'PlayerContext_GetAllCharacters::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetArmor
// 0x0002 (0x0002 - 0x0000)
struct PlayerContext_GetArmor final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetArmor) == 0x000001, "Wrong alignment on PlayerContext_GetArmor");
static_assert(sizeof(PlayerContext_GetArmor) == 0x000002, "Wrong size on PlayerContext_GetArmor");
static_assert(offsetof(PlayerContext_GetArmor, _type) == 0x000000, "Member 'PlayerContext_GetArmor::_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetArmor, ReturnValue) == 0x000001, "Member 'PlayerContext_GetArmor::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetBody
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetBody final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetBody) == 0x000008, "Wrong alignment on PlayerContext_GetBody");
static_assert(sizeof(PlayerContext_GetBody) == 0x000018, "Wrong size on PlayerContext_GetBody");
static_assert(offsetof(PlayerContext_GetBody, _type) == 0x000000, "Member 'PlayerContext_GetBody::_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetBody, ReturnValue) == 0x000008, "Member 'PlayerContext_GetBody::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetBooster
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetBooster final
{
public:
	int32                                         _slot_index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Booster                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetBooster) == 0x000008, "Wrong alignment on PlayerContext_GetBooster");
static_assert(sizeof(PlayerContext_GetBooster) == 0x000018, "Wrong size on PlayerContext_GetBooster");
static_assert(offsetof(PlayerContext_GetBooster, _slot_index) == 0x000000, "Member 'PlayerContext_GetBooster::_slot_index' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetBooster, ReturnValue) == 0x000008, "Member 'PlayerContext_GetBooster::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetBoosterSlotExpiry
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetBoosterSlotExpiry final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetBoosterSlotExpiry) == 0x000008, "Wrong alignment on PlayerContext_GetBoosterSlotExpiry");
static_assert(sizeof(PlayerContext_GetBoosterSlotExpiry) == 0x000010, "Wrong size on PlayerContext_GetBoosterSlotExpiry");
static_assert(offsetof(PlayerContext_GetBoosterSlotExpiry, _zidx) == 0x000000, "Member 'PlayerContext_GetBoosterSlotExpiry::_zidx' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetBoosterSlotExpiry, ReturnValue) == 0x000008, "Member 'PlayerContext_GetBoosterSlotExpiry::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetBoosterSlotStatus
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetBoosterSlotStatus final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserSlotStatus                               ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_GetBoosterSlotStatus) == 0x000004, "Wrong alignment on PlayerContext_GetBoosterSlotStatus");
static_assert(sizeof(PlayerContext_GetBoosterSlotStatus) == 0x000008, "Wrong size on PlayerContext_GetBoosterSlotStatus");
static_assert(offsetof(PlayerContext_GetBoosterSlotStatus, _zidx) == 0x000000, "Member 'PlayerContext_GetBoosterSlotStatus::_zidx' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetBoosterSlotStatus, ReturnValue) == 0x000004, "Member 'PlayerContext_GetBoosterSlotStatus::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetBoosterTicketCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetBoosterTicketCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetBoosterTicketCount) == 0x000004, "Wrong alignment on PlayerContext_GetBoosterTicketCount");
static_assert(sizeof(PlayerContext_GetBoosterTicketCount) == 0x000004, "Wrong size on PlayerContext_GetBoosterTicketCount");
static_assert(offsetof(PlayerContext_GetBoosterTicketCount, ReturnValue) == 0x000000, "Member 'PlayerContext_GetBoosterTicketCount::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCharacter
// 0x0060 (0x0060 - 0x0000)
struct PlayerContext_GetCharacter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2250[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterInfo                         ReturnValue;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCharacter) == 0x000008, "Wrong alignment on PlayerContext_GetCharacter");
static_assert(sizeof(PlayerContext_GetCharacter) == 0x000060, "Wrong size on PlayerContext_GetCharacter");
static_assert(offsetof(PlayerContext_GetCharacter, _chara_type) == 0x000000, "Member 'PlayerContext_GetCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetCharacter, ReturnValue) == 0x000008, "Member 'PlayerContext_GetCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCharaType
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetCharaType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCharaType) == 0x000001, "Wrong alignment on PlayerContext_GetCharaType");
static_assert(sizeof(PlayerContext_GetCharaType) == 0x000001, "Wrong size on PlayerContext_GetCharaType");
static_assert(offsetof(PlayerContext_GetCharaType, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCountry
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetCountry final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCountry) == 0x000008, "Wrong alignment on PlayerContext_GetCountry");
static_assert(sizeof(PlayerContext_GetCountry) == 0x000010, "Wrong size on PlayerContext_GetCountry");
static_assert(offsetof(PlayerContext_GetCountry, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCountry::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCurrentArmor
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetCurrentArmor final
{
public:
	EArmorType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCurrentArmor) == 0x000001, "Wrong alignment on PlayerContext_GetCurrentArmor");
static_assert(sizeof(PlayerContext_GetCurrentArmor) == 0x000001, "Wrong size on PlayerContext_GetCurrentArmor");
static_assert(offsetof(PlayerContext_GetCurrentArmor, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCurrentArmor::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCurrentBody
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetCurrentBody final
{
public:
	struct FItemID_Skin_Body                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCurrentBody) == 0x000008, "Wrong alignment on PlayerContext_GetCurrentBody");
static_assert(sizeof(PlayerContext_GetCurrentBody) == 0x000010, "Wrong size on PlayerContext_GetCurrentBody");
static_assert(offsetof(PlayerContext_GetCurrentBody, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCurrentBody::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCurrentCharacter
// 0x0058 (0x0058 - 0x0000)
struct PlayerContext_GetCurrentCharacter final
{
public:
	struct FCharacterInfo                         ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCurrentCharacter) == 0x000008, "Wrong alignment on PlayerContext_GetCurrentCharacter");
static_assert(sizeof(PlayerContext_GetCurrentCharacter) == 0x000058, "Wrong size on PlayerContext_GetCurrentCharacter");
static_assert(offsetof(PlayerContext_GetCurrentCharacter, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCurrentCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCurrentGunPreset
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetCurrentGunPreset final
{
public:
	struct FGunPreset                             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCurrentGunPreset) == 0x000008, "Wrong alignment on PlayerContext_GetCurrentGunPreset");
static_assert(sizeof(PlayerContext_GetCurrentGunPreset) == 0x000010, "Wrong size on PlayerContext_GetCurrentGunPreset");
static_assert(offsetof(PlayerContext_GetCurrentGunPreset, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCurrentGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetCurrentHead
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetCurrentHead final
{
public:
	struct FItemID_Skin_Head                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetCurrentHead) == 0x000008, "Wrong alignment on PlayerContext_GetCurrentHead");
static_assert(sizeof(PlayerContext_GetCurrentHead) == 0x000010, "Wrong size on PlayerContext_GetCurrentHead");
static_assert(offsetof(PlayerContext_GetCurrentHead, ReturnValue) == 0x000000, "Member 'PlayerContext_GetCurrentHead::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetEmblem
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetEmblem final
{
public:
	struct FItemID_Emblem                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetEmblem) == 0x000008, "Wrong alignment on PlayerContext_GetEmblem");
static_assert(sizeof(PlayerContext_GetEmblem) == 0x000010, "Wrong size on PlayerContext_GetEmblem");
static_assert(offsetof(PlayerContext_GetEmblem, ReturnValue) == 0x000000, "Member 'PlayerContext_GetEmblem::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetFuncContext
// 0x01A0 (0x01A0 - 0x0000)
struct PlayerContext_GetFuncContext final
{
public:
	struct FPlayerFuncContext                     ReturnValue;                                       // 0x0000(0x01A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetFuncContext) == 0x000008, "Wrong alignment on PlayerContext_GetFuncContext");
static_assert(sizeof(PlayerContext_GetFuncContext) == 0x0001A0, "Wrong size on PlayerContext_GetFuncContext");
static_assert(offsetof(PlayerContext_GetFuncContext, ReturnValue) == 0x000000, "Member 'PlayerContext_GetFuncContext::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetGMFunctions
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetGMFunctions final
{
public:
	TArray<struct FGMFunction>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGMFunctions) == 0x000008, "Wrong alignment on PlayerContext_GetGMFunctions");
static_assert(sizeof(PlayerContext_GetGMFunctions) == 0x000010, "Wrong size on PlayerContext_GetGMFunctions");
static_assert(offsetof(PlayerContext_GetGMFunctions, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGMFunctions::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetGunMap
// 0x0050 (0x0050 - 0x0000)
struct PlayerContext_GetGunMap final
{
public:
	TMap<struct FGunPreset, class UGunObject*>    ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGunMap) == 0x000008, "Wrong alignment on PlayerContext_GetGunMap");
static_assert(sizeof(PlayerContext_GetGunMap) == 0x000050, "Wrong size on PlayerContext_GetGunMap");
static_assert(offsetof(PlayerContext_GetGunMap, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGunMap::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetGunPreset
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetGunPreset final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2251[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGunPreset) == 0x000008, "Wrong alignment on PlayerContext_GetGunPreset");
static_assert(sizeof(PlayerContext_GetGunPreset) == 0x000018, "Wrong size on PlayerContext_GetGunPreset");
static_assert(offsetof(PlayerContext_GetGunPreset, _type) == 0x000000, "Member 'PlayerContext_GetGunPreset::_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetGunPreset, ReturnValue) == 0x000008, "Member 'PlayerContext_GetGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetGunPresetSlotsStatus
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetGunPresetSlotsStatus final
{
public:
	TArray<bool>                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGunPresetSlotsStatus) == 0x000008, "Wrong alignment on PlayerContext_GetGunPresetSlotsStatus");
static_assert(sizeof(PlayerContext_GetGunPresetSlotsStatus) == 0x000010, "Wrong size on PlayerContext_GetGunPresetSlotsStatus");
static_assert(offsetof(PlayerContext_GetGunPresetSlotsStatus, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGunPresetSlotsStatus::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetGunPresetSlotStatus
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetGunPresetSlotStatus final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2252[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_GetGunPresetSlotStatus) == 0x000004, "Wrong alignment on PlayerContext_GetGunPresetSlotStatus");
static_assert(sizeof(PlayerContext_GetGunPresetSlotStatus) == 0x000008, "Wrong size on PlayerContext_GetGunPresetSlotStatus");
static_assert(offsetof(PlayerContext_GetGunPresetSlotStatus, _zidx) == 0x000000, "Member 'PlayerContext_GetGunPresetSlotStatus::_zidx' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetGunPresetSlotStatus, ReturnValue) == 0x000004, "Member 'PlayerContext_GetGunPresetSlotStatus::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetGuns
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetGuns final
{
public:
	TArray<class UGunObject*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetGuns) == 0x000008, "Wrong alignment on PlayerContext_GetGuns");
static_assert(sizeof(PlayerContext_GetGuns) == 0x000010, "Wrong size on PlayerContext_GetGuns");
static_assert(offsetof(PlayerContext_GetGuns, ReturnValue) == 0x000000, "Member 'PlayerContext_GetGuns::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetHavingCharas
// 0x0050 (0x0050 - 0x0000)
struct PlayerContext_GetHavingCharas final
{
public:
	TMap<ECharaType, struct FCharacterInfo>       ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetHavingCharas) == 0x000008, "Wrong alignment on PlayerContext_GetHavingCharas");
static_assert(sizeof(PlayerContext_GetHavingCharas) == 0x000050, "Wrong size on PlayerContext_GetHavingCharas");
static_assert(offsetof(PlayerContext_GetHavingCharas, ReturnValue) == 0x000000, "Member 'PlayerContext_GetHavingCharas::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetHead
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetHead final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2253[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetHead) == 0x000008, "Wrong alignment on PlayerContext_GetHead");
static_assert(sizeof(PlayerContext_GetHead) == 0x000018, "Wrong size on PlayerContext_GetHead");
static_assert(offsetof(PlayerContext_GetHead, _type) == 0x000000, "Member 'PlayerContext_GetHead::_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetHead, ReturnValue) == 0x000008, "Member 'PlayerContext_GetHead::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetInvenItems
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetInvenItems final
{
public:
	class UInvenItems*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetInvenItems) == 0x000008, "Wrong alignment on PlayerContext_GetInvenItems");
static_assert(sizeof(PlayerContext_GetInvenItems) == 0x000008, "Wrong size on PlayerContext_GetInvenItems");
static_assert(offsetof(PlayerContext_GetInvenItems, ReturnValue) == 0x000000, "Member 'PlayerContext_GetInvenItems::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetInvenItemsByGunParts
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetInvenItemsByGunParts final
{
public:
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2254[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetInvenItemsByGunParts) == 0x000008, "Wrong alignment on PlayerContext_GetInvenItemsByGunParts");
static_assert(sizeof(PlayerContext_GetInvenItemsByGunParts) == 0x000018, "Wrong size on PlayerContext_GetInvenItemsByGunParts");
static_assert(offsetof(PlayerContext_GetInvenItemsByGunParts, _gun_parts_slot) == 0x000000, "Member 'PlayerContext_GetInvenItemsByGunParts::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetInvenItemsByGunParts, ReturnValue) == 0x000008, "Member 'PlayerContext_GetInvenItemsByGunParts::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetJoinType
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetJoinType final
{
public:
	EJoinType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetJoinType) == 0x000001, "Wrong alignment on PlayerContext_GetJoinType");
static_assert(sizeof(PlayerContext_GetJoinType) == 0x000001, "Wrong size on PlayerContext_GetJoinType");
static_assert(offsetof(PlayerContext_GetJoinType, ReturnValue) == 0x000000, "Member 'PlayerContext_GetJoinType::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetKPI
// 0x000C (0x000C - 0x0000)
struct PlayerContext_GetKPI final
{
public:
	struct FPlayerKPI                             ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetKPI) == 0x000004, "Wrong alignment on PlayerContext_GetKPI");
static_assert(sizeof(PlayerContext_GetKPI) == 0x00000C, "Wrong size on PlayerContext_GetKPI");
static_assert(offsetof(PlayerContext_GetKPI, ReturnValue) == 0x000000, "Member 'PlayerContext_GetKPI::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetLevel) == 0x000004, "Wrong alignment on PlayerContext_GetLevel");
static_assert(sizeof(PlayerContext_GetLevel) == 0x000004, "Wrong size on PlayerContext_GetLevel");
static_assert(offsetof(PlayerContext_GetLevel, ReturnValue) == 0x000000, "Member 'PlayerContext_GetLevel::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetNickname) == 0x000008, "Wrong alignment on PlayerContext_GetNickname");
static_assert(sizeof(PlayerContext_GetNickname) == 0x000018, "Wrong size on PlayerContext_GetNickname");
static_assert(offsetof(PlayerContext_GetNickname, ReturnValue) == 0x000000, "Member 'PlayerContext_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetNicknameFX
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetNicknameFX final
{
public:
	struct FItemID_NicknameFX                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetNicknameFX) == 0x000008, "Wrong alignment on PlayerContext_GetNicknameFX");
static_assert(sizeof(PlayerContext_GetNicknameFX) == 0x000010, "Wrong size on PlayerContext_GetNicknameFX");
static_assert(offsetof(PlayerContext_GetNicknameFX, ReturnValue) == 0x000000, "Member 'PlayerContext_GetNicknameFX::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetPassiveSkillLevel
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetPassiveSkillLevel final
{
public:
	struct FPassiveSkillID                        _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2255[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_GetPassiveSkillLevel) == 0x000008, "Wrong alignment on PlayerContext_GetPassiveSkillLevel");
static_assert(sizeof(PlayerContext_GetPassiveSkillLevel) == 0x000018, "Wrong size on PlayerContext_GetPassiveSkillLevel");
static_assert(offsetof(PlayerContext_GetPassiveSkillLevel, _id) == 0x000000, "Member 'PlayerContext_GetPassiveSkillLevel::_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetPassiveSkillLevel, ReturnValue) == 0x000010, "Member 'PlayerContext_GetPassiveSkillLevel::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetPickedCharaCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetPickedCharaCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetPickedCharaCount) == 0x000004, "Wrong alignment on PlayerContext_GetPickedCharaCount");
static_assert(sizeof(PlayerContext_GetPickedCharaCount) == 0x000004, "Wrong size on PlayerContext_GetPickedCharaCount");
static_assert(offsetof(PlayerContext_GetPickedCharaCount, ReturnValue) == 0x000000, "Member 'PlayerContext_GetPickedCharaCount::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetPickedCharaType
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_GetPickedCharaType final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2256[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_GetPickedCharaType) == 0x000004, "Wrong alignment on PlayerContext_GetPickedCharaType");
static_assert(sizeof(PlayerContext_GetPickedCharaType) == 0x000008, "Wrong size on PlayerContext_GetPickedCharaType");
static_assert(offsetof(PlayerContext_GetPickedCharaType, _zidx) == 0x000000, "Member 'PlayerContext_GetPickedCharaType::_zidx' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetPickedCharaType, ReturnValue) == 0x000004, "Member 'PlayerContext_GetPickedCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetPreviewCharaInfo
// 0x0058 (0x0058 - 0x0000)
struct PlayerContext_GetPreviewCharaInfo final
{
public:
	struct FCharacterInfo                         ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetPreviewCharaInfo) == 0x000008, "Wrong alignment on PlayerContext_GetPreviewCharaInfo");
static_assert(sizeof(PlayerContext_GetPreviewCharaInfo) == 0x000058, "Wrong size on PlayerContext_GetPreviewCharaInfo");
static_assert(offsetof(PlayerContext_GetPreviewCharaInfo, ReturnValue) == 0x000000, "Member 'PlayerContext_GetPreviewCharaInfo::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetPrivilege
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetPrivilege final
{
public:
	struct FPlayerPrivilege                       ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetPrivilege) == 0x000001, "Wrong alignment on PlayerContext_GetPrivilege");
static_assert(sizeof(PlayerContext_GetPrivilege) == 0x000001, "Wrong size on PlayerContext_GetPrivilege");
static_assert(offsetof(PlayerContext_GetPrivilege, ReturnValue) == 0x000000, "Member 'PlayerContext_GetPrivilege::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetProfileCard
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetProfileCard final
{
public:
	struct FItemID_ProfileCard                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetProfileCard) == 0x000008, "Wrong alignment on PlayerContext_GetProfileCard");
static_assert(sizeof(PlayerContext_GetProfileCard) == 0x000010, "Wrong size on PlayerContext_GetProfileCard");
static_assert(offsetof(PlayerContext_GetProfileCard, ReturnValue) == 0x000000, "Member 'PlayerContext_GetProfileCard::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetRegion
// 0x0010 (0x0010 - 0x0000)
struct PlayerContext_GetRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetRegion) == 0x000008, "Wrong alignment on PlayerContext_GetRegion");
static_assert(sizeof(PlayerContext_GetRegion) == 0x000010, "Wrong size on PlayerContext_GetRegion");
static_assert(offsetof(PlayerContext_GetRegion, ReturnValue) == 0x000000, "Member 'PlayerContext_GetRegion::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetRole
// 0x0003 (0x0003 - 0x0000)
struct PlayerContext_GetRole final
{
public:
	struct FUserRole                              ReturnValue;                                       // 0x0000(0x0003)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetRole) == 0x000001, "Wrong alignment on PlayerContext_GetRole");
static_assert(sizeof(PlayerContext_GetRole) == 0x000003, "Wrong size on PlayerContext_GetRole");
static_assert(offsetof(PlayerContext_GetRole, ReturnValue) == 0x000000, "Member 'PlayerContext_GetRole::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetTeam) == 0x000001, "Wrong alignment on PlayerContext_GetTeam");
static_assert(sizeof(PlayerContext_GetTeam) == 0x000001, "Wrong size on PlayerContext_GetTeam");
static_assert(offsetof(PlayerContext_GetTeam, ReturnValue) == 0x000000, "Member 'PlayerContext_GetTeam::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetTier
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_GetTier final
{
public:
	ETier                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetTier) == 0x000001, "Wrong alignment on PlayerContext_GetTier");
static_assert(sizeof(PlayerContext_GetTier) == 0x000001, "Wrong size on PlayerContext_GetTier");
static_assert(offsetof(PlayerContext_GetTier, ReturnValue) == 0x000000, "Member 'PlayerContext_GetTier::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetTopInvenItemByID
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_GetTopInvenItemByID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItem*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetTopInvenItemByID) == 0x000008, "Wrong alignment on PlayerContext_GetTopInvenItemByID");
static_assert(sizeof(PlayerContext_GetTopInvenItemByID) == 0x000018, "Wrong size on PlayerContext_GetTopInvenItemByID");
static_assert(offsetof(PlayerContext_GetTopInvenItemByID, _id) == 0x000000, "Member 'PlayerContext_GetTopInvenItemByID::_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_GetTopInvenItemByID, ReturnValue) == 0x000010, "Member 'PlayerContext_GetTopInvenItemByID::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetTotalSkillPoint
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetTotalSkillPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetTotalSkillPoint) == 0x000004, "Wrong alignment on PlayerContext_GetTotalSkillPoint");
static_assert(sizeof(PlayerContext_GetTotalSkillPoint) == 0x000004, "Wrong size on PlayerContext_GetTotalSkillPoint");
static_assert(offsetof(PlayerContext_GetTotalSkillPoint, ReturnValue) == 0x000000, "Member 'PlayerContext_GetTotalSkillPoint::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.GetTutorialProgress
// 0x0004 (0x0004 - 0x0000)
struct PlayerContext_GetTutorialProgress final
{
public:
	struct FTutorialProgress                      ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_GetTutorialProgress) == 0x000004, "Wrong alignment on PlayerContext_GetTutorialProgress");
static_assert(sizeof(PlayerContext_GetTutorialProgress) == 0x000004, "Wrong size on PlayerContext_GetTutorialProgress");
static_assert(offsetof(PlayerContext_GetTutorialProgress, ReturnValue) == 0x000000, "Member 'PlayerContext_GetTutorialProgress::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.HasCharacter
// 0x0002 (0x0002 - 0x0000)
struct PlayerContext_HasCharacter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_HasCharacter) == 0x000001, "Wrong alignment on PlayerContext_HasCharacter");
static_assert(sizeof(PlayerContext_HasCharacter) == 0x000002, "Wrong size on PlayerContext_HasCharacter");
static_assert(offsetof(PlayerContext_HasCharacter, _chara_type) == 0x000000, "Member 'PlayerContext_HasCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(PlayerContext_HasCharacter, ReturnValue) == 0x000001, "Member 'PlayerContext_HasCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.HasItem
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_HasItem final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2257[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_HasItem) == 0x000008, "Wrong alignment on PlayerContext_HasItem");
static_assert(sizeof(PlayerContext_HasItem) == 0x000018, "Wrong size on PlayerContext_HasItem");
static_assert(offsetof(PlayerContext_HasItem, _item_id) == 0x000000, "Member 'PlayerContext_HasItem::_item_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_HasItem, ReturnValue) == 0x000010, "Member 'PlayerContext_HasItem::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.HasUniqueItem
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_HasUniqueItem final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2258[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_HasUniqueItem) == 0x000008, "Wrong alignment on PlayerContext_HasUniqueItem");
static_assert(sizeof(PlayerContext_HasUniqueItem) == 0x000018, "Wrong size on PlayerContext_HasUniqueItem");
static_assert(offsetof(PlayerContext_HasUniqueItem, _item_id) == 0x000000, "Member 'PlayerContext_HasUniqueItem::_item_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_HasUniqueItem, ReturnValue) == 0x000010, "Member 'PlayerContext_HasUniqueItem::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.HasValidCharacters
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_HasValidCharacters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_HasValidCharacters) == 0x000001, "Wrong alignment on PlayerContext_HasValidCharacters");
static_assert(sizeof(PlayerContext_HasValidCharacters) == 0x000001, "Wrong size on PlayerContext_HasValidCharacters");
static_assert(offsetof(PlayerContext_HasValidCharacters, ReturnValue) == 0x000000, "Member 'PlayerContext_HasValidCharacters::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsAI
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_IsAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_IsAI) == 0x000001, "Wrong alignment on PlayerContext_IsAI");
static_assert(sizeof(PlayerContext_IsAI) == 0x000001, "Wrong size on PlayerContext_IsAI");
static_assert(offsetof(PlayerContext_IsAI, ReturnValue) == 0x000000, "Member 'PlayerContext_IsAI::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsBoosterSlotActive
// 0x0008 (0x0008 - 0x0000)
struct PlayerContext_IsBoosterSlotActive final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2259[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_IsBoosterSlotActive) == 0x000004, "Wrong alignment on PlayerContext_IsBoosterSlotActive");
static_assert(sizeof(PlayerContext_IsBoosterSlotActive) == 0x000008, "Wrong size on PlayerContext_IsBoosterSlotActive");
static_assert(offsetof(PlayerContext_IsBoosterSlotActive, _zidx) == 0x000000, "Member 'PlayerContext_IsBoosterSlotActive::_zidx' has a wrong offset!");
static_assert(offsetof(PlayerContext_IsBoosterSlotActive, ReturnValue) == 0x000004, "Member 'PlayerContext_IsBoosterSlotActive::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsEquippedItem
// 0x0020 (0x0020 - 0x0000)
struct PlayerContext_IsEquippedItem final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_IsEquippedItem) == 0x000008, "Wrong alignment on PlayerContext_IsEquippedItem");
static_assert(sizeof(PlayerContext_IsEquippedItem) == 0x000020, "Wrong size on PlayerContext_IsEquippedItem");
static_assert(offsetof(PlayerContext_IsEquippedItem, _category) == 0x000000, "Member 'PlayerContext_IsEquippedItem::_category' has a wrong offset!");
static_assert(offsetof(PlayerContext_IsEquippedItem, _item_id) == 0x000008, "Member 'PlayerContext_IsEquippedItem::_item_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_IsEquippedItem, ReturnValue) == 0x000018, "Member 'PlayerContext_IsEquippedItem::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsFunctionApplied
// 0x0018 (0x0018 - 0x0000)
struct PlayerContext_IsFunctionApplied final
{
public:
	struct FItemIDRef_Function                    _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PlayerContext_IsFunctionApplied) == 0x000008, "Wrong alignment on PlayerContext_IsFunctionApplied");
static_assert(sizeof(PlayerContext_IsFunctionApplied) == 0x000018, "Wrong size on PlayerContext_IsFunctionApplied");
static_assert(offsetof(PlayerContext_IsFunctionApplied, _item_id) == 0x000000, "Member 'PlayerContext_IsFunctionApplied::_item_id' has a wrong offset!");
static_assert(offsetof(PlayerContext_IsFunctionApplied, ReturnValue) == 0x000010, "Member 'PlayerContext_IsFunctionApplied::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsReadyToFight
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_IsReadyToFight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_IsReadyToFight) == 0x000001, "Wrong alignment on PlayerContext_IsReadyToFight");
static_assert(sizeof(PlayerContext_IsReadyToFight) == 0x000001, "Wrong size on PlayerContext_IsReadyToFight");
static_assert(offsetof(PlayerContext_IsReadyToFight, ReturnValue) == 0x000000, "Member 'PlayerContext_IsReadyToFight::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsTutorialCompleted
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_IsTutorialCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_IsTutorialCompleted) == 0x000001, "Wrong alignment on PlayerContext_IsTutorialCompleted");
static_assert(sizeof(PlayerContext_IsTutorialCompleted) == 0x000001, "Wrong size on PlayerContext_IsTutorialCompleted");
static_assert(offsetof(PlayerContext_IsTutorialCompleted, ReturnValue) == 0x000000, "Member 'PlayerContext_IsTutorialCompleted::ReturnValue' has a wrong offset!");

// Function Stigma.PlayerContext.IsTutorialPaused
// 0x0001 (0x0001 - 0x0000)
struct PlayerContext_IsTutorialPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerContext_IsTutorialPaused) == 0x000001, "Wrong alignment on PlayerContext_IsTutorialPaused");
static_assert(sizeof(PlayerContext_IsTutorialPaused) == 0x000001, "Wrong size on PlayerContext_IsTutorialPaused");
static_assert(offsetof(PlayerContext_IsTutorialPaused, ReturnValue) == 0x000000, "Member 'PlayerContext_IsTutorialPaused::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.AddRewardItem
// 0x0020 (0x0020 - 0x0000)
struct LocalPlayerContext_AddRewardItem final
{
public:
	struct FRewardPlain                           _reward_plain;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_AddRewardItem) == 0x000008, "Wrong alignment on LocalPlayerContext_AddRewardItem");
static_assert(sizeof(LocalPlayerContext_AddRewardItem) == 0x000020, "Wrong size on LocalPlayerContext_AddRewardItem");
static_assert(offsetof(LocalPlayerContext_AddRewardItem, _reward_plain) == 0x000000, "Member 'LocalPlayerContext_AddRewardItem::_reward_plain' has a wrong offset!");

// Function Stigma.LocalPlayerContext.GetAllItemsOfCategory
// 0x0018 (0x0018 - 0x0000)
struct LocalPlayerContext_GetAllItemsOfCategory final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2261[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_GetAllItemsOfCategory) == 0x000008, "Wrong alignment on LocalPlayerContext_GetAllItemsOfCategory");
static_assert(sizeof(LocalPlayerContext_GetAllItemsOfCategory) == 0x000018, "Wrong size on LocalPlayerContext_GetAllItemsOfCategory");
static_assert(offsetof(LocalPlayerContext_GetAllItemsOfCategory, _category) == 0x000000, "Member 'LocalPlayerContext_GetAllItemsOfCategory::_category' has a wrong offset!");
static_assert(offsetof(LocalPlayerContext_GetAllItemsOfCategory, ReturnValue) == 0x000008, "Member 'LocalPlayerContext_GetAllItemsOfCategory::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.GetCategoryGoods
// 0x0058 (0x0058 - 0x0000)
struct LocalPlayerContext_GetCategoryGoods final
{
public:
	EGoodsCategory                                _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2262[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCategoryGoodsMap                      ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_GetCategoryGoods) == 0x000008, "Wrong alignment on LocalPlayerContext_GetCategoryGoods");
static_assert(sizeof(LocalPlayerContext_GetCategoryGoods) == 0x000058, "Wrong size on LocalPlayerContext_GetCategoryGoods");
static_assert(offsetof(LocalPlayerContext_GetCategoryGoods, _category) == 0x000000, "Member 'LocalPlayerContext_GetCategoryGoods::_category' has a wrong offset!");
static_assert(offsetof(LocalPlayerContext_GetCategoryGoods, ReturnValue) == 0x000008, "Member 'LocalPlayerContext_GetCategoryGoods::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.GetCompetitionInfoManager
// 0x0008 (0x0008 - 0x0000)
struct LocalPlayerContext_GetCompetitionInfoManager final
{
public:
	class UCompetitionInfoManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_GetCompetitionInfoManager) == 0x000008, "Wrong alignment on LocalPlayerContext_GetCompetitionInfoManager");
static_assert(sizeof(LocalPlayerContext_GetCompetitionInfoManager) == 0x000008, "Wrong size on LocalPlayerContext_GetCompetitionInfoManager");
static_assert(offsetof(LocalPlayerContext_GetCompetitionInfoManager, ReturnValue) == 0x000000, "Member 'LocalPlayerContext_GetCompetitionInfoManager::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.GetCopiedCurrentGunObject
// 0x0008 (0x0008 - 0x0000)
struct LocalPlayerContext_GetCopiedCurrentGunObject final
{
public:
	class UGunObject*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_GetCopiedCurrentGunObject) == 0x000008, "Wrong alignment on LocalPlayerContext_GetCopiedCurrentGunObject");
static_assert(sizeof(LocalPlayerContext_GetCopiedCurrentGunObject) == 0x000008, "Wrong size on LocalPlayerContext_GetCopiedCurrentGunObject");
static_assert(offsetof(LocalPlayerContext_GetCopiedCurrentGunObject, ReturnValue) == 0x000000, "Member 'LocalPlayerContext_GetCopiedCurrentGunObject::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.GetUserObject
// 0x0008 (0x0008 - 0x0000)
struct LocalPlayerContext_GetUserObject final
{
public:
	class ULocalUserProfile*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_GetUserObject) == 0x000008, "Wrong alignment on LocalPlayerContext_GetUserObject");
static_assert(sizeof(LocalPlayerContext_GetUserObject) == 0x000008, "Wrong size on LocalPlayerContext_GetUserObject");
static_assert(offsetof(LocalPlayerContext_GetUserObject, ReturnValue) == 0x000000, "Member 'LocalPlayerContext_GetUserObject::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.MakeItemsSeen
// 0x0001 (0x0001 - 0x0000)
struct LocalPlayerContext_MakeItemsSeen final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_MakeItemsSeen) == 0x000001, "Wrong alignment on LocalPlayerContext_MakeItemsSeen");
static_assert(sizeof(LocalPlayerContext_MakeItemsSeen) == 0x000001, "Wrong size on LocalPlayerContext_MakeItemsSeen");
static_assert(offsetof(LocalPlayerContext_MakeItemsSeen, _category) == 0x000000, "Member 'LocalPlayerContext_MakeItemsSeen::_category' has a wrong offset!");

// Function Stigma.LocalPlayerContext.GetCurrentGunObject
// 0x0008 (0x0008 - 0x0000)
struct LocalPlayerContext_GetCurrentGunObject final
{
public:
	class UGunObject*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_GetCurrentGunObject) == 0x000008, "Wrong alignment on LocalPlayerContext_GetCurrentGunObject");
static_assert(sizeof(LocalPlayerContext_GetCurrentGunObject) == 0x000008, "Wrong size on LocalPlayerContext_GetCurrentGunObject");
static_assert(offsetof(LocalPlayerContext_GetCurrentGunObject, ReturnValue) == 0x000000, "Member 'LocalPlayerContext_GetCurrentGunObject::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.HasCategoryGoods
// 0x0002 (0x0002 - 0x0000)
struct LocalPlayerContext_HasCategoryGoods final
{
public:
	EGoodsCategory                                _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_HasCategoryGoods) == 0x000001, "Wrong alignment on LocalPlayerContext_HasCategoryGoods");
static_assert(sizeof(LocalPlayerContext_HasCategoryGoods) == 0x000002, "Wrong size on LocalPlayerContext_HasCategoryGoods");
static_assert(offsetof(LocalPlayerContext_HasCategoryGoods, _category) == 0x000000, "Member 'LocalPlayerContext_HasCategoryGoods::_category' has a wrong offset!");
static_assert(offsetof(LocalPlayerContext_HasCategoryGoods, ReturnValue) == 0x000001, "Member 'LocalPlayerContext_HasCategoryGoods::ReturnValue' has a wrong offset!");

// Function Stigma.LocalPlayerContext.IsReadyForPVP
// 0x0001 (0x0001 - 0x0000)
struct LocalPlayerContext_IsReadyForPVP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerContext_IsReadyForPVP) == 0x000001, "Wrong alignment on LocalPlayerContext_IsReadyForPVP");
static_assert(sizeof(LocalPlayerContext_IsReadyForPVP) == 0x000001, "Wrong size on LocalPlayerContext_IsReadyForPVP");
static_assert(offsetof(LocalPlayerContext_IsReadyForPVP, ReturnValue) == 0x000000, "Member 'LocalPlayerContext_IsReadyForPVP::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_Dialog.Tutorial_Dialog
// 0x0038 (0x0038 - 0x0000)
struct UIGuide_Dialog_Tutorial_Dialog final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _msg;                                              // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UTexture2D*                             _tex;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _img_index;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _left_side;                                        // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _black_screen;                                     // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2265[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_Dialog*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_Dialog_Tutorial_Dialog) == 0x000008, "Wrong alignment on UIGuide_Dialog_Tutorial_Dialog");
static_assert(sizeof(UIGuide_Dialog_Tutorial_Dialog) == 0x000038, "Wrong size on UIGuide_Dialog_Tutorial_Dialog");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, _tutorial) == 0x000000, "Member 'UIGuide_Dialog_Tutorial_Dialog::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, _msg) == 0x000008, "Member 'UIGuide_Dialog_Tutorial_Dialog::_msg' has a wrong offset!");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, _tex) == 0x000020, "Member 'UIGuide_Dialog_Tutorial_Dialog::_tex' has a wrong offset!");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, _img_index) == 0x000028, "Member 'UIGuide_Dialog_Tutorial_Dialog::_img_index' has a wrong offset!");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, _left_side) == 0x00002C, "Member 'UIGuide_Dialog_Tutorial_Dialog::_left_side' has a wrong offset!");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, _black_screen) == 0x00002D, "Member 'UIGuide_Dialog_Tutorial_Dialog::_black_screen' has a wrong offset!");
static_assert(offsetof(UIGuide_Dialog_Tutorial_Dialog, ReturnValue) == 0x000030, "Member 'UIGuide_Dialog_Tutorial_Dialog::ReturnValue' has a wrong offset!");

// Function Stigma.FunctionHelper.GetFunctionEffectText
// 0x01B8 (0x01B8 - 0x0000)
struct FunctionHelper_GetFunctionEffectText final
{
public:
	struct FConfig_Function                       _function_def;                                     // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x01A8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionHelper_GetFunctionEffectText) == 0x000008, "Wrong alignment on FunctionHelper_GetFunctionEffectText");
static_assert(sizeof(FunctionHelper_GetFunctionEffectText) == 0x0001B8, "Wrong size on FunctionHelper_GetFunctionEffectText");
static_assert(offsetof(FunctionHelper_GetFunctionEffectText, _function_def) == 0x000000, "Member 'FunctionHelper_GetFunctionEffectText::_function_def' has a wrong offset!");
static_assert(offsetof(FunctionHelper_GetFunctionEffectText, ReturnValue) == 0x0001A8, "Member 'FunctionHelper_GetFunctionEffectText::ReturnValue' has a wrong offset!");

// Function Stigma.FunctionHelper.IsGrantedOnceEffect
// 0x01B0 (0x01B0 - 0x0000)
struct FunctionHelper_IsGrantedOnceEffect final
{
public:
	struct FConfig_Function                       _function_def;                                     // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2266[0x7];                                     // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FunctionHelper_IsGrantedOnceEffect) == 0x000008, "Wrong alignment on FunctionHelper_IsGrantedOnceEffect");
static_assert(sizeof(FunctionHelper_IsGrantedOnceEffect) == 0x0001B0, "Wrong size on FunctionHelper_IsGrantedOnceEffect");
static_assert(offsetof(FunctionHelper_IsGrantedOnceEffect, _function_def) == 0x000000, "Member 'FunctionHelper_IsGrantedOnceEffect::_function_def' has a wrong offset!");
static_assert(offsetof(FunctionHelper_IsGrantedOnceEffect, ReturnValue) == 0x0001A8, "Member 'FunctionHelper_IsGrantedOnceEffect::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_StopTutorial.Tutorial_StopTutorial
// 0x0010 (0x0010 - 0x0000)
struct UIGuide_StopTutorial_Tutorial_StopTutorial final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_StopTutorial*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_StopTutorial_Tutorial_StopTutorial) == 0x000008, "Wrong alignment on UIGuide_StopTutorial_Tutorial_StopTutorial");
static_assert(sizeof(UIGuide_StopTutorial_Tutorial_StopTutorial) == 0x000010, "Wrong size on UIGuide_StopTutorial_Tutorial_StopTutorial");
static_assert(offsetof(UIGuide_StopTutorial_Tutorial_StopTutorial, _tutorial) == 0x000000, "Member 'UIGuide_StopTutorial_Tutorial_StopTutorial::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_StopTutorial_Tutorial_StopTutorial, ReturnValue) == 0x000008, "Member 'UIGuide_StopTutorial_Tutorial_StopTutorial::ReturnValue' has a wrong offset!");

// Function Stigma.CooltimeComponent.IsExpired
// 0x0014 (0x0014 - 0x0000)
struct CooltimeComponent_IsExpired final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_remain_time;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_duration;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2269[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CooltimeComponent_IsExpired) == 0x000004, "Wrong alignment on CooltimeComponent_IsExpired");
static_assert(sizeof(CooltimeComponent_IsExpired) == 0x000014, "Wrong size on CooltimeComponent_IsExpired");
static_assert(offsetof(CooltimeComponent_IsExpired, Param_Name) == 0x000000, "Member 'CooltimeComponent_IsExpired::Param_Name' has a wrong offset!");
static_assert(offsetof(CooltimeComponent_IsExpired, Out_remain_time) == 0x000008, "Member 'CooltimeComponent_IsExpired::Out_remain_time' has a wrong offset!");
static_assert(offsetof(CooltimeComponent_IsExpired, Out_duration) == 0x00000C, "Member 'CooltimeComponent_IsExpired::Out_duration' has a wrong offset!");
static_assert(offsetof(CooltimeComponent_IsExpired, ReturnValue) == 0x000010, "Member 'CooltimeComponent_IsExpired::ReturnValue' has a wrong offset!");

// Function Stigma.CooltimeComponent.StartCooltime
// 0x000C (0x000C - 0x0000)
struct CooltimeComponent_StartCooltime final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CooltimeComponent_StartCooltime) == 0x000004, "Wrong alignment on CooltimeComponent_StartCooltime");
static_assert(sizeof(CooltimeComponent_StartCooltime) == 0x00000C, "Wrong size on CooltimeComponent_StartCooltime");
static_assert(offsetof(CooltimeComponent_StartCooltime, Param_Name) == 0x000000, "Member 'CooltimeComponent_StartCooltime::Param_Name' has a wrong offset!");
static_assert(offsetof(CooltimeComponent_StartCooltime, Duration) == 0x000008, "Member 'CooltimeComponent_StartCooltime::Duration' has a wrong offset!");

// Function Stigma.HUD_Armor.BindTargetChara
// 0x0008 (0x0008 - 0x0000)
struct HUD_Armor_BindTargetChara final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_Armor_BindTargetChara) == 0x000008, "Wrong alignment on HUD_Armor_BindTargetChara");
static_assert(sizeof(HUD_Armor_BindTargetChara) == 0x000008, "Wrong size on HUD_Armor_BindTargetChara");
static_assert(offsetof(HUD_Armor_BindTargetChara, _chara) == 0x000000, "Member 'HUD_Armor_BindTargetChara::_chara' has a wrong offset!");

// Function Stigma.HUD_Armor.OnRechargeArmor
// 0x0004 (0x0004 - 0x0000)
struct HUD_Armor_OnRechargeArmor final
{
public:
	float                                         _inc_armor_rate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_Armor_OnRechargeArmor) == 0x000004, "Wrong alignment on HUD_Armor_OnRechargeArmor");
static_assert(sizeof(HUD_Armor_OnRechargeArmor) == 0x000004, "Wrong size on HUD_Armor_OnRechargeArmor");
static_assert(offsetof(HUD_Armor_OnRechargeArmor, _inc_armor_rate) == 0x000000, "Member 'HUD_Armor_OnRechargeArmor::_inc_armor_rate' has a wrong offset!");

// Function Stigma.Ctrl_BattlePassLevel.SetLevel
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_BattlePassLevel_SetLevel final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _set_instance;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226B[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_BattlePassLevel_SetLevel) == 0x000004, "Wrong alignment on Ctrl_BattlePassLevel_SetLevel");
static_assert(sizeof(Ctrl_BattlePassLevel_SetLevel) == 0x000008, "Wrong size on Ctrl_BattlePassLevel_SetLevel");
static_assert(offsetof(Ctrl_BattlePassLevel_SetLevel, _level) == 0x000000, "Member 'Ctrl_BattlePassLevel_SetLevel::_level' has a wrong offset!");
static_assert(offsetof(Ctrl_BattlePassLevel_SetLevel, _set_instance) == 0x000004, "Member 'Ctrl_BattlePassLevel_SetLevel::_set_instance' has a wrong offset!");

// Function Stigma.Ctrl_BattlePassLevel.SetMax
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_BattlePassLevel_SetMax final
{
public:
	bool                                          _is_max;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_BattlePassLevel_SetMax) == 0x000001, "Wrong alignment on Ctrl_BattlePassLevel_SetMax");
static_assert(sizeof(Ctrl_BattlePassLevel_SetMax) == 0x000001, "Wrong size on Ctrl_BattlePassLevel_SetMax");
static_assert(offsetof(Ctrl_BattlePassLevel_SetMax, _is_max) == 0x000000, "Member 'Ctrl_BattlePassLevel_SetMax::_is_max' has a wrong offset!");

// Function Stigma.Ctrl_Character_CheckBox.Init
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_Character_CheckBox_Init final
{
public:
	int32                                         _master_idx;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class UGunObject*                             _gun_object;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_Character_CheckBox_Init) == 0x000008, "Wrong alignment on Ctrl_Character_CheckBox_Init");
static_assert(sizeof(Ctrl_Character_CheckBox_Init) == 0x000010, "Wrong size on Ctrl_Character_CheckBox_Init");
static_assert(offsetof(Ctrl_Character_CheckBox_Init, _master_idx) == 0x000000, "Member 'Ctrl_Character_CheckBox_Init::_master_idx' has a wrong offset!");
static_assert(offsetof(Ctrl_Character_CheckBox_Init, _chara_type) == 0x000004, "Member 'Ctrl_Character_CheckBox_Init::_chara_type' has a wrong offset!");
static_assert(offsetof(Ctrl_Character_CheckBox_Init, _gun_object) == 0x000008, "Member 'Ctrl_Character_CheckBox_Init::_gun_object' has a wrong offset!");

// Function Stigma.Ctrl_Character_CheckBox.OnClickCheckBox
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_Character_CheckBox_OnClickCheckBox final
{
public:
	bool                                          _is_checked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_Character_CheckBox_OnClickCheckBox) == 0x000001, "Wrong alignment on Ctrl_Character_CheckBox_OnClickCheckBox");
static_assert(sizeof(Ctrl_Character_CheckBox_OnClickCheckBox) == 0x000001, "Wrong size on Ctrl_Character_CheckBox_OnClickCheckBox");
static_assert(offsetof(Ctrl_Character_CheckBox_OnClickCheckBox, _is_checked) == 0x000000, "Member 'Ctrl_Character_CheckBox_OnClickCheckBox::_is_checked' has a wrong offset!");

// Function Stigma.Ctrl_Character_CheckBox.RegisterIsSelectedDelegate
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_Character_CheckBox_RegisterIsSelectedDelegate final
{
public:
	TDelegate<void(bool _is_select, class UCtrl_Character_CheckBox* _item)> _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_Character_CheckBox_RegisterIsSelectedDelegate) == 0x000004, "Wrong alignment on Ctrl_Character_CheckBox_RegisterIsSelectedDelegate");
static_assert(sizeof(Ctrl_Character_CheckBox_RegisterIsSelectedDelegate) == 0x000010, "Wrong size on Ctrl_Character_CheckBox_RegisterIsSelectedDelegate");
static_assert(offsetof(Ctrl_Character_CheckBox_RegisterIsSelectedDelegate, _event) == 0x000000, "Member 'Ctrl_Character_CheckBox_RegisterIsSelectedDelegate::_event' has a wrong offset!");

// Function Stigma.Ctrl_Character_CheckBox.SetSelect
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_Character_CheckBox_SetSelect final
{
public:
	bool                                          _is_select;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _from_ctrl;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_Character_CheckBox_SetSelect) == 0x000001, "Wrong alignment on Ctrl_Character_CheckBox_SetSelect");
static_assert(sizeof(Ctrl_Character_CheckBox_SetSelect) == 0x000002, "Wrong size on Ctrl_Character_CheckBox_SetSelect");
static_assert(offsetof(Ctrl_Character_CheckBox_SetSelect, _is_select) == 0x000000, "Member 'Ctrl_Character_CheckBox_SetSelect::_is_select' has a wrong offset!");
static_assert(offsetof(Ctrl_Character_CheckBox_SetSelect, _from_ctrl) == 0x000001, "Member 'Ctrl_Character_CheckBox_SetSelect::_from_ctrl' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.SetBackground
// 0x0340 (0x0340 - 0x0000)
struct Ctrl_CommonButtonBase_SetBackground final
{
public:
	struct FBrushStyle                            _style;                                            // 0x0000(0x0340)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButtonBase_SetBackground) == 0x000010, "Wrong alignment on Ctrl_CommonButtonBase_SetBackground");
static_assert(sizeof(Ctrl_CommonButtonBase_SetBackground) == 0x000340, "Wrong size on Ctrl_CommonButtonBase_SetBackground");
static_assert(offsetof(Ctrl_CommonButtonBase_SetBackground, _style) == 0x000000, "Member 'Ctrl_CommonButtonBase_SetBackground::_style' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.SetFont
// 0x0060 (0x0060 - 0x0000)
struct Ctrl_CommonButtonBase_SetFont final
{
public:
	struct FSlateFontInfo                         _new_font;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_sub_text;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2275[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonButtonBase_SetFont) == 0x000008, "Wrong alignment on Ctrl_CommonButtonBase_SetFont");
static_assert(sizeof(Ctrl_CommonButtonBase_SetFont) == 0x000060, "Wrong size on Ctrl_CommonButtonBase_SetFont");
static_assert(offsetof(Ctrl_CommonButtonBase_SetFont, _new_font) == 0x000000, "Member 'Ctrl_CommonButtonBase_SetFont::_new_font' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonButtonBase_SetFont, _is_sub_text) == 0x000058, "Member 'Ctrl_CommonButtonBase_SetFont::_is_sub_text' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.SetIcon
// 0x0340 (0x0340 - 0x0000)
struct Ctrl_CommonButtonBase_SetIcon final
{
public:
	struct FBrushStyle                            _icon_style;                                       // 0x0000(0x0340)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButtonBase_SetIcon) == 0x000010, "Wrong alignment on Ctrl_CommonButtonBase_SetIcon");
static_assert(sizeof(Ctrl_CommonButtonBase_SetIcon) == 0x000340, "Wrong size on Ctrl_CommonButtonBase_SetIcon");
static_assert(offsetof(Ctrl_CommonButtonBase_SetIcon, _icon_style) == 0x000000, "Member 'Ctrl_CommonButtonBase_SetIcon::_icon_style' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.SetText
// 0x0020 (0x0020 - 0x0000)
struct Ctrl_CommonButtonBase_SetText final
{
public:
	class FText                                   _new_text;                                         // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          _is_sub_text;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2276[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonButtonBase_SetText) == 0x000008, "Wrong alignment on Ctrl_CommonButtonBase_SetText");
static_assert(sizeof(Ctrl_CommonButtonBase_SetText) == 0x000020, "Wrong size on Ctrl_CommonButtonBase_SetText");
static_assert(offsetof(Ctrl_CommonButtonBase_SetText, _new_text) == 0x000000, "Member 'Ctrl_CommonButtonBase_SetText::_new_text' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonButtonBase_SetText, _is_sub_text) == 0x000018, "Member 'Ctrl_CommonButtonBase_SetText::_is_sub_text' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.ShowHighlight
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_CommonButtonBase_ShowHighlight final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButtonBase_ShowHighlight) == 0x000001, "Wrong alignment on Ctrl_CommonButtonBase_ShowHighlight");
static_assert(sizeof(Ctrl_CommonButtonBase_ShowHighlight) == 0x000001, "Wrong size on Ctrl_CommonButtonBase_ShowHighlight");
static_assert(offsetof(Ctrl_CommonButtonBase_ShowHighlight, _value) == 0x000000, "Member 'Ctrl_CommonButtonBase_ShowHighlight::_value' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.GetText
// 0x0020 (0x0020 - 0x0000)
struct Ctrl_CommonButtonBase_GetText final
{
public:
	bool                                          _is_sub_text;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2277[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButtonBase_GetText) == 0x000008, "Wrong alignment on Ctrl_CommonButtonBase_GetText");
static_assert(sizeof(Ctrl_CommonButtonBase_GetText) == 0x000020, "Wrong size on Ctrl_CommonButtonBase_GetText");
static_assert(offsetof(Ctrl_CommonButtonBase_GetText, _is_sub_text) == 0x000000, "Member 'Ctrl_CommonButtonBase_GetText::_is_sub_text' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonButtonBase_GetText, ReturnValue) == 0x000008, "Member 'Ctrl_CommonButtonBase_GetText::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonButtonBase.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_CommonButtonBase_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButtonBase_IsEnabled) == 0x000001, "Wrong alignment on Ctrl_CommonButtonBase_IsEnabled");
static_assert(sizeof(Ctrl_CommonButtonBase_IsEnabled) == 0x000001, "Wrong size on Ctrl_CommonButtonBase_IsEnabled");
static_assert(offsetof(Ctrl_CommonButtonBase_IsEnabled, ReturnValue) == 0x000000, "Member 'Ctrl_CommonButtonBase_IsEnabled::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_GunParts.Config
// 0x0018 (0x0018 - 0x0000)
struct LVData_GunParts_Config final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2279[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UInvenItem*                             _inven_item;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             _cur_gun_object;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_GunParts_Config) == 0x000008, "Wrong alignment on LVData_GunParts_Config");
static_assert(sizeof(LVData_GunParts_Config) == 0x000018, "Wrong size on LVData_GunParts_Config");
static_assert(offsetof(LVData_GunParts_Config, _slot) == 0x000000, "Member 'LVData_GunParts_Config::_slot' has a wrong offset!");
static_assert(offsetof(LVData_GunParts_Config, _inven_item) == 0x000008, "Member 'LVData_GunParts_Config::_inven_item' has a wrong offset!");
static_assert(offsetof(LVData_GunParts_Config, _cur_gun_object) == 0x000010, "Member 'LVData_GunParts_Config::_cur_gun_object' has a wrong offset!");

// Function Stigma.LVData_GunParts.GetGunObject
// 0x0008 (0x0008 - 0x0000)
struct LVData_GunParts_GetGunObject final
{
public:
	class UGunObject*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_GunParts_GetGunObject) == 0x000008, "Wrong alignment on LVData_GunParts_GetGunObject");
static_assert(sizeof(LVData_GunParts_GetGunObject) == 0x000008, "Wrong size on LVData_GunParts_GetGunObject");
static_assert(offsetof(LVData_GunParts_GetGunObject, ReturnValue) == 0x000000, "Member 'LVData_GunParts_GetGunObject::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_GunParts.GetInvenItem
// 0x0008 (0x0008 - 0x0000)
struct LVData_GunParts_GetInvenItem final
{
public:
	class UInvenItem*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_GunParts_GetInvenItem) == 0x000008, "Wrong alignment on LVData_GunParts_GetInvenItem");
static_assert(sizeof(LVData_GunParts_GetInvenItem) == 0x000008, "Wrong size on LVData_GunParts_GetInvenItem");
static_assert(offsetof(LVData_GunParts_GetInvenItem, ReturnValue) == 0x000000, "Member 'LVData_GunParts_GetInvenItem::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_GunParts.GetPartsSlot
// 0x0001 (0x0001 - 0x0000)
struct LVData_GunParts_GetPartsSlot final
{
public:
	EGunPartsSlot                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_GunParts_GetPartsSlot) == 0x000001, "Wrong alignment on LVData_GunParts_GetPartsSlot");
static_assert(sizeof(LVData_GunParts_GetPartsSlot) == 0x000001, "Wrong size on LVData_GunParts_GetPartsSlot");
static_assert(offsetof(LVData_GunParts_GetPartsSlot, ReturnValue) == 0x000000, "Member 'LVData_GunParts_GetPartsSlot::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_KickOffTutorialIfAny.Tutorial_KickOffTutorialIfAny
// 0x0010 (0x0010 - 0x0000)
struct UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_KickOffTutorialIfAny*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny) == 0x000008, "Wrong alignment on UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny");
static_assert(sizeof(UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny) == 0x000010, "Wrong size on UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny");
static_assert(offsetof(UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny, _tutorial) == 0x000000, "Member 'UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny, ReturnValue) == 0x000008, "Member 'UIGuide_KickOffTutorialIfAny_Tutorial_KickOffTutorialIfAny::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonButton_Currency.GetCanPurchase
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_CommonButton_Currency_GetCanPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButton_Currency_GetCanPurchase) == 0x000001, "Wrong alignment on Ctrl_CommonButton_Currency_GetCanPurchase");
static_assert(sizeof(Ctrl_CommonButton_Currency_GetCanPurchase) == 0x000001, "Wrong size on Ctrl_CommonButton_Currency_GetCanPurchase");
static_assert(offsetof(Ctrl_CommonButton_Currency_GetCanPurchase, ReturnValue) == 0x000000, "Member 'Ctrl_CommonButton_Currency_GetCanPurchase::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonButton_Currency.InitWidget
// 0x0018 (0x0018 - 0x0000)
struct Ctrl_CommonButton_Currency_InitWidget final
{
public:
	struct FItemID_Currency                       _currency_id;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _currency_amount;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonButton_Currency_InitWidget) == 0x000008, "Wrong alignment on Ctrl_CommonButton_Currency_InitWidget");
static_assert(sizeof(Ctrl_CommonButton_Currency_InitWidget) == 0x000018, "Wrong size on Ctrl_CommonButton_Currency_InitWidget");
static_assert(offsetof(Ctrl_CommonButton_Currency_InitWidget, _currency_id) == 0x000000, "Member 'Ctrl_CommonButton_Currency_InitWidget::_currency_id' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonButton_Currency_InitWidget, _currency_amount) == 0x000010, "Member 'Ctrl_CommonButton_Currency_InitWidget::_currency_amount' has a wrong offset!");

// Function Stigma.Mannequin.RotateYaw
// 0x0004 (0x0004 - 0x0000)
struct Mannequin_RotateYaw final
{
public:
	float                                         _yaw;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_RotateYaw) == 0x000004, "Wrong alignment on Mannequin_RotateYaw");
static_assert(sizeof(Mannequin_RotateYaw) == 0x000004, "Wrong size on Mannequin_RotateYaw");
static_assert(offsetof(Mannequin_RotateYaw, _yaw) == 0x000000, "Member 'Mannequin_RotateYaw::_yaw' has a wrong offset!");

// Function Stigma.Mannequin.SetCharacter
// 0x0020 (0x0020 - 0x0000)
struct Mannequin_SetCharacter final
{
public:
	struct FItemID                                _body_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _head_id;                                          // 0x0010(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_SetCharacter) == 0x000008, "Wrong alignment on Mannequin_SetCharacter");
static_assert(sizeof(Mannequin_SetCharacter) == 0x000020, "Wrong size on Mannequin_SetCharacter");
static_assert(offsetof(Mannequin_SetCharacter, _body_id) == 0x000000, "Member 'Mannequin_SetCharacter::_body_id' has a wrong offset!");
static_assert(offsetof(Mannequin_SetCharacter, _head_id) == 0x000010, "Member 'Mannequin_SetCharacter::_head_id' has a wrong offset!");

// Function Stigma.Mannequin.SetGunByGunObject
// 0x0008 (0x0008 - 0x0000)
struct Mannequin_SetGunByGunObject final
{
public:
	class UGunObject*                             _gun_obj;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_SetGunByGunObject) == 0x000008, "Wrong alignment on Mannequin_SetGunByGunObject");
static_assert(sizeof(Mannequin_SetGunByGunObject) == 0x000008, "Wrong size on Mannequin_SetGunByGunObject");
static_assert(offsetof(Mannequin_SetGunByGunObject, _gun_obj) == 0x000000, "Member 'Mannequin_SetGunByGunObject::_gun_obj' has a wrong offset!");

// Function Stigma.Mannequin.SetGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct Mannequin_SetGunSpec final
{
public:
	struct FGunSpec                               _spec;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_SetGunSpec) == 0x000008, "Wrong alignment on Mannequin_SetGunSpec");
static_assert(sizeof(Mannequin_SetGunSpec) == 0x0000D0, "Wrong size on Mannequin_SetGunSpec");
static_assert(offsetof(Mannequin_SetGunSpec, _spec) == 0x000000, "Member 'Mannequin_SetGunSpec::_spec' has a wrong offset!");

// Function Stigma.Mannequin.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct Mannequin_SetVisible final
{
public:
	bool                                          _visible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_SetVisible) == 0x000001, "Wrong alignment on Mannequin_SetVisible");
static_assert(sizeof(Mannequin_SetVisible) == 0x000001, "Wrong size on Mannequin_SetVisible");
static_assert(offsetof(Mannequin_SetVisible, _visible) == 0x000000, "Member 'Mannequin_SetVisible::_visible' has a wrong offset!");

// Function Stigma.Mannequin.UpdateIfAny
// 0x0008 (0x0008 - 0x0000)
struct Mannequin_UpdateIfAny final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_UpdateIfAny) == 0x000008, "Wrong alignment on Mannequin_UpdateIfAny");
static_assert(sizeof(Mannequin_UpdateIfAny) == 0x000008, "Wrong size on Mannequin_UpdateIfAny");
static_assert(offsetof(Mannequin_UpdateIfAny, _ps) == 0x000000, "Member 'Mannequin_UpdateIfAny::_ps' has a wrong offset!");

// Function Stigma.Mannequin.GetBodyID
// 0x0010 (0x0010 - 0x0000)
struct Mannequin_GetBodyID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_GetBodyID) == 0x000008, "Wrong alignment on Mannequin_GetBodyID");
static_assert(sizeof(Mannequin_GetBodyID) == 0x000010, "Wrong size on Mannequin_GetBodyID");
static_assert(offsetof(Mannequin_GetBodyID, ReturnValue) == 0x000000, "Member 'Mannequin_GetBodyID::ReturnValue' has a wrong offset!");

// Function Stigma.Mannequin.GetCharacterType
// 0x0001 (0x0001 - 0x0000)
struct Mannequin_GetCharacterType final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_GetCharacterType) == 0x000001, "Wrong alignment on Mannequin_GetCharacterType");
static_assert(sizeof(Mannequin_GetCharacterType) == 0x000001, "Wrong size on Mannequin_GetCharacterType");
static_assert(offsetof(Mannequin_GetCharacterType, ReturnValue) == 0x000000, "Member 'Mannequin_GetCharacterType::ReturnValue' has a wrong offset!");

// Function Stigma.Mannequin.GetGunType
// 0x0001 (0x0001 - 0x0000)
struct Mannequin_GetGunType final
{
public:
	EGunType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_GetGunType) == 0x000001, "Wrong alignment on Mannequin_GetGunType");
static_assert(sizeof(Mannequin_GetGunType) == 0x000001, "Wrong size on Mannequin_GetGunType");
static_assert(offsetof(Mannequin_GetGunType, ReturnValue) == 0x000000, "Member 'Mannequin_GetGunType::ReturnValue' has a wrong offset!");

// Function Stigma.Mannequin.GetHeadID
// 0x0010 (0x0010 - 0x0000)
struct Mannequin_GetHeadID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_GetHeadID) == 0x000008, "Wrong alignment on Mannequin_GetHeadID");
static_assert(sizeof(Mannequin_GetHeadID) == 0x000010, "Wrong size on Mannequin_GetHeadID");
static_assert(offsetof(Mannequin_GetHeadID, ReturnValue) == 0x000000, "Member 'Mannequin_GetHeadID::ReturnValue' has a wrong offset!");

// Function Stigma.Mannequin.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct Mannequin_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mannequin_IsVisible) == 0x000001, "Wrong alignment on Mannequin_IsVisible");
static_assert(sizeof(Mannequin_IsVisible) == 0x000001, "Wrong size on Mannequin_IsVisible");
static_assert(offsetof(Mannequin_IsVisible, ReturnValue) == 0x000000, "Member 'Mannequin_IsVisible::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.Get
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_Get final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialSubsystem*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialSubsystem_Get) == 0x000008, "Wrong alignment on TutorialSubsystem_Get");
static_assert(sizeof(TutorialSubsystem_Get) == 0x000010, "Wrong size on TutorialSubsystem_Get");
static_assert(offsetof(TutorialSubsystem_Get, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_Get::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_Get, ReturnValue) == 0x000008, "Member 'TutorialSubsystem_Get::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.GetCompletedMatchCount
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_GetCompletedMatchCount final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2282[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_GetCompletedMatchCount) == 0x000008, "Wrong alignment on TutorialSubsystem_GetCompletedMatchCount");
static_assert(sizeof(TutorialSubsystem_GetCompletedMatchCount) == 0x000010, "Wrong size on TutorialSubsystem_GetCompletedMatchCount");
static_assert(offsetof(TutorialSubsystem_GetCompletedMatchCount, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_GetCompletedMatchCount::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_GetCompletedMatchCount, ReturnValue) == 0x000008, "Member 'TutorialSubsystem_GetCompletedMatchCount::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.GetTutorialState
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_GetTutorialState final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialState                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2283[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_GetTutorialState) == 0x000008, "Wrong alignment on TutorialSubsystem_GetTutorialState");
static_assert(sizeof(TutorialSubsystem_GetTutorialState) == 0x000010, "Wrong size on TutorialSubsystem_GetTutorialState");
static_assert(offsetof(TutorialSubsystem_GetTutorialState, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_GetTutorialState::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_GetTutorialState, ReturnValue) == 0x000008, "Member 'TutorialSubsystem_GetTutorialState::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.IsAnyTutorialRunning
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_IsAnyTutorialRunning final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2284[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_IsAnyTutorialRunning) == 0x000008, "Wrong alignment on TutorialSubsystem_IsAnyTutorialRunning");
static_assert(sizeof(TutorialSubsystem_IsAnyTutorialRunning) == 0x000010, "Wrong size on TutorialSubsystem_IsAnyTutorialRunning");
static_assert(offsetof(TutorialSubsystem_IsAnyTutorialRunning, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_IsAnyTutorialRunning::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_IsAnyTutorialRunning, ReturnValue) == 0x000008, "Member 'TutorialSubsystem_IsAnyTutorialRunning::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.IsTutorialProgressing
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_IsTutorialProgressing final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2285[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_IsTutorialProgressing) == 0x000008, "Wrong alignment on TutorialSubsystem_IsTutorialProgressing");
static_assert(sizeof(TutorialSubsystem_IsTutorialProgressing) == 0x000010, "Wrong size on TutorialSubsystem_IsTutorialProgressing");
static_assert(offsetof(TutorialSubsystem_IsTutorialProgressing, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_IsTutorialProgressing::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_IsTutorialProgressing, ReturnValue) == 0x000008, "Member 'TutorialSubsystem_IsTutorialProgressing::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.SetTutorialState
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_SetTutorialState final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialState                                _state;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2286[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_SetTutorialState) == 0x000008, "Wrong alignment on TutorialSubsystem_SetTutorialState");
static_assert(sizeof(TutorialSubsystem_SetTutorialState) == 0x000010, "Wrong size on TutorialSubsystem_SetTutorialState");
static_assert(offsetof(TutorialSubsystem_SetTutorialState, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_SetTutorialState::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_SetTutorialState, _state) == 0x000008, "Member 'TutorialSubsystem_SetTutorialState::_state' has a wrong offset!");

// Function Stigma.TutorialSubsystem.StartTutorial
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_StartTutorial final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTutorial>                  _type;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialSubsystem_StartTutorial) == 0x000008, "Wrong alignment on TutorialSubsystem_StartTutorial");
static_assert(sizeof(TutorialSubsystem_StartTutorial) == 0x000010, "Wrong size on TutorialSubsystem_StartTutorial");
static_assert(offsetof(TutorialSubsystem_StartTutorial, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_StartTutorial::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartTutorial, _type) == 0x000008, "Member 'TutorialSubsystem_StartTutorial::_type' has a wrong offset!");

// Function Stigma.TutorialSubsystem.StartTutorialMatch
// 0x0028 (0x0028 - 0x0000)
struct TutorialSubsystem_StartTutorialMatch final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2287[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _level;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_welcome_match;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2288[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _option;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialSubsystem_StartTutorialMatch) == 0x000008, "Wrong alignment on TutorialSubsystem_StartTutorialMatch");
static_assert(sizeof(TutorialSubsystem_StartTutorialMatch) == 0x000028, "Wrong size on TutorialSubsystem_StartTutorialMatch");
static_assert(offsetof(TutorialSubsystem_StartTutorialMatch, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_StartTutorialMatch::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartTutorialMatch, _game_mode) == 0x000008, "Member 'TutorialSubsystem_StartTutorialMatch::_game_mode' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartTutorialMatch, _level) == 0x00000C, "Member 'TutorialSubsystem_StartTutorialMatch::_level' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartTutorialMatch, _chara_type) == 0x000010, "Member 'TutorialSubsystem_StartTutorialMatch::_chara_type' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartTutorialMatch, _is_welcome_match) == 0x000011, "Member 'TutorialSubsystem_StartTutorialMatch::_is_welcome_match' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartTutorialMatch, _option) == 0x000018, "Member 'TutorialSubsystem_StartTutorialMatch::_option' has a wrong offset!");

// Function Stigma.TutorialSubsystem.StartWelcomeMatch
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_StartWelcomeMatch final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2289[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_StartWelcomeMatch) == 0x000008, "Wrong alignment on TutorialSubsystem_StartWelcomeMatch");
static_assert(sizeof(TutorialSubsystem_StartWelcomeMatch) == 0x000010, "Wrong size on TutorialSubsystem_StartWelcomeMatch");
static_assert(offsetof(TutorialSubsystem_StartWelcomeMatch, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_StartWelcomeMatch::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StartWelcomeMatch, _chara_type) == 0x000008, "Member 'TutorialSubsystem_StartWelcomeMatch::_chara_type' has a wrong offset!");

// Function Stigma.TutorialSubsystem.StopWelcomeScenario
// 0x0010 (0x0010 - 0x0000)
struct TutorialSubsystem_StopWelcomeScenario final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_yes_no;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TutorialSubsystem_StopWelcomeScenario) == 0x000008, "Wrong alignment on TutorialSubsystem_StopWelcomeScenario");
static_assert(sizeof(TutorialSubsystem_StopWelcomeScenario) == 0x000010, "Wrong size on TutorialSubsystem_StopWelcomeScenario");
static_assert(offsetof(TutorialSubsystem_StopWelcomeScenario, _world_ctx) == 0x000000, "Member 'TutorialSubsystem_StopWelcomeScenario::_world_ctx' has a wrong offset!");
static_assert(offsetof(TutorialSubsystem_StopWelcomeScenario, _show_yes_no) == 0x000008, "Member 'TutorialSubsystem_StopWelcomeScenario::_show_yes_no' has a wrong offset!");

// Function Stigma.TutorialSubsystem.IsProgressing
// 0x0001 (0x0001 - 0x0000)
struct TutorialSubsystem_IsProgressing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialSubsystem_IsProgressing) == 0x000001, "Wrong alignment on TutorialSubsystem_IsProgressing");
static_assert(sizeof(TutorialSubsystem_IsProgressing) == 0x000001, "Wrong size on TutorialSubsystem_IsProgressing");
static_assert(offsetof(TutorialSubsystem_IsProgressing, ReturnValue) == 0x000000, "Member 'TutorialSubsystem_IsProgressing::ReturnValue' has a wrong offset!");

// Function Stigma.TutorialSubsystem.IsTutorialRunning
// 0x0001 (0x0001 - 0x0000)
struct TutorialSubsystem_IsTutorialRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialSubsystem_IsTutorialRunning) == 0x000001, "Wrong alignment on TutorialSubsystem_IsTutorialRunning");
static_assert(sizeof(TutorialSubsystem_IsTutorialRunning) == 0x000001, "Wrong size on TutorialSubsystem_IsTutorialRunning");
static_assert(offsetof(TutorialSubsystem_IsTutorialRunning, ReturnValue) == 0x000000, "Member 'TutorialSubsystem_IsTutorialRunning::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_CommonButton_Intensity.SetIntensity
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_CommonButton_Intensity_SetIntensity final
{
public:
	EButtonIntensity                              _new_intensity;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonButton_Intensity_SetIntensity) == 0x000001, "Wrong alignment on Ctrl_CommonButton_Intensity_SetIntensity");
static_assert(sizeof(Ctrl_CommonButton_Intensity_SetIntensity) == 0x000001, "Wrong size on Ctrl_CommonButton_Intensity_SetIntensity");
static_assert(offsetof(Ctrl_CommonButton_Intensity_SetIntensity, _new_intensity) == 0x000000, "Member 'Ctrl_CommonButton_Intensity_SetIntensity::_new_intensity' has a wrong offset!");

// Function Stigma.Button_Ready.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct Button_Ready_SetTitleText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Button_Ready_SetTitleText) == 0x000008, "Wrong alignment on Button_Ready_SetTitleText");
static_assert(sizeof(Button_Ready_SetTitleText) == 0x000018, "Wrong size on Button_Ready_SetTitleText");
static_assert(offsetof(Button_Ready_SetTitleText, _text) == 0x000000, "Member 'Button_Ready_SetTitleText::_text' has a wrong offset!");

// Function Stigma.HUD_CrossHair.GetCrossHairPos
// 0x0010 (0x0010 - 0x0000)
struct HUD_CrossHair_GetCrossHairPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CrossHair_GetCrossHairPos) == 0x000008, "Wrong alignment on HUD_CrossHair_GetCrossHairPos");
static_assert(sizeof(HUD_CrossHair_GetCrossHairPos) == 0x000010, "Wrong size on HUD_CrossHair_GetCrossHairPos");
static_assert(offsetof(HUD_CrossHair_GetCrossHairPos, ReturnValue) == 0x000000, "Member 'HUD_CrossHair_GetCrossHairPos::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_CrossHair.OnHit
// 0x00A8 (0x00A8 - 0x0000)
struct HUD_CrossHair_OnHit final
{
public:
	struct FHitData                               _hit_data;                                         // 0x0000(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CrossHair_OnHit) == 0x000008, "Wrong alignment on HUD_CrossHair_OnHit");
static_assert(sizeof(HUD_CrossHair_OnHit) == 0x0000A8, "Wrong size on HUD_CrossHair_OnHit");
static_assert(offsetof(HUD_CrossHair_OnHit, _hit_data) == 0x000000, "Member 'HUD_CrossHair_OnHit::_hit_data' has a wrong offset!");

// Function Stigma.HUD_CrossHair.OnHit_Local
// 0x00B0 (0x00B0 - 0x0000)
struct HUD_CrossHair_OnHit_Local final
{
public:
	struct FHitData                               _hit_data;                                         // 0x0000(0x00A8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2290[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(HUD_CrossHair_OnHit_Local) == 0x000008, "Wrong alignment on HUD_CrossHair_OnHit_Local");
static_assert(sizeof(HUD_CrossHair_OnHit_Local) == 0x0000B0, "Wrong size on HUD_CrossHair_OnHit_Local");
static_assert(offsetof(HUD_CrossHair_OnHit_Local, _hit_data) == 0x000000, "Member 'HUD_CrossHair_OnHit_Local::_hit_data' has a wrong offset!");
static_assert(offsetof(HUD_CrossHair_OnHit_Local, ReturnValue) == 0x0000A8, "Member 'HUD_CrossHair_OnHit_Local::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_CrossHair.SetCrossHairPos
// 0x0008 (0x0008 - 0x0000)
struct HUD_CrossHair_SetCrossHairPos final
{
public:
	float                                         _x;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _y;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CrossHair_SetCrossHairPos) == 0x000004, "Wrong alignment on HUD_CrossHair_SetCrossHairPos");
static_assert(sizeof(HUD_CrossHair_SetCrossHairPos) == 0x000008, "Wrong size on HUD_CrossHair_SetCrossHairPos");
static_assert(offsetof(HUD_CrossHair_SetCrossHairPos, _x) == 0x000000, "Member 'HUD_CrossHair_SetCrossHairPos::_x' has a wrong offset!");
static_assert(offsetof(HUD_CrossHair_SetCrossHairPos, _y) == 0x000004, "Member 'HUD_CrossHair_SetCrossHairPos::_y' has a wrong offset!");

// Function Stigma.Ctrl_CommonProgressBar.SetFractionalText
// 0x000C (0x000C - 0x0000)
struct Ctrl_CommonProgressBar_SetFractionalText final
{
public:
	float                                         _current_val;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _target_val;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_max;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2294[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonProgressBar_SetFractionalText) == 0x000004, "Wrong alignment on Ctrl_CommonProgressBar_SetFractionalText");
static_assert(sizeof(Ctrl_CommonProgressBar_SetFractionalText) == 0x00000C, "Wrong size on Ctrl_CommonProgressBar_SetFractionalText");
static_assert(offsetof(Ctrl_CommonProgressBar_SetFractionalText, _current_val) == 0x000000, "Member 'Ctrl_CommonProgressBar_SetFractionalText::_current_val' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetFractionalText, _target_val) == 0x000004, "Member 'Ctrl_CommonProgressBar_SetFractionalText::_target_val' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetFractionalText, _is_max) == 0x000008, "Member 'Ctrl_CommonProgressBar_SetFractionalText::_is_max' has a wrong offset!");

// Function Stigma.Ctrl_CommonProgressBar.SetPercentageText
// 0x000C (0x000C - 0x0000)
struct Ctrl_CommonProgressBar_SetPercentageText final
{
public:
	float                                         _current_val;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _target_val;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_max;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2295[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonProgressBar_SetPercentageText) == 0x000004, "Wrong alignment on Ctrl_CommonProgressBar_SetPercentageText");
static_assert(sizeof(Ctrl_CommonProgressBar_SetPercentageText) == 0x00000C, "Wrong size on Ctrl_CommonProgressBar_SetPercentageText");
static_assert(offsetof(Ctrl_CommonProgressBar_SetPercentageText, _current_val) == 0x000000, "Member 'Ctrl_CommonProgressBar_SetPercentageText::_current_val' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetPercentageText, _target_val) == 0x000004, "Member 'Ctrl_CommonProgressBar_SetPercentageText::_target_val' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetPercentageText, _is_max) == 0x000008, "Member 'Ctrl_CommonProgressBar_SetPercentageText::_is_max' has a wrong offset!");

// Function Stigma.Ctrl_CommonProgressBar.SetProgressPercent
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_CommonProgressBar_SetProgressPercent final
{
public:
	float                                         _cur_percent;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reset_value;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2296[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonProgressBar_SetProgressPercent) == 0x000004, "Wrong alignment on Ctrl_CommonProgressBar_SetProgressPercent");
static_assert(sizeof(Ctrl_CommonProgressBar_SetProgressPercent) == 0x000008, "Wrong size on Ctrl_CommonProgressBar_SetProgressPercent");
static_assert(offsetof(Ctrl_CommonProgressBar_SetProgressPercent, _cur_percent) == 0x000000, "Member 'Ctrl_CommonProgressBar_SetProgressPercent::_cur_percent' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetProgressPercent, _reset_value) == 0x000004, "Member 'Ctrl_CommonProgressBar_SetProgressPercent::_reset_value' has a wrong offset!");

// Function Stigma.Ctrl_CommonProgressBar.SetProgressValue
// 0x000C (0x000C - 0x0000)
struct Ctrl_CommonProgressBar_SetProgressValue final
{
public:
	float                                         _target_value;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _cur_value;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reset_value;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2297[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_CommonProgressBar_SetProgressValue) == 0x000004, "Wrong alignment on Ctrl_CommonProgressBar_SetProgressValue");
static_assert(sizeof(Ctrl_CommonProgressBar_SetProgressValue) == 0x00000C, "Wrong size on Ctrl_CommonProgressBar_SetProgressValue");
static_assert(offsetof(Ctrl_CommonProgressBar_SetProgressValue, _target_value) == 0x000000, "Member 'Ctrl_CommonProgressBar_SetProgressValue::_target_value' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetProgressValue, _cur_value) == 0x000004, "Member 'Ctrl_CommonProgressBar_SetProgressValue::_cur_value' has a wrong offset!");
static_assert(offsetof(Ctrl_CommonProgressBar_SetProgressValue, _reset_value) == 0x000008, "Member 'Ctrl_CommonProgressBar_SetProgressValue::_reset_value' has a wrong offset!");

// Function Stigma.Ctrl_CommonTab.Init
// 0x0520 (0x0520 - 0x0000)
struct Ctrl_CommonTab_Init final
{
public:
	struct FCommonTabInitializeInfo               _info;                                             // 0x0000(0x0520)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTab_Init) == 0x000010, "Wrong alignment on Ctrl_CommonTab_Init");
static_assert(sizeof(Ctrl_CommonTab_Init) == 0x000520, "Wrong size on Ctrl_CommonTab_Init");
static_assert(offsetof(Ctrl_CommonTab_Init, _info) == 0x000000, "Member 'Ctrl_CommonTab_Init::_info' has a wrong offset!");

// Function Stigma.Ctrl_CommonTab.SetSelectedID
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_CommonTab_SetSelectedID final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTab_SetSelectedID) == 0x000004, "Wrong alignment on Ctrl_CommonTab_SetSelectedID");
static_assert(sizeof(Ctrl_CommonTab_SetSelectedID) == 0x000008, "Wrong size on Ctrl_CommonTab_SetSelectedID");
static_assert(offsetof(Ctrl_CommonTab_SetSelectedID, _id) == 0x000000, "Member 'Ctrl_CommonTab_SetSelectedID::_id' has a wrong offset!");

// Function Stigma.Ctrl_CommonTab.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct Ctrl_CommonTab_SetTitle final
{
public:
	class FText                                   _Title;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTab_SetTitle) == 0x000008, "Wrong alignment on Ctrl_CommonTab_SetTitle");
static_assert(sizeof(Ctrl_CommonTab_SetTitle) == 0x000018, "Wrong size on Ctrl_CommonTab_SetTitle");
static_assert(offsetof(Ctrl_CommonTab_SetTitle, _Title) == 0x000000, "Member 'Ctrl_CommonTab_SetTitle::_Title' has a wrong offset!");

// Function Stigma.Ctrl_CommonTab.GetID
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_CommonTab_GetID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_CommonTab_GetID) == 0x000004, "Wrong alignment on Ctrl_CommonTab_GetID");
static_assert(sizeof(Ctrl_CommonTab_GetID) == 0x000008, "Wrong size on Ctrl_CommonTab_GetID");
static_assert(offsetof(Ctrl_CommonTab_GetID, ReturnValue) == 0x000000, "Member 'Ctrl_CommonTab_GetID::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ShowWidget.Tutorial_ShowWidget
// 0x0028 (0x0028 - 0x0000)
struct UIGuide_ShowWidget_Tutorial_ShowWidget final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                _widget_class;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _timeout;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _close_at_timeout;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIOrder                                      _order;                                            // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229B[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class UUserWidget*                            _out_widget;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_ShowWidget*                    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ShowWidget_Tutorial_ShowWidget) == 0x000008, "Wrong alignment on UIGuide_ShowWidget_Tutorial_ShowWidget");
static_assert(sizeof(UIGuide_ShowWidget_Tutorial_ShowWidget) == 0x000028, "Wrong size on UIGuide_ShowWidget_Tutorial_ShowWidget");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, _tutorial) == 0x000000, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, _widget_class) == 0x000008, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::_widget_class' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, _timeout) == 0x000010, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::_timeout' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, _close_at_timeout) == 0x000014, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::_close_at_timeout' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, _order) == 0x000015, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::_order' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, _out_widget) == 0x000018, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::_out_widget' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowWidget_Tutorial_ShowWidget, ReturnValue) == 0x000020, "Member 'UIGuide_ShowWidget_Tutorial_ShowWidget::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_ControlMasterTabBase.GetSelectedChara
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ControlMasterTabBase_GetSelectedChara final
{
public:
	ECharaType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ControlMasterTabBase_GetSelectedChara) == 0x000001, "Wrong alignment on Ctrl_ControlMasterTabBase_GetSelectedChara");
static_assert(sizeof(Ctrl_ControlMasterTabBase_GetSelectedChara) == 0x000001, "Wrong size on Ctrl_ControlMasterTabBase_GetSelectedChara");
static_assert(offsetof(Ctrl_ControlMasterTabBase_GetSelectedChara, ReturnValue) == 0x000000, "Member 'Ctrl_ControlMasterTabBase_GetSelectedChara::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_ControlMasterTabBase.InvokeOnMasterSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged final
{
public:
	ECharaType                                    _chara;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged) == 0x000001, "Wrong alignment on Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged");
static_assert(sizeof(Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged) == 0x000001, "Wrong size on Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged");
static_assert(offsetof(Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged, _chara) == 0x000000, "Member 'Ctrl_ControlMasterTabBase_InvokeOnMasterSelectionChanged::_chara' has a wrong offset!");

// Function Stigma.Ctrl_ControlMasterTabBase.RegisterOnMasterChanged
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_ControlMasterTabBase_RegisterOnMasterChanged final
{
public:
	TDelegate<void(class UCtrl_ControlMasterTabBase* _master_tab, ECharaType _chara)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ControlMasterTabBase_RegisterOnMasterChanged) == 0x000004, "Wrong alignment on Ctrl_ControlMasterTabBase_RegisterOnMasterChanged");
static_assert(sizeof(Ctrl_ControlMasterTabBase_RegisterOnMasterChanged) == 0x000010, "Wrong size on Ctrl_ControlMasterTabBase_RegisterOnMasterChanged");
static_assert(offsetof(Ctrl_ControlMasterTabBase_RegisterOnMasterChanged, _callback) == 0x000000, "Member 'Ctrl_ControlMasterTabBase_RegisterOnMasterChanged::_callback' has a wrong offset!");

// Function Stigma.Ctrl_ControlMasterTabBase.RemoveMasterProfile
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ControlMasterTabBase_RemoveMasterProfile final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ControlMasterTabBase_RemoveMasterProfile) == 0x000001, "Wrong alignment on Ctrl_ControlMasterTabBase_RemoveMasterProfile");
static_assert(sizeof(Ctrl_ControlMasterTabBase_RemoveMasterProfile) == 0x000001, "Wrong size on Ctrl_ControlMasterTabBase_RemoveMasterProfile");
static_assert(offsetof(Ctrl_ControlMasterTabBase_RemoveMasterProfile, _chara_type) == 0x000000, "Member 'Ctrl_ControlMasterTabBase_RemoveMasterProfile::_chara_type' has a wrong offset!");

// Function Stigma.Ctrl_ControlMasterTabBase.UpdateProfile
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ControlMasterTabBase_UpdateProfile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ControlMasterTabBase_UpdateProfile) == 0x000001, "Wrong alignment on Ctrl_ControlMasterTabBase_UpdateProfile");
static_assert(sizeof(Ctrl_ControlMasterTabBase_UpdateProfile) == 0x000001, "Wrong size on Ctrl_ControlMasterTabBase_UpdateProfile");
static_assert(offsetof(Ctrl_ControlMasterTabBase_UpdateProfile, ReturnValue) == 0x000000, "Member 'Ctrl_ControlMasterTabBase_UpdateProfile::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_Cartridge.UpdateAnimationProgress
// 0x0004 (0x0004 - 0x0000)
struct HUD_Cartridge_UpdateAnimationProgress final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_Cartridge_UpdateAnimationProgress) == 0x000004, "Wrong alignment on HUD_Cartridge_UpdateAnimationProgress");
static_assert(sizeof(HUD_Cartridge_UpdateAnimationProgress) == 0x000004, "Wrong size on HUD_Cartridge_UpdateAnimationProgress");
static_assert(offsetof(HUD_Cartridge_UpdateAnimationProgress, _delta) == 0x000000, "Member 'HUD_Cartridge_UpdateAnimationProgress::_delta' has a wrong offset!");

// Function Stigma.Ctrl_EventCountBubbleBase.ActiveEllipsisMark
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_EventCountBubbleBase_ActiveEllipsisMark final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_EventCountBubbleBase_ActiveEllipsisMark) == 0x000001, "Wrong alignment on Ctrl_EventCountBubbleBase_ActiveEllipsisMark");
static_assert(sizeof(Ctrl_EventCountBubbleBase_ActiveEllipsisMark) == 0x000001, "Wrong size on Ctrl_EventCountBubbleBase_ActiveEllipsisMark");
static_assert(offsetof(Ctrl_EventCountBubbleBase_ActiveEllipsisMark, _flag) == 0x000000, "Member 'Ctrl_EventCountBubbleBase_ActiveEllipsisMark::_flag' has a wrong offset!");

// Function Stigma.Ctrl_EventCountBubbleBase.SetEventCount
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_EventCountBubbleBase_SetEventCount final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_EventCountBubbleBase_SetEventCount) == 0x000004, "Wrong alignment on Ctrl_EventCountBubbleBase_SetEventCount");
static_assert(sizeof(Ctrl_EventCountBubbleBase_SetEventCount) == 0x000004, "Wrong size on Ctrl_EventCountBubbleBase_SetEventCount");
static_assert(offsetof(Ctrl_EventCountBubbleBase_SetEventCount, _count) == 0x000000, "Member 'Ctrl_EventCountBubbleBase_SetEventCount::_count' has a wrong offset!");

// Function Stigma.Ctrl_EventCountBubbleBase.SetMaxDisplayableCount
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_EventCountBubbleBase_SetMaxDisplayableCount final
{
public:
	int32                                         _max_count;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_EventCountBubbleBase_SetMaxDisplayableCount) == 0x000004, "Wrong alignment on Ctrl_EventCountBubbleBase_SetMaxDisplayableCount");
static_assert(sizeof(Ctrl_EventCountBubbleBase_SetMaxDisplayableCount) == 0x000004, "Wrong size on Ctrl_EventCountBubbleBase_SetMaxDisplayableCount");
static_assert(offsetof(Ctrl_EventCountBubbleBase_SetMaxDisplayableCount, _max_count) == 0x000000, "Member 'Ctrl_EventCountBubbleBase_SetMaxDisplayableCount::_max_count' has a wrong offset!");

// Function Stigma.Ctrl_HorizontalTabPanel.OnTabSelected
// 0x000C (0x000C - 0x0000)
struct Ctrl_HorizontalTabPanel_OnTabSelected final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_HorizontalTabPanel_OnTabSelected) == 0x000004, "Wrong alignment on Ctrl_HorizontalTabPanel_OnTabSelected");
static_assert(sizeof(Ctrl_HorizontalTabPanel_OnTabSelected) == 0x00000C, "Wrong size on Ctrl_HorizontalTabPanel_OnTabSelected");
static_assert(offsetof(Ctrl_HorizontalTabPanel_OnTabSelected, _id) == 0x000000, "Member 'Ctrl_HorizontalTabPanel_OnTabSelected::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_HorizontalTabPanel_OnTabSelected, _idx) == 0x000008, "Member 'Ctrl_HorizontalTabPanel_OnTabSelected::_idx' has a wrong offset!");

// Function Stigma.Ctrl_ItemTag.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_ItemTag_InitWidget final
{
public:
	TArray<EItemUITag>                            _tags;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ItemTag_InitWidget) == 0x000008, "Wrong alignment on Ctrl_ItemTag_InitWidget");
static_assert(sizeof(Ctrl_ItemTag_InitWidget) == 0x000010, "Wrong size on Ctrl_ItemTag_InitWidget");
static_assert(offsetof(Ctrl_ItemTag_InitWidget, _tags) == 0x000000, "Member 'Ctrl_ItemTag_InitWidget::_tags' has a wrong offset!");

// Function Stigma.Ctrl_ItemTag.SetTagStyle
// 0x00F0 (0x00F0 - 0x0000)
struct Ctrl_ItemTag_SetTagStyle final
{
public:
	struct FItemTagConfig                         _style;                                            // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ItemTag_SetTagStyle) == 0x000010, "Wrong alignment on Ctrl_ItemTag_SetTagStyle");
static_assert(sizeof(Ctrl_ItemTag_SetTagStyle) == 0x0000F0, "Wrong size on Ctrl_ItemTag_SetTagStyle");
static_assert(offsetof(Ctrl_ItemTag_SetTagStyle, _style) == 0x000000, "Member 'Ctrl_ItemTag_SetTagStyle::_style' has a wrong offset!");

// Function Stigma.UI_RecruitHistoryPopup.OnHistoryTabChanged
// 0x000C (0x000C - 0x0000)
struct UI_RecruitHistoryPopup_OnHistoryTabChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitHistoryPopup_OnHistoryTabChanged) == 0x000004, "Wrong alignment on UI_RecruitHistoryPopup_OnHistoryTabChanged");
static_assert(sizeof(UI_RecruitHistoryPopup_OnHistoryTabChanged) == 0x00000C, "Wrong size on UI_RecruitHistoryPopup_OnHistoryTabChanged");
static_assert(offsetof(UI_RecruitHistoryPopup_OnHistoryTabChanged, _id) == 0x000000, "Member 'UI_RecruitHistoryPopup_OnHistoryTabChanged::_id' has a wrong offset!");
static_assert(offsetof(UI_RecruitHistoryPopup_OnHistoryTabChanged, _idx) == 0x000008, "Member 'UI_RecruitHistoryPopup_OnHistoryTabChanged::_idx' has a wrong offset!");

// Function Stigma.UI_RecruitHistoryPopup.OnReadHistoryRecruit
// 0x0028 (0x0028 - 0x0000)
struct UI_RecruitHistoryPopup_OnReadHistoryRecruit final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadHistoryRecruit                _ack;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitHistoryPopup_OnReadHistoryRecruit) == 0x000008, "Wrong alignment on UI_RecruitHistoryPopup_OnReadHistoryRecruit");
static_assert(sizeof(UI_RecruitHistoryPopup_OnReadHistoryRecruit) == 0x000028, "Wrong size on UI_RecruitHistoryPopup_OnReadHistoryRecruit");
static_assert(offsetof(UI_RecruitHistoryPopup_OnReadHistoryRecruit, _rcode) == 0x000000, "Member 'UI_RecruitHistoryPopup_OnReadHistoryRecruit::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecruitHistoryPopup_OnReadHistoryRecruit, _ack) == 0x000008, "Member 'UI_RecruitHistoryPopup_OnReadHistoryRecruit::_ack' has a wrong offset!");

// Function Stigma.Ctrl_ListItem_Border.OnProcCheckBoxStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ListItem_Border_OnProcCheckBoxStateChanged final
{
public:
	bool                                          _is_checked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ListItem_Border_OnProcCheckBoxStateChanged) == 0x000001, "Wrong alignment on Ctrl_ListItem_Border_OnProcCheckBoxStateChanged");
static_assert(sizeof(Ctrl_ListItem_Border_OnProcCheckBoxStateChanged) == 0x000001, "Wrong size on Ctrl_ListItem_Border_OnProcCheckBoxStateChanged");
static_assert(offsetof(Ctrl_ListItem_Border_OnProcCheckBoxStateChanged, _is_checked) == 0x000000, "Member 'Ctrl_ListItem_Border_OnProcCheckBoxStateChanged::_is_checked' has a wrong offset!");

// Function Stigma.Ctrl_ListItem_Border.GetHoverImageVisibility
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ListItem_Border_GetHoverImageVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ListItem_Border_GetHoverImageVisibility) == 0x000001, "Wrong alignment on Ctrl_ListItem_Border_GetHoverImageVisibility");
static_assert(sizeof(Ctrl_ListItem_Border_GetHoverImageVisibility) == 0x000001, "Wrong size on Ctrl_ListItem_Border_GetHoverImageVisibility");
static_assert(offsetof(Ctrl_ListItem_Border_GetHoverImageVisibility, ReturnValue) == 0x000000, "Member 'Ctrl_ListItem_Border_GetHoverImageVisibility::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_MasterMissionButton.SetCharaIcon
// 0x0028 (0x0028 - 0x0000)
struct Ctrl_MasterMissionButton_SetCharaIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _image;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_MasterMissionButton_SetCharaIcon) == 0x000008, "Wrong alignment on Ctrl_MasterMissionButton_SetCharaIcon");
static_assert(sizeof(Ctrl_MasterMissionButton_SetCharaIcon) == 0x000028, "Wrong size on Ctrl_MasterMissionButton_SetCharaIcon");
static_assert(offsetof(Ctrl_MasterMissionButton_SetCharaIcon, _image) == 0x000000, "Member 'Ctrl_MasterMissionButton_SetCharaIcon::_image' has a wrong offset!");

// Function Stigma.Ctrl_MasterMissionButton.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_MasterMissionButton_SetLevel final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_MasterMissionButton_SetLevel) == 0x000004, "Wrong alignment on Ctrl_MasterMissionButton_SetLevel");
static_assert(sizeof(Ctrl_MasterMissionButton_SetLevel) == 0x000004, "Wrong size on Ctrl_MasterMissionButton_SetLevel");
static_assert(offsetof(Ctrl_MasterMissionButton_SetLevel, _level) == 0x000000, "Member 'Ctrl_MasterMissionButton_SetLevel::_level' has a wrong offset!");

// Function Stigma.Ctrl_MasterMissionButton.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_MasterMissionButton_SetLocked final
{
public:
	bool                                          _locked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_MasterMissionButton_SetLocked) == 0x000001, "Wrong alignment on Ctrl_MasterMissionButton_SetLocked");
static_assert(sizeof(Ctrl_MasterMissionButton_SetLocked) == 0x000001, "Wrong size on Ctrl_MasterMissionButton_SetLocked");
static_assert(offsetof(Ctrl_MasterMissionButton_SetLocked, _locked) == 0x000000, "Member 'Ctrl_MasterMissionButton_SetLocked::_locked' has a wrong offset!");

// Function Stigma.Ctrl_MasterMissionButton.ShowRedDot
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_MasterMissionButton_ShowRedDot final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_MasterMissionButton_ShowRedDot) == 0x000001, "Wrong alignment on Ctrl_MasterMissionButton_ShowRedDot");
static_assert(sizeof(Ctrl_MasterMissionButton_ShowRedDot) == 0x000001, "Wrong size on Ctrl_MasterMissionButton_ShowRedDot");
static_assert(offsetof(Ctrl_MasterMissionButton_ShowRedDot, _show) == 0x000000, "Member 'Ctrl_MasterMissionButton_ShowRedDot::_show' has a wrong offset!");

// Function Stigma.HUD_HpProgress.BindTargetChara
// 0x0008 (0x0008 - 0x0000)
struct HUD_HpProgress_BindTargetChara final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_HpProgress_BindTargetChara) == 0x000008, "Wrong alignment on HUD_HpProgress_BindTargetChara");
static_assert(sizeof(HUD_HpProgress_BindTargetChara) == 0x000008, "Wrong size on HUD_HpProgress_BindTargetChara");
static_assert(offsetof(HUD_HpProgress_BindTargetChara, _chara) == 0x000000, "Member 'HUD_HpProgress_BindTargetChara::_chara' has a wrong offset!");

// Function Stigma.HUD_HpProgress.OnHit
// 0x0004 (0x0004 - 0x0000)
struct HUD_HpProgress_OnHit final
{
public:
	float                                         _damage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_HpProgress_OnHit) == 0x000004, "Wrong alignment on HUD_HpProgress_OnHit");
static_assert(sizeof(HUD_HpProgress_OnHit) == 0x000004, "Wrong size on HUD_HpProgress_OnHit");
static_assert(offsetof(HUD_HpProgress_OnHit, _damage) == 0x000000, "Member 'HUD_HpProgress_OnHit::_damage' has a wrong offset!");

// Function Stigma.HUD_HpProgress.OnRechargeArmor
// 0x0004 (0x0004 - 0x0000)
struct HUD_HpProgress_OnRechargeArmor final
{
public:
	float                                         _inc_armor_rate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_HpProgress_OnRechargeArmor) == 0x000004, "Wrong alignment on HUD_HpProgress_OnRechargeArmor");
static_assert(sizeof(HUD_HpProgress_OnRechargeArmor) == 0x000004, "Wrong size on HUD_HpProgress_OnRechargeArmor");
static_assert(offsetof(HUD_HpProgress_OnRechargeArmor, _inc_armor_rate) == 0x000000, "Member 'HUD_HpProgress_OnRechargeArmor::_inc_armor_rate' has a wrong offset!");

// Function Stigma.HUD_HpProgress.Update
// 0x0004 (0x0004 - 0x0000)
struct HUD_HpProgress_Update final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_HpProgress_Update) == 0x000004, "Wrong alignment on HUD_HpProgress_Update");
static_assert(sizeof(HUD_HpProgress_Update) == 0x000004, "Wrong size on HUD_HpProgress_Update");
static_assert(offsetof(HUD_HpProgress_Update, _delta) == 0x000000, "Member 'HUD_HpProgress_Update::_delta' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepper.GetNotSelectedEntrySlotBtnColor
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor) == 0x000004, "Wrong alignment on Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor");
static_assert(sizeof(Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor) == 0x000010, "Wrong size on Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor");
static_assert(offsetof(Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor, ReturnValue) == 0x000000, "Member 'Ctrl_NavigationStepper_GetNotSelectedEntrySlotBtnColor::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepper.GetSelectedEntry
// 0x0028 (0x0028 - 0x0000)
struct Ctrl_NavigationStepper_GetSelectedEntry final
{
public:
	struct FNavigationStepperEntry                _get_selected_entry;                               // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B2[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_NavigationStepper_GetSelectedEntry) == 0x000008, "Wrong alignment on Ctrl_NavigationStepper_GetSelectedEntry");
static_assert(sizeof(Ctrl_NavigationStepper_GetSelectedEntry) == 0x000028, "Wrong size on Ctrl_NavigationStepper_GetSelectedEntry");
static_assert(offsetof(Ctrl_NavigationStepper_GetSelectedEntry, _get_selected_entry) == 0x000000, "Member 'Ctrl_NavigationStepper_GetSelectedEntry::_get_selected_entry' has a wrong offset!");
static_assert(offsetof(Ctrl_NavigationStepper_GetSelectedEntry, ReturnValue) == 0x000020, "Member 'Ctrl_NavigationStepper_GetSelectedEntry::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepper.GetSelectedEntrySlotBtnColor
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor) == 0x000004, "Wrong alignment on Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor");
static_assert(sizeof(Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor) == 0x000010, "Wrong size on Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor");
static_assert(offsetof(Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor, ReturnValue) == 0x000000, "Member 'Ctrl_NavigationStepper_GetSelectedEntrySlotBtnColor::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepper.RegisterOnSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_NavigationStepper_RegisterOnSelectionChanged final
{
public:
	TDelegate<void(class UCtrl_NavigationStepper* _navigation_stepper, struct FNavigationStepperEntry& _selected_entry, int32 _entry_index)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_NavigationStepper_RegisterOnSelectionChanged) == 0x000004, "Wrong alignment on Ctrl_NavigationStepper_RegisterOnSelectionChanged");
static_assert(sizeof(Ctrl_NavigationStepper_RegisterOnSelectionChanged) == 0x000010, "Wrong size on Ctrl_NavigationStepper_RegisterOnSelectionChanged");
static_assert(offsetof(Ctrl_NavigationStepper_RegisterOnSelectionChanged, _callback) == 0x000000, "Member 'Ctrl_NavigationStepper_RegisterOnSelectionChanged::_callback' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepper.SelectByIndex
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_NavigationStepper_SelectByIndex final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B3[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_NavigationStepper_SelectByIndex) == 0x000004, "Wrong alignment on Ctrl_NavigationStepper_SelectByIndex");
static_assert(sizeof(Ctrl_NavigationStepper_SelectByIndex) == 0x000008, "Wrong size on Ctrl_NavigationStepper_SelectByIndex");
static_assert(offsetof(Ctrl_NavigationStepper_SelectByIndex, _index) == 0x000000, "Member 'Ctrl_NavigationStepper_SelectByIndex::_index' has a wrong offset!");
static_assert(offsetof(Ctrl_NavigationStepper_SelectByIndex, _invoke_callback) == 0x000004, "Member 'Ctrl_NavigationStepper_SelectByIndex::_invoke_callback' has a wrong offset!");
static_assert(offsetof(Ctrl_NavigationStepper_SelectByIndex, ReturnValue) == 0x000005, "Member 'Ctrl_NavigationStepper_SelectByIndex::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepper.SelectEntryByID
// 0x000C (0x000C - 0x0000)
struct Ctrl_NavigationStepper_SelectEntryByID final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B4[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_NavigationStepper_SelectEntryByID) == 0x000004, "Wrong alignment on Ctrl_NavigationStepper_SelectEntryByID");
static_assert(sizeof(Ctrl_NavigationStepper_SelectEntryByID) == 0x00000C, "Wrong size on Ctrl_NavigationStepper_SelectEntryByID");
static_assert(offsetof(Ctrl_NavigationStepper_SelectEntryByID, _id) == 0x000000, "Member 'Ctrl_NavigationStepper_SelectEntryByID::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_NavigationStepper_SelectEntryByID, _invoke_callback) == 0x000008, "Member 'Ctrl_NavigationStepper_SelectEntryByID::_invoke_callback' has a wrong offset!");
static_assert(offsetof(Ctrl_NavigationStepper_SelectEntryByID, ReturnValue) == 0x000009, "Member 'Ctrl_NavigationStepper_SelectEntryByID::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_NavigationStepperSlotBase.SetSelectedState
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_NavigationStepperSlotBase_SetSelectedState final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_NavigationStepperSlotBase_SetSelectedState) == 0x000001, "Wrong alignment on Ctrl_NavigationStepperSlotBase_SetSelectedState");
static_assert(sizeof(Ctrl_NavigationStepperSlotBase_SetSelectedState) == 0x000001, "Wrong size on Ctrl_NavigationStepperSlotBase_SetSelectedState");
static_assert(offsetof(Ctrl_NavigationStepperSlotBase_SetSelectedState, _flag) == 0x000000, "Member 'Ctrl_NavigationStepperSlotBase_SetSelectedState::_flag' has a wrong offset!");

// Function Stigma.UI_RemainDateTimer.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_RemainDateTimer_InitWidget final
{
public:
	struct FDateTime                              _end_at;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _alert_hour;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B8[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RemainDateTimer_InitWidget) == 0x000008, "Wrong alignment on UI_RemainDateTimer_InitWidget");
static_assert(sizeof(UI_RemainDateTimer_InitWidget) == 0x000010, "Wrong size on UI_RemainDateTimer_InitWidget");
static_assert(offsetof(UI_RemainDateTimer_InitWidget, _end_at) == 0x000000, "Member 'UI_RemainDateTimer_InitWidget::_end_at' has a wrong offset!");
static_assert(offsetof(UI_RemainDateTimer_InitWidget, _alert_hour) == 0x000008, "Member 'UI_RemainDateTimer_InitWidget::_alert_hour' has a wrong offset!");

// Function Stigma.UI_RemainDateTimer.OnAlert
// 0x0001 (0x0001 - 0x0000)
struct UI_RemainDateTimer_OnAlert final
{
public:
	bool                                          _alert;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RemainDateTimer_OnAlert) == 0x000001, "Wrong alignment on UI_RemainDateTimer_OnAlert");
static_assert(sizeof(UI_RemainDateTimer_OnAlert) == 0x000001, "Wrong size on UI_RemainDateTimer_OnAlert");
static_assert(offsetof(UI_RemainDateTimer_OnAlert, _alert) == 0x000000, "Member 'UI_RemainDateTimer_OnAlert::_alert' has a wrong offset!");

// Function Stigma.UI_RemainDateTimer.GetRemainTimerSec
// 0x0004 (0x0004 - 0x0000)
struct UI_RemainDateTimer_GetRemainTimerSec final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RemainDateTimer_GetRemainTimerSec) == 0x000004, "Wrong alignment on UI_RemainDateTimer_GetRemainTimerSec");
static_assert(sizeof(UI_RemainDateTimer_GetRemainTimerSec) == 0x000004, "Wrong size on UI_RemainDateTimer_GetRemainTimerSec");
static_assert(offsetof(UI_RemainDateTimer_GetRemainTimerSec, ReturnValue) == 0x000000, "Member 'UI_RemainDateTimer_GetRemainTimerSec::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionControlBase.IsControlNowUsing
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_OptionControlBase_IsControlNowUsing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionControlBase_IsControlNowUsing) == 0x000001, "Wrong alignment on Ctrl_OptionControlBase_IsControlNowUsing");
static_assert(sizeof(Ctrl_OptionControlBase_IsControlNowUsing) == 0x000001, "Wrong size on Ctrl_OptionControlBase_IsControlNowUsing");
static_assert(offsetof(Ctrl_OptionControlBase_IsControlNowUsing, ReturnValue) == 0x000000, "Member 'Ctrl_OptionControlBase_IsControlNowUsing::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionControlBase.RegisterOnControlUsingChanged
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionControlBase_RegisterOnControlUsingChanged final
{
public:
	TDelegate<void(class UCtrl_OptionControlBase* _control, bool _is_using)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionControlBase_RegisterOnControlUsingChanged) == 0x000004, "Wrong alignment on Ctrl_OptionControlBase_RegisterOnControlUsingChanged");
static_assert(sizeof(Ctrl_OptionControlBase_RegisterOnControlUsingChanged) == 0x000010, "Wrong size on Ctrl_OptionControlBase_RegisterOnControlUsingChanged");
static_assert(offsetof(Ctrl_OptionControlBase_RegisterOnControlUsingChanged, _callback) == 0x000000, "Member 'Ctrl_OptionControlBase_RegisterOnControlUsingChanged::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionControlBase.SetIsControlNowUsing
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_OptionControlBase_SetIsControlNowUsing final
{
public:
	bool                                          _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionControlBase_SetIsControlNowUsing) == 0x000001, "Wrong alignment on Ctrl_OptionControlBase_SetIsControlNowUsing");
static_assert(sizeof(Ctrl_OptionControlBase_SetIsControlNowUsing) == 0x000001, "Wrong size on Ctrl_OptionControlBase_SetIsControlNowUsing");
static_assert(offsetof(Ctrl_OptionControlBase_SetIsControlNowUsing, _state) == 0x000000, "Member 'Ctrl_OptionControlBase_SetIsControlNowUsing::_state' has a wrong offset!");

// Function Stigma.Ctrl_OptionControlBase.SetOwner
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionControlBase_SetOwner final
{
public:
	class UUI_Option_Control*                     _owner_page;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCtrl_OptionItemPanelBase*              _owner_panel;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionControlBase_SetOwner) == 0x000008, "Wrong alignment on Ctrl_OptionControlBase_SetOwner");
static_assert(sizeof(Ctrl_OptionControlBase_SetOwner) == 0x000010, "Wrong size on Ctrl_OptionControlBase_SetOwner");
static_assert(offsetof(Ctrl_OptionControlBase_SetOwner, _owner_page) == 0x000000, "Member 'Ctrl_OptionControlBase_SetOwner::_owner_page' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionControlBase_SetOwner, _owner_panel) == 0x000008, "Member 'Ctrl_OptionControlBase_SetOwner::_owner_panel' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnBuyRecruit
// 0x0038 (0x0038 - 0x0000)
struct UI_RecruitPage_OnBuyRecruit final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_BuyRecruit                        _ack;                                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitPage_OnBuyRecruit) == 0x000008, "Wrong alignment on UI_RecruitPage_OnBuyRecruit");
static_assert(sizeof(UI_RecruitPage_OnBuyRecruit) == 0x000038, "Wrong size on UI_RecruitPage_OnBuyRecruit");
static_assert(offsetof(UI_RecruitPage_OnBuyRecruit, _rcode) == 0x000000, "Member 'UI_RecruitPage_OnBuyRecruit::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnBuyRecruit, _ack) == 0x000008, "Member 'UI_RecruitPage_OnBuyRecruit::_ack' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnClickDetail
// 0x0010 (0x0010 - 0x0000)
struct UI_RecruitPage_OnClickDetail final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RecruitPage_OnClickDetail) == 0x000008, "Wrong alignment on UI_RecruitPage_OnClickDetail");
static_assert(sizeof(UI_RecruitPage_OnClickDetail) == 0x000010, "Wrong size on UI_RecruitPage_OnClickDetail");
static_assert(offsetof(UI_RecruitPage_OnClickDetail, _widget) == 0x000000, "Member 'UI_RecruitPage_OnClickDetail::_widget' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnClickDetail, _select) == 0x000008, "Member 'UI_RecruitPage_OnClickDetail::_select' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnClickExchange
// 0x0010 (0x0010 - 0x0000)
struct UI_RecruitPage_OnClickExchange final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RecruitPage_OnClickExchange) == 0x000008, "Wrong alignment on UI_RecruitPage_OnClickExchange");
static_assert(sizeof(UI_RecruitPage_OnClickExchange) == 0x000010, "Wrong size on UI_RecruitPage_OnClickExchange");
static_assert(offsetof(UI_RecruitPage_OnClickExchange, _widget) == 0x000000, "Member 'UI_RecruitPage_OnClickExchange::_widget' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnClickExchange, _select) == 0x000008, "Member 'UI_RecruitPage_OnClickExchange::_select' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnClickHistory
// 0x0010 (0x0010 - 0x0000)
struct UI_RecruitPage_OnClickHistory final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RecruitPage_OnClickHistory) == 0x000008, "Wrong alignment on UI_RecruitPage_OnClickHistory");
static_assert(sizeof(UI_RecruitPage_OnClickHistory) == 0x000010, "Wrong size on UI_RecruitPage_OnClickHistory");
static_assert(offsetof(UI_RecruitPage_OnClickHistory, _widget) == 0x000000, "Member 'UI_RecruitPage_OnClickHistory::_widget' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnClickHistory, _select) == 0x000008, "Member 'UI_RecruitPage_OnClickHistory::_select' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnClickRecruitBuy
// 0x0068 (0x0068 - 0x0000)
struct UI_RecruitPage_OnClickRecruitBuy final
{
public:
	struct FRecruitExcuteData                     _data;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C1[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RecruitPage_OnClickRecruitBuy) == 0x000008, "Wrong alignment on UI_RecruitPage_OnClickRecruitBuy");
static_assert(sizeof(UI_RecruitPage_OnClickRecruitBuy) == 0x000068, "Wrong size on UI_RecruitPage_OnClickRecruitBuy");
static_assert(offsetof(UI_RecruitPage_OnClickRecruitBuy, _data) == 0x000000, "Member 'UI_RecruitPage_OnClickRecruitBuy::_data' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnClickRecruitBuy, _index) == 0x000060, "Member 'UI_RecruitPage_OnClickRecruitBuy::_index' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnReadRecruit
// 0x0018 (0x0018 - 0x0000)
struct UI_RecruitPage_OnReadRecruit final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadRecruit                       _ack;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitPage_OnReadRecruit) == 0x000008, "Wrong alignment on UI_RecruitPage_OnReadRecruit");
static_assert(sizeof(UI_RecruitPage_OnReadRecruit) == 0x000018, "Wrong size on UI_RecruitPage_OnReadRecruit");
static_assert(offsetof(UI_RecruitPage_OnReadRecruit, _rcode) == 0x000000, "Member 'UI_RecruitPage_OnReadRecruit::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnReadRecruit, _ack) == 0x000008, "Member 'UI_RecruitPage_OnReadRecruit::_ack' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnRecruitTabChanged
// 0x000C (0x000C - 0x0000)
struct UI_RecruitPage_OnRecruitTabChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitPage_OnRecruitTabChanged) == 0x000004, "Wrong alignment on UI_RecruitPage_OnRecruitTabChanged");
static_assert(sizeof(UI_RecruitPage_OnRecruitTabChanged) == 0x00000C, "Wrong size on UI_RecruitPage_OnRecruitTabChanged");
static_assert(offsetof(UI_RecruitPage_OnRecruitTabChanged, _id) == 0x000000, "Member 'UI_RecruitPage_OnRecruitTabChanged::_id' has a wrong offset!");
static_assert(offsetof(UI_RecruitPage_OnRecruitTabChanged, _idx) == 0x000008, "Member 'UI_RecruitPage_OnRecruitTabChanged::_idx' has a wrong offset!");

// Function Stigma.UI_RecruitPage.OnUpdateUser
// 0x0001 (0x0001 - 0x0000)
struct UI_RecruitPage_OnUpdateUser final
{
public:
	EUserEvent                                    _event;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecruitPage_OnUpdateUser) == 0x000001, "Wrong alignment on UI_RecruitPage_OnUpdateUser");
static_assert(sizeof(UI_RecruitPage_OnUpdateUser) == 0x000001, "Wrong size on UI_RecruitPage_OnUpdateUser");
static_assert(offsetof(UI_RecruitPage_OnUpdateUser, _event) == 0x000000, "Member 'UI_RecruitPage_OnUpdateUser::_event' has a wrong offset!");

// Function Stigma.Ctrl_OptionDetailTabBase.CreateOptionContextWidget
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionDetailTabBase_CreateOptionContextWidget final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDetailTabBase_CreateOptionContextWidget) == 0x000008, "Wrong alignment on Ctrl_OptionDetailTabBase_CreateOptionContextWidget");
static_assert(sizeof(Ctrl_OptionDetailTabBase_CreateOptionContextWidget) == 0x000010, "Wrong size on Ctrl_OptionDetailTabBase_CreateOptionContextWidget");
static_assert(offsetof(Ctrl_OptionDetailTabBase_CreateOptionContextWidget, _idx) == 0x000000, "Member 'Ctrl_OptionDetailTabBase_CreateOptionContextWidget::_idx' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionDetailTabBase_CreateOptionContextWidget, ReturnValue) == 0x000008, "Member 'Ctrl_OptionDetailTabBase_CreateOptionContextWidget::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionDetailTabBase.GetSelectedIdx
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionDetailTabBase_GetSelectedIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDetailTabBase_GetSelectedIdx) == 0x000004, "Wrong alignment on Ctrl_OptionDetailTabBase_GetSelectedIdx");
static_assert(sizeof(Ctrl_OptionDetailTabBase_GetSelectedIdx) == 0x000004, "Wrong size on Ctrl_OptionDetailTabBase_GetSelectedIdx");
static_assert(offsetof(Ctrl_OptionDetailTabBase_GetSelectedIdx, ReturnValue) == 0x000000, "Member 'Ctrl_OptionDetailTabBase_GetSelectedIdx::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.OnProcSelectionChange
// 0x0020 (0x0020 - 0x0000)
struct Ctrl_OptionDropDownBase_OnProcSelectionChange final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _option;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   _selection_info;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_OptionDropDownBase_OnProcSelectionChange) == 0x000008, "Wrong alignment on Ctrl_OptionDropDownBase_OnProcSelectionChange");
static_assert(sizeof(Ctrl_OptionDropDownBase_OnProcSelectionChange) == 0x000020, "Wrong size on Ctrl_OptionDropDownBase_OnProcSelectionChange");
static_assert(offsetof(Ctrl_OptionDropDownBase_OnProcSelectionChange, _id) == 0x000000, "Member 'Ctrl_OptionDropDownBase_OnProcSelectionChange::_id' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionDropDownBase_OnProcSelectionChange, _option) == 0x000008, "Member 'Ctrl_OptionDropDownBase_OnProcSelectionChange::_option' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionDropDownBase_OnProcSelectionChange, _selection_info) == 0x000018, "Member 'Ctrl_OptionDropDownBase_OnProcSelectionChange::_selection_info' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.RegisterOnSelectionChanged
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionDropDownBase_RegisterOnSelectionChanged final
{
public:
	TDelegate<void(class FName& _id, int32 _index)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDropDownBase_RegisterOnSelectionChanged) == 0x000004, "Wrong alignment on Ctrl_OptionDropDownBase_RegisterOnSelectionChanged");
static_assert(sizeof(Ctrl_OptionDropDownBase_RegisterOnSelectionChanged) == 0x000010, "Wrong size on Ctrl_OptionDropDownBase_RegisterOnSelectionChanged");
static_assert(offsetof(Ctrl_OptionDropDownBase_RegisterOnSelectionChanged, _callback) == 0x000000, "Member 'Ctrl_OptionDropDownBase_RegisterOnSelectionChanged::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.SelectByID
// 0x000C (0x000C - 0x0000)
struct Ctrl_OptionDropDownBase_SelectByID final
{
public:
	class FName                                   _display_text;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C6[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_OptionDropDownBase_SelectByID) == 0x000004, "Wrong alignment on Ctrl_OptionDropDownBase_SelectByID");
static_assert(sizeof(Ctrl_OptionDropDownBase_SelectByID) == 0x00000C, "Wrong size on Ctrl_OptionDropDownBase_SelectByID");
static_assert(offsetof(Ctrl_OptionDropDownBase_SelectByID, _display_text) == 0x000000, "Member 'Ctrl_OptionDropDownBase_SelectByID::_display_text' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionDropDownBase_SelectByID, ReturnValue) == 0x000008, "Member 'Ctrl_OptionDropDownBase_SelectByID::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.SelectByIndex
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionDropDownBase_SelectByIndex final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDropDownBase_SelectByIndex) == 0x000004, "Wrong alignment on Ctrl_OptionDropDownBase_SelectByIndex");
static_assert(sizeof(Ctrl_OptionDropDownBase_SelectByIndex) == 0x000004, "Wrong size on Ctrl_OptionDropDownBase_SelectByIndex");
static_assert(offsetof(Ctrl_OptionDropDownBase_SelectByIndex, _index) == 0x000000, "Member 'Ctrl_OptionDropDownBase_SelectByIndex::_index' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.SetUpByEntries
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionDropDownBase_SetUpByEntries final
{
public:
	TArray<struct FOptionDropDownEntry>           _entry_list;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDropDownBase_SetUpByEntries) == 0x000008, "Wrong alignment on Ctrl_OptionDropDownBase_SetUpByEntries");
static_assert(sizeof(Ctrl_OptionDropDownBase_SetUpByEntries) == 0x000010, "Wrong size on Ctrl_OptionDropDownBase_SetUpByEntries");
static_assert(offsetof(Ctrl_OptionDropDownBase_SetUpByEntries, _entry_list) == 0x000000, "Member 'Ctrl_OptionDropDownBase_SetUpByEntries::_entry_list' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionDropDownBase_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDropDownBase_GetOptionCount) == 0x000004, "Wrong alignment on Ctrl_OptionDropDownBase_GetOptionCount");
static_assert(sizeof(Ctrl_OptionDropDownBase_GetOptionCount) == 0x000004, "Wrong size on Ctrl_OptionDropDownBase_GetOptionCount");
static_assert(offsetof(Ctrl_OptionDropDownBase_GetOptionCount, ReturnValue) == 0x000000, "Member 'Ctrl_OptionDropDownBase_GetOptionCount::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionDropDownBase.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionDropDownBase_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionDropDownBase_GetSelectedIndex) == 0x000004, "Wrong alignment on Ctrl_OptionDropDownBase_GetSelectedIndex");
static_assert(sizeof(Ctrl_OptionDropDownBase_GetSelectedIndex) == 0x000004, "Wrong size on Ctrl_OptionDropDownBase_GetSelectedIndex");
static_assert(offsetof(Ctrl_OptionDropDownBase_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'Ctrl_OptionDropDownBase_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionItemEntry.RegisterOnHoverChanged
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionItemEntry_RegisterOnHoverChanged final
{
public:
	TDelegate<void(class UCtrl_OptionItemEntry* _panel, bool _is_hover)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionItemEntry_RegisterOnHoverChanged) == 0x000004, "Wrong alignment on Ctrl_OptionItemEntry_RegisterOnHoverChanged");
static_assert(sizeof(Ctrl_OptionItemEntry_RegisterOnHoverChanged) == 0x000010, "Wrong size on Ctrl_OptionItemEntry_RegisterOnHoverChanged");
static_assert(offsetof(Ctrl_OptionItemEntry_RegisterOnHoverChanged, _callback) == 0x000000, "Member 'Ctrl_OptionItemEntry_RegisterOnHoverChanged::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionItemPanelBase.SetHoverSound
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_OptionItemPanelBase_SetHoverSound final
{
public:
	class USoundBase*                             _hover_sound;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionItemPanelBase_SetHoverSound) == 0x000008, "Wrong alignment on Ctrl_OptionItemPanelBase_SetHoverSound");
static_assert(sizeof(Ctrl_OptionItemPanelBase_SetHoverSound) == 0x000008, "Wrong size on Ctrl_OptionItemPanelBase_SetHoverSound");
static_assert(offsetof(Ctrl_OptionItemPanelBase_SetHoverSound, _hover_sound) == 0x000000, "Member 'Ctrl_OptionItemPanelBase_SetHoverSound::_hover_sound' has a wrong offset!");

// Function Stigma.Ctrl_OptionItemPanelBase.SetHoverState
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_OptionItemPanelBase_SetHoverState final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionItemPanelBase_SetHoverState) == 0x000001, "Wrong alignment on Ctrl_OptionItemPanelBase_SetHoverState");
static_assert(sizeof(Ctrl_OptionItemPanelBase_SetHoverState) == 0x000001, "Wrong size on Ctrl_OptionItemPanelBase_SetHoverState");
static_assert(offsetof(Ctrl_OptionItemPanelBase_SetHoverState, _flag) == 0x000000, "Member 'Ctrl_OptionItemPanelBase_SetHoverState::_flag' has a wrong offset!");

// Function Stigma.Ctrl_OptionItemPanelBase.SetPanelText
// 0x0018 (0x0018 - 0x0000)
struct Ctrl_OptionItemPanelBase_SetPanelText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionItemPanelBase_SetPanelText) == 0x000008, "Wrong alignment on Ctrl_OptionItemPanelBase_SetPanelText");
static_assert(sizeof(Ctrl_OptionItemPanelBase_SetPanelText) == 0x000018, "Wrong size on Ctrl_OptionItemPanelBase_SetPanelText");
static_assert(offsetof(Ctrl_OptionItemPanelBase_SetPanelText, _text) == 0x000000, "Member 'Ctrl_OptionItemPanelBase_SetPanelText::_text' has a wrong offset!");

// Function Stigma.Ctrl_OptionItemPanelBase.SetUnhoverSound
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_OptionItemPanelBase_SetUnhoverSound final
{
public:
	class USoundBase*                             _unhover_sound;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionItemPanelBase_SetUnhoverSound) == 0x000008, "Wrong alignment on Ctrl_OptionItemPanelBase_SetUnhoverSound");
static_assert(sizeof(Ctrl_OptionItemPanelBase_SetUnhoverSound) == 0x000008, "Wrong size on Ctrl_OptionItemPanelBase_SetUnhoverSound");
static_assert(offsetof(Ctrl_OptionItemPanelBase_SetUnhoverSound, _unhover_sound) == 0x000000, "Member 'Ctrl_OptionItemPanelBase_SetUnhoverSound::_unhover_sound' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.ChangeKeyMapping
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_OptionKeyBindBase_ChangeKeyMapping final
{
public:
	bool                                          _is_roll_back;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_ChangeKeyMapping) == 0x000001, "Wrong alignment on Ctrl_OptionKeyBindBase_ChangeKeyMapping");
static_assert(sizeof(Ctrl_OptionKeyBindBase_ChangeKeyMapping) == 0x000002, "Wrong size on Ctrl_OptionKeyBindBase_ChangeKeyMapping");
static_assert(offsetof(Ctrl_OptionKeyBindBase_ChangeKeyMapping, _is_roll_back) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_ChangeKeyMapping::_is_roll_back' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_ChangeKeyMapping, _invoke_callback) == 0x000001, "Member 'Ctrl_OptionKeyBindBase_ChangeKeyMapping::_invoke_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.CheckDuplicate
// 0x2438 (0x2438 - 0x0000)
struct Ctrl_OptionKeyBindBase_CheckDuplicate final
{
public:
	struct FKeyBindOption                         Key_bind_option;                                   // 0x0000(0x23A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKeyMappings                           _mappings;                                         // 0x23A0(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_CheckDuplicate) == 0x000008, "Wrong alignment on Ctrl_OptionKeyBindBase_CheckDuplicate");
static_assert(sizeof(Ctrl_OptionKeyBindBase_CheckDuplicate) == 0x002438, "Wrong size on Ctrl_OptionKeyBindBase_CheckDuplicate");
static_assert(offsetof(Ctrl_OptionKeyBindBase_CheckDuplicate, Key_bind_option) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_CheckDuplicate::Key_bind_option' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_CheckDuplicate, _mappings) == 0x0023A0, "Member 'Ctrl_OptionKeyBindBase_CheckDuplicate::_mappings' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.Init
// 0x0100 (0x0100 - 0x0000)
struct Ctrl_OptionKeyBindBase_Init final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKeyMapping                            _cur_key_mapping;                                  // 0x0008(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyMapping                            _default_key_mapping;                              // 0x0038(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyMappings                           _cur_key_mappings;                                 // 0x0068(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_Init) == 0x000008, "Wrong alignment on Ctrl_OptionKeyBindBase_Init");
static_assert(sizeof(Ctrl_OptionKeyBindBase_Init) == 0x000100, "Wrong size on Ctrl_OptionKeyBindBase_Init");
static_assert(offsetof(Ctrl_OptionKeyBindBase_Init, _chara_type) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_Init::_chara_type' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_Init, _cur_key_mapping) == 0x000008, "Member 'Ctrl_OptionKeyBindBase_Init::_cur_key_mapping' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_Init, _default_key_mapping) == 0x000038, "Member 'Ctrl_OptionKeyBindBase_Init::_default_key_mapping' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_Init, _cur_key_mappings) == 0x000068, "Member 'Ctrl_OptionKeyBindBase_Init::_cur_key_mappings' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.OnInternalKeyMappingChanged
// 0x0030 (0x0030 - 0x0000)
struct Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged final
{
public:
	struct FKeyMapping                            _mapping;                                          // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged) == 0x000008, "Wrong alignment on Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged");
static_assert(sizeof(Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged) == 0x000030, "Wrong size on Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged");
static_assert(offsetof(Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged, _mapping) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_OnInternalKeyMappingChanged::_mapping' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.RegisterOnMappingChange
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionKeyBindBase_RegisterOnMappingChange final
{
public:
	TDelegate<void(class UCtrl_OptionKeyBindBase* _key_binder, struct FKeyMapping& _mapping)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_RegisterOnMappingChange) == 0x000004, "Wrong alignment on Ctrl_OptionKeyBindBase_RegisterOnMappingChange");
static_assert(sizeof(Ctrl_OptionKeyBindBase_RegisterOnMappingChange) == 0x000010, "Wrong size on Ctrl_OptionKeyBindBase_RegisterOnMappingChange");
static_assert(offsetof(Ctrl_OptionKeyBindBase_RegisterOnMappingChange, _callback) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_RegisterOnMappingChange::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.SetBlinking
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_OptionKeyBindBase_SetBlinking final
{
public:
	bool                                          _blinking;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _blinking_speed;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_SetBlinking) == 0x000004, "Wrong alignment on Ctrl_OptionKeyBindBase_SetBlinking");
static_assert(sizeof(Ctrl_OptionKeyBindBase_SetBlinking) == 0x000008, "Wrong size on Ctrl_OptionKeyBindBase_SetBlinking");
static_assert(offsetof(Ctrl_OptionKeyBindBase_SetBlinking, _blinking) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_SetBlinking::_blinking' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_SetBlinking, _blinking_speed) == 0x000004, "Member 'Ctrl_OptionKeyBindBase_SetBlinking::_blinking_speed' has a wrong offset!");

// Function Stigma.Ctrl_OptionKeyBindBase.UpdateUI
// 0x0038 (0x0038 - 0x0000)
struct Ctrl_OptionKeyBindBase_UpdateUI final
{
public:
	class UCtrl_OptionKeyBindBase*                _key_binder;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyMapping                            _mapping;                                          // 0x0008(0x0030)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionKeyBindBase_UpdateUI) == 0x000008, "Wrong alignment on Ctrl_OptionKeyBindBase_UpdateUI");
static_assert(sizeof(Ctrl_OptionKeyBindBase_UpdateUI) == 0x000038, "Wrong size on Ctrl_OptionKeyBindBase_UpdateUI");
static_assert(offsetof(Ctrl_OptionKeyBindBase_UpdateUI, _key_binder) == 0x000000, "Member 'Ctrl_OptionKeyBindBase_UpdateUI::_key_binder' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionKeyBindBase_UpdateUI, _mapping) == 0x000008, "Member 'Ctrl_OptionKeyBindBase_UpdateUI::_mapping' has a wrong offset!");

// Function Stigma.GunPresetBlueprintLibrary.GetGunType
// 0x0018 (0x0018 - 0x0000)
struct GunPresetBlueprintLibrary_GetGunType final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunPresetBlueprintLibrary_GetGunType) == 0x000008, "Wrong alignment on GunPresetBlueprintLibrary_GetGunType");
static_assert(sizeof(GunPresetBlueprintLibrary_GetGunType) == 0x000018, "Wrong size on GunPresetBlueprintLibrary_GetGunType");
static_assert(offsetof(GunPresetBlueprintLibrary_GetGunType, _gun_preset) == 0x000000, "Member 'GunPresetBlueprintLibrary_GetGunType::_gun_preset' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_GetGunType, ReturnValue) == 0x000010, "Member 'GunPresetBlueprintLibrary_GetGunType::ReturnValue' has a wrong offset!");

// Function Stigma.GunPresetBlueprintLibrary.GetPresetSlot
// 0x0018 (0x0018 - 0x0000)
struct GunPresetBlueprintLibrary_GetPresetSlot final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunPresetBlueprintLibrary_GetPresetSlot) == 0x000008, "Wrong alignment on GunPresetBlueprintLibrary_GetPresetSlot");
static_assert(sizeof(GunPresetBlueprintLibrary_GetPresetSlot) == 0x000018, "Wrong size on GunPresetBlueprintLibrary_GetPresetSlot");
static_assert(offsetof(GunPresetBlueprintLibrary_GetPresetSlot, _gun_preset) == 0x000000, "Member 'GunPresetBlueprintLibrary_GetPresetSlot::_gun_preset' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_GetPresetSlot, ReturnValue) == 0x000010, "Member 'GunPresetBlueprintLibrary_GetPresetSlot::ReturnValue' has a wrong offset!");

// Function Stigma.GunPresetBlueprintLibrary.IsEqualGunPreset
// 0x0028 (0x0028 - 0x0000)
struct GunPresetBlueprintLibrary_IsEqualGunPreset final
{
public:
	struct FGunPreset                             _preset1;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunPreset                             _preset2;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D2[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunPresetBlueprintLibrary_IsEqualGunPreset) == 0x000008, "Wrong alignment on GunPresetBlueprintLibrary_IsEqualGunPreset");
static_assert(sizeof(GunPresetBlueprintLibrary_IsEqualGunPreset) == 0x000028, "Wrong size on GunPresetBlueprintLibrary_IsEqualGunPreset");
static_assert(offsetof(GunPresetBlueprintLibrary_IsEqualGunPreset, _preset1) == 0x000000, "Member 'GunPresetBlueprintLibrary_IsEqualGunPreset::_preset1' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_IsEqualGunPreset, _preset2) == 0x000010, "Member 'GunPresetBlueprintLibrary_IsEqualGunPreset::_preset2' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_IsEqualGunPreset, ReturnValue) == 0x000020, "Member 'GunPresetBlueprintLibrary_IsEqualGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.GunPresetBlueprintLibrary.IsValidGunPreset
// 0x0018 (0x0018 - 0x0000)
struct GunPresetBlueprintLibrary_IsValidGunPreset final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunPresetBlueprintLibrary_IsValidGunPreset) == 0x000008, "Wrong alignment on GunPresetBlueprintLibrary_IsValidGunPreset");
static_assert(sizeof(GunPresetBlueprintLibrary_IsValidGunPreset) == 0x000018, "Wrong size on GunPresetBlueprintLibrary_IsValidGunPreset");
static_assert(offsetof(GunPresetBlueprintLibrary_IsValidGunPreset, _gun_preset) == 0x000000, "Member 'GunPresetBlueprintLibrary_IsValidGunPreset::_gun_preset' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_IsValidGunPreset, ReturnValue) == 0x000010, "Member 'GunPresetBlueprintLibrary_IsValidGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.GunPresetBlueprintLibrary.MakeGunPreset
// 0x0018 (0x0018 - 0x0000)
struct GunPresetBlueprintLibrary_MakeGunPreset final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _preset_slot;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunPreset                             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunPresetBlueprintLibrary_MakeGunPreset) == 0x000008, "Wrong alignment on GunPresetBlueprintLibrary_MakeGunPreset");
static_assert(sizeof(GunPresetBlueprintLibrary_MakeGunPreset) == 0x000018, "Wrong size on GunPresetBlueprintLibrary_MakeGunPreset");
static_assert(offsetof(GunPresetBlueprintLibrary_MakeGunPreset, _gun_type) == 0x000000, "Member 'GunPresetBlueprintLibrary_MakeGunPreset::_gun_type' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_MakeGunPreset, _preset_slot) == 0x000004, "Member 'GunPresetBlueprintLibrary_MakeGunPreset::_preset_slot' has a wrong offset!");
static_assert(offsetof(GunPresetBlueprintLibrary_MakeGunPreset, ReturnValue) == 0x000008, "Member 'GunPresetBlueprintLibrary_MakeGunPreset::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RewardItem.SetCount
// 0x0004 (0x0004 - 0x0000)
struct UI_RewardItem_SetCount final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardItem_SetCount) == 0x000004, "Wrong alignment on UI_RewardItem_SetCount");
static_assert(sizeof(UI_RewardItem_SetCount) == 0x000004, "Wrong size on UI_RewardItem_SetCount");
static_assert(offsetof(UI_RewardItem_SetCount, _count) == 0x000000, "Member 'UI_RewardItem_SetCount::_count' has a wrong offset!");

// Function Stigma.UI_RewardItem.SetFromItemEntry
// 0x0130 (0x0130 - 0x0000)
struct UI_RewardItem_SetFromItemEntry final
{
public:
	struct FItemEntry                             _item_entry;                                       // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardItem_SetFromItemEntry) == 0x000008, "Wrong alignment on UI_RewardItem_SetFromItemEntry");
static_assert(sizeof(UI_RewardItem_SetFromItemEntry) == 0x000130, "Wrong size on UI_RewardItem_SetFromItemEntry");
static_assert(offsetof(UI_RewardItem_SetFromItemEntry, _item_entry) == 0x000000, "Member 'UI_RewardItem_SetFromItemEntry::_item_entry' has a wrong offset!");

// Function Stigma.UI_RewardItem.SetRewardItem
// 0x0018 (0x0018 - 0x0000)
struct UI_RewardItem_SetRewardItem final
{
public:
	struct FItemID                                _reward_id;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _reward_count;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D6[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RewardItem_SetRewardItem) == 0x000008, "Wrong alignment on UI_RewardItem_SetRewardItem");
static_assert(sizeof(UI_RewardItem_SetRewardItem) == 0x000018, "Wrong size on UI_RewardItem_SetRewardItem");
static_assert(offsetof(UI_RewardItem_SetRewardItem, _reward_id) == 0x000000, "Member 'UI_RewardItem_SetRewardItem::_reward_id' has a wrong offset!");
static_assert(offsetof(UI_RewardItem_SetRewardItem, _reward_count) == 0x000010, "Member 'UI_RewardItem_SetRewardItem::_reward_count' has a wrong offset!");

// Function Stigma.UI_RewardItem.SetRewardRankPoint
// 0x0004 (0x0004 - 0x0000)
struct UI_RewardItem_SetRewardRankPoint final
{
public:
	int32                                         _reward_rank_point;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardItem_SetRewardRankPoint) == 0x000004, "Wrong alignment on UI_RewardItem_SetRewardRankPoint");
static_assert(sizeof(UI_RewardItem_SetRewardRankPoint) == 0x000004, "Wrong size on UI_RewardItem_SetRewardRankPoint");
static_assert(offsetof(UI_RewardItem_SetRewardRankPoint, _reward_rank_point) == 0x000000, "Member 'UI_RewardItem_SetRewardRankPoint::_reward_rank_point' has a wrong offset!");

// Function Stigma.UI_RewardItem.SetRewardState
// 0x0001 (0x0001 - 0x0000)
struct UI_RewardItem_SetRewardState final
{
public:
	ERewardItemState                              _reward_state;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardItem_SetRewardState) == 0x000001, "Wrong alignment on UI_RewardItem_SetRewardState");
static_assert(sizeof(UI_RewardItem_SetRewardState) == 0x000001, "Wrong size on UI_RewardItem_SetRewardState");
static_assert(offsetof(UI_RewardItem_SetRewardState, _reward_state) == 0x000000, "Member 'UI_RewardItem_SetRewardState::_reward_state' has a wrong offset!");

// Function Stigma.UI_RewardItem.GetItemID
// 0x0010 (0x0010 - 0x0000)
struct UI_RewardItem_GetItemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardItem_GetItemID) == 0x000008, "Wrong alignment on UI_RewardItem_GetItemID");
static_assert(sizeof(UI_RewardItem_GetItemID) == 0x000010, "Wrong size on UI_RewardItem_GetItemID");
static_assert(offsetof(UI_RewardItem_GetItemID, ReturnValue) == 0x000000, "Member 'UI_RewardItem_GetItemID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RewardItem.GetRewardState
// 0x0001 (0x0001 - 0x0000)
struct UI_RewardItem_GetRewardState final
{
public:
	ERewardItemState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardItem_GetRewardState) == 0x000001, "Wrong alignment on UI_RewardItem_GetRewardState");
static_assert(sizeof(UI_RewardItem_GetRewardState) == 0x000001, "Wrong size on UI_RewardItem_GetRewardState");
static_assert(offsetof(UI_RewardItem_GetRewardState, ReturnValue) == 0x000000, "Member 'UI_RewardItem_GetRewardState::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionPaletteBase.ApplyChangeColor
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_OptionPaletteBase_ApplyChangeColor final
{
public:
	bool                                          _invoke_callback;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPaletteBase_ApplyChangeColor) == 0x000001, "Wrong alignment on Ctrl_OptionPaletteBase_ApplyChangeColor");
static_assert(sizeof(Ctrl_OptionPaletteBase_ApplyChangeColor) == 0x000001, "Wrong size on Ctrl_OptionPaletteBase_ApplyChangeColor");
static_assert(offsetof(Ctrl_OptionPaletteBase_ApplyChangeColor, _invoke_callback) == 0x000000, "Member 'Ctrl_OptionPaletteBase_ApplyChangeColor::_invoke_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionPaletteBase.Init
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPaletteBase_Init final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPaletteBase_Init) == 0x000004, "Wrong alignment on Ctrl_OptionPaletteBase_Init");
static_assert(sizeof(Ctrl_OptionPaletteBase_Init) == 0x000010, "Wrong size on Ctrl_OptionPaletteBase_Init");
static_assert(offsetof(Ctrl_OptionPaletteBase_Init, _color) == 0x000000, "Member 'Ctrl_OptionPaletteBase_Init::_color' has a wrong offset!");

// Function Stigma.Ctrl_OptionPaletteBase.InitByRGBA
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPaletteBase_InitByRGBA final
{
public:
	int32                                         _r;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _g;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _b;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _a;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPaletteBase_InitByRGBA) == 0x000004, "Wrong alignment on Ctrl_OptionPaletteBase_InitByRGBA");
static_assert(sizeof(Ctrl_OptionPaletteBase_InitByRGBA) == 0x000010, "Wrong size on Ctrl_OptionPaletteBase_InitByRGBA");
static_assert(offsetof(Ctrl_OptionPaletteBase_InitByRGBA, _r) == 0x000000, "Member 'Ctrl_OptionPaletteBase_InitByRGBA::_r' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionPaletteBase_InitByRGBA, _g) == 0x000004, "Member 'Ctrl_OptionPaletteBase_InitByRGBA::_g' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionPaletteBase_InitByRGBA, _b) == 0x000008, "Member 'Ctrl_OptionPaletteBase_InitByRGBA::_b' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionPaletteBase_InitByRGBA, _a) == 0x00000C, "Member 'Ctrl_OptionPaletteBase_InitByRGBA::_a' has a wrong offset!");

// Function Stigma.Ctrl_OptionPaletteBase.RegisterOnValueApplied
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPaletteBase_RegisterOnValueApplied final
{
public:
	TDelegate<void(class UCtrl_OptionPaletteBase* _palette, struct FLinearColor& _color)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPaletteBase_RegisterOnValueApplied) == 0x000004, "Wrong alignment on Ctrl_OptionPaletteBase_RegisterOnValueApplied");
static_assert(sizeof(Ctrl_OptionPaletteBase_RegisterOnValueApplied) == 0x000010, "Wrong size on Ctrl_OptionPaletteBase_RegisterOnValueApplied");
static_assert(offsetof(Ctrl_OptionPaletteBase_RegisterOnValueApplied, _callback) == 0x000000, "Member 'Ctrl_OptionPaletteBase_RegisterOnValueApplied::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionPaletteBase.RegisterOnValueChange
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPaletteBase_RegisterOnValueChange final
{
public:
	TDelegate<void(class UCtrl_OptionPaletteBase* _palette, struct FLinearColor& _color)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPaletteBase_RegisterOnValueChange) == 0x000004, "Wrong alignment on Ctrl_OptionPaletteBase_RegisterOnValueChange");
static_assert(sizeof(Ctrl_OptionPaletteBase_RegisterOnValueChange) == 0x000010, "Wrong size on Ctrl_OptionPaletteBase_RegisterOnValueChange");
static_assert(offsetof(Ctrl_OptionPaletteBase_RegisterOnValueChange, _callback) == 0x000000, "Member 'Ctrl_OptionPaletteBase_RegisterOnValueChange::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionPaletteBase.GetID
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_OptionPaletteBase_GetID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPaletteBase_GetID) == 0x000004, "Wrong alignment on Ctrl_OptionPaletteBase_GetID");
static_assert(sizeof(Ctrl_OptionPaletteBase_GetID) == 0x000008, "Wrong size on Ctrl_OptionPaletteBase_GetID");
static_assert(offsetof(Ctrl_OptionPaletteBase_GetID, ReturnValue) == 0x000000, "Member 'Ctrl_OptionPaletteBase_GetID::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.FindItemsOrAddItem
// 0x0020 (0x0020 - 0x0000)
struct InvenItems_FindItemsOrAddItem final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_FindItemsOrAddItem) == 0x000008, "Wrong alignment on InvenItems_FindItemsOrAddItem");
static_assert(sizeof(InvenItems_FindItemsOrAddItem) == 0x000020, "Wrong size on InvenItems_FindItemsOrAddItem");
static_assert(offsetof(InvenItems_FindItemsOrAddItem, _id) == 0x000000, "Member 'InvenItems_FindItemsOrAddItem::_id' has a wrong offset!");
static_assert(offsetof(InvenItems_FindItemsOrAddItem, ReturnValue) == 0x000010, "Member 'InvenItems_FindItemsOrAddItem::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.HasItem
// 0x0010 (0x0010 - 0x0000)
struct InvenItems_HasItem final
{
public:
	class UInvenItem*                             _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(InvenItems_HasItem) == 0x000008, "Wrong alignment on InvenItems_HasItem");
static_assert(sizeof(InvenItems_HasItem) == 0x000010, "Wrong size on InvenItems_HasItem");
static_assert(offsetof(InvenItems_HasItem, _item) == 0x000000, "Member 'InvenItems_HasItem::_item' has a wrong offset!");
static_assert(offsetof(InvenItems_HasItem, ReturnValue) == 0x000008, "Member 'InvenItems_HasItem::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.IsVisibleRedDot_Category
// 0x0002 (0x0002 - 0x0000)
struct InvenItems_IsVisibleRedDot_Category final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_IsVisibleRedDot_Category) == 0x000001, "Wrong alignment on InvenItems_IsVisibleRedDot_Category");
static_assert(sizeof(InvenItems_IsVisibleRedDot_Category) == 0x000002, "Wrong size on InvenItems_IsVisibleRedDot_Category");
static_assert(offsetof(InvenItems_IsVisibleRedDot_Category, _category) == 0x000000, "Member 'InvenItems_IsVisibleRedDot_Category::_category' has a wrong offset!");
static_assert(offsetof(InvenItems_IsVisibleRedDot_Category, ReturnValue) == 0x000001, "Member 'InvenItems_IsVisibleRedDot_Category::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.IsVisibleRedDot_GunParts
// 0x0003 (0x0003 - 0x0000)
struct InvenItems_IsVisibleRedDot_GunParts final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_IsVisibleRedDot_GunParts) == 0x000001, "Wrong alignment on InvenItems_IsVisibleRedDot_GunParts");
static_assert(sizeof(InvenItems_IsVisibleRedDot_GunParts) == 0x000003, "Wrong size on InvenItems_IsVisibleRedDot_GunParts");
static_assert(offsetof(InvenItems_IsVisibleRedDot_GunParts, _gun_type) == 0x000000, "Member 'InvenItems_IsVisibleRedDot_GunParts::_gun_type' has a wrong offset!");
static_assert(offsetof(InvenItems_IsVisibleRedDot_GunParts, _gun_parts_slot) == 0x000001, "Member 'InvenItems_IsVisibleRedDot_GunParts::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(InvenItems_IsVisibleRedDot_GunParts, ReturnValue) == 0x000002, "Member 'InvenItems_IsVisibleRedDot_GunParts::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.SetSeenAtRecently_Category
// 0x0001 (0x0001 - 0x0000)
struct InvenItems_SetSeenAtRecently_Category final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_SetSeenAtRecently_Category) == 0x000001, "Wrong alignment on InvenItems_SetSeenAtRecently_Category");
static_assert(sizeof(InvenItems_SetSeenAtRecently_Category) == 0x000001, "Wrong size on InvenItems_SetSeenAtRecently_Category");
static_assert(offsetof(InvenItems_SetSeenAtRecently_Category, _category) == 0x000000, "Member 'InvenItems_SetSeenAtRecently_Category::_category' has a wrong offset!");

// Function Stigma.InvenItems.FindAttachablePartsItemsByGun
// 0x0018 (0x0018 - 0x0000)
struct InvenItems_FindAttachablePartsItemsByGun final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DC[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_FindAttachablePartsItemsByGun) == 0x000008, "Wrong alignment on InvenItems_FindAttachablePartsItemsByGun");
static_assert(sizeof(InvenItems_FindAttachablePartsItemsByGun) == 0x000018, "Wrong size on InvenItems_FindAttachablePartsItemsByGun");
static_assert(offsetof(InvenItems_FindAttachablePartsItemsByGun, _gun_type) == 0x000000, "Member 'InvenItems_FindAttachablePartsItemsByGun::_gun_type' has a wrong offset!");
static_assert(offsetof(InvenItems_FindAttachablePartsItemsByGun, _gun_parts_slot) == 0x000001, "Member 'InvenItems_FindAttachablePartsItemsByGun::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(InvenItems_FindAttachablePartsItemsByGun, ReturnValue) == 0x000008, "Member 'InvenItems_FindAttachablePartsItemsByGun::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.FindItemByNetItem
// 0x0030 (0x0030 - 0x0000)
struct InvenItems_FindItemByNetItem final
{
public:
	struct FNetInvenItem                          _net_item;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInvenItem*                             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_FindItemByNetItem) == 0x000008, "Wrong alignment on InvenItems_FindItemByNetItem");
static_assert(sizeof(InvenItems_FindItemByNetItem) == 0x000030, "Wrong size on InvenItems_FindItemByNetItem");
static_assert(offsetof(InvenItems_FindItemByNetItem, _net_item) == 0x000000, "Member 'InvenItems_FindItemByNetItem::_net_item' has a wrong offset!");
static_assert(offsetof(InvenItems_FindItemByNetItem, ReturnValue) == 0x000028, "Member 'InvenItems_FindItemByNetItem::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.FindItemsByGunPartsSlot
// 0x0018 (0x0018 - 0x0000)
struct InvenItems_FindItemsByGunPartsSlot final
{
public:
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_FindItemsByGunPartsSlot) == 0x000008, "Wrong alignment on InvenItems_FindItemsByGunPartsSlot");
static_assert(sizeof(InvenItems_FindItemsByGunPartsSlot) == 0x000018, "Wrong size on InvenItems_FindItemsByGunPartsSlot");
static_assert(offsetof(InvenItems_FindItemsByGunPartsSlot, _gun_parts_slot) == 0x000000, "Member 'InvenItems_FindItemsByGunPartsSlot::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(InvenItems_FindItemsByGunPartsSlot, ReturnValue) == 0x000008, "Member 'InvenItems_FindItemsByGunPartsSlot::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.FindItemsByID
// 0x0020 (0x0020 - 0x0000)
struct InvenItems_FindItemsByID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_FindItemsByID) == 0x000008, "Wrong alignment on InvenItems_FindItemsByID");
static_assert(sizeof(InvenItems_FindItemsByID) == 0x000020, "Wrong size on InvenItems_FindItemsByID");
static_assert(offsetof(InvenItems_FindItemsByID, _id) == 0x000000, "Member 'InvenItems_FindItemsByID::_id' has a wrong offset!");
static_assert(offsetof(InvenItems_FindItemsByID, ReturnValue) == 0x000010, "Member 'InvenItems_FindItemsByID::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItems.FindTopItemByID
// 0x0018 (0x0018 - 0x0000)
struct InvenItems_FindTopItemByID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItem*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItems_FindTopItemByID) == 0x000008, "Wrong alignment on InvenItems_FindTopItemByID");
static_assert(sizeof(InvenItems_FindTopItemByID) == 0x000018, "Wrong size on InvenItems_FindTopItemByID");
static_assert(offsetof(InvenItems_FindTopItemByID, _id) == 0x000000, "Member 'InvenItems_FindTopItemByID::_id' has a wrong offset!");
static_assert(offsetof(InvenItems_FindTopItemByID, ReturnValue) == 0x000010, "Member 'InvenItems_FindTopItemByID::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionPreSetColorBase.RegisterOnClicked
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPreSetColorBase_RegisterOnClicked final
{
public:
	TDelegate<void(class UCtrl_OptionPreSetColorBase* _preset_widget)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPreSetColorBase_RegisterOnClicked) == 0x000004, "Wrong alignment on Ctrl_OptionPreSetColorBase_RegisterOnClicked");
static_assert(sizeof(Ctrl_OptionPreSetColorBase_RegisterOnClicked) == 0x000010, "Wrong size on Ctrl_OptionPreSetColorBase_RegisterOnClicked");
static_assert(offsetof(Ctrl_OptionPreSetColorBase_RegisterOnClicked, _callback) == 0x000000, "Member 'Ctrl_OptionPreSetColorBase_RegisterOnClicked::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionPreSetColorBase.SetColor
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPreSetColorBase_SetColor final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPreSetColorBase_SetColor) == 0x000004, "Wrong alignment on Ctrl_OptionPreSetColorBase_SetColor");
static_assert(sizeof(Ctrl_OptionPreSetColorBase_SetColor) == 0x000010, "Wrong size on Ctrl_OptionPreSetColorBase_SetColor");
static_assert(offsetof(Ctrl_OptionPreSetColorBase_SetColor, _color) == 0x000000, "Member 'Ctrl_OptionPreSetColorBase_SetColor::_color' has a wrong offset!");

// Function Stigma.Ctrl_OptionPreSetColorBase.GetColor
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionPreSetColorBase_GetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionPreSetColorBase_GetColor) == 0x000004, "Wrong alignment on Ctrl_OptionPreSetColorBase_GetColor");
static_assert(sizeof(Ctrl_OptionPreSetColorBase_GetColor) == 0x000010, "Wrong size on Ctrl_OptionPreSetColorBase_GetColor");
static_assert(offsetof(Ctrl_OptionPreSetColorBase_GetColor, ReturnValue) == 0x000000, "Member 'Ctrl_OptionPreSetColorBase_GetColor::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefSlot.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBriefSlot_InitWidget final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBriefSlot_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassBriefSlot_InitWidget");
static_assert(sizeof(UI_BattlePassBriefSlot_InitWidget) == 0x000010, "Wrong size on UI_BattlePassBriefSlot_InitWidget");
static_assert(offsetof(UI_BattlePassBriefSlot_InitWidget, _pass_id) == 0x000000, "Member 'UI_BattlePassBriefSlot_InitWidget::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefSlot.OnClick
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBriefSlot_OnClick final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassBriefSlot_OnClick) == 0x000008, "Wrong alignment on UI_BattlePassBriefSlot_OnClick");
static_assert(sizeof(UI_BattlePassBriefSlot_OnClick) == 0x000010, "Wrong size on UI_BattlePassBriefSlot_OnClick");
static_assert(offsetof(UI_BattlePassBriefSlot_OnClick, _widget) == 0x000000, "Member 'UI_BattlePassBriefSlot_OnClick::_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassBriefSlot_OnClick, _selected) == 0x000008, "Member 'UI_BattlePassBriefSlot_OnClick::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefSlot.GetPassID
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBriefSlot_GetPassID final
{
public:
	struct FItemID_BattlePass                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBriefSlot_GetPassID) == 0x000008, "Wrong alignment on UI_BattlePassBriefSlot_GetPassID");
static_assert(sizeof(UI_BattlePassBriefSlot_GetPassID) == 0x000010, "Wrong size on UI_BattlePassBriefSlot_GetPassID");
static_assert(offsetof(UI_BattlePassBriefSlot_GetPassID, ReturnValue) == 0x000000, "Member 'UI_BattlePassBriefSlot_GetPassID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Result_BattlePassBrief.AddPassExp
// 0x0008 (0x0008 - 0x0000)
struct UI_Result_BattlePassBrief_AddPassExp final
{
public:
	int32                                         _base_exp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _buff_exp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Result_BattlePassBrief_AddPassExp) == 0x000004, "Wrong alignment on UI_Result_BattlePassBrief_AddPassExp");
static_assert(sizeof(UI_Result_BattlePassBrief_AddPassExp) == 0x000008, "Wrong size on UI_Result_BattlePassBrief_AddPassExp");
static_assert(offsetof(UI_Result_BattlePassBrief_AddPassExp, _base_exp) == 0x000000, "Member 'UI_Result_BattlePassBrief_AddPassExp::_base_exp' has a wrong offset!");
static_assert(offsetof(UI_Result_BattlePassBrief_AddPassExp, _buff_exp) == 0x000004, "Member 'UI_Result_BattlePassBrief_AddPassExp::_buff_exp' has a wrong offset!");

// Function Stigma.UI_Result_BattlePassBrief.SetFunctionAddedExp
// 0x0004 (0x0004 - 0x0000)
struct UI_Result_BattlePassBrief_SetFunctionAddedExp final
{
public:
	int32                                         _buff_exp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Result_BattlePassBrief_SetFunctionAddedExp) == 0x000004, "Wrong alignment on UI_Result_BattlePassBrief_SetFunctionAddedExp");
static_assert(sizeof(UI_Result_BattlePassBrief_SetFunctionAddedExp) == 0x000004, "Wrong size on UI_Result_BattlePassBrief_SetFunctionAddedExp");
static_assert(offsetof(UI_Result_BattlePassBrief_SetFunctionAddedExp, _buff_exp) == 0x000000, "Member 'UI_Result_BattlePassBrief_SetFunctionAddedExp::_buff_exp' has a wrong offset!");

// Function Stigma.Ctrl_OptionSliderBase.OnSliderChanged
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionSliderBase_OnSliderChanged final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionSliderBase_OnSliderChanged) == 0x000004, "Wrong alignment on Ctrl_OptionSliderBase_OnSliderChanged");
static_assert(sizeof(Ctrl_OptionSliderBase_OnSliderChanged) == 0x000004, "Wrong size on Ctrl_OptionSliderBase_OnSliderChanged");
static_assert(offsetof(Ctrl_OptionSliderBase_OnSliderChanged, _value) == 0x000000, "Member 'Ctrl_OptionSliderBase_OnSliderChanged::_value' has a wrong offset!");

// Function Stigma.Ctrl_OptionSliderBase.OnValueTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct Ctrl_OptionSliderBase_OnValueTextCommitted final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   _commit_type;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_OptionSliderBase_OnValueTextCommitted) == 0x000008, "Wrong alignment on Ctrl_OptionSliderBase_OnValueTextCommitted");
static_assert(sizeof(Ctrl_OptionSliderBase_OnValueTextCommitted) == 0x000020, "Wrong size on Ctrl_OptionSliderBase_OnValueTextCommitted");
static_assert(offsetof(Ctrl_OptionSliderBase_OnValueTextCommitted, _text) == 0x000000, "Member 'Ctrl_OptionSliderBase_OnValueTextCommitted::_text' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionSliderBase_OnValueTextCommitted, _commit_type) == 0x000018, "Member 'Ctrl_OptionSliderBase_OnValueTextCommitted::_commit_type' has a wrong offset!");

// Function Stigma.Ctrl_OptionSliderBase.RegisterOnValueChange
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_OptionSliderBase_RegisterOnValueChange final
{
public:
	TDelegate<void(class UCtrl_OptionSliderBase* Slider, class FName& _id, float _value)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionSliderBase_RegisterOnValueChange) == 0x000004, "Wrong alignment on Ctrl_OptionSliderBase_RegisterOnValueChange");
static_assert(sizeof(Ctrl_OptionSliderBase_RegisterOnValueChange) == 0x000010, "Wrong size on Ctrl_OptionSliderBase_RegisterOnValueChange");
static_assert(offsetof(Ctrl_OptionSliderBase_RegisterOnValueChange, _callback) == 0x000000, "Member 'Ctrl_OptionSliderBase_RegisterOnValueChange::_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionSliderBase.SetValue
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_OptionSliderBase_SetValue final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E4[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_OptionSliderBase_SetValue) == 0x000004, "Wrong alignment on Ctrl_OptionSliderBase_SetValue");
static_assert(sizeof(Ctrl_OptionSliderBase_SetValue) == 0x000008, "Wrong size on Ctrl_OptionSliderBase_SetValue");
static_assert(offsetof(Ctrl_OptionSliderBase_SetValue, _value) == 0x000000, "Member 'Ctrl_OptionSliderBase_SetValue::_value' has a wrong offset!");
static_assert(offsetof(Ctrl_OptionSliderBase_SetValue, _invoke_callback) == 0x000004, "Member 'Ctrl_OptionSliderBase_SetValue::_invoke_callback' has a wrong offset!");

// Function Stigma.Ctrl_OptionSliderBase.GetNormalizedValue
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionSliderBase_GetNormalizedValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionSliderBase_GetNormalizedValue) == 0x000004, "Wrong alignment on Ctrl_OptionSliderBase_GetNormalizedValue");
static_assert(sizeof(Ctrl_OptionSliderBase_GetNormalizedValue) == 0x000004, "Wrong size on Ctrl_OptionSliderBase_GetNormalizedValue");
static_assert(offsetof(Ctrl_OptionSliderBase_GetNormalizedValue, ReturnValue) == 0x000000, "Member 'Ctrl_OptionSliderBase_GetNormalizedValue::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_OptionSliderBase.GetValue
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_OptionSliderBase_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_OptionSliderBase_GetValue) == 0x000004, "Wrong alignment on Ctrl_OptionSliderBase_GetValue");
static_assert(sizeof(Ctrl_OptionSliderBase_GetValue) == 0x000004, "Wrong size on Ctrl_OptionSliderBase_GetValue");
static_assert(offsetof(Ctrl_OptionSliderBase_GetValue, ReturnValue) == 0x000000, "Member 'Ctrl_OptionSliderBase_GetValue::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_PageNavigator.InitWidget
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_PageNavigator_InitWidget final
{
public:
	int32                                         _current_idx;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_idx;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_PageNavigator_InitWidget) == 0x000004, "Wrong alignment on Ctrl_PageNavigator_InitWidget");
static_assert(sizeof(Ctrl_PageNavigator_InitWidget) == 0x000008, "Wrong size on Ctrl_PageNavigator_InitWidget");
static_assert(offsetof(Ctrl_PageNavigator_InitWidget, _current_idx) == 0x000000, "Member 'Ctrl_PageNavigator_InitWidget::_current_idx' has a wrong offset!");
static_assert(offsetof(Ctrl_PageNavigator_InitWidget, _max_idx) == 0x000004, "Member 'Ctrl_PageNavigator_InitWidget::_max_idx' has a wrong offset!");

// Function Stigma.Ctrl_PageNavigator.OnClickBtn
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_PageNavigator_OnClickBtn final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_PageNavigator_OnClickBtn) == 0x000008, "Wrong alignment on Ctrl_PageNavigator_OnClickBtn");
static_assert(sizeof(Ctrl_PageNavigator_OnClickBtn) == 0x000010, "Wrong size on Ctrl_PageNavigator_OnClickBtn");
static_assert(offsetof(Ctrl_PageNavigator_OnClickBtn, _widget) == 0x000000, "Member 'Ctrl_PageNavigator_OnClickBtn::_widget' has a wrong offset!");
static_assert(offsetof(Ctrl_PageNavigator_OnClickBtn, _selected) == 0x000008, "Member 'Ctrl_PageNavigator_OnClickBtn::_selected' has a wrong offset!");

// Function Stigma.Ctrl_PageNavigator.SetCurrentCount
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_PageNavigator_SetCurrentCount final
{
public:
	int32                                         _current_count;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_PageNavigator_SetCurrentCount) == 0x000004, "Wrong alignment on Ctrl_PageNavigator_SetCurrentCount");
static_assert(sizeof(Ctrl_PageNavigator_SetCurrentCount) == 0x000004, "Wrong size on Ctrl_PageNavigator_SetCurrentCount");
static_assert(offsetof(Ctrl_PageNavigator_SetCurrentCount, _current_count) == 0x000000, "Member 'Ctrl_PageNavigator_SetCurrentCount::_current_count' has a wrong offset!");

// Function Stigma.EventPageHelper.GetAllEventPageIDs
// 0x0018 (0x0018 - 0x0000)
struct EventPageHelper_GetAllEventPageIDs final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID_EventPage>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPageHelper_GetAllEventPageIDs) == 0x000008, "Wrong alignment on EventPageHelper_GetAllEventPageIDs");
static_assert(sizeof(EventPageHelper_GetAllEventPageIDs) == 0x000018, "Wrong size on EventPageHelper_GetAllEventPageIDs");
static_assert(offsetof(EventPageHelper_GetAllEventPageIDs, _world_ctx) == 0x000000, "Member 'EventPageHelper_GetAllEventPageIDs::_world_ctx' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetAllEventPageIDs, ReturnValue) == 0x000008, "Member 'EventPageHelper_GetAllEventPageIDs::ReturnValue' has a wrong offset!");

// Function Stigma.EventPageHelper.GetMasterLevelExp
// 0x0020 (0x0020 - 0x0000)
struct EventPageHelper_GetMasterLevelExp final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E7[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _out_level;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_exp;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _out_target_exp;                                   // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E8[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(EventPageHelper_GetMasterLevelExp) == 0x000008, "Wrong alignment on EventPageHelper_GetMasterLevelExp");
static_assert(sizeof(EventPageHelper_GetMasterLevelExp) == 0x000020, "Wrong size on EventPageHelper_GetMasterLevelExp");
static_assert(offsetof(EventPageHelper_GetMasterLevelExp, _world_ctx) == 0x000000, "Member 'EventPageHelper_GetMasterLevelExp::_world_ctx' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetMasterLevelExp, _type) == 0x000008, "Member 'EventPageHelper_GetMasterLevelExp::_type' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetMasterLevelExp, _out_level) == 0x00000C, "Member 'EventPageHelper_GetMasterLevelExp::_out_level' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetMasterLevelExp, _out_exp) == 0x000010, "Member 'EventPageHelper_GetMasterLevelExp::_out_exp' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetMasterLevelExp, _out_target_exp) == 0x000014, "Member 'EventPageHelper_GetMasterLevelExp::_out_target_exp' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetMasterLevelExp, ReturnValue) == 0x000018, "Member 'EventPageHelper_GetMasterLevelExp::ReturnValue' has a wrong offset!");

// Function Stigma.EventPageHelper.GetTypeEventPageIDs
// 0x0020 (0x0020 - 0x0000)
struct EventPageHelper_GetTypeEventPageIDs final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventPageType                                _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemID_EventPage>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPageHelper_GetTypeEventPageIDs) == 0x000008, "Wrong alignment on EventPageHelper_GetTypeEventPageIDs");
static_assert(sizeof(EventPageHelper_GetTypeEventPageIDs) == 0x000020, "Wrong size on EventPageHelper_GetTypeEventPageIDs");
static_assert(offsetof(EventPageHelper_GetTypeEventPageIDs, _world_ctx) == 0x000000, "Member 'EventPageHelper_GetTypeEventPageIDs::_world_ctx' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetTypeEventPageIDs, _type) == 0x000008, "Member 'EventPageHelper_GetTypeEventPageIDs::_type' has a wrong offset!");
static_assert(offsetof(EventPageHelper_GetTypeEventPageIDs, ReturnValue) == 0x000010, "Member 'EventPageHelper_GetTypeEventPageIDs::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WeaponPage.GetPartsCamName
// 0x000C (0x000C - 0x0000)
struct UI_WeaponPage_GetPartsCamName final
{
public:
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_GetPartsCamName) == 0x000004, "Wrong alignment on UI_WeaponPage_GetPartsCamName");
static_assert(sizeof(UI_WeaponPage_GetPartsCamName) == 0x00000C, "Wrong size on UI_WeaponPage_GetPartsCamName");
static_assert(offsetof(UI_WeaponPage_GetPartsCamName, _gun_parts_slot) == 0x000000, "Member 'UI_WeaponPage_GetPartsCamName::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(UI_WeaponPage_GetPartsCamName, ReturnValue) == 0x000004, "Member 'UI_WeaponPage_GetPartsCamName::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WeaponPage.OnClickPartsSlot
// 0x0001 (0x0001 - 0x0000)
struct UI_WeaponPage_OnClickPartsSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_OnClickPartsSlot) == 0x000001, "Wrong alignment on UI_WeaponPage_OnClickPartsSlot");
static_assert(sizeof(UI_WeaponPage_OnClickPartsSlot) == 0x000001, "Wrong size on UI_WeaponPage_OnClickPartsSlot");
static_assert(offsetof(UI_WeaponPage_OnClickPartsSlot, _slot) == 0x000000, "Member 'UI_WeaponPage_OnClickPartsSlot::_slot' has a wrong offset!");

// Function Stigma.UI_WeaponPage.OnUpdateGun
// 0x0001 (0x0001 - 0x0000)
struct UI_WeaponPage_OnUpdateGun final
{
public:
	bool                                          _is_init;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_OnUpdateGun) == 0x000001, "Wrong alignment on UI_WeaponPage_OnUpdateGun");
static_assert(sizeof(UI_WeaponPage_OnUpdateGun) == 0x000001, "Wrong size on UI_WeaponPage_OnUpdateGun");
static_assert(offsetof(UI_WeaponPage_OnUpdateGun, _is_init) == 0x000000, "Member 'UI_WeaponPage_OnUpdateGun::_is_init' has a wrong offset!");

// Function Stigma.UI_WeaponPage.OpenParts
// 0x0002 (0x0002 - 0x0000)
struct UI_WeaponPage_OpenParts final
{
public:
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_OpenParts) == 0x000001, "Wrong alignment on UI_WeaponPage_OpenParts");
static_assert(sizeof(UI_WeaponPage_OpenParts) == 0x000002, "Wrong size on UI_WeaponPage_OpenParts");
static_assert(offsetof(UI_WeaponPage_OpenParts, _gun_parts_slot) == 0x000000, "Member 'UI_WeaponPage_OpenParts::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(UI_WeaponPage_OpenParts, _gun_type) == 0x000001, "Member 'UI_WeaponPage_OpenParts::_gun_type' has a wrong offset!");

// Function Stigma.UI_WeaponPage.RefreshPreview
// 0x0008 (0x0008 - 0x0000)
struct UI_WeaponPage_RefreshPreview final
{
public:
	class FName                                   _cam_tag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_RefreshPreview) == 0x000004, "Wrong alignment on UI_WeaponPage_RefreshPreview");
static_assert(sizeof(UI_WeaponPage_RefreshPreview) == 0x000008, "Wrong size on UI_WeaponPage_RefreshPreview");
static_assert(offsetof(UI_WeaponPage_RefreshPreview, _cam_tag) == 0x000000, "Member 'UI_WeaponPage_RefreshPreview::_cam_tag' has a wrong offset!");

// Function Stigma.UI_WeaponPage.SelectGunPreset
// 0x0010 (0x0010 - 0x0000)
struct UI_WeaponPage_SelectGunPreset final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_SelectGunPreset) == 0x000008, "Wrong alignment on UI_WeaponPage_SelectGunPreset");
static_assert(sizeof(UI_WeaponPage_SelectGunPreset) == 0x000010, "Wrong size on UI_WeaponPage_SelectGunPreset");
static_assert(offsetof(UI_WeaponPage_SelectGunPreset, _gun_preset) == 0x000000, "Member 'UI_WeaponPage_SelectGunPreset::_gun_preset' has a wrong offset!");

// Function Stigma.UI_WeaponPage.SelectParts
// 0x0010 (0x0010 - 0x0000)
struct UI_WeaponPage_SelectParts final
{
public:
	class UInvenItem*                             _parts;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             _gun_object;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_SelectParts) == 0x000008, "Wrong alignment on UI_WeaponPage_SelectParts");
static_assert(sizeof(UI_WeaponPage_SelectParts) == 0x000010, "Wrong size on UI_WeaponPage_SelectParts");
static_assert(offsetof(UI_WeaponPage_SelectParts, _parts) == 0x000000, "Member 'UI_WeaponPage_SelectParts::_parts' has a wrong offset!");
static_assert(offsetof(UI_WeaponPage_SelectParts, _gun_object) == 0x000008, "Member 'UI_WeaponPage_SelectParts::_gun_object' has a wrong offset!");

// Function Stigma.UI_WeaponPage.ShowGunDetailParts
// 0x0002 (0x0002 - 0x0000)
struct UI_WeaponPage_ShowGunDetailParts final
{
public:
	bool                                          _is_shown;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_ShowGunDetailParts) == 0x000001, "Wrong alignment on UI_WeaponPage_ShowGunDetailParts");
static_assert(sizeof(UI_WeaponPage_ShowGunDetailParts) == 0x000002, "Wrong size on UI_WeaponPage_ShowGunDetailParts");
static_assert(offsetof(UI_WeaponPage_ShowGunDetailParts, _is_shown) == 0x000000, "Member 'UI_WeaponPage_ShowGunDetailParts::_is_shown' has a wrong offset!");
static_assert(offsetof(UI_WeaponPage_ShowGunDetailParts, ReturnValue) == 0x000001, "Member 'UI_WeaponPage_ShowGunDetailParts::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WeaponPage.HasSelectPartsOnlyOwnedParts
// 0x0001 (0x0001 - 0x0000)
struct UI_WeaponPage_HasSelectPartsOnlyOwnedParts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_HasSelectPartsOnlyOwnedParts) == 0x000001, "Wrong alignment on UI_WeaponPage_HasSelectPartsOnlyOwnedParts");
static_assert(sizeof(UI_WeaponPage_HasSelectPartsOnlyOwnedParts) == 0x000001, "Wrong size on UI_WeaponPage_HasSelectPartsOnlyOwnedParts");
static_assert(offsetof(UI_WeaponPage_HasSelectPartsOnlyOwnedParts, ReturnValue) == 0x000000, "Member 'UI_WeaponPage_HasSelectPartsOnlyOwnedParts::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WeaponPage.IsSelectingParts
// 0x0001 (0x0001 - 0x0000)
struct UI_WeaponPage_IsSelectingParts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeaponPage_IsSelectingParts) == 0x000001, "Wrong alignment on UI_WeaponPage_IsSelectingParts");
static_assert(sizeof(UI_WeaponPage_IsSelectingParts) == 0x000001, "Wrong size on UI_WeaponPage_IsSelectingParts");
static_assert(offsetof(UI_WeaponPage_IsSelectingParts, ReturnValue) == 0x000000, "Member 'UI_WeaponPage_IsSelectingParts::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_QuestionBase.OnGetAnswer
// 0x0028 (0x0028 - 0x0000)
struct Ctrl_QuestionBase_OnGetAnswer final
{
public:
	struct FSurveyAnswer                          ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_QuestionBase_OnGetAnswer) == 0x000008, "Wrong alignment on Ctrl_QuestionBase_OnGetAnswer");
static_assert(sizeof(Ctrl_QuestionBase_OnGetAnswer) == 0x000028, "Wrong size on Ctrl_QuestionBase_OnGetAnswer");
static_assert(offsetof(Ctrl_QuestionBase_OnGetAnswer, ReturnValue) == 0x000000, "Member 'Ctrl_QuestionBase_OnGetAnswer::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_RadioButtonGroupBase.GetSelectedID
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_RadioButtonGroupBase_GetSelectedID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_RadioButtonGroupBase_GetSelectedID) == 0x000004, "Wrong alignment on Ctrl_RadioButtonGroupBase_GetSelectedID");
static_assert(sizeof(Ctrl_RadioButtonGroupBase_GetSelectedID) == 0x000008, "Wrong size on Ctrl_RadioButtonGroupBase_GetSelectedID");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_GetSelectedID, ReturnValue) == 0x000000, "Member 'Ctrl_RadioButtonGroupBase_GetSelectedID::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_RadioButtonGroupBase.InvokeOnSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged) == 0x000004, "Wrong alignment on Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged");
static_assert(sizeof(Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged) == 0x000008, "Wrong size on Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged, _id) == 0x000000, "Member 'Ctrl_RadioButtonGroupBase_InvokeOnSelectionChanged::_id' has a wrong offset!");

// Function Stigma.Ctrl_RadioButtonGroupBase.OnClick
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_RadioButtonGroupBase_OnClick final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_RadioButtonGroupBase_OnClick) == 0x000004, "Wrong alignment on Ctrl_RadioButtonGroupBase_OnClick");
static_assert(sizeof(Ctrl_RadioButtonGroupBase_OnClick) == 0x000008, "Wrong size on Ctrl_RadioButtonGroupBase_OnClick");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_OnClick, _id) == 0x000000, "Member 'Ctrl_RadioButtonGroupBase_OnClick::_id' has a wrong offset!");

// Function Stigma.Ctrl_RadioButtonGroupBase.RegisterOnSelectionChange
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange final
{
public:
	TDelegate<void(class UCtrl_RadioButtonGroupBase* _panel, class FName& _id)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange) == 0x000004, "Wrong alignment on Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange");
static_assert(sizeof(Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange) == 0x000010, "Wrong size on Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange, _callback) == 0x000000, "Member 'Ctrl_RadioButtonGroupBase_RegisterOnSelectionChange::_callback' has a wrong offset!");

// Function Stigma.Ctrl_RadioButtonGroupBase.SelectOnlyMatchedID
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID final
{
public:
	class FName                                   _id_selected;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID) == 0x000004, "Wrong alignment on Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID");
static_assert(sizeof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID) == 0x000008, "Wrong size on Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID, _id_selected) == 0x000000, "Member 'Ctrl_RadioButtonGroupBase_SelectOnlyMatchedID::_id_selected' has a wrong offset!");

// Function Stigma.Ctrl_RadioButtonGroupBase.SelectOnlyMatchedIDEx
// 0x000C (0x000C - 0x0000)
struct Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx final
{
public:
	class FName                                   _id_selected;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22ED[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx) == 0x000004, "Wrong alignment on Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx");
static_assert(sizeof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx) == 0x00000C, "Wrong size on Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx, _id_selected) == 0x000000, "Member 'Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx::_id_selected' has a wrong offset!");
static_assert(offsetof(Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx, _invoke_callback) == 0x000008, "Member 'Ctrl_RadioButtonGroupBase_SelectOnlyMatchedIDEx::_invoke_callback' has a wrong offset!");

// Function Stigma.UserSelectable.OnSelectGunType
// 0x0002 (0x0002 - 0x0000)
struct UserSelectable_OnSelectGunType final
{
public:
	EGunType                                      _gun_types;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserSelectable_OnSelectGunType) == 0x000001, "Wrong alignment on UserSelectable_OnSelectGunType");
static_assert(sizeof(UserSelectable_OnSelectGunType) == 0x000002, "Wrong size on UserSelectable_OnSelectGunType");
static_assert(offsetof(UserSelectable_OnSelectGunType, _gun_types) == 0x000000, "Member 'UserSelectable_OnSelectGunType::_gun_types' has a wrong offset!");
static_assert(offsetof(UserSelectable_OnSelectGunType, ReturnValue) == 0x000001, "Member 'UserSelectable_OnSelectGunType::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_ResultProgressBar.SetAddedValueText
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_ResultProgressBar_SetAddedValueText final
{
public:
	int32                                         _added_value;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ResultProgressBar_SetAddedValueText) == 0x000004, "Wrong alignment on Ctrl_ResultProgressBar_SetAddedValueText");
static_assert(sizeof(Ctrl_ResultProgressBar_SetAddedValueText) == 0x000004, "Wrong size on Ctrl_ResultProgressBar_SetAddedValueText");
static_assert(offsetof(Ctrl_ResultProgressBar_SetAddedValueText, _added_value) == 0x000000, "Member 'Ctrl_ResultProgressBar_SetAddedValueText::_added_value' has a wrong offset!");

// Function Stigma.Ctrl_ScrollTextBlock.DoScroll
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ScrollTextBlock_DoScroll final
{
public:
	bool                                          _do_scorll;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ScrollTextBlock_DoScroll) == 0x000001, "Wrong alignment on Ctrl_ScrollTextBlock_DoScroll");
static_assert(sizeof(Ctrl_ScrollTextBlock_DoScroll) == 0x000001, "Wrong size on Ctrl_ScrollTextBlock_DoScroll");
static_assert(offsetof(Ctrl_ScrollTextBlock_DoScroll, _do_scorll) == 0x000000, "Member 'Ctrl_ScrollTextBlock_DoScroll::_do_scorll' has a wrong offset!");

// Function Stigma.Ctrl_ScrollTextBlock.SetText
// 0x0018 (0x0018 - 0x0000)
struct Ctrl_ScrollTextBlock_SetText final
{
public:
	class FText                                   _new_text;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ScrollTextBlock_SetText) == 0x000008, "Wrong alignment on Ctrl_ScrollTextBlock_SetText");
static_assert(sizeof(Ctrl_ScrollTextBlock_SetText) == 0x000018, "Wrong size on Ctrl_ScrollTextBlock_SetText");
static_assert(offsetof(Ctrl_ScrollTextBlock_SetText, _new_text) == 0x000000, "Member 'Ctrl_ScrollTextBlock_SetText::_new_text' has a wrong offset!");

// Function Stigma.WIDGET_TutorialDialog.IsShowing
// 0x0001 (0x0001 - 0x0000)
struct WIDGET_TutorialDialog_IsShowing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WIDGET_TutorialDialog_IsShowing) == 0x000001, "Wrong alignment on WIDGET_TutorialDialog_IsShowing");
static_assert(sizeof(WIDGET_TutorialDialog_IsShowing) == 0x000001, "Wrong size on WIDGET_TutorialDialog_IsShowing");
static_assert(offsetof(WIDGET_TutorialDialog_IsShowing, ReturnValue) == 0x000000, "Member 'WIDGET_TutorialDialog_IsShowing::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_SkinSlot.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_SkinSlot_InitWidget final
{
public:
	struct FItemID                                _skin_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_SkinSlot_InitWidget) == 0x000008, "Wrong alignment on Ctrl_SkinSlot_InitWidget");
static_assert(sizeof(Ctrl_SkinSlot_InitWidget) == 0x000010, "Wrong size on Ctrl_SkinSlot_InitWidget");
static_assert(offsetof(Ctrl_SkinSlot_InitWidget, _skin_id) == 0x000000, "Member 'Ctrl_SkinSlot_InitWidget::_skin_id' has a wrong offset!");

// Function Stigma.LobbyControllerBase.AllowPreviewerRotationMode
// 0x0001 (0x0001 - 0x0000)
struct LobbyControllerBase_AllowPreviewerRotationMode final
{
public:
	bool                                          _allow_rot;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_AllowPreviewerRotationMode) == 0x000001, "Wrong alignment on LobbyControllerBase_AllowPreviewerRotationMode");
static_assert(sizeof(LobbyControllerBase_AllowPreviewerRotationMode) == 0x000001, "Wrong size on LobbyControllerBase_AllowPreviewerRotationMode");
static_assert(offsetof(LobbyControllerBase_AllowPreviewerRotationMode, _allow_rot) == 0x000000, "Member 'LobbyControllerBase_AllowPreviewerRotationMode::_allow_rot' has a wrong offset!");

// Function Stigma.LobbyControllerBase.GetCursor
// 0x0001 (0x0001 - 0x0000)
struct LobbyControllerBase_GetCursor final
{
public:
	EMouseCursor                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_GetCursor) == 0x000001, "Wrong alignment on LobbyControllerBase_GetCursor");
static_assert(sizeof(LobbyControllerBase_GetCursor) == 0x000001, "Wrong size on LobbyControllerBase_GetCursor");
static_assert(offsetof(LobbyControllerBase_GetCursor, ReturnValue) == 0x000000, "Member 'LobbyControllerBase_GetCursor::ReturnValue' has a wrong offset!");

// Function Stigma.LobbyControllerBase.GetCutScenePlayer
// 0x0008 (0x0008 - 0x0000)
struct LobbyControllerBase_GetCutScenePlayer final
{
public:
	class ULevelSequencePlayer*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_GetCutScenePlayer) == 0x000008, "Wrong alignment on LobbyControllerBase_GetCutScenePlayer");
static_assert(sizeof(LobbyControllerBase_GetCutScenePlayer) == 0x000008, "Wrong size on LobbyControllerBase_GetCutScenePlayer");
static_assert(offsetof(LobbyControllerBase_GetCutScenePlayer, ReturnValue) == 0x000000, "Member 'LobbyControllerBase_GetCutScenePlayer::ReturnValue' has a wrong offset!");

// Function Stigma.LobbyControllerBase.GetSequenceByTag
// 0x0010 (0x0010 - 0x0000)
struct LobbyControllerBase_GetSequenceByTag final
{
public:
	class FName                                   _tag;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_GetSequenceByTag) == 0x000008, "Wrong alignment on LobbyControllerBase_GetSequenceByTag");
static_assert(sizeof(LobbyControllerBase_GetSequenceByTag) == 0x000010, "Wrong size on LobbyControllerBase_GetSequenceByTag");
static_assert(offsetof(LobbyControllerBase_GetSequenceByTag, _tag) == 0x000000, "Member 'LobbyControllerBase_GetSequenceByTag::_tag' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_GetSequenceByTag, ReturnValue) == 0x000008, "Member 'LobbyControllerBase_GetSequenceByTag::ReturnValue' has a wrong offset!");

// Function Stigma.LobbyControllerBase.SetPreviewActor
// 0x0008 (0x0008 - 0x0000)
struct LobbyControllerBase_SetPreviewActor final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_SetPreviewActor) == 0x000008, "Wrong alignment on LobbyControllerBase_SetPreviewActor");
static_assert(sizeof(LobbyControllerBase_SetPreviewActor) == 0x000008, "Wrong size on LobbyControllerBase_SetPreviewActor");
static_assert(offsetof(LobbyControllerBase_SetPreviewActor, _Actor) == 0x000000, "Member 'LobbyControllerBase_SetPreviewActor::_Actor' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowBattlePassLevelUpPopup
// 0x0020 (0x0020 - 0x0000)
struct LobbyControllerBase_ShowBattlePassLevelUpPopup final
{
public:
	class FText                                   _Title;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FD[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LobbyControllerBase_ShowBattlePassLevelUpPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowBattlePassLevelUpPopup");
static_assert(sizeof(LobbyControllerBase_ShowBattlePassLevelUpPopup) == 0x000020, "Wrong size on LobbyControllerBase_ShowBattlePassLevelUpPopup");
static_assert(offsetof(LobbyControllerBase_ShowBattlePassLevelUpPopup, _Title) == 0x000000, "Member 'LobbyControllerBase_ShowBattlePassLevelUpPopup::_Title' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowBattlePassLevelUpPopup, _level) == 0x000018, "Member 'LobbyControllerBase_ShowBattlePassLevelUpPopup::_level' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowCompetitionRewardPopup
// 0x0030 (0x0030 - 0x0000)
struct LobbyControllerBase_ShowCompetitionRewardPopup final
{
public:
	struct FBC_CompetitionEnd                     _competition_end;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowCompetitionRewardPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowCompetitionRewardPopup");
static_assert(sizeof(LobbyControllerBase_ShowCompetitionRewardPopup) == 0x000030, "Wrong size on LobbyControllerBase_ShowCompetitionRewardPopup");
static_assert(offsetof(LobbyControllerBase_ShowCompetitionRewardPopup, _competition_end) == 0x000000, "Member 'LobbyControllerBase_ShowCompetitionRewardPopup::_competition_end' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowEventPagePopup
// 0x0001 (0x0001 - 0x0000)
struct LobbyControllerBase_ShowEventPagePopup final
{
public:
	bool                                          _on_bc;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowEventPagePopup) == 0x000001, "Wrong alignment on LobbyControllerBase_ShowEventPagePopup");
static_assert(sizeof(LobbyControllerBase_ShowEventPagePopup) == 0x000001, "Wrong size on LobbyControllerBase_ShowEventPagePopup");
static_assert(offsetof(LobbyControllerBase_ShowEventPagePopup, _on_bc) == 0x000000, "Member 'LobbyControllerBase_ShowEventPagePopup::_on_bc' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowHelpPopup
// 0x0010 (0x0010 - 0x0000)
struct LobbyControllerBase_ShowHelpPopup final
{
public:
	class FString                                 _contents_key;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowHelpPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowHelpPopup");
static_assert(sizeof(LobbyControllerBase_ShowHelpPopup) == 0x000010, "Wrong size on LobbyControllerBase_ShowHelpPopup");
static_assert(offsetof(LobbyControllerBase_ShowHelpPopup, _contents_key) == 0x000000, "Member 'LobbyControllerBase_ShowHelpPopup::_contents_key' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowLevelUpPopup
// 0x0028 (0x0028 - 0x0000)
struct LobbyControllerBase_ShowLevelUpPopup final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRewardPlain                           _reward;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowLevelUpPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowLevelUpPopup");
static_assert(sizeof(LobbyControllerBase_ShowLevelUpPopup) == 0x000028, "Wrong size on LobbyControllerBase_ShowLevelUpPopup");
static_assert(offsetof(LobbyControllerBase_ShowLevelUpPopup, _level) == 0x000000, "Member 'LobbyControllerBase_ShowLevelUpPopup::_level' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowLevelUpPopup, _reward) == 0x000008, "Member 'LobbyControllerBase_ShowLevelUpPopup::_reward' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowMissionRewardPopup
// 0x0010 (0x0010 - 0x0000)
struct LobbyControllerBase_ShowMissionRewardPopup final
{
public:
	TArray<struct FNetMission>                    _rewarded_net_missions;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowMissionRewardPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowMissionRewardPopup");
static_assert(sizeof(LobbyControllerBase_ShowMissionRewardPopup) == 0x000010, "Wrong size on LobbyControllerBase_ShowMissionRewardPopup");
static_assert(offsetof(LobbyControllerBase_ShowMissionRewardPopup, _rewarded_net_missions) == 0x000000, "Member 'LobbyControllerBase_ShowMissionRewardPopup::_rewarded_net_missions' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowNoticePopup
// 0x0020 (0x0020 - 0x0000)
struct LobbyControllerBase_ShowNoticePopup final
{
public:
	struct FLoginNotice                           _packet;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _is_auto_open;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LobbyControllerBase_ShowNoticePopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowNoticePopup");
static_assert(sizeof(LobbyControllerBase_ShowNoticePopup) == 0x000020, "Wrong size on LobbyControllerBase_ShowNoticePopup");
static_assert(offsetof(LobbyControllerBase_ShowNoticePopup, _packet) == 0x000000, "Member 'LobbyControllerBase_ShowNoticePopup::_packet' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowNoticePopup, _is_auto_open) == 0x000018, "Member 'LobbyControllerBase_ShowNoticePopup::_is_auto_open' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowPlayerProfilePopup
// 0x0050 (0x0050 - 0x0000)
struct LobbyControllerBase_ShowPlayerProfilePopup final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _emblem_id;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _profilecard_id;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         _tier;                                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2300[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserName                              _nickname;                                         // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2301[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LobbyControllerBase_ShowPlayerProfilePopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowPlayerProfilePopup");
static_assert(sizeof(LobbyControllerBase_ShowPlayerProfilePopup) == 0x000050, "Wrong size on LobbyControllerBase_ShowPlayerProfilePopup");
static_assert(offsetof(LobbyControllerBase_ShowPlayerProfilePopup, _user_id) == 0x000000, "Member 'LobbyControllerBase_ShowPlayerProfilePopup::_user_id' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowPlayerProfilePopup, _emblem_id) == 0x000008, "Member 'LobbyControllerBase_ShowPlayerProfilePopup::_emblem_id' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowPlayerProfilePopup, _profilecard_id) == 0x000018, "Member 'LobbyControllerBase_ShowPlayerProfilePopup::_profilecard_id' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowPlayerProfilePopup, _tier) == 0x000028, "Member 'LobbyControllerBase_ShowPlayerProfilePopup::_tier' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowPlayerProfilePopup, _nickname) == 0x000030, "Member 'LobbyControllerBase_ShowPlayerProfilePopup::_nickname' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowPlayerProfilePopup, _level) == 0x000048, "Member 'LobbyControllerBase_ShowPlayerProfilePopup::_level' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowRewardedPopup
// 0x0028 (0x0028 - 0x0000)
struct LobbyControllerBase_ShowRewardedPopup final
{
public:
	struct FRewardPlain                           _reward_plain;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _on_queue;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2302[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LobbyControllerBase_ShowRewardedPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowRewardedPopup");
static_assert(sizeof(LobbyControllerBase_ShowRewardedPopup) == 0x000028, "Wrong size on LobbyControllerBase_ShowRewardedPopup");
static_assert(offsetof(LobbyControllerBase_ShowRewardedPopup, _reward_plain) == 0x000000, "Member 'LobbyControllerBase_ShowRewardedPopup::_reward_plain' has a wrong offset!");
static_assert(offsetof(LobbyControllerBase_ShowRewardedPopup, _on_queue) == 0x000020, "Member 'LobbyControllerBase_ShowRewardedPopup::_on_queue' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowSeasonRewardPopup
// 0x0038 (0x0038 - 0x0000)
struct LobbyControllerBase_ShowSeasonRewardPopup final
{
public:
	struct FBC_SeasonReward                       _season_result;                                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowSeasonRewardPopup) == 0x000008, "Wrong alignment on LobbyControllerBase_ShowSeasonRewardPopup");
static_assert(sizeof(LobbyControllerBase_ShowSeasonRewardPopup) == 0x000038, "Wrong size on LobbyControllerBase_ShowSeasonRewardPopup");
static_assert(offsetof(LobbyControllerBase_ShowSeasonRewardPopup, _season_result) == 0x000000, "Member 'LobbyControllerBase_ShowSeasonRewardPopup::_season_result' has a wrong offset!");

// Function Stigma.LobbyControllerBase.ShowTierUpdatePopup
// 0x0008 (0x0008 - 0x0000)
struct LobbyControllerBase_ShowTierUpdatePopup final
{
public:
	struct FBC_TierUpdate                         _tier_update;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_ShowTierUpdatePopup) == 0x000004, "Wrong alignment on LobbyControllerBase_ShowTierUpdatePopup");
static_assert(sizeof(LobbyControllerBase_ShowTierUpdatePopup) == 0x000008, "Wrong size on LobbyControllerBase_ShowTierUpdatePopup");
static_assert(offsetof(LobbyControllerBase_ShowTierUpdatePopup, _tier_update) == 0x000000, "Member 'LobbyControllerBase_ShowTierUpdatePopup::_tier_update' has a wrong offset!");

// Function Stigma.LobbyControllerBase.StopSelectionCutScene
// 0x0008 (0x0008 - 0x0000)
struct LobbyControllerBase_StopSelectionCutScene final
{
public:
	class AFollowCameraActor*                     _cam;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_StopSelectionCutScene) == 0x000008, "Wrong alignment on LobbyControllerBase_StopSelectionCutScene");
static_assert(sizeof(LobbyControllerBase_StopSelectionCutScene) == 0x000008, "Wrong size on LobbyControllerBase_StopSelectionCutScene");
static_assert(offsetof(LobbyControllerBase_StopSelectionCutScene, _cam) == 0x000000, "Member 'LobbyControllerBase_StopSelectionCutScene::_cam' has a wrong offset!");

// Function Stigma.LobbyControllerBase.IsPlayingCutScene
// 0x0001 (0x0001 - 0x0000)
struct LobbyControllerBase_IsPlayingCutScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyControllerBase_IsPlayingCutScene) == 0x000001, "Wrong alignment on LobbyControllerBase_IsPlayingCutScene");
static_assert(sizeof(LobbyControllerBase_IsPlayingCutScene) == 0x000001, "Wrong size on LobbyControllerBase_IsPlayingCutScene");
static_assert(offsetof(LobbyControllerBase_IsPlayingCutScene, ReturnValue) == 0x000000, "Member 'LobbyControllerBase_IsPlayingCutScene::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_SocialTabEntryBase.DoSelect
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_SocialTabEntryBase_DoSelect final
{
public:
	ESocialPopupTabType                           _tab_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_SocialTabEntryBase_DoSelect) == 0x000001, "Wrong alignment on Ctrl_SocialTabEntryBase_DoSelect");
static_assert(sizeof(Ctrl_SocialTabEntryBase_DoSelect) == 0x000002, "Wrong size on Ctrl_SocialTabEntryBase_DoSelect");
static_assert(offsetof(Ctrl_SocialTabEntryBase_DoSelect, _tab_type) == 0x000000, "Member 'Ctrl_SocialTabEntryBase_DoSelect::_tab_type' has a wrong offset!");
static_assert(offsetof(Ctrl_SocialTabEntryBase_DoSelect, ReturnValue) == 0x000001, "Member 'Ctrl_SocialTabEntryBase_DoSelect::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_SocialTabEntryBase.GetState
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_SocialTabEntryBase_GetState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_SocialTabEntryBase_GetState) == 0x000004, "Wrong alignment on Ctrl_SocialTabEntryBase_GetState");
static_assert(sizeof(Ctrl_SocialTabEntryBase_GetState) == 0x000004, "Wrong size on Ctrl_SocialTabEntryBase_GetState");
static_assert(offsetof(Ctrl_SocialTabEntryBase_GetState, ReturnValue) == 0x000000, "Member 'Ctrl_SocialTabEntryBase_GetState::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_SocialTabEntryBase.SetEventCount
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_SocialTabEntryBase_SetEventCount final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_SocialTabEntryBase_SetEventCount) == 0x000004, "Wrong alignment on Ctrl_SocialTabEntryBase_SetEventCount");
static_assert(sizeof(Ctrl_SocialTabEntryBase_SetEventCount) == 0x000004, "Wrong size on Ctrl_SocialTabEntryBase_SetEventCount");
static_assert(offsetof(Ctrl_SocialTabEntryBase_SetEventCount, _count) == 0x000000, "Member 'Ctrl_SocialTabEntryBase_SetEventCount::_count' has a wrong offset!");

// Function Stigma.Ctrl_SocialTabEntryBase.SetState
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_SocialTabEntryBase_SetState final
{
public:
	int32                                         _state;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_SocialTabEntryBase_SetState) == 0x000004, "Wrong alignment on Ctrl_SocialTabEntryBase_SetState");
static_assert(sizeof(Ctrl_SocialTabEntryBase_SetState) == 0x000004, "Wrong size on Ctrl_SocialTabEntryBase_SetState");
static_assert(offsetof(Ctrl_SocialTabEntryBase_SetState, _state) == 0x000000, "Member 'Ctrl_SocialTabEntryBase_SetState::_state' has a wrong offset!");

// Function Stigma.Ctrl_StatUpdate.SetControlPower
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_StatUpdate_SetControlPower final
{
public:
	int32                                         _cp;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_StatUpdate_SetControlPower) == 0x000004, "Wrong alignment on Ctrl_StatUpdate_SetControlPower");
static_assert(sizeof(Ctrl_StatUpdate_SetControlPower) == 0x000004, "Wrong size on Ctrl_StatUpdate_SetControlPower");
static_assert(offsetof(Ctrl_StatUpdate_SetControlPower, _cp) == 0x000000, "Member 'Ctrl_StatUpdate_SetControlPower::_cp' has a wrong offset!");

// Function Stigma.Ctrl_StatUpdate.SetControlPowerLack
// 0x0004 (0x0004 - 0x0000)
struct Ctrl_StatUpdate_SetControlPowerLack final
{
public:
	int32                                         _cp_lack;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_StatUpdate_SetControlPowerLack) == 0x000004, "Wrong alignment on Ctrl_StatUpdate_SetControlPowerLack");
static_assert(sizeof(Ctrl_StatUpdate_SetControlPowerLack) == 0x000004, "Wrong size on Ctrl_StatUpdate_SetControlPowerLack");
static_assert(offsetof(Ctrl_StatUpdate_SetControlPowerLack, _cp_lack) == 0x000000, "Member 'Ctrl_StatUpdate_SetControlPowerLack::_cp_lack' has a wrong offset!");

// Function Stigma.Ctrl_StatUpdate.SetCustomStatValue
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_StatUpdate_SetCustomStatValue final
{
public:
	float                                         _val;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2304[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UTexture2D*                             _Icon;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_StatUpdate_SetCustomStatValue) == 0x000008, "Wrong alignment on Ctrl_StatUpdate_SetCustomStatValue");
static_assert(sizeof(Ctrl_StatUpdate_SetCustomStatValue) == 0x000010, "Wrong size on Ctrl_StatUpdate_SetCustomStatValue");
static_assert(offsetof(Ctrl_StatUpdate_SetCustomStatValue, _val) == 0x000000, "Member 'Ctrl_StatUpdate_SetCustomStatValue::_val' has a wrong offset!");
static_assert(offsetof(Ctrl_StatUpdate_SetCustomStatValue, _Icon) == 0x000008, "Member 'Ctrl_StatUpdate_SetCustomStatValue::_Icon' has a wrong offset!");

// Function Stigma.InvenItem.Create
// 0x0140 (0x0140 - 0x0000)
struct InvenItem_Create final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemEntry                             _item;                                             // 0x0008(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UInvenItem*                             ReturnValue;                                       // 0x0138(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_Create) == 0x000008, "Wrong alignment on InvenItem_Create");
static_assert(sizeof(InvenItem_Create) == 0x000140, "Wrong size on InvenItem_Create");
static_assert(offsetof(InvenItem_Create, _outer) == 0x000000, "Member 'InvenItem_Create::_outer' has a wrong offset!");
static_assert(offsetof(InvenItem_Create, _item) == 0x000008, "Member 'InvenItem_Create::_item' has a wrong offset!");
static_assert(offsetof(InvenItem_Create, ReturnValue) == 0x000138, "Member 'InvenItem_Create::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.CopyFromItem
// 0x0008 (0x0008 - 0x0000)
struct InvenItem_CopyFromItem final
{
public:
	const class UInvenItem*                       _item;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_CopyFromItem) == 0x000008, "Wrong alignment on InvenItem_CopyFromItem");
static_assert(sizeof(InvenItem_CopyFromItem) == 0x000008, "Wrong size on InvenItem_CopyFromItem");
static_assert(offsetof(InvenItem_CopyFromItem, _item) == 0x000000, "Member 'InvenItem_CopyFromItem::_item' has a wrong offset!");

// Function Stigma.InvenItem.GetBigIcon
// 0x0028 (0x0028 - 0x0000)
struct InvenItem_GetBigIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetBigIcon) == 0x000008, "Wrong alignment on InvenItem_GetBigIcon");
static_assert(sizeof(InvenItem_GetBigIcon) == 0x000028, "Wrong size on InvenItem_GetBigIcon");
static_assert(offsetof(InvenItem_GetBigIcon, ReturnValue) == 0x000000, "Member 'InvenItem_GetBigIcon::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetColor
// 0x0010 (0x0010 - 0x0000)
struct InvenItem_GetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetColor) == 0x000004, "Wrong alignment on InvenItem_GetColor");
static_assert(sizeof(InvenItem_GetColor) == 0x000010, "Wrong size on InvenItem_GetColor");
static_assert(offsetof(InvenItem_GetColor, ReturnValue) == 0x000000, "Member 'InvenItem_GetColor::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetCount
// 0x0008 (0x0008 - 0x0000)
struct InvenItem_GetCount final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetCount) == 0x000008, "Wrong alignment on InvenItem_GetCount");
static_assert(sizeof(InvenItem_GetCount) == 0x000008, "Wrong size on InvenItem_GetCount");
static_assert(offsetof(InvenItem_GetCount, ReturnValue) == 0x000000, "Member 'InvenItem_GetCount::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetDescShortText
// 0x0018 (0x0018 - 0x0000)
struct InvenItem_GetDescShortText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetDescShortText) == 0x000008, "Wrong alignment on InvenItem_GetDescShortText");
static_assert(sizeof(InvenItem_GetDescShortText) == 0x000018, "Wrong size on InvenItem_GetDescShortText");
static_assert(offsetof(InvenItem_GetDescShortText, ReturnValue) == 0x000000, "Member 'InvenItem_GetDescShortText::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetDescText
// 0x0018 (0x0018 - 0x0000)
struct InvenItem_GetDescText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetDescText) == 0x000008, "Wrong alignment on InvenItem_GetDescText");
static_assert(sizeof(InvenItem_GetDescText) == 0x000018, "Wrong size on InvenItem_GetDescText");
static_assert(offsetof(InvenItem_GetDescText, ReturnValue) == 0x000000, "Member 'InvenItem_GetDescText::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct InvenItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetDisplayName) == 0x000008, "Wrong alignment on InvenItem_GetDisplayName");
static_assert(sizeof(InvenItem_GetDisplayName) == 0x000018, "Wrong size on InvenItem_GetDisplayName");
static_assert(offsetof(InvenItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'InvenItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetExpiry
// 0x0008 (0x0008 - 0x0000)
struct InvenItem_GetExpiry final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetExpiry) == 0x000008, "Wrong alignment on InvenItem_GetExpiry");
static_assert(sizeof(InvenItem_GetExpiry) == 0x000008, "Wrong size on InvenItem_GetExpiry");
static_assert(offsetof(InvenItem_GetExpiry, ReturnValue) == 0x000000, "Member 'InvenItem_GetExpiry::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetGrade
// 0x0001 (0x0001 - 0x0000)
struct InvenItem_GetGrade final
{
public:
	EItemGrade                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetGrade) == 0x000001, "Wrong alignment on InvenItem_GetGrade");
static_assert(sizeof(InvenItem_GetGrade) == 0x000001, "Wrong size on InvenItem_GetGrade");
static_assert(offsetof(InvenItem_GetGrade, ReturnValue) == 0x000000, "Member 'InvenItem_GetGrade::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetIcon
// 0x0028 (0x0028 - 0x0000)
struct InvenItem_GetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetIcon) == 0x000008, "Wrong alignment on InvenItem_GetIcon");
static_assert(sizeof(InvenItem_GetIcon) == 0x000028, "Wrong size on InvenItem_GetIcon");
static_assert(offsetof(InvenItem_GetIcon, ReturnValue) == 0x000000, "Member 'InvenItem_GetIcon::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetItemID
// 0x0010 (0x0010 - 0x0000)
struct InvenItem_GetItemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetItemID) == 0x000008, "Wrong alignment on InvenItem_GetItemID");
static_assert(sizeof(InvenItem_GetItemID) == 0x000010, "Wrong size on InvenItem_GetItemID");
static_assert(offsetof(InvenItem_GetItemID, ReturnValue) == 0x000000, "Member 'InvenItem_GetItemID::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetLaunchingDate
// 0x0008 (0x0008 - 0x0000)
struct InvenItem_GetLaunchingDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetLaunchingDate) == 0x000008, "Wrong alignment on InvenItem_GetLaunchingDate");
static_assert(sizeof(InvenItem_GetLaunchingDate) == 0x000008, "Wrong size on InvenItem_GetLaunchingDate");
static_assert(offsetof(InvenItem_GetLaunchingDate, ReturnValue) == 0x000000, "Member 'InvenItem_GetLaunchingDate::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetLeftOwnershipTime
// 0x0008 (0x0008 - 0x0000)
struct InvenItem_GetLeftOwnershipTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetLeftOwnershipTime) == 0x000008, "Wrong alignment on InvenItem_GetLeftOwnershipTime");
static_assert(sizeof(InvenItem_GetLeftOwnershipTime) == 0x000008, "Wrong size on InvenItem_GetLeftOwnershipTime");
static_assert(offsetof(InvenItem_GetLeftOwnershipTime, ReturnValue) == 0x000000, "Member 'InvenItem_GetLeftOwnershipTime::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.GetOwnType
// 0x0001 (0x0001 - 0x0000)
struct InvenItem_GetOwnType final
{
public:
	EOwnType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_GetOwnType) == 0x000001, "Wrong alignment on InvenItem_GetOwnType");
static_assert(sizeof(InvenItem_GetOwnType) == 0x000001, "Wrong size on InvenItem_GetOwnType");
static_assert(offsetof(InvenItem_GetOwnType, ReturnValue) == 0x000000, "Member 'InvenItem_GetOwnType::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct InvenItem_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_IsOwned) == 0x000001, "Wrong alignment on InvenItem_IsOwned");
static_assert(sizeof(InvenItem_IsOwned) == 0x000001, "Wrong size on InvenItem_IsOwned");
static_assert(offsetof(InvenItem_IsOwned, ReturnValue) == 0x000000, "Member 'InvenItem_IsOwned::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.IsPossessed
// 0x0001 (0x0001 - 0x0000)
struct InvenItem_IsPossessed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_IsPossessed) == 0x000001, "Wrong alignment on InvenItem_IsPossessed");
static_assert(sizeof(InvenItem_IsPossessed) == 0x000001, "Wrong size on InvenItem_IsPossessed");
static_assert(offsetof(InvenItem_IsPossessed, ReturnValue) == 0x000000, "Member 'InvenItem_IsPossessed::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem.IsVisibleRedDot
// 0x0001 (0x0001 - 0x0000)
struct InvenItem_IsVisibleRedDot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_IsVisibleRedDot) == 0x000001, "Wrong alignment on InvenItem_IsVisibleRedDot");
static_assert(sizeof(InvenItem_IsVisibleRedDot) == 0x000001, "Wrong size on InvenItem_IsVisibleRedDot");
static_assert(offsetof(InvenItem_IsVisibleRedDot, ReturnValue) == 0x000000, "Member 'InvenItem_IsVisibleRedDot::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfileRef.GetProfile
// 0x0008 (0x0008 - 0x0000)
struct UserProfileRef_GetProfile final
{
public:
	class UUserProfile*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfileRef_GetProfile) == 0x000008, "Wrong alignment on UserProfileRef_GetProfile");
static_assert(sizeof(UserProfileRef_GetProfile) == 0x000008, "Wrong size on UserProfileRef_GetProfile");
static_assert(offsetof(UserProfileRef_GetProfile, ReturnValue) == 0x000000, "Member 'UserProfileRef_GetProfile::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfileRef.GetRefAs
// 0x0001 (0x0001 - 0x0000)
struct UserProfileRef_GetRefAs final
{
public:
	EUserProfileType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfileRef_GetRefAs) == 0x000001, "Wrong alignment on UserProfileRef_GetRefAs");
static_assert(sizeof(UserProfileRef_GetRefAs) == 0x000001, "Wrong size on UserProfileRef_GetRefAs");
static_assert(offsetof(UserProfileRef_GetRefAs, ReturnValue) == 0x000000, "Member 'UserProfileRef_GetRefAs::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_Status.SetSubTitle
// 0x0018 (0x0018 - 0x0000)
struct Ctrl_Status_SetSubTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_Status_SetSubTitle) == 0x000008, "Wrong alignment on Ctrl_Status_SetSubTitle");
static_assert(sizeof(Ctrl_Status_SetSubTitle) == 0x000018, "Wrong size on Ctrl_Status_SetSubTitle");
static_assert(offsetof(Ctrl_Status_SetSubTitle, _text) == 0x000000, "Member 'Ctrl_Status_SetSubTitle::_text' has a wrong offset!");

// Function Stigma.Ctrl_Status.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct Ctrl_Status_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_Status_SetTitle) == 0x000008, "Wrong alignment on Ctrl_Status_SetTitle");
static_assert(sizeof(Ctrl_Status_SetTitle) == 0x000018, "Wrong size on Ctrl_Status_SetTitle");
static_assert(offsetof(Ctrl_Status_SetTitle, _text) == 0x000000, "Member 'Ctrl_Status_SetTitle::_text' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxBase.Init
// 0x0028 (0x0028 - 0x0000)
struct Ctrl_TextCheckBoxBase_Init final
{
public:
	class FName                                   _ctrl_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _ctrl_text;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _is_checked;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_TextCheckBoxBase_Init) == 0x000008, "Wrong alignment on Ctrl_TextCheckBoxBase_Init");
static_assert(sizeof(Ctrl_TextCheckBoxBase_Init) == 0x000028, "Wrong size on Ctrl_TextCheckBoxBase_Init");
static_assert(offsetof(Ctrl_TextCheckBoxBase_Init, _ctrl_id) == 0x000000, "Member 'Ctrl_TextCheckBoxBase_Init::_ctrl_id' has a wrong offset!");
static_assert(offsetof(Ctrl_TextCheckBoxBase_Init, _ctrl_text) == 0x000008, "Member 'Ctrl_TextCheckBoxBase_Init::_ctrl_text' has a wrong offset!");
static_assert(offsetof(Ctrl_TextCheckBoxBase_Init, _is_checked) == 0x000020, "Member 'Ctrl_TextCheckBoxBase_Init::_is_checked' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxBase.IsChecked
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_TextCheckBoxBase_IsChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_TextCheckBoxBase_IsChecked) == 0x000001, "Wrong alignment on Ctrl_TextCheckBoxBase_IsChecked");
static_assert(sizeof(Ctrl_TextCheckBoxBase_IsChecked) == 0x000001, "Wrong size on Ctrl_TextCheckBoxBase_IsChecked");
static_assert(offsetof(Ctrl_TextCheckBoxBase_IsChecked, ReturnValue) == 0x000000, "Member 'Ctrl_TextCheckBoxBase_IsChecked::ReturnValue' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxBase.OnProcCheckBoxStateChanged
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged final
{
public:
	bool                                          _is_checked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged) == 0x000001, "Wrong alignment on Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged");
static_assert(sizeof(Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged) == 0x000001, "Wrong size on Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged");
static_assert(offsetof(Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged, _is_checked) == 0x000000, "Member 'Ctrl_TextCheckBoxBase_OnProcCheckBoxStateChanged::_is_checked' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxBase.RegisterOnStateChange
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_TextCheckBoxBase_RegisterOnStateChange final
{
public:
	TDelegate<void(class UCtrl_TextCheckBoxBase* _check_box, class FName& _id, bool _is_checked)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_TextCheckBoxBase_RegisterOnStateChange) == 0x000004, "Wrong alignment on Ctrl_TextCheckBoxBase_RegisterOnStateChange");
static_assert(sizeof(Ctrl_TextCheckBoxBase_RegisterOnStateChange) == 0x000010, "Wrong size on Ctrl_TextCheckBoxBase_RegisterOnStateChange");
static_assert(offsetof(Ctrl_TextCheckBoxBase_RegisterOnStateChange, _callback) == 0x000000, "Member 'Ctrl_TextCheckBoxBase_RegisterOnStateChange::_callback' has a wrong offset!");

// Function Stigma.Ctrl_TextCheckBoxBase.SetCheck
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_TextCheckBoxBase_SetCheck final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_TextCheckBoxBase_SetCheck) == 0x000001, "Wrong alignment on Ctrl_TextCheckBoxBase_SetCheck");
static_assert(sizeof(Ctrl_TextCheckBoxBase_SetCheck) == 0x000002, "Wrong size on Ctrl_TextCheckBoxBase_SetCheck");
static_assert(offsetof(Ctrl_TextCheckBoxBase_SetCheck, _flag) == 0x000000, "Member 'Ctrl_TextCheckBoxBase_SetCheck::_flag' has a wrong offset!");
static_assert(offsetof(Ctrl_TextCheckBoxBase_SetCheck, _invoke_callback) == 0x000001, "Member 'Ctrl_TextCheckBoxBase_SetCheck::_invoke_callback' has a wrong offset!");

// Function Stigma.Ctrl_ToggleButton.OnButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_ToggleButton_OnButtonClicked final
{
public:
	class UAnimatableWidget*                      _button_widget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Ctrl_ToggleButton_OnButtonClicked) == 0x000008, "Wrong alignment on Ctrl_ToggleButton_OnButtonClicked");
static_assert(sizeof(Ctrl_ToggleButton_OnButtonClicked) == 0x000010, "Wrong size on Ctrl_ToggleButton_OnButtonClicked");
static_assert(offsetof(Ctrl_ToggleButton_OnButtonClicked, _button_widget) == 0x000000, "Member 'Ctrl_ToggleButton_OnButtonClicked::_button_widget' has a wrong offset!");
static_assert(offsetof(Ctrl_ToggleButton_OnButtonClicked, _selected) == 0x000008, "Member 'Ctrl_ToggleButton_OnButtonClicked::_selected' has a wrong offset!");

// Function Stigma.Ctrl_ToggleButton.OnValueChanged
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_ToggleButton_OnValueChanged final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_init;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ToggleButton_OnValueChanged) == 0x000001, "Wrong alignment on Ctrl_ToggleButton_OnValueChanged");
static_assert(sizeof(Ctrl_ToggleButton_OnValueChanged) == 0x000002, "Wrong size on Ctrl_ToggleButton_OnValueChanged");
static_assert(offsetof(Ctrl_ToggleButton_OnValueChanged, _value) == 0x000000, "Member 'Ctrl_ToggleButton_OnValueChanged::_value' has a wrong offset!");
static_assert(offsetof(Ctrl_ToggleButton_OnValueChanged, _is_init) == 0x000001, "Member 'Ctrl_ToggleButton_OnValueChanged::_is_init' has a wrong offset!");

// Function Stigma.Ctrl_ToggleButton.SetValue
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_ToggleButton_SetValue final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_init;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ToggleButton_SetValue) == 0x000001, "Wrong alignment on Ctrl_ToggleButton_SetValue");
static_assert(sizeof(Ctrl_ToggleButton_SetValue) == 0x000002, "Wrong size on Ctrl_ToggleButton_SetValue");
static_assert(offsetof(Ctrl_ToggleButton_SetValue, _value) == 0x000000, "Member 'Ctrl_ToggleButton_SetValue::_value' has a wrong offset!");
static_assert(offsetof(Ctrl_ToggleButton_SetValue, _is_init) == 0x000001, "Member 'Ctrl_ToggleButton_SetValue::_is_init' has a wrong offset!");

// Function Stigma.Ctrl_ToggleButton.GetValue
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_ToggleButton_GetValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ctrl_ToggleButton_GetValue) == 0x000001, "Wrong alignment on Ctrl_ToggleButton_GetValue");
static_assert(sizeof(Ctrl_ToggleButton_GetValue) == 0x000001, "Wrong size on Ctrl_ToggleButton_GetValue");
static_assert(offsetof(Ctrl_ToggleButton_GetValue, ReturnValue) == 0x000000, "Member 'Ctrl_ToggleButton_GetValue::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.AddOption
// 0x0018 (0x0018 - 0x0000)
struct CustomComboBoxString_AddOption final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _option;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_AddOption) == 0x000008, "Wrong alignment on CustomComboBoxString_AddOption");
static_assert(sizeof(CustomComboBoxString_AddOption) == 0x000018, "Wrong size on CustomComboBoxString_AddOption");
static_assert(offsetof(CustomComboBoxString_AddOption, _id) == 0x000000, "Member 'CustomComboBoxString_AddOption::_id' has a wrong offset!");
static_assert(offsetof(CustomComboBoxString_AddOption, _option) == 0x000008, "Member 'CustomComboBoxString_AddOption::_option' has a wrong offset!");

// DelegateFunction Stigma.CustomComboBoxString.OnSelectionChangedEvent__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature final
{
public:
	class FName                                   SelectedID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedItem;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2312[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature) == 0x000020, "Wrong size on CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature, SelectedID) == 0x000000, "Member 'CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature::SelectedID' has a wrong offset!");
static_assert(offsetof(CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature, SelectedItem) == 0x000008, "Member 'CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature, SelectionType) == 0x000018, "Member 'CustomComboBoxString_OnSelectionChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function Stigma.CustomComboBoxString.RemoveOption
// 0x000C (0x000C - 0x0000)
struct CustomComboBoxString_RemoveOption final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2313[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(CustomComboBoxString_RemoveOption) == 0x000004, "Wrong alignment on CustomComboBoxString_RemoveOption");
static_assert(sizeof(CustomComboBoxString_RemoveOption) == 0x00000C, "Wrong size on CustomComboBoxString_RemoveOption");
static_assert(offsetof(CustomComboBoxString_RemoveOption, _id) == 0x000000, "Member 'CustomComboBoxString_RemoveOption::_id' has a wrong offset!");
static_assert(offsetof(CustomComboBoxString_RemoveOption, ReturnValue) == 0x000008, "Member 'CustomComboBoxString_RemoveOption::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct CustomComboBoxString_SetSelectedIndex final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_SetSelectedIndex) == 0x000004, "Wrong alignment on CustomComboBoxString_SetSelectedIndex");
static_assert(sizeof(CustomComboBoxString_SetSelectedIndex) == 0x000004, "Wrong size on CustomComboBoxString_SetSelectedIndex");
static_assert(offsetof(CustomComboBoxString_SetSelectedIndex, _index) == 0x000000, "Member 'CustomComboBoxString_SetSelectedIndex::_index' has a wrong offset!");

// Function Stigma.CustomComboBoxString.SetSelectedOption
// 0x0008 (0x0008 - 0x0000)
struct CustomComboBoxString_SetSelectedOption final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_SetSelectedOption) == 0x000004, "Wrong alignment on CustomComboBoxString_SetSelectedOption");
static_assert(sizeof(CustomComboBoxString_SetSelectedOption) == 0x000008, "Wrong size on CustomComboBoxString_SetSelectedOption");
static_assert(offsetof(CustomComboBoxString_SetSelectedOption, _id) == 0x000000, "Member 'CustomComboBoxString_SetSelectedOption::_id' has a wrong offset!");

// Function Stigma.CustomComboBoxString.FindOptionIndex
// 0x000C (0x000C - 0x0000)
struct CustomComboBoxString_FindOptionIndex final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_FindOptionIndex) == 0x000004, "Wrong alignment on CustomComboBoxString_FindOptionIndex");
static_assert(sizeof(CustomComboBoxString_FindOptionIndex) == 0x00000C, "Wrong size on CustomComboBoxString_FindOptionIndex");
static_assert(offsetof(CustomComboBoxString_FindOptionIndex, _id) == 0x000000, "Member 'CustomComboBoxString_FindOptionIndex::_id' has a wrong offset!");
static_assert(offsetof(CustomComboBoxString_FindOptionIndex, ReturnValue) == 0x000008, "Member 'CustomComboBoxString_FindOptionIndex::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.GetOptionAtIndex
// 0x0020 (0x0020 - 0x0000)
struct CustomComboBoxString_GetOptionAtIndex final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2314[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FOptionCustomBoxEntry                  ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_GetOptionAtIndex) == 0x000008, "Wrong alignment on CustomComboBoxString_GetOptionAtIndex");
static_assert(sizeof(CustomComboBoxString_GetOptionAtIndex) == 0x000020, "Wrong size on CustomComboBoxString_GetOptionAtIndex");
static_assert(offsetof(CustomComboBoxString_GetOptionAtIndex, _index) == 0x000000, "Member 'CustomComboBoxString_GetOptionAtIndex::_index' has a wrong offset!");
static_assert(offsetof(CustomComboBoxString_GetOptionAtIndex, ReturnValue) == 0x000008, "Member 'CustomComboBoxString_GetOptionAtIndex::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.GetOptionCount
// 0x0004 (0x0004 - 0x0000)
struct CustomComboBoxString_GetOptionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_GetOptionCount) == 0x000004, "Wrong alignment on CustomComboBoxString_GetOptionCount");
static_assert(sizeof(CustomComboBoxString_GetOptionCount) == 0x000004, "Wrong size on CustomComboBoxString_GetOptionCount");
static_assert(offsetof(CustomComboBoxString_GetOptionCount, ReturnValue) == 0x000000, "Member 'CustomComboBoxString_GetOptionCount::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct CustomComboBoxString_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_GetSelectedIndex) == 0x000004, "Wrong alignment on CustomComboBoxString_GetSelectedIndex");
static_assert(sizeof(CustomComboBoxString_GetSelectedIndex) == 0x000004, "Wrong size on CustomComboBoxString_GetSelectedIndex");
static_assert(offsetof(CustomComboBoxString_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'CustomComboBoxString_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.GetSelectedOption
// 0x0018 (0x0018 - 0x0000)
struct CustomComboBoxString_GetSelectedOption final
{
public:
	struct FOptionCustomBoxEntry                  ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_GetSelectedOption) == 0x000008, "Wrong alignment on CustomComboBoxString_GetSelectedOption");
static_assert(sizeof(CustomComboBoxString_GetSelectedOption) == 0x000018, "Wrong size on CustomComboBoxString_GetSelectedOption");
static_assert(offsetof(CustomComboBoxString_GetSelectedOption, ReturnValue) == 0x000000, "Member 'CustomComboBoxString_GetSelectedOption::ReturnValue' has a wrong offset!");

// Function Stigma.CustomComboBoxString.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct CustomComboBoxString_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomComboBoxString_IsOpen) == 0x000001, "Wrong alignment on CustomComboBoxString_IsOpen");
static_assert(sizeof(CustomComboBoxString_IsOpen) == 0x000001, "Wrong size on CustomComboBoxString_IsOpen");
static_assert(offsetof(CustomComboBoxString_IsOpen, ReturnValue) == 0x000000, "Member 'CustomComboBoxString_IsOpen::ReturnValue' has a wrong offset!");

// Function Stigma.DLG_JoinCustomGameBase.InvokeOnJoinCustomGameCallback
// 0x0010 (0x0010 - 0x0000)
struct DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback final
{
public:
	class FString                                 _battle_ids;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback) == 0x000008, "Wrong alignment on DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback");
static_assert(sizeof(DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback) == 0x000010, "Wrong size on DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback");
static_assert(offsetof(DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback, _battle_ids) == 0x000000, "Member 'DLG_JoinCustomGameBase_InvokeOnJoinCustomGameCallback::_battle_ids' has a wrong offset!");

// Function Stigma.DLG_JoinCustomGameBase.RegisterOnJoinCustomGame
// 0x0010 (0x0010 - 0x0000)
struct DLG_JoinCustomGameBase_RegisterOnJoinCustomGame final
{
public:
	TDelegate<void(const class FString& _battle_ids)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DLG_JoinCustomGameBase_RegisterOnJoinCustomGame) == 0x000004, "Wrong alignment on DLG_JoinCustomGameBase_RegisterOnJoinCustomGame");
static_assert(sizeof(DLG_JoinCustomGameBase_RegisterOnJoinCustomGame) == 0x000010, "Wrong size on DLG_JoinCustomGameBase_RegisterOnJoinCustomGame");
static_assert(offsetof(DLG_JoinCustomGameBase_RegisterOnJoinCustomGame, _callback) == 0x000000, "Member 'DLG_JoinCustomGameBase_RegisterOnJoinCustomGame::_callback' has a wrong offset!");

// Function Stigma.Elevator.OnMovingDoor
// 0x0008 (0x0008 - 0x0000)
struct Elevator_OnMovingDoor final
{
public:
	float                                         _t;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Elevator_OnMovingDoor) == 0x000004, "Wrong alignment on Elevator_OnMovingDoor");
static_assert(sizeof(Elevator_OnMovingDoor) == 0x000008, "Wrong size on Elevator_OnMovingDoor");
static_assert(offsetof(Elevator_OnMovingDoor, _t) == 0x000000, "Member 'Elevator_OnMovingDoor::_t' has a wrong offset!");
static_assert(offsetof(Elevator_OnMovingDoor, ReturnValue) == 0x000004, "Member 'Elevator_OnMovingDoor::ReturnValue' has a wrong offset!");

// Function Stigma.Elevator.OnMovingFloor
// 0x000C (0x000C - 0x0000)
struct Elevator_OnMovingFloor final
{
public:
	float                                         _height;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _t;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231E[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Elevator_OnMovingFloor) == 0x000004, "Wrong alignment on Elevator_OnMovingFloor");
static_assert(sizeof(Elevator_OnMovingFloor) == 0x00000C, "Wrong size on Elevator_OnMovingFloor");
static_assert(offsetof(Elevator_OnMovingFloor, _height) == 0x000000, "Member 'Elevator_OnMovingFloor::_height' has a wrong offset!");
static_assert(offsetof(Elevator_OnMovingFloor, _t) == 0x000004, "Member 'Elevator_OnMovingFloor::_t' has a wrong offset!");
static_assert(offsetof(Elevator_OnMovingFloor, ReturnValue) == 0x000008, "Member 'Elevator_OnMovingFloor::ReturnValue' has a wrong offset!");

// Function Stigma.Elevator.Setter_State
// 0x0002 (0x0002 - 0x0000)
struct Elevator_Setter_State final
{
public:
	struct FElevatorState                         _state;                                            // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_Setter_State) == 0x000001, "Wrong alignment on Elevator_Setter_State");
static_assert(sizeof(Elevator_Setter_State) == 0x000002, "Wrong size on Elevator_Setter_State");
static_assert(offsetof(Elevator_Setter_State, _state) == 0x000000, "Member 'Elevator_Setter_State::_state' has a wrong offset!");

// Function Stigma.Elevator.IsHighFloor
// 0x0001 (0x0001 - 0x0000)
struct Elevator_IsHighFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_IsHighFloor) == 0x000001, "Wrong alignment on Elevator_IsHighFloor");
static_assert(sizeof(Elevator_IsHighFloor) == 0x000001, "Wrong size on Elevator_IsHighFloor");
static_assert(offsetof(Elevator_IsHighFloor, ReturnValue) == 0x000000, "Member 'Elevator_IsHighFloor::ReturnValue' has a wrong offset!");

// Function Stigma.Elevator.IsLowFloor
// 0x0001 (0x0001 - 0x0000)
struct Elevator_IsLowFloor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Elevator_IsLowFloor) == 0x000001, "Wrong alignment on Elevator_IsLowFloor");
static_assert(sizeof(Elevator_IsLowFloor) == 0x000001, "Wrong size on Elevator_IsLowFloor");
static_assert(offsetof(Elevator_IsLowFloor, ReturnValue) == 0x000000, "Member 'Elevator_IsLowFloor::ReturnValue' has a wrong offset!");

// Function Stigma.EventCounterSubsystem.Subscribe
// 0x0060 (0x0060 - 0x0000)
struct EventCounterSubsystem_Subscribe final
{
public:
	TSet<EEventCounter>                           _events;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EEventCounter _event, int32 _count)> _proc;                                             // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCounterSubsystem_Subscribe) == 0x000008, "Wrong alignment on EventCounterSubsystem_Subscribe");
static_assert(sizeof(EventCounterSubsystem_Subscribe) == 0x000060, "Wrong size on EventCounterSubsystem_Subscribe");
static_assert(offsetof(EventCounterSubsystem_Subscribe, _events) == 0x000000, "Member 'EventCounterSubsystem_Subscribe::_events' has a wrong offset!");
static_assert(offsetof(EventCounterSubsystem_Subscribe, _proc) == 0x000050, "Member 'EventCounterSubsystem_Subscribe::_proc' has a wrong offset!");

// Function Stigma.EventCounterSubsystem.Unsubscribe
// 0x0008 (0x0008 - 0x0000)
struct EventCounterSubsystem_Unsubscribe final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCounterSubsystem_Unsubscribe) == 0x000008, "Wrong alignment on EventCounterSubsystem_Unsubscribe");
static_assert(sizeof(EventCounterSubsystem_Unsubscribe) == 0x000008, "Wrong size on EventCounterSubsystem_Unsubscribe");
static_assert(offsetof(EventCounterSubsystem_Unsubscribe, _obj) == 0x000000, "Member 'EventCounterSubsystem_Unsubscribe::_obj' has a wrong offset!");

// Function Stigma.EventCounterSubsystem.GetTotalCount
// 0x0058 (0x0058 - 0x0000)
struct EventCounterSubsystem_GetTotalCount final
{
public:
	TSet<EEventCounter>                           _events;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2323[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(EventCounterSubsystem_GetTotalCount) == 0x000008, "Wrong alignment on EventCounterSubsystem_GetTotalCount");
static_assert(sizeof(EventCounterSubsystem_GetTotalCount) == 0x000058, "Wrong size on EventCounterSubsystem_GetTotalCount");
static_assert(offsetof(EventCounterSubsystem_GetTotalCount, _events) == 0x000000, "Member 'EventCounterSubsystem_GetTotalCount::_events' has a wrong offset!");
static_assert(offsetof(EventCounterSubsystem_GetTotalCount, ReturnValue) == 0x000050, "Member 'EventCounterSubsystem_GetTotalCount::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.GetGunnerState
// 0x0018 (0x0018 - 0x0000)
struct Gunner_GetGunnerState final
{
public:
	bool                                          _sub_gun;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2324[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunnerState                           ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gunner_GetGunnerState) == 0x000004, "Wrong alignment on Gunner_GetGunnerState");
static_assert(sizeof(Gunner_GetGunnerState) == 0x000018, "Wrong size on Gunner_GetGunnerState");
static_assert(offsetof(Gunner_GetGunnerState, _sub_gun) == 0x000000, "Member 'Gunner_GetGunnerState::_sub_gun' has a wrong offset!");
static_assert(offsetof(Gunner_GetGunnerState, ReturnValue) == 0x000004, "Member 'Gunner_GetGunnerState::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.GetTargetingPoint
// 0x0020 (0x0020 - 0x0000)
struct Gunner_GetTargetingPoint final
{
public:
	bool                                          _for_aiming_shot;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    _part;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2325[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gunner_GetTargetingPoint) == 0x000008, "Wrong alignment on Gunner_GetTargetingPoint");
static_assert(sizeof(Gunner_GetTargetingPoint) == 0x000020, "Wrong size on Gunner_GetTargetingPoint");
static_assert(offsetof(Gunner_GetTargetingPoint, _for_aiming_shot) == 0x000000, "Member 'Gunner_GetTargetingPoint::_for_aiming_shot' has a wrong offset!");
static_assert(offsetof(Gunner_GetTargetingPoint, _part) == 0x000001, "Member 'Gunner_GetTargetingPoint::_part' has a wrong offset!");
static_assert(offsetof(Gunner_GetTargetingPoint, ReturnValue) == 0x000008, "Member 'Gunner_GetTargetingPoint::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.OnBeReady
// 0x0002 (0x0002 - 0x0000)
struct Gunner_OnBeReady final
{
public:
	bool                                          _sub_gun;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gunner_OnBeReady) == 0x000001, "Wrong alignment on Gunner_OnBeReady");
static_assert(sizeof(Gunner_OnBeReady) == 0x000002, "Wrong size on Gunner_OnBeReady");
static_assert(offsetof(Gunner_OnBeReady, _sub_gun) == 0x000000, "Member 'Gunner_OnBeReady::_sub_gun' has a wrong offset!");
static_assert(offsetof(Gunner_OnBeReady, ReturnValue) == 0x000001, "Member 'Gunner_OnBeReady::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.OnExtraJob
// 0x000C (0x000C - 0x0000)
struct Gunner_OnExtraJob final
{
public:
	bool                                          _sub_gun;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2326[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _extra_job_id;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2327[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Gunner_OnExtraJob) == 0x000004, "Wrong alignment on Gunner_OnExtraJob");
static_assert(sizeof(Gunner_OnExtraJob) == 0x00000C, "Wrong size on Gunner_OnExtraJob");
static_assert(offsetof(Gunner_OnExtraJob, _sub_gun) == 0x000000, "Member 'Gunner_OnExtraJob::_sub_gun' has a wrong offset!");
static_assert(offsetof(Gunner_OnExtraJob, _extra_job_id) == 0x000004, "Member 'Gunner_OnExtraJob::_extra_job_id' has a wrong offset!");
static_assert(offsetof(Gunner_OnExtraJob, ReturnValue) == 0x000008, "Member 'Gunner_OnExtraJob::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.OnFireOneShot
// 0x0038 (0x0038 - 0x0000)
struct Gunner_OnFireOneShot final
{
public:
	bool                                          _sub_gun;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2328[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FShot                                  _shot;                                             // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2329[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Gunner_OnFireOneShot) == 0x000008, "Wrong alignment on Gunner_OnFireOneShot");
static_assert(sizeof(Gunner_OnFireOneShot) == 0x000038, "Wrong size on Gunner_OnFireOneShot");
static_assert(offsetof(Gunner_OnFireOneShot, _sub_gun) == 0x000000, "Member 'Gunner_OnFireOneShot::_sub_gun' has a wrong offset!");
static_assert(offsetof(Gunner_OnFireOneShot, _shot) == 0x000008, "Member 'Gunner_OnFireOneShot::_shot' has a wrong offset!");
static_assert(offsetof(Gunner_OnFireOneShot, ReturnValue) == 0x000030, "Member 'Gunner_OnFireOneShot::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.OnLoadBullet
// 0x0002 (0x0002 - 0x0000)
struct Gunner_OnLoadBullet final
{
public:
	bool                                          _sub_gun;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gunner_OnLoadBullet) == 0x000001, "Wrong alignment on Gunner_OnLoadBullet");
static_assert(sizeof(Gunner_OnLoadBullet) == 0x000002, "Wrong size on Gunner_OnLoadBullet");
static_assert(offsetof(Gunner_OnLoadBullet, _sub_gun) == 0x000000, "Member 'Gunner_OnLoadBullet::_sub_gun' has a wrong offset!");
static_assert(offsetof(Gunner_OnLoadBullet, ReturnValue) == 0x000001, "Member 'Gunner_OnLoadBullet::ReturnValue' has a wrong offset!");

// Function Stigma.Gunner.OnLoadMagazine
// 0x0002 (0x0002 - 0x0000)
struct Gunner_OnLoadMagazine final
{
public:
	bool                                          _sub_gun;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gunner_OnLoadMagazine) == 0x000001, "Wrong alignment on Gunner_OnLoadMagazine");
static_assert(sizeof(Gunner_OnLoadMagazine) == 0x000002, "Wrong size on Gunner_OnLoadMagazine");
static_assert(offsetof(Gunner_OnLoadMagazine, _sub_gun) == 0x000000, "Member 'Gunner_OnLoadMagazine::_sub_gun' has a wrong offset!");
static_assert(offsetof(Gunner_OnLoadMagazine, ReturnValue) == 0x000001, "Member 'Gunner_OnLoadMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.GoldBox.DriveWidget
// 0x0004 (0x0004 - 0x0000)
struct GoldBox_DriveWidget final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_DriveWidget) == 0x000004, "Wrong alignment on GoldBox_DriveWidget");
static_assert(sizeof(GoldBox_DriveWidget) == 0x000004, "Wrong size on GoldBox_DriveWidget");
static_assert(offsetof(GoldBox_DriveWidget, _delta) == 0x000000, "Member 'GoldBox_DriveWidget::_delta' has a wrong offset!");

// Function Stigma.GoldBox.Setter_BoxType
// 0x0001 (0x0001 - 0x0000)
struct GoldBox_Setter_BoxType final
{
public:
	EGoldBoxType                                  _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_Setter_BoxType) == 0x000001, "Wrong alignment on GoldBox_Setter_BoxType");
static_assert(sizeof(GoldBox_Setter_BoxType) == 0x000001, "Wrong size on GoldBox_Setter_BoxType");
static_assert(offsetof(GoldBox_Setter_BoxType, _type) == 0x000000, "Member 'GoldBox_Setter_BoxType::_type' has a wrong offset!");

// Function Stigma.GoldBox.ShowDelayParticle
// 0x0001 (0x0001 - 0x0000)
struct GoldBox_ShowDelayParticle final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_ShowDelayParticle) == 0x000001, "Wrong alignment on GoldBox_ShowDelayParticle");
static_assert(sizeof(GoldBox_ShowDelayParticle) == 0x000001, "Wrong size on GoldBox_ShowDelayParticle");
static_assert(offsetof(GoldBox_ShowDelayParticle, _show) == 0x000000, "Member 'GoldBox_ShowDelayParticle::_show' has a wrong offset!");

// Function Stigma.GoldBox.GetDelayProgressRate
// 0x0004 (0x0004 - 0x0000)
struct GoldBox_GetDelayProgressRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_GetDelayProgressRate) == 0x000004, "Wrong alignment on GoldBox_GetDelayProgressRate");
static_assert(sizeof(GoldBox_GetDelayProgressRate) == 0x000004, "Wrong size on GoldBox_GetDelayProgressRate");
static_assert(offsetof(GoldBox_GetDelayProgressRate, ReturnValue) == 0x000000, "Member 'GoldBox_GetDelayProgressRate::ReturnValue' has a wrong offset!");

// Function Stigma.GoldBox.GetGoldBoxConfig
// 0x0078 (0x0078 - 0x0000)
struct GoldBox_GetGoldBoxConfig final
{
public:
	struct FGoldBoxConfig                         ReturnValue;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_GetGoldBoxConfig) == 0x000008, "Wrong alignment on GoldBox_GetGoldBoxConfig");
static_assert(sizeof(GoldBox_GetGoldBoxConfig) == 0x000078, "Wrong size on GoldBox_GetGoldBoxConfig");
static_assert(offsetof(GoldBox_GetGoldBoxConfig, ReturnValue) == 0x000000, "Member 'GoldBox_GetGoldBoxConfig::ReturnValue' has a wrong offset!");

// Function Stigma.GoldBox.GetGoldBoxType
// 0x0001 (0x0001 - 0x0000)
struct GoldBox_GetGoldBoxType final
{
public:
	EGoldBoxType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_GetGoldBoxType) == 0x000001, "Wrong alignment on GoldBox_GetGoldBoxType");
static_assert(sizeof(GoldBox_GetGoldBoxType) == 0x000001, "Wrong size on GoldBox_GetGoldBoxType");
static_assert(offsetof(GoldBox_GetGoldBoxType, ReturnValue) == 0x000000, "Member 'GoldBox_GetGoldBoxType::ReturnValue' has a wrong offset!");

// Function Stigma.GoldBox.GetGoldValue
// 0x0004 (0x0004 - 0x0000)
struct GoldBox_GetGoldValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_GetGoldValue) == 0x000004, "Wrong alignment on GoldBox_GetGoldValue");
static_assert(sizeof(GoldBox_GetGoldValue) == 0x000004, "Wrong size on GoldBox_GetGoldValue");
static_assert(offsetof(GoldBox_GetGoldValue, ReturnValue) == 0x000000, "Member 'GoldBox_GetGoldValue::ReturnValue' has a wrong offset!");

// Function Stigma.GoldBox.IsOnDelay
// 0x0001 (0x0001 - 0x0000)
struct GoldBox_IsOnDelay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoldBox_IsOnDelay) == 0x000001, "Wrong alignment on GoldBox_IsOnDelay");
static_assert(sizeof(GoldBox_IsOnDelay) == 0x000001, "Wrong size on GoldBox_IsOnDelay");
static_assert(offsetof(GoldBox_IsOnDelay, ReturnValue) == 0x000000, "Member 'GoldBox_IsOnDelay::ReturnValue' has a wrong offset!");

// Function Stigma.GoToWidgetDetailer.Init
// 0x0018 (0x0018 - 0x0000)
struct GoToWidgetDetailer_Init final
{
public:
	class UGoToWidget*                            _goto_widget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         _detailer_params;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoToWidgetDetailer_Init) == 0x000008, "Wrong alignment on GoToWidgetDetailer_Init");
static_assert(sizeof(GoToWidgetDetailer_Init) == 0x000018, "Wrong size on GoToWidgetDetailer_Init");
static_assert(offsetof(GoToWidgetDetailer_Init, _goto_widget) == 0x000000, "Member 'GoToWidgetDetailer_Init::_goto_widget' has a wrong offset!");
static_assert(offsetof(GoToWidgetDetailer_Init, _detailer_params) == 0x000008, "Member 'GoToWidgetDetailer_Init::_detailer_params' has a wrong offset!");

// Function Stigma.GoToWidgetDetailer.PlayDetailer
// 0x0008 (0x0008 - 0x0000)
struct GoToWidgetDetailer_PlayDetailer final
{
public:
	class UPreviewableWidget*                     _target_widget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoToWidgetDetailer_PlayDetailer) == 0x000008, "Wrong alignment on GoToWidgetDetailer_PlayDetailer");
static_assert(sizeof(GoToWidgetDetailer_PlayDetailer) == 0x000008, "Wrong size on GoToWidgetDetailer_PlayDetailer");
static_assert(offsetof(GoToWidgetDetailer_PlayDetailer, _target_widget) == 0x000000, "Member 'GoToWidgetDetailer_PlayDetailer::_target_widget' has a wrong offset!");

// Function Stigma.GunBase.ALL_FireAShot
// 0x0001 (0x0001 - 0x0000)
struct GunBase_ALL_FireAShot final
{
public:
	EGunFeedback                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_ALL_FireAShot) == 0x000001, "Wrong alignment on GunBase_ALL_FireAShot");
static_assert(sizeof(GunBase_ALL_FireAShot) == 0x000001, "Wrong size on GunBase_ALL_FireAShot");
static_assert(offsetof(GunBase_ALL_FireAShot, ReturnValue) == 0x000000, "Member 'GunBase_ALL_FireAShot::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetDefaultMagazineValue
// 0x0001 (0x0001 - 0x0000)
struct GunBase_GetDefaultMagazineValue final
{
public:
	struct FMagazine                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetDefaultMagazineValue) == 0x000001, "Wrong alignment on GunBase_GetDefaultMagazineValue");
static_assert(sizeof(GunBase_GetDefaultMagazineValue) == 0x000001, "Wrong size on GunBase_GetDefaultMagazineValue");
static_assert(offsetof(GunBase_GetDefaultMagazineValue, ReturnValue) == 0x000000, "Member 'GunBase_GetDefaultMagazineValue::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.OnFire
// 0x0001 (0x0001 - 0x0000)
struct GunBase_OnFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_OnFire) == 0x000001, "Wrong alignment on GunBase_OnFire");
static_assert(sizeof(GunBase_OnFire) == 0x000001, "Wrong size on GunBase_OnFire");
static_assert(offsetof(GunBase_OnFire, ReturnValue) == 0x000000, "Member 'GunBase_OnFire::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.OnLoadBullet
// 0x0001 (0x0001 - 0x0000)
struct GunBase_OnLoadBullet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_OnLoadBullet) == 0x000001, "Wrong alignment on GunBase_OnLoadBullet");
static_assert(sizeof(GunBase_OnLoadBullet) == 0x000001, "Wrong size on GunBase_OnLoadBullet");
static_assert(offsetof(GunBase_OnLoadBullet, ReturnValue) == 0x000000, "Member 'GunBase_OnLoadBullet::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.OnLoadMagazine
// 0x0001 (0x0001 - 0x0000)
struct GunBase_OnLoadMagazine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_OnLoadMagazine) == 0x000001, "Wrong alignment on GunBase_OnLoadMagazine");
static_assert(sizeof(GunBase_OnLoadMagazine) == 0x000001, "Wrong size on GunBase_OnLoadMagazine");
static_assert(offsetof(GunBase_OnLoadMagazine, ReturnValue) == 0x000000, "Member 'GunBase_OnLoadMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.RPC_SERVER_DEBUG_ChangeGunPart
// 0x0018 (0x0018 - 0x0000)
struct GunBase_RPC_SERVER_DEBUG_ChangeGunPart final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _slot;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunBase_RPC_SERVER_DEBUG_ChangeGunPart) == 0x000008, "Wrong alignment on GunBase_RPC_SERVER_DEBUG_ChangeGunPart");
static_assert(sizeof(GunBase_RPC_SERVER_DEBUG_ChangeGunPart) == 0x000018, "Wrong size on GunBase_RPC_SERVER_DEBUG_ChangeGunPart");
static_assert(offsetof(GunBase_RPC_SERVER_DEBUG_ChangeGunPart, _item_id) == 0x000000, "Member 'GunBase_RPC_SERVER_DEBUG_ChangeGunPart::_item_id' has a wrong offset!");
static_assert(offsetof(GunBase_RPC_SERVER_DEBUG_ChangeGunPart, _slot) == 0x000010, "Member 'GunBase_RPC_SERVER_DEBUG_ChangeGunPart::_slot' has a wrong offset!");

// Function Stigma.GunBase.SERVER_CalcDamage
// 0x0020 (0x0020 - 0x0000)
struct GunBase_SERVER_CalcDamage final
{
public:
	ECharaAction                                  _involving_action;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _distance_in_cm;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _apply_damage_rate;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageDef                             ReturnValue;                                       // 0x000C(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_SERVER_CalcDamage) == 0x000004, "Wrong alignment on GunBase_SERVER_CalcDamage");
static_assert(sizeof(GunBase_SERVER_CalcDamage) == 0x000020, "Wrong size on GunBase_SERVER_CalcDamage");
static_assert(offsetof(GunBase_SERVER_CalcDamage, _involving_action) == 0x000000, "Member 'GunBase_SERVER_CalcDamage::_involving_action' has a wrong offset!");
static_assert(offsetof(GunBase_SERVER_CalcDamage, _distance_in_cm) == 0x000004, "Member 'GunBase_SERVER_CalcDamage::_distance_in_cm' has a wrong offset!");
static_assert(offsetof(GunBase_SERVER_CalcDamage, _apply_damage_rate) == 0x000008, "Member 'GunBase_SERVER_CalcDamage::_apply_damage_rate' has a wrong offset!");
static_assert(offsetof(GunBase_SERVER_CalcDamage, ReturnValue) == 0x00000C, "Member 'GunBase_SERVER_CalcDamage::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.SERVER_CancelLoadMagazine
// 0x0001 (0x0001 - 0x0000)
struct GunBase_SERVER_CancelLoadMagazine final
{
public:
	struct FMagazine                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_SERVER_CancelLoadMagazine) == 0x000001, "Wrong alignment on GunBase_SERVER_CancelLoadMagazine");
static_assert(sizeof(GunBase_SERVER_CancelLoadMagazine) == 0x000001, "Wrong size on GunBase_SERVER_CancelLoadMagazine");
static_assert(offsetof(GunBase_SERVER_CancelLoadMagazine, ReturnValue) == 0x000000, "Member 'GunBase_SERVER_CancelLoadMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.SERVER_SetBulletTip
// 0x0001 (0x0001 - 0x0000)
struct GunBase_SERVER_SetBulletTip final
{
public:
	EBulletTip                                    _tip_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_SERVER_SetBulletTip) == 0x000001, "Wrong alignment on GunBase_SERVER_SetBulletTip");
static_assert(sizeof(GunBase_SERVER_SetBulletTip) == 0x000001, "Wrong size on GunBase_SERVER_SetBulletTip");
static_assert(offsetof(GunBase_SERVER_SetBulletTip, _tip_type) == 0x000000, "Member 'GunBase_SERVER_SetBulletTip::_tip_type' has a wrong offset!");

// Function Stigma.GunBase.SERVER_SetGunParts
// 0x0018 (0x0018 - 0x0000)
struct GunBase_SERVER_SetGunParts final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _slot;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunBase_SERVER_SetGunParts) == 0x000008, "Wrong alignment on GunBase_SERVER_SetGunParts");
static_assert(sizeof(GunBase_SERVER_SetGunParts) == 0x000018, "Wrong size on GunBase_SERVER_SetGunParts");
static_assert(offsetof(GunBase_SERVER_SetGunParts, _id) == 0x000000, "Member 'GunBase_SERVER_SetGunParts::_id' has a wrong offset!");
static_assert(offsetof(GunBase_SERVER_SetGunParts, _slot) == 0x000010, "Member 'GunBase_SERVER_SetGunParts::_slot' has a wrong offset!");

// Function Stigma.GunBase.SERVER_SetGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct GunBase_SERVER_SetGunSpec final
{
public:
	struct FGunSpec                               _gun_spec;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_SERVER_SetGunSpec) == 0x000008, "Wrong alignment on GunBase_SERVER_SetGunSpec");
static_assert(sizeof(GunBase_SERVER_SetGunSpec) == 0x0000D0, "Wrong size on GunBase_SERVER_SetGunSpec");
static_assert(offsetof(GunBase_SERVER_SetGunSpec, _gun_spec) == 0x000000, "Member 'GunBase_SERVER_SetGunSpec::_gun_spec' has a wrong offset!");

// Function Stigma.GunBase.SERVER_StartLoadMagazine
// 0x0002 (0x0002 - 0x0000)
struct GunBase_SERVER_StartLoadMagazine final
{
public:
	struct FMagazine                              _new_mag;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMagazine                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_SERVER_StartLoadMagazine) == 0x000001, "Wrong alignment on GunBase_SERVER_StartLoadMagazine");
static_assert(sizeof(GunBase_SERVER_StartLoadMagazine) == 0x000002, "Wrong size on GunBase_SERVER_StartLoadMagazine");
static_assert(offsetof(GunBase_SERVER_StartLoadMagazine, _new_mag) == 0x000000, "Member 'GunBase_SERVER_StartLoadMagazine::_new_mag' has a wrong offset!");
static_assert(offsetof(GunBase_SERVER_StartLoadMagazine, ReturnValue) == 0x000001, "Member 'GunBase_SERVER_StartLoadMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.Setter_EnableLaserSight
// 0x0001 (0x0001 - 0x0000)
struct GunBase_Setter_EnableLaserSight final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_Setter_EnableLaserSight) == 0x000001, "Wrong alignment on GunBase_Setter_EnableLaserSight");
static_assert(sizeof(GunBase_Setter_EnableLaserSight) == 0x000001, "Wrong size on GunBase_Setter_EnableLaserSight");
static_assert(offsetof(GunBase_Setter_EnableLaserSight, _enable) == 0x000000, "Member 'GunBase_Setter_EnableLaserSight::_enable' has a wrong offset!");

// Function Stigma.GunBase.Setter_GunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct GunBase_Setter_GunSpec final
{
public:
	struct FGunSpec                               _gun_spec;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_Setter_GunSpec) == 0x000008, "Wrong alignment on GunBase_Setter_GunSpec");
static_assert(sizeof(GunBase_Setter_GunSpec) == 0x0000D0, "Wrong size on GunBase_Setter_GunSpec");
static_assert(offsetof(GunBase_Setter_GunSpec, _gun_spec) == 0x000000, "Member 'GunBase_Setter_GunSpec::_gun_spec' has a wrong offset!");

// Function Stigma.GunBase.Setter_GunState
// 0x0001 (0x0001 - 0x0000)
struct GunBase_Setter_GunState final
{
public:
	EGunState                                     _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_Setter_GunState) == 0x000001, "Wrong alignment on GunBase_Setter_GunState");
static_assert(sizeof(GunBase_Setter_GunState) == 0x000001, "Wrong size on GunBase_Setter_GunState");
static_assert(offsetof(GunBase_Setter_GunState, _state) == 0x000000, "Member 'GunBase_Setter_GunState::_state' has a wrong offset!");

// Function Stigma.GunBase.GetBodyConfig
// 0x0368 (0x0368 - 0x0000)
struct GunBase_GetBodyConfig final
{
public:
	struct FGunEntry_Body                         ReturnValue;                                       // 0x0000(0x0368)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetBodyConfig) == 0x000008, "Wrong alignment on GunBase_GetBodyConfig");
static_assert(sizeof(GunBase_GetBodyConfig) == 0x000368, "Wrong size on GunBase_GetBodyConfig");
static_assert(offsetof(GunBase_GetBodyConfig, ReturnValue) == 0x000000, "Member 'GunBase_GetBodyConfig::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetBulletEffectType
// 0x0001 (0x0001 - 0x0000)
struct GunBase_GetBulletEffectType final
{
public:
	EBulletEffectScaleType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetBulletEffectType) == 0x000001, "Wrong alignment on GunBase_GetBulletEffectType");
static_assert(sizeof(GunBase_GetBulletEffectType) == 0x000001, "Wrong size on GunBase_GetBulletEffectType");
static_assert(offsetof(GunBase_GetBulletEffectType, ReturnValue) == 0x000000, "Member 'GunBase_GetBulletEffectType::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetBulletType
// 0x0001 (0x0001 - 0x0000)
struct GunBase_GetBulletType final
{
public:
	EBulletType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetBulletType) == 0x000001, "Wrong alignment on GunBase_GetBulletType");
static_assert(sizeof(GunBase_GetBulletType) == 0x000001, "Wrong size on GunBase_GetBulletType");
static_assert(offsetof(GunBase_GetBulletType, ReturnValue) == 0x000000, "Member 'GunBase_GetBulletType::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetCalculatedMagazineCapacity
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetCalculatedMagazineCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetCalculatedMagazineCapacity) == 0x000004, "Wrong alignment on GunBase_GetCalculatedMagazineCapacity");
static_assert(sizeof(GunBase_GetCalculatedMagazineCapacity) == 0x000004, "Wrong size on GunBase_GetCalculatedMagazineCapacity");
static_assert(offsetof(GunBase_GetCalculatedMagazineCapacity, ReturnValue) == 0x000000, "Member 'GunBase_GetCalculatedMagazineCapacity::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_AutoFireCount
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_AutoFireCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_AutoFireCount) == 0x000004, "Wrong alignment on GunBase_GetConfig_AutoFireCount");
static_assert(sizeof(GunBase_GetConfig_AutoFireCount) == 0x000004, "Wrong size on GunBase_GetConfig_AutoFireCount");
static_assert(offsetof(GunBase_GetConfig_AutoFireCount, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_AutoFireCount::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_BulletPerShot
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_BulletPerShot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_BulletPerShot) == 0x000004, "Wrong alignment on GunBase_GetConfig_BulletPerShot");
static_assert(sizeof(GunBase_GetConfig_BulletPerShot) == 0x000004, "Wrong size on GunBase_GetConfig_BulletPerShot");
static_assert(offsetof(GunBase_GetConfig_BulletPerShot, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_BulletPerShot::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_BulletTip
// 0x0098 (0x0098 - 0x0000)
struct GunBase_GetConfig_BulletTip final
{
public:
	struct FBulletTipDefine                       ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_BulletTip) == 0x000008, "Wrong alignment on GunBase_GetConfig_BulletTip");
static_assert(sizeof(GunBase_GetConfig_BulletTip) == 0x000098, "Wrong size on GunBase_GetConfig_BulletTip");
static_assert(offsetof(GunBase_GetConfig_BulletTip, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_BulletTip::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_FireDelay
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_FireDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_FireDelay) == 0x000004, "Wrong alignment on GunBase_GetConfig_FireDelay");
static_assert(sizeof(GunBase_GetConfig_FireDelay) == 0x000004, "Wrong size on GunBase_GetConfig_FireDelay");
static_assert(offsetof(GunBase_GetConfig_FireDelay, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_FireDelay::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_MagazineCapacity
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_MagazineCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_MagazineCapacity) == 0x000004, "Wrong alignment on GunBase_GetConfig_MagazineCapacity");
static_assert(sizeof(GunBase_GetConfig_MagazineCapacity) == 0x000004, "Wrong size on GunBase_GetConfig_MagazineCapacity");
static_assert(offsetof(GunBase_GetConfig_MagazineCapacity, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_MagazineCapacity::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_MaxMagazine
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_MaxMagazine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_MaxMagazine) == 0x000004, "Wrong alignment on GunBase_GetConfig_MaxMagazine");
static_assert(sizeof(GunBase_GetConfig_MaxMagazine) == 0x000004, "Wrong size on GunBase_GetConfig_MaxMagazine");
static_assert(offsetof(GunBase_GetConfig_MaxMagazine, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_MaxMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_ProjectileCountPerBullet
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_ProjectileCountPerBullet final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_ProjectileCountPerBullet) == 0x000004, "Wrong alignment on GunBase_GetConfig_ProjectileCountPerBullet");
static_assert(sizeof(GunBase_GetConfig_ProjectileCountPerBullet) == 0x000004, "Wrong size on GunBase_GetConfig_ProjectileCountPerBullet");
static_assert(offsetof(GunBase_GetConfig_ProjectileCountPerBullet, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_ProjectileCountPerBullet::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetConfig_Range
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetConfig_Range final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetConfig_Range) == 0x000004, "Wrong alignment on GunBase_GetConfig_Range");
static_assert(sizeof(GunBase_GetConfig_Range) == 0x000004, "Wrong size on GunBase_GetConfig_Range");
static_assert(offsetof(GunBase_GetConfig_Range, ReturnValue) == 0x000000, "Member 'GunBase_GetConfig_Range::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetCurrentReloadingMagaine
// 0x0001 (0x0001 - 0x0000)
struct GunBase_GetCurrentReloadingMagaine final
{
public:
	struct FMagazine                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetCurrentReloadingMagaine) == 0x000001, "Wrong alignment on GunBase_GetCurrentReloadingMagaine");
static_assert(sizeof(GunBase_GetCurrentReloadingMagaine) == 0x000001, "Wrong size on GunBase_GetCurrentReloadingMagaine");
static_assert(offsetof(GunBase_GetCurrentReloadingMagaine, ReturnValue) == 0x000000, "Member 'GunBase_GetCurrentReloadingMagaine::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetFeedback
// 0x0008 (0x0008 - 0x0000)
struct GunBase_GetFeedback final
{
public:
	float                                         _tolerant_delay;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunFeedback                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233E[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GunBase_GetFeedback) == 0x000004, "Wrong alignment on GunBase_GetFeedback");
static_assert(sizeof(GunBase_GetFeedback) == 0x000008, "Wrong size on GunBase_GetFeedback");
static_assert(offsetof(GunBase_GetFeedback, _tolerant_delay) == 0x000000, "Member 'GunBase_GetFeedback::_tolerant_delay' has a wrong offset!");
static_assert(offsetof(GunBase_GetFeedback, ReturnValue) == 0x000004, "Member 'GunBase_GetFeedback::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetFireCount
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetFireCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetFireCount) == 0x000004, "Wrong alignment on GunBase_GetFireCount");
static_assert(sizeof(GunBase_GetFireCount) == 0x000004, "Wrong size on GunBase_GetFireCount");
static_assert(offsetof(GunBase_GetFireCount, ReturnValue) == 0x000000, "Member 'GunBase_GetFireCount::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetFireDirection
// 0x0018 (0x0018 - 0x0000)
struct GunBase_GetFireDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetFireDirection) == 0x000008, "Wrong alignment on GunBase_GetFireDirection");
static_assert(sizeof(GunBase_GetFireDirection) == 0x000018, "Wrong size on GunBase_GetFireDirection");
static_assert(offsetof(GunBase_GetFireDirection, ReturnValue) == 0x000000, "Member 'GunBase_GetFireDirection::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetFireLocation
// 0x0018 (0x0018 - 0x0000)
struct GunBase_GetFireLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetFireLocation) == 0x000008, "Wrong alignment on GunBase_GetFireLocation");
static_assert(sizeof(GunBase_GetFireLocation) == 0x000018, "Wrong size on GunBase_GetFireLocation");
static_assert(offsetof(GunBase_GetFireLocation, ReturnValue) == 0x000000, "Member 'GunBase_GetFireLocation::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunAttributeFireSys
// 0x0048 (0x0048 - 0x0000)
struct GunBase_GetGunAttributeFireSys final
{
public:
	struct FGunAttribute_FireSystem               ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunAttributeFireSys) == 0x000004, "Wrong alignment on GunBase_GetGunAttributeFireSys");
static_assert(sizeof(GunBase_GetGunAttributeFireSys) == 0x000048, "Wrong size on GunBase_GetGunAttributeFireSys");
static_assert(offsetof(GunBase_GetGunAttributeFireSys, ReturnValue) == 0x000000, "Member 'GunBase_GetGunAttributeFireSys::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunAttributes
// 0x0024 (0x0024 - 0x0000)
struct GunBase_GetGunAttributes final
{
public:
	struct FGunAttribute_Common                   ReturnValue;                                       // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunAttributes) == 0x000004, "Wrong alignment on GunBase_GetGunAttributes");
static_assert(sizeof(GunBase_GetGunAttributes) == 0x000024, "Wrong size on GunBase_GetGunAttributes");
static_assert(offsetof(GunBase_GetGunAttributes, ReturnValue) == 0x000000, "Member 'GunBase_GetGunAttributes::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunControlPower
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetGunControlPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunControlPower) == 0x000004, "Wrong alignment on GunBase_GetGunControlPower");
static_assert(sizeof(GunBase_GetGunControlPower) == 0x000004, "Wrong size on GunBase_GetGunControlPower");
static_assert(offsetof(GunBase_GetGunControlPower, ReturnValue) == 0x000000, "Member 'GunBase_GetGunControlPower::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunMainEntry
// 0x0350 (0x0350 - 0x0000)
struct GunBase_GetGunMainEntry final
{
public:
	struct FGunEntry_Main                         ReturnValue;                                       // 0x0000(0x0350)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunMainEntry) == 0x000008, "Wrong alignment on GunBase_GetGunMainEntry");
static_assert(sizeof(GunBase_GetGunMainEntry) == 0x000350, "Wrong size on GunBase_GetGunMainEntry");
static_assert(offsetof(GunBase_GetGunMainEntry, ReturnValue) == 0x000000, "Member 'GunBase_GetGunMainEntry::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunSightEntry
// 0x0280 (0x0280 - 0x0000)
struct GunBase_GetGunSightEntry final
{
public:
	struct FGunEntry_Sight                        ReturnValue;                                       // 0x0000(0x0280)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunSightEntry) == 0x000008, "Wrong alignment on GunBase_GetGunSightEntry");
static_assert(sizeof(GunBase_GetGunSightEntry) == 0x000280, "Wrong size on GunBase_GetGunSightEntry");
static_assert(offsetof(GunBase_GetGunSightEntry, ReturnValue) == 0x000000, "Member 'GunBase_GetGunSightEntry::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunSlideEntry
// 0x01E0 (0x01E0 - 0x0000)
struct GunBase_GetGunSlideEntry final
{
public:
	struct FGunEntry_Slide                        ReturnValue;                                       // 0x0000(0x01E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunSlideEntry) == 0x000008, "Wrong alignment on GunBase_GetGunSlideEntry");
static_assert(sizeof(GunBase_GetGunSlideEntry) == 0x0001E0, "Wrong size on GunBase_GetGunSlideEntry");
static_assert(offsetof(GunBase_GetGunSlideEntry, ReturnValue) == 0x000000, "Member 'GunBase_GetGunSlideEntry::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetGunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct GunBase_GetGunSpec final
{
public:
	struct FGunSpec                               ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetGunSpec) == 0x000008, "Wrong alignment on GunBase_GetGunSpec");
static_assert(sizeof(GunBase_GetGunSpec) == 0x0000D0, "Wrong size on GunBase_GetGunSpec");
static_assert(offsetof(GunBase_GetGunSpec, ReturnValue) == 0x000000, "Member 'GunBase_GetGunSpec::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetLoadedBulletCount
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetLoadedBulletCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetLoadedBulletCount) == 0x000004, "Wrong alignment on GunBase_GetLoadedBulletCount");
static_assert(sizeof(GunBase_GetLoadedBulletCount) == 0x000004, "Wrong size on GunBase_GetLoadedBulletCount");
static_assert(offsetof(GunBase_GetLoadedBulletCount, ReturnValue) == 0x000000, "Member 'GunBase_GetLoadedBulletCount::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetRemainAutoFireCount
// 0x0004 (0x0004 - 0x0000)
struct GunBase_GetRemainAutoFireCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetRemainAutoFireCount) == 0x000004, "Wrong alignment on GunBase_GetRemainAutoFireCount");
static_assert(sizeof(GunBase_GetRemainAutoFireCount) == 0x000004, "Wrong size on GunBase_GetRemainAutoFireCount");
static_assert(offsetof(GunBase_GetRemainAutoFireCount, ReturnValue) == 0x000000, "Member 'GunBase_GetRemainAutoFireCount::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetScopeLocation
// 0x0020 (0x0020 - 0x0000)
struct GunBase_GetScopeLocation final
{
public:
	bool                                          _for_1pv;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _with_offset;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetScopeLocation) == 0x000008, "Wrong alignment on GunBase_GetScopeLocation");
static_assert(sizeof(GunBase_GetScopeLocation) == 0x000020, "Wrong size on GunBase_GetScopeLocation");
static_assert(offsetof(GunBase_GetScopeLocation, _for_1pv) == 0x000000, "Member 'GunBase_GetScopeLocation::_for_1pv' has a wrong offset!");
static_assert(offsetof(GunBase_GetScopeLocation, _with_offset) == 0x000001, "Member 'GunBase_GetScopeLocation::_with_offset' has a wrong offset!");
static_assert(offsetof(GunBase_GetScopeLocation, ReturnValue) == 0x000008, "Member 'GunBase_GetScopeLocation::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.GetState
// 0x0001 (0x0001 - 0x0000)
struct GunBase_GetState final
{
public:
	EGunState                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_GetState) == 0x000001, "Wrong alignment on GunBase_GetState");
static_assert(sizeof(GunBase_GetState) == 0x000001, "Wrong size on GunBase_GetState");
static_assert(offsetof(GunBase_GetState, ReturnValue) == 0x000000, "Member 'GunBase_GetState::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.IsBulletLoaded
// 0x0001 (0x0001 - 0x0000)
struct GunBase_IsBulletLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_IsBulletLoaded) == 0x000001, "Wrong alignment on GunBase_IsBulletLoaded");
static_assert(sizeof(GunBase_IsBulletLoaded) == 0x000001, "Wrong size on GunBase_IsBulletLoaded");
static_assert(offsetof(GunBase_IsBulletLoaded, ReturnValue) == 0x000000, "Member 'GunBase_IsBulletLoaded::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.IsBurstFire
// 0x0001 (0x0001 - 0x0000)
struct GunBase_IsBurstFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_IsBurstFire) == 0x000001, "Wrong alignment on GunBase_IsBurstFire");
static_assert(sizeof(GunBase_IsBurstFire) == 0x000001, "Wrong size on GunBase_IsBurstFire");
static_assert(offsetof(GunBase_IsBurstFire, ReturnValue) == 0x000000, "Member 'GunBase_IsBurstFire::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.IsFullAutoFire
// 0x0001 (0x0001 - 0x0000)
struct GunBase_IsFullAutoFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_IsFullAutoFire) == 0x000001, "Wrong alignment on GunBase_IsFullAutoFire");
static_assert(sizeof(GunBase_IsFullAutoFire) == 0x000001, "Wrong size on GunBase_IsFullAutoFire");
static_assert(offsetof(GunBase_IsFullAutoFire, ReturnValue) == 0x000000, "Member 'GunBase_IsFullAutoFire::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.IsLoadingBullet
// 0x0001 (0x0001 - 0x0000)
struct GunBase_IsLoadingBullet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_IsLoadingBullet) == 0x000001, "Wrong alignment on GunBase_IsLoadingBullet");
static_assert(sizeof(GunBase_IsLoadingBullet) == 0x000001, "Wrong size on GunBase_IsLoadingBullet");
static_assert(offsetof(GunBase_IsLoadingBullet, ReturnValue) == 0x000000, "Member 'GunBase_IsLoadingBullet::ReturnValue' has a wrong offset!");

// Function Stigma.GunBase.IsLoadingMagazine
// 0x0001 (0x0001 - 0x0000)
struct GunBase_IsLoadingMagazine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunBase_IsLoadingMagazine) == 0x000001, "Wrong alignment on GunBase_IsLoadingMagazine");
static_assert(sizeof(GunBase_IsLoadingMagazine) == 0x000001, "Wrong size on GunBase_IsLoadingMagazine");
static_assert(offsetof(GunBase_IsLoadingMagazine, ReturnValue) == 0x000000, "Member 'GunBase_IsLoadingMagazine::ReturnValue' has a wrong offset!");

// Function Stigma.UtilGunBlueprintLibrary.GetPresetName
// 0x00E0 (0x00E0 - 0x0000)
struct UtilGunBlueprintLibrary_GetPresetName final
{
public:
	struct FGunSpec                               _gun_spec;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00D0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilGunBlueprintLibrary_GetPresetName) == 0x000008, "Wrong alignment on UtilGunBlueprintLibrary_GetPresetName");
static_assert(sizeof(UtilGunBlueprintLibrary_GetPresetName) == 0x0000E0, "Wrong size on UtilGunBlueprintLibrary_GetPresetName");
static_assert(offsetof(UtilGunBlueprintLibrary_GetPresetName, _gun_spec) == 0x000000, "Member 'UtilGunBlueprintLibrary_GetPresetName::_gun_spec' has a wrong offset!");
static_assert(offsetof(UtilGunBlueprintLibrary_GetPresetName, ReturnValue) == 0x0000D0, "Member 'UtilGunBlueprintLibrary_GetPresetName::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_CartridgeSlot.BindTargetChara
// 0x0008 (0x0008 - 0x0000)
struct HUD_CartridgeSlot_BindTargetChara final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CartridgeSlot_BindTargetChara) == 0x000008, "Wrong alignment on HUD_CartridgeSlot_BindTargetChara");
static_assert(sizeof(HUD_CartridgeSlot_BindTargetChara) == 0x000008, "Wrong size on HUD_CartridgeSlot_BindTargetChara");
static_assert(offsetof(HUD_CartridgeSlot_BindTargetChara, _chara) == 0x000000, "Member 'HUD_CartridgeSlot_BindTargetChara::_chara' has a wrong offset!");

// Function Stigma.HUD_CartridgeSlot.GetFlyBulletClassType
// 0x0008 (0x0008 - 0x0000)
struct HUD_CartridgeSlot_GetFlyBulletClassType final
{
public:
	TSubclassOf<class UHUD_FlyBullet>             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CartridgeSlot_GetFlyBulletClassType) == 0x000008, "Wrong alignment on HUD_CartridgeSlot_GetFlyBulletClassType");
static_assert(sizeof(HUD_CartridgeSlot_GetFlyBulletClassType) == 0x000008, "Wrong size on HUD_CartridgeSlot_GetFlyBulletClassType");
static_assert(offsetof(HUD_CartridgeSlot_GetFlyBulletClassType, ReturnValue) == 0x000000, "Member 'HUD_CartridgeSlot_GetFlyBulletClassType::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_CartridgeSlot.SetBulletCount
// 0x0008 (0x0008 - 0x0000)
struct HUD_CartridgeSlot_SetBulletCount final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_count;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CartridgeSlot_SetBulletCount) == 0x000004, "Wrong alignment on HUD_CartridgeSlot_SetBulletCount");
static_assert(sizeof(HUD_CartridgeSlot_SetBulletCount) == 0x000008, "Wrong size on HUD_CartridgeSlot_SetBulletCount");
static_assert(offsetof(HUD_CartridgeSlot_SetBulletCount, _count) == 0x000000, "Member 'HUD_CartridgeSlot_SetBulletCount::_count' has a wrong offset!");
static_assert(offsetof(HUD_CartridgeSlot_SetBulletCount, _max_count) == 0x000004, "Member 'HUD_CartridgeSlot_SetBulletCount::_max_count' has a wrong offset!");

// Function Stigma.HUD_CommonBase.OnBind
// 0x0001 (0x0001 - 0x0000)
struct HUD_CommonBase_OnBind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_CommonBase_OnBind) == 0x000001, "Wrong alignment on HUD_CommonBase_OnBind");
static_assert(sizeof(HUD_CommonBase_OnBind) == 0x000001, "Wrong size on HUD_CommonBase_OnBind");
static_assert(offsetof(HUD_CommonBase_OnBind, ReturnValue) == 0x000000, "Member 'HUD_CommonBase_OnBind::ReturnValue' has a wrong offset!");

// Function Stigma.HUD_KillLogSlot.SetActionLog_Bounty
// 0x0018 (0x0018 - 0x0000)
struct HUD_KillLogSlot_SetActionLog_Bounty final
{
public:
	struct FActionLog_Bounty                      _bounty_action_log;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogSlot_SetActionLog_Bounty) == 0x000008, "Wrong alignment on HUD_KillLogSlot_SetActionLog_Bounty");
static_assert(sizeof(HUD_KillLogSlot_SetActionLog_Bounty) == 0x000018, "Wrong size on HUD_KillLogSlot_SetActionLog_Bounty");
static_assert(offsetof(HUD_KillLogSlot_SetActionLog_Bounty, _bounty_action_log) == 0x000000, "Member 'HUD_KillLogSlot_SetActionLog_Bounty::_bounty_action_log' has a wrong offset!");

// Function Stigma.HUD_KillLogSlot.SetKillLog
// 0x0028 (0x0028 - 0x0000)
struct HUD_KillLogSlot_SetKillLog final
{
public:
	struct FKillLog                               _kill_log;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogSlot_SetKillLog) == 0x000008, "Wrong alignment on HUD_KillLogSlot_SetKillLog");
static_assert(sizeof(HUD_KillLogSlot_SetKillLog) == 0x000028, "Wrong size on HUD_KillLogSlot_SetKillLog");
static_assert(offsetof(HUD_KillLogSlot_SetKillLog, _kill_log) == 0x000000, "Member 'HUD_KillLogSlot_SetKillLog::_kill_log' has a wrong offset!");

// Function Stigma.HUD_KillLogSlot.SetKillLog_Revive
// 0x0010 (0x0010 - 0x0000)
struct HUD_KillLogSlot_SetKillLog_Revive final
{
public:
	struct FKillLog_ForRevive                     _kill_log_revive;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_KillLogSlot_SetKillLog_Revive) == 0x000008, "Wrong alignment on HUD_KillLogSlot_SetKillLog_Revive");
static_assert(sizeof(HUD_KillLogSlot_SetKillLog_Revive) == 0x000010, "Wrong size on HUD_KillLogSlot_SetKillLog_Revive");
static_assert(offsetof(HUD_KillLogSlot_SetKillLog_Revive, _kill_log_revive) == 0x000000, "Member 'HUD_KillLogSlot_SetKillLog_Revive::_kill_log_revive' has a wrong offset!");

// Function Stigma.HUD_TeamMembers.AssignTeamByOffset
// 0x0008 (0x0008 - 0x0000)
struct HUD_TeamMembers_AssignTeamByOffset final
{
public:
	int32                                         _offset;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_team;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_TeamMembers_AssignTeamByOffset) == 0x000004, "Wrong alignment on HUD_TeamMembers_AssignTeamByOffset");
static_assert(sizeof(HUD_TeamMembers_AssignTeamByOffset) == 0x000008, "Wrong size on HUD_TeamMembers_AssignTeamByOffset");
static_assert(offsetof(HUD_TeamMembers_AssignTeamByOffset, _offset) == 0x000000, "Member 'HUD_TeamMembers_AssignTeamByOffset::_offset' has a wrong offset!");
static_assert(offsetof(HUD_TeamMembers_AssignTeamByOffset, _max_team) == 0x000004, "Member 'HUD_TeamMembers_AssignTeamByOffset::_max_team' has a wrong offset!");

// Function Stigma.HUD_TeamMembers.OnChangeTeam
// 0x0001 (0x0001 - 0x0000)
struct HUD_TeamMembers_OnChangeTeam final
{
public:
	ETeams                                        _new_team;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_TeamMembers_OnChangeTeam) == 0x000001, "Wrong alignment on HUD_TeamMembers_OnChangeTeam");
static_assert(sizeof(HUD_TeamMembers_OnChangeTeam) == 0x000001, "Wrong size on HUD_TeamMembers_OnChangeTeam");
static_assert(offsetof(HUD_TeamMembers_OnChangeTeam, _new_team) == 0x000000, "Member 'HUD_TeamMembers_OnChangeTeam::_new_team' has a wrong offset!");

// Function Stigma.HUD_TeamMembers.OnGetAllPlayerWidgets
// 0x0010 (0x0010 - 0x0000)
struct HUD_TeamMembers_OnGetAllPlayerWidgets final
{
public:
	TArray<class UHUD_PlayerSlot*>                _out_widgets;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_TeamMembers_OnGetAllPlayerWidgets) == 0x000008, "Wrong alignment on HUD_TeamMembers_OnGetAllPlayerWidgets");
static_assert(sizeof(HUD_TeamMembers_OnGetAllPlayerWidgets) == 0x000010, "Wrong size on HUD_TeamMembers_OnGetAllPlayerWidgets");
static_assert(offsetof(HUD_TeamMembers_OnGetAllPlayerWidgets, _out_widgets) == 0x000000, "Member 'HUD_TeamMembers_OnGetAllPlayerWidgets::_out_widgets' has a wrong offset!");

// Function Stigma.HUD_TeamMembers.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct HUD_TeamMembers_SetTeam final
{
public:
	ETeams                                        _new_team;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_TeamMembers_SetTeam) == 0x000001, "Wrong alignment on HUD_TeamMembers_SetTeam");
static_assert(sizeof(HUD_TeamMembers_SetTeam) == 0x000001, "Wrong size on HUD_TeamMembers_SetTeam");
static_assert(offsetof(HUD_TeamMembers_SetTeam, _new_team) == 0x000000, "Member 'HUD_TeamMembers_SetTeam::_new_team' has a wrong offset!");

// Function Stigma.HUD_TeamMembers.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct HUD_TeamMembers_GetTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUD_TeamMembers_GetTeam) == 0x000001, "Wrong alignment on HUD_TeamMembers_GetTeam");
static_assert(sizeof(HUD_TeamMembers_GetTeam) == 0x000001, "Wrong size on HUD_TeamMembers_GetTeam");
static_assert(offsetof(HUD_TeamMembers_GetTeam, ReturnValue) == 0x000000, "Member 'HUD_TeamMembers_GetTeam::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnALL_Interact
// 0x0018 (0x0018 - 0x0000)
struct Interactable_OnALL_Interact final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _key_pressed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2352[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _param;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2353[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Interactable_OnALL_Interact) == 0x000008, "Wrong alignment on Interactable_OnALL_Interact");
static_assert(sizeof(Interactable_OnALL_Interact) == 0x000018, "Wrong size on Interactable_OnALL_Interact");
static_assert(offsetof(Interactable_OnALL_Interact, _involver) == 0x000000, "Member 'Interactable_OnALL_Interact::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnALL_Interact, _key_pressed) == 0x000008, "Member 'Interactable_OnALL_Interact::_key_pressed' has a wrong offset!");
static_assert(offsetof(Interactable_OnALL_Interact, Success) == 0x000009, "Member 'Interactable_OnALL_Interact::Success' has a wrong offset!");
static_assert(offsetof(Interactable_OnALL_Interact, _param) == 0x00000C, "Member 'Interactable_OnALL_Interact::_param' has a wrong offset!");
static_assert(offsetof(Interactable_OnALL_Interact, ReturnValue) == 0x000010, "Member 'Interactable_OnALL_Interact::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnFocus
// 0x0018 (0x0018 - 0x0000)
struct Interactable_OnFocus final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _focus;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2354[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _param;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2355[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Interactable_OnFocus) == 0x000008, "Wrong alignment on Interactable_OnFocus");
static_assert(sizeof(Interactable_OnFocus) == 0x000018, "Wrong size on Interactable_OnFocus");
static_assert(offsetof(Interactable_OnFocus, _involver) == 0x000000, "Member 'Interactable_OnFocus::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnFocus, _focus) == 0x000008, "Member 'Interactable_OnFocus::_focus' has a wrong offset!");
static_assert(offsetof(Interactable_OnFocus, _param) == 0x00000C, "Member 'Interactable_OnFocus::_param' has a wrong offset!");
static_assert(offsetof(Interactable_OnFocus, ReturnValue) == 0x000010, "Member 'Interactable_OnFocus::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnQueryInteractable
// 0x0150 (0x0150 - 0x0000)
struct Interactable_OnQueryInteractable final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             _hit;                                              // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInteractionData                       _out_data;                                         // 0x00F0(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0148(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2356[0x7];                                     // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Interactable_OnQueryInteractable) == 0x000008, "Wrong alignment on Interactable_OnQueryInteractable");
static_assert(sizeof(Interactable_OnQueryInteractable) == 0x000150, "Wrong size on Interactable_OnQueryInteractable");
static_assert(offsetof(Interactable_OnQueryInteractable, _involver) == 0x000000, "Member 'Interactable_OnQueryInteractable::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractable, _hit) == 0x000008, "Member 'Interactable_OnQueryInteractable::_hit' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractable, _out_data) == 0x0000F0, "Member 'Interactable_OnQueryInteractable::_out_data' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractable, ReturnValue) == 0x000148, "Member 'Interactable_OnQueryInteractable::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnQueryInteractionDetail
// 0x0018 (0x0018 - 0x0000)
struct Interactable_OnQueryInteractionDetail final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _param;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionDetail                     _out_detail;                                       // 0x000C(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2357[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Interactable_OnQueryInteractionDetail) == 0x000008, "Wrong alignment on Interactable_OnQueryInteractionDetail");
static_assert(sizeof(Interactable_OnQueryInteractionDetail) == 0x000018, "Wrong size on Interactable_OnQueryInteractionDetail");
static_assert(offsetof(Interactable_OnQueryInteractionDetail, _involver) == 0x000000, "Member 'Interactable_OnQueryInteractionDetail::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractionDetail, _param) == 0x000008, "Member 'Interactable_OnQueryInteractionDetail::_param' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractionDetail, _out_detail) == 0x00000C, "Member 'Interactable_OnQueryInteractionDetail::_out_detail' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractionDetail, ReturnValue) == 0x000010, "Member 'Interactable_OnQueryInteractionDetail::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnQueryInteractionPoint
// 0x0038 (0x0038 - 0x0000)
struct Interactable_OnQueryInteractionPoint final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionPoint                      ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnQueryInteractionPoint) == 0x000008, "Wrong alignment on Interactable_OnQueryInteractionPoint");
static_assert(sizeof(Interactable_OnQueryInteractionPoint) == 0x000038, "Wrong size on Interactable_OnQueryInteractionPoint");
static_assert(offsetof(Interactable_OnQueryInteractionPoint, _involver) == 0x000000, "Member 'Interactable_OnQueryInteractionPoint::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryInteractionPoint, ReturnValue) == 0x000008, "Member 'Interactable_OnQueryInteractionPoint::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnQueryPriority
// 0x0010 (0x0010 - 0x0000)
struct Interactable_OnQueryPriority final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2358[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Interactable_OnQueryPriority) == 0x000008, "Wrong alignment on Interactable_OnQueryPriority");
static_assert(sizeof(Interactable_OnQueryPriority) == 0x000010, "Wrong size on Interactable_OnQueryPriority");
static_assert(offsetof(Interactable_OnQueryPriority, _involver) == 0x000000, "Member 'Interactable_OnQueryPriority::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnQueryPriority, ReturnValue) == 0x000008, "Member 'Interactable_OnQueryPriority::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.OnSERVER_Interact
// 0x0018 (0x0018 - 0x0000)
struct Interactable_OnSERVER_Interact final
{
public:
	class ACharaBase*                             _involver;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _key_pressed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2359[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _param;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Interactable_OnSERVER_Interact) == 0x000008, "Wrong alignment on Interactable_OnSERVER_Interact");
static_assert(sizeof(Interactable_OnSERVER_Interact) == 0x000018, "Wrong size on Interactable_OnSERVER_Interact");
static_assert(offsetof(Interactable_OnSERVER_Interact, _involver) == 0x000000, "Member 'Interactable_OnSERVER_Interact::_involver' has a wrong offset!");
static_assert(offsetof(Interactable_OnSERVER_Interact, _key_pressed) == 0x000008, "Member 'Interactable_OnSERVER_Interact::_key_pressed' has a wrong offset!");
static_assert(offsetof(Interactable_OnSERVER_Interact, _param) == 0x00000C, "Member 'Interactable_OnSERVER_Interact::_param' has a wrong offset!");
static_assert(offsetof(Interactable_OnSERVER_Interact, ReturnValue) == 0x000010, "Member 'Interactable_OnSERVER_Interact::ReturnValue' has a wrong offset!");

// Function Stigma.Interactable.GetInteractingChara
// 0x0008 (0x0008 - 0x0000)
struct Interactable_GetInteractingChara final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetInteractingChara) == 0x000008, "Wrong alignment on Interactable_GetInteractingChara");
static_assert(sizeof(Interactable_GetInteractingChara) == 0x000008, "Wrong size on Interactable_GetInteractingChara");
static_assert(offsetof(Interactable_GetInteractingChara, ReturnValue) == 0x000000, "Member 'Interactable_GetInteractingChara::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.Conv_ItemIdToInteger
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_Conv_ItemIdToInteger final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_Conv_ItemIdToInteger) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_Conv_ItemIdToInteger");
static_assert(sizeof(ItemIDBlueprintLibrary_Conv_ItemIdToInteger) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_Conv_ItemIdToInteger");
static_assert(offsetof(ItemIDBlueprintLibrary_Conv_ItemIdToInteger, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_Conv_ItemIdToInteger::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_Conv_ItemIdToInteger, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_Conv_ItemIdToInteger::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.GetCategory
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_GetCategory final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_GetCategory) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_GetCategory");
static_assert(sizeof(ItemIDBlueprintLibrary_GetCategory) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_GetCategory");
static_assert(offsetof(ItemIDBlueprintLibrary_GetCategory, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_GetCategory::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_GetCategory, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_GetCategory::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.GetCategoryByItemID
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_GetCategoryByItemID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_GetCategoryByItemID) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_GetCategoryByItemID");
static_assert(sizeof(ItemIDBlueprintLibrary_GetCategoryByItemID) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_GetCategoryByItemID");
static_assert(offsetof(ItemIDBlueprintLibrary_GetCategoryByItemID, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_GetCategoryByItemID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_GetCategoryByItemID, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_GetCategoryByItemID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.GetSerialNumber
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_GetSerialNumber final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235E[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_GetSerialNumber) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_GetSerialNumber");
static_assert(sizeof(ItemIDBlueprintLibrary_GetSerialNumber) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_GetSerialNumber");
static_assert(offsetof(ItemIDBlueprintLibrary_GetSerialNumber, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_GetSerialNumber::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_GetSerialNumber, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_GetSerialNumber::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.GetSubCategoryByItemID
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_GetSubCategoryByItemID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_GetSubCategoryByItemID) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_GetSubCategoryByItemID");
static_assert(sizeof(ItemIDBlueprintLibrary_GetSubCategoryByItemID) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_GetSubCategoryByItemID");
static_assert(offsetof(ItemIDBlueprintLibrary_GetSubCategoryByItemID, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_GetSubCategoryByItemID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_GetSubCategoryByItemID, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_GetSubCategoryByItemID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.IsEqualItemID
// 0x0028 (0x0028 - 0x0000)
struct ItemIDBlueprintLibrary_IsEqualItemID final
{
public:
	struct FItemID                                _id1;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _id2;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2360[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_IsEqualItemID) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_IsEqualItemID");
static_assert(sizeof(ItemIDBlueprintLibrary_IsEqualItemID) == 0x000028, "Wrong size on ItemIDBlueprintLibrary_IsEqualItemID");
static_assert(offsetof(ItemIDBlueprintLibrary_IsEqualItemID, _id1) == 0x000000, "Member 'ItemIDBlueprintLibrary_IsEqualItemID::_id1' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_IsEqualItemID, _id2) == 0x000010, "Member 'ItemIDBlueprintLibrary_IsEqualItemID::_id2' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_IsEqualItemID, ReturnValue) == 0x000020, "Member 'ItemIDBlueprintLibrary_IsEqualItemID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.IsValidItemCategories
// 0x000C (0x000C - 0x0000)
struct ItemIDBlueprintLibrary_IsValidItemCategories final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2361[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _sub_category;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2362[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_IsValidItemCategories) == 0x000004, "Wrong alignment on ItemIDBlueprintLibrary_IsValidItemCategories");
static_assert(sizeof(ItemIDBlueprintLibrary_IsValidItemCategories) == 0x00000C, "Wrong size on ItemIDBlueprintLibrary_IsValidItemCategories");
static_assert(offsetof(ItemIDBlueprintLibrary_IsValidItemCategories, _category) == 0x000000, "Member 'ItemIDBlueprintLibrary_IsValidItemCategories::_category' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_IsValidItemCategories, _sub_category) == 0x000004, "Member 'ItemIDBlueprintLibrary_IsValidItemCategories::_sub_category' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_IsValidItemCategories, ReturnValue) == 0x000008, "Member 'ItemIDBlueprintLibrary_IsValidItemCategories::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.IsValidItemID
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_IsValidItemID final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2363[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_IsValidItemID) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_IsValidItemID");
static_assert(sizeof(ItemIDBlueprintLibrary_IsValidItemID) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_IsValidItemID");
static_assert(offsetof(ItemIDBlueprintLibrary_IsValidItemID, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_IsValidItemID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_IsValidItemID, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_IsValidItemID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.MakeItemID
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_MakeItemID final
{
public:
	int32                                         _id;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2364[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDBlueprintLibrary_MakeItemID) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_MakeItemID");
static_assert(sizeof(ItemIDBlueprintLibrary_MakeItemID) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_MakeItemID");
static_assert(offsetof(ItemIDBlueprintLibrary_MakeItemID, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_MakeItemID::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_MakeItemID, ReturnValue) == 0x000008, "Member 'ItemIDBlueprintLibrary_MakeItemID::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.MakeItemIDByCategories
// 0x0020 (0x0020 - 0x0000)
struct ItemIDBlueprintLibrary_MakeItemIDByCategories final
{
public:
	EItemCategory                                 _main_category;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2365[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _sub_category;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _serial_number;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2366[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDBlueprintLibrary_MakeItemIDByCategories) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_MakeItemIDByCategories");
static_assert(sizeof(ItemIDBlueprintLibrary_MakeItemIDByCategories) == 0x000020, "Wrong size on ItemIDBlueprintLibrary_MakeItemIDByCategories");
static_assert(offsetof(ItemIDBlueprintLibrary_MakeItemIDByCategories, _main_category) == 0x000000, "Member 'ItemIDBlueprintLibrary_MakeItemIDByCategories::_main_category' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_MakeItemIDByCategories, _sub_category) == 0x000004, "Member 'ItemIDBlueprintLibrary_MakeItemIDByCategories::_sub_category' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_MakeItemIDByCategories, _serial_number) == 0x000008, "Member 'ItemIDBlueprintLibrary_MakeItemIDByCategories::_serial_number' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_MakeItemIDByCategories, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_MakeItemIDByCategories::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.ToInt
// 0x0018 (0x0018 - 0x0000)
struct ItemIDBlueprintLibrary_ToInt final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2367[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(ItemIDBlueprintLibrary_ToInt) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_ToInt");
static_assert(sizeof(ItemIDBlueprintLibrary_ToInt) == 0x000018, "Wrong size on ItemIDBlueprintLibrary_ToInt");
static_assert(offsetof(ItemIDBlueprintLibrary_ToInt, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_ToInt::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_ToInt, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_ToInt::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.ToString
// 0x0020 (0x0020 - 0x0000)
struct ItemIDBlueprintLibrary_ToString final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDBlueprintLibrary_ToString) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_ToString");
static_assert(sizeof(ItemIDBlueprintLibrary_ToString) == 0x000020, "Wrong size on ItemIDBlueprintLibrary_ToString");
static_assert(offsetof(ItemIDBlueprintLibrary_ToString, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_ToString::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_ToString, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_ToString::ReturnValue' has a wrong offset!");

// Function Stigma.ItemIDBlueprintLibrary.ToText
// 0x0028 (0x0028 - 0x0000)
struct ItemIDBlueprintLibrary_ToText final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIDBlueprintLibrary_ToText) == 0x000008, "Wrong alignment on ItemIDBlueprintLibrary_ToText");
static_assert(sizeof(ItemIDBlueprintLibrary_ToText) == 0x000028, "Wrong size on ItemIDBlueprintLibrary_ToText");
static_assert(offsetof(ItemIDBlueprintLibrary_ToText, _id) == 0x000000, "Member 'ItemIDBlueprintLibrary_ToText::_id' has a wrong offset!");
static_assert(offsetof(ItemIDBlueprintLibrary_ToText, ReturnValue) == 0x000010, "Member 'ItemIDBlueprintLibrary_ToText::ReturnValue' has a wrong offset!");

// Function Stigma.ItemObject.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct ItemObject_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemObject_GetLevel) == 0x000004, "Wrong alignment on ItemObject_GetLevel");
static_assert(sizeof(ItemObject_GetLevel) == 0x000004, "Wrong size on ItemObject_GetLevel");
static_assert(offsetof(ItemObject_GetLevel, ReturnValue) == 0x000000, "Member 'ItemObject_GetLevel::ReturnValue' has a wrong offset!");

// Function Stigma.InvenItem_Currency.GetCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct InvenItem_Currency_GetCurrencyType final
{
public:
	ECurrencyTypes                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvenItem_Currency_GetCurrencyType) == 0x000001, "Wrong alignment on InvenItem_Currency_GetCurrencyType");
static_assert(sizeof(InvenItem_Currency_GetCurrencyType) == 0x000001, "Wrong size on InvenItem_Currency_GetCurrencyType");
static_assert(offsetof(InvenItem_Currency_GetCurrencyType, ReturnValue) == 0x000000, "Member 'InvenItem_Currency_GetCurrencyType::ReturnValue' has a wrong offset!");

// Function Stigma.KeyInputBlueprintLibrary.GetKeyFName
// 0x0020 (0x0020 - 0x0000)
struct KeyInputBlueprintLibrary_GetKeyFName final
{
public:
	struct FKey                                   _Key;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyInputBlueprintLibrary_GetKeyFName) == 0x000008, "Wrong alignment on KeyInputBlueprintLibrary_GetKeyFName");
static_assert(sizeof(KeyInputBlueprintLibrary_GetKeyFName) == 0x000020, "Wrong size on KeyInputBlueprintLibrary_GetKeyFName");
static_assert(offsetof(KeyInputBlueprintLibrary_GetKeyFName, _Key) == 0x000000, "Member 'KeyInputBlueprintLibrary_GetKeyFName::_Key' has a wrong offset!");
static_assert(offsetof(KeyInputBlueprintLibrary_GetKeyFName, ReturnValue) == 0x000018, "Member 'KeyInputBlueprintLibrary_GetKeyFName::ReturnValue' has a wrong offset!");

// Function Stigma.LobbyCamera.Adjust
// 0x0008 (0x0008 - 0x0000)
struct LobbyCamera_Adjust final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCamera_Adjust) == 0x000008, "Wrong alignment on LobbyCamera_Adjust");
static_assert(sizeof(LobbyCamera_Adjust) == 0x000008, "Wrong size on LobbyCamera_Adjust");
static_assert(offsetof(LobbyCamera_Adjust, _target) == 0x000000, "Member 'LobbyCamera_Adjust::_target' has a wrong offset!");

// Function Stigma.LVData_Gun.Config
// 0x0002 (0x0002 - 0x0000)
struct LVData_Gun_Config final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_reddot;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Gun_Config) == 0x000001, "Wrong alignment on LVData_Gun_Config");
static_assert(sizeof(LVData_Gun_Config) == 0x000002, "Wrong size on LVData_Gun_Config");
static_assert(offsetof(LVData_Gun_Config, _gun_type) == 0x000000, "Member 'LVData_Gun_Config::_gun_type' has a wrong offset!");
static_assert(offsetof(LVData_Gun_Config, _use_reddot) == 0x000001, "Member 'LVData_Gun_Config::_use_reddot' has a wrong offset!");

// Function Stigma.LVData_Gun.GetGunType
// 0x0001 (0x0001 - 0x0000)
struct LVData_Gun_GetGunType final
{
public:
	EGunType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Gun_GetGunType) == 0x000001, "Wrong alignment on LVData_Gun_GetGunType");
static_assert(sizeof(LVData_Gun_GetGunType) == 0x000001, "Wrong size on LVData_Gun_GetGunType");
static_assert(offsetof(LVData_Gun_GetGunType, ReturnValue) == 0x000000, "Member 'LVData_Gun_GetGunType::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_Gun.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct LVData_Gun_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Gun_IsOwned) == 0x000001, "Wrong alignment on LVData_Gun_IsOwned");
static_assert(sizeof(LVData_Gun_IsOwned) == 0x000001, "Wrong size on LVData_Gun_IsOwned");
static_assert(offsetof(LVData_Gun_IsOwned, ReturnValue) == 0x000000, "Member 'LVData_Gun_IsOwned::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_Item.Config
// 0x0018 (0x0018 - 0x0000)
struct LVData_Item_Config final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_possessed;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LVData_Item_Config) == 0x000008, "Wrong alignment on LVData_Item_Config");
static_assert(sizeof(LVData_Item_Config) == 0x000018, "Wrong size on LVData_Item_Config");
static_assert(offsetof(LVData_Item_Config, _item_id) == 0x000000, "Member 'LVData_Item_Config::_item_id' has a wrong offset!");
static_assert(offsetof(LVData_Item_Config, _is_possessed) == 0x000010, "Member 'LVData_Item_Config::_is_possessed' has a wrong offset!");

// Function Stigma.LVData_Item.SetCurrentSelectedItemID
// 0x0010 (0x0010 - 0x0000)
struct LVData_Item_SetCurrentSelectedItemID final
{
public:
	struct FItemID                                _selected_item_id;                                 // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Item_SetCurrentSelectedItemID) == 0x000008, "Wrong alignment on LVData_Item_SetCurrentSelectedItemID");
static_assert(sizeof(LVData_Item_SetCurrentSelectedItemID) == 0x000010, "Wrong size on LVData_Item_SetCurrentSelectedItemID");
static_assert(offsetof(LVData_Item_SetCurrentSelectedItemID, _selected_item_id) == 0x000000, "Member 'LVData_Item_SetCurrentSelectedItemID::_selected_item_id' has a wrong offset!");

// Function Stigma.LVData_Item.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct LVData_Item_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Item_GetDisplayName) == 0x000008, "Wrong alignment on LVData_Item_GetDisplayName");
static_assert(sizeof(LVData_Item_GetDisplayName) == 0x000018, "Wrong size on LVData_Item_GetDisplayName");
static_assert(offsetof(LVData_Item_GetDisplayName, ReturnValue) == 0x000000, "Member 'LVData_Item_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_Item.GetGrade
// 0x0001 (0x0001 - 0x0000)
struct LVData_Item_GetGrade final
{
public:
	EItemGrade                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Item_GetGrade) == 0x000001, "Wrong alignment on LVData_Item_GetGrade");
static_assert(sizeof(LVData_Item_GetGrade) == 0x000001, "Wrong size on LVData_Item_GetGrade");
static_assert(offsetof(LVData_Item_GetGrade, ReturnValue) == 0x000000, "Member 'LVData_Item_GetGrade::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_Item.GetIcon
// 0x0028 (0x0028 - 0x0000)
struct LVData_Item_GetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Item_GetIcon) == 0x000008, "Wrong alignment on LVData_Item_GetIcon");
static_assert(sizeof(LVData_Item_GetIcon) == 0x000028, "Wrong size on LVData_Item_GetIcon");
static_assert(offsetof(LVData_Item_GetIcon, ReturnValue) == 0x000000, "Member 'LVData_Item_GetIcon::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_Item.GetItemID
// 0x0010 (0x0010 - 0x0000)
struct LVData_Item_GetItemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Item_GetItemID) == 0x000008, "Wrong alignment on LVData_Item_GetItemID");
static_assert(sizeof(LVData_Item_GetItemID) == 0x000010, "Wrong size on LVData_Item_GetItemID");
static_assert(offsetof(LVData_Item_GetItemID, ReturnValue) == 0x000000, "Member 'LVData_Item_GetItemID::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_Item.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct LVData_Item_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_Item_IsSelected) == 0x000001, "Wrong alignment on LVData_Item_IsSelected");
static_assert(sizeof(LVData_Item_IsSelected) == 0x000001, "Wrong size on LVData_Item_IsSelected");
static_assert(offsetof(LVData_Item_IsSelected, ReturnValue) == 0x000000, "Member 'LVData_Item_IsSelected::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.Config
// 0x0098 (0x0098 - 0x0000)
struct LVData_RankingItem_Config final
{
public:
	ERankingType                                  _ranking_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2371[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FNetRankingEntry                       _entry;                                            // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UUI_RankingListView*                    _parent;                                           // 0x0088(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_searced_user;                                  // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2372[0x7];                                     // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(LVData_RankingItem_Config) == 0x000008, "Wrong alignment on LVData_RankingItem_Config");
static_assert(sizeof(LVData_RankingItem_Config) == 0x000098, "Wrong size on LVData_RankingItem_Config");
static_assert(offsetof(LVData_RankingItem_Config, _ranking_type) == 0x000000, "Member 'LVData_RankingItem_Config::_ranking_type' has a wrong offset!");
static_assert(offsetof(LVData_RankingItem_Config, _entry) == 0x000008, "Member 'LVData_RankingItem_Config::_entry' has a wrong offset!");
static_assert(offsetof(LVData_RankingItem_Config, _parent) == 0x000088, "Member 'LVData_RankingItem_Config::_parent' has a wrong offset!");
static_assert(offsetof(LVData_RankingItem_Config, _is_searced_user) == 0x000090, "Member 'LVData_RankingItem_Config::_is_searced_user' has a wrong offset!");

// Function Stigma.LVData_RankingItem.ConfigChallenge
// 0x0088 (0x0088 - 0x0000)
struct LVData_RankingItem_ConfigChallenge final
{
public:
	ERankingType                                  _ranking_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2373[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ChallengeRead                     _entry;                                            // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UUI_RankingListView*                    _parent;                                           // 0x0080(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_ConfigChallenge) == 0x000008, "Wrong alignment on LVData_RankingItem_ConfigChallenge");
static_assert(sizeof(LVData_RankingItem_ConfigChallenge) == 0x000088, "Wrong size on LVData_RankingItem_ConfigChallenge");
static_assert(offsetof(LVData_RankingItem_ConfigChallenge, _ranking_type) == 0x000000, "Member 'LVData_RankingItem_ConfigChallenge::_ranking_type' has a wrong offset!");
static_assert(offsetof(LVData_RankingItem_ConfigChallenge, _entry) == 0x000008, "Member 'LVData_RankingItem_ConfigChallenge::_entry' has a wrong offset!");
static_assert(offsetof(LVData_RankingItem_ConfigChallenge, _parent) == 0x000080, "Member 'LVData_RankingItem_ConfigChallenge::_parent' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetArmor
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetArmor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetArmor) == 0x000004, "Wrong alignment on LVData_RankingItem_GetArmor");
static_assert(sizeof(LVData_RankingItem_GetArmor) == 0x000004, "Wrong size on LVData_RankingItem_GetArmor");
static_assert(offsetof(LVData_RankingItem_GetArmor, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetArmor::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetAssist
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetAssist final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetAssist) == 0x000004, "Wrong alignment on LVData_RankingItem_GetAssist");
static_assert(sizeof(LVData_RankingItem_GetAssist) == 0x000004, "Wrong size on LVData_RankingItem_GetAssist");
static_assert(offsetof(LVData_RankingItem_GetAssist, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetAssist::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetBlackCoin
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetBlackCoin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetBlackCoin) == 0x000004, "Wrong alignment on LVData_RankingItem_GetBlackCoin");
static_assert(sizeof(LVData_RankingItem_GetBlackCoin) == 0x000004, "Wrong size on LVData_RankingItem_GetBlackCoin");
static_assert(offsetof(LVData_RankingItem_GetBlackCoin, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetBlackCoin::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetDeath
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetDeath final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetDeath) == 0x000004, "Wrong alignment on LVData_RankingItem_GetDeath");
static_assert(sizeof(LVData_RankingItem_GetDeath) == 0x000004, "Wrong size on LVData_RankingItem_GetDeath");
static_assert(offsetof(LVData_RankingItem_GetDeath, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetDeath::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetDraw
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetDraw final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetDraw) == 0x000004, "Wrong alignment on LVData_RankingItem_GetDraw");
static_assert(sizeof(LVData_RankingItem_GetDraw) == 0x000004, "Wrong size on LVData_RankingItem_GetDraw");
static_assert(offsetof(LVData_RankingItem_GetDraw, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetDraw::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetEmblemID
// 0x0010 (0x0010 - 0x0000)
struct LVData_RankingItem_GetEmblemID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetEmblemID) == 0x000008, "Wrong alignment on LVData_RankingItem_GetEmblemID");
static_assert(sizeof(LVData_RankingItem_GetEmblemID) == 0x000010, "Wrong size on LVData_RankingItem_GetEmblemID");
static_assert(offsetof(LVData_RankingItem_GetEmblemID, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetEmblemID::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetFinalRound
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetFinalRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetFinalRound) == 0x000004, "Wrong alignment on LVData_RankingItem_GetFinalRound");
static_assert(sizeof(LVData_RankingItem_GetFinalRound) == 0x000004, "Wrong size on LVData_RankingItem_GetFinalRound");
static_assert(offsetof(LVData_RankingItem_GetFinalRound, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetFinalRound::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetGold
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetGold) == 0x000004, "Wrong alignment on LVData_RankingItem_GetGold");
static_assert(sizeof(LVData_RankingItem_GetGold) == 0x000004, "Wrong size on LVData_RankingItem_GetGold");
static_assert(offsetof(LVData_RankingItem_GetGold, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetGold::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetKill
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetKill final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetKill) == 0x000004, "Wrong alignment on LVData_RankingItem_GetKill");
static_assert(sizeof(LVData_RankingItem_GetKill) == 0x000004, "Wrong size on LVData_RankingItem_GetKill");
static_assert(offsetof(LVData_RankingItem_GetKill, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetKill::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetLevel) == 0x000004, "Wrong alignment on LVData_RankingItem_GetLevel");
static_assert(sizeof(LVData_RankingItem_GetLevel) == 0x000004, "Wrong size on LVData_RankingItem_GetLevel");
static_assert(offsetof(LVData_RankingItem_GetLevel, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetLevel::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetLose
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetLose final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetLose) == 0x000004, "Wrong alignment on LVData_RankingItem_GetLose");
static_assert(sizeof(LVData_RankingItem_GetLose) == 0x000004, "Wrong size on LVData_RankingItem_GetLose");
static_assert(offsetof(LVData_RankingItem_GetLose, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetLose::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct LVData_RankingItem_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetNickname) == 0x000008, "Wrong alignment on LVData_RankingItem_GetNickname");
static_assert(sizeof(LVData_RankingItem_GetNickname) == 0x000018, "Wrong size on LVData_RankingItem_GetNickname");
static_assert(offsetof(LVData_RankingItem_GetNickname, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetNicknameFXID
// 0x0010 (0x0010 - 0x0000)
struct LVData_RankingItem_GetNicknameFXID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetNicknameFXID) == 0x000008, "Wrong alignment on LVData_RankingItem_GetNicknameFXID");
static_assert(sizeof(LVData_RankingItem_GetNicknameFXID) == 0x000010, "Wrong size on LVData_RankingItem_GetNicknameFXID");
static_assert(offsetof(LVData_RankingItem_GetNicknameFXID, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetNicknameFXID::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetPlayTime
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetPlayTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetPlayTime) == 0x000004, "Wrong alignment on LVData_RankingItem_GetPlayTime");
static_assert(sizeof(LVData_RankingItem_GetPlayTime) == 0x000004, "Wrong size on LVData_RankingItem_GetPlayTime");
static_assert(offsetof(LVData_RankingItem_GetPlayTime, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetPlayTime::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetPrevRank
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetPrevRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetPrevRank) == 0x000004, "Wrong alignment on LVData_RankingItem_GetPrevRank");
static_assert(sizeof(LVData_RankingItem_GetPrevRank) == 0x000004, "Wrong size on LVData_RankingItem_GetPrevRank");
static_assert(offsetof(LVData_RankingItem_GetPrevRank, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetPrevRank::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetPrevRanking
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetPrevRanking final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetPrevRanking) == 0x000004, "Wrong alignment on LVData_RankingItem_GetPrevRanking");
static_assert(sizeof(LVData_RankingItem_GetPrevRanking) == 0x000004, "Wrong size on LVData_RankingItem_GetPrevRanking");
static_assert(offsetof(LVData_RankingItem_GetPrevRanking, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetPrevRanking::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetProfileCardID
// 0x0010 (0x0010 - 0x0000)
struct LVData_RankingItem_GetProfileCardID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetProfileCardID) == 0x000008, "Wrong alignment on LVData_RankingItem_GetProfileCardID");
static_assert(sizeof(LVData_RankingItem_GetProfileCardID) == 0x000010, "Wrong size on LVData_RankingItem_GetProfileCardID");
static_assert(offsetof(LVData_RankingItem_GetProfileCardID, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetProfileCardID::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetRanking
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetRanking final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetRanking) == 0x000004, "Wrong alignment on LVData_RankingItem_GetRanking");
static_assert(sizeof(LVData_RankingItem_GetRanking) == 0x000004, "Wrong size on LVData_RankingItem_GetRanking");
static_assert(offsetof(LVData_RankingItem_GetRanking, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetRanking::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetScore
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetScore) == 0x000004, "Wrong alignment on LVData_RankingItem_GetScore");
static_assert(sizeof(LVData_RankingItem_GetScore) == 0x000004, "Wrong size on LVData_RankingItem_GetScore");
static_assert(offsetof(LVData_RankingItem_GetScore, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetScore::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetTier
// 0x0001 (0x0001 - 0x0000)
struct LVData_RankingItem_GetTier final
{
public:
	ETier                                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetTier) == 0x000001, "Wrong alignment on LVData_RankingItem_GetTier");
static_assert(sizeof(LVData_RankingItem_GetTier) == 0x000001, "Wrong size on LVData_RankingItem_GetTier");
static_assert(offsetof(LVData_RankingItem_GetTier, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetTier::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetUserID
// 0x0008 (0x0008 - 0x0000)
struct LVData_RankingItem_GetUserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetUserID) == 0x000008, "Wrong alignment on LVData_RankingItem_GetUserID");
static_assert(sizeof(LVData_RankingItem_GetUserID) == 0x000008, "Wrong size on LVData_RankingItem_GetUserID");
static_assert(offsetof(LVData_RankingItem_GetUserID, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.GetWin
// 0x0004 (0x0004 - 0x0000)
struct LVData_RankingItem_GetWin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_GetWin) == 0x000004, "Wrong alignment on LVData_RankingItem_GetWin");
static_assert(sizeof(LVData_RankingItem_GetWin) == 0x000004, "Wrong size on LVData_RankingItem_GetWin");
static_assert(offsetof(LVData_RankingItem_GetWin, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_GetWin::ReturnValue' has a wrong offset!");

// Function Stigma.LVData_RankingItem.IsMyRanking
// 0x0001 (0x0001 - 0x0000)
struct LVData_RankingItem_IsMyRanking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LVData_RankingItem_IsMyRanking) == 0x000001, "Wrong alignment on LVData_RankingItem_IsMyRanking");
static_assert(sizeof(LVData_RankingItem_IsMyRanking) == 0x000001, "Wrong size on LVData_RankingItem_IsMyRanking");
static_assert(offsetof(LVData_RankingItem_IsMyRanking, ReturnValue) == 0x000000, "Member 'LVData_RankingItem_IsMyRanking::ReturnValue' has a wrong offset!");

// Function Stigma.MapEntryBlueprintLibrary.GetMapName
// 0x0168 (0x0168 - 0x0000)
struct MapEntryBlueprintLibrary_GetMapName final
{
public:
	struct FMapEntry                              _map_entry;                                        // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0158(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapEntryBlueprintLibrary_GetMapName) == 0x000008, "Wrong alignment on MapEntryBlueprintLibrary_GetMapName");
static_assert(sizeof(MapEntryBlueprintLibrary_GetMapName) == 0x000168, "Wrong size on MapEntryBlueprintLibrary_GetMapName");
static_assert(offsetof(MapEntryBlueprintLibrary_GetMapName, _map_entry) == 0x000000, "Member 'MapEntryBlueprintLibrary_GetMapName::_map_entry' has a wrong offset!");
static_assert(offsetof(MapEntryBlueprintLibrary_GetMapName, ReturnValue) == 0x000158, "Member 'MapEntryBlueprintLibrary_GetMapName::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.OnConditionDrivedSuccess
// 0x0010 (0x0010 - 0x0000)
struct Mission_OnConditionDrivedSuccess final
{
public:
	class UMissionCondition*                      _condition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _fail_on_called;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2378[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Mission_OnConditionDrivedSuccess) == 0x000008, "Wrong alignment on Mission_OnConditionDrivedSuccess");
static_assert(sizeof(Mission_OnConditionDrivedSuccess) == 0x000010, "Wrong size on Mission_OnConditionDrivedSuccess");
static_assert(offsetof(Mission_OnConditionDrivedSuccess, _condition) == 0x000000, "Member 'Mission_OnConditionDrivedSuccess::_condition' has a wrong offset!");
static_assert(offsetof(Mission_OnConditionDrivedSuccess, _fail_on_called) == 0x000008, "Member 'Mission_OnConditionDrivedSuccess::_fail_on_called' has a wrong offset!");

// Function Stigma.Mission.GetAllConditions
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetAllConditions final
{
public:
	TArray<class UMissionCondition*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetAllConditions) == 0x000008, "Wrong alignment on Mission_GetAllConditions");
static_assert(sizeof(Mission_GetAllConditions) == 0x000010, "Wrong size on Mission_GetAllConditions");
static_assert(offsetof(Mission_GetAllConditions, ReturnValue) == 0x000000, "Member 'Mission_GetAllConditions::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetCount) == 0x000004, "Wrong alignment on Mission_GetCount");
static_assert(sizeof(Mission_GetCount) == 0x000004, "Wrong size on Mission_GetCount");
static_assert(offsetof(Mission_GetCount, ReturnValue) == 0x000000, "Member 'Mission_GetCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetCurrentCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetCurrentCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetCurrentCount) == 0x000004, "Wrong alignment on Mission_GetCurrentCount");
static_assert(sizeof(Mission_GetCurrentCount) == 0x000004, "Wrong size on Mission_GetCurrentCount");
static_assert(offsetof(Mission_GetCurrentCount, ReturnValue) == 0x000000, "Member 'Mission_GetCurrentCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetDefaultRepeatCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetDefaultRepeatCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetDefaultRepeatCount) == 0x000004, "Wrong alignment on Mission_GetDefaultRepeatCount");
static_assert(sizeof(Mission_GetDefaultRepeatCount) == 0x000004, "Wrong size on Mission_GetDefaultRepeatCount");
static_assert(offsetof(Mission_GetDefaultRepeatCount, ReturnValue) == 0x000000, "Member 'Mission_GetDefaultRepeatCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetDefaultTargetCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetDefaultTargetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetDefaultTargetCount) == 0x000004, "Wrong alignment on Mission_GetDefaultTargetCount");
static_assert(sizeof(Mission_GetDefaultTargetCount) == 0x000004, "Wrong size on Mission_GetDefaultTargetCount");
static_assert(offsetof(Mission_GetDefaultTargetCount, ReturnValue) == 0x000000, "Member 'Mission_GetDefaultTargetCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetIdx
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetIdx) == 0x000004, "Wrong alignment on Mission_GetIdx");
static_assert(sizeof(Mission_GetIdx) == 0x000004, "Wrong size on Mission_GetIdx");
static_assert(offsetof(Mission_GetIdx, ReturnValue) == 0x000000, "Member 'Mission_GetIdx::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetInitCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetInitCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetInitCount) == 0x000004, "Wrong alignment on Mission_GetInitCount");
static_assert(sizeof(Mission_GetInitCount) == 0x000004, "Wrong size on Mission_GetInitCount");
static_assert(offsetof(Mission_GetInitCount, ReturnValue) == 0x000000, "Member 'Mission_GetInitCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetMissionID
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetMissionID final
{
public:
	struct FItemID_Mission                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetMissionID) == 0x000008, "Wrong alignment on Mission_GetMissionID");
static_assert(sizeof(Mission_GetMissionID) == 0x000010, "Wrong size on Mission_GetMissionID");
static_assert(offsetof(Mission_GetMissionID, ReturnValue) == 0x000000, "Member 'Mission_GetMissionID::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetProgressRate
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetProgressRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetProgressRate) == 0x000004, "Wrong alignment on Mission_GetProgressRate");
static_assert(sizeof(Mission_GetProgressRate) == 0x000004, "Wrong size on Mission_GetProgressRate");
static_assert(offsetof(Mission_GetProgressRate, ReturnValue) == 0x000000, "Member 'Mission_GetProgressRate::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetProgressType
// 0x0001 (0x0001 - 0x0000)
struct Mission_GetProgressType final
{
public:
	EMissionProgressType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetProgressType) == 0x000001, "Wrong alignment on Mission_GetProgressType");
static_assert(sizeof(Mission_GetProgressType) == 0x000001, "Wrong size on Mission_GetProgressType");
static_assert(offsetof(Mission_GetProgressType, ReturnValue) == 0x000000, "Member 'Mission_GetProgressType::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetRepeatCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetRepeatCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetRepeatCount) == 0x000004, "Wrong alignment on Mission_GetRepeatCount");
static_assert(sizeof(Mission_GetRepeatCount) == 0x000004, "Wrong size on Mission_GetRepeatCount");
static_assert(offsetof(Mission_GetRepeatCount, ReturnValue) == 0x000000, "Member 'Mission_GetRepeatCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetRewardCount
// 0x0004 (0x0004 - 0x0000)
struct Mission_GetRewardCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetRewardCount) == 0x000004, "Wrong alignment on Mission_GetRewardCount");
static_assert(sizeof(Mission_GetRewardCount) == 0x000004, "Wrong size on Mission_GetRewardCount");
static_assert(offsetof(Mission_GetRewardCount, ReturnValue) == 0x000000, "Member 'Mission_GetRewardCount::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.GetTaskID
// 0x0010 (0x0010 - 0x0000)
struct Mission_GetTaskID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_GetTaskID) == 0x000008, "Wrong alignment on Mission_GetTaskID");
static_assert(sizeof(Mission_GetTaskID) == 0x000010, "Wrong size on Mission_GetTaskID");
static_assert(offsetof(Mission_GetTaskID, ReturnValue) == 0x000000, "Member 'Mission_GetTaskID::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.IsBookmarked
// 0x0001 (0x0001 - 0x0000)
struct Mission_IsBookmarked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_IsBookmarked) == 0x000001, "Wrong alignment on Mission_IsBookmarked");
static_assert(sizeof(Mission_IsBookmarked) == 0x000001, "Wrong size on Mission_IsBookmarked");
static_assert(offsetof(Mission_IsBookmarked, ReturnValue) == 0x000000, "Member 'Mission_IsBookmarked::ReturnValue' has a wrong offset!");

// Function Stigma.Mission.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct Mission_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mission_IsCompleted) == 0x000001, "Wrong alignment on Mission_IsCompleted");
static_assert(sizeof(Mission_IsCompleted) == 0x000001, "Wrong size on Mission_IsCompleted");
static_assert(offsetof(Mission_IsCompleted, ReturnValue) == 0x000000, "Member 'Mission_IsCompleted::ReturnValue' has a wrong offset!");

// Function Stigma.MissionHelper.CreateMissionCondition
// 0x0030 (0x0030 - 0x0000)
struct MissionHelper_CreateMissionCondition final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionConditionInfo                  _mission_condition_info;                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMissionCondition*                      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionHelper_CreateMissionCondition) == 0x000008, "Wrong alignment on MissionHelper_CreateMissionCondition");
static_assert(sizeof(MissionHelper_CreateMissionCondition) == 0x000030, "Wrong size on MissionHelper_CreateMissionCondition");
static_assert(offsetof(MissionHelper_CreateMissionCondition, _outer) == 0x000000, "Member 'MissionHelper_CreateMissionCondition::_outer' has a wrong offset!");
static_assert(offsetof(MissionHelper_CreateMissionCondition, _mission_condition_info) == 0x000008, "Member 'MissionHelper_CreateMissionCondition::_mission_condition_info' has a wrong offset!");
static_assert(offsetof(MissionHelper_CreateMissionCondition, ReturnValue) == 0x000028, "Member 'MissionHelper_CreateMissionCondition::ReturnValue' has a wrong offset!");

// Function Stigma.MissionHelper.GetDisplayMission
// 0x0038 (0x0038 - 0x0000)
struct MissionHelper_GetDisplayMission final
{
public:
	const class UMission*                         _mission;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _format;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionHelper_GetDisplayMission) == 0x000008, "Wrong alignment on MissionHelper_GetDisplayMission");
static_assert(sizeof(MissionHelper_GetDisplayMission) == 0x000038, "Wrong size on MissionHelper_GetDisplayMission");
static_assert(offsetof(MissionHelper_GetDisplayMission, _mission) == 0x000000, "Member 'MissionHelper_GetDisplayMission::_mission' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetDisplayMission, _format) == 0x000008, "Member 'MissionHelper_GetDisplayMission::_format' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetDisplayMission, ReturnValue) == 0x000020, "Member 'MissionHelper_GetDisplayMission::ReturnValue' has a wrong offset!");

// Function Stigma.MissionHelper.GetDisplayMissionDefine
// 0x01D8 (0x01D8 - 0x0000)
struct MissionHelper_GetDisplayMissionDefine final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionDefine                         _mission_define;                                   // 0x0008(0x01A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _format;                                           // 0x01A8(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x01C0(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionHelper_GetDisplayMissionDefine) == 0x000008, "Wrong alignment on MissionHelper_GetDisplayMissionDefine");
static_assert(sizeof(MissionHelper_GetDisplayMissionDefine) == 0x0001D8, "Wrong size on MissionHelper_GetDisplayMissionDefine");
static_assert(offsetof(MissionHelper_GetDisplayMissionDefine, _outer) == 0x000000, "Member 'MissionHelper_GetDisplayMissionDefine::_outer' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetDisplayMissionDefine, _mission_define) == 0x000008, "Member 'MissionHelper_GetDisplayMissionDefine::_mission_define' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetDisplayMissionDefine, _format) == 0x0001A8, "Member 'MissionHelper_GetDisplayMissionDefine::_format' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetDisplayMissionDefine, ReturnValue) == 0x0001C0, "Member 'MissionHelper_GetDisplayMissionDefine::ReturnValue' has a wrong offset!");

// Function Stigma.MissionHelper.GetMissionConditionClassByConditionType
// 0x0010 (0x0010 - 0x0000)
struct MissionHelper_GetMissionConditionClassByConditionType final
{
public:
	EMissionConditionType                         _condition_type;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2379[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UMissionCondition>          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionHelper_GetMissionConditionClassByConditionType) == 0x000008, "Wrong alignment on MissionHelper_GetMissionConditionClassByConditionType");
static_assert(sizeof(MissionHelper_GetMissionConditionClassByConditionType) == 0x000010, "Wrong size on MissionHelper_GetMissionConditionClassByConditionType");
static_assert(offsetof(MissionHelper_GetMissionConditionClassByConditionType, _condition_type) == 0x000000, "Member 'MissionHelper_GetMissionConditionClassByConditionType::_condition_type' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetMissionConditionClassByConditionType, ReturnValue) == 0x000008, "Member 'MissionHelper_GetMissionConditionClassByConditionType::ReturnValue' has a wrong offset!");

// Function Stigma.MissionHelper.GetMissionConditionSubTypeCategory
// 0x0002 (0x0002 - 0x0000)
struct MissionHelper_GetMissionConditionSubTypeCategory final
{
public:
	EMissionConditionType                         _condition_type;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionConditionSubTypeCategory              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionHelper_GetMissionConditionSubTypeCategory) == 0x000001, "Wrong alignment on MissionHelper_GetMissionConditionSubTypeCategory");
static_assert(sizeof(MissionHelper_GetMissionConditionSubTypeCategory) == 0x000002, "Wrong size on MissionHelper_GetMissionConditionSubTypeCategory");
static_assert(offsetof(MissionHelper_GetMissionConditionSubTypeCategory, _condition_type) == 0x000000, "Member 'MissionHelper_GetMissionConditionSubTypeCategory::_condition_type' has a wrong offset!");
static_assert(offsetof(MissionHelper_GetMissionConditionSubTypeCategory, ReturnValue) == 0x000001, "Member 'MissionHelper_GetMissionConditionSubTypeCategory::ReturnValue' has a wrong offset!");

// Function Stigma.MissionHelper.GoToMission
// 0x0018 (0x0018 - 0x0000)
struct MissionHelper_GoToMission final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Mission                        _mission_id;                                       // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionHelper_GoToMission) == 0x000008, "Wrong alignment on MissionHelper_GoToMission");
static_assert(sizeof(MissionHelper_GoToMission) == 0x000018, "Wrong size on MissionHelper_GoToMission");
static_assert(offsetof(MissionHelper_GoToMission, _outer) == 0x000000, "Member 'MissionHelper_GoToMission::_outer' has a wrong offset!");
static_assert(offsetof(MissionHelper_GoToMission, _mission_id) == 0x000008, "Member 'MissionHelper_GoToMission::_mission_id' has a wrong offset!");

// Function Stigma.MissionHelper.IsPremiumMission
// 0x0018 (0x0018 - 0x0000)
struct MissionHelper_IsPremiumMission final
{
public:
	struct FItemID_Mission                        _mission_id;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MissionHelper_IsPremiumMission) == 0x000008, "Wrong alignment on MissionHelper_IsPremiumMission");
static_assert(sizeof(MissionHelper_IsPremiumMission) == 0x000018, "Wrong size on MissionHelper_IsPremiumMission");
static_assert(offsetof(MissionHelper_IsPremiumMission, _mission_id) == 0x000000, "Member 'MissionHelper_IsPremiumMission::_mission_id' has a wrong offset!");
static_assert(offsetof(MissionHelper_IsPremiumMission, ReturnValue) == 0x000010, "Member 'MissionHelper_IsPremiumMission::ReturnValue' has a wrong offset!");

// Function Stigma.NPC_Lemming.OnALL_Explode
// 0x0001 (0x0001 - 0x0000)
struct NPC_Lemming_OnALL_Explode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPC_Lemming_OnALL_Explode) == 0x000001, "Wrong alignment on NPC_Lemming_OnALL_Explode");
static_assert(sizeof(NPC_Lemming_OnALL_Explode) == 0x000001, "Wrong size on NPC_Lemming_OnALL_Explode");
static_assert(offsetof(NPC_Lemming_OnALL_Explode, ReturnValue) == 0x000000, "Member 'NPC_Lemming_OnALL_Explode::ReturnValue' has a wrong offset!");

// Function Stigma.ObjectPool.OnPooledBulletholeDespawn
// 0x0008 (0x0008 - 0x0000)
struct ObjectPool_OnPooledBulletholeDespawn final
{
public:
	class APooledBullethole*                      PoolActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_OnPooledBulletholeDespawn) == 0x000008, "Wrong alignment on ObjectPool_OnPooledBulletholeDespawn");
static_assert(sizeof(ObjectPool_OnPooledBulletholeDespawn) == 0x000008, "Wrong size on ObjectPool_OnPooledBulletholeDespawn");
static_assert(offsetof(ObjectPool_OnPooledBulletholeDespawn, PoolActor) == 0x000000, "Member 'ObjectPool_OnPooledBulletholeDespawn::PoolActor' has a wrong offset!");

// Function Stigma.ObjectPool.SpawnPooledBullethole
// 0x0008 (0x0008 - 0x0000)
struct ObjectPool_SpawnPooledBullethole final
{
public:
	class APooledBullethole*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_SpawnPooledBullethole) == 0x000008, "Wrong alignment on ObjectPool_SpawnPooledBullethole");
static_assert(sizeof(ObjectPool_SpawnPooledBullethole) == 0x000008, "Wrong size on ObjectPool_SpawnPooledBullethole");
static_assert(offsetof(ObjectPool_SpawnPooledBullethole, ReturnValue) == 0x000000, "Member 'ObjectPool_SpawnPooledBullethole::ReturnValue' has a wrong offset!");

// Function Stigma.OccupationArea.Setter_IsActivated
// 0x0001 (0x0001 - 0x0000)
struct OccupationArea_Setter_IsActivated final
{
public:
	bool                                          _is_activated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OccupationArea_Setter_IsActivated) == 0x000001, "Wrong alignment on OccupationArea_Setter_IsActivated");
static_assert(sizeof(OccupationArea_Setter_IsActivated) == 0x000001, "Wrong size on OccupationArea_Setter_IsActivated");
static_assert(offsetof(OccupationArea_Setter_IsActivated, _is_activated) == 0x000000, "Member 'OccupationArea_Setter_IsActivated::_is_activated' has a wrong offset!");

// Function Stigma.OccupationArea.GetMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct OccupationArea_GetMeshComponent final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OccupationArea_GetMeshComponent) == 0x000008, "Wrong alignment on OccupationArea_GetMeshComponent");
static_assert(sizeof(OccupationArea_GetMeshComponent) == 0x000008, "Wrong size on OccupationArea_GetMeshComponent");
static_assert(offsetof(OccupationArea_GetMeshComponent, ReturnValue) == 0x000000, "Member 'OccupationArea_GetMeshComponent::ReturnValue' has a wrong offset!");

// Function Stigma.Occupation_PlayerController.CLIENT_RequestRespawn
// 0x0010 (0x0010 - 0x0000)
struct Occupation_PlayerController_CLIENT_RequestRespawn final
{
public:
	class FString                                 _area_name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Occupation_PlayerController_CLIENT_RequestRespawn) == 0x000008, "Wrong alignment on Occupation_PlayerController_CLIENT_RequestRespawn");
static_assert(sizeof(Occupation_PlayerController_CLIENT_RequestRespawn) == 0x000010, "Wrong size on Occupation_PlayerController_CLIENT_RequestRespawn");
static_assert(offsetof(Occupation_PlayerController_CLIENT_RequestRespawn, _area_name) == 0x000000, "Member 'Occupation_PlayerController_CLIENT_RequestRespawn::_area_name' has a wrong offset!");

// Function Stigma.Occupation_PlayerController.RPC_ALL_OccupyArea
// 0x0018 (0x0018 - 0x0000)
struct Occupation_PlayerController_RPC_ALL_OccupyArea final
{
public:
	class ACharaBase*                             _occupant;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        Prev_team;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2386[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AOccupationArea*                        _area;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Occupation_PlayerController_RPC_ALL_OccupyArea) == 0x000008, "Wrong alignment on Occupation_PlayerController_RPC_ALL_OccupyArea");
static_assert(sizeof(Occupation_PlayerController_RPC_ALL_OccupyArea) == 0x000018, "Wrong size on Occupation_PlayerController_RPC_ALL_OccupyArea");
static_assert(offsetof(Occupation_PlayerController_RPC_ALL_OccupyArea, _occupant) == 0x000000, "Member 'Occupation_PlayerController_RPC_ALL_OccupyArea::_occupant' has a wrong offset!");
static_assert(offsetof(Occupation_PlayerController_RPC_ALL_OccupyArea, Prev_team) == 0x000008, "Member 'Occupation_PlayerController_RPC_ALL_OccupyArea::Prev_team' has a wrong offset!");
static_assert(offsetof(Occupation_PlayerController_RPC_ALL_OccupyArea, _area) == 0x000010, "Member 'Occupation_PlayerController_RPC_ALL_OccupyArea::_area' has a wrong offset!");

// Function Stigma.Occupation_PlayerController.RPC_SERVER_RequestRespawnArea
// 0x0008 (0x0008 - 0x0000)
struct Occupation_PlayerController_RPC_SERVER_RequestRespawnArea final
{
public:
	class AOccupationArea*                        _area;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Occupation_PlayerController_RPC_SERVER_RequestRespawnArea) == 0x000008, "Wrong alignment on Occupation_PlayerController_RPC_SERVER_RequestRespawnArea");
static_assert(sizeof(Occupation_PlayerController_RPC_SERVER_RequestRespawnArea) == 0x000008, "Wrong size on Occupation_PlayerController_RPC_SERVER_RequestRespawnArea");
static_assert(offsetof(Occupation_PlayerController_RPC_SERVER_RequestRespawnArea, _area) == 0x000000, "Member 'Occupation_PlayerController_RPC_SERVER_RequestRespawnArea::_area' has a wrong offset!");

// Function Stigma.OnlineMatch.DestroyServerSession
// 0x0008 (0x0008 - 0x0000)
struct OnlineMatch_DestroyServerSession final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineMatch_DestroyServerSession) == 0x000008, "Wrong alignment on OnlineMatch_DestroyServerSession");
static_assert(sizeof(OnlineMatch_DestroyServerSession) == 0x000008, "Wrong size on OnlineMatch_DestroyServerSession");
static_assert(offsetof(OnlineMatch_DestroyServerSession, _world_ctx) == 0x000000, "Member 'OnlineMatch_DestroyServerSession::_world_ctx' has a wrong offset!");

// Function Stigma.OnlineMatch.GetJoinedSessionMapName
// 0x0018 (0x0018 - 0x0000)
struct OnlineMatch_GetJoinedSessionMapName final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineMatch_GetJoinedSessionMapName) == 0x000008, "Wrong alignment on OnlineMatch_GetJoinedSessionMapName");
static_assert(sizeof(OnlineMatch_GetJoinedSessionMapName) == 0x000018, "Wrong size on OnlineMatch_GetJoinedSessionMapName");
static_assert(offsetof(OnlineMatch_GetJoinedSessionMapName, _world_ctx) == 0x000000, "Member 'OnlineMatch_GetJoinedSessionMapName::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineMatch_GetJoinedSessionMapName, ReturnValue) == 0x000008, "Member 'OnlineMatch_GetJoinedSessionMapName::ReturnValue' has a wrong offset!");

// Function Stigma.OnlineMatch.GetServerSessionStatus
// 0x0010 (0x0010 - 0x0000)
struct OnlineMatch_GetServerSessionStatus final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerSessionStatus                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2387[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(OnlineMatch_GetServerSessionStatus) == 0x000008, "Wrong alignment on OnlineMatch_GetServerSessionStatus");
static_assert(sizeof(OnlineMatch_GetServerSessionStatus) == 0x000010, "Wrong size on OnlineMatch_GetServerSessionStatus");
static_assert(offsetof(OnlineMatch_GetServerSessionStatus, _world_ctx) == 0x000000, "Member 'OnlineMatch_GetServerSessionStatus::_world_ctx' has a wrong offset!");
static_assert(offsetof(OnlineMatch_GetServerSessionStatus, ReturnValue) == 0x000008, "Member 'OnlineMatch_GetServerSessionStatus::ReturnValue' has a wrong offset!");

// Function Stigma.OpeningPlayerController.StartSequence
// 0x0001 (0x0001 - 0x0000)
struct OpeningPlayerController_StartSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpeningPlayerController_StartSequence) == 0x000001, "Wrong alignment on OpeningPlayerController_StartSequence");
static_assert(sizeof(OpeningPlayerController_StartSequence) == 0x000001, "Wrong size on OpeningPlayerController_StartSequence");
static_assert(offsetof(OpeningPlayerController_StartSequence, ReturnValue) == 0x000000, "Member 'OpeningPlayerController_StartSequence::ReturnValue' has a wrong offset!");

// Function Stigma.BriefParty.AddMember
// 0x0010 (0x0010 - 0x0000)
struct BriefParty_AddMember final
{
public:
	class UUserProfile*                           _user;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BriefParty_AddMember) == 0x000008, "Wrong alignment on BriefParty_AddMember");
static_assert(sizeof(BriefParty_AddMember) == 0x000010, "Wrong size on BriefParty_AddMember");
static_assert(offsetof(BriefParty_AddMember, _user) == 0x000000, "Member 'BriefParty_AddMember::_user' has a wrong offset!");
static_assert(offsetof(BriefParty_AddMember, ReturnValue) == 0x000008, "Member 'BriefParty_AddMember::ReturnValue' has a wrong offset!");

// Function Stigma.BriefParty.RemoveMember
// 0x0010 (0x0010 - 0x0000)
struct BriefParty_RemoveMember final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefParty_RemoveMember) == 0x000008, "Wrong alignment on BriefParty_RemoveMember");
static_assert(sizeof(BriefParty_RemoveMember) == 0x000010, "Wrong size on BriefParty_RemoveMember");
static_assert(offsetof(BriefParty_RemoveMember, _user_id) == 0x000000, "Member 'BriefParty_RemoveMember::_user_id' has a wrong offset!");
static_assert(offsetof(BriefParty_RemoveMember, ReturnValue) == 0x000008, "Member 'BriefParty_RemoveMember::ReturnValue' has a wrong offset!");

// Function Stigma.BriefParty.FindMember
// 0x0010 (0x0010 - 0x0000)
struct BriefParty_FindMember final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefParty_FindMember) == 0x000008, "Wrong alignment on BriefParty_FindMember");
static_assert(sizeof(BriefParty_FindMember) == 0x000010, "Wrong size on BriefParty_FindMember");
static_assert(offsetof(BriefParty_FindMember, _user_id) == 0x000000, "Member 'BriefParty_FindMember::_user_id' has a wrong offset!");
static_assert(offsetof(BriefParty_FindMember, ReturnValue) == 0x000008, "Member 'BriefParty_FindMember::ReturnValue' has a wrong offset!");

// Function Stigma.BriefParty.GetMember
// 0x0010 (0x0010 - 0x0000)
struct BriefParty_GetMember final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UUserProfile*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefParty_GetMember) == 0x000008, "Wrong alignment on BriefParty_GetMember");
static_assert(sizeof(BriefParty_GetMember) == 0x000010, "Wrong size on BriefParty_GetMember");
static_assert(offsetof(BriefParty_GetMember, _zidx) == 0x000000, "Member 'BriefParty_GetMember::_zidx' has a wrong offset!");
static_assert(offsetof(BriefParty_GetMember, ReturnValue) == 0x000008, "Member 'BriefParty_GetMember::ReturnValue' has a wrong offset!");

// Function Stigma.BriefParty.GetMemberAt
// 0x0018 (0x0018 - 0x0000)
struct BriefParty_GetMemberAt final
{
public:
	int32                                         _zidx;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserID                                _exception;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefParty_GetMemberAt) == 0x000008, "Wrong alignment on BriefParty_GetMemberAt");
static_assert(sizeof(BriefParty_GetMemberAt) == 0x000018, "Wrong size on BriefParty_GetMemberAt");
static_assert(offsetof(BriefParty_GetMemberAt, _zidx) == 0x000000, "Member 'BriefParty_GetMemberAt::_zidx' has a wrong offset!");
static_assert(offsetof(BriefParty_GetMemberAt, _exception) == 0x000008, "Member 'BriefParty_GetMemberAt::_exception' has a wrong offset!");
static_assert(offsetof(BriefParty_GetMemberAt, ReturnValue) == 0x000010, "Member 'BriefParty_GetMemberAt::ReturnValue' has a wrong offset!");

// Function Stigma.BriefParty.GetMemberCount
// 0x0004 (0x0004 - 0x0000)
struct BriefParty_GetMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefParty_GetMemberCount) == 0x000004, "Wrong alignment on BriefParty_GetMemberCount");
static_assert(sizeof(BriefParty_GetMemberCount) == 0x000004, "Wrong size on BriefParty_GetMemberCount");
static_assert(offsetof(BriefParty_GetMemberCount, ReturnValue) == 0x000000, "Member 'BriefParty_GetMemberCount::ReturnValue' has a wrong offset!");

// Function Stigma.PartyIDBlueprintLibrary.IsEqualPartyID
// 0x0018 (0x0018 - 0x0000)
struct PartyIDBlueprintLibrary_IsEqualPartyID final
{
public:
	struct FPartyID                               _id1;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartyID                               _id2;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PartyIDBlueprintLibrary_IsEqualPartyID) == 0x000008, "Wrong alignment on PartyIDBlueprintLibrary_IsEqualPartyID");
static_assert(sizeof(PartyIDBlueprintLibrary_IsEqualPartyID) == 0x000018, "Wrong size on PartyIDBlueprintLibrary_IsEqualPartyID");
static_assert(offsetof(PartyIDBlueprintLibrary_IsEqualPartyID, _id1) == 0x000000, "Member 'PartyIDBlueprintLibrary_IsEqualPartyID::_id1' has a wrong offset!");
static_assert(offsetof(PartyIDBlueprintLibrary_IsEqualPartyID, _id2) == 0x000008, "Member 'PartyIDBlueprintLibrary_IsEqualPartyID::_id2' has a wrong offset!");
static_assert(offsetof(PartyIDBlueprintLibrary_IsEqualPartyID, ReturnValue) == 0x000010, "Member 'PartyIDBlueprintLibrary_IsEqualPartyID::ReturnValue' has a wrong offset!");

// Function Stigma.PingMarker.OnSetPing
// 0x0001 (0x0001 - 0x0000)
struct PingMarker_OnSetPing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingMarker_OnSetPing) == 0x000001, "Wrong alignment on PingMarker_OnSetPing");
static_assert(sizeof(PingMarker_OnSetPing) == 0x000001, "Wrong size on PingMarker_OnSetPing");
static_assert(offsetof(PingMarker_OnSetPing, ReturnValue) == 0x000000, "Member 'PingMarker_OnSetPing::ReturnValue' has a wrong offset!");

// Function Stigma.PingMarker.SetPing
// 0x0020 (0x0020 - 0x0000)
struct PingMarker_SetPing final
{
public:
	EBattlePingType                               _ping_type;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2390[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _normal;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingMarker_SetPing) == 0x000008, "Wrong alignment on PingMarker_SetPing");
static_assert(sizeof(PingMarker_SetPing) == 0x000020, "Wrong size on PingMarker_SetPing");
static_assert(offsetof(PingMarker_SetPing, _ping_type) == 0x000000, "Member 'PingMarker_SetPing::_ping_type' has a wrong offset!");
static_assert(offsetof(PingMarker_SetPing, _normal) == 0x000008, "Member 'PingMarker_SetPing::_normal' has a wrong offset!");

// Function Stigma.PlayerStart_AI.GetSpawnIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerStart_AI_GetSpawnIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStart_AI_GetSpawnIndex) == 0x000004, "Wrong alignment on PlayerStart_AI_GetSpawnIndex");
static_assert(sizeof(PlayerStart_AI_GetSpawnIndex) == 0x000004, "Wrong size on PlayerStart_AI_GetSpawnIndex");
static_assert(offsetof(PlayerStart_AI_GetSpawnIndex, ReturnValue) == 0x000000, "Member 'PlayerStart_AI_GetSpawnIndex::ReturnValue' has a wrong offset!");

// Function Stigma.PoisonArea.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct PoisonArea_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2395[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoisonArea_OnBeginOverlap) == 0x000008, "Wrong alignment on PoisonArea_OnBeginOverlap");
static_assert(sizeof(PoisonArea_OnBeginOverlap) == 0x000108, "Wrong size on PoisonArea_OnBeginOverlap");
static_assert(offsetof(PoisonArea_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'PoisonArea_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnBeginOverlap, OtherActor) == 0x000008, "Member 'PoisonArea_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnBeginOverlap, OtherComp) == 0x000010, "Member 'PoisonArea_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PoisonArea_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'PoisonArea_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnBeginOverlap, SweepResult) == 0x000020, "Member 'PoisonArea_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stigma.PoisonArea.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PoisonArea_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2396[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PoisonArea_OnEndOverlap) == 0x000008, "Wrong alignment on PoisonArea_OnEndOverlap");
static_assert(sizeof(PoisonArea_OnEndOverlap) == 0x000020, "Wrong size on PoisonArea_OnEndOverlap");
static_assert(offsetof(PoisonArea_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'PoisonArea_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnEndOverlap, OtherActor) == 0x000008, "Member 'PoisonArea_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnEndOverlap, OtherComp) == 0x000010, "Member 'PoisonArea_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PoisonArea_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'PoisonArea_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stigma.PoisonArea.OnLoadSettings
// 0x0070 (0x0070 - 0x0000)
struct PoisonArea_OnLoadSettings final
{
public:
	struct FConfig_PoisonArea                     _settings;                                         // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoisonArea_OnLoadSettings) == 0x000008, "Wrong alignment on PoisonArea_OnLoadSettings");
static_assert(sizeof(PoisonArea_OnLoadSettings) == 0x000070, "Wrong size on PoisonArea_OnLoadSettings");
static_assert(offsetof(PoisonArea_OnLoadSettings, _settings) == 0x000000, "Member 'PoisonArea_OnLoadSettings::_settings' has a wrong offset!");

// Function Stigma.PoisonArea.SetUniqueEffect
// 0x0010 (0x0010 - 0x0000)
struct PoisonArea_SetUniqueEffect final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_effected;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2397[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PoisonArea_SetUniqueEffect) == 0x000008, "Wrong alignment on PoisonArea_SetUniqueEffect");
static_assert(sizeof(PoisonArea_SetUniqueEffect) == 0x000010, "Wrong size on PoisonArea_SetUniqueEffect");
static_assert(offsetof(PoisonArea_SetUniqueEffect, _chara) == 0x000000, "Member 'PoisonArea_SetUniqueEffect::_chara' has a wrong offset!");
static_assert(offsetof(PoisonArea_SetUniqueEffect, _is_effected) == 0x000008, "Member 'PoisonArea_SetUniqueEffect::_is_effected' has a wrong offset!");
static_assert(offsetof(PoisonArea_SetUniqueEffect, ReturnValue) == 0x000009, "Member 'PoisonArea_SetUniqueEffect::ReturnValue' has a wrong offset!");

// Function Stigma.PoisonArea.Start
// 0x0018 (0x0018 - 0x0000)
struct PoisonArea_Start final
{
public:
	class ACharaBase*                             _thrower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjectBase*                            _weapon_obj;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 _op_id;                                            // 0x0010(0x0006)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2398[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PoisonArea_Start) == 0x000008, "Wrong alignment on PoisonArea_Start");
static_assert(sizeof(PoisonArea_Start) == 0x000018, "Wrong size on PoisonArea_Start");
static_assert(offsetof(PoisonArea_Start, _thrower) == 0x000000, "Member 'PoisonArea_Start::_thrower' has a wrong offset!");
static_assert(offsetof(PoisonArea_Start, _weapon_obj) == 0x000008, "Member 'PoisonArea_Start::_weapon_obj' has a wrong offset!");
static_assert(offsetof(PoisonArea_Start, _op_id) == 0x000010, "Member 'PoisonArea_Start::_op_id' has a wrong offset!");

// Function Stigma.PoolActor.AddWave
// 0x0018 (0x0018 - 0x0000)
struct PoolActor_AddWave final
{
public:
	struct FVector                                _ws_pos;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoolActor_AddWave) == 0x000008, "Wrong alignment on PoolActor_AddWave");
static_assert(sizeof(PoolActor_AddWave) == 0x000018, "Wrong size on PoolActor_AddWave");
static_assert(offsetof(PoolActor_AddWave, _ws_pos) == 0x000000, "Member 'PoolActor_AddWave::_ws_pos' has a wrong offset!");

// Function Stigma.PoolActor.BeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct PoolActor_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoolActor_BeginOverlap) == 0x000008, "Wrong alignment on PoolActor_BeginOverlap");
static_assert(sizeof(PoolActor_BeginOverlap) == 0x000108, "Wrong size on PoolActor_BeginOverlap");
static_assert(offsetof(PoolActor_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'PoolActor_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoolActor_BeginOverlap, OtherActor) == 0x000008, "Member 'PoolActor_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PoolActor_BeginOverlap, OtherComp) == 0x000010, "Member 'PoolActor_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PoolActor_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PoolActor_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PoolActor_BeginOverlap, bFromSweep) == 0x00001C, "Member 'PoolActor_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PoolActor_BeginOverlap, SweepResult) == 0x000020, "Member 'PoolActor_BeginOverlap::SweepResult' has a wrong offset!");

// Function Stigma.PoolActor.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PoolActor_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PoolActor_EndOverlap) == 0x000008, "Wrong alignment on PoolActor_EndOverlap");
static_assert(sizeof(PoolActor_EndOverlap) == 0x000020, "Wrong size on PoolActor_EndOverlap");
static_assert(offsetof(PoolActor_EndOverlap, OverlappedComp) == 0x000000, "Member 'PoolActor_EndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(PoolActor_EndOverlap, OtherActor) == 0x000008, "Member 'PoolActor_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PoolActor_EndOverlap, OtherComp) == 0x000010, "Member 'PoolActor_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PoolActor_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'PoolActor_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stigma.PoolActor.GetHeightRT
// 0x0010 (0x0010 - 0x0000)
struct PoolActor_GetHeightRT final
{
public:
	int32                                         _RT_idx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoolActor_GetHeightRT) == 0x000008, "Wrong alignment on PoolActor_GetHeightRT");
static_assert(sizeof(PoolActor_GetHeightRT) == 0x000010, "Wrong size on PoolActor_GetHeightRT");
static_assert(offsetof(PoolActor_GetHeightRT, _RT_idx) == 0x000000, "Member 'PoolActor_GetHeightRT::_RT_idx' has a wrong offset!");
static_assert(offsetof(PoolActor_GetHeightRT, ReturnValue) == 0x000008, "Member 'PoolActor_GetHeightRT::ReturnValue' has a wrong offset!");

// Function Stigma.PoolActor.GetLastHeight
// 0x0010 (0x0010 - 0x0000)
struct PoolActor_GetLastHeight final
{
public:
	int32                                         _current_height_idx;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _num_frames_old;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoolActor_GetLastHeight) == 0x000008, "Wrong alignment on PoolActor_GetLastHeight");
static_assert(sizeof(PoolActor_GetLastHeight) == 0x000010, "Wrong size on PoolActor_GetLastHeight");
static_assert(offsetof(PoolActor_GetLastHeight, _current_height_idx) == 0x000000, "Member 'PoolActor_GetLastHeight::_current_height_idx' has a wrong offset!");
static_assert(offsetof(PoolActor_GetLastHeight, _num_frames_old) == 0x000004, "Member 'PoolActor_GetLastHeight::_num_frames_old' has a wrong offset!");
static_assert(offsetof(PoolActor_GetLastHeight, ReturnValue) == 0x000008, "Member 'PoolActor_GetLastHeight::ReturnValue' has a wrong offset!");

// Function Stigma.Popup_Competition.OnACK_GetCompetitionPlayers
// 0x0038 (0x0038 - 0x0000)
struct Popup_Competition_OnACK_GetCompetitionPlayers final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadCompetitionPlayers            _ack;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Popup_Competition_OnACK_GetCompetitionPlayers) == 0x000008, "Wrong alignment on Popup_Competition_OnACK_GetCompetitionPlayers");
static_assert(sizeof(Popup_Competition_OnACK_GetCompetitionPlayers) == 0x000038, "Wrong size on Popup_Competition_OnACK_GetCompetitionPlayers");
static_assert(offsetof(Popup_Competition_OnACK_GetCompetitionPlayers, _rcode) == 0x000000, "Member 'Popup_Competition_OnACK_GetCompetitionPlayers::_rcode' has a wrong offset!");
static_assert(offsetof(Popup_Competition_OnACK_GetCompetitionPlayers, _ack) == 0x000008, "Member 'Popup_Competition_OnACK_GetCompetitionPlayers::_ack' has a wrong offset!");
static_assert(offsetof(Popup_Competition_OnACK_GetCompetitionPlayers, ReturnValue) == 0x000018, "Member 'Popup_Competition_OnACK_GetCompetitionPlayers::ReturnValue' has a wrong offset!");

// Function Stigma.Popup_Competition.Setter_CurCompetitionType
// 0x0001 (0x0001 - 0x0000)
struct Popup_Competition_Setter_CurCompetitionType final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Popup_Competition_Setter_CurCompetitionType) == 0x000001, "Wrong alignment on Popup_Competition_Setter_CurCompetitionType");
static_assert(sizeof(Popup_Competition_Setter_CurCompetitionType) == 0x000001, "Wrong size on Popup_Competition_Setter_CurCompetitionType");
static_assert(offsetof(Popup_Competition_Setter_CurCompetitionType, _competition_type) == 0x000000, "Member 'Popup_Competition_Setter_CurCompetitionType::_competition_type' has a wrong offset!");

// Function Stigma.Popup_EnterAccount.SetAccount
// 0x0020 (0x0020 - 0x0000)
struct Popup_EnterAccount_SetAccount final
{
public:
	class FString                                 _account_id;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _pw;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Popup_EnterAccount_SetAccount) == 0x000008, "Wrong alignment on Popup_EnterAccount_SetAccount");
static_assert(sizeof(Popup_EnterAccount_SetAccount) == 0x000020, "Wrong size on Popup_EnterAccount_SetAccount");
static_assert(offsetof(Popup_EnterAccount_SetAccount, _account_id) == 0x000000, "Member 'Popup_EnterAccount_SetAccount::_account_id' has a wrong offset!");
static_assert(offsetof(Popup_EnterAccount_SetAccount, _pw) == 0x000010, "Member 'Popup_EnterAccount_SetAccount::_pw' has a wrong offset!");

// Function Stigma.Popup_EnterNickname.OnError
// 0x0002 (0x0002 - 0x0000)
struct Popup_EnterNickname_OnError final
{
public:
	EResultCode                                   _code;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Popup_EnterNickname_OnError) == 0x000001, "Wrong alignment on Popup_EnterNickname_OnError");
static_assert(sizeof(Popup_EnterNickname_OnError) == 0x000002, "Wrong size on Popup_EnterNickname_OnError");
static_assert(offsetof(Popup_EnterNickname_OnError, _code) == 0x000000, "Member 'Popup_EnterNickname_OnError::_code' has a wrong offset!");
static_assert(offsetof(Popup_EnterNickname_OnError, ReturnValue) == 0x000001, "Member 'Popup_EnterNickname_OnError::ReturnValue' has a wrong offset!");

// Function Stigma.Popup_EnterNickname.SetNickname
// 0x0010 (0x0010 - 0x0000)
struct Popup_EnterNickname_SetNickname final
{
public:
	class FString                                 _nick;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Popup_EnterNickname_SetNickname) == 0x000008, "Wrong alignment on Popup_EnterNickname_SetNickname");
static_assert(sizeof(Popup_EnterNickname_SetNickname) == 0x000010, "Wrong size on Popup_EnterNickname_SetNickname");
static_assert(offsetof(Popup_EnterNickname_SetNickname, _nick) == 0x000000, "Member 'Popup_EnterNickname_SetNickname::_nick' has a wrong offset!");

// Function Stigma.Record_KillStreak_ListItemData.GetCount
// 0x0004 (0x0004 - 0x0000)
struct Record_KillStreak_ListItemData_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Record_KillStreak_ListItemData_GetCount) == 0x000004, "Wrong alignment on Record_KillStreak_ListItemData_GetCount");
static_assert(sizeof(Record_KillStreak_ListItemData_GetCount) == 0x000004, "Wrong size on Record_KillStreak_ListItemData_GetCount");
static_assert(offsetof(Record_KillStreak_ListItemData_GetCount, ReturnValue) == 0x000000, "Member 'Record_KillStreak_ListItemData_GetCount::ReturnValue' has a wrong offset!");

// Function Stigma.Record_KillStreak_ListItemData.GetTooltipModeCountText
// 0x0018 (0x0018 - 0x0000)
struct Record_KillStreak_ListItemData_GetTooltipModeCountText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Record_KillStreak_ListItemData_GetTooltipModeCountText) == 0x000008, "Wrong alignment on Record_KillStreak_ListItemData_GetTooltipModeCountText");
static_assert(sizeof(Record_KillStreak_ListItemData_GetTooltipModeCountText) == 0x000018, "Wrong size on Record_KillStreak_ListItemData_GetTooltipModeCountText");
static_assert(offsetof(Record_KillStreak_ListItemData_GetTooltipModeCountText, ReturnValue) == 0x000000, "Member 'Record_KillStreak_ListItemData_GetTooltipModeCountText::ReturnValue' has a wrong offset!");

// Function Stigma.Record_KillStreak_ListItemData.GetKillStreak
// 0x0001 (0x0001 - 0x0000)
struct Record_KillStreak_ListItemData_GetKillStreak final
{
public:
	EKillStreak                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Record_KillStreak_ListItemData_GetKillStreak) == 0x000001, "Wrong alignment on Record_KillStreak_ListItemData_GetKillStreak");
static_assert(sizeof(Record_KillStreak_ListItemData_GetKillStreak) == 0x000001, "Wrong size on Record_KillStreak_ListItemData_GetKillStreak");
static_assert(offsetof(Record_KillStreak_ListItemData_GetKillStreak, ReturnValue) == 0x000000, "Member 'Record_KillStreak_ListItemData_GetKillStreak::ReturnValue' has a wrong offset!");

// Function Stigma.Record_KillStreak_ListItemData.GetModeCounts
// 0x0050 (0x0050 - 0x0000)
struct Record_KillStreak_ListItemData_GetModeCounts final
{
public:
	TMap<EGameMode, int32>                        ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Record_KillStreak_ListItemData_GetModeCounts) == 0x000008, "Wrong alignment on Record_KillStreak_ListItemData_GetModeCounts");
static_assert(sizeof(Record_KillStreak_ListItemData_GetModeCounts) == 0x000050, "Wrong size on Record_KillStreak_ListItemData_GetModeCounts");
static_assert(offsetof(Record_KillStreak_ListItemData_GetModeCounts, ReturnValue) == 0x000000, "Member 'Record_KillStreak_ListItemData_GetModeCounts::ReturnValue' has a wrong offset!");

// Function Stigma.RewardHelper.GetAllAccessoryID
// 0x0028 (0x0028 - 0x0000)
struct RewardHelper_GetAllAccessoryID final
{
public:
	TArray<struct FRewardItem>                    _reward_items;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FItemID>                        _out_accessory_id;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A5[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(RewardHelper_GetAllAccessoryID) == 0x000008, "Wrong alignment on RewardHelper_GetAllAccessoryID");
static_assert(sizeof(RewardHelper_GetAllAccessoryID) == 0x000028, "Wrong size on RewardHelper_GetAllAccessoryID");
static_assert(offsetof(RewardHelper_GetAllAccessoryID, _reward_items) == 0x000000, "Member 'RewardHelper_GetAllAccessoryID::_reward_items' has a wrong offset!");
static_assert(offsetof(RewardHelper_GetAllAccessoryID, _out_accessory_id) == 0x000010, "Member 'RewardHelper_GetAllAccessoryID::_out_accessory_id' has a wrong offset!");
static_assert(offsetof(RewardHelper_GetAllAccessoryID, ReturnValue) == 0x000020, "Member 'RewardHelper_GetAllAccessoryID::ReturnValue' has a wrong offset!");

// Function Stigma.RewardHelper.GetAllGunPartsID
// 0x0028 (0x0028 - 0x0000)
struct RewardHelper_GetAllGunPartsID final
{
public:
	TArray<struct FRewardItem>                    _reward_items;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FItemID>                        _out_parts_id;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(RewardHelper_GetAllGunPartsID) == 0x000008, "Wrong alignment on RewardHelper_GetAllGunPartsID");
static_assert(sizeof(RewardHelper_GetAllGunPartsID) == 0x000028, "Wrong size on RewardHelper_GetAllGunPartsID");
static_assert(offsetof(RewardHelper_GetAllGunPartsID, _reward_items) == 0x000000, "Member 'RewardHelper_GetAllGunPartsID::_reward_items' has a wrong offset!");
static_assert(offsetof(RewardHelper_GetAllGunPartsID, _out_parts_id) == 0x000010, "Member 'RewardHelper_GetAllGunPartsID::_out_parts_id' has a wrong offset!");
static_assert(offsetof(RewardHelper_GetAllGunPartsID, ReturnValue) == 0x000020, "Member 'RewardHelper_GetAllGunPartsID::ReturnValue' has a wrong offset!");

// Function Stigma.RewardHelper.IsRewardItemHasDuration
// 0x0020 (0x0020 - 0x0000)
struct RewardHelper_IsRewardItemHasDuration final
{
public:
	struct FRewardItem                            _reward_item;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _out_is_permanent;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A7[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(RewardHelper_IsRewardItemHasDuration) == 0x000008, "Wrong alignment on RewardHelper_IsRewardItemHasDuration");
static_assert(sizeof(RewardHelper_IsRewardItemHasDuration) == 0x000020, "Wrong size on RewardHelper_IsRewardItemHasDuration");
static_assert(offsetof(RewardHelper_IsRewardItemHasDuration, _reward_item) == 0x000000, "Member 'RewardHelper_IsRewardItemHasDuration::_reward_item' has a wrong offset!");
static_assert(offsetof(RewardHelper_IsRewardItemHasDuration, _out_is_permanent) == 0x000018, "Member 'RewardHelper_IsRewardItemHasDuration::_out_is_permanent' has a wrong offset!");
static_assert(offsetof(RewardHelper_IsRewardItemHasDuration, ReturnValue) == 0x000019, "Member 'RewardHelper_IsRewardItemHasDuration::ReturnValue' has a wrong offset!");

// Function Stigma.RollingBase.RPC_ALL_Hit_Rolling
// 0x00A8 (0x00A8 - 0x0000)
struct RollingBase_RPC_ALL_Hit_Rolling final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RollingBase_RPC_ALL_Hit_Rolling) == 0x000008, "Wrong alignment on RollingBase_RPC_ALL_Hit_Rolling");
static_assert(sizeof(RollingBase_RPC_ALL_Hit_Rolling) == 0x0000A8, "Wrong size on RollingBase_RPC_ALL_Hit_Rolling");
static_assert(offsetof(RollingBase_RPC_ALL_Hit_Rolling, _hit) == 0x000000, "Member 'RollingBase_RPC_ALL_Hit_Rolling::_hit' has a wrong offset!");

// Function Stigma.RollingBase.RPC_ALL_StartRolling
// 0x0040 (0x0040 - 0x0000)
struct RollingBase_RPC_ALL_StartRolling final
{
public:
	struct FRollingParams                         _rolling_params;                                   // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RollingBase_RPC_ALL_StartRolling) == 0x000008, "Wrong alignment on RollingBase_RPC_ALL_StartRolling");
static_assert(sizeof(RollingBase_RPC_ALL_StartRolling) == 0x000040, "Wrong size on RollingBase_RPC_ALL_StartRolling");
static_assert(offsetof(RollingBase_RPC_ALL_StartRolling, _rolling_params) == 0x000000, "Member 'RollingBase_RPC_ALL_StartRolling::_rolling_params' has a wrong offset!");

// Function Stigma.RollingBase.SERVER_RequestRolling
// 0x0038 (0x0038 - 0x0000)
struct RollingBase_SERVER_RequestRolling final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   _attack_type;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _target_point;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max_dist;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Speed;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _radius;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gravity_scale;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RollingBase_SERVER_RequestRolling) == 0x000008, "Wrong alignment on RollingBase_SERVER_RequestRolling");
static_assert(sizeof(RollingBase_SERVER_RequestRolling) == 0x000038, "Wrong size on RollingBase_SERVER_RequestRolling");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _Actor) == 0x000000, "Member 'RollingBase_SERVER_RequestRolling::_Actor' has a wrong offset!");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _attack_type) == 0x000008, "Member 'RollingBase_SERVER_RequestRolling::_attack_type' has a wrong offset!");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _target_point) == 0x000010, "Member 'RollingBase_SERVER_RequestRolling::_target_point' has a wrong offset!");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _max_dist) == 0x000028, "Member 'RollingBase_SERVER_RequestRolling::_max_dist' has a wrong offset!");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _Speed) == 0x00002C, "Member 'RollingBase_SERVER_RequestRolling::_Speed' has a wrong offset!");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _radius) == 0x000030, "Member 'RollingBase_SERVER_RequestRolling::_radius' has a wrong offset!");
static_assert(offsetof(RollingBase_SERVER_RequestRolling, _gravity_scale) == 0x000034, "Member 'RollingBase_SERVER_RequestRolling::_gravity_scale' has a wrong offset!");

// Function Stigma.SanctumArea.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SanctumArea_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    _comp;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _other_actor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _other_comp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx_body;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _from_sweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AC[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitResult                             _hit;                                              // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SanctumArea_OnBeginOverlap) == 0x000008, "Wrong alignment on SanctumArea_OnBeginOverlap");
static_assert(sizeof(SanctumArea_OnBeginOverlap) == 0x000108, "Wrong size on SanctumArea_OnBeginOverlap");
static_assert(offsetof(SanctumArea_OnBeginOverlap, _comp) == 0x000000, "Member 'SanctumArea_OnBeginOverlap::_comp' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnBeginOverlap, _other_actor) == 0x000008, "Member 'SanctumArea_OnBeginOverlap::_other_actor' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnBeginOverlap, _other_comp) == 0x000010, "Member 'SanctumArea_OnBeginOverlap::_other_comp' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnBeginOverlap, _idx_body) == 0x000018, "Member 'SanctumArea_OnBeginOverlap::_idx_body' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnBeginOverlap, _from_sweep) == 0x00001C, "Member 'SanctumArea_OnBeginOverlap::_from_sweep' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnBeginOverlap, _hit) == 0x000020, "Member 'SanctumArea_OnBeginOverlap::_hit' has a wrong offset!");

// Function Stigma.SanctumArea.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SanctumArea_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    _comp;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _other_actor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    _other_comp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx_body;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AD[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SanctumArea_OnEndOverlap) == 0x000008, "Wrong alignment on SanctumArea_OnEndOverlap");
static_assert(sizeof(SanctumArea_OnEndOverlap) == 0x000020, "Wrong size on SanctumArea_OnEndOverlap");
static_assert(offsetof(SanctumArea_OnEndOverlap, _comp) == 0x000000, "Member 'SanctumArea_OnEndOverlap::_comp' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnEndOverlap, _other_actor) == 0x000008, "Member 'SanctumArea_OnEndOverlap::_other_actor' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnEndOverlap, _other_comp) == 0x000010, "Member 'SanctumArea_OnEndOverlap::_other_comp' has a wrong offset!");
static_assert(offsetof(SanctumArea_OnEndOverlap, _idx_body) == 0x000018, "Member 'SanctumArea_OnEndOverlap::_idx_body' has a wrong offset!");

// Function Stigma.Service.ActivateBattlePass
// 0x0028 (0x0028 - 0x0000)
struct Service_ActivateBattlePass final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_BattlePassActivate& _ack)> _proc;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ActivateBattlePass) == 0x000008, "Wrong alignment on Service_ActivateBattlePass");
static_assert(sizeof(Service_ActivateBattlePass) == 0x000028, "Wrong size on Service_ActivateBattlePass");
static_assert(offsetof(Service_ActivateBattlePass, _world_ctx) == 0x000000, "Member 'Service_ActivateBattlePass::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ActivateBattlePass, _pass_id) == 0x000008, "Member 'Service_ActivateBattlePass::_pass_id' has a wrong offset!");
static_assert(offsetof(Service_ActivateBattlePass, _proc) == 0x000018, "Member 'Service_ActivateBattlePass::_proc' has a wrong offset!");

// Function Stigma.Service.ActivateCoupon
// 0x0028 (0x0028 - 0x0000)
struct Service_ActivateCoupon final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _coupon_code;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ActivateCoupon& _ack)> _proc;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ActivateCoupon) == 0x000008, "Wrong alignment on Service_ActivateCoupon");
static_assert(sizeof(Service_ActivateCoupon) == 0x000028, "Wrong size on Service_ActivateCoupon");
static_assert(offsetof(Service_ActivateCoupon, _world_ctx) == 0x000000, "Member 'Service_ActivateCoupon::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ActivateCoupon, _coupon_code) == 0x000008, "Member 'Service_ActivateCoupon::_coupon_code' has a wrong offset!");
static_assert(offsetof(Service_ActivateCoupon, _proc) == 0x000018, "Member 'Service_ActivateCoupon::_proc' has a wrong offset!");

// Function Stigma.Service.ActivateFunction
// 0x0020 (0x0020 - 0x0000)
struct Service_ActivateFunction final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItem*                             _item;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _code, struct FACK_ActivateFunction& _ack)> _proc;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ActivateFunction) == 0x000008, "Wrong alignment on Service_ActivateFunction");
static_assert(sizeof(Service_ActivateFunction) == 0x000020, "Wrong size on Service_ActivateFunction");
static_assert(offsetof(Service_ActivateFunction, _world_ctx) == 0x000000, "Member 'Service_ActivateFunction::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ActivateFunction, _item) == 0x000008, "Member 'Service_ActivateFunction::_item' has a wrong offset!");
static_assert(offsetof(Service_ActivateFunction, _proc) == 0x000010, "Member 'Service_ActivateFunction::_proc' has a wrong offset!");

// Function Stigma.Service.AddWishedGameMode
// 0x0010 (0x0010 - 0x0000)
struct Service_AddWishedGameMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23AF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_AddWishedGameMode) == 0x000008, "Wrong alignment on Service_AddWishedGameMode");
static_assert(sizeof(Service_AddWishedGameMode) == 0x000010, "Wrong size on Service_AddWishedGameMode");
static_assert(offsetof(Service_AddWishedGameMode, _world_ctx) == 0x000000, "Member 'Service_AddWishedGameMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_AddWishedGameMode, _game_mode) == 0x000008, "Member 'Service_AddWishedGameMode::_game_mode' has a wrong offset!");

// Function Stigma.Service.ApplyPreviewCharacterSettings
// 0x0020 (0x0020 - 0x0000)
struct Service_ApplyPreviewCharacterSettings final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FApiResult& _ack)> _proc;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ApplyPreviewCharacterSettings) == 0x000008, "Wrong alignment on Service_ApplyPreviewCharacterSettings");
static_assert(sizeof(Service_ApplyPreviewCharacterSettings) == 0x000020, "Wrong size on Service_ApplyPreviewCharacterSettings");
static_assert(offsetof(Service_ApplyPreviewCharacterSettings, _world_ctx) == 0x000000, "Member 'Service_ApplyPreviewCharacterSettings::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ApplyPreviewCharacterSettings, _user_id) == 0x000008, "Member 'Service_ApplyPreviewCharacterSettings::_user_id' has a wrong offset!");
static_assert(offsetof(Service_ApplyPreviewCharacterSettings, _proc) == 0x000010, "Member 'Service_ApplyPreviewCharacterSettings::_proc' has a wrong offset!");

// Function Stigma.Service.AskFriend
// 0x0038 (0x0038 - 0x0000)
struct Service_AskFriend final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _target_user_id;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _nickname;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_Friend& _ack)> _proc;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_AskFriend) == 0x000008, "Wrong alignment on Service_AskFriend");
static_assert(sizeof(Service_AskFriend) == 0x000038, "Wrong size on Service_AskFriend");
static_assert(offsetof(Service_AskFriend, _world_ctx) == 0x000000, "Member 'Service_AskFriend::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_AskFriend, _target_user_id) == 0x000008, "Member 'Service_AskFriend::_target_user_id' has a wrong offset!");
static_assert(offsetof(Service_AskFriend, _nickname) == 0x000010, "Member 'Service_AskFriend::_nickname' has a wrong offset!");
static_assert(offsetof(Service_AskFriend, _proc) == 0x000028, "Member 'Service_AskFriend::_proc' has a wrong offset!");

// Function Stigma.Service.AutoRewardMission
// 0x0008 (0x0008 - 0x0000)
struct Service_AutoRewardMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_AutoRewardMission) == 0x000008, "Wrong alignment on Service_AutoRewardMission");
static_assert(sizeof(Service_AutoRewardMission) == 0x000008, "Wrong size on Service_AutoRewardMission");
static_assert(offsetof(Service_AutoRewardMission, _world_ctx) == 0x000000, "Member 'Service_AutoRewardMission::_world_ctx' has a wrong offset!");

// Function Stigma.Service.BookmarkPassMission
// 0x0040 (0x0040 - 0x0000)
struct Service_BookmarkPassMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B0[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        _mission_id;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_MissionBookmark& _ack)> _proc;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_BookmarkPassMission) == 0x000008, "Wrong alignment on Service_BookmarkPassMission");
static_assert(sizeof(Service_BookmarkPassMission) == 0x000040, "Wrong size on Service_BookmarkPassMission");
static_assert(offsetof(Service_BookmarkPassMission, _world_ctx) == 0x000000, "Member 'Service_BookmarkPassMission::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_BookmarkPassMission, _pass_id) == 0x000008, "Member 'Service_BookmarkPassMission::_pass_id' has a wrong offset!");
static_assert(offsetof(Service_BookmarkPassMission, _idx) == 0x000018, "Member 'Service_BookmarkPassMission::_idx' has a wrong offset!");
static_assert(offsetof(Service_BookmarkPassMission, _mission_id) == 0x000020, "Member 'Service_BookmarkPassMission::_mission_id' has a wrong offset!");
static_assert(offsetof(Service_BookmarkPassMission, _proc) == 0x000030, "Member 'Service_BookmarkPassMission::_proc' has a wrong offset!");

// Function Stigma.Service.BuyGoods
// 0x0048 (0x0048 - 0x0000)
struct Service_BuyGoods final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDPlain                           _goods_item;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCurrencyPlain                         _using_currency;                                   // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_BuyGoods& _ack)> _proc;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_BuyGoods) == 0x000008, "Wrong alignment on Service_BuyGoods");
static_assert(sizeof(Service_BuyGoods) == 0x000048, "Wrong size on Service_BuyGoods");
static_assert(offsetof(Service_BuyGoods, _world_ctx) == 0x000000, "Member 'Service_BuyGoods::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_BuyGoods, _goods_item) == 0x000008, "Member 'Service_BuyGoods::_goods_item' has a wrong offset!");
static_assert(offsetof(Service_BuyGoods, _using_currency) == 0x000020, "Member 'Service_BuyGoods::_using_currency' has a wrong offset!");
static_assert(offsetof(Service_BuyGoods, _proc) == 0x000038, "Member 'Service_BuyGoods::_proc' has a wrong offset!");

// Function Stigma.Service.BuyRecruit
// 0x0048 (0x0048 - 0x0000)
struct Service_BuyRecruit final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Recruit                        _recruit_id;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _recruit_count_index;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Currency                       _use_currency_id;                                  // 0x0020(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _use_currency_amount;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_BuyRecruit& _ack)> _proc;                                             // 0x0034(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B2[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_BuyRecruit) == 0x000008, "Wrong alignment on Service_BuyRecruit");
static_assert(sizeof(Service_BuyRecruit) == 0x000048, "Wrong size on Service_BuyRecruit");
static_assert(offsetof(Service_BuyRecruit, _world_ctx) == 0x000000, "Member 'Service_BuyRecruit::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_BuyRecruit, _recruit_id) == 0x000008, "Member 'Service_BuyRecruit::_recruit_id' has a wrong offset!");
static_assert(offsetof(Service_BuyRecruit, _recruit_count_index) == 0x000018, "Member 'Service_BuyRecruit::_recruit_count_index' has a wrong offset!");
static_assert(offsetof(Service_BuyRecruit, _use_currency_id) == 0x000020, "Member 'Service_BuyRecruit::_use_currency_id' has a wrong offset!");
static_assert(offsetof(Service_BuyRecruit, _use_currency_amount) == 0x000030, "Member 'Service_BuyRecruit::_use_currency_amount' has a wrong offset!");
static_assert(offsetof(Service_BuyRecruit, _proc) == 0x000034, "Member 'Service_BuyRecruit::_proc' has a wrong offset!");

// Function Stigma.Service.CancelMatchMaking
// 0x0020 (0x0020 - 0x0000)
struct Service_CancelMatchMaking final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FApiResult& _ack)> _proc;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_CancelMatchMaking) == 0x000008, "Wrong alignment on Service_CancelMatchMaking");
static_assert(sizeof(Service_CancelMatchMaking) == 0x000020, "Wrong size on Service_CancelMatchMaking");
static_assert(offsetof(Service_CancelMatchMaking, _world_ctx) == 0x000000, "Member 'Service_CancelMatchMaking::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_CancelMatchMaking, _user_id) == 0x000008, "Member 'Service_CancelMatchMaking::_user_id' has a wrong offset!");
static_assert(offsetof(Service_CancelMatchMaking, _proc) == 0x000010, "Member 'Service_CancelMatchMaking::_proc' has a wrong offset!");

// Function Stigma.Service.CanStartMatchMaking
// 0x0010 (0x0010 - 0x0000)
struct Service_CanStartMatchMaking final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_CanStartMatchMaking) == 0x000008, "Wrong alignment on Service_CanStartMatchMaking");
static_assert(sizeof(Service_CanStartMatchMaking) == 0x000010, "Wrong size on Service_CanStartMatchMaking");
static_assert(offsetof(Service_CanStartMatchMaking, _world_ctx) == 0x000000, "Member 'Service_CanStartMatchMaking::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_CanStartMatchMaking, ReturnValue) == 0x000008, "Member 'Service_CanStartMatchMaking::ReturnValue' has a wrong offset!");

// Function Stigma.Service.ChangeMission
// 0x0040 (0x0040 - 0x0000)
struct Service_ChangeMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _task_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        _mission_id;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_MissionChange& _ack)> _proc;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ChangeMission) == 0x000008, "Wrong alignment on Service_ChangeMission");
static_assert(sizeof(Service_ChangeMission) == 0x000040, "Wrong size on Service_ChangeMission");
static_assert(offsetof(Service_ChangeMission, _world_ctx) == 0x000000, "Member 'Service_ChangeMission::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ChangeMission, _task_id) == 0x000008, "Member 'Service_ChangeMission::_task_id' has a wrong offset!");
static_assert(offsetof(Service_ChangeMission, _idx) == 0x000018, "Member 'Service_ChangeMission::_idx' has a wrong offset!");
static_assert(offsetof(Service_ChangeMission, _mission_id) == 0x000020, "Member 'Service_ChangeMission::_mission_id' has a wrong offset!");
static_assert(offsetof(Service_ChangeMission, _proc) == 0x000030, "Member 'Service_ChangeMission::_proc' has a wrong offset!");

// Function Stigma.Service.ChangeNickname
// 0x0030 (0x0030 - 0x0000)
struct Service_ChangeNickname final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItem*                             _item;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _nickname;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode)>           _proc;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ChangeNickname) == 0x000008, "Wrong alignment on Service_ChangeNickname");
static_assert(sizeof(Service_ChangeNickname) == 0x000030, "Wrong size on Service_ChangeNickname");
static_assert(offsetof(Service_ChangeNickname, _world_ctx) == 0x000000, "Member 'Service_ChangeNickname::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ChangeNickname, _item) == 0x000008, "Member 'Service_ChangeNickname::_item' has a wrong offset!");
static_assert(offsetof(Service_ChangeNickname, _nickname) == 0x000010, "Member 'Service_ChangeNickname::_nickname' has a wrong offset!");
static_assert(offsetof(Service_ChangeNickname, _proc) == 0x000020, "Member 'Service_ChangeNickname::_proc' has a wrong offset!");

// Function Stigma.Service.DeleteFriend
// 0x0020 (0x0020 - 0x0000)
struct Service_DeleteFriend final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _target_user_id;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, const struct FUserID& _user_id)> _proc;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_DeleteFriend) == 0x000008, "Wrong alignment on Service_DeleteFriend");
static_assert(sizeof(Service_DeleteFriend) == 0x000020, "Wrong size on Service_DeleteFriend");
static_assert(offsetof(Service_DeleteFriend, _world_ctx) == 0x000000, "Member 'Service_DeleteFriend::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_DeleteFriend, _target_user_id) == 0x000008, "Member 'Service_DeleteFriend::_target_user_id' has a wrong offset!");
static_assert(offsetof(Service_DeleteFriend, _proc) == 0x000010, "Member 'Service_DeleteFriend::_proc' has a wrong offset!");

// Function Stigma.Service.DISCORD_StartBattle
// 0x0008 (0x0008 - 0x0000)
struct Service_DISCORD_StartBattle final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_DISCORD_StartBattle) == 0x000008, "Wrong alignment on Service_DISCORD_StartBattle");
static_assert(sizeof(Service_DISCORD_StartBattle) == 0x000008, "Wrong size on Service_DISCORD_StartBattle");
static_assert(offsetof(Service_DISCORD_StartBattle, _world_ctx) == 0x000000, "Member 'Service_DISCORD_StartBattle::_world_ctx' has a wrong offset!");

// Function Stigma.Service.DISCORD_StartLobby
// 0x0008 (0x0008 - 0x0000)
struct Service_DISCORD_StartLobby final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_DISCORD_StartLobby) == 0x000008, "Wrong alignment on Service_DISCORD_StartLobby");
static_assert(sizeof(Service_DISCORD_StartLobby) == 0x000008, "Wrong size on Service_DISCORD_StartLobby");
static_assert(offsetof(Service_DISCORD_StartLobby, _world_ctx) == 0x000000, "Member 'Service_DISCORD_StartLobby::_world_ctx' has a wrong offset!");

// Function Stigma.Service.ExitParty
// 0x0020 (0x0020 - 0x0000)
struct Service_ExitParty final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_PartyDelete& _ack)> _proc;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_ExitParty) == 0x000008, "Wrong alignment on Service_ExitParty");
static_assert(sizeof(Service_ExitParty) == 0x000020, "Wrong size on Service_ExitParty");
static_assert(offsetof(Service_ExitParty, _world_ctx) == 0x000000, "Member 'Service_ExitParty::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ExitParty, _proc) == 0x000008, "Member 'Service_ExitParty::_proc' has a wrong offset!");
static_assert(offsetof(Service_ExitParty, ReturnValue) == 0x000018, "Member 'Service_ExitParty::ReturnValue' has a wrong offset!");

// Function Stigma.Service.FastStartCompetition
// 0x0038 (0x0038 - 0x0000)
struct Service_FastStartCompetition final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrencyPlain                         _currency;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECompetitionType                              _competition_type;                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B6[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_FastStartCompetition& _ack)> _proc;                                             // 0x0024(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B7[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_FastStartCompetition) == 0x000008, "Wrong alignment on Service_FastStartCompetition");
static_assert(sizeof(Service_FastStartCompetition) == 0x000038, "Wrong size on Service_FastStartCompetition");
static_assert(offsetof(Service_FastStartCompetition, _world_ctx) == 0x000000, "Member 'Service_FastStartCompetition::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_FastStartCompetition, _currency) == 0x000008, "Member 'Service_FastStartCompetition::_currency' has a wrong offset!");
static_assert(offsetof(Service_FastStartCompetition, _competition_type) == 0x000020, "Member 'Service_FastStartCompetition::_competition_type' has a wrong offset!");
static_assert(offsetof(Service_FastStartCompetition, _proc) == 0x000024, "Member 'Service_FastStartCompetition::_proc' has a wrong offset!");

// Function Stigma.Service.GetChallengeRankingList
// 0x0028 (0x0028 - 0x0000)
struct Service_GetChallengeRankingList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _start;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _count;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ReadChallengeRanking& _ack)> _proc;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetChallengeRankingList) == 0x000008, "Wrong alignment on Service_GetChallengeRankingList");
static_assert(sizeof(Service_GetChallengeRankingList) == 0x000028, "Wrong size on Service_GetChallengeRankingList");
static_assert(offsetof(Service_GetChallengeRankingList, _world_ctx) == 0x000000, "Member 'Service_GetChallengeRankingList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetChallengeRankingList, _start) == 0x000008, "Member 'Service_GetChallengeRankingList::_start' has a wrong offset!");
static_assert(offsetof(Service_GetChallengeRankingList, _count) == 0x000010, "Member 'Service_GetChallengeRankingList::_count' has a wrong offset!");
static_assert(offsetof(Service_GetChallengeRankingList, _proc) == 0x000018, "Member 'Service_GetChallengeRankingList::_proc' has a wrong offset!");

// Function Stigma.Service.GetCompetitionPlayers
// 0x0018 (0x0018 - 0x0000)
struct Service_GetCompetitionPlayers final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ReadCompetitionPlayers& _ack)> _proc;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetCompetitionPlayers) == 0x000008, "Wrong alignment on Service_GetCompetitionPlayers");
static_assert(sizeof(Service_GetCompetitionPlayers) == 0x000018, "Wrong size on Service_GetCompetitionPlayers");
static_assert(offsetof(Service_GetCompetitionPlayers, _world_ctx) == 0x000000, "Member 'Service_GetCompetitionPlayers::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetCompetitionPlayers, _proc) == 0x000008, "Member 'Service_GetCompetitionPlayers::_proc' has a wrong offset!");

// Function Stigma.Service.GetCurrentMatchMakingStatus
// 0x0010 (0x0010 - 0x0000)
struct Service_GetCurrentMatchMakingStatus final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFindMatchStatus                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_GetCurrentMatchMakingStatus) == 0x000008, "Wrong alignment on Service_GetCurrentMatchMakingStatus");
static_assert(sizeof(Service_GetCurrentMatchMakingStatus) == 0x000010, "Wrong size on Service_GetCurrentMatchMakingStatus");
static_assert(offsetof(Service_GetCurrentMatchMakingStatus, _world_ctx) == 0x000000, "Member 'Service_GetCurrentMatchMakingStatus::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetCurrentMatchMakingStatus, ReturnValue) == 0x000008, "Member 'Service_GetCurrentMatchMakingStatus::ReturnValue' has a wrong offset!");

// Function Stigma.Service.GetFriendRankingList
// 0x0030 (0x0030 - 0x0000)
struct Service_GetFriendRankingList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _start;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _count;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              _season_id;                                        // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  _ranking_type;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_ReadFriendRanking& _ack)> _proc;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetFriendRankingList) == 0x000008, "Wrong alignment on Service_GetFriendRankingList");
static_assert(sizeof(Service_GetFriendRankingList) == 0x000030, "Wrong size on Service_GetFriendRankingList");
static_assert(offsetof(Service_GetFriendRankingList, _world_ctx) == 0x000000, "Member 'Service_GetFriendRankingList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetFriendRankingList, _start) == 0x000008, "Member 'Service_GetFriendRankingList::_start' has a wrong offset!");
static_assert(offsetof(Service_GetFriendRankingList, _count) == 0x000010, "Member 'Service_GetFriendRankingList::_count' has a wrong offset!");
static_assert(offsetof(Service_GetFriendRankingList, _season_id) == 0x000018, "Member 'Service_GetFriendRankingList::_season_id' has a wrong offset!");
static_assert(offsetof(Service_GetFriendRankingList, _ranking_type) == 0x00001C, "Member 'Service_GetFriendRankingList::_ranking_type' has a wrong offset!");
static_assert(offsetof(Service_GetFriendRankingList, _proc) == 0x000020, "Member 'Service_GetFriendRankingList::_proc' has a wrong offset!");

// Function Stigma.Service.GetLoginNotice
// 0x0018 (0x0018 - 0x0000)
struct Service_GetLoginNotice final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_LoginNotice& _ack)> _proc;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetLoginNotice) == 0x000008, "Wrong alignment on Service_GetLoginNotice");
static_assert(sizeof(Service_GetLoginNotice) == 0x000018, "Wrong size on Service_GetLoginNotice");
static_assert(offsetof(Service_GetLoginNotice, _world_ctx) == 0x000000, "Member 'Service_GetLoginNotice::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetLoginNotice, _proc) == 0x000008, "Member 'Service_GetLoginNotice::_proc' has a wrong offset!");

// Function Stigma.Service.GetMatchMakingContext
// 0x00A0 (0x00A0 - 0x0000)
struct Service_GetMatchMakingContext final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchContext                          ReturnValue;                                       // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetMatchMakingContext) == 0x000008, "Wrong alignment on Service_GetMatchMakingContext");
static_assert(sizeof(Service_GetMatchMakingContext) == 0x0000A0, "Wrong size on Service_GetMatchMakingContext");
static_assert(offsetof(Service_GetMatchMakingContext, _world_ctx) == 0x000000, "Member 'Service_GetMatchMakingContext::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetMatchMakingContext, ReturnValue) == 0x000008, "Member 'Service_GetMatchMakingContext::ReturnValue' has a wrong offset!");

// Function Stigma.Service.GetMatchMakingElapsedTime
// 0x0010 (0x0010 - 0x0000)
struct Service_GetMatchMakingElapsedTime final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetMatchMakingElapsedTime) == 0x000008, "Wrong alignment on Service_GetMatchMakingElapsedTime");
static_assert(sizeof(Service_GetMatchMakingElapsedTime) == 0x000010, "Wrong size on Service_GetMatchMakingElapsedTime");
static_assert(offsetof(Service_GetMatchMakingElapsedTime, _world_ctx) == 0x000000, "Member 'Service_GetMatchMakingElapsedTime::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetMatchMakingElapsedTime, ReturnValue) == 0x000008, "Member 'Service_GetMatchMakingElapsedTime::ReturnValue' has a wrong offset!");

// Function Stigma.Service.GetMatchMakingErrorMessage
// 0x0020 (0x0020 - 0x0000)
struct Service_GetMatchMakingErrorMessage final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetMatchMakingErrorMessage) == 0x000008, "Wrong alignment on Service_GetMatchMakingErrorMessage");
static_assert(sizeof(Service_GetMatchMakingErrorMessage) == 0x000020, "Wrong size on Service_GetMatchMakingErrorMessage");
static_assert(offsetof(Service_GetMatchMakingErrorMessage, _world_ctx) == 0x000000, "Member 'Service_GetMatchMakingErrorMessage::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetMatchMakingErrorMessage, ReturnValue) == 0x000008, "Member 'Service_GetMatchMakingErrorMessage::ReturnValue' has a wrong offset!");

// Function Stigma.Service.GetMatchOption
// 0x0040 (0x0040 - 0x0000)
struct Service_GetMatchOption final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchOption                           ReturnValue;                                       // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetMatchOption) == 0x000008, "Wrong alignment on Service_GetMatchOption");
static_assert(sizeof(Service_GetMatchOption) == 0x000040, "Wrong size on Service_GetMatchOption");
static_assert(offsetof(Service_GetMatchOption, _world_ctx) == 0x000000, "Member 'Service_GetMatchOption::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetMatchOption, ReturnValue) == 0x000008, "Member 'Service_GetMatchOption::ReturnValue' has a wrong offset!");

// Function Stigma.Service.GetRankingList
// 0x0030 (0x0030 - 0x0000)
struct Service_GetRankingList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _start;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _count;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              _season_id;                                        // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  _ranking_type;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BA[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_ReadRanking& _ack)> _proc;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetRankingList) == 0x000008, "Wrong alignment on Service_GetRankingList");
static_assert(sizeof(Service_GetRankingList) == 0x000030, "Wrong size on Service_GetRankingList");
static_assert(offsetof(Service_GetRankingList, _world_ctx) == 0x000000, "Member 'Service_GetRankingList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetRankingList, _start) == 0x000008, "Member 'Service_GetRankingList::_start' has a wrong offset!");
static_assert(offsetof(Service_GetRankingList, _count) == 0x000010, "Member 'Service_GetRankingList::_count' has a wrong offset!");
static_assert(offsetof(Service_GetRankingList, _season_id) == 0x000018, "Member 'Service_GetRankingList::_season_id' has a wrong offset!");
static_assert(offsetof(Service_GetRankingList, _ranking_type) == 0x00001C, "Member 'Service_GetRankingList::_ranking_type' has a wrong offset!");
static_assert(offsetof(Service_GetRankingList, _proc) == 0x000020, "Member 'Service_GetRankingList::_proc' has a wrong offset!");

// Function Stigma.Service.GetSearchedUserRankingList
// 0x0030 (0x0030 - 0x0000)
struct Service_GetSearchedUserRankingList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         _count;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              _season_id;                                        // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  _ranking_type;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_ReadSearchedUserRanking& _ack)> _proc;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetSearchedUserRankingList) == 0x000008, "Wrong alignment on Service_GetSearchedUserRankingList");
static_assert(sizeof(Service_GetSearchedUserRankingList) == 0x000030, "Wrong size on Service_GetSearchedUserRankingList");
static_assert(offsetof(Service_GetSearchedUserRankingList, _world_ctx) == 0x000000, "Member 'Service_GetSearchedUserRankingList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetSearchedUserRankingList, _user_id) == 0x000008, "Member 'Service_GetSearchedUserRankingList::_user_id' has a wrong offset!");
static_assert(offsetof(Service_GetSearchedUserRankingList, _count) == 0x000010, "Member 'Service_GetSearchedUserRankingList::_count' has a wrong offset!");
static_assert(offsetof(Service_GetSearchedUserRankingList, _season_id) == 0x000018, "Member 'Service_GetSearchedUserRankingList::_season_id' has a wrong offset!");
static_assert(offsetof(Service_GetSearchedUserRankingList, _ranking_type) == 0x00001C, "Member 'Service_GetSearchedUserRankingList::_ranking_type' has a wrong offset!");
static_assert(offsetof(Service_GetSearchedUserRankingList, _proc) == 0x000020, "Member 'Service_GetSearchedUserRankingList::_proc' has a wrong offset!");

// Function Stigma.Service.GetSurvey
// 0x0010 (0x0010 - 0x0000)
struct Service_GetSurvey final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _survey_id;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BC[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_GetSurvey) == 0x000008, "Wrong alignment on Service_GetSurvey");
static_assert(sizeof(Service_GetSurvey) == 0x000010, "Wrong size on Service_GetSurvey");
static_assert(offsetof(Service_GetSurvey, _world_ctx) == 0x000000, "Member 'Service_GetSurvey::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetSurvey, _survey_id) == 0x000008, "Member 'Service_GetSurvey::_survey_id' has a wrong offset!");

// Function Stigma.Service.GetUserReportJWT
// 0x0058 (0x0058 - 0x0000)
struct Service_GetUserReportJWT final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _user_nickname;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _dedi_id;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _battle_id;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_GetUserReportJWT& _ack)> _proc;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetUserReportJWT) == 0x000008, "Wrong alignment on Service_GetUserReportJWT");
static_assert(sizeof(Service_GetUserReportJWT) == 0x000058, "Wrong size on Service_GetUserReportJWT");
static_assert(offsetof(Service_GetUserReportJWT, _world_ctx) == 0x000000, "Member 'Service_GetUserReportJWT::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetUserReportJWT, _user_nickname) == 0x000008, "Member 'Service_GetUserReportJWT::_user_nickname' has a wrong offset!");
static_assert(offsetof(Service_GetUserReportJWT, _user_id) == 0x000020, "Member 'Service_GetUserReportJWT::_user_id' has a wrong offset!");
static_assert(offsetof(Service_GetUserReportJWT, _dedi_id) == 0x000028, "Member 'Service_GetUserReportJWT::_dedi_id' has a wrong offset!");
static_assert(offsetof(Service_GetUserReportJWT, _battle_id) == 0x000038, "Member 'Service_GetUserReportJWT::_battle_id' has a wrong offset!");
static_assert(offsetof(Service_GetUserReportJWT, _proc) == 0x000048, "Member 'Service_GetUserReportJWT::_proc' has a wrong offset!");

// Function Stigma.Service.GetUserTierInfo
// 0x0028 (0x0028 - 0x0000)
struct Service_GetUserTierInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              _season_id;                                        // 0x0010(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ReadUserTierInfo& _ack)> _proc;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BD[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_GetUserTierInfo) == 0x000008, "Wrong alignment on Service_GetUserTierInfo");
static_assert(sizeof(Service_GetUserTierInfo) == 0x000028, "Wrong size on Service_GetUserTierInfo");
static_assert(offsetof(Service_GetUserTierInfo, _world_ctx) == 0x000000, "Member 'Service_GetUserTierInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetUserTierInfo, _user_id) == 0x000008, "Member 'Service_GetUserTierInfo::_user_id' has a wrong offset!");
static_assert(offsetof(Service_GetUserTierInfo, _season_id) == 0x000010, "Member 'Service_GetUserTierInfo::_season_id' has a wrong offset!");
static_assert(offsetof(Service_GetUserTierInfo, _proc) == 0x000014, "Member 'Service_GetUserTierInfo::_proc' has a wrong offset!");

// Function Stigma.Service.GetWeeklyBestRank
// 0x0020 (0x0020 - 0x0000)
struct Service_GetWeeklyBestRank final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              _season_id;                                        // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  _ranking_type;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BE[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_ReadWeeklyBestRank& _ack)> _proc;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetWeeklyBestRank) == 0x000008, "Wrong alignment on Service_GetWeeklyBestRank");
static_assert(sizeof(Service_GetWeeklyBestRank) == 0x000020, "Wrong size on Service_GetWeeklyBestRank");
static_assert(offsetof(Service_GetWeeklyBestRank, _world_ctx) == 0x000000, "Member 'Service_GetWeeklyBestRank::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetWeeklyBestRank, _season_id) == 0x000008, "Member 'Service_GetWeeklyBestRank::_season_id' has a wrong offset!");
static_assert(offsetof(Service_GetWeeklyBestRank, _ranking_type) == 0x00000C, "Member 'Service_GetWeeklyBestRank::_ranking_type' has a wrong offset!");
static_assert(offsetof(Service_GetWeeklyBestRank, _proc) == 0x000010, "Member 'Service_GetWeeklyBestRank::_proc' has a wrong offset!");

// Function Stigma.Service.GetWishedGameModes
// 0x0018 (0x0018 - 0x0000)
struct Service_GetWishedGameModes final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGameMode>                             ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GetWishedGameModes) == 0x000008, "Wrong alignment on Service_GetWishedGameModes");
static_assert(sizeof(Service_GetWishedGameModes) == 0x000018, "Wrong size on Service_GetWishedGameModes");
static_assert(offsetof(Service_GetWishedGameModes, _world_ctx) == 0x000000, "Member 'Service_GetWishedGameModes::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GetWishedGameModes, ReturnValue) == 0x000008, "Member 'Service_GetWishedGameModes::ReturnValue' has a wrong offset!");

// Function Stigma.Service.GM_StalkRoom
// 0x0010 (0x0010 - 0x0000)
struct Service_GM_StalkRoom final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _target_user_id;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_GM_StalkRoom) == 0x000008, "Wrong alignment on Service_GM_StalkRoom");
static_assert(sizeof(Service_GM_StalkRoom) == 0x000010, "Wrong size on Service_GM_StalkRoom");
static_assert(offsetof(Service_GM_StalkRoom, _world_ctx) == 0x000000, "Member 'Service_GM_StalkRoom::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_GM_StalkRoom, _target_user_id) == 0x000008, "Member 'Service_GM_StalkRoom::_target_user_id' has a wrong offset!");

// Function Stigma.Service.InviteToBattle
// 0x0020 (0x0020 - 0x0000)
struct Service_InviteToBattle final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _to;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _to_nick;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_InviteToBattle) == 0x000008, "Wrong alignment on Service_InviteToBattle");
static_assert(sizeof(Service_InviteToBattle) == 0x000020, "Wrong size on Service_InviteToBattle");
static_assert(offsetof(Service_InviteToBattle, _world_ctx) == 0x000000, "Member 'Service_InviteToBattle::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_InviteToBattle, _to) == 0x000008, "Member 'Service_InviteToBattle::_to' has a wrong offset!");
static_assert(offsetof(Service_InviteToBattle, _to_nick) == 0x000010, "Member 'Service_InviteToBattle::_to_nick' has a wrong offset!");

// Function Stigma.Service.IsInWishedGameMode
// 0x0010 (0x0010 - 0x0000)
struct Service_IsInWishedGameMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BF[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_IsInWishedGameMode) == 0x000008, "Wrong alignment on Service_IsInWishedGameMode");
static_assert(sizeof(Service_IsInWishedGameMode) == 0x000010, "Wrong size on Service_IsInWishedGameMode");
static_assert(offsetof(Service_IsInWishedGameMode, _world_ctx) == 0x000000, "Member 'Service_IsInWishedGameMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_IsInWishedGameMode, _game_mode) == 0x000008, "Member 'Service_IsInWishedGameMode::_game_mode' has a wrong offset!");
static_assert(offsetof(Service_IsInWishedGameMode, ReturnValue) == 0x000009, "Member 'Service_IsInWishedGameMode::ReturnValue' has a wrong offset!");

// Function Stigma.Service.IsMatchMaking
// 0x0010 (0x0010 - 0x0000)
struct Service_IsMatchMaking final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_IsMatchMaking) == 0x000008, "Wrong alignment on Service_IsMatchMaking");
static_assert(sizeof(Service_IsMatchMaking) == 0x000010, "Wrong size on Service_IsMatchMaking");
static_assert(offsetof(Service_IsMatchMaking, _world_ctx) == 0x000000, "Member 'Service_IsMatchMaking::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_IsMatchMaking, ReturnValue) == 0x000008, "Member 'Service_IsMatchMaking::ReturnValue' has a wrong offset!");

// Function Stigma.Service.IsMatchMakingCompleted
// 0x0010 (0x0010 - 0x0000)
struct Service_IsMatchMakingCompleted final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_IsMatchMakingCompleted) == 0x000008, "Wrong alignment on Service_IsMatchMakingCompleted");
static_assert(sizeof(Service_IsMatchMakingCompleted) == 0x000010, "Wrong size on Service_IsMatchMakingCompleted");
static_assert(offsetof(Service_IsMatchMakingCompleted, _world_ctx) == 0x000000, "Member 'Service_IsMatchMakingCompleted::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_IsMatchMakingCompleted, ReturnValue) == 0x000008, "Member 'Service_IsMatchMakingCompleted::ReturnValue' has a wrong offset!");

// Function Stigma.Service.LoadUser
// 0x0008 (0x0008 - 0x0000)
struct Service_LoadUser final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_LoadUser) == 0x000008, "Wrong alignment on Service_LoadUser");
static_assert(sizeof(Service_LoadUser) == 0x000008, "Wrong size on Service_LoadUser");
static_assert(offsetof(Service_LoadUser, _world_ctx) == 0x000000, "Member 'Service_LoadUser::_world_ctx' has a wrong offset!");

// Function Stigma.Service.LoadUserCurrency
// 0x0008 (0x0008 - 0x0000)
struct Service_LoadUserCurrency final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_LoadUserCurrency) == 0x000008, "Wrong alignment on Service_LoadUserCurrency");
static_assert(sizeof(Service_LoadUserCurrency) == 0x000008, "Wrong size on Service_LoadUserCurrency");
static_assert(offsetof(Service_LoadUserCurrency, _world_ctx) == 0x000000, "Member 'Service_LoadUserCurrency::_world_ctx' has a wrong offset!");

// Function Stigma.Service.OpenInvenItem
// 0x0028 (0x0028 - 0x0000)
struct Service_OpenInvenItem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInvenItem*>                     _items;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _code, struct FACK_OpenInvenItems& _ack)> _proc;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_OpenInvenItem) == 0x000008, "Wrong alignment on Service_OpenInvenItem");
static_assert(sizeof(Service_OpenInvenItem) == 0x000028, "Wrong size on Service_OpenInvenItem");
static_assert(offsetof(Service_OpenInvenItem, _world_ctx) == 0x000000, "Member 'Service_OpenInvenItem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_OpenInvenItem, _items) == 0x000008, "Member 'Service_OpenInvenItem::_items' has a wrong offset!");
static_assert(offsetof(Service_OpenInvenItem, _proc) == 0x000018, "Member 'Service_OpenInvenItem::_proc' has a wrong offset!");

// Function Stigma.Service.PickInitialCharacters
// 0x0020 (0x0020 - 0x0000)
struct Service_PickInitialCharacters final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ECharaType>                            _picked_types;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_PickInitialCharacters) == 0x000008, "Wrong alignment on Service_PickInitialCharacters");
static_assert(sizeof(Service_PickInitialCharacters) == 0x000020, "Wrong size on Service_PickInitialCharacters");
static_assert(offsetof(Service_PickInitialCharacters, _world_ctx) == 0x000000, "Member 'Service_PickInitialCharacters::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_PickInitialCharacters, _user_id) == 0x000008, "Member 'Service_PickInitialCharacters::_user_id' has a wrong offset!");
static_assert(offsetof(Service_PickInitialCharacters, _picked_types) == 0x000010, "Member 'Service_PickInitialCharacters::_picked_types' has a wrong offset!");

// Function Stigma.Service.PlayBattleOnClientSide
// 0x0018 (0x0018 - 0x0000)
struct Service_PlayBattleOnClientSide final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _mode;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C2[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   _map_name;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _allow_all_chara;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_tutorial_match;                                // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C3[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_PlayBattleOnClientSide) == 0x000008, "Wrong alignment on Service_PlayBattleOnClientSide");
static_assert(sizeof(Service_PlayBattleOnClientSide) == 0x000018, "Wrong size on Service_PlayBattleOnClientSide");
static_assert(offsetof(Service_PlayBattleOnClientSide, _world_ctx) == 0x000000, "Member 'Service_PlayBattleOnClientSide::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_PlayBattleOnClientSide, _mode) == 0x000008, "Member 'Service_PlayBattleOnClientSide::_mode' has a wrong offset!");
static_assert(offsetof(Service_PlayBattleOnClientSide, _map_name) == 0x00000C, "Member 'Service_PlayBattleOnClientSide::_map_name' has a wrong offset!");
static_assert(offsetof(Service_PlayBattleOnClientSide, _allow_all_chara) == 0x000014, "Member 'Service_PlayBattleOnClientSide::_allow_all_chara' has a wrong offset!");
static_assert(offsetof(Service_PlayBattleOnClientSide, _is_tutorial_match) == 0x000015, "Member 'Service_PlayBattleOnClientSide::_is_tutorial_match' has a wrong offset!");

// Function Stigma.Service.ReadGoods
// 0x0010 (0x0010 - 0x0000)
struct Service_ReadGoods final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoodsCategory                                _category;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_ReadGoods) == 0x000008, "Wrong alignment on Service_ReadGoods");
static_assert(sizeof(Service_ReadGoods) == 0x000010, "Wrong size on Service_ReadGoods");
static_assert(offsetof(Service_ReadGoods, _world_ctx) == 0x000000, "Member 'Service_ReadGoods::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReadGoods, _category) == 0x000008, "Member 'Service_ReadGoods::_category' has a wrong offset!");

// Function Stigma.Service.ReadHistoryRecruit
// 0x0028 (0x0028 - 0x0000)
struct Service_ReadHistoryRecruit final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecruitType                                  _recruit_type;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _cursor;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _req_count;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ReadHistoryRecruit& _ack)> _proc;                                             // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C6[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_ReadHistoryRecruit) == 0x000008, "Wrong alignment on Service_ReadHistoryRecruit");
static_assert(sizeof(Service_ReadHistoryRecruit) == 0x000028, "Wrong size on Service_ReadHistoryRecruit");
static_assert(offsetof(Service_ReadHistoryRecruit, _world_ctx) == 0x000000, "Member 'Service_ReadHistoryRecruit::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReadHistoryRecruit, _recruit_type) == 0x000008, "Member 'Service_ReadHistoryRecruit::_recruit_type' has a wrong offset!");
static_assert(offsetof(Service_ReadHistoryRecruit, _cursor) == 0x00000C, "Member 'Service_ReadHistoryRecruit::_cursor' has a wrong offset!");
static_assert(offsetof(Service_ReadHistoryRecruit, _req_count) == 0x000010, "Member 'Service_ReadHistoryRecruit::_req_count' has a wrong offset!");
static_assert(offsetof(Service_ReadHistoryRecruit, _proc) == 0x000014, "Member 'Service_ReadHistoryRecruit::_proc' has a wrong offset!");

// Function Stigma.Service.ReadMissions
// 0x0028 (0x0028 - 0x0000)
struct Service_ReadMissions final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID>                        _task_ids;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_MissionRead& _ack)> _proc;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ReadMissions) == 0x000008, "Wrong alignment on Service_ReadMissions");
static_assert(sizeof(Service_ReadMissions) == 0x000028, "Wrong size on Service_ReadMissions");
static_assert(offsetof(Service_ReadMissions, _world_ctx) == 0x000000, "Member 'Service_ReadMissions::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReadMissions, _task_ids) == 0x000008, "Member 'Service_ReadMissions::_task_ids' has a wrong offset!");
static_assert(offsetof(Service_ReadMissions, _proc) == 0x000018, "Member 'Service_ReadMissions::_proc' has a wrong offset!");

// Function Stigma.Service.ReadProfileStatistic
// 0x0020 (0x0020 - 0x0000)
struct Service_ReadProfileStatistic final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ProfileStatisticRead& _ack)> _proc;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ReadProfileStatistic) == 0x000008, "Wrong alignment on Service_ReadProfileStatistic");
static_assert(sizeof(Service_ReadProfileStatistic) == 0x000020, "Wrong size on Service_ReadProfileStatistic");
static_assert(offsetof(Service_ReadProfileStatistic, _world_ctx) == 0x000000, "Member 'Service_ReadProfileStatistic::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReadProfileStatistic, _user_id) == 0x000008, "Member 'Service_ReadProfileStatistic::_user_id' has a wrong offset!");
static_assert(offsetof(Service_ReadProfileStatistic, _proc) == 0x000010, "Member 'Service_ReadProfileStatistic::_proc' has a wrong offset!");

// Function Stigma.Service.ReadRecruit
// 0x0018 (0x0018 - 0x0000)
struct Service_ReadRecruit final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ReadRecruit& _ack)> _proc;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ReadRecruit) == 0x000008, "Wrong alignment on Service_ReadRecruit");
static_assert(sizeof(Service_ReadRecruit) == 0x000018, "Wrong size on Service_ReadRecruit");
static_assert(offsetof(Service_ReadRecruit, _world_ctx) == 0x000000, "Member 'Service_ReadRecruit::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReadRecruit, _proc) == 0x000008, "Member 'Service_ReadRecruit::_proc' has a wrong offset!");

// Function Stigma.Service.RegisterNotify_OnMatchChanged
// 0x0018 (0x0018 - 0x0000)
struct Service_RegisterNotify_OnMatchChanged final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             _callback;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_RegisterNotify_OnMatchChanged) == 0x000008, "Wrong alignment on Service_RegisterNotify_OnMatchChanged");
static_assert(sizeof(Service_RegisterNotify_OnMatchChanged) == 0x000018, "Wrong size on Service_RegisterNotify_OnMatchChanged");
static_assert(offsetof(Service_RegisterNotify_OnMatchChanged, _world_ctx) == 0x000000, "Member 'Service_RegisterNotify_OnMatchChanged::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_RegisterNotify_OnMatchChanged, _callback) == 0x000008, "Member 'Service_RegisterNotify_OnMatchChanged::_callback' has a wrong offset!");

// Function Stigma.Service.RemoveWishedGameMode
// 0x0010 (0x0010 - 0x0000)
struct Service_RemoveWishedGameMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_RemoveWishedGameMode) == 0x000008, "Wrong alignment on Service_RemoveWishedGameMode");
static_assert(sizeof(Service_RemoveWishedGameMode) == 0x000010, "Wrong size on Service_RemoveWishedGameMode");
static_assert(offsetof(Service_RemoveWishedGameMode, _world_ctx) == 0x000000, "Member 'Service_RemoveWishedGameMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_RemoveWishedGameMode, _game_mode) == 0x000008, "Member 'Service_RemoveWishedGameMode::_game_mode' has a wrong offset!");

// Function Stigma.Service.ReplyFriendAsk
// 0x0040 (0x0040 - 0x0000)
struct Service_ReplyFriendAsk final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _target_user_id;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _nick;                                             // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _accept;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_FriendUpdate& _ack)> _proc;                                             // 0x002C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C9[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_ReplyFriendAsk) == 0x000008, "Wrong alignment on Service_ReplyFriendAsk");
static_assert(sizeof(Service_ReplyFriendAsk) == 0x000040, "Wrong size on Service_ReplyFriendAsk");
static_assert(offsetof(Service_ReplyFriendAsk, _world_ctx) == 0x000000, "Member 'Service_ReplyFriendAsk::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReplyFriendAsk, _target_user_id) == 0x000008, "Member 'Service_ReplyFriendAsk::_target_user_id' has a wrong offset!");
static_assert(offsetof(Service_ReplyFriendAsk, _nick) == 0x000010, "Member 'Service_ReplyFriendAsk::_nick' has a wrong offset!");
static_assert(offsetof(Service_ReplyFriendAsk, _accept) == 0x000028, "Member 'Service_ReplyFriendAsk::_accept' has a wrong offset!");
static_assert(offsetof(Service_ReplyFriendAsk, _proc) == 0x00002C, "Member 'Service_ReplyFriendAsk::_proc' has a wrong offset!");

// Function Stigma.Service.ReplyInviteToBattle
// 0x0050 (0x0050 - 0x0000)
struct Service_ReplyInviteToBattle final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FREQ_InviteToBattle                    _invite;                                           // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EInviteReply                                  _Reply;                                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CA[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_ReplyInviteToBattle) == 0x000008, "Wrong alignment on Service_ReplyInviteToBattle");
static_assert(sizeof(Service_ReplyInviteToBattle) == 0x000050, "Wrong size on Service_ReplyInviteToBattle");
static_assert(offsetof(Service_ReplyInviteToBattle, _world_ctx) == 0x000000, "Member 'Service_ReplyInviteToBattle::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ReplyInviteToBattle, _invite) == 0x000008, "Member 'Service_ReplyInviteToBattle::_invite' has a wrong offset!");
static_assert(offsetof(Service_ReplyInviteToBattle, _Reply) == 0x000048, "Member 'Service_ReplyInviteToBattle::_Reply' has a wrong offset!");

// Function Stigma.Service.ResetSkillPoint
// 0x0020 (0x0020 - 0x0000)
struct Service_ResetSkillPoint final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItem*                             _item;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _code, struct FACK_ResetSkillPoint& _ack)> _proc;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_ResetSkillPoint) == 0x000008, "Wrong alignment on Service_ResetSkillPoint");
static_assert(sizeof(Service_ResetSkillPoint) == 0x000020, "Wrong size on Service_ResetSkillPoint");
static_assert(offsetof(Service_ResetSkillPoint, _world_ctx) == 0x000000, "Member 'Service_ResetSkillPoint::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_ResetSkillPoint, _item) == 0x000008, "Member 'Service_ResetSkillPoint::_item' has a wrong offset!");
static_assert(offsetof(Service_ResetSkillPoint, _proc) == 0x000010, "Member 'Service_ResetSkillPoint::_proc' has a wrong offset!");

// Function Stigma.Service.RevertPreviewCharacterSettings
// 0x0008 (0x0008 - 0x0000)
struct Service_RevertPreviewCharacterSettings final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_RevertPreviewCharacterSettings) == 0x000008, "Wrong alignment on Service_RevertPreviewCharacterSettings");
static_assert(sizeof(Service_RevertPreviewCharacterSettings) == 0x000008, "Wrong size on Service_RevertPreviewCharacterSettings");
static_assert(offsetof(Service_RevertPreviewCharacterSettings, _world_ctx) == 0x000000, "Member 'Service_RevertPreviewCharacterSettings::_world_ctx' has a wrong offset!");

// Function Stigma.Service.RewardBattlePass
// 0x0030 (0x0030 - 0x0000)
struct Service_RewardBattlePass final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_BattlePassReward& _ack)> _proc;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CB[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_RewardBattlePass) == 0x000008, "Wrong alignment on Service_RewardBattlePass");
static_assert(sizeof(Service_RewardBattlePass) == 0x000030, "Wrong size on Service_RewardBattlePass");
static_assert(offsetof(Service_RewardBattlePass, _world_ctx) == 0x000000, "Member 'Service_RewardBattlePass::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_RewardBattlePass, _pass_id) == 0x000008, "Member 'Service_RewardBattlePass::_pass_id' has a wrong offset!");
static_assert(offsetof(Service_RewardBattlePass, _level) == 0x000018, "Member 'Service_RewardBattlePass::_level' has a wrong offset!");
static_assert(offsetof(Service_RewardBattlePass, _proc) == 0x00001C, "Member 'Service_RewardBattlePass::_proc' has a wrong offset!");

// Function Stigma.Service.RewardEventPage
// 0x0030 (0x0030 - 0x0000)
struct Service_RewardEventPage final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_option;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FACK_EventPageReward& _ack)> _proc;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CD[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_RewardEventPage) == 0x000008, "Wrong alignment on Service_RewardEventPage");
static_assert(sizeof(Service_RewardEventPage) == 0x000030, "Wrong size on Service_RewardEventPage");
static_assert(offsetof(Service_RewardEventPage, _world_ctx) == 0x000000, "Member 'Service_RewardEventPage::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_RewardEventPage, _event_page_id) == 0x000008, "Member 'Service_RewardEventPage::_event_page_id' has a wrong offset!");
static_assert(offsetof(Service_RewardEventPage, _is_option) == 0x000018, "Member 'Service_RewardEventPage::_is_option' has a wrong offset!");
static_assert(offsetof(Service_RewardEventPage, _proc) == 0x00001C, "Member 'Service_RewardEventPage::_proc' has a wrong offset!");

// Function Stigma.Service.RewardMission
// 0x0040 (0x0040 - 0x0000)
struct Service_RewardMission final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _task_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        _mission_id;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_MissionReward& _ack)> _proc;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_RewardMission) == 0x000008, "Wrong alignment on Service_RewardMission");
static_assert(sizeof(Service_RewardMission) == 0x000040, "Wrong size on Service_RewardMission");
static_assert(offsetof(Service_RewardMission, _world_ctx) == 0x000000, "Member 'Service_RewardMission::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_RewardMission, _task_id) == 0x000008, "Member 'Service_RewardMission::_task_id' has a wrong offset!");
static_assert(offsetof(Service_RewardMission, _idx) == 0x000018, "Member 'Service_RewardMission::_idx' has a wrong offset!");
static_assert(offsetof(Service_RewardMission, _mission_id) == 0x000020, "Member 'Service_RewardMission::_mission_id' has a wrong offset!");
static_assert(offsetof(Service_RewardMission, _proc) == 0x000030, "Member 'Service_RewardMission::_proc' has a wrong offset!");

// Function Stigma.Service.SearchUser
// 0x0028 (0x0028 - 0x0000)
struct Service_SearchUser final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _search_nickname;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_SearchUser& _ack)> _proc;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_SearchUser) == 0x000008, "Wrong alignment on Service_SearchUser");
static_assert(sizeof(Service_SearchUser) == 0x000028, "Wrong size on Service_SearchUser");
static_assert(offsetof(Service_SearchUser, _world_ctx) == 0x000000, "Member 'Service_SearchUser::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SearchUser, _search_nickname) == 0x000008, "Member 'Service_SearchUser::_search_nickname' has a wrong offset!");
static_assert(offsetof(Service_SearchUser, _proc) == 0x000018, "Member 'Service_SearchUser::_proc' has a wrong offset!");

// Function Stigma.Service.SetCharacterSetting
// 0x0040 (0x0040 - 0x0000)
struct Service_SetCharacterSetting final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23CF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0018(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot_zidx;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FApiResult& _ack)> _proc;                                             // 0x002C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D0[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_SetCharacterSetting) == 0x000008, "Wrong alignment on Service_SetCharacterSetting");
static_assert(sizeof(Service_SetCharacterSetting) == 0x000040, "Wrong size on Service_SetCharacterSetting");
static_assert(offsetof(Service_SetCharacterSetting, _world_ctx) == 0x000000, "Member 'Service_SetCharacterSetting::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting, _user_id) == 0x000008, "Member 'Service_SetCharacterSetting::_user_id' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting, _chara_type) == 0x000010, "Member 'Service_SetCharacterSetting::_chara_type' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting, _item_id) == 0x000018, "Member 'Service_SetCharacterSetting::_item_id' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting, _slot_zidx) == 0x000028, "Member 'Service_SetCharacterSetting::_slot_zidx' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting, _proc) == 0x00002C, "Member 'Service_SetCharacterSetting::_proc' has a wrong offset!");

// Function Stigma.Service.SetCharacterSetting_NoAck
// 0x0030 (0x0030 - 0x0000)
struct Service_SetCharacterSetting_NoAck final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0018(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot_zidx;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D2[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_SetCharacterSetting_NoAck) == 0x000008, "Wrong alignment on Service_SetCharacterSetting_NoAck");
static_assert(sizeof(Service_SetCharacterSetting_NoAck) == 0x000030, "Wrong size on Service_SetCharacterSetting_NoAck");
static_assert(offsetof(Service_SetCharacterSetting_NoAck, _world_ctx) == 0x000000, "Member 'Service_SetCharacterSetting_NoAck::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting_NoAck, _user_id) == 0x000008, "Member 'Service_SetCharacterSetting_NoAck::_user_id' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting_NoAck, _chara_type) == 0x000010, "Member 'Service_SetCharacterSetting_NoAck::_chara_type' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting_NoAck, _item_id) == 0x000018, "Member 'Service_SetCharacterSetting_NoAck::_item_id' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSetting_NoAck, _slot_zidx) == 0x000028, "Member 'Service_SetCharacterSetting_NoAck::_slot_zidx' has a wrong offset!");

// Function Stigma.Service.SetCharacterSettings
// 0x0038 (0x0038 - 0x0000)
struct Service_SetCharacterSettings final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemSetting>                   _settings;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FApiResult& _ack)> _proc;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_SetCharacterSettings) == 0x000008, "Wrong alignment on Service_SetCharacterSettings");
static_assert(sizeof(Service_SetCharacterSettings) == 0x000038, "Wrong size on Service_SetCharacterSettings");
static_assert(offsetof(Service_SetCharacterSettings, _world_ctx) == 0x000000, "Member 'Service_SetCharacterSettings::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings, _user_id) == 0x000008, "Member 'Service_SetCharacterSettings::_user_id' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings, _chara_type) == 0x000010, "Member 'Service_SetCharacterSettings::_chara_type' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings, _settings) == 0x000018, "Member 'Service_SetCharacterSettings::_settings' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings, _proc) == 0x000028, "Member 'Service_SetCharacterSettings::_proc' has a wrong offset!");

// Function Stigma.Service.SetCharacterSettings_NoAck
// 0x0028 (0x0028 - 0x0000)
struct Service_SetCharacterSettings_NoAck final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D4[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemSetting>                   _settings;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_SetCharacterSettings_NoAck) == 0x000008, "Wrong alignment on Service_SetCharacterSettings_NoAck");
static_assert(sizeof(Service_SetCharacterSettings_NoAck) == 0x000028, "Wrong size on Service_SetCharacterSettings_NoAck");
static_assert(offsetof(Service_SetCharacterSettings_NoAck, _world_ctx) == 0x000000, "Member 'Service_SetCharacterSettings_NoAck::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings_NoAck, _user_id) == 0x000008, "Member 'Service_SetCharacterSettings_NoAck::_user_id' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings_NoAck, _chara_type) == 0x000010, "Member 'Service_SetCharacterSettings_NoAck::_chara_type' has a wrong offset!");
static_assert(offsetof(Service_SetCharacterSettings_NoAck, _settings) == 0x000018, "Member 'Service_SetCharacterSettings_NoAck::_settings' has a wrong offset!");

// Function Stigma.Service.SetCurrentCharacter
// 0x0028 (0x0028 - 0x0000)
struct Service_SetCurrentCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D5[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(EResultCode _rcode, struct FApiResult& _ack)> _proc;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D6[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_SetCurrentCharacter) == 0x000008, "Wrong alignment on Service_SetCurrentCharacter");
static_assert(sizeof(Service_SetCurrentCharacter) == 0x000028, "Wrong size on Service_SetCurrentCharacter");
static_assert(offsetof(Service_SetCurrentCharacter, _world_ctx) == 0x000000, "Member 'Service_SetCurrentCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetCurrentCharacter, _user_id) == 0x000008, "Member 'Service_SetCurrentCharacter::_user_id' has a wrong offset!");
static_assert(offsetof(Service_SetCurrentCharacter, _chara_type) == 0x000010, "Member 'Service_SetCurrentCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(Service_SetCurrentCharacter, _proc) == 0x000014, "Member 'Service_SetCurrentCharacter::_proc' has a wrong offset!");

// Function Stigma.Service.SetGunSetting
// 0x0020 (0x0020 - 0x0000)
struct Service_SetGunSetting final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGunObject*                       _gun_object;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_UpdateGunSpec& _ack)> _proc;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_SetGunSetting) == 0x000008, "Wrong alignment on Service_SetGunSetting");
static_assert(sizeof(Service_SetGunSetting) == 0x000020, "Wrong size on Service_SetGunSetting");
static_assert(offsetof(Service_SetGunSetting, _world_ctx) == 0x000000, "Member 'Service_SetGunSetting::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetGunSetting, _gun_object) == 0x000008, "Member 'Service_SetGunSetting::_gun_object' has a wrong offset!");
static_assert(offsetof(Service_SetGunSetting, _proc) == 0x000010, "Member 'Service_SetGunSetting::_proc' has a wrong offset!");

// Function Stigma.Service.SetGunType
// 0x0038 (0x0038 - 0x0000)
struct Service_SetGunType final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             _gun_preset;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FApiResult& _ack)> _proc;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_SetGunType) == 0x000008, "Wrong alignment on Service_SetGunType");
static_assert(sizeof(Service_SetGunType) == 0x000038, "Wrong size on Service_SetGunType");
static_assert(offsetof(Service_SetGunType, _world_ctx) == 0x000000, "Member 'Service_SetGunType::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetGunType, _user_id) == 0x000008, "Member 'Service_SetGunType::_user_id' has a wrong offset!");
static_assert(offsetof(Service_SetGunType, _chara_type) == 0x000010, "Member 'Service_SetGunType::_chara_type' has a wrong offset!");
static_assert(offsetof(Service_SetGunType, _gun_preset) == 0x000018, "Member 'Service_SetGunType::_gun_preset' has a wrong offset!");
static_assert(offsetof(Service_SetGunType, _proc) == 0x000028, "Member 'Service_SetGunType::_proc' has a wrong offset!");

// Function Stigma.Service.SetUserPlayingAt
// 0x0010 (0x0010 - 0x0000)
struct Service_SetUserPlayingAt final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserPlayingAt                                _playing_at;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_SetUserPlayingAt) == 0x000008, "Wrong alignment on Service_SetUserPlayingAt");
static_assert(sizeof(Service_SetUserPlayingAt) == 0x000010, "Wrong size on Service_SetUserPlayingAt");
static_assert(offsetof(Service_SetUserPlayingAt, _world_ctx) == 0x000000, "Member 'Service_SetUserPlayingAt::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetUserPlayingAt, _playing_at) == 0x000008, "Member 'Service_SetUserPlayingAt::_playing_at' has a wrong offset!");

// Function Stigma.Service.SetWishedGameMode
// 0x0010 (0x0010 - 0x0000)
struct Service_SetWishedGameMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_SetWishedGameMode) == 0x000008, "Wrong alignment on Service_SetWishedGameMode");
static_assert(sizeof(Service_SetWishedGameMode) == 0x000010, "Wrong size on Service_SetWishedGameMode");
static_assert(offsetof(Service_SetWishedGameMode, _world_ctx) == 0x000000, "Member 'Service_SetWishedGameMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_SetWishedGameMode, _game_mode) == 0x000008, "Member 'Service_SetWishedGameMode::_game_mode' has a wrong offset!");

// Function Stigma.Service.StartMatchMaking
// 0x0060 (0x0060 - 0x0000)
struct Service_StartMatchMaking final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DA[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatchOption                           _option;                                           // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_FindMatch& _ack)> _proc;                                             // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_StartMatchMaking) == 0x000008, "Wrong alignment on Service_StartMatchMaking");
static_assert(sizeof(Service_StartMatchMaking) == 0x000060, "Wrong size on Service_StartMatchMaking");
static_assert(offsetof(Service_StartMatchMaking, _world_ctx) == 0x000000, "Member 'Service_StartMatchMaking::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_StartMatchMaking, _user_id) == 0x000008, "Member 'Service_StartMatchMaking::_user_id' has a wrong offset!");
static_assert(offsetof(Service_StartMatchMaking, _game_mode) == 0x000010, "Member 'Service_StartMatchMaking::_game_mode' has a wrong offset!");
static_assert(offsetof(Service_StartMatchMaking, _option) == 0x000018, "Member 'Service_StartMatchMaking::_option' has a wrong offset!");
static_assert(offsetof(Service_StartMatchMaking, _proc) == 0x000050, "Member 'Service_StartMatchMaking::_proc' has a wrong offset!");

// Function Stigma.Service.Subscribe_OnUpdateUser
// 0x0068 (0x0068 - 0x0000)
struct Service_Subscribe_OnUpdateUser final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EUserEvent>                              _events;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EUserEvent _event)>            _proc;                                             // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_Subscribe_OnUpdateUser) == 0x000008, "Wrong alignment on Service_Subscribe_OnUpdateUser");
static_assert(sizeof(Service_Subscribe_OnUpdateUser) == 0x000068, "Wrong size on Service_Subscribe_OnUpdateUser");
static_assert(offsetof(Service_Subscribe_OnUpdateUser, _world_ctx) == 0x000000, "Member 'Service_Subscribe_OnUpdateUser::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_Subscribe_OnUpdateUser, _events) == 0x000008, "Member 'Service_Subscribe_OnUpdateUser::_events' has a wrong offset!");
static_assert(offsetof(Service_Subscribe_OnUpdateUser, _proc) == 0x000058, "Member 'Service_Subscribe_OnUpdateUser::_proc' has a wrong offset!");

// Function Stigma.Service.UnregisterNotify_OnMatchChanged
// 0x0010 (0x0010 - 0x0000)
struct Service_UnregisterNotify_OnMatchChanged final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _obj;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_UnregisterNotify_OnMatchChanged) == 0x000008, "Wrong alignment on Service_UnregisterNotify_OnMatchChanged");
static_assert(sizeof(Service_UnregisterNotify_OnMatchChanged) == 0x000010, "Wrong size on Service_UnregisterNotify_OnMatchChanged");
static_assert(offsetof(Service_UnregisterNotify_OnMatchChanged, _world_ctx) == 0x000000, "Member 'Service_UnregisterNotify_OnMatchChanged::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_UnregisterNotify_OnMatchChanged, _obj) == 0x000008, "Member 'Service_UnregisterNotify_OnMatchChanged::_obj' has a wrong offset!");

// Function Stigma.Service.Unsubscribe_OnUpdateUser
// 0x0010 (0x0010 - 0x0000)
struct Service_Unsubscribe_OnUpdateUser final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _obj;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_Unsubscribe_OnUpdateUser) == 0x000008, "Wrong alignment on Service_Unsubscribe_OnUpdateUser");
static_assert(sizeof(Service_Unsubscribe_OnUpdateUser) == 0x000010, "Wrong size on Service_Unsubscribe_OnUpdateUser");
static_assert(offsetof(Service_Unsubscribe_OnUpdateUser, _world_ctx) == 0x000000, "Member 'Service_Unsubscribe_OnUpdateUser::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_Unsubscribe_OnUpdateUser, _obj) == 0x000008, "Member 'Service_Unsubscribe_OnUpdateUser::_obj' has a wrong offset!");

// Function Stigma.Service.UpdateBooster
// 0x0020 (0x0020 - 0x0000)
struct Service_UpdateBooster final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot_index;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_UpdateBooster) == 0x000008, "Wrong alignment on Service_UpdateBooster");
static_assert(sizeof(Service_UpdateBooster) == 0x000020, "Wrong size on Service_UpdateBooster");
static_assert(offsetof(Service_UpdateBooster, _world_ctx) == 0x000000, "Member 'Service_UpdateBooster::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_UpdateBooster, _slot_index) == 0x000008, "Member 'Service_UpdateBooster::_slot_index' has a wrong offset!");
static_assert(offsetof(Service_UpdateBooster, _item_id) == 0x000010, "Member 'Service_UpdateBooster::_item_id' has a wrong offset!");

// Function Stigma.Service.UpdateEmblem
// 0x0028 (0x0028 - 0x0000)
struct Service_UpdateEmblem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_EmblemUpdate& _ack)> _proc;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_UpdateEmblem) == 0x000008, "Wrong alignment on Service_UpdateEmblem");
static_assert(sizeof(Service_UpdateEmblem) == 0x000028, "Wrong size on Service_UpdateEmblem");
static_assert(offsetof(Service_UpdateEmblem, _world_ctx) == 0x000000, "Member 'Service_UpdateEmblem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_UpdateEmblem, _item_id) == 0x000008, "Member 'Service_UpdateEmblem::_item_id' has a wrong offset!");
static_assert(offsetof(Service_UpdateEmblem, _proc) == 0x000018, "Member 'Service_UpdateEmblem::_proc' has a wrong offset!");

// Function Stigma.Service.UpdateNicknameFX
// 0x0028 (0x0028 - 0x0000)
struct Service_UpdateNicknameFX final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_SingleItemUpdate& _ack)> _proc;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_UpdateNicknameFX) == 0x000008, "Wrong alignment on Service_UpdateNicknameFX");
static_assert(sizeof(Service_UpdateNicknameFX) == 0x000028, "Wrong size on Service_UpdateNicknameFX");
static_assert(offsetof(Service_UpdateNicknameFX, _world_ctx) == 0x000000, "Member 'Service_UpdateNicknameFX::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_UpdateNicknameFX, _item_id) == 0x000008, "Member 'Service_UpdateNicknameFX::_item_id' has a wrong offset!");
static_assert(offsetof(Service_UpdateNicknameFX, _proc) == 0x000018, "Member 'Service_UpdateNicknameFX::_proc' has a wrong offset!");

// Function Stigma.Service.UpdatePartyGameMode
// 0x0010 (0x0010 - 0x0000)
struct Service_UpdatePartyGameMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DC[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Service_UpdatePartyGameMode) == 0x000008, "Wrong alignment on Service_UpdatePartyGameMode");
static_assert(sizeof(Service_UpdatePartyGameMode) == 0x000010, "Wrong size on Service_UpdatePartyGameMode");
static_assert(offsetof(Service_UpdatePartyGameMode, _world_ctx) == 0x000000, "Member 'Service_UpdatePartyGameMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_UpdatePartyGameMode, _game_mode) == 0x000008, "Member 'Service_UpdatePartyGameMode::_game_mode' has a wrong offset!");
static_assert(offsetof(Service_UpdatePartyGameMode, ReturnValue) == 0x000009, "Member 'Service_UpdatePartyGameMode::ReturnValue' has a wrong offset!");

// Function Stigma.Service.UpdateProfileCard
// 0x0028 (0x0028 - 0x0000)
struct Service_UpdateProfileCard final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EResultCode _rcode, struct FACK_ProfileCardUpdate& _ack)> _proc;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Service_UpdateProfileCard) == 0x000008, "Wrong alignment on Service_UpdateProfileCard");
static_assert(sizeof(Service_UpdateProfileCard) == 0x000028, "Wrong size on Service_UpdateProfileCard");
static_assert(offsetof(Service_UpdateProfileCard, _world_ctx) == 0x000000, "Member 'Service_UpdateProfileCard::_world_ctx' has a wrong offset!");
static_assert(offsetof(Service_UpdateProfileCard, _item_id) == 0x000008, "Member 'Service_UpdateProfileCard::_item_id' has a wrong offset!");
static_assert(offsetof(Service_UpdateProfileCard, _proc) == 0x000018, "Member 'Service_UpdateProfileCard::_proc' has a wrong offset!");

// Function Stigma.SharedPlayerStateBlueprintLibrary.IsRoomLeader
// 0x00A8 (0x00A8 - 0x0000)
struct SharedPlayerStateBlueprintLibrary_IsRoomLeader final
{
public:
	struct FUserInBattle                          _user;                                             // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DD[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SharedPlayerStateBlueprintLibrary_IsRoomLeader) == 0x000008, "Wrong alignment on SharedPlayerStateBlueprintLibrary_IsRoomLeader");
static_assert(sizeof(SharedPlayerStateBlueprintLibrary_IsRoomLeader) == 0x0000A8, "Wrong size on SharedPlayerStateBlueprintLibrary_IsRoomLeader");
static_assert(offsetof(SharedPlayerStateBlueprintLibrary_IsRoomLeader, _user) == 0x000000, "Member 'SharedPlayerStateBlueprintLibrary_IsRoomLeader::_user' has a wrong offset!");
static_assert(offsetof(SharedPlayerStateBlueprintLibrary_IsRoomLeader, ReturnValue) == 0x0000A0, "Member 'SharedPlayerStateBlueprintLibrary_IsRoomLeader::ReturnValue' has a wrong offset!");

// Function Stigma.SharedPlayerStateBlueprintLibrary.IsRoomManager
// 0x00A8 (0x00A8 - 0x0000)
struct SharedPlayerStateBlueprintLibrary_IsRoomManager final
{
public:
	struct FUserInBattle                          _user;                                             // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DE[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SharedPlayerStateBlueprintLibrary_IsRoomManager) == 0x000008, "Wrong alignment on SharedPlayerStateBlueprintLibrary_IsRoomManager");
static_assert(sizeof(SharedPlayerStateBlueprintLibrary_IsRoomManager) == 0x0000A8, "Wrong size on SharedPlayerStateBlueprintLibrary_IsRoomManager");
static_assert(offsetof(SharedPlayerStateBlueprintLibrary_IsRoomManager, _user) == 0x000000, "Member 'SharedPlayerStateBlueprintLibrary_IsRoomManager::_user' has a wrong offset!");
static_assert(offsetof(SharedPlayerStateBlueprintLibrary_IsRoomManager, ReturnValue) == 0x0000A0, "Member 'SharedPlayerStateBlueprintLibrary_IsRoomManager::ReturnValue' has a wrong offset!");

// Function Stigma.ShopGoodsHelper.GetGoodsCategoryFromItemCategory
// 0x0002 (0x0002 - 0x0000)
struct ShopGoodsHelper_GetGoodsCategoryFromItemCategory final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoodsCategory                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopGoodsHelper_GetGoodsCategoryFromItemCategory) == 0x000001, "Wrong alignment on ShopGoodsHelper_GetGoodsCategoryFromItemCategory");
static_assert(sizeof(ShopGoodsHelper_GetGoodsCategoryFromItemCategory) == 0x000002, "Wrong size on ShopGoodsHelper_GetGoodsCategoryFromItemCategory");
static_assert(offsetof(ShopGoodsHelper_GetGoodsCategoryFromItemCategory, _category) == 0x000000, "Member 'ShopGoodsHelper_GetGoodsCategoryFromItemCategory::_category' has a wrong offset!");
static_assert(offsetof(ShopGoodsHelper_GetGoodsCategoryFromItemCategory, ReturnValue) == 0x000001, "Member 'ShopGoodsHelper_GetGoodsCategoryFromItemCategory::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckCanInvitePartyTarget
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_CheckCanInvitePartyTarget final
{
public:
	struct FUserID                                _target_user_id;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckCanInvitePartyTarget) == 0x000008, "Wrong alignment on SocialContext_CheckCanInvitePartyTarget");
static_assert(sizeof(SocialContext_CheckCanInvitePartyTarget) == 0x000010, "Wrong size on SocialContext_CheckCanInvitePartyTarget");
static_assert(offsetof(SocialContext_CheckCanInvitePartyTarget, _target_user_id) == 0x000000, "Member 'SocialContext_CheckCanInvitePartyTarget::_target_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckCanInvitePartyTarget, ReturnValue) == 0x000008, "Member 'SocialContext_CheckCanInvitePartyTarget::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckImPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct SocialContext_CheckImPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_CheckImPartyLeader) == 0x000001, "Wrong alignment on SocialContext_CheckImPartyLeader");
static_assert(sizeof(SocialContext_CheckImPartyLeader) == 0x000001, "Wrong size on SocialContext_CheckImPartyLeader");
static_assert(offsetof(SocialContext_CheckImPartyLeader, ReturnValue) == 0x000000, "Member 'SocialContext_CheckImPartyLeader::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckIsPartyLeader
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_CheckIsPartyLeader final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckIsPartyLeader) == 0x000008, "Wrong alignment on SocialContext_CheckIsPartyLeader");
static_assert(sizeof(SocialContext_CheckIsPartyLeader) == 0x000010, "Wrong size on SocialContext_CheckIsPartyLeader");
static_assert(offsetof(SocialContext_CheckIsPartyLeader, _user_id) == 0x000000, "Member 'SocialContext_CheckIsPartyLeader::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckIsPartyLeader, ReturnValue) == 0x000008, "Member 'SocialContext_CheckIsPartyLeader::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.DequeueAskFriendNotify
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_DequeueAskFriendNotify final
{
public:
	class UUserProfile*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_DequeueAskFriendNotify) == 0x000008, "Wrong alignment on SocialContext_DequeueAskFriendNotify");
static_assert(sizeof(SocialContext_DequeueAskFriendNotify) == 0x000008, "Wrong size on SocialContext_DequeueAskFriendNotify");
static_assert(offsetof(SocialContext_DequeueAskFriendNotify, ReturnValue) == 0x000000, "Member 'SocialContext_DequeueAskFriendNotify::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.FindMyFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_FindMyFriend final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UUserProfile*                     ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_FindMyFriend) == 0x000008, "Wrong alignment on SocialContext_FindMyFriend");
static_assert(sizeof(SocialContext_FindMyFriend) == 0x000010, "Wrong size on SocialContext_FindMyFriend");
static_assert(offsetof(SocialContext_FindMyFriend, _user_id) == 0x000000, "Member 'SocialContext_FindMyFriend::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_FindMyFriend, ReturnValue) == 0x000008, "Member 'SocialContext_FindMyFriend::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.FindPartyMember
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_FindPartyMember final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_FindPartyMember) == 0x000008, "Wrong alignment on SocialContext_FindPartyMember");
static_assert(sizeof(SocialContext_FindPartyMember) == 0x000010, "Wrong size on SocialContext_FindPartyMember");
static_assert(offsetof(SocialContext_FindPartyMember, _user_id) == 0x000000, "Member 'SocialContext_FindPartyMember::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_FindPartyMember, ReturnValue) == 0x000008, "Member 'SocialContext_FindPartyMember::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetPartyReqTimeMap
// 0x0050 (0x0050 - 0x0000)
struct SocialContext_GetPartyReqTimeMap final
{
public:
	TMap<struct FUserID, struct FDateTime>        ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetPartyReqTimeMap) == 0x000008, "Wrong alignment on SocialContext_GetPartyReqTimeMap");
static_assert(sizeof(SocialContext_GetPartyReqTimeMap) == 0x000050, "Wrong size on SocialContext_GetPartyReqTimeMap");
static_assert(offsetof(SocialContext_GetPartyReqTimeMap, ReturnValue) == 0x000000, "Member 'SocialContext_GetPartyReqTimeMap::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetRemainAskFriendNotifyCount
// 0x0004 (0x0004 - 0x0000)
struct SocialContext_GetRemainAskFriendNotifyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetRemainAskFriendNotifyCount) == 0x000004, "Wrong alignment on SocialContext_GetRemainAskFriendNotifyCount");
static_assert(sizeof(SocialContext_GetRemainAskFriendNotifyCount) == 0x000004, "Wrong size on SocialContext_GetRemainAskFriendNotifyCount");
static_assert(offsetof(SocialContext_GetRemainAskFriendNotifyCount, ReturnValue) == 0x000000, "Member 'SocialContext_GetRemainAskFriendNotifyCount::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetRemainFriendAskNotifyCount
// 0x0004 (0x0004 - 0x0000)
struct SocialContext_GetRemainFriendAskNotifyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetRemainFriendAskNotifyCount) == 0x000004, "Wrong alignment on SocialContext_GetRemainFriendAskNotifyCount");
static_assert(sizeof(SocialContext_GetRemainFriendAskNotifyCount) == 0x000004, "Wrong size on SocialContext_GetRemainFriendAskNotifyCount");
static_assert(offsetof(SocialContext_GetRemainFriendAskNotifyCount, ReturnValue) == 0x000000, "Member 'SocialContext_GetRemainFriendAskNotifyCount::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetRemainPartyInviteNotifyCount
// 0x0004 (0x0004 - 0x0000)
struct SocialContext_GetRemainPartyInviteNotifyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetRemainPartyInviteNotifyCount) == 0x000004, "Wrong alignment on SocialContext_GetRemainPartyInviteNotifyCount");
static_assert(sizeof(SocialContext_GetRemainPartyInviteNotifyCount) == 0x000004, "Wrong size on SocialContext_GetRemainPartyInviteNotifyCount");
static_assert(offsetof(SocialContext_GetRemainPartyInviteNotifyCount, ReturnValue) == 0x000000, "Member 'SocialContext_GetRemainPartyInviteNotifyCount::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.IsInAskFriendReqCoolTime
// 0x0028 (0x0028 - 0x0000)
struct SocialContext_IsInAskFriendReqCoolTime final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _nickname;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_IsInAskFriendReqCoolTime) == 0x000008, "Wrong alignment on SocialContext_IsInAskFriendReqCoolTime");
static_assert(sizeof(SocialContext_IsInAskFriendReqCoolTime) == 0x000028, "Wrong size on SocialContext_IsInAskFriendReqCoolTime");
static_assert(offsetof(SocialContext_IsInAskFriendReqCoolTime, _user_id) == 0x000000, "Member 'SocialContext_IsInAskFriendReqCoolTime::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_IsInAskFriendReqCoolTime, _nickname) == 0x000008, "Member 'SocialContext_IsInAskFriendReqCoolTime::_nickname' has a wrong offset!");
static_assert(offsetof(SocialContext_IsInAskFriendReqCoolTime, ReturnValue) == 0x000020, "Member 'SocialContext_IsInAskFriendReqCoolTime::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.IsInInviteBattleCoolTime
// 0x0028 (0x0028 - 0x0000)
struct SocialContext_IsInInviteBattleCoolTime final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _nickname;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E7[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_IsInInviteBattleCoolTime) == 0x000008, "Wrong alignment on SocialContext_IsInInviteBattleCoolTime");
static_assert(sizeof(SocialContext_IsInInviteBattleCoolTime) == 0x000028, "Wrong size on SocialContext_IsInInviteBattleCoolTime");
static_assert(offsetof(SocialContext_IsInInviteBattleCoolTime, _user_id) == 0x000000, "Member 'SocialContext_IsInInviteBattleCoolTime::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_IsInInviteBattleCoolTime, _nickname) == 0x000008, "Member 'SocialContext_IsInInviteBattleCoolTime::_nickname' has a wrong offset!");
static_assert(offsetof(SocialContext_IsInInviteBattleCoolTime, ReturnValue) == 0x000020, "Member 'SocialContext_IsInInviteBattleCoolTime::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.IsInPartyReqCoolTime
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_IsInPartyReqCoolTime final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_IsInPartyReqCoolTime) == 0x000008, "Wrong alignment on SocialContext_IsInPartyReqCoolTime");
static_assert(sizeof(SocialContext_IsInPartyReqCoolTime) == 0x000010, "Wrong size on SocialContext_IsInPartyReqCoolTime");
static_assert(offsetof(SocialContext_IsInPartyReqCoolTime, _user_id) == 0x000000, "Member 'SocialContext_IsInPartyReqCoolTime::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_IsInPartyReqCoolTime, ReturnValue) == 0x000008, "Member 'SocialContext_IsInPartyReqCoolTime::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.NotifyPartyInviteCReq
// 0x0028 (0x0028 - 0x0000)
struct SocialContext_NotifyPartyInviteCReq final
{
public:
	struct FPartyID                               _party_id;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _nick;                                             // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_NotifyPartyInviteCReq) == 0x000008, "Wrong alignment on SocialContext_NotifyPartyInviteCReq");
static_assert(sizeof(SocialContext_NotifyPartyInviteCReq) == 0x000028, "Wrong size on SocialContext_NotifyPartyInviteCReq");
static_assert(offsetof(SocialContext_NotifyPartyInviteCReq, _party_id) == 0x000000, "Member 'SocialContext_NotifyPartyInviteCReq::_party_id' has a wrong offset!");
static_assert(offsetof(SocialContext_NotifyPartyInviteCReq, _user_id) == 0x000008, "Member 'SocialContext_NotifyPartyInviteCReq::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_NotifyPartyInviteCReq, _nick) == 0x000010, "Member 'SocialContext_NotifyPartyInviteCReq::_nick' has a wrong offset!");

// Function Stigma.SocialContext.NotifyUpdateMyFriends
// 0x0028 (0x0028 - 0x0000)
struct SocialContext_NotifyUpdateMyFriends final
{
public:
	struct FUserID                                _friend_id;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _user_name;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_accepted;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_NotifyUpdateMyFriends) == 0x000008, "Wrong alignment on SocialContext_NotifyUpdateMyFriends");
static_assert(sizeof(SocialContext_NotifyUpdateMyFriends) == 0x000028, "Wrong size on SocialContext_NotifyUpdateMyFriends");
static_assert(offsetof(SocialContext_NotifyUpdateMyFriends, _friend_id) == 0x000000, "Member 'SocialContext_NotifyUpdateMyFriends::_friend_id' has a wrong offset!");
static_assert(offsetof(SocialContext_NotifyUpdateMyFriends, _user_name) == 0x000008, "Member 'SocialContext_NotifyUpdateMyFriends::_user_name' has a wrong offset!");
static_assert(offsetof(SocialContext_NotifyUpdateMyFriends, _is_accepted) == 0x000020, "Member 'SocialContext_NotifyUpdateMyFriends::_is_accepted' has a wrong offset!");

// Function Stigma.SocialContext.RecordAskFriendReq
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_RecordAskFriendReq final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RecordAskFriendReq) == 0x000008, "Wrong alignment on SocialContext_RecordAskFriendReq");
static_assert(sizeof(SocialContext_RecordAskFriendReq) == 0x000008, "Wrong size on SocialContext_RecordAskFriendReq");
static_assert(offsetof(SocialContext_RecordAskFriendReq, _user_id) == 0x000000, "Member 'SocialContext_RecordAskFriendReq::_user_id' has a wrong offset!");

// Function Stigma.SocialContext.RecordInviteBattleReq
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_RecordInviteBattleReq final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RecordInviteBattleReq) == 0x000008, "Wrong alignment on SocialContext_RecordInviteBattleReq");
static_assert(sizeof(SocialContext_RecordInviteBattleReq) == 0x000008, "Wrong size on SocialContext_RecordInviteBattleReq");
static_assert(offsetof(SocialContext_RecordInviteBattleReq, _user_id) == 0x000000, "Member 'SocialContext_RecordInviteBattleReq::_user_id' has a wrong offset!");

// Function Stigma.SocialContext.RecordUserPartyReq
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_RecordUserPartyReq final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RecordUserPartyReq) == 0x000008, "Wrong alignment on SocialContext_RecordUserPartyReq");
static_assert(sizeof(SocialContext_RecordUserPartyReq) == 0x000008, "Wrong size on SocialContext_RecordUserPartyReq");
static_assert(offsetof(SocialContext_RecordUserPartyReq, _user_id) == 0x000000, "Member 'SocialContext_RecordUserPartyReq::_user_id' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnAskedFriendListUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnAskedFriendListUpdated final
{
public:
	TDelegate<void(TArray<class UUserProfile*>& _steam_friends)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnAskedFriendListUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnAskedFriendListUpdated");
static_assert(sizeof(SocialContext_RegisterOnAskedFriendListUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnAskedFriendListUpdated");
static_assert(offsetof(SocialContext_RegisterOnAskedFriendListUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnAskedFriendListUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnFriendAskCreateBCRecv
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnFriendAskCreateBCRecv final
{
public:
	TDelegate<void(class UUserProfile* _message)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnFriendAskCreateBCRecv) == 0x000004, "Wrong alignment on SocialContext_RegisterOnFriendAskCreateBCRecv");
static_assert(sizeof(SocialContext_RegisterOnFriendAskCreateBCRecv) == 0x000010, "Wrong size on SocialContext_RegisterOnFriendAskCreateBCRecv");
static_assert(offsetof(SocialContext_RegisterOnFriendAskCreateBCRecv, _callback) == 0x000000, "Member 'SocialContext_RegisterOnFriendAskCreateBCRecv::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnFriendAskUpdateBCRecv
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnFriendAskUpdateBCRecv final
{
public:
	TDelegate<void(class UUserProfile* _user, bool _is_accept)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnFriendAskUpdateBCRecv) == 0x000004, "Wrong alignment on SocialContext_RegisterOnFriendAskUpdateBCRecv");
static_assert(sizeof(SocialContext_RegisterOnFriendAskUpdateBCRecv) == 0x000010, "Wrong size on SocialContext_RegisterOnFriendAskUpdateBCRecv");
static_assert(offsetof(SocialContext_RegisterOnFriendAskUpdateBCRecv, _callback) == 0x000000, "Member 'SocialContext_RegisterOnFriendAskUpdateBCRecv::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnFriendAskUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnFriendAskUpdated final
{
public:
	TDelegate<void(TArray<class UUserProfile*>& _asked_users)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnFriendAskUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnFriendAskUpdated");
static_assert(sizeof(SocialContext_RegisterOnFriendAskUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnFriendAskUpdated");
static_assert(offsetof(SocialContext_RegisterOnFriendAskUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnFriendAskUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnFriendDeleted
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnFriendDeleted final
{
public:
	TDelegate<void(class UUserProfile* _removed)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnFriendDeleted) == 0x000004, "Wrong alignment on SocialContext_RegisterOnFriendDeleted");
static_assert(sizeof(SocialContext_RegisterOnFriendDeleted) == 0x000010, "Wrong size on SocialContext_RegisterOnFriendDeleted");
static_assert(offsetof(SocialContext_RegisterOnFriendDeleted, _callback) == 0x000000, "Member 'SocialContext_RegisterOnFriendDeleted::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnFriendReqCoolTime
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnFriendReqCoolTime final
{
public:
	TDelegate<void(struct FUserID& _target_user_id, struct FUserName& _target_nickname)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnFriendReqCoolTime) == 0x000004, "Wrong alignment on SocialContext_RegisterOnFriendReqCoolTime");
static_assert(sizeof(SocialContext_RegisterOnFriendReqCoolTime) == 0x000010, "Wrong size on SocialContext_RegisterOnFriendReqCoolTime");
static_assert(offsetof(SocialContext_RegisterOnFriendReqCoolTime, _callback) == 0x000000, "Member 'SocialContext_RegisterOnFriendReqCoolTime::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnMyFriendListUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnMyFriendListUpdated final
{
public:
	TDelegate<void(TArray<class UUserProfile*>& _steam_friends)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnMyFriendListUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnMyFriendListUpdated");
static_assert(sizeof(SocialContext_RegisterOnMyFriendListUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnMyFriendListUpdated");
static_assert(offsetof(SocialContext_RegisterOnMyFriendListUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnMyFriendListUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnMyPartyEntered
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnMyPartyEntered final
{
public:
	TDelegate<void(class UBriefParty* _party)>    _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnMyPartyEntered) == 0x000004, "Wrong alignment on SocialContext_RegisterOnMyPartyEntered");
static_assert(sizeof(SocialContext_RegisterOnMyPartyEntered) == 0x000010, "Wrong size on SocialContext_RegisterOnMyPartyEntered");
static_assert(offsetof(SocialContext_RegisterOnMyPartyEntered, _callback) == 0x000000, "Member 'SocialContext_RegisterOnMyPartyEntered::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnMyPartyExited
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnMyPartyExited final
{
public:
	TDelegate<void()>                             _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnMyPartyExited) == 0x000004, "Wrong alignment on SocialContext_RegisterOnMyPartyExited");
static_assert(sizeof(SocialContext_RegisterOnMyPartyExited) == 0x000010, "Wrong size on SocialContext_RegisterOnMyPartyExited");
static_assert(offsetof(SocialContext_RegisterOnMyPartyExited, _callback) == 0x000000, "Member 'SocialContext_RegisterOnMyPartyExited::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnPartyCharaUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnPartyCharaUpdated final
{
public:
	TDelegate<void(struct FUserID& _user_id, struct FCharSpec& _chara_info)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnPartyCharaUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnPartyCharaUpdated");
static_assert(sizeof(SocialContext_RegisterOnPartyCharaUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnPartyCharaUpdated");
static_assert(offsetof(SocialContext_RegisterOnPartyCharaUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnPartyCharaUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnPartyInviteCReqRecv
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnPartyInviteCReqRecv final
{
public:
	TDelegate<void(struct FPartyID& _party_id, class UUserProfile* _from_user)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnPartyInviteCReqRecv) == 0x000004, "Wrong alignment on SocialContext_RegisterOnPartyInviteCReqRecv");
static_assert(sizeof(SocialContext_RegisterOnPartyInviteCReqRecv) == 0x000010, "Wrong size on SocialContext_RegisterOnPartyInviteCReqRecv");
static_assert(offsetof(SocialContext_RegisterOnPartyInviteCReqRecv, _callback) == 0x000000, "Member 'SocialContext_RegisterOnPartyInviteCReqRecv::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnPartyInviteReq
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnPartyInviteReq final
{
public:
	TDelegate<void(struct FUserID& _user_id)>     _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnPartyInviteReq) == 0x000004, "Wrong alignment on SocialContext_RegisterOnPartyInviteReq");
static_assert(sizeof(SocialContext_RegisterOnPartyInviteReq) == 0x000010, "Wrong size on SocialContext_RegisterOnPartyInviteReq");
static_assert(offsetof(SocialContext_RegisterOnPartyInviteReq, _callback) == 0x000000, "Member 'SocialContext_RegisterOnPartyInviteReq::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnPartyLeaderUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnPartyLeaderUpdated final
{
public:
	TDelegate<void(struct FUserID& _leader_id)>   _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnPartyLeaderUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnPartyLeaderUpdated");
static_assert(sizeof(SocialContext_RegisterOnPartyLeaderUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnPartyLeaderUpdated");
static_assert(offsetof(SocialContext_RegisterOnPartyLeaderUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnPartyLeaderUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnPartyMemberAdded
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnPartyMemberAdded final
{
public:
	TDelegate<void(class UBriefParty* _party, class UUserProfile* _member)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnPartyMemberAdded) == 0x000004, "Wrong alignment on SocialContext_RegisterOnPartyMemberAdded");
static_assert(sizeof(SocialContext_RegisterOnPartyMemberAdded) == 0x000010, "Wrong size on SocialContext_RegisterOnPartyMemberAdded");
static_assert(offsetof(SocialContext_RegisterOnPartyMemberAdded, _callback) == 0x000000, "Member 'SocialContext_RegisterOnPartyMemberAdded::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnPartyMemberDeleted
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnPartyMemberDeleted final
{
public:
	TDelegate<void(class UBriefParty* _party, struct FUserID& _user_id)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnPartyMemberDeleted) == 0x000004, "Wrong alignment on SocialContext_RegisterOnPartyMemberDeleted");
static_assert(sizeof(SocialContext_RegisterOnPartyMemberDeleted) == 0x000010, "Wrong size on SocialContext_RegisterOnPartyMemberDeleted");
static_assert(offsetof(SocialContext_RegisterOnPartyMemberDeleted, _callback) == 0x000000, "Member 'SocialContext_RegisterOnPartyMemberDeleted::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnRecentPlayerListUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnRecentPlayerListUpdated final
{
public:
	TDelegate<void(TArray<class UUserProfile*>& _steam_friends)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnRecentPlayerListUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnRecentPlayerListUpdated");
static_assert(sizeof(SocialContext_RegisterOnRecentPlayerListUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnRecentPlayerListUpdated");
static_assert(offsetof(SocialContext_RegisterOnRecentPlayerListUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnRecentPlayerListUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RegisterOnSteamFriendListUpdated
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RegisterOnSteamFriendListUpdated final
{
public:
	TDelegate<void(TArray<class UUserProfile*>& _steam_friends)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RegisterOnSteamFriendListUpdated) == 0x000004, "Wrong alignment on SocialContext_RegisterOnSteamFriendListUpdated");
static_assert(sizeof(SocialContext_RegisterOnSteamFriendListUpdated) == 0x000010, "Wrong size on SocialContext_RegisterOnSteamFriendListUpdated");
static_assert(offsetof(SocialContext_RegisterOnSteamFriendListUpdated, _callback) == 0x000000, "Member 'SocialContext_RegisterOnSteamFriendListUpdated::_callback' has a wrong offset!");

// Function Stigma.SocialContext.RemoveAskFriendReqRecord
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_RemoveAskFriendReqRecord final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RemoveAskFriendReqRecord) == 0x000008, "Wrong alignment on SocialContext_RemoveAskFriendReqRecord");
static_assert(sizeof(SocialContext_RemoveAskFriendReqRecord) == 0x000008, "Wrong size on SocialContext_RemoveAskFriendReqRecord");
static_assert(offsetof(SocialContext_RemoveAskFriendReqRecord, _user_id) == 0x000000, "Member 'SocialContext_RemoveAskFriendReqRecord::_user_id' has a wrong offset!");

// Function Stigma.SocialContext.RemoveInviteBattleRecord
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_RemoveInviteBattleRecord final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RemoveInviteBattleRecord) == 0x000008, "Wrong alignment on SocialContext_RemoveInviteBattleRecord");
static_assert(sizeof(SocialContext_RemoveInviteBattleRecord) == 0x000008, "Wrong size on SocialContext_RemoveInviteBattleRecord");
static_assert(offsetof(SocialContext_RemoveInviteBattleRecord, _user_id) == 0x000000, "Member 'SocialContext_RemoveInviteBattleRecord::_user_id' has a wrong offset!");

// Function Stigma.SocialContext.RemoveMyFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RemoveMyFriend final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_RemoveMyFriend) == 0x000008, "Wrong alignment on SocialContext_RemoveMyFriend");
static_assert(sizeof(SocialContext_RemoveMyFriend) == 0x000010, "Wrong size on SocialContext_RemoveMyFriend");
static_assert(offsetof(SocialContext_RemoveMyFriend, _user_id) == 0x000000, "Member 'SocialContext_RemoveMyFriend::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_RemoveMyFriend, ReturnValue) == 0x000008, "Member 'SocialContext_RemoveMyFriend::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.RemoveMyParty
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_RemoveMyParty final
{
public:
	struct FPartyID                               _party_id;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                _remove_user_id;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RemoveMyParty) == 0x000008, "Wrong alignment on SocialContext_RemoveMyParty");
static_assert(sizeof(SocialContext_RemoveMyParty) == 0x000010, "Wrong size on SocialContext_RemoveMyParty");
static_assert(offsetof(SocialContext_RemoveMyParty, _party_id) == 0x000000, "Member 'SocialContext_RemoveMyParty::_party_id' has a wrong offset!");
static_assert(offsetof(SocialContext_RemoveMyParty, _remove_user_id) == 0x000008, "Member 'SocialContext_RemoveMyParty::_remove_user_id' has a wrong offset!");

// Function Stigma.SocialContext.RemovePartyMember
// 0x0020 (0x0020 - 0x0000)
struct SocialContext_RemovePartyMember final
{
public:
	struct FPartyID                               _party_id;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _next_party_leader;                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_RemovePartyMember) == 0x000008, "Wrong alignment on SocialContext_RemovePartyMember");
static_assert(sizeof(SocialContext_RemovePartyMember) == 0x000020, "Wrong size on SocialContext_RemovePartyMember");
static_assert(offsetof(SocialContext_RemovePartyMember, _party_id) == 0x000000, "Member 'SocialContext_RemovePartyMember::_party_id' has a wrong offset!");
static_assert(offsetof(SocialContext_RemovePartyMember, _user_id) == 0x000008, "Member 'SocialContext_RemovePartyMember::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_RemovePartyMember, _next_party_leader) == 0x000010, "Member 'SocialContext_RemovePartyMember::_next_party_leader' has a wrong offset!");
static_assert(offsetof(SocialContext_RemovePartyMember, ReturnValue) == 0x000018, "Member 'SocialContext_RemovePartyMember::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.RemoveUserPartyReqRecord
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_RemoveUserPartyReqRecord final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_RemoveUserPartyReqRecord) == 0x000008, "Wrong alignment on SocialContext_RemoveUserPartyReqRecord");
static_assert(sizeof(SocialContext_RemoveUserPartyReqRecord) == 0x000008, "Wrong size on SocialContext_RemoveUserPartyReqRecord");
static_assert(offsetof(SocialContext_RemoveUserPartyReqRecord, _user_id) == 0x000000, "Member 'SocialContext_RemoveUserPartyReqRecord::_user_id' has a wrong offset!");

// Function Stigma.SocialContext.SetMyParty
// 0x0030 (0x0030 - 0x0000)
struct SocialContext_SetMyParty final
{
public:
	struct FPartyID                               _party_id;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                _leader_id;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EC[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FUserID>                        _members;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23ED[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_SetMyParty) == 0x000008, "Wrong alignment on SocialContext_SetMyParty");
static_assert(sizeof(SocialContext_SetMyParty) == 0x000030, "Wrong size on SocialContext_SetMyParty");
static_assert(offsetof(SocialContext_SetMyParty, _party_id) == 0x000000, "Member 'SocialContext_SetMyParty::_party_id' has a wrong offset!");
static_assert(offsetof(SocialContext_SetMyParty, _leader_id) == 0x000008, "Member 'SocialContext_SetMyParty::_leader_id' has a wrong offset!");
static_assert(offsetof(SocialContext_SetMyParty, _game_mode) == 0x000010, "Member 'SocialContext_SetMyParty::_game_mode' has a wrong offset!");
static_assert(offsetof(SocialContext_SetMyParty, _members) == 0x000018, "Member 'SocialContext_SetMyParty::_members' has a wrong offset!");
static_assert(offsetof(SocialContext_SetMyParty, ReturnValue) == 0x000028, "Member 'SocialContext_SetMyParty::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.SetPartyLeader
// 0x0018 (0x0018 - 0x0000)
struct SocialContext_SetPartyLeader final
{
public:
	struct FPartyID                               _party_id;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                _leader_id;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_SetPartyLeader) == 0x000008, "Wrong alignment on SocialContext_SetPartyLeader");
static_assert(sizeof(SocialContext_SetPartyLeader) == 0x000018, "Wrong size on SocialContext_SetPartyLeader");
static_assert(offsetof(SocialContext_SetPartyLeader, _party_id) == 0x000000, "Member 'SocialContext_SetPartyLeader::_party_id' has a wrong offset!");
static_assert(offsetof(SocialContext_SetPartyLeader, _leader_id) == 0x000008, "Member 'SocialContext_SetPartyLeader::_leader_id' has a wrong offset!");
static_assert(offsetof(SocialContext_SetPartyLeader, ReturnValue) == 0x000010, "Member 'SocialContext_SetPartyLeader::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.SubscribeInviteToBattle
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_SubscribeInviteToBattle final
{
public:
	TDelegate<void(struct FREQ_InviteToBattle& _invite)> _proc;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_SubscribeInviteToBattle) == 0x000004, "Wrong alignment on SocialContext_SubscribeInviteToBattle");
static_assert(sizeof(SocialContext_SubscribeInviteToBattle) == 0x000010, "Wrong size on SocialContext_SubscribeInviteToBattle");
static_assert(offsetof(SocialContext_SubscribeInviteToBattle, _proc) == 0x000000, "Member 'SocialContext_SubscribeInviteToBattle::_proc' has a wrong offset!");

// Function Stigma.SocialContext.UnregisterAllCallbacks
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_UnregisterAllCallbacks final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_UnregisterAllCallbacks) == 0x000008, "Wrong alignment on SocialContext_UnregisterAllCallbacks");
static_assert(sizeof(SocialContext_UnregisterAllCallbacks) == 0x000008, "Wrong size on SocialContext_UnregisterAllCallbacks");
static_assert(offsetof(SocialContext_UnregisterAllCallbacks, _obj) == 0x000000, "Member 'SocialContext_UnregisterAllCallbacks::_obj' has a wrong offset!");

// Function Stigma.SocialContext.UnsubscribeInviteToBattle
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_UnsubscribeInviteToBattle final
{
public:
	const class UObject*                          _obj;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_UnsubscribeInviteToBattle) == 0x000008, "Wrong alignment on SocialContext_UnsubscribeInviteToBattle");
static_assert(sizeof(SocialContext_UnsubscribeInviteToBattle) == 0x000008, "Wrong size on SocialContext_UnsubscribeInviteToBattle");
static_assert(offsetof(SocialContext_UnsubscribeInviteToBattle, _obj) == 0x000000, "Member 'SocialContext_UnsubscribeInviteToBattle::_obj' has a wrong offset!");

// Function Stigma.SocialContext.UpdatePartyCharacter
// 0x0118 (0x0118 - 0x0000)
struct SocialContext_UpdatePartyCharacter final
{
public:
	struct FPartyID                               _party_id;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                _user_info;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharSpec                              _chara_info;                                       // 0x0010(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _invoke_callback;                                  // 0x0110(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0111(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23EF[0x6];                                     // 0x0112(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_UpdatePartyCharacter) == 0x000008, "Wrong alignment on SocialContext_UpdatePartyCharacter");
static_assert(sizeof(SocialContext_UpdatePartyCharacter) == 0x000118, "Wrong size on SocialContext_UpdatePartyCharacter");
static_assert(offsetof(SocialContext_UpdatePartyCharacter, _party_id) == 0x000000, "Member 'SocialContext_UpdatePartyCharacter::_party_id' has a wrong offset!");
static_assert(offsetof(SocialContext_UpdatePartyCharacter, _user_info) == 0x000008, "Member 'SocialContext_UpdatePartyCharacter::_user_info' has a wrong offset!");
static_assert(offsetof(SocialContext_UpdatePartyCharacter, _chara_info) == 0x000010, "Member 'SocialContext_UpdatePartyCharacter::_chara_info' has a wrong offset!");
static_assert(offsetof(SocialContext_UpdatePartyCharacter, _invoke_callback) == 0x000110, "Member 'SocialContext_UpdatePartyCharacter::_invoke_callback' has a wrong offset!");
static_assert(offsetof(SocialContext_UpdatePartyCharacter, ReturnValue) == 0x000111, "Member 'SocialContext_UpdatePartyCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckCanAskFriendTarget
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_CheckCanAskFriendTarget final
{
public:
	struct FUserID                                _target_user_id;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckCanAskFriendTarget) == 0x000008, "Wrong alignment on SocialContext_CheckCanAskFriendTarget");
static_assert(sizeof(SocialContext_CheckCanAskFriendTarget) == 0x000010, "Wrong size on SocialContext_CheckCanAskFriendTarget");
static_assert(offsetof(SocialContext_CheckCanAskFriendTarget, _target_user_id) == 0x000000, "Member 'SocialContext_CheckCanAskFriendTarget::_target_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckCanAskFriendTarget, ReturnValue) == 0x000008, "Member 'SocialContext_CheckCanAskFriendTarget::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckCanJoinPartyTarget
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_CheckCanJoinPartyTarget final
{
public:
	struct FUserID                                _target_user_id;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckCanJoinPartyTarget) == 0x000008, "Wrong alignment on SocialContext_CheckCanJoinPartyTarget");
static_assert(sizeof(SocialContext_CheckCanJoinPartyTarget) == 0x000010, "Wrong size on SocialContext_CheckCanJoinPartyTarget");
static_assert(offsetof(SocialContext_CheckCanJoinPartyTarget, _target_user_id) == 0x000000, "Member 'SocialContext_CheckCanJoinPartyTarget::_target_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckCanJoinPartyTarget, ReturnValue) == 0x000008, "Member 'SocialContext_CheckCanJoinPartyTarget::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckHasRestPartySlot
// 0x0001 (0x0001 - 0x0000)
struct SocialContext_CheckHasRestPartySlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_CheckHasRestPartySlot) == 0x000001, "Wrong alignment on SocialContext_CheckHasRestPartySlot");
static_assert(sizeof(SocialContext_CheckHasRestPartySlot) == 0x000001, "Wrong size on SocialContext_CheckHasRestPartySlot");
static_assert(offsetof(SocialContext_CheckHasRestPartySlot, ReturnValue) == 0x000000, "Member 'SocialContext_CheckHasRestPartySlot::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckIsAskedFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_CheckIsAskedFriend final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckIsAskedFriend) == 0x000008, "Wrong alignment on SocialContext_CheckIsAskedFriend");
static_assert(sizeof(SocialContext_CheckIsAskedFriend) == 0x000010, "Wrong size on SocialContext_CheckIsAskedFriend");
static_assert(offsetof(SocialContext_CheckIsAskedFriend, _user_id) == 0x000000, "Member 'SocialContext_CheckIsAskedFriend::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckIsAskedFriend, ReturnValue) == 0x000008, "Member 'SocialContext_CheckIsAskedFriend::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckIsMyFriend
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_CheckIsMyFriend final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckIsMyFriend) == 0x000008, "Wrong alignment on SocialContext_CheckIsMyFriend");
static_assert(sizeof(SocialContext_CheckIsMyFriend) == 0x000010, "Wrong size on SocialContext_CheckIsMyFriend");
static_assert(offsetof(SocialContext_CheckIsMyFriend, _user_id) == 0x000000, "Member 'SocialContext_CheckIsMyFriend::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckIsMyFriend, ReturnValue) == 0x000008, "Member 'SocialContext_CheckIsMyFriend::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.CheckIsMyFriendNickname
// 0x0020 (0x0020 - 0x0000)
struct SocialContext_CheckIsMyFriendNickname final
{
public:
	struct FUserName                              _nickname;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SocialContext_CheckIsMyFriendNickname) == 0x000008, "Wrong alignment on SocialContext_CheckIsMyFriendNickname");
static_assert(sizeof(SocialContext_CheckIsMyFriendNickname) == 0x000020, "Wrong size on SocialContext_CheckIsMyFriendNickname");
static_assert(offsetof(SocialContext_CheckIsMyFriendNickname, _nickname) == 0x000000, "Member 'SocialContext_CheckIsMyFriendNickname::_nickname' has a wrong offset!");
static_assert(offsetof(SocialContext_CheckIsMyFriendNickname, ReturnValue) == 0x000018, "Member 'SocialContext_CheckIsMyFriendNickname::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetMaxPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct SocialContext_GetMaxPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetMaxPartyMemberCount) == 0x000004, "Wrong alignment on SocialContext_GetMaxPartyMemberCount");
static_assert(sizeof(SocialContext_GetMaxPartyMemberCount) == 0x000004, "Wrong size on SocialContext_GetMaxPartyMemberCount");
static_assert(offsetof(SocialContext_GetMaxPartyMemberCount, ReturnValue) == 0x000000, "Member 'SocialContext_GetMaxPartyMemberCount::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetMyParty
// 0x0008 (0x0008 - 0x0000)
struct SocialContext_GetMyParty final
{
public:
	class UBriefParty*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetMyParty) == 0x000008, "Wrong alignment on SocialContext_GetMyParty");
static_assert(sizeof(SocialContext_GetMyParty) == 0x000008, "Wrong size on SocialContext_GetMyParty");
static_assert(offsetof(SocialContext_GetMyParty, ReturnValue) == 0x000000, "Member 'SocialContext_GetMyParty::ReturnValue' has a wrong offset!");

// Function Stigma.SocialContext.GetUser
// 0x0010 (0x0010 - 0x0000)
struct SocialContext_GetUser final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialContext_GetUser) == 0x000008, "Wrong alignment on SocialContext_GetUser");
static_assert(sizeof(SocialContext_GetUser) == 0x000010, "Wrong size on SocialContext_GetUser");
static_assert(offsetof(SocialContext_GetUser, _user_id) == 0x000000, "Member 'SocialContext_GetUser::_user_id' has a wrong offset!");
static_assert(offsetof(SocialContext_GetUser, ReturnValue) == 0x000008, "Member 'SocialContext_GetUser::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.BindChara
// 0x0008 (0x0008 - 0x0000)
struct SpecterAnimInstance_BindChara final
{
public:
	class ACharaBase*                             _owner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_BindChara) == 0x000008, "Wrong alignment on SpecterAnimInstance_BindChara");
static_assert(sizeof(SpecterAnimInstance_BindChara) == 0x000008, "Wrong size on SpecterAnimInstance_BindChara");
static_assert(offsetof(SpecterAnimInstance_BindChara, _owner) == 0x000000, "Member 'SpecterAnimInstance_BindChara::_owner' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.CheckCanTransit1PVIdle
// 0x0003 (0x0003 - 0x0000)
struct SpecterAnimInstance_CheckCanTransit1PVIdle final
{
public:
	bool                                          _from_idle_state;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_check;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_CheckCanTransit1PVIdle) == 0x000001, "Wrong alignment on SpecterAnimInstance_CheckCanTransit1PVIdle");
static_assert(sizeof(SpecterAnimInstance_CheckCanTransit1PVIdle) == 0x000003, "Wrong size on SpecterAnimInstance_CheckCanTransit1PVIdle");
static_assert(offsetof(SpecterAnimInstance_CheckCanTransit1PVIdle, _from_idle_state) == 0x000000, "Member 'SpecterAnimInstance_CheckCanTransit1PVIdle::_from_idle_state' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_CheckCanTransit1PVIdle, _can_check) == 0x000001, "Member 'SpecterAnimInstance_CheckCanTransit1PVIdle::_can_check' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_CheckCanTransit1PVIdle, ReturnValue) == 0x000002, "Member 'SpecterAnimInstance_CheckCanTransit1PVIdle::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.CheckCanTransit3PVIdle
// 0x0003 (0x0003 - 0x0000)
struct SpecterAnimInstance_CheckCanTransit3PVIdle final
{
public:
	bool                                          _from_idle_state;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_check;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_CheckCanTransit3PVIdle) == 0x000001, "Wrong alignment on SpecterAnimInstance_CheckCanTransit3PVIdle");
static_assert(sizeof(SpecterAnimInstance_CheckCanTransit3PVIdle) == 0x000003, "Wrong size on SpecterAnimInstance_CheckCanTransit3PVIdle");
static_assert(offsetof(SpecterAnimInstance_CheckCanTransit3PVIdle, _from_idle_state) == 0x000000, "Member 'SpecterAnimInstance_CheckCanTransit3PVIdle::_from_idle_state' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_CheckCanTransit3PVIdle, _can_check) == 0x000001, "Member 'SpecterAnimInstance_CheckCanTransit3PVIdle::_can_check' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_CheckCanTransit3PVIdle, ReturnValue) == 0x000002, "Member 'SpecterAnimInstance_CheckCanTransit3PVIdle::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.CopyAnimationFrom
// 0x0008 (0x0008 - 0x0000)
struct SpecterAnimInstance_CopyAnimationFrom final
{
public:
	TSubclassOf<class USpecterAnimInstance>       Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_CopyAnimationFrom) == 0x000008, "Wrong alignment on SpecterAnimInstance_CopyAnimationFrom");
static_assert(sizeof(SpecterAnimInstance_CopyAnimationFrom) == 0x000008, "Wrong size on SpecterAnimInstance_CopyAnimationFrom");
static_assert(offsetof(SpecterAnimInstance_CopyAnimationFrom, Type) == 0x000000, "Member 'SpecterAnimInstance_CopyAnimationFrom::Type' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.GetCutSceneOutroAnim
// 0x0010 (0x0010 - 0x0000)
struct SpecterAnimInstance_GetCutSceneOutroAnim final
{
public:
	int32                                         _Pos;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2410[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_GetCutSceneOutroAnim) == 0x000008, "Wrong alignment on SpecterAnimInstance_GetCutSceneOutroAnim");
static_assert(sizeof(SpecterAnimInstance_GetCutSceneOutroAnim) == 0x000010, "Wrong size on SpecterAnimInstance_GetCutSceneOutroAnim");
static_assert(offsetof(SpecterAnimInstance_GetCutSceneOutroAnim, _Pos) == 0x000000, "Member 'SpecterAnimInstance_GetCutSceneOutroAnim::_Pos' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_GetCutSceneOutroAnim, ReturnValue) == 0x000008, "Member 'SpecterAnimInstance_GetCutSceneOutroAnim::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.GetCutSceneOutroCameraAnim
// 0x0008 (0x0008 - 0x0000)
struct SpecterAnimInstance_GetCutSceneOutroCameraAnim final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_GetCutSceneOutroCameraAnim) == 0x000008, "Wrong alignment on SpecterAnimInstance_GetCutSceneOutroCameraAnim");
static_assert(sizeof(SpecterAnimInstance_GetCutSceneOutroCameraAnim) == 0x000008, "Wrong size on SpecterAnimInstance_GetCutSceneOutroCameraAnim");
static_assert(offsetof(SpecterAnimInstance_GetCutSceneOutroCameraAnim, ReturnValue) == 0x000000, "Member 'SpecterAnimInstance_GetCutSceneOutroCameraAnim::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.OnAnimNotify_EnterLowerAction
// 0x0001 (0x0001 - 0x0000)
struct SpecterAnimInstance_OnAnimNotify_EnterLowerAction final
{
public:
	EBodyLowerAction                              _new_action;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_OnAnimNotify_EnterLowerAction) == 0x000001, "Wrong alignment on SpecterAnimInstance_OnAnimNotify_EnterLowerAction");
static_assert(sizeof(SpecterAnimInstance_OnAnimNotify_EnterLowerAction) == 0x000001, "Wrong size on SpecterAnimInstance_OnAnimNotify_EnterLowerAction");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_EnterLowerAction, _new_action) == 0x000000, "Member 'SpecterAnimInstance_OnAnimNotify_EnterLowerAction::_new_action' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.OnAnimNotify_MotionSource
// 0x0010 (0x0010 - 0x0000)
struct SpecterAnimInstance_OnAnimNotify_MotionSource final
{
public:
	bool                                          _begin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionSource                                 _source;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFrom                               _root_motion_mode;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2411[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	class UObject*                                _changer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_OnAnimNotify_MotionSource) == 0x000008, "Wrong alignment on SpecterAnimInstance_OnAnimNotify_MotionSource");
static_assert(sizeof(SpecterAnimInstance_OnAnimNotify_MotionSource) == 0x000010, "Wrong size on SpecterAnimInstance_OnAnimNotify_MotionSource");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_MotionSource, _begin) == 0x000000, "Member 'SpecterAnimInstance_OnAnimNotify_MotionSource::_begin' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_MotionSource, _source) == 0x000001, "Member 'SpecterAnimInstance_OnAnimNotify_MotionSource::_source' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_MotionSource, _root_motion_mode) == 0x000002, "Member 'SpecterAnimInstance_OnAnimNotify_MotionSource::_root_motion_mode' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_MotionSource, _changer) == 0x000008, "Member 'SpecterAnimInstance_OnAnimNotify_MotionSource::_changer' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.OnAnimNotify_UpperBlendStrongly
// 0x0010 (0x0010 - 0x0000)
struct SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly final
{
public:
	bool                                          _begin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2412[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UObject*                                _changer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly) == 0x000008, "Wrong alignment on SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly");
static_assert(sizeof(SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly) == 0x000010, "Wrong size on SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly, _begin) == 0x000000, "Member 'SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly::_begin' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly, _changer) == 0x000008, "Member 'SpecterAnimInstance_OnAnimNotify_UpperBlendStrongly::_changer' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.OnDamaged
// 0x00A8 (0x00A8 - 0x0000)
struct SpecterAnimInstance_OnDamaged final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_OnDamaged) == 0x000008, "Wrong alignment on SpecterAnimInstance_OnDamaged");
static_assert(sizeof(SpecterAnimInstance_OnDamaged) == 0x0000A8, "Wrong size on SpecterAnimInstance_OnDamaged");
static_assert(offsetof(SpecterAnimInstance_OnDamaged, _hit) == 0x000000, "Member 'SpecterAnimInstance_OnDamaged::_hit' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.OnMontageFinished
// 0x0010 (0x0010 - 0x0000)
struct SpecterAnimInstance_OnMontageFinished final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2413[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SpecterAnimInstance_OnMontageFinished) == 0x000008, "Wrong alignment on SpecterAnimInstance_OnMontageFinished");
static_assert(sizeof(SpecterAnimInstance_OnMontageFinished) == 0x000010, "Wrong size on SpecterAnimInstance_OnMontageFinished");
static_assert(offsetof(SpecterAnimInstance_OnMontageFinished, Montage) == 0x000000, "Member 'SpecterAnimInstance_OnMontageFinished::Montage' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_OnMontageFinished, bInterrupted) == 0x000008, "Member 'SpecterAnimInstance_OnMontageFinished::bInterrupted' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.OnMontageStart
// 0x0008 (0x0008 - 0x0000)
struct SpecterAnimInstance_OnMontageStart final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_OnMontageStart) == 0x000008, "Wrong alignment on SpecterAnimInstance_OnMontageStart");
static_assert(sizeof(SpecterAnimInstance_OnMontageStart) == 0x000008, "Wrong size on SpecterAnimInstance_OnMontageStart");
static_assert(offsetof(SpecterAnimInstance_OnMontageStart, Montage) == 0x000000, "Member 'SpecterAnimInstance_OnMontageStart::Montage' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.SetAimOffsetRotator
// 0x0018 (0x0018 - 0x0000)
struct SpecterAnimInstance_SetAimOffsetRotator final
{
public:
	struct FRotator                               _Rot;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_SetAimOffsetRotator) == 0x000008, "Wrong alignment on SpecterAnimInstance_SetAimOffsetRotator");
static_assert(sizeof(SpecterAnimInstance_SetAimOffsetRotator) == 0x000018, "Wrong size on SpecterAnimInstance_SetAimOffsetRotator");
static_assert(offsetof(SpecterAnimInstance_SetAimOffsetRotator, _Rot) == 0x000000, "Member 'SpecterAnimInstance_SetAimOffsetRotator::_Rot' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.SetDamagedMotionPlayRate
// 0x0004 (0x0004 - 0x0000)
struct SpecterAnimInstance_SetDamagedMotionPlayRate final
{
public:
	float                                         _rate;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_SetDamagedMotionPlayRate) == 0x000004, "Wrong alignment on SpecterAnimInstance_SetDamagedMotionPlayRate");
static_assert(sizeof(SpecterAnimInstance_SetDamagedMotionPlayRate) == 0x000004, "Wrong size on SpecterAnimInstance_SetDamagedMotionPlayRate");
static_assert(offsetof(SpecterAnimInstance_SetDamagedMotionPlayRate, _rate) == 0x000000, "Member 'SpecterAnimInstance_SetDamagedMotionPlayRate::_rate' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.SetFireBlendEnable
// 0x0001 (0x0001 - 0x0000)
struct SpecterAnimInstance_SetFireBlendEnable final
{
public:
	bool                                          _is_enabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_SetFireBlendEnable) == 0x000001, "Wrong alignment on SpecterAnimInstance_SetFireBlendEnable");
static_assert(sizeof(SpecterAnimInstance_SetFireBlendEnable) == 0x000001, "Wrong size on SpecterAnimInstance_SetFireBlendEnable");
static_assert(offsetof(SpecterAnimInstance_SetFireBlendEnable, _is_enabled) == 0x000000, "Member 'SpecterAnimInstance_SetFireBlendEnable::_is_enabled' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.SetFireBlendWeight
// 0x0010 (0x0010 - 0x0000)
struct SpecterAnimInstance_SetFireBlendWeight final
{
public:
	float                                         _zero;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _light;                                            // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _middle;                                           // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _heavy;                                            // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_SetFireBlendWeight) == 0x000004, "Wrong alignment on SpecterAnimInstance_SetFireBlendWeight");
static_assert(sizeof(SpecterAnimInstance_SetFireBlendWeight) == 0x000010, "Wrong size on SpecterAnimInstance_SetFireBlendWeight");
static_assert(offsetof(SpecterAnimInstance_SetFireBlendWeight, _zero) == 0x000000, "Member 'SpecterAnimInstance_SetFireBlendWeight::_zero' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_SetFireBlendWeight, _light) == 0x000004, "Member 'SpecterAnimInstance_SetFireBlendWeight::_light' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_SetFireBlendWeight, _middle) == 0x000008, "Member 'SpecterAnimInstance_SetFireBlendWeight::_middle' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_SetFireBlendWeight, _heavy) == 0x00000C, "Member 'SpecterAnimInstance_SetFireBlendWeight::_heavy' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.SetMotionSource
// 0x0020 (0x0020 - 0x0000)
struct SpecterAnimInstance_SetMotionSource final
{
public:
	EMotionSource                                 _source;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2414[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UObject*                                _changer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _ctx;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_SetMotionSource) == 0x000008, "Wrong alignment on SpecterAnimInstance_SetMotionSource");
static_assert(sizeof(SpecterAnimInstance_SetMotionSource) == 0x000020, "Wrong size on SpecterAnimInstance_SetMotionSource");
static_assert(offsetof(SpecterAnimInstance_SetMotionSource, _source) == 0x000000, "Member 'SpecterAnimInstance_SetMotionSource::_source' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_SetMotionSource, _changer) == 0x000008, "Member 'SpecterAnimInstance_SetMotionSource::_changer' has a wrong offset!");
static_assert(offsetof(SpecterAnimInstance_SetMotionSource, _ctx) == 0x000010, "Member 'SpecterAnimInstance_SetMotionSource::_ctx' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.SetSupportedAimOffsetInMontage
// 0x0001 (0x0001 - 0x0000)
struct SpecterAnimInstance_SetSupportedAimOffsetInMontage final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_SetSupportedAimOffsetInMontage) == 0x000001, "Wrong alignment on SpecterAnimInstance_SetSupportedAimOffsetInMontage");
static_assert(sizeof(SpecterAnimInstance_SetSupportedAimOffsetInMontage) == 0x000001, "Wrong size on SpecterAnimInstance_SetSupportedAimOffsetInMontage");
static_assert(offsetof(SpecterAnimInstance_SetSupportedAimOffsetInMontage, _enable) == 0x000000, "Member 'SpecterAnimInstance_SetSupportedAimOffsetInMontage::_enable' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.GetMotionSource
// 0x0001 (0x0001 - 0x0000)
struct SpecterAnimInstance_GetMotionSource final
{
public:
	EMotionSource                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_GetMotionSource) == 0x000001, "Wrong alignment on SpecterAnimInstance_GetMotionSource");
static_assert(sizeof(SpecterAnimInstance_GetMotionSource) == 0x000001, "Wrong size on SpecterAnimInstance_GetMotionSource");
static_assert(offsetof(SpecterAnimInstance_GetMotionSource, ReturnValue) == 0x000000, "Member 'SpecterAnimInstance_GetMotionSource::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.GetPickupBlendRate
// 0x0004 (0x0004 - 0x0000)
struct SpecterAnimInstance_GetPickupBlendRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_GetPickupBlendRate) == 0x000004, "Wrong alignment on SpecterAnimInstance_GetPickupBlendRate");
static_assert(sizeof(SpecterAnimInstance_GetPickupBlendRate) == 0x000004, "Wrong size on SpecterAnimInstance_GetPickupBlendRate");
static_assert(offsetof(SpecterAnimInstance_GetPickupBlendRate, ReturnValue) == 0x000000, "Member 'SpecterAnimInstance_GetPickupBlendRate::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.GetZoomInBlendRate
// 0x0004 (0x0004 - 0x0000)
struct SpecterAnimInstance_GetZoomInBlendRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_GetZoomInBlendRate) == 0x000004, "Wrong alignment on SpecterAnimInstance_GetZoomInBlendRate");
static_assert(sizeof(SpecterAnimInstance_GetZoomInBlendRate) == 0x000004, "Wrong size on SpecterAnimInstance_GetZoomInBlendRate");
static_assert(offsetof(SpecterAnimInstance_GetZoomInBlendRate, ReturnValue) == 0x000000, "Member 'SpecterAnimInstance_GetZoomInBlendRate::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterAnimInstance.IsPlayingDamagedMotion
// 0x0001 (0x0001 - 0x0000)
struct SpecterAnimInstance_IsPlayingDamagedMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterAnimInstance_IsPlayingDamagedMotion) == 0x000001, "Wrong alignment on SpecterAnimInstance_IsPlayingDamagedMotion");
static_assert(sizeof(SpecterAnimInstance_IsPlayingDamagedMotion) == 0x000001, "Wrong size on SpecterAnimInstance_IsPlayingDamagedMotion");
static_assert(offsetof(SpecterAnimInstance_IsPlayingDamagedMotion, ReturnValue) == 0x000000, "Member 'SpecterAnimInstance_IsPlayingDamagedMotion::ReturnValue' has a wrong offset!");

// Function Stigma.SpecterSessionCallbackProxy.CreateSpecterSession
// 0x0020 (0x0020 - 0x0000)
struct SpecterSessionCallbackProxy_CreateSpecterSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublicConnections;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLAN;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _UseLobbiesIfAvailable;                            // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2416[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class USpecterSessionCallbackProxy*           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecterSessionCallbackProxy_CreateSpecterSession) == 0x000008, "Wrong alignment on SpecterSessionCallbackProxy_CreateSpecterSession");
static_assert(sizeof(SpecterSessionCallbackProxy_CreateSpecterSession) == 0x000020, "Wrong size on SpecterSessionCallbackProxy_CreateSpecterSession");
static_assert(offsetof(SpecterSessionCallbackProxy_CreateSpecterSession, WorldContextObject) == 0x000000, "Member 'SpecterSessionCallbackProxy_CreateSpecterSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SpecterSessionCallbackProxy_CreateSpecterSession, PlayerController) == 0x000008, "Member 'SpecterSessionCallbackProxy_CreateSpecterSession::PlayerController' has a wrong offset!");
static_assert(offsetof(SpecterSessionCallbackProxy_CreateSpecterSession, PublicConnections) == 0x000010, "Member 'SpecterSessionCallbackProxy_CreateSpecterSession::PublicConnections' has a wrong offset!");
static_assert(offsetof(SpecterSessionCallbackProxy_CreateSpecterSession, bUseLAN) == 0x000014, "Member 'SpecterSessionCallbackProxy_CreateSpecterSession::bUseLAN' has a wrong offset!");
static_assert(offsetof(SpecterSessionCallbackProxy_CreateSpecterSession, _UseLobbiesIfAvailable) == 0x000015, "Member 'SpecterSessionCallbackProxy_CreateSpecterSession::_UseLobbiesIfAvailable' has a wrong offset!");
static_assert(offsetof(SpecterSessionCallbackProxy_CreateSpecterSession, ReturnValue) == 0x000018, "Member 'SpecterSessionCallbackProxy_CreateSpecterSession::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.ActivateCrouchFighting
// 0x0001 (0x0001 - 0x0000)
struct StigmaAIController_ActivateCrouchFighting final
{
public:
	bool                                          _is_activation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_ActivateCrouchFighting) == 0x000001, "Wrong alignment on StigmaAIController_ActivateCrouchFighting");
static_assert(sizeof(StigmaAIController_ActivateCrouchFighting) == 0x000001, "Wrong size on StigmaAIController_ActivateCrouchFighting");
static_assert(offsetof(StigmaAIController_ActivateCrouchFighting, _is_activation) == 0x000000, "Member 'StigmaAIController_ActivateCrouchFighting::_is_activation' has a wrong offset!");

// Function Stigma.StigmaAIController.DrivePerception
// 0x0004 (0x0004 - 0x0000)
struct StigmaAIController_DrivePerception final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_DrivePerception) == 0x000004, "Wrong alignment on StigmaAIController_DrivePerception");
static_assert(sizeof(StigmaAIController_DrivePerception) == 0x000004, "Wrong size on StigmaAIController_DrivePerception");
static_assert(offsetof(StigmaAIController_DrivePerception, _delta) == 0x000000, "Member 'StigmaAIController_DrivePerception::_delta' has a wrong offset!");

// Function Stigma.StigmaAIController.ExecuteFireCommand
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_ExecuteFireCommand final
{
public:
	float                                         _out_maintain_command_time;                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaAIController_ExecuteFireCommand) == 0x000004, "Wrong alignment on StigmaAIController_ExecuteFireCommand");
static_assert(sizeof(StigmaAIController_ExecuteFireCommand) == 0x000008, "Wrong size on StigmaAIController_ExecuteFireCommand");
static_assert(offsetof(StigmaAIController_ExecuteFireCommand, _out_maintain_command_time) == 0x000000, "Member 'StigmaAIController_ExecuteFireCommand::_out_maintain_command_time' has a wrong offset!");
static_assert(offsetof(StigmaAIController_ExecuteFireCommand, ReturnValue) == 0x000004, "Member 'StigmaAIController_ExecuteFireCommand::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.RandomActivateAdditionalStep
// 0x0001 (0x0001 - 0x0000)
struct StigmaAIController_RandomActivateAdditionalStep final
{
public:
	bool                                          _inculde_action;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_RandomActivateAdditionalStep) == 0x000001, "Wrong alignment on StigmaAIController_RandomActivateAdditionalStep");
static_assert(sizeof(StigmaAIController_RandomActivateAdditionalStep) == 0x000001, "Wrong size on StigmaAIController_RandomActivateAdditionalStep");
static_assert(offsetof(StigmaAIController_RandomActivateAdditionalStep, _inculde_action) == 0x000000, "Member 'StigmaAIController_RandomActivateAdditionalStep::_inculde_action' has a wrong offset!");

// Function Stigma.StigmaAIController.RequestChangeBehaviorType
// 0x0002 (0x0002 - 0x0000)
struct StigmaAIController_RequestChangeBehaviorType final
{
public:
	EMainBehaviorType                             _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_RequestChangeBehaviorType) == 0x000001, "Wrong alignment on StigmaAIController_RequestChangeBehaviorType");
static_assert(sizeof(StigmaAIController_RequestChangeBehaviorType) == 0x000002, "Wrong size on StigmaAIController_RequestChangeBehaviorType");
static_assert(offsetof(StigmaAIController_RequestChangeBehaviorType, _type) == 0x000000, "Member 'StigmaAIController_RequestChangeBehaviorType::_type' has a wrong offset!");
static_assert(offsetof(StigmaAIController_RequestChangeBehaviorType, ReturnValue) == 0x000001, "Member 'StigmaAIController_RequestChangeBehaviorType::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.SetCharacteristics
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_SetCharacteristics final
{
public:
	float                                         _aggressive;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _skilled;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_SetCharacteristics) == 0x000004, "Wrong alignment on StigmaAIController_SetCharacteristics");
static_assert(sizeof(StigmaAIController_SetCharacteristics) == 0x000008, "Wrong size on StigmaAIController_SetCharacteristics");
static_assert(offsetof(StigmaAIController_SetCharacteristics, _aggressive) == 0x000000, "Member 'StigmaAIController_SetCharacteristics::_aggressive' has a wrong offset!");
static_assert(offsetof(StigmaAIController_SetCharacteristics, _skilled) == 0x000004, "Member 'StigmaAIController_SetCharacteristics::_skilled' has a wrong offset!");

// Function Stigma.StigmaAIController.SetOriginLocation
// 0x0018 (0x0018 - 0x0000)
struct StigmaAIController_SetOriginLocation final
{
public:
	struct FVector                                _location;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_SetOriginLocation) == 0x000008, "Wrong alignment on StigmaAIController_SetOriginLocation");
static_assert(sizeof(StigmaAIController_SetOriginLocation) == 0x000018, "Wrong size on StigmaAIController_SetOriginLocation");
static_assert(offsetof(StigmaAIController_SetOriginLocation, _location) == 0x000000, "Member 'StigmaAIController_SetOriginLocation::_location' has a wrong offset!");

// Function Stigma.StigmaAIController.SetRunType
// 0x0001 (0x0001 - 0x0000)
struct StigmaAIController_SetRunType final
{
public:
	bool                                          _is_run_type;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_SetRunType) == 0x000001, "Wrong alignment on StigmaAIController_SetRunType");
static_assert(sizeof(StigmaAIController_SetRunType) == 0x000001, "Wrong size on StigmaAIController_SetRunType");
static_assert(offsetof(StigmaAIController_SetRunType, _is_run_type) == 0x000000, "Member 'StigmaAIController_SetRunType::_is_run_type' has a wrong offset!");

// Function Stigma.StigmaAIController.SetTargetEnemy
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_SetTargetEnemy final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_SetTargetEnemy) == 0x000008, "Wrong alignment on StigmaAIController_SetTargetEnemy");
static_assert(sizeof(StigmaAIController_SetTargetEnemy) == 0x000008, "Wrong size on StigmaAIController_SetTargetEnemy");
static_assert(offsetof(StigmaAIController_SetTargetEnemy, _Actor) == 0x000000, "Member 'StigmaAIController_SetTargetEnemy::_Actor' has a wrong offset!");

// Function Stigma.StigmaAIController.SetTargetEnemyImmediately
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_SetTargetEnemyImmediately final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_SetTargetEnemyImmediately) == 0x000008, "Wrong alignment on StigmaAIController_SetTargetEnemyImmediately");
static_assert(sizeof(StigmaAIController_SetTargetEnemyImmediately) == 0x000008, "Wrong size on StigmaAIController_SetTargetEnemyImmediately");
static_assert(offsetof(StigmaAIController_SetTargetEnemyImmediately, _Actor) == 0x000000, "Member 'StigmaAIController_SetTargetEnemyImmediately::_Actor' has a wrong offset!");

// Function Stigma.StigmaAIController.SetupConfig
// 0x0190 (0x0190 - 0x0000)
struct StigmaAIController_SetupConfig final
{
public:
	struct FConfig_AI                             _config_ai;                                        // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_SetupConfig) == 0x000008, "Wrong alignment on StigmaAIController_SetupConfig");
static_assert(sizeof(StigmaAIController_SetupConfig) == 0x000190, "Wrong size on StigmaAIController_SetupConfig");
static_assert(offsetof(StigmaAIController_SetupConfig, _config_ai) == 0x000000, "Member 'StigmaAIController_SetupConfig::_config_ai' has a wrong offset!");

// Function Stigma.StigmaAIController.StepUpPerception
// 0x0001 (0x0001 - 0x0000)
struct StigmaAIController_StepUpPerception final
{
public:
	EPerceptionPhase                              _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_StepUpPerception) == 0x000001, "Wrong alignment on StigmaAIController_StepUpPerception");
static_assert(sizeof(StigmaAIController_StepUpPerception) == 0x000001, "Wrong size on StigmaAIController_StepUpPerception");
static_assert(offsetof(StigmaAIController_StepUpPerception, _phase) == 0x000000, "Member 'StigmaAIController_StepUpPerception::_phase' has a wrong offset!");

// Function Stigma.StigmaAIController.UpdateTargetEnemy
// 0x0010 (0x0010 - 0x0000)
struct StigmaAIController_UpdateTargetEnemy final
{
public:
	class AActor*                                 _perceived_actor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaAIController_UpdateTargetEnemy) == 0x000008, "Wrong alignment on StigmaAIController_UpdateTargetEnemy");
static_assert(sizeof(StigmaAIController_UpdateTargetEnemy) == 0x000010, "Wrong size on StigmaAIController_UpdateTargetEnemy");
static_assert(offsetof(StigmaAIController_UpdateTargetEnemy, _perceived_actor) == 0x000000, "Member 'StigmaAIController_UpdateTargetEnemy::_perceived_actor' has a wrong offset!");
static_assert(offsetof(StigmaAIController_UpdateTargetEnemy, ReturnValue) == 0x000008, "Member 'StigmaAIController_UpdateTargetEnemy::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.UpdateThreats
// 0x0060 (0x0060 - 0x0000)
struct StigmaAIController_UpdateThreats final
{
public:
	class AActor*                                 _perceived_actor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            _stimul;                                           // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_UpdateThreats) == 0x000008, "Wrong alignment on StigmaAIController_UpdateThreats");
static_assert(sizeof(StigmaAIController_UpdateThreats) == 0x000060, "Wrong size on StigmaAIController_UpdateThreats");
static_assert(offsetof(StigmaAIController_UpdateThreats, _perceived_actor) == 0x000000, "Member 'StigmaAIController_UpdateThreats::_perceived_actor' has a wrong offset!");
static_assert(offsetof(StigmaAIController_UpdateThreats, _stimul) == 0x000008, "Member 'StigmaAIController_UpdateThreats::_stimul' has a wrong offset!");

// Function Stigma.StigmaAIController.GetAvailableAction
// 0x0028 (0x0028 - 0x0000)
struct StigmaAIController_GetAvailableAction final
{
public:
	struct FSkillInfo_AI                          ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetAvailableAction) == 0x000008, "Wrong alignment on StigmaAIController_GetAvailableAction");
static_assert(sizeof(StigmaAIController_GetAvailableAction) == 0x000028, "Wrong size on StigmaAIController_GetAvailableAction");
static_assert(offsetof(StigmaAIController_GetAvailableAction, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetAvailableAction::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetConfig_AI
// 0x0190 (0x0190 - 0x0000)
struct StigmaAIController_GetConfig_AI final
{
public:
	struct FConfig_AI                             ReturnValue;                                       // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetConfig_AI) == 0x000008, "Wrong alignment on StigmaAIController_GetConfig_AI");
static_assert(sizeof(StigmaAIController_GetConfig_AI) == 0x000190, "Wrong size on StigmaAIController_GetConfig_AI");
static_assert(offsetof(StigmaAIController_GetConfig_AI, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetConfig_AI::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetCurrentAccumlatedPerception
// 0x0004 (0x0004 - 0x0000)
struct StigmaAIController_GetCurrentAccumlatedPerception final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetCurrentAccumlatedPerception) == 0x000004, "Wrong alignment on StigmaAIController_GetCurrentAccumlatedPerception");
static_assert(sizeof(StigmaAIController_GetCurrentAccumlatedPerception) == 0x000004, "Wrong size on StigmaAIController_GetCurrentAccumlatedPerception");
static_assert(offsetof(StigmaAIController_GetCurrentAccumlatedPerception, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetCurrentAccumlatedPerception::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetCurrentPerceptionPhase
// 0x0001 (0x0001 - 0x0000)
struct StigmaAIController_GetCurrentPerceptionPhase final
{
public:
	EPerceptionPhase                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetCurrentPerceptionPhase) == 0x000001, "Wrong alignment on StigmaAIController_GetCurrentPerceptionPhase");
static_assert(sizeof(StigmaAIController_GetCurrentPerceptionPhase) == 0x000001, "Wrong size on StigmaAIController_GetCurrentPerceptionPhase");
static_assert(offsetof(StigmaAIController_GetCurrentPerceptionPhase, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetCurrentPerceptionPhase::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetLastTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct StigmaAIController_GetLastTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetLastTargetLocation) == 0x000008, "Wrong alignment on StigmaAIController_GetLastTargetLocation");
static_assert(sizeof(StigmaAIController_GetLastTargetLocation) == 0x000018, "Wrong size on StigmaAIController_GetLastTargetLocation");
static_assert(offsetof(StigmaAIController_GetLastTargetLocation, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetLastTargetLocation::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetPerceptionLevelWeight
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_GetPerceptionLevelWeight final
{
public:
	EPerceptionPhase                              _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetPerceptionLevelWeight) == 0x000004, "Wrong alignment on StigmaAIController_GetPerceptionLevelWeight");
static_assert(sizeof(StigmaAIController_GetPerceptionLevelWeight) == 0x000008, "Wrong size on StigmaAIController_GetPerceptionLevelWeight");
static_assert(offsetof(StigmaAIController_GetPerceptionLevelWeight, _phase) == 0x000000, "Member 'StigmaAIController_GetPerceptionLevelWeight::_phase' has a wrong offset!");
static_assert(offsetof(StigmaAIController_GetPerceptionLevelWeight, ReturnValue) == 0x000004, "Member 'StigmaAIController_GetPerceptionLevelWeight::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetPerceptionRequirements
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_GetPerceptionRequirements final
{
public:
	EPerceptionPhase                              _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetPerceptionRequirements) == 0x000004, "Wrong alignment on StigmaAIController_GetPerceptionRequirements");
static_assert(sizeof(StigmaAIController_GetPerceptionRequirements) == 0x000008, "Wrong size on StigmaAIController_GetPerceptionRequirements");
static_assert(offsetof(StigmaAIController_GetPerceptionRequirements, _phase) == 0x000000, "Member 'StigmaAIController_GetPerceptionRequirements::_phase' has a wrong offset!");
static_assert(offsetof(StigmaAIController_GetPerceptionRequirements, ReturnValue) == 0x000004, "Member 'StigmaAIController_GetPerceptionRequirements::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetTargetEnemy
// 0x0008 (0x0008 - 0x0000)
struct StigmaAIController_GetTargetEnemy final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetTargetEnemy) == 0x000008, "Wrong alignment on StigmaAIController_GetTargetEnemy");
static_assert(sizeof(StigmaAIController_GetTargetEnemy) == 0x000008, "Wrong size on StigmaAIController_GetTargetEnemy");
static_assert(offsetof(StigmaAIController_GetTargetEnemy, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetTargetEnemy::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.GetTotalAccumulatedPerception
// 0x0004 (0x0004 - 0x0000)
struct StigmaAIController_GetTotalAccumulatedPerception final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_GetTotalAccumulatedPerception) == 0x000004, "Wrong alignment on StigmaAIController_GetTotalAccumulatedPerception");
static_assert(sizeof(StigmaAIController_GetTotalAccumulatedPerception) == 0x000004, "Wrong size on StigmaAIController_GetTotalAccumulatedPerception");
static_assert(offsetof(StigmaAIController_GetTotalAccumulatedPerception, ReturnValue) == 0x000000, "Member 'StigmaAIController_GetTotalAccumulatedPerception::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaAIController.IsImmediatelyTargetMove
// 0x0001 (0x0001 - 0x0000)
struct StigmaAIController_IsImmediatelyTargetMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaAIController_IsImmediatelyTargetMove) == 0x000001, "Wrong alignment on StigmaAIController_IsImmediatelyTargetMove");
static_assert(sizeof(StigmaAIController_IsImmediatelyTargetMove) == 0x000001, "Wrong size on StigmaAIController_IsImmediatelyTargetMove");
static_assert(offsetof(StigmaAIController_IsImmediatelyTargetMove, ReturnValue) == 0x000000, "Member 'StigmaAIController_IsImmediatelyTargetMove::ReturnValue' has a wrong offset!");

// Function Stigma.StigmaButtonBase.SetButtonText
// 0x0018 (0x0018 - 0x0000)
struct StigmaButtonBase_SetButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaButtonBase_SetButtonText) == 0x000008, "Wrong alignment on StigmaButtonBase_SetButtonText");
static_assert(sizeof(StigmaButtonBase_SetButtonText) == 0x000018, "Wrong size on StigmaButtonBase_SetButtonText");
static_assert(offsetof(StigmaButtonBase_SetButtonText, InText) == 0x000000, "Member 'StigmaButtonBase_SetButtonText::InText' has a wrong offset!");

// Function Stigma.StigmaButtonBase.UpdateButtonText
// 0x0018 (0x0018 - 0x0000)
struct StigmaButtonBase_UpdateButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaButtonBase_UpdateButtonText) == 0x000008, "Wrong alignment on StigmaButtonBase_UpdateButtonText");
static_assert(sizeof(StigmaButtonBase_UpdateButtonText) == 0x000018, "Wrong size on StigmaButtonBase_UpdateButtonText");
static_assert(offsetof(StigmaButtonBase_UpdateButtonText, InText) == 0x000000, "Member 'StigmaButtonBase_UpdateButtonText::InText' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ActivateInfiniteBullet
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ActivateInfiniteBullet final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_activated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2422[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ActivateInfiniteBullet) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ActivateInfiniteBullet");
static_assert(sizeof(StigmaCheatManager_Spt_ActivateInfiniteBullet) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ActivateInfiniteBullet");
static_assert(offsetof(StigmaCheatManager_Spt_ActivateInfiniteBullet, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ActivateInfiniteBullet::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ActivateInfiniteBullet, _is_activated) == 0x000008, "Member 'StigmaCheatManager_Spt_ActivateInfiniteBullet::_is_activated' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Annihilation
// 0x0028 (0x0028 - 0x0000)
struct StigmaCheatManager_Spt_Annihilation final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Annihilation) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Annihilation");
static_assert(sizeof(StigmaCheatManager_Spt_Annihilation) == 0x000028, "Wrong size on StigmaCheatManager_Spt_Annihilation");
static_assert(offsetof(StigmaCheatManager_Spt_Annihilation, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_Annihilation::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Annihilation, _Key) == 0x000008, "Member 'StigmaCheatManager_Spt_Annihilation::_Key' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Annihilation, _param) == 0x000018, "Member 'StigmaCheatManager_Spt_Annihilation::_param' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_BattlePass_Clear
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_BattlePass_Clear final
{
public:
	int32                                         _pass_id;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_BattlePass_Clear) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_BattlePass_Clear");
static_assert(sizeof(StigmaCheatManager_Spt_BattlePass_Clear) == 0x000004, "Wrong size on StigmaCheatManager_Spt_BattlePass_Clear");
static_assert(offsetof(StigmaCheatManager_Spt_BattlePass_Clear, _pass_id) == 0x000000, "Member 'StigmaCheatManager_Spt_BattlePass_Clear::_pass_id' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Booster
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_Booster final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _booster_slot_zidx;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _item_id;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Booster) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Booster");
static_assert(sizeof(StigmaCheatManager_Spt_Booster) == 0x000010, "Wrong size on StigmaCheatManager_Spt_Booster");
static_assert(offsetof(StigmaCheatManager_Spt_Booster, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_Booster::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Booster, _booster_slot_zidx) == 0x000008, "Member 'StigmaCheatManager_Spt_Booster::_booster_slot_zidx' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Booster, _item_id) == 0x00000C, "Member 'StigmaCheatManager_Spt_Booster::_item_id' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Challenge
// 0x0028 (0x0028 - 0x0000)
struct StigmaCheatManager_Spt_Challenge final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _param;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Challenge) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Challenge");
static_assert(sizeof(StigmaCheatManager_Spt_Challenge) == 0x000028, "Wrong size on StigmaCheatManager_Spt_Challenge");
static_assert(offsetof(StigmaCheatManager_Spt_Challenge, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_Challenge::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Challenge, _Key) == 0x000008, "Member 'StigmaCheatManager_Spt_Challenge::_Key' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Challenge, _param) == 0x000018, "Member 'StigmaCheatManager_Spt_Challenge::_param' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ChangeArmor
// 0x0018 (0x0018 - 0x0000)
struct StigmaCheatManager_Spt_ChangeArmor final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_ChangeArmor) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ChangeArmor");
static_assert(sizeof(StigmaCheatManager_Spt_ChangeArmor) == 0x000018, "Wrong size on StigmaCheatManager_Spt_ChangeArmor");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeArmor, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ChangeArmor::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeArmor, _Key) == 0x000008, "Member 'StigmaCheatManager_Spt_ChangeArmor::_Key' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ChangeBullet
// 0x0018 (0x0018 - 0x0000)
struct StigmaCheatManager_Spt_ChangeBullet final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_ChangeBullet) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ChangeBullet");
static_assert(sizeof(StigmaCheatManager_Spt_ChangeBullet) == 0x000018, "Wrong size on StigmaCheatManager_Spt_ChangeBullet");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeBullet, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ChangeBullet::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeBullet, _Key) == 0x000008, "Member 'StigmaCheatManager_Spt_ChangeBullet::_Key' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ChangeChara
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ChangeChara final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2423[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ChangeChara) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ChangeChara");
static_assert(sizeof(StigmaCheatManager_Spt_ChangeChara) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ChangeChara");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeChara, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ChangeChara::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeChara, _chara_type) == 0x000008, "Member 'StigmaCheatManager_Spt_ChangeChara::_chara_type' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ChangeParts
// 0x0018 (0x0018 - 0x0000)
struct StigmaCheatManager_Spt_ChangeParts final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_ChangeParts) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ChangeParts");
static_assert(sizeof(StigmaCheatManager_Spt_ChangeParts) == 0x000018, "Wrong size on StigmaCheatManager_Spt_ChangeParts");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeParts, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ChangeParts::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ChangeParts, _Key) == 0x000008, "Member 'StigmaCheatManager_Spt_ChangeParts::_Key' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Currency_Add
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_Currency_Add final
{
public:
	ECurrencyTypes                                _currency_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2424[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _Amount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Currency_Add) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Currency_Add");
static_assert(sizeof(StigmaCheatManager_Spt_Currency_Add) == 0x000008, "Wrong size on StigmaCheatManager_Spt_Currency_Add");
static_assert(offsetof(StigmaCheatManager_Spt_Currency_Add, _currency_type) == 0x000000, "Member 'StigmaCheatManager_Spt_Currency_Add::_currency_type' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Currency_Add, _Amount) == 0x000004, "Member 'StigmaCheatManager_Spt_Currency_Add::_Amount' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Currency_Clear
// 0x0001 (0x0001 - 0x0000)
struct StigmaCheatManager_Spt_Currency_Clear final
{
public:
	ECurrencyTypes                                _currency_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Currency_Clear) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_Currency_Clear");
static_assert(sizeof(StigmaCheatManager_Spt_Currency_Clear) == 0x000001, "Wrong size on StigmaCheatManager_Spt_Currency_Clear");
static_assert(offsetof(StigmaCheatManager_Spt_Currency_Clear, _currency_type) == 0x000000, "Member 'StigmaCheatManager_Spt_Currency_Clear::_currency_type' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_DumpChara
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_DumpChara final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_DumpChara) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_DumpChara");
static_assert(sizeof(StigmaCheatManager_Spt_DumpChara) == 0x000008, "Wrong size on StigmaCheatManager_Spt_DumpChara");
static_assert(offsetof(StigmaCheatManager_Spt_DumpChara, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_DumpChara::_target_chara' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ELO
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_ELO final
{
public:
	int32                                         _elo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_ELO) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_ELO");
static_assert(sizeof(StigmaCheatManager_Spt_ELO) == 0x000004, "Wrong size on StigmaCheatManager_Spt_ELO");
static_assert(offsetof(StigmaCheatManager_Spt_ELO, _elo) == 0x000000, "Member 'StigmaCheatManager_Spt_ELO::_elo' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_EnableFootIK
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_EnableFootIK final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_enabled;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2425[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_EnableFootIK) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_EnableFootIK");
static_assert(sizeof(StigmaCheatManager_Spt_EnableFootIK) == 0x000010, "Wrong size on StigmaCheatManager_Spt_EnableFootIK");
static_assert(offsetof(StigmaCheatManager_Spt_EnableFootIK, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_EnableFootIK::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_EnableFootIK, _is_enabled) == 0x000008, "Member 'StigmaCheatManager_Spt_EnableFootIK::_is_enabled' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_EventPage_AddCount
// 0x000C (0x000C - 0x0000)
struct StigmaCheatManager_Spt_EventPage_AddCount final
{
public:
	int32                                         _event_page_id;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_option;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2426[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_EventPage_AddCount) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_EventPage_AddCount");
static_assert(sizeof(StigmaCheatManager_Spt_EventPage_AddCount) == 0x00000C, "Wrong size on StigmaCheatManager_Spt_EventPage_AddCount");
static_assert(offsetof(StigmaCheatManager_Spt_EventPage_AddCount, _event_page_id) == 0x000000, "Member 'StigmaCheatManager_Spt_EventPage_AddCount::_event_page_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_EventPage_AddCount, _count) == 0x000004, "Member 'StigmaCheatManager_Spt_EventPage_AddCount::_count' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_EventPage_AddCount, _is_option) == 0x000008, "Member 'StigmaCheatManager_Spt_EventPage_AddCount::_is_option' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_EventPage_Clear
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_EventPage_Clear final
{
public:
	int32                                         _event_page_id;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_EventPage_Clear) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_EventPage_Clear");
static_assert(sizeof(StigmaCheatManager_Spt_EventPage_Clear) == 0x000004, "Wrong size on StigmaCheatManager_Spt_EventPage_Clear");
static_assert(offsetof(StigmaCheatManager_Spt_EventPage_Clear, _event_page_id) == 0x000000, "Member 'StigmaCheatManager_Spt_EventPage_Clear::_event_page_id' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Expire_ActiveFunction
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_Expire_ActiveFunction final
{
public:
	int32                                         _sec;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Expire_ActiveFunction) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Expire_ActiveFunction");
static_assert(sizeof(StigmaCheatManager_Spt_Expire_ActiveFunction) == 0x000004, "Wrong size on StigmaCheatManager_Spt_Expire_ActiveFunction");
static_assert(offsetof(StigmaCheatManager_Spt_Expire_ActiveFunction, _sec) == 0x000000, "Member 'StigmaCheatManager_Spt_Expire_ActiveFunction::_sec' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Function_Add
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_Function_Add final
{
public:
	int32                                         _item_id;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Function_Add) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Function_Add");
static_assert(sizeof(StigmaCheatManager_Spt_Function_Add) == 0x000004, "Wrong size on StigmaCheatManager_Spt_Function_Add");
static_assert(offsetof(StigmaCheatManager_Spt_Function_Add, _item_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Function_Add::_item_id' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_GameTime
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_GameTime final
{
public:
	int32                                         _time_sec;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_GameTime) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_GameTime");
static_assert(sizeof(StigmaCheatManager_Spt_GameTime) == 0x000004, "Wrong size on StigmaCheatManager_Spt_GameTime");
static_assert(offsetof(StigmaCheatManager_Spt_GameTime, _time_sec) == 0x000000, "Member 'StigmaCheatManager_Spt_GameTime::_time_sec' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_InfStock
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_InfStock final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_activated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2427[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_InfStock) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_InfStock");
static_assert(sizeof(StigmaCheatManager_Spt_InfStock) == 0x000010, "Wrong size on StigmaCheatManager_Spt_InfStock");
static_assert(offsetof(StigmaCheatManager_Spt_InfStock, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_InfStock::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_InfStock, _is_activated) == 0x000008, "Member 'StigmaCheatManager_Spt_InfStock::_is_activated' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Item_Add
// 0x0020 (0x0020 - 0x0000)
struct StigmaCheatManager_Spt_Item_Add final
{
public:
	int32                                         _item_id;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2428[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _count_or_time;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Amount;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2429[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_Item_Add) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Item_Add");
static_assert(sizeof(StigmaCheatManager_Spt_Item_Add) == 0x000020, "Wrong size on StigmaCheatManager_Spt_Item_Add");
static_assert(offsetof(StigmaCheatManager_Spt_Item_Add, _item_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Item_Add::_item_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Item_Add, _count_or_time) == 0x000008, "Member 'StigmaCheatManager_Spt_Item_Add::_count_or_time' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Item_Add, _Amount) == 0x000018, "Member 'StigmaCheatManager_Spt_Item_Add::_Amount' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Item_Clear
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_Item_Clear final
{
public:
	int32                                         _item_id;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Item_Clear) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Item_Clear");
static_assert(sizeof(StigmaCheatManager_Spt_Item_Clear) == 0x000004, "Wrong size on StigmaCheatManager_Spt_Item_Clear");
static_assert(offsetof(StigmaCheatManager_Spt_Item_Clear, _item_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Item_Clear::_item_id' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_LevelHack
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_LevelHack final
{
public:
	float                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_LevelHack) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_LevelHack");
static_assert(sizeof(StigmaCheatManager_Spt_LevelHack) == 0x000004, "Wrong size on StigmaCheatManager_Spt_LevelHack");
static_assert(offsetof(StigmaCheatManager_Spt_LevelHack, _level) == 0x000000, "Member 'StigmaCheatManager_Spt_LevelHack::_level' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_LoadVoiceOnInit
// 0x0001 (0x0001 - 0x0000)
struct StigmaCheatManager_Spt_LoadVoiceOnInit final
{
public:
	bool                                          _val;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_LoadVoiceOnInit) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_LoadVoiceOnInit");
static_assert(sizeof(StigmaCheatManager_Spt_LoadVoiceOnInit) == 0x000001, "Wrong size on StigmaCheatManager_Spt_LoadVoiceOnInit");
static_assert(offsetof(StigmaCheatManager_Spt_LoadVoiceOnInit, _val) == 0x000000, "Member 'StigmaCheatManager_Spt_LoadVoiceOnInit::_val' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MannerPoint_Add
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_MannerPoint_Add final
{
public:
	float                                         _point_delta;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MannerPoint_Add) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_MannerPoint_Add");
static_assert(sizeof(StigmaCheatManager_Spt_MannerPoint_Add) == 0x000004, "Wrong size on StigmaCheatManager_Spt_MannerPoint_Add");
static_assert(offsetof(StigmaCheatManager_Spt_MannerPoint_Add, _point_delta) == 0x000000, "Member 'StigmaCheatManager_Spt_MannerPoint_Add::_point_delta' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_AddCount
// 0x000C (0x000C - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_AddCount final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _slot;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_AddCount) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_AddCount");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_AddCount) == 0x00000C, "Wrong size on StigmaCheatManager_Spt_MasterMission_AddCount");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_AddCount, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_AddCount::_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_AddCount, _slot) == 0x000004, "Member 'StigmaCheatManager_Spt_MasterMission_AddCount::_slot' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_AddCount, _count) == 0x000008, "Member 'StigmaCheatManager_Spt_MasterMission_AddCount::_count' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_Clear
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_Clear final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _slot;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_Clear) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_Clear");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_Clear) == 0x000008, "Wrong size on StigmaCheatManager_Spt_MasterMission_Clear");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_Clear, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_Clear::_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_Clear, _slot) == 0x000004, "Member 'StigmaCheatManager_Spt_MasterMission_Clear::_slot' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_ClearChangeCount
// 0x0001 (0x0001 - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_ClearChangeCount final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_ClearChangeCount) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_ClearChangeCount");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_ClearChangeCount) == 0x000001, "Wrong size on StigmaCheatManager_Spt_MasterMission_ClearChangeCount");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_ClearChangeCount, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_ClearChangeCount::_chara_type' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_ExpAdd
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_ExpAdd final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _Exp;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_ExpAdd) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_ExpAdd");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_ExpAdd) == 0x000008, "Wrong size on StigmaCheatManager_Spt_MasterMission_ExpAdd");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_ExpAdd, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_ExpAdd::_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_ExpAdd, _Exp) == 0x000004, "Member 'StigmaCheatManager_Spt_MasterMission_ExpAdd::_Exp' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_LevelAdd
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_LevelAdd final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _level;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_LevelAdd) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_LevelAdd");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_LevelAdd) == 0x000008, "Wrong size on StigmaCheatManager_Spt_MasterMission_LevelAdd");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_LevelAdd, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_LevelAdd::_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_LevelAdd, _level) == 0x000004, "Member 'StigmaCheatManager_Spt_MasterMission_LevelAdd::_level' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_Success
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_Success final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _slot;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_Success) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_Success");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_Success) == 0x000008, "Wrong size on StigmaCheatManager_Spt_MasterMission_Success");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_Success, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_Success::_chara_type' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_Success, _slot) == 0x000004, "Member 'StigmaCheatManager_Spt_MasterMission_Success::_slot' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_MasterMission_SuccessFirstMission
// 0x0001 (0x0001 - 0x0000)
struct StigmaCheatManager_Spt_MasterMission_SuccessFirstMission final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_MasterMission_SuccessFirstMission) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_MasterMission_SuccessFirstMission");
static_assert(sizeof(StigmaCheatManager_Spt_MasterMission_SuccessFirstMission) == 0x000001, "Wrong size on StigmaCheatManager_Spt_MasterMission_SuccessFirstMission");
static_assert(offsetof(StigmaCheatManager_Spt_MasterMission_SuccessFirstMission, _chara_type) == 0x000000, "Member 'StigmaCheatManager_Spt_MasterMission_SuccessFirstMission::_chara_type' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Minimap
// 0x0001 (0x0001 - 0x0000)
struct StigmaCheatManager_Spt_Minimap final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Minimap) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_Minimap");
static_assert(sizeof(StigmaCheatManager_Spt_Minimap) == 0x000001, "Wrong size on StigmaCheatManager_Spt_Minimap");
static_assert(offsetof(StigmaCheatManager_Spt_Minimap, _enable) == 0x000000, "Member 'StigmaCheatManager_Spt_Minimap::_enable' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Mission_AddCount
// 0x0020 (0x0020 - 0x0000)
struct StigmaCheatManager_Spt_Mission_AddCount final
{
public:
	class FString                                 _task_id;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242F[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_Mission_AddCount) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Mission_AddCount");
static_assert(sizeof(StigmaCheatManager_Spt_Mission_AddCount) == 0x000020, "Wrong size on StigmaCheatManager_Spt_Mission_AddCount");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_AddCount, _task_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Mission_AddCount::_task_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_AddCount, _idx) == 0x000010, "Member 'StigmaCheatManager_Spt_Mission_AddCount::_idx' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_AddCount, _slot) == 0x000014, "Member 'StigmaCheatManager_Spt_Mission_AddCount::_slot' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_AddCount, _count) == 0x000018, "Member 'StigmaCheatManager_Spt_Mission_AddCount::_count' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Mission_Change
// 0x0018 (0x0018 - 0x0000)
struct StigmaCheatManager_Spt_Mission_Change final
{
public:
	class FString                                 _task_id;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Mission_Change) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Mission_Change");
static_assert(sizeof(StigmaCheatManager_Spt_Mission_Change) == 0x000018, "Wrong size on StigmaCheatManager_Spt_Mission_Change");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Change, _task_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Mission_Change::_task_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Change, _idx) == 0x000010, "Member 'StigmaCheatManager_Spt_Mission_Change::_idx' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Change, _slot) == 0x000014, "Member 'StigmaCheatManager_Spt_Mission_Change::_slot' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Mission_Clear
// 0x0018 (0x0018 - 0x0000)
struct StigmaCheatManager_Spt_Mission_Clear final
{
public:
	class FString                                 _task_id;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Mission_Clear) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Mission_Clear");
static_assert(sizeof(StigmaCheatManager_Spt_Mission_Clear) == 0x000018, "Wrong size on StigmaCheatManager_Spt_Mission_Clear");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Clear, _task_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Mission_Clear::_task_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Clear, _idx) == 0x000010, "Member 'StigmaCheatManager_Spt_Mission_Clear::_idx' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Clear, _slot) == 0x000014, "Member 'StigmaCheatManager_Spt_Mission_Clear::_slot' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Mission_Success
// 0x0018 (0x0018 - 0x0000)
struct StigmaCheatManager_Spt_Mission_Success final
{
public:
	class FString                                 _task_id;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _slot;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Mission_Success) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_Mission_Success");
static_assert(sizeof(StigmaCheatManager_Spt_Mission_Success) == 0x000018, "Wrong size on StigmaCheatManager_Spt_Mission_Success");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Success, _task_id) == 0x000000, "Member 'StigmaCheatManager_Spt_Mission_Success::_task_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Success, _idx) == 0x000010, "Member 'StigmaCheatManager_Spt_Mission_Success::_idx' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Mission_Success, _slot) == 0x000014, "Member 'StigmaCheatManager_Spt_Mission_Success::_slot' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_PassiveSkill
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_PassiveSkill final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _skill_id;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_PassiveSkill) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_PassiveSkill");
static_assert(sizeof(StigmaCheatManager_Spt_PassiveSkill) == 0x000010, "Wrong size on StigmaCheatManager_Spt_PassiveSkill");
static_assert(offsetof(StigmaCheatManager_Spt_PassiveSkill, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_PassiveSkill::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_PassiveSkill, _skill_id) == 0x000008, "Member 'StigmaCheatManager_Spt_PassiveSkill::_skill_id' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_PassiveSkill, _level) == 0x00000C, "Member 'StigmaCheatManager_Spt_PassiveSkill::_level' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_RespawnChara
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_RespawnChara final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_RespawnChara) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_RespawnChara");
static_assert(sizeof(StigmaCheatManager_Spt_RespawnChara) == 0x000008, "Wrong size on StigmaCheatManager_Spt_RespawnChara");
static_assert(offsetof(StigmaCheatManager_Spt_RespawnChara, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_RespawnChara::_target_chara' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Sanctum
// 0x0001 (0x0001 - 0x0000)
struct StigmaCheatManager_Spt_Sanctum final
{
public:
	bool                                          _on;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Sanctum) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_Sanctum");
static_assert(sizeof(StigmaCheatManager_Spt_Sanctum) == 0x000001, "Wrong size on StigmaCheatManager_Spt_Sanctum");
static_assert(offsetof(StigmaCheatManager_Spt_Sanctum, _on) == 0x000000, "Member 'StigmaCheatManager_Spt_Sanctum::_on' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_SetBounty
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_SetBounty final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _bounty;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2430[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_SetBounty) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_SetBounty");
static_assert(sizeof(StigmaCheatManager_Spt_SetBounty) == 0x000010, "Wrong size on StigmaCheatManager_Spt_SetBounty");
static_assert(offsetof(StigmaCheatManager_Spt_SetBounty, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_SetBounty::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_SetBounty, _bounty) == 0x000008, "Member 'StigmaCheatManager_Spt_SetBounty::_bounty' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_SetInvincible
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_SetInvincible final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_activated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2431[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_SetInvincible) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_SetInvincible");
static_assert(sizeof(StigmaCheatManager_Spt_SetInvincible) == 0x000010, "Wrong size on StigmaCheatManager_Spt_SetInvincible");
static_assert(offsetof(StigmaCheatManager_Spt_SetInvincible, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_SetInvincible::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_SetInvincible, _is_activated) == 0x000008, "Member 'StigmaCheatManager_Spt_SetInvincible::_is_activated' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Show_Popup_CompetitionReward
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_Show_Popup_CompetitionReward final
{
public:
	int32                                         _Rank;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _point;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Show_Popup_CompetitionReward) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Show_Popup_CompetitionReward");
static_assert(sizeof(StigmaCheatManager_Spt_Show_Popup_CompetitionReward) == 0x000008, "Wrong size on StigmaCheatManager_Spt_Show_Popup_CompetitionReward");
static_assert(offsetof(StigmaCheatManager_Spt_Show_Popup_CompetitionReward, _Rank) == 0x000000, "Member 'StigmaCheatManager_Spt_Show_Popup_CompetitionReward::_Rank' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Show_Popup_CompetitionReward, _point) == 0x000004, "Member 'StigmaCheatManager_Spt_Show_Popup_CompetitionReward::_point' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Show_Popup_SeasonReward
// 0x0008 (0x0008 - 0x0000)
struct StigmaCheatManager_Spt_Show_Popup_SeasonReward final
{
public:
	ETier                                         _tier;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2432[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _Rank;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Show_Popup_SeasonReward) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Show_Popup_SeasonReward");
static_assert(sizeof(StigmaCheatManager_Spt_Show_Popup_SeasonReward) == 0x000008, "Wrong size on StigmaCheatManager_Spt_Show_Popup_SeasonReward");
static_assert(offsetof(StigmaCheatManager_Spt_Show_Popup_SeasonReward, _tier) == 0x000000, "Member 'StigmaCheatManager_Spt_Show_Popup_SeasonReward::_tier' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Show_Popup_SeasonReward, _Rank) == 0x000004, "Member 'StigmaCheatManager_Spt_Show_Popup_SeasonReward::_Rank' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Show_Popup_TierPromotion
// 0x0002 (0x0002 - 0x0000)
struct StigmaCheatManager_Spt_Show_Popup_TierPromotion final
{
public:
	ETier                                         _previous_tier;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         _current_tier;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Show_Popup_TierPromotion) == 0x000001, "Wrong alignment on StigmaCheatManager_Spt_Show_Popup_TierPromotion");
static_assert(sizeof(StigmaCheatManager_Spt_Show_Popup_TierPromotion) == 0x000002, "Wrong size on StigmaCheatManager_Spt_Show_Popup_TierPromotion");
static_assert(offsetof(StigmaCheatManager_Spt_Show_Popup_TierPromotion, _previous_tier) == 0x000000, "Member 'StigmaCheatManager_Spt_Show_Popup_TierPromotion::_previous_tier' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_Show_Popup_TierPromotion, _current_tier) == 0x000001, "Member 'StigmaCheatManager_Spt_Show_Popup_TierPromotion::_current_tier' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ShowAimDistance
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ShowAimDistance final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_activated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2433[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ShowAimDistance) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ShowAimDistance");
static_assert(sizeof(StigmaCheatManager_Spt_ShowAimDistance) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ShowAimDistance");
static_assert(offsetof(StigmaCheatManager_Spt_ShowAimDistance, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ShowAimDistance::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowAimDistance, _is_activated) == 0x000008, "Member 'StigmaCheatManager_Spt_ShowAimDistance::_is_activated' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ShowDamage
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ShowDamage final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_activated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebug_DamageViewerType                       _damage_viewer_type;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2434[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ShowDamage) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ShowDamage");
static_assert(sizeof(StigmaCheatManager_Spt_ShowDamage) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ShowDamage");
static_assert(offsetof(StigmaCheatManager_Spt_ShowDamage, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ShowDamage::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowDamage, _is_activated) == 0x000008, "Member 'StigmaCheatManager_Spt_ShowDamage::_is_activated' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowDamage, _damage_viewer_type) == 0x000009, "Member 'StigmaCheatManager_Spt_ShowDamage::_damage_viewer_type' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ShowDebugUI
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ShowDebugUI final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2435[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ShowDebugUI) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ShowDebugUI");
static_assert(sizeof(StigmaCheatManager_Spt_ShowDebugUI) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ShowDebugUI");
static_assert(offsetof(StigmaCheatManager_Spt_ShowDebugUI, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ShowDebugUI::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowDebugUI, _index) == 0x000008, "Member 'StigmaCheatManager_Spt_ShowDebugUI::_index' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ShowEachHUD
// 0x0020 (0x0020 - 0x0000)
struct StigmaCheatManager_Spt_ShowEachHUD final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_visible;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2436[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ShowEachHUD) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ShowEachHUD");
static_assert(sizeof(StigmaCheatManager_Spt_ShowEachHUD) == 0x000020, "Wrong size on StigmaCheatManager_Spt_ShowEachHUD");
static_assert(offsetof(StigmaCheatManager_Spt_ShowEachHUD, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ShowEachHUD::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowEachHUD, Key) == 0x000008, "Member 'StigmaCheatManager_Spt_ShowEachHUD::Key' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowEachHUD, _is_visible) == 0x000018, "Member 'StigmaCheatManager_Spt_ShowEachHUD::_is_visible' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ShowHUD
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ShowHUD final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_visible;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2437[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ShowHUD) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ShowHUD");
static_assert(sizeof(StigmaCheatManager_Spt_ShowHUD) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ShowHUD");
static_assert(offsetof(StigmaCheatManager_Spt_ShowHUD, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ShowHUD::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowHUD, _is_visible) == 0x000008, "Member 'StigmaCheatManager_Spt_ShowHUD::_is_visible' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_ShowMeTheMoney
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_ShowMeTheMoney final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _Money;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2438[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_ShowMeTheMoney) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_ShowMeTheMoney");
static_assert(sizeof(StigmaCheatManager_Spt_ShowMeTheMoney) == 0x000010, "Wrong size on StigmaCheatManager_Spt_ShowMeTheMoney");
static_assert(offsetof(StigmaCheatManager_Spt_ShowMeTheMoney, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_ShowMeTheMoney::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_ShowMeTheMoney, _Money) == 0x000008, "Member 'StigmaCheatManager_Spt_ShowMeTheMoney::_Money' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Slomo
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_Slomo final
{
public:
	float                                         _Key;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Slomo) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Slomo");
static_assert(sizeof(StigmaCheatManager_Spt_Slomo) == 0x000004, "Wrong size on StigmaCheatManager_Spt_Slomo");
static_assert(offsetof(StigmaCheatManager_Spt_Slomo, _Key) == 0x000000, "Member 'StigmaCheatManager_Spt_Slomo::_Key' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_SpawnAIChara
// 0x0020 (0x0020 - 0x0000)
struct StigmaCheatManager_Spt_SpawnAIChara final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _row_name;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        _Team;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2439[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_SpawnAIChara) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_SpawnAIChara");
static_assert(sizeof(StigmaCheatManager_Spt_SpawnAIChara) == 0x000020, "Wrong size on StigmaCheatManager_Spt_SpawnAIChara");
static_assert(offsetof(StigmaCheatManager_Spt_SpawnAIChara, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_SpawnAIChara::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_SpawnAIChara, _row_name) == 0x000008, "Member 'StigmaCheatManager_Spt_SpawnAIChara::_row_name' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_SpawnAIChara, _Team) == 0x000018, "Member 'StigmaCheatManager_Spt_SpawnAIChara::_Team' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_StartWelcome
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_StartWelcome final
{
public:
	int32                                         _scenario;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_StartWelcome) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_StartWelcome");
static_assert(sizeof(StigmaCheatManager_Spt_StartWelcome) == 0x000004, "Wrong size on StigmaCheatManager_Spt_StartWelcome");
static_assert(offsetof(StigmaCheatManager_Spt_StartWelcome, _scenario) == 0x000000, "Member 'StigmaCheatManager_Spt_StartWelcome::_scenario' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_StaticCamera
// 0x0010 (0x0010 - 0x0000)
struct StigmaCheatManager_Spt_StaticCamera final
{
public:
	class ACharaBase*                             _target_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_activated;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaCheatManager_Spt_StaticCamera) == 0x000008, "Wrong alignment on StigmaCheatManager_Spt_StaticCamera");
static_assert(sizeof(StigmaCheatManager_Spt_StaticCamera) == 0x000010, "Wrong size on StigmaCheatManager_Spt_StaticCamera");
static_assert(offsetof(StigmaCheatManager_Spt_StaticCamera, _target_chara) == 0x000000, "Member 'StigmaCheatManager_Spt_StaticCamera::_target_chara' has a wrong offset!");
static_assert(offsetof(StigmaCheatManager_Spt_StaticCamera, _is_activated) == 0x000008, "Member 'StigmaCheatManager_Spt_StaticCamera::_is_activated' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_TierPoint_Add
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_TierPoint_Add final
{
public:
	float                                         _tier_point;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_TierPoint_Add) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_TierPoint_Add");
static_assert(sizeof(StigmaCheatManager_Spt_TierPoint_Add) == 0x000004, "Wrong size on StigmaCheatManager_Spt_TierPoint_Add");
static_assert(offsetof(StigmaCheatManager_Spt_TierPoint_Add, _tier_point) == 0x000000, "Member 'StigmaCheatManager_Spt_TierPoint_Add::_tier_point' has a wrong offset!");

// Function Stigma.StigmaCheatManager.Spt_Tutorial
// 0x0004 (0x0004 - 0x0000)
struct StigmaCheatManager_Spt_Tutorial final
{
public:
	int32                                         _tutorial;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaCheatManager_Spt_Tutorial) == 0x000004, "Wrong alignment on StigmaCheatManager_Spt_Tutorial");
static_assert(sizeof(StigmaCheatManager_Spt_Tutorial) == 0x000004, "Wrong size on StigmaCheatManager_Spt_Tutorial");
static_assert(offsetof(StigmaCheatManager_Spt_Tutorial, _tutorial) == 0x000000, "Member 'StigmaCheatManager_Spt_Tutorial::_tutorial' has a wrong offset!");

// Function Stigma.StigmaPhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
// 0x0014 (0x0014 - 0x0000)
struct StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNotFound;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243D[0x2];                                     // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow) == 0x000004, "Wrong alignment on StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow");
static_assert(sizeof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow) == 0x000014, "Wrong size on StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, BodyName) == 0x000000, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::BodyName' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, ProfileName) == 0x000008, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::ProfileName' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, bIncludeSelf) == 0x000010, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, bClearNotFound) == 0x000011, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::bClearNotFound' has a wrong offset!");

// Function Stigma.StigmaPhysicalAnimationComponent.ApplyPhysicalAnimationSettings
// 0x002C (0x002C - 0x0000)
struct StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicalAnimationData                 PhysicalAnimationData;                             // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings) == 0x000004, "Wrong alignment on StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings");
static_assert(sizeof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings) == 0x00002C, "Wrong size on StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings, BodyName) == 0x000000, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings::BodyName' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings, PhysicalAnimationData) == 0x000008, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettings::PhysicalAnimationData' has a wrong offset!");

// Function Stigma.StigmaPhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
// 0x0030 (0x0030 - 0x0000)
struct StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicalAnimationData                 PhysicalAnimationData;                             // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243E[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow) == 0x000004, "Wrong alignment on StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow");
static_assert(sizeof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow) == 0x000030, "Wrong size on StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow, BodyName) == 0x000000, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow::BodyName' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow, PhysicalAnimationData) == 0x000008, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow::PhysicalAnimationData' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow, bIncludeSelf) == 0x00002C, "Member 'StigmaPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow::bIncludeSelf' has a wrong offset!");

// Function Stigma.StigmaPhysicalAnimationComponent.SetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent) == 0x000008, "Wrong alignment on StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent");
static_assert(sizeof(StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent) == 0x000008, "Wrong size on StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent");
static_assert(offsetof(StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent, InSkeletalMeshComponent) == 0x000000, "Member 'StigmaPhysicalAnimationComponent_SetSkeletalMeshComponent::InSkeletalMeshComponent' has a wrong offset!");

// Function Stigma.StigmaPhysicalAnimationComponent.SetStrengthMultiplyer
// 0x0004 (0x0004 - 0x0000)
struct StigmaPhysicalAnimationComponent_SetStrengthMultiplyer final
{
public:
	float                                         InStrengthMultiplyer;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPhysicalAnimationComponent_SetStrengthMultiplyer) == 0x000004, "Wrong alignment on StigmaPhysicalAnimationComponent_SetStrengthMultiplyer");
static_assert(sizeof(StigmaPhysicalAnimationComponent_SetStrengthMultiplyer) == 0x000004, "Wrong size on StigmaPhysicalAnimationComponent_SetStrengthMultiplyer");
static_assert(offsetof(StigmaPhysicalAnimationComponent_SetStrengthMultiplyer, InStrengthMultiplyer) == 0x000000, "Member 'StigmaPhysicalAnimationComponent_SetStrengthMultiplyer::InStrengthMultiplyer' has a wrong offset!");

// Function Stigma.StigmaPhysicalAnimationComponent.GetBodyTargetTransform
// 0x0070 (0x0070 - 0x0000)
struct StigmaPhysicalAnimationComponent_GetBodyTargetTransform final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243F[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StigmaPhysicalAnimationComponent_GetBodyTargetTransform) == 0x000010, "Wrong alignment on StigmaPhysicalAnimationComponent_GetBodyTargetTransform");
static_assert(sizeof(StigmaPhysicalAnimationComponent_GetBodyTargetTransform) == 0x000070, "Wrong size on StigmaPhysicalAnimationComponent_GetBodyTargetTransform");
static_assert(offsetof(StigmaPhysicalAnimationComponent_GetBodyTargetTransform, BodyName) == 0x000000, "Member 'StigmaPhysicalAnimationComponent_GetBodyTargetTransform::BodyName' has a wrong offset!");
static_assert(offsetof(StigmaPhysicalAnimationComponent_GetBodyTargetTransform, ReturnValue) == 0x000010, "Member 'StigmaPhysicalAnimationComponent_GetBodyTargetTransform::ReturnValue' has a wrong offset!");

// Function Stigma.SupplyStore.SERVER_RequestPurchase
// 0x0010 (0x0010 - 0x0000)
struct SupplyStore_SERVER_RequestPurchase final
{
public:
	class ACharaBase*                             _requester;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _index;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2443[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(SupplyStore_SERVER_RequestPurchase) == 0x000008, "Wrong alignment on SupplyStore_SERVER_RequestPurchase");
static_assert(sizeof(SupplyStore_SERVER_RequestPurchase) == 0x000010, "Wrong size on SupplyStore_SERVER_RequestPurchase");
static_assert(offsetof(SupplyStore_SERVER_RequestPurchase, _requester) == 0x000000, "Member 'SupplyStore_SERVER_RequestPurchase::_requester' has a wrong offset!");
static_assert(offsetof(SupplyStore_SERVER_RequestPurchase, _index) == 0x000008, "Member 'SupplyStore_SERVER_RequestPurchase::_index' has a wrong offset!");

// Function Stigma.TableCache.FilterGunMainEntries
// 0x0018 (0x0018 - 0x0000)
struct TableCache_FilterGunMainEntries final
{
public:
	bool                                          _handy;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _balance;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _power;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _include_developing;                               // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2447[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FGunEntry_Main>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_FilterGunMainEntries) == 0x000008, "Wrong alignment on TableCache_FilterGunMainEntries");
static_assert(sizeof(TableCache_FilterGunMainEntries) == 0x000018, "Wrong size on TableCache_FilterGunMainEntries");
static_assert(offsetof(TableCache_FilterGunMainEntries, _handy) == 0x000000, "Member 'TableCache_FilterGunMainEntries::_handy' has a wrong offset!");
static_assert(offsetof(TableCache_FilterGunMainEntries, _balance) == 0x000001, "Member 'TableCache_FilterGunMainEntries::_balance' has a wrong offset!");
static_assert(offsetof(TableCache_FilterGunMainEntries, _power) == 0x000002, "Member 'TableCache_FilterGunMainEntries::_power' has a wrong offset!");
static_assert(offsetof(TableCache_FilterGunMainEntries, _include_developing) == 0x000003, "Member 'TableCache_FilterGunMainEntries::_include_developing' has a wrong offset!");
static_assert(offsetof(TableCache_FilterGunMainEntries, ReturnValue) == 0x000008, "Member 'TableCache_FilterGunMainEntries::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.FindAllGunMainEntries
// 0x0018 (0x0018 - 0x0000)
struct TableCache_FindAllGunMainEntries final
{
public:
	EGunSearchGroup                               _group;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2448[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FGunEntry_Main>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_FindAllGunMainEntries) == 0x000008, "Wrong alignment on TableCache_FindAllGunMainEntries");
static_assert(sizeof(TableCache_FindAllGunMainEntries) == 0x000018, "Wrong size on TableCache_FindAllGunMainEntries");
static_assert(offsetof(TableCache_FindAllGunMainEntries, _group) == 0x000000, "Member 'TableCache_FindAllGunMainEntries::_group' has a wrong offset!");
static_assert(offsetof(TableCache_FindAllGunMainEntries, ReturnValue) == 0x000008, "Member 'TableCache_FindAllGunMainEntries::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.FindAllRadioChatDefines
// 0x0018 (0x0018 - 0x0000)
struct TableCache_FindAllRadioChatDefines final
{
public:
	ERadioChatCategory                            _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2449[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FConfig_RadioChat>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_FindAllRadioChatDefines) == 0x000008, "Wrong alignment on TableCache_FindAllRadioChatDefines");
static_assert(sizeof(TableCache_FindAllRadioChatDefines) == 0x000018, "Wrong size on TableCache_FindAllRadioChatDefines");
static_assert(offsetof(TableCache_FindAllRadioChatDefines, _category) == 0x000000, "Member 'TableCache_FindAllRadioChatDefines::_category' has a wrong offset!");
static_assert(offsetof(TableCache_FindAllRadioChatDefines, ReturnValue) == 0x000008, "Member 'TableCache_FindAllRadioChatDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.FindBattleStoreEntryByIDAndMode
// 0x00C8 (0x00C8 - 0x0000)
struct TableCache_FindBattleStoreEntryByIDAndMode final
{
public:
	struct FBattleStoreEntry                      _out_entry;                                        // 0x0000(0x00B0)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FItemID                                _id;                                               // 0x00B0(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _mode;                                             // 0x00C0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244A[0x6];                                     // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_FindBattleStoreEntryByIDAndMode) == 0x000008, "Wrong alignment on TableCache_FindBattleStoreEntryByIDAndMode");
static_assert(sizeof(TableCache_FindBattleStoreEntryByIDAndMode) == 0x0000C8, "Wrong size on TableCache_FindBattleStoreEntryByIDAndMode");
static_assert(offsetof(TableCache_FindBattleStoreEntryByIDAndMode, _out_entry) == 0x000000, "Member 'TableCache_FindBattleStoreEntryByIDAndMode::_out_entry' has a wrong offset!");
static_assert(offsetof(TableCache_FindBattleStoreEntryByIDAndMode, _id) == 0x0000B0, "Member 'TableCache_FindBattleStoreEntryByIDAndMode::_id' has a wrong offset!");
static_assert(offsetof(TableCache_FindBattleStoreEntryByIDAndMode, _mode) == 0x0000C0, "Member 'TableCache_FindBattleStoreEntryByIDAndMode::_mode' has a wrong offset!");
static_assert(offsetof(TableCache_FindBattleStoreEntryByIDAndMode, ReturnValue) == 0x0000C1, "Member 'TableCache_FindBattleStoreEntryByIDAndMode::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.FindBodyDefine
// 0x0230 (0x0230 - 0x0000)
struct TableCache_FindBodyDefine final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    _Armor;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FPartsEntry_Body                       ReturnValue;                                       // 0x0008(0x0228)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_FindBodyDefine) == 0x000008, "Wrong alignment on TableCache_FindBodyDefine");
static_assert(sizeof(TableCache_FindBodyDefine) == 0x000230, "Wrong size on TableCache_FindBodyDefine");
static_assert(offsetof(TableCache_FindBodyDefine, _chara_type) == 0x000000, "Member 'TableCache_FindBodyDefine::_chara_type' has a wrong offset!");
static_assert(offsetof(TableCache_FindBodyDefine, _Armor) == 0x000001, "Member 'TableCache_FindBodyDefine::_Armor' has a wrong offset!");
static_assert(offsetof(TableCache_FindBodyDefine, ReturnValue) == 0x000008, "Member 'TableCache_FindBodyDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetActionGraph
// 0x0220 (0x0220 - 0x0000)
struct TableCache_GetActionGraph final
{
public:
	struct FActionGraphID                         _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphEntry                      _out_entry;                                        // 0x0010(0x0208)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0218(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244C[0x7];                                     // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetActionGraph) == 0x000008, "Wrong alignment on TableCache_GetActionGraph");
static_assert(sizeof(TableCache_GetActionGraph) == 0x000220, "Wrong size on TableCache_GetActionGraph");
static_assert(offsetof(TableCache_GetActionGraph, _id) == 0x000000, "Member 'TableCache_GetActionGraph::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetActionGraph, _out_entry) == 0x000010, "Member 'TableCache_GetActionGraph::_out_entry' has a wrong offset!");
static_assert(offsetof(TableCache_GetActionGraph, ReturnValue) == 0x000218, "Member 'TableCache_GetActionGraph::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllActionGraphs
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllActionGraphs final
{
public:
	TArray<struct FActionGraphEntry>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllActionGraphs) == 0x000008, "Wrong alignment on TableCache_GetAllActionGraphs");
static_assert(sizeof(TableCache_GetAllActionGraphs) == 0x000010, "Wrong size on TableCache_GetAllActionGraphs");
static_assert(offsetof(TableCache_GetAllActionGraphs, ReturnValue) == 0x000000, "Member 'TableCache_GetAllActionGraphs::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllActionGraphsByType
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetAllActionGraphsByType final
{
public:
	EActionType                                   _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FActionGraphEntry>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllActionGraphsByType) == 0x000008, "Wrong alignment on TableCache_GetAllActionGraphsByType");
static_assert(sizeof(TableCache_GetAllActionGraphsByType) == 0x000018, "Wrong size on TableCache_GetAllActionGraphsByType");
static_assert(offsetof(TableCache_GetAllActionGraphsByType, _type) == 0x000000, "Member 'TableCache_GetAllActionGraphsByType::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllActionGraphsByType, ReturnValue) == 0x000008, "Member 'TableCache_GetAllActionGraphsByType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllBodies
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetAllBodies final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemEntry>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllBodies) == 0x000008, "Wrong alignment on TableCache_GetAllBodies");
static_assert(sizeof(TableCache_GetAllBodies) == 0x000018, "Wrong size on TableCache_GetAllBodies");
static_assert(offsetof(TableCache_GetAllBodies, _chara_type) == 0x000000, "Member 'TableCache_GetAllBodies::_chara_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllBodies, ReturnValue) == 0x000008, "Member 'TableCache_GetAllBodies::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllBoosterDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllBoosterDefines final
{
public:
	TArray<struct FConfig_Booster>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllBoosterDefines) == 0x000008, "Wrong alignment on TableCache_GetAllBoosterDefines");
static_assert(sizeof(TableCache_GetAllBoosterDefines) == 0x000010, "Wrong size on TableCache_GetAllBoosterDefines");
static_assert(offsetof(TableCache_GetAllBoosterDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllBoosterDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllCharacterDefineByFightingStyle
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetAllCharacterDefineByFightingStyle final
{
public:
	EFightingStyle                                _style;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _include_upcoming;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FCharacterDefine>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllCharacterDefineByFightingStyle) == 0x000008, "Wrong alignment on TableCache_GetAllCharacterDefineByFightingStyle");
static_assert(sizeof(TableCache_GetAllCharacterDefineByFightingStyle) == 0x000018, "Wrong size on TableCache_GetAllCharacterDefineByFightingStyle");
static_assert(offsetof(TableCache_GetAllCharacterDefineByFightingStyle, _style) == 0x000000, "Member 'TableCache_GetAllCharacterDefineByFightingStyle::_style' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllCharacterDefineByFightingStyle, _include_upcoming) == 0x000001, "Member 'TableCache_GetAllCharacterDefineByFightingStyle::_include_upcoming' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllCharacterDefineByFightingStyle, ReturnValue) == 0x000008, "Member 'TableCache_GetAllCharacterDefineByFightingStyle::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllCharacterDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllCharacterDefines final
{
public:
	TArray<struct FCharacterDefine>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllCharacterDefines) == 0x000008, "Wrong alignment on TableCache_GetAllCharacterDefines");
static_assert(sizeof(TableCache_GetAllCharacterDefines) == 0x000010, "Wrong size on TableCache_GetAllCharacterDefines");
static_assert(offsetof(TableCache_GetAllCharacterDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllCharacterDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllCharacterDefineSortedByFightingStyle
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetAllCharacterDefineSortedByFightingStyle final
{
public:
	bool                                          _include_upcoming;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2450[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FCharacterDefine>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllCharacterDefineSortedByFightingStyle) == 0x000008, "Wrong alignment on TableCache_GetAllCharacterDefineSortedByFightingStyle");
static_assert(sizeof(TableCache_GetAllCharacterDefineSortedByFightingStyle) == 0x000018, "Wrong size on TableCache_GetAllCharacterDefineSortedByFightingStyle");
static_assert(offsetof(TableCache_GetAllCharacterDefineSortedByFightingStyle, _include_upcoming) == 0x000000, "Member 'TableCache_GetAllCharacterDefineSortedByFightingStyle::_include_upcoming' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllCharacterDefineSortedByFightingStyle, ReturnValue) == 0x000008, "Member 'TableCache_GetAllCharacterDefineSortedByFightingStyle::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllCurrencyDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllCurrencyDefines final
{
public:
	TArray<struct FCurrencyDef>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllCurrencyDefines) == 0x000008, "Wrong alignment on TableCache_GetAllCurrencyDefines");
static_assert(sizeof(TableCache_GetAllCurrencyDefines) == 0x000010, "Wrong size on TableCache_GetAllCurrencyDefines");
static_assert(offsetof(TableCache_GetAllCurrencyDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllCurrencyDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllGoodsDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllGoodsDefines final
{
public:
	TArray<struct FConfig_Goods>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllGoodsDefines) == 0x000008, "Wrong alignment on TableCache_GetAllGoodsDefines");
static_assert(sizeof(TableCache_GetAllGoodsDefines) == 0x000010, "Wrong size on TableCache_GetAllGoodsDefines");
static_assert(offsetof(TableCache_GetAllGoodsDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllGoodsDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllGunMainEntries
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllGunMainEntries final
{
public:
	TArray<struct FGunEntry_Main>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllGunMainEntries) == 0x000008, "Wrong alignment on TableCache_GetAllGunMainEntries");
static_assert(sizeof(TableCache_GetAllGunMainEntries) == 0x000010, "Wrong size on TableCache_GetAllGunMainEntries");
static_assert(offsetof(TableCache_GetAllGunMainEntries, ReturnValue) == 0x000000, "Member 'TableCache_GetAllGunMainEntries::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllHeads
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetAllHeads final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2451[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemEntry>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllHeads) == 0x000008, "Wrong alignment on TableCache_GetAllHeads");
static_assert(sizeof(TableCache_GetAllHeads) == 0x000018, "Wrong size on TableCache_GetAllHeads");
static_assert(offsetof(TableCache_GetAllHeads, _chara_type) == 0x000000, "Member 'TableCache_GetAllHeads::_chara_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllHeads, ReturnValue) == 0x000008, "Member 'TableCache_GetAllHeads::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllInputActionDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllInputActionDefines final
{
public:
	TArray<struct FInputActionDefine>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllInputActionDefines) == 0x000008, "Wrong alignment on TableCache_GetAllInputActionDefines");
static_assert(sizeof(TableCache_GetAllInputActionDefines) == 0x000010, "Wrong size on TableCache_GetAllInputActionDefines");
static_assert(offsetof(TableCache_GetAllInputActionDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllInputActionDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllMaps
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllMaps final
{
public:
	TArray<struct FMapEntry>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllMaps) == 0x000008, "Wrong alignment on TableCache_GetAllMaps");
static_assert(sizeof(TableCache_GetAllMaps) == 0x000010, "Wrong size on TableCache_GetAllMaps");
static_assert(offsetof(TableCache_GetAllMaps, ReturnValue) == 0x000000, "Member 'TableCache_GetAllMaps::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllMapsForGameMode
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetAllMapsForGameMode final
{
public:
	EGameMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2452[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FMapEntry>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllMapsForGameMode) == 0x000008, "Wrong alignment on TableCache_GetAllMapsForGameMode");
static_assert(sizeof(TableCache_GetAllMapsForGameMode) == 0x000018, "Wrong size on TableCache_GetAllMapsForGameMode");
static_assert(offsetof(TableCache_GetAllMapsForGameMode, _mode) == 0x000000, "Member 'TableCache_GetAllMapsForGameMode::_mode' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllMapsForGameMode, ReturnValue) == 0x000008, "Member 'TableCache_GetAllMapsForGameMode::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllMissionDefines
// 0x0020 (0x0020 - 0x0000)
struct TableCache_GetAllMissionDefines final
{
public:
	EMissionType                                  _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2453[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FMissionDefine>                 _out_list;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          _include_platform_mission;                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2454[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetAllMissionDefines) == 0x000008, "Wrong alignment on TableCache_GetAllMissionDefines");
static_assert(sizeof(TableCache_GetAllMissionDefines) == 0x000020, "Wrong size on TableCache_GetAllMissionDefines");
static_assert(offsetof(TableCache_GetAllMissionDefines, _type) == 0x000000, "Member 'TableCache_GetAllMissionDefines::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllMissionDefines, _out_list) == 0x000008, "Member 'TableCache_GetAllMissionDefines::_out_list' has a wrong offset!");
static_assert(offsetof(TableCache_GetAllMissionDefines, _include_platform_mission) == 0x000018, "Member 'TableCache_GetAllMissionDefines::_include_platform_mission' has a wrong offset!");

// Function Stigma.TableCache.GetAllPassiveSkillDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllPassiveSkillDefines final
{
public:
	TArray<struct FPassiveSkillEntry>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllPassiveSkillDefines) == 0x000008, "Wrong alignment on TableCache_GetAllPassiveSkillDefines");
static_assert(sizeof(TableCache_GetAllPassiveSkillDefines) == 0x000010, "Wrong size on TableCache_GetAllPassiveSkillDefines");
static_assert(offsetof(TableCache_GetAllPassiveSkillDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllPassiveSkillDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllPingDefines
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllPingDefines final
{
public:
	TArray<struct FConfig_Ping>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllPingDefines) == 0x000008, "Wrong alignment on TableCache_GetAllPingDefines");
static_assert(sizeof(TableCache_GetAllPingDefines) == 0x000010, "Wrong size on TableCache_GetAllPingDefines");
static_assert(offsetof(TableCache_GetAllPingDefines, ReturnValue) == 0x000000, "Member 'TableCache_GetAllPingDefines::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllRadioChatCategories
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllRadioChatCategories final
{
public:
	TArray<ERadioChatCategory>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllRadioChatCategories) == 0x000008, "Wrong alignment on TableCache_GetAllRadioChatCategories");
static_assert(sizeof(TableCache_GetAllRadioChatCategories) == 0x000010, "Wrong size on TableCache_GetAllRadioChatCategories");
static_assert(offsetof(TableCache_GetAllRadioChatCategories, ReturnValue) == 0x000000, "Member 'TableCache_GetAllRadioChatCategories::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllRandomBoxesDefine
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllRandomBoxesDefine final
{
public:
	TArray<struct FConfig_RandomBox>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllRandomBoxesDefine) == 0x000008, "Wrong alignment on TableCache_GetAllRandomBoxesDefine");
static_assert(sizeof(TableCache_GetAllRandomBoxesDefine) == 0x000010, "Wrong size on TableCache_GetAllRandomBoxesDefine");
static_assert(offsetof(TableCache_GetAllRandomBoxesDefine, ReturnValue) == 0x000000, "Member 'TableCache_GetAllRandomBoxesDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllSeasonEntries
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllSeasonEntries final
{
public:
	TArray<struct FConfig_Season>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllSeasonEntries) == 0x000008, "Wrong alignment on TableCache_GetAllSeasonEntries");
static_assert(sizeof(TableCache_GetAllSeasonEntries) == 0x000010, "Wrong size on TableCache_GetAllSeasonEntries");
static_assert(offsetof(TableCache_GetAllSeasonEntries, ReturnValue) == 0x000000, "Member 'TableCache_GetAllSeasonEntries::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllTierGroups
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllTierGroups final
{
public:
	TArray<ETierGroup>                            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllTierGroups) == 0x000008, "Wrong alignment on TableCache_GetAllTierGroups");
static_assert(sizeof(TableCache_GetAllTierGroups) == 0x000010, "Wrong size on TableCache_GetAllTierGroups");
static_assert(offsetof(TableCache_GetAllTierGroups, ReturnValue) == 0x000000, "Member 'TableCache_GetAllTierGroups::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAllyColor
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetAllyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAllyColor) == 0x000004, "Wrong alignment on TableCache_GetAllyColor");
static_assert(sizeof(TableCache_GetAllyColor) == 0x000010, "Wrong size on TableCache_GetAllyColor");
static_assert(offsetof(TableCache_GetAllyColor, ReturnValue) == 0x000000, "Member 'TableCache_GetAllyColor::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetArmorDefine
// 0x01B0 (0x01B0 - 0x0000)
struct TableCache_GetArmorDefine final
{
public:
	EArmorType                                    _Armor;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2455[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Armor                          ReturnValue;                                       // 0x0008(0x01A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetArmorDefine) == 0x000008, "Wrong alignment on TableCache_GetArmorDefine");
static_assert(sizeof(TableCache_GetArmorDefine) == 0x0001B0, "Wrong size on TableCache_GetArmorDefine");
static_assert(offsetof(TableCache_GetArmorDefine, _Armor) == 0x000000, "Member 'TableCache_GetArmorDefine::_Armor' has a wrong offset!");
static_assert(offsetof(TableCache_GetArmorDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetArmorDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetArmorDisplayStats
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetArmorDisplayStats final
{
public:
	TArray<struct FDisplayStat>                   _out_display_stats;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EArmorType                                    _Armor;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2456[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetArmorDisplayStats) == 0x000008, "Wrong alignment on TableCache_GetArmorDisplayStats");
static_assert(sizeof(TableCache_GetArmorDisplayStats) == 0x000018, "Wrong size on TableCache_GetArmorDisplayStats");
static_assert(offsetof(TableCache_GetArmorDisplayStats, _out_display_stats) == 0x000000, "Member 'TableCache_GetArmorDisplayStats::_out_display_stats' has a wrong offset!");
static_assert(offsetof(TableCache_GetArmorDisplayStats, _Armor) == 0x000010, "Member 'TableCache_GetArmorDisplayStats::_Armor' has a wrong offset!");
static_assert(offsetof(TableCache_GetArmorDisplayStats, ReturnValue) == 0x000011, "Member 'TableCache_GetArmorDisplayStats::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetArmorType
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetArmorType final
{
public:
	struct FItemID_Armor                          _armor_id;                                         // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2457[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetArmorType) == 0x000008, "Wrong alignment on TableCache_GetArmorType");
static_assert(sizeof(TableCache_GetArmorType) == 0x000018, "Wrong size on TableCache_GetArmorType");
static_assert(offsetof(TableCache_GetArmorType, _armor_id) == 0x000000, "Member 'TableCache_GetArmorType::_armor_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetArmorType, ReturnValue) == 0x000010, "Member 'TableCache_GetArmorType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetAttackTypeDefine
// 0x0020 (0x0020 - 0x0000)
struct TableCache_GetAttackTypeDefine final
{
public:
	EAttackType                                   _point;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2458[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FAttackTypeDefine                      ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetAttackTypeDefine) == 0x000008, "Wrong alignment on TableCache_GetAttackTypeDefine");
static_assert(sizeof(TableCache_GetAttackTypeDefine) == 0x000020, "Wrong size on TableCache_GetAttackTypeDefine");
static_assert(offsetof(TableCache_GetAttackTypeDefine, _point) == 0x000000, "Member 'TableCache_GetAttackTypeDefine::_point' has a wrong offset!");
static_assert(offsetof(TableCache_GetAttackTypeDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetAttackTypeDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBasicPackage
// 0x0078 (0x0078 - 0x0000)
struct TableCache_GetBasicPackage final
{
public:
	struct FConfig_BasicPackage                   ReturnValue;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBasicPackage) == 0x000008, "Wrong alignment on TableCache_GetBasicPackage");
static_assert(sizeof(TableCache_GetBasicPackage) == 0x000078, "Wrong size on TableCache_GetBasicPackage");
static_assert(offsetof(TableCache_GetBasicPackage, ReturnValue) == 0x000000, "Member 'TableCache_GetBasicPackage::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBattlePassDefineByID
// 0x02E8 (0x02E8 - 0x0000)
struct TableCache_GetBattlePassDefineByID final
{
public:
	struct FItemID_BattlePass                     _battle_pass_id;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattlePassDefine                      ReturnValue;                                       // 0x0010(0x02D8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBattlePassDefineByID) == 0x000008, "Wrong alignment on TableCache_GetBattlePassDefineByID");
static_assert(sizeof(TableCache_GetBattlePassDefineByID) == 0x0002E8, "Wrong size on TableCache_GetBattlePassDefineByID");
static_assert(offsetof(TableCache_GetBattlePassDefineByID, _battle_pass_id) == 0x000000, "Member 'TableCache_GetBattlePassDefineByID::_battle_pass_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetBattlePassDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetBattlePassDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBattlePassLevelConfigs
// 0x0068 (0x0068 - 0x0000)
struct TableCache_GetBattlePassLevelConfigs final
{
public:
	struct FItemID_BattlePass                     _battle_pass_id;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FBattlePassLevelConfig>    _out_configs;                                      // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2459[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetBattlePassLevelConfigs) == 0x000008, "Wrong alignment on TableCache_GetBattlePassLevelConfigs");
static_assert(sizeof(TableCache_GetBattlePassLevelConfigs) == 0x000068, "Wrong size on TableCache_GetBattlePassLevelConfigs");
static_assert(offsetof(TableCache_GetBattlePassLevelConfigs, _battle_pass_id) == 0x000000, "Member 'TableCache_GetBattlePassLevelConfigs::_battle_pass_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetBattlePassLevelConfigs, _out_configs) == 0x000010, "Member 'TableCache_GetBattlePassLevelConfigs::_out_configs' has a wrong offset!");
static_assert(offsetof(TableCache_GetBattlePassLevelConfigs, ReturnValue) == 0x000060, "Member 'TableCache_GetBattlePassLevelConfigs::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBattlePassMissionConfigs
// 0x0068 (0x0068 - 0x0000)
struct TableCache_GetBattlePassMissionConfigs final
{
public:
	struct FItemID_BattlePass                     _battle_pass_id;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FBattlePassMissionConfig>  _out_configs;                                      // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245A[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetBattlePassMissionConfigs) == 0x000008, "Wrong alignment on TableCache_GetBattlePassMissionConfigs");
static_assert(sizeof(TableCache_GetBattlePassMissionConfigs) == 0x000068, "Wrong size on TableCache_GetBattlePassMissionConfigs");
static_assert(offsetof(TableCache_GetBattlePassMissionConfigs, _battle_pass_id) == 0x000000, "Member 'TableCache_GetBattlePassMissionConfigs::_battle_pass_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetBattlePassMissionConfigs, _out_configs) == 0x000010, "Member 'TableCache_GetBattlePassMissionConfigs::_out_configs' has a wrong offset!");
static_assert(offsetof(TableCache_GetBattlePassMissionConfigs, ReturnValue) == 0x000060, "Member 'TableCache_GetBattlePassMissionConfigs::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBattleStoreEntries
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetBattleStoreEntries final
{
public:
	TArray<struct FBattleStoreEntry>              _out_entries;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBattleStoreEntries) == 0x000008, "Wrong alignment on TableCache_GetBattleStoreEntries");
static_assert(sizeof(TableCache_GetBattleStoreEntries) == 0x000010, "Wrong size on TableCache_GetBattleStoreEntries");
static_assert(offsetof(TableCache_GetBattleStoreEntries, _out_entries) == 0x000000, "Member 'TableCache_GetBattleStoreEntries::_out_entries' has a wrong offset!");

// Function Stigma.TableCache.GetBattleStoreEntriesByMode
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetBattleStoreEntriesByMode final
{
public:
	TArray<struct FBattleStoreEntry>              _out_entries;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetBattleStoreEntriesByMode) == 0x000008, "Wrong alignment on TableCache_GetBattleStoreEntriesByMode");
static_assert(sizeof(TableCache_GetBattleStoreEntriesByMode) == 0x000018, "Wrong size on TableCache_GetBattleStoreEntriesByMode");
static_assert(offsetof(TableCache_GetBattleStoreEntriesByMode, _out_entries) == 0x000000, "Member 'TableCache_GetBattleStoreEntriesByMode::_out_entries' has a wrong offset!");
static_assert(offsetof(TableCache_GetBattleStoreEntriesByMode, _game_mode) == 0x000010, "Member 'TableCache_GetBattleStoreEntriesByMode::_game_mode' has a wrong offset!");

// Function Stigma.TableCache.GetBodyDefine
// 0x0238 (0x0238 - 0x0000)
struct TableCache_GetBodyDefine final
{
public:
	struct FItemID_Skin_Body                      _body_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartsEntry_Body                       ReturnValue;                                       // 0x0010(0x0228)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBodyDefine) == 0x000008, "Wrong alignment on TableCache_GetBodyDefine");
static_assert(sizeof(TableCache_GetBodyDefine) == 0x000238, "Wrong size on TableCache_GetBodyDefine");
static_assert(offsetof(TableCache_GetBodyDefine, _body_id) == 0x000000, "Member 'TableCache_GetBodyDefine::_body_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetBodyDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetBodyDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBodyPartDefine
// 0x0030 (0x0030 - 0x0000)
struct TableCache_GetBodyPartDefine final
{
public:
	EBodyParts                                    _part;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBodyPartDefine                        ReturnValue;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBodyPartDefine) == 0x000008, "Wrong alignment on TableCache_GetBodyPartDefine");
static_assert(sizeof(TableCache_GetBodyPartDefine) == 0x000030, "Wrong size on TableCache_GetBodyPartDefine");
static_assert(offsetof(TableCache_GetBodyPartDefine, _part) == 0x000000, "Member 'TableCache_GetBodyPartDefine::_part' has a wrong offset!");
static_assert(offsetof(TableCache_GetBodyPartDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetBodyPartDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBoosterDefineByID
// 0x0188 (0x0188 - 0x0000)
struct TableCache_GetBoosterDefineByID final
{
public:
	struct FItemID_Booster                        _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Booster                        ReturnValue;                                       // 0x0010(0x0178)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBoosterDefineByID) == 0x000008, "Wrong alignment on TableCache_GetBoosterDefineByID");
static_assert(sizeof(TableCache_GetBoosterDefineByID) == 0x000188, "Wrong size on TableCache_GetBoosterDefineByID");
static_assert(offsetof(TableCache_GetBoosterDefineByID, _id) == 0x000000, "Member 'TableCache_GetBoosterDefineByID::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetBoosterDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetBoosterDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBoosterSlotActivatingLevel
// 0x0008 (0x0008 - 0x0000)
struct TableCache_GetBoosterSlotActivatingLevel final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBoosterSlotActivatingLevel) == 0x000004, "Wrong alignment on TableCache_GetBoosterSlotActivatingLevel");
static_assert(sizeof(TableCache_GetBoosterSlotActivatingLevel) == 0x000008, "Wrong size on TableCache_GetBoosterSlotActivatingLevel");
static_assert(offsetof(TableCache_GetBoosterSlotActivatingLevel, _slot_zidx) == 0x000000, "Member 'TableCache_GetBoosterSlotActivatingLevel::_slot_zidx' has a wrong offset!");
static_assert(offsetof(TableCache_GetBoosterSlotActivatingLevel, ReturnValue) == 0x000004, "Member 'TableCache_GetBoosterSlotActivatingLevel::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBulletCaliber
// 0x0078 (0x0078 - 0x0000)
struct TableCache_GetBulletCaliber final
{
public:
	EBulletType                                   _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletTip                                    _tip;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245D[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBulletCaliberDefine                   ReturnValue;                                       // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBulletCaliber) == 0x000008, "Wrong alignment on TableCache_GetBulletCaliber");
static_assert(sizeof(TableCache_GetBulletCaliber) == 0x000078, "Wrong size on TableCache_GetBulletCaliber");
static_assert(offsetof(TableCache_GetBulletCaliber, _type) == 0x000000, "Member 'TableCache_GetBulletCaliber::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetBulletCaliber, _tip) == 0x000001, "Member 'TableCache_GetBulletCaliber::_tip' has a wrong offset!");
static_assert(offsetof(TableCache_GetBulletCaliber, ReturnValue) == 0x000008, "Member 'TableCache_GetBulletCaliber::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetBulletTipDefineByType
// 0x00A0 (0x00A0 - 0x0000)
struct TableCache_GetBulletTipDefineByType final
{
public:
	EBulletTip                                    _tip;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBulletTipDefine                       ReturnValue;                                       // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetBulletTipDefineByType) == 0x000008, "Wrong alignment on TableCache_GetBulletTipDefineByType");
static_assert(sizeof(TableCache_GetBulletTipDefineByType) == 0x0000A0, "Wrong size on TableCache_GetBulletTipDefineByType");
static_assert(offsetof(TableCache_GetBulletTipDefineByType, _tip) == 0x000000, "Member 'TableCache_GetBulletTipDefineByType::_tip' has a wrong offset!");
static_assert(offsetof(TableCache_GetBulletTipDefineByType, ReturnValue) == 0x000008, "Member 'TableCache_GetBulletTipDefineByType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCharacterDefByName
// 0x09F8 (0x09F8 - 0x0000)
struct TableCache_GetCharacterDefByName final
{
public:
	class FString                                 _str;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterDefine                       _out_date;                                         // 0x0010(0x09E0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x09F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_245F[0x7];                                     // 0x09F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetCharacterDefByName) == 0x000008, "Wrong alignment on TableCache_GetCharacterDefByName");
static_assert(sizeof(TableCache_GetCharacterDefByName) == 0x0009F8, "Wrong size on TableCache_GetCharacterDefByName");
static_assert(offsetof(TableCache_GetCharacterDefByName, _str) == 0x000000, "Member 'TableCache_GetCharacterDefByName::_str' has a wrong offset!");
static_assert(offsetof(TableCache_GetCharacterDefByName, _out_date) == 0x000010, "Member 'TableCache_GetCharacterDefByName::_out_date' has a wrong offset!");
static_assert(offsetof(TableCache_GetCharacterDefByName, ReturnValue) == 0x0009F0, "Member 'TableCache_GetCharacterDefByName::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCharacterDefByType
// 0x09F0 (0x09F0 - 0x0000)
struct TableCache_GetCharacterDefByType final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2460[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterDefine                       _out_data;                                         // 0x0008(0x09E0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x09E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2461[0x7];                                     // 0x09E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetCharacterDefByType) == 0x000008, "Wrong alignment on TableCache_GetCharacterDefByType");
static_assert(sizeof(TableCache_GetCharacterDefByType) == 0x0009F0, "Wrong size on TableCache_GetCharacterDefByType");
static_assert(offsetof(TableCache_GetCharacterDefByType, _type) == 0x000000, "Member 'TableCache_GetCharacterDefByType::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetCharacterDefByType, _out_data) == 0x000008, "Member 'TableCache_GetCharacterDefByType::_out_data' has a wrong offset!");
static_assert(offsetof(TableCache_GetCharacterDefByType, ReturnValue) == 0x0009E8, "Member 'TableCache_GetCharacterDefByType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCommonStyleConfig
// 0x0820 (0x0820 - 0x0000)
struct TableCache_GetCommonStyleConfig final
{
public:
	struct FConfig_CommonStyle                    ReturnValue;                                       // 0x0000(0x0820)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCommonStyleConfig) == 0x000010, "Wrong alignment on TableCache_GetCommonStyleConfig");
static_assert(sizeof(TableCache_GetCommonStyleConfig) == 0x000820, "Wrong size on TableCache_GetCommonStyleConfig");
static_assert(offsetof(TableCache_GetCommonStyleConfig, ReturnValue) == 0x000000, "Member 'TableCache_GetCommonStyleConfig::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCompetitionGroupDefine
// 0x0048 (0x0048 - 0x0000)
struct TableCache_GetCompetitionGroupDefine final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2462[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_GroupCompetition               ReturnValue;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCompetitionGroupDefine) == 0x000008, "Wrong alignment on TableCache_GetCompetitionGroupDefine");
static_assert(sizeof(TableCache_GetCompetitionGroupDefine) == 0x000048, "Wrong size on TableCache_GetCompetitionGroupDefine");
static_assert(offsetof(TableCache_GetCompetitionGroupDefine, _competition_type) == 0x000000, "Member 'TableCache_GetCompetitionGroupDefine::_competition_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetCompetitionGroupDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetCompetitionGroupDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCompetitionRankReward
// 0x0020 (0x0020 - 0x0000)
struct TableCache_GetCompetitionRankReward final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2463[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _Rank;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGroupCompetitionReward                ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCompetitionRankReward) == 0x000008, "Wrong alignment on TableCache_GetCompetitionRankReward");
static_assert(sizeof(TableCache_GetCompetitionRankReward) == 0x000020, "Wrong size on TableCache_GetCompetitionRankReward");
static_assert(offsetof(TableCache_GetCompetitionRankReward, _competition_type) == 0x000000, "Member 'TableCache_GetCompetitionRankReward::_competition_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetCompetitionRankReward, _Rank) == 0x000004, "Member 'TableCache_GetCompetitionRankReward::_Rank' has a wrong offset!");
static_assert(offsetof(TableCache_GetCompetitionRankReward, ReturnValue) == 0x000008, "Member 'TableCache_GetCompetitionRankReward::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCompetitionRewardDefine
// 0x0028 (0x0028 - 0x0000)
struct TableCache_GetCompetitionRewardDefine final
{
public:
	ECompetitionType                              _competition_type;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2464[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_GroupCompetitionRewards        ReturnValue;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCompetitionRewardDefine) == 0x000008, "Wrong alignment on TableCache_GetCompetitionRewardDefine");
static_assert(sizeof(TableCache_GetCompetitionRewardDefine) == 0x000028, "Wrong size on TableCache_GetCompetitionRewardDefine");
static_assert(offsetof(TableCache_GetCompetitionRewardDefine, _competition_type) == 0x000000, "Member 'TableCache_GetCompetitionRewardDefine::_competition_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetCompetitionRewardDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetCompetitionRewardDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCrossHairColors
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetCrossHairColors final
{
public:
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCrossHairColors) == 0x000008, "Wrong alignment on TableCache_GetCrossHairColors");
static_assert(sizeof(TableCache_GetCrossHairColors) == 0x000010, "Wrong size on TableCache_GetCrossHairColors");
static_assert(offsetof(TableCache_GetCrossHairColors, ReturnValue) == 0x000000, "Member 'TableCache_GetCrossHairColors::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCrossHairOutlineColors
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetCrossHairOutlineColors final
{
public:
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCrossHairOutlineColors) == 0x000008, "Wrong alignment on TableCache_GetCrossHairOutlineColors");
static_assert(sizeof(TableCache_GetCrossHairOutlineColors) == 0x000010, "Wrong size on TableCache_GetCrossHairOutlineColors");
static_assert(offsetof(TableCache_GetCrossHairOutlineColors, ReturnValue) == 0x000000, "Member 'TableCache_GetCrossHairOutlineColors::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCurrencyDefine
// 0x0178 (0x0178 - 0x0000)
struct TableCache_GetCurrencyDefine final
{
public:
	ECurrencyTypes                                _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2465[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCurrencyDef                           _out_def;                                          // 0x0008(0x0168)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0170(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2466[0x7];                                     // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetCurrencyDefine) == 0x000008, "Wrong alignment on TableCache_GetCurrencyDefine");
static_assert(sizeof(TableCache_GetCurrencyDefine) == 0x000178, "Wrong size on TableCache_GetCurrencyDefine");
static_assert(offsetof(TableCache_GetCurrencyDefine, _type) == 0x000000, "Member 'TableCache_GetCurrencyDefine::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetCurrencyDefine, _out_def) == 0x000008, "Member 'TableCache_GetCurrencyDefine::_out_def' has a wrong offset!");
static_assert(offsetof(TableCache_GetCurrencyDefine, ReturnValue) == 0x000170, "Member 'TableCache_GetCurrencyDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetCurrencyDefineFromID
// 0x0178 (0x0178 - 0x0000)
struct TableCache_GetCurrencyDefineFromID final
{
public:
	struct FItemID_Currency                       _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrencyDef                           ReturnValue;                                       // 0x0010(0x0168)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetCurrencyDefineFromID) == 0x000008, "Wrong alignment on TableCache_GetCurrencyDefineFromID");
static_assert(sizeof(TableCache_GetCurrencyDefineFromID) == 0x000178, "Wrong size on TableCache_GetCurrencyDefineFromID");
static_assert(offsetof(TableCache_GetCurrencyDefineFromID, _id) == 0x000000, "Member 'TableCache_GetCurrencyDefineFromID::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetCurrencyDefineFromID, ReturnValue) == 0x000010, "Member 'TableCache_GetCurrencyDefineFromID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetDefaultCharacterInfo
// 0x0060 (0x0060 - 0x0000)
struct TableCache_GetDefaultCharacterInfo final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _random;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2467[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterInfo                         ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetDefaultCharacterInfo) == 0x000008, "Wrong alignment on TableCache_GetDefaultCharacterInfo");
static_assert(sizeof(TableCache_GetDefaultCharacterInfo) == 0x000060, "Wrong size on TableCache_GetDefaultCharacterInfo");
static_assert(offsetof(TableCache_GetDefaultCharacterInfo, _type) == 0x000000, "Member 'TableCache_GetDefaultCharacterInfo::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetDefaultCharacterInfo, _random) == 0x000001, "Member 'TableCache_GetDefaultCharacterInfo::_random' has a wrong offset!");
static_assert(offsetof(TableCache_GetDefaultCharacterInfo, ReturnValue) == 0x000008, "Member 'TableCache_GetDefaultCharacterInfo::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEmblemDefine
// 0x0168 (0x0168 - 0x0000)
struct TableCache_GetEmblemDefine final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Emblem                         ReturnValue;                                       // 0x0010(0x0158)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEmblemDefine) == 0x000008, "Wrong alignment on TableCache_GetEmblemDefine");
static_assert(sizeof(TableCache_GetEmblemDefine) == 0x000168, "Wrong size on TableCache_GetEmblemDefine");
static_assert(offsetof(TableCache_GetEmblemDefine, _item_id) == 0x000000, "Member 'TableCache_GetEmblemDefine::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEmblemDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetEmblemDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEmoticonDefine
// 0x0148 (0x0148 - 0x0000)
struct TableCache_GetEmoticonDefine final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Emoticon                       ReturnValue;                                       // 0x0010(0x0138)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEmoticonDefine) == 0x000008, "Wrong alignment on TableCache_GetEmoticonDefine");
static_assert(sizeof(TableCache_GetEmoticonDefine) == 0x000148, "Wrong size on TableCache_GetEmoticonDefine");
static_assert(offsetof(TableCache_GetEmoticonDefine, _item_id) == 0x000000, "Member 'TableCache_GetEmoticonDefine::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEmoticonDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetEmoticonDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEnemyColor
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetEnemyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEnemyColor) == 0x000004, "Wrong alignment on TableCache_GetEnemyColor");
static_assert(sizeof(TableCache_GetEnemyColor) == 0x000010, "Wrong size on TableCache_GetEnemyColor");
static_assert(offsetof(TableCache_GetEnemyColor, ReturnValue) == 0x000000, "Member 'TableCache_GetEnemyColor::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEntriesByCategory
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetEntriesByCategory final
{
public:
	TArray<struct FItemEntry>                     _item_array;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EItemCategory                                 _category;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2468[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetEntriesByCategory) == 0x000008, "Wrong alignment on TableCache_GetEntriesByCategory");
static_assert(sizeof(TableCache_GetEntriesByCategory) == 0x000018, "Wrong size on TableCache_GetEntriesByCategory");
static_assert(offsetof(TableCache_GetEntriesByCategory, _item_array) == 0x000000, "Member 'TableCache_GetEntriesByCategory::_item_array' has a wrong offset!");
static_assert(offsetof(TableCache_GetEntriesByCategory, _category) == 0x000010, "Member 'TableCache_GetEntriesByCategory::_category' has a wrong offset!");

// Function Stigma.TableCache.GetEntriesBySubCategory
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetEntriesBySubCategory final
{
public:
	TArray<struct FItemEntry>                     _item_array;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EItemCategory                                 _category;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2469[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _sub_category_type;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEntriesBySubCategory) == 0x000008, "Wrong alignment on TableCache_GetEntriesBySubCategory");
static_assert(sizeof(TableCache_GetEntriesBySubCategory) == 0x000018, "Wrong size on TableCache_GetEntriesBySubCategory");
static_assert(offsetof(TableCache_GetEntriesBySubCategory, _item_array) == 0x000000, "Member 'TableCache_GetEntriesBySubCategory::_item_array' has a wrong offset!");
static_assert(offsetof(TableCache_GetEntriesBySubCategory, _category) == 0x000010, "Member 'TableCache_GetEntriesBySubCategory::_category' has a wrong offset!");
static_assert(offsetof(TableCache_GetEntriesBySubCategory, _sub_category_type) == 0x000014, "Member 'TableCache_GetEntriesBySubCategory::_sub_category_type' has a wrong offset!");

// Function Stigma.TableCache.GetEventAttendanceDefineByID
// 0x0048 (0x0048 - 0x0000)
struct TableCache_GetEventAttendanceDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventAttendanceDefine                 ReturnValue;                                       // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventAttendanceDefineByID) == 0x000008, "Wrong alignment on TableCache_GetEventAttendanceDefineByID");
static_assert(sizeof(TableCache_GetEventAttendanceDefineByID) == 0x000048, "Wrong size on TableCache_GetEventAttendanceDefineByID");
static_assert(offsetof(TableCache_GetEventAttendanceDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventAttendanceDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventAttendanceDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventAttendanceDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventCollectionDefineByID
// 0x0028 (0x0028 - 0x0000)
struct TableCache_GetEventCollectionDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventCollectionDefine                 ReturnValue;                                       // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventCollectionDefineByID) == 0x000008, "Wrong alignment on TableCache_GetEventCollectionDefineByID");
static_assert(sizeof(TableCache_GetEventCollectionDefineByID) == 0x000028, "Wrong size on TableCache_GetEventCollectionDefineByID");
static_assert(offsetof(TableCache_GetEventCollectionDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventCollectionDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventCollectionDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventCollectionDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventKeepConnectDefineByID
// 0x0048 (0x0048 - 0x0000)
struct TableCache_GetEventKeepConnectDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventKeepConnectDefine                ReturnValue;                                       // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventKeepConnectDefineByID) == 0x000008, "Wrong alignment on TableCache_GetEventKeepConnectDefineByID");
static_assert(sizeof(TableCache_GetEventKeepConnectDefineByID) == 0x000048, "Wrong size on TableCache_GetEventKeepConnectDefineByID");
static_assert(offsetof(TableCache_GetEventKeepConnectDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventKeepConnectDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventKeepConnectDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventKeepConnectDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventMasterMissionDefineByID
// 0x0160 (0x0160 - 0x0000)
struct TableCache_GetEventMasterMissionDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventMasterMissionDefine              ReturnValue;                                       // 0x0010(0x0150)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventMasterMissionDefineByID) == 0x000010, "Wrong alignment on TableCache_GetEventMasterMissionDefineByID");
static_assert(sizeof(TableCache_GetEventMasterMissionDefineByID) == 0x000160, "Wrong size on TableCache_GetEventMasterMissionDefineByID");
static_assert(offsetof(TableCache_GetEventMasterMissionDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventMasterMissionDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventMasterMissionDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventMasterMissionDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventMasterMissionDefineByType
// 0x0160 (0x0160 - 0x0000)
struct TableCache_GetEventMasterMissionDefineByType final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246A[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-69 ])
	struct FEventMasterMissionDefine              ReturnValue;                                       // 0x0010(0x0150)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventMasterMissionDefineByType) == 0x000010, "Wrong alignment on TableCache_GetEventMasterMissionDefineByType");
static_assert(sizeof(TableCache_GetEventMasterMissionDefineByType) == 0x000160, "Wrong size on TableCache_GetEventMasterMissionDefineByType");
static_assert(offsetof(TableCache_GetEventMasterMissionDefineByType, _type) == 0x000000, "Member 'TableCache_GetEventMasterMissionDefineByType::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventMasterMissionDefineByType, ReturnValue) == 0x000010, "Member 'TableCache_GetEventMasterMissionDefineByType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventMissionDefineByID
// 0x0038 (0x0038 - 0x0000)
struct TableCache_GetEventMissionDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventMissionDefine                    ReturnValue;                                       // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventMissionDefineByID) == 0x000008, "Wrong alignment on TableCache_GetEventMissionDefineByID");
static_assert(sizeof(TableCache_GetEventMissionDefineByID) == 0x000038, "Wrong size on TableCache_GetEventMissionDefineByID");
static_assert(offsetof(TableCache_GetEventMissionDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventMissionDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventMissionDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventMissionDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventPageDefineByID
// 0x0420 (0x0420 - 0x0000)
struct TableCache_GetEventPageDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventPageDefine                       ReturnValue;                                       // 0x0010(0x0410)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventPageDefineByID) == 0x000010, "Wrong alignment on TableCache_GetEventPageDefineByID");
static_assert(sizeof(TableCache_GetEventPageDefineByID) == 0x000420, "Wrong size on TableCache_GetEventPageDefineByID");
static_assert(offsetof(TableCache_GetEventPageDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventPageDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventPageDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventPageDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetEventTrackMissionDefineByID
// 0x0038 (0x0038 - 0x0000)
struct TableCache_GetEventTrackMissionDefineByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventTrackMissionDefine               ReturnValue;                                       // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetEventTrackMissionDefineByID) == 0x000008, "Wrong alignment on TableCache_GetEventTrackMissionDefineByID");
static_assert(sizeof(TableCache_GetEventTrackMissionDefineByID) == 0x000038, "Wrong size on TableCache_GetEventTrackMissionDefineByID");
static_assert(offsetof(TableCache_GetEventTrackMissionDefineByID, _event_page_id) == 0x000000, "Member 'TableCache_GetEventTrackMissionDefineByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetEventTrackMissionDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetEventTrackMissionDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetExpDefine
// 0x0140 (0x0140 - 0x0000)
struct TableCache_GetExpDefine final
{
public:
	EExpType                                      _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Exp                            ReturnValue;                                       // 0x0008(0x0138)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetExpDefine) == 0x000008, "Wrong alignment on TableCache_GetExpDefine");
static_assert(sizeof(TableCache_GetExpDefine) == 0x000140, "Wrong size on TableCache_GetExpDefine");
static_assert(offsetof(TableCache_GetExpDefine, _type) == 0x000000, "Member 'TableCache_GetExpDefine::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetExpDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetExpDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetFightingStyleDefine
// 0x0080 (0x0080 - 0x0000)
struct TableCache_GetFightingStyleDefine final
{
public:
	EFightingStyle                                _style;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FFightingStyleDefine                   ReturnValue;                                       // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetFightingStyleDefine) == 0x000008, "Wrong alignment on TableCache_GetFightingStyleDefine");
static_assert(sizeof(TableCache_GetFightingStyleDefine) == 0x000080, "Wrong size on TableCache_GetFightingStyleDefine");
static_assert(offsetof(TableCache_GetFightingStyleDefine, _style) == 0x000000, "Member 'TableCache_GetFightingStyleDefine::_style' has a wrong offset!");
static_assert(offsetof(TableCache_GetFightingStyleDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetFightingStyleDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetFightingStyleFromCharaType
// 0x0002 (0x0002 - 0x0000)
struct TableCache_GetFightingStyleFromCharaType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFightingStyle                                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetFightingStyleFromCharaType) == 0x000001, "Wrong alignment on TableCache_GetFightingStyleFromCharaType");
static_assert(sizeof(TableCache_GetFightingStyleFromCharaType) == 0x000002, "Wrong size on TableCache_GetFightingStyleFromCharaType");
static_assert(offsetof(TableCache_GetFightingStyleFromCharaType, _chara_type) == 0x000000, "Member 'TableCache_GetFightingStyleFromCharaType::_chara_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetFightingStyleFromCharaType, ReturnValue) == 0x000001, "Member 'TableCache_GetFightingStyleFromCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetFirstMissionOf
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetFirstMissionOf final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetFirstMissionOf) == 0x000008, "Wrong alignment on TableCache_GetFirstMissionOf");
static_assert(sizeof(TableCache_GetFirstMissionOf) == 0x000018, "Wrong size on TableCache_GetFirstMissionOf");
static_assert(offsetof(TableCache_GetFirstMissionOf, _type) == 0x000000, "Member 'TableCache_GetFirstMissionOf::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetFirstMissionOf, ReturnValue) == 0x000008, "Member 'TableCache_GetFirstMissionOf::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetFunctionDefine
// 0x01B8 (0x01B8 - 0x0000)
struct TableCache_GetFunctionDefine final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Function                       ReturnValue;                                       // 0x0010(0x01A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetFunctionDefine) == 0x000008, "Wrong alignment on TableCache_GetFunctionDefine");
static_assert(sizeof(TableCache_GetFunctionDefine) == 0x0001B8, "Wrong size on TableCache_GetFunctionDefine");
static_assert(offsetof(TableCache_GetFunctionDefine, _id) == 0x000000, "Member 'TableCache_GetFunctionDefine::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetFunctionDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetFunctionDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGameConfig
// 0x0560 (0x0560 - 0x0000)
struct TableCache_GetGameConfig final
{
public:
	struct FConfig_Game                           ReturnValue;                                       // 0x0000(0x0560)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGameConfig) == 0x000008, "Wrong alignment on TableCache_GetGameConfig");
static_assert(sizeof(TableCache_GetGameConfig) == 0x000560, "Wrong size on TableCache_GetGameConfig");
static_assert(offsetof(TableCache_GetGameConfig, ReturnValue) == 0x000000, "Member 'TableCache_GetGameConfig::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGameModeEntry
// 0x0378 (0x0378 - 0x0000)
struct TableCache_GetGameModeEntry final
{
public:
	EGameMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMode                                  ReturnValue;                                       // 0x0008(0x0370)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGameModeEntry) == 0x000008, "Wrong alignment on TableCache_GetGameModeEntry");
static_assert(sizeof(TableCache_GetGameModeEntry) == 0x000378, "Wrong size on TableCache_GetGameModeEntry");
static_assert(offsetof(TableCache_GetGameModeEntry, _mode) == 0x000000, "Member 'TableCache_GetGameModeEntry::_mode' has a wrong offset!");
static_assert(offsetof(TableCache_GetGameModeEntry, ReturnValue) == 0x000008, "Member 'TableCache_GetGameModeEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGameNotify
// 0x0070 (0x0070 - 0x0000)
struct TableCache_GetGameNotify final
{
public:
	class FName                                   _name_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameNotifyDefine                      ReturnValue;                                       // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGameNotify) == 0x000008, "Wrong alignment on TableCache_GetGameNotify");
static_assert(sizeof(TableCache_GetGameNotify) == 0x000070, "Wrong size on TableCache_GetGameNotify");
static_assert(offsetof(TableCache_GetGameNotify, _name_id) == 0x000000, "Member 'TableCache_GetGameNotify::_name_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGameNotify, ReturnValue) == 0x000008, "Member 'TableCache_GetGameNotify::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGearBodyParts
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetGearBodyParts final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetGearBodyParts) == 0x000008, "Wrong alignment on TableCache_GetGearBodyParts");
static_assert(sizeof(TableCache_GetGearBodyParts) == 0x000018, "Wrong size on TableCache_GetGearBodyParts");
static_assert(offsetof(TableCache_GetGearBodyParts, _item_id) == 0x000000, "Member 'TableCache_GetGearBodyParts::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGearBodyParts, ReturnValue) == 0x000010, "Member 'TableCache_GetGearBodyParts::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGearDisplayStats
// 0x0028 (0x0028 - 0x0000)
struct TableCache_GetGearDisplayStats final
{
public:
	TArray<struct FDisplayStat>                   _out_display_stats;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2470[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetGearDisplayStats) == 0x000008, "Wrong alignment on TableCache_GetGearDisplayStats");
static_assert(sizeof(TableCache_GetGearDisplayStats) == 0x000028, "Wrong size on TableCache_GetGearDisplayStats");
static_assert(offsetof(TableCache_GetGearDisplayStats, _out_display_stats) == 0x000000, "Member 'TableCache_GetGearDisplayStats::_out_display_stats' has a wrong offset!");
static_assert(offsetof(TableCache_GetGearDisplayStats, _item_id) == 0x000010, "Member 'TableCache_GetGearDisplayStats::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGearDisplayStats, ReturnValue) == 0x000020, "Member 'TableCache_GetGearDisplayStats::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGoodsDefineByID
// 0x0200 (0x0200 - 0x0000)
struct TableCache_GetGoodsDefineByID final
{
public:
	struct FGoodsID                               _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Goods                          ReturnValue;                                       // 0x0010(0x01F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGoodsDefineByID) == 0x000008, "Wrong alignment on TableCache_GetGoodsDefineByID");
static_assert(sizeof(TableCache_GetGoodsDefineByID) == 0x000200, "Wrong size on TableCache_GetGoodsDefineByID");
static_assert(offsetof(TableCache_GetGoodsDefineByID, _id) == 0x000000, "Member 'TableCache_GetGoodsDefineByID::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGoodsDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetGoodsDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGradeDefine
// 0x0078 (0x0078 - 0x0000)
struct TableCache_GetGradeDefine final
{
public:
	EItemGrade                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2471[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGradeDef                              ReturnValue;                                       // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGradeDefine) == 0x000008, "Wrong alignment on TableCache_GetGradeDefine");
static_assert(sizeof(TableCache_GetGradeDefine) == 0x000078, "Wrong size on TableCache_GetGradeDefine");
static_assert(offsetof(TableCache_GetGradeDefine, _type) == 0x000000, "Member 'TableCache_GetGradeDefine::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetGradeDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetGradeDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunBodyEntry
// 0x0378 (0x0378 - 0x0000)
struct TableCache_GetGunBodyEntry final
{
public:
	struct FItemID_Gun_Body                       _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Body                         ReturnValue;                                       // 0x0010(0x0368)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunBodyEntry) == 0x000008, "Wrong alignment on TableCache_GetGunBodyEntry");
static_assert(sizeof(TableCache_GetGunBodyEntry) == 0x000378, "Wrong size on TableCache_GetGunBodyEntry");
static_assert(offsetof(TableCache_GetGunBodyEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunBodyEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunBodyEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunBodyEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunCharmEntry
// 0x01F0 (0x01F0 - 0x0000)
struct TableCache_GetGunCharmEntry final
{
public:
	struct FItemID_Gun_Charm                      _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Charm                        ReturnValue;                                       // 0x0010(0x01E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunCharmEntry) == 0x000008, "Wrong alignment on TableCache_GetGunCharmEntry");
static_assert(sizeof(TableCache_GetGunCharmEntry) == 0x0001F0, "Wrong size on TableCache_GetGunCharmEntry");
static_assert(offsetof(TableCache_GetGunCharmEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunCharmEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunCharmEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunCharmEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunFrontEntry
// 0x0290 (0x0290 - 0x0000)
struct TableCache_GetGunFrontEntry final
{
public:
	struct FItemID_Gun_Front                      _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Front                        ReturnValue;                                       // 0x0010(0x0280)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunFrontEntry) == 0x000008, "Wrong alignment on TableCache_GetGunFrontEntry");
static_assert(sizeof(TableCache_GetGunFrontEntry) == 0x000290, "Wrong size on TableCache_GetGunFrontEntry");
static_assert(offsetof(TableCache_GetGunFrontEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunFrontEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunFrontEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunFrontEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunLists
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetGunLists final
{
public:
	class UObject*                                _world_ctx;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGunType>                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunLists) == 0x000008, "Wrong alignment on TableCache_GetGunLists");
static_assert(sizeof(TableCache_GetGunLists) == 0x000018, "Wrong size on TableCache_GetGunLists");
static_assert(offsetof(TableCache_GetGunLists, _world_ctx) == 0x000000, "Member 'TableCache_GetGunLists::_world_ctx' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunLists, ReturnValue) == 0x000008, "Member 'TableCache_GetGunLists::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunMagazineEntry
// 0x01F8 (0x01F8 - 0x0000)
struct TableCache_GetGunMagazineEntry final
{
public:
	struct FItemID_Gun_Magazine                   _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Magazine                     ReturnValue;                                       // 0x0010(0x01E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunMagazineEntry) == 0x000008, "Wrong alignment on TableCache_GetGunMagazineEntry");
static_assert(sizeof(TableCache_GetGunMagazineEntry) == 0x0001F8, "Wrong size on TableCache_GetGunMagazineEntry");
static_assert(offsetof(TableCache_GetGunMagazineEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunMagazineEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunMagazineEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunMagazineEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunMainEntry
// 0x0358 (0x0358 - 0x0000)
struct TableCache_GetGunMainEntry final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2472[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunEntry_Main                         ReturnValue;                                       // 0x0008(0x0350)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunMainEntry) == 0x000008, "Wrong alignment on TableCache_GetGunMainEntry");
static_assert(sizeof(TableCache_GetGunMainEntry) == 0x000358, "Wrong size on TableCache_GetGunMainEntry");
static_assert(offsetof(TableCache_GetGunMainEntry, _gun_type) == 0x000000, "Member 'TableCache_GetGunMainEntry::_gun_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunMainEntry, ReturnValue) == 0x000008, "Member 'TableCache_GetGunMainEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunSightEntry
// 0x0290 (0x0290 - 0x0000)
struct TableCache_GetGunSightEntry final
{
public:
	struct FItemID_Gun_Sight                      _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Sight                        ReturnValue;                                       // 0x0010(0x0280)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunSightEntry) == 0x000008, "Wrong alignment on TableCache_GetGunSightEntry");
static_assert(sizeof(TableCache_GetGunSightEntry) == 0x000290, "Wrong size on TableCache_GetGunSightEntry");
static_assert(offsetof(TableCache_GetGunSightEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunSightEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunSightEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunSightEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunSlideEntry
// 0x01F0 (0x01F0 - 0x0000)
struct TableCache_GetGunSlideEntry final
{
public:
	struct FItemID_Gun_Slide                      _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Slide                        ReturnValue;                                       // 0x0010(0x01E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunSlideEntry) == 0x000008, "Wrong alignment on TableCache_GetGunSlideEntry");
static_assert(sizeof(TableCache_GetGunSlideEntry) == 0x0001F0, "Wrong size on TableCache_GetGunSlideEntry");
static_assert(offsetof(TableCache_GetGunSlideEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunSlideEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunSlideEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunSlideEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetGunStickerEntry
// 0x01F0 (0x01F0 - 0x0000)
struct TableCache_GetGunStickerEntry final
{
public:
	struct FItemID_Gun_Sticker                    _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunEntry_Sticker                      ReturnValue;                                       // 0x0010(0x01E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetGunStickerEntry) == 0x000008, "Wrong alignment on TableCache_GetGunStickerEntry");
static_assert(sizeof(TableCache_GetGunStickerEntry) == 0x0001F0, "Wrong size on TableCache_GetGunStickerEntry");
static_assert(offsetof(TableCache_GetGunStickerEntry, _item_id) == 0x000000, "Member 'TableCache_GetGunStickerEntry::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetGunStickerEntry, ReturnValue) == 0x000010, "Member 'TableCache_GetGunStickerEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetHeadDefine
// 0x01E8 (0x01E8 - 0x0000)
struct TableCache_GetHeadDefine final
{
public:
	struct FItemID_Skin_Head                      _head_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartsEntry_Head                       ReturnValue;                                       // 0x0010(0x01D8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetHeadDefine) == 0x000008, "Wrong alignment on TableCache_GetHeadDefine");
static_assert(sizeof(TableCache_GetHeadDefine) == 0x0001E8, "Wrong size on TableCache_GetHeadDefine");
static_assert(offsetof(TableCache_GetHeadDefine, _head_id) == 0x000000, "Member 'TableCache_GetHeadDefine::_head_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetHeadDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetHeadDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetHitEffects
// 0x0120 (0x0120 - 0x0000)
struct TableCache_GetHitEffects final
{
public:
	struct FHitEffect                             _out_hit_effects;                                  // 0x0000(0x0118)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAttackType                                   _attack_type;                                      // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          _surface_material_type;                            // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    _body_parts;                                       // 0x011A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletEffectScaleType                        _effect_type;                                      // 0x011B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x011C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2473[0x3];                                     // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetHitEffects) == 0x000008, "Wrong alignment on TableCache_GetHitEffects");
static_assert(sizeof(TableCache_GetHitEffects) == 0x000120, "Wrong size on TableCache_GetHitEffects");
static_assert(offsetof(TableCache_GetHitEffects, _out_hit_effects) == 0x000000, "Member 'TableCache_GetHitEffects::_out_hit_effects' has a wrong offset!");
static_assert(offsetof(TableCache_GetHitEffects, _attack_type) == 0x000118, "Member 'TableCache_GetHitEffects::_attack_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetHitEffects, _surface_material_type) == 0x000119, "Member 'TableCache_GetHitEffects::_surface_material_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetHitEffects, _body_parts) == 0x00011A, "Member 'TableCache_GetHitEffects::_body_parts' has a wrong offset!");
static_assert(offsetof(TableCache_GetHitEffects, _effect_type) == 0x00011B, "Member 'TableCache_GetHitEffects::_effect_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetHitEffects, ReturnValue) == 0x00011C, "Member 'TableCache_GetHitEffects::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetInputActionDefine
// 0x0058 (0x0058 - 0x0000)
struct TableCache_GetInputActionDefine final
{
public:
	EInputAction                                  _input_action;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2474[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FInputActionDefine                     ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetInputActionDefine) == 0x000008, "Wrong alignment on TableCache_GetInputActionDefine");
static_assert(sizeof(TableCache_GetInputActionDefine) == 0x000058, "Wrong size on TableCache_GetInputActionDefine");
static_assert(offsetof(TableCache_GetInputActionDefine, _input_action) == 0x000000, "Member 'TableCache_GetInputActionDefine::_input_action' has a wrong offset!");
static_assert(offsetof(TableCache_GetInputActionDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetInputActionDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetItemCategoryDefine
// 0x00A8 (0x00A8 - 0x0000)
struct TableCache_GetItemCategoryDefine final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2475[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_ItemCategory                   ReturnValue;                                       // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetItemCategoryDefine) == 0x000008, "Wrong alignment on TableCache_GetItemCategoryDefine");
static_assert(sizeof(TableCache_GetItemCategoryDefine) == 0x0000A8, "Wrong size on TableCache_GetItemCategoryDefine");
static_assert(offsetof(TableCache_GetItemCategoryDefine, _category) == 0x000000, "Member 'TableCache_GetItemCategoryDefine::_category' has a wrong offset!");
static_assert(offsetof(TableCache_GetItemCategoryDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetItemCategoryDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetItemEntriesByFilter
// 0x0028 (0x0028 - 0x0000)
struct TableCache_GetItemEntriesByFilter final
{
public:
	class UObject*                                _world_ctx;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemEntry>                     _out_entries;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FItemFilterInfo                        _filter_info;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2476[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetItemEntriesByFilter) == 0x000008, "Wrong alignment on TableCache_GetItemEntriesByFilter");
static_assert(sizeof(TableCache_GetItemEntriesByFilter) == 0x000028, "Wrong size on TableCache_GetItemEntriesByFilter");
static_assert(offsetof(TableCache_GetItemEntriesByFilter, _world_ctx) == 0x000000, "Member 'TableCache_GetItemEntriesByFilter::_world_ctx' has a wrong offset!");
static_assert(offsetof(TableCache_GetItemEntriesByFilter, _out_entries) == 0x000008, "Member 'TableCache_GetItemEntriesByFilter::_out_entries' has a wrong offset!");
static_assert(offsetof(TableCache_GetItemEntriesByFilter, _filter_info) == 0x000018, "Member 'TableCache_GetItemEntriesByFilter::_filter_info' has a wrong offset!");
static_assert(offsetof(TableCache_GetItemEntriesByFilter, ReturnValue) == 0x000024, "Member 'TableCache_GetItemEntriesByFilter::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetKillStreakDefine
// 0x00E8 (0x00E8 - 0x0000)
struct TableCache_GetKillStreakDefine final
{
public:
	EKillStreak                                   _point;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2477[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKillStreakDefine                      ReturnValue;                                       // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetKillStreakDefine) == 0x000008, "Wrong alignment on TableCache_GetKillStreakDefine");
static_assert(sizeof(TableCache_GetKillStreakDefine) == 0x0000E8, "Wrong size on TableCache_GetKillStreakDefine");
static_assert(offsetof(TableCache_GetKillStreakDefine, _point) == 0x000000, "Member 'TableCache_GetKillStreakDefine::_point' has a wrong offset!");
static_assert(offsetof(TableCache_GetKillStreakDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetKillStreakDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetLevelDefine
// 0x0040 (0x0040 - 0x0000)
struct TableCache_GetLevelDefine final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2478[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLevelEntry                            ReturnValue;                                       // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetLevelDefine) == 0x000008, "Wrong alignment on TableCache_GetLevelDefine");
static_assert(sizeof(TableCache_GetLevelDefine) == 0x000040, "Wrong size on TableCache_GetLevelDefine");
static_assert(offsetof(TableCache_GetLevelDefine, _level) == 0x000000, "Member 'TableCache_GetLevelDefine::_level' has a wrong offset!");
static_assert(offsetof(TableCache_GetLevelDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetLevelDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetLowTierGroupDefine
// 0x00E0 (0x00E0 - 0x0000)
struct TableCache_GetLowTierGroupDefine final
{
public:
	ETierGroup                                    _tier_group;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2479[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Tier                           ReturnValue;                                       // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetLowTierGroupDefine) == 0x000008, "Wrong alignment on TableCache_GetLowTierGroupDefine");
static_assert(sizeof(TableCache_GetLowTierGroupDefine) == 0x0000E0, "Wrong size on TableCache_GetLowTierGroupDefine");
static_assert(offsetof(TableCache_GetLowTierGroupDefine, _tier_group) == 0x000000, "Member 'TableCache_GetLowTierGroupDefine::_tier_group' has a wrong offset!");
static_assert(offsetof(TableCache_GetLowTierGroupDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetLowTierGroupDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMapEntry
// 0x0160 (0x0160 - 0x0000)
struct TableCache_GetMapEntry final
{
public:
	class FName                                   _map_name;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMapEntry                              ReturnValue;                                       // 0x0008(0x0158)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetMapEntry) == 0x000008, "Wrong alignment on TableCache_GetMapEntry");
static_assert(sizeof(TableCache_GetMapEntry) == 0x000160, "Wrong size on TableCache_GetMapEntry");
static_assert(offsetof(TableCache_GetMapEntry, _map_name) == 0x000000, "Member 'TableCache_GetMapEntry::_map_name' has a wrong offset!");
static_assert(offsetof(TableCache_GetMapEntry, ReturnValue) == 0x000008, "Member 'TableCache_GetMapEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMasterLevelConfigsByID
// 0x0068 (0x0068 - 0x0000)
struct TableCache_GetMasterLevelConfigsByID final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FMasterLevelConfig>        _out_configs;                                      // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247A[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetMasterLevelConfigsByID) == 0x000008, "Wrong alignment on TableCache_GetMasterLevelConfigsByID");
static_assert(sizeof(TableCache_GetMasterLevelConfigsByID) == 0x000068, "Wrong size on TableCache_GetMasterLevelConfigsByID");
static_assert(offsetof(TableCache_GetMasterLevelConfigsByID, _event_page_id) == 0x000000, "Member 'TableCache_GetMasterLevelConfigsByID::_event_page_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetMasterLevelConfigsByID, _out_configs) == 0x000010, "Member 'TableCache_GetMasterLevelConfigsByID::_out_configs' has a wrong offset!");
static_assert(offsetof(TableCache_GetMasterLevelConfigsByID, ReturnValue) == 0x000060, "Member 'TableCache_GetMasterLevelConfigsByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMasterLevelConfigsByType
// 0x0060 (0x0060 - 0x0000)
struct TableCache_GetMasterLevelConfigsByType final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<int32, struct FMasterLevelConfig>        _out_configs;                                      // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247C[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetMasterLevelConfigsByType) == 0x000008, "Wrong alignment on TableCache_GetMasterLevelConfigsByType");
static_assert(sizeof(TableCache_GetMasterLevelConfigsByType) == 0x000060, "Wrong size on TableCache_GetMasterLevelConfigsByType");
static_assert(offsetof(TableCache_GetMasterLevelConfigsByType, _type) == 0x000000, "Member 'TableCache_GetMasterLevelConfigsByType::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetMasterLevelConfigsByType, _out_configs) == 0x000008, "Member 'TableCache_GetMasterLevelConfigsByType::_out_configs' has a wrong offset!");
static_assert(offsetof(TableCache_GetMasterLevelConfigsByType, ReturnValue) == 0x000058, "Member 'TableCache_GetMasterLevelConfigsByType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct TableCache_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetMaxLevel) == 0x000004, "Wrong alignment on TableCache_GetMaxLevel");
static_assert(sizeof(TableCache_GetMaxLevel) == 0x000004, "Wrong size on TableCache_GetMaxLevel");
static_assert(offsetof(TableCache_GetMaxLevel, ReturnValue) == 0x000000, "Member 'TableCache_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMeleeAttackPointDefine
// 0x0018 (0x0018 - 0x0000)
struct TableCache_GetMeleeAttackPointDefine final
{
public:
	EMeleeAttackPoint                             _point;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMeleeAttackPointDefine                ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetMeleeAttackPointDefine) == 0x000008, "Wrong alignment on TableCache_GetMeleeAttackPointDefine");
static_assert(sizeof(TableCache_GetMeleeAttackPointDefine) == 0x000018, "Wrong size on TableCache_GetMeleeAttackPointDefine");
static_assert(offsetof(TableCache_GetMeleeAttackPointDefine, _point) == 0x000000, "Member 'TableCache_GetMeleeAttackPointDefine::_point' has a wrong offset!");
static_assert(offsetof(TableCache_GetMeleeAttackPointDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetMeleeAttackPointDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMissionDefineByID
// 0x01B0 (0x01B0 - 0x0000)
struct TableCache_GetMissionDefineByID final
{
public:
	struct FItemID_Mission                        _misison_id;                                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMissionDefine                         ReturnValue;                                       // 0x0010(0x01A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetMissionDefineByID) == 0x000008, "Wrong alignment on TableCache_GetMissionDefineByID");
static_assert(sizeof(TableCache_GetMissionDefineByID) == 0x0001B0, "Wrong size on TableCache_GetMissionDefineByID");
static_assert(offsetof(TableCache_GetMissionDefineByID, _misison_id) == 0x000000, "Member 'TableCache_GetMissionDefineByID::_misison_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetMissionDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetMissionDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetMyColor
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetMyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetMyColor) == 0x000004, "Wrong alignment on TableCache_GetMyColor");
static_assert(sizeof(TableCache_GetMyColor) == 0x000010, "Wrong size on TableCache_GetMyColor");
static_assert(offsetof(TableCache_GetMyColor, ReturnValue) == 0x000000, "Member 'TableCache_GetMyColor::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetNicknameFXDefine
// 0x0480 (0x0480 - 0x0000)
struct TableCache_GetNicknameFXDefine final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_NicknameFX                     ReturnValue;                                       // 0x0010(0x0470)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetNicknameFXDefine) == 0x000010, "Wrong alignment on TableCache_GetNicknameFXDefine");
static_assert(sizeof(TableCache_GetNicknameFXDefine) == 0x000480, "Wrong size on TableCache_GetNicknameFXDefine");
static_assert(offsetof(TableCache_GetNicknameFXDefine, _item_id) == 0x000000, "Member 'TableCache_GetNicknameFXDefine::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetNicknameFXDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetNicknameFXDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetNonItemEntry
// 0x00E0 (0x00E0 - 0x0000)
struct TableCache_GetNonItemEntry final
{
public:
	class FName                                   _name_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNonItemEntry                          _out_non_item_entry;                               // 0x0008(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247E[0x7];                                     // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetNonItemEntry) == 0x000008, "Wrong alignment on TableCache_GetNonItemEntry");
static_assert(sizeof(TableCache_GetNonItemEntry) == 0x0000E0, "Wrong size on TableCache_GetNonItemEntry");
static_assert(offsetof(TableCache_GetNonItemEntry, _name_id) == 0x000000, "Member 'TableCache_GetNonItemEntry::_name_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetNonItemEntry, _out_non_item_entry) == 0x000008, "Member 'TableCache_GetNonItemEntry::_out_non_item_entry' has a wrong offset!");
static_assert(offsetof(TableCache_GetNonItemEntry, ReturnValue) == 0x0000D8, "Member 'TableCache_GetNonItemEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetOrganizationDefine
// 0x0070 (0x0070 - 0x0000)
struct TableCache_GetOrganizationDefine final
{
public:
	EOrganization                                 _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_247F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FOrganizationDefine                    ReturnValue;                                       // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetOrganizationDefine) == 0x000008, "Wrong alignment on TableCache_GetOrganizationDefine");
static_assert(sizeof(TableCache_GetOrganizationDefine) == 0x000070, "Wrong size on TableCache_GetOrganizationDefine");
static_assert(offsetof(TableCache_GetOrganizationDefine, _type) == 0x000000, "Member 'TableCache_GetOrganizationDefine::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetOrganizationDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetOrganizationDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetOrganizationFromCharaType
// 0x0002 (0x0002 - 0x0000)
struct TableCache_GetOrganizationFromCharaType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrganization                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetOrganizationFromCharaType) == 0x000001, "Wrong alignment on TableCache_GetOrganizationFromCharaType");
static_assert(sizeof(TableCache_GetOrganizationFromCharaType) == 0x000002, "Wrong size on TableCache_GetOrganizationFromCharaType");
static_assert(offsetof(TableCache_GetOrganizationFromCharaType, _chara_type) == 0x000000, "Member 'TableCache_GetOrganizationFromCharaType::_chara_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetOrganizationFromCharaType, ReturnValue) == 0x000001, "Member 'TableCache_GetOrganizationFromCharaType::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetPartyColor
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetPartyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetPartyColor) == 0x000004, "Wrong alignment on TableCache_GetPartyColor");
static_assert(sizeof(TableCache_GetPartyColor) == 0x000010, "Wrong size on TableCache_GetPartyColor");
static_assert(offsetof(TableCache_GetPartyColor, ReturnValue) == 0x000000, "Member 'TableCache_GetPartyColor::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetPassiveSkillDefineByID
// 0x01A8 (0x01A8 - 0x0000)
struct TableCache_GetPassiveSkillDefineByID final
{
public:
	struct FPassiveSkillID                        _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPassiveSkillEntry                     ReturnValue;                                       // 0x0010(0x0198)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetPassiveSkillDefineByID) == 0x000008, "Wrong alignment on TableCache_GetPassiveSkillDefineByID");
static_assert(sizeof(TableCache_GetPassiveSkillDefineByID) == 0x0001A8, "Wrong size on TableCache_GetPassiveSkillDefineByID");
static_assert(offsetof(TableCache_GetPassiveSkillDefineByID, _id) == 0x000000, "Member 'TableCache_GetPassiveSkillDefineByID::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetPassiveSkillDefineByID, ReturnValue) == 0x000010, "Member 'TableCache_GetPassiveSkillDefineByID::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetPassiveSkillSlotActivatingLevel
// 0x0008 (0x0008 - 0x0000)
struct TableCache_GetPassiveSkillSlotActivatingLevel final
{
public:
	int32                                         _slot_zidx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetPassiveSkillSlotActivatingLevel) == 0x000004, "Wrong alignment on TableCache_GetPassiveSkillSlotActivatingLevel");
static_assert(sizeof(TableCache_GetPassiveSkillSlotActivatingLevel) == 0x000008, "Wrong size on TableCache_GetPassiveSkillSlotActivatingLevel");
static_assert(offsetof(TableCache_GetPassiveSkillSlotActivatingLevel, _slot_zidx) == 0x000000, "Member 'TableCache_GetPassiveSkillSlotActivatingLevel::_slot_zidx' has a wrong offset!");
static_assert(offsetof(TableCache_GetPassiveSkillSlotActivatingLevel, ReturnValue) == 0x000004, "Member 'TableCache_GetPassiveSkillSlotActivatingLevel::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetPingDefine
// 0x00C0 (0x00C0 - 0x0000)
struct TableCache_GetPingDefine final
{
public:
	EBattlePingType                               _ping_type;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2480[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Ping                           ReturnValue;                                       // 0x0008(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetPingDefine) == 0x000008, "Wrong alignment on TableCache_GetPingDefine");
static_assert(sizeof(TableCache_GetPingDefine) == 0x0000C0, "Wrong size on TableCache_GetPingDefine");
static_assert(offsetof(TableCache_GetPingDefine, _ping_type) == 0x000000, "Member 'TableCache_GetPingDefine::_ping_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetPingDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetPingDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetProfileCardDefine
// 0x0148 (0x0148 - 0x0000)
struct TableCache_GetProfileCardDefine final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_ProfileCard                    ReturnValue;                                       // 0x0010(0x0138)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetProfileCardDefine) == 0x000008, "Wrong alignment on TableCache_GetProfileCardDefine");
static_assert(sizeof(TableCache_GetProfileCardDefine) == 0x000148, "Wrong size on TableCache_GetProfileCardDefine");
static_assert(offsetof(TableCache_GetProfileCardDefine, _item_id) == 0x000000, "Member 'TableCache_GetProfileCardDefine::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetProfileCardDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetProfileCardDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetRadioChatDefine
// 0x0090 (0x0090 - 0x0000)
struct TableCache_GetRadioChatDefine final
{
public:
	ERadioChatCategory                            _category;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2481[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _order;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_RadioChat                      ReturnValue;                                       // 0x0008(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetRadioChatDefine) == 0x000008, "Wrong alignment on TableCache_GetRadioChatDefine");
static_assert(sizeof(TableCache_GetRadioChatDefine) == 0x000090, "Wrong size on TableCache_GetRadioChatDefine");
static_assert(offsetof(TableCache_GetRadioChatDefine, _category) == 0x000000, "Member 'TableCache_GetRadioChatDefine::_category' has a wrong offset!");
static_assert(offsetof(TableCache_GetRadioChatDefine, _order) == 0x000004, "Member 'TableCache_GetRadioChatDefine::_order' has a wrong offset!");
static_assert(offsetof(TableCache_GetRadioChatDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetRadioChatDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetRandomBoxDefine
// 0x0190 (0x0190 - 0x0000)
struct TableCache_GetRandomBoxDefine final
{
public:
	struct FItemID_RandomBox                      _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_RandomBox                      ReturnValue;                                       // 0x0010(0x0180)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetRandomBoxDefine) == 0x000008, "Wrong alignment on TableCache_GetRandomBoxDefine");
static_assert(sizeof(TableCache_GetRandomBoxDefine) == 0x000190, "Wrong size on TableCache_GetRandomBoxDefine");
static_assert(offsetof(TableCache_GetRandomBoxDefine, _id) == 0x000000, "Member 'TableCache_GetRandomBoxDefine::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetRandomBoxDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetRandomBoxDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetRandomBoxRewards
// 0x0038 (0x0038 - 0x0000)
struct TableCache_GetRandomBoxRewards final
{
public:
	struct FItemID_RandomBox                      _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRandomItemEntry>               _out_confirmed;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRandomItemEntry>               _out_probabilitics;                                // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2482[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_GetRandomBoxRewards) == 0x000008, "Wrong alignment on TableCache_GetRandomBoxRewards");
static_assert(sizeof(TableCache_GetRandomBoxRewards) == 0x000038, "Wrong size on TableCache_GetRandomBoxRewards");
static_assert(offsetof(TableCache_GetRandomBoxRewards, _id) == 0x000000, "Member 'TableCache_GetRandomBoxRewards::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetRandomBoxRewards, _out_confirmed) == 0x000010, "Member 'TableCache_GetRandomBoxRewards::_out_confirmed' has a wrong offset!");
static_assert(offsetof(TableCache_GetRandomBoxRewards, _out_probabilitics) == 0x000020, "Member 'TableCache_GetRandomBoxRewards::_out_probabilitics' has a wrong offset!");
static_assert(offsetof(TableCache_GetRandomBoxRewards, ReturnValue) == 0x000030, "Member 'TableCache_GetRandomBoxRewards::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetRecruitDefine
// 0x01B8 (0x01B8 - 0x0000)
struct TableCache_GetRecruitDefine final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRecruitDefine                         ReturnValue;                                       // 0x0010(0x01A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetRecruitDefine) == 0x000008, "Wrong alignment on TableCache_GetRecruitDefine");
static_assert(sizeof(TableCache_GetRecruitDefine) == 0x0001B8, "Wrong size on TableCache_GetRecruitDefine");
static_assert(offsetof(TableCache_GetRecruitDefine, _item_id) == 0x000000, "Member 'TableCache_GetRecruitDefine::_item_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetRecruitDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetRecruitDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetRegion
// 0x0050 (0x0050 - 0x0000)
struct TableCache_GetRegion final
{
public:
	class FString                                 _code;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Region                         ReturnValue;                                       // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetRegion) == 0x000008, "Wrong alignment on TableCache_GetRegion");
static_assert(sizeof(TableCache_GetRegion) == 0x000050, "Wrong size on TableCache_GetRegion");
static_assert(offsetof(TableCache_GetRegion, _code) == 0x000000, "Member 'TableCache_GetRegion::_code' has a wrong offset!");
static_assert(offsetof(TableCache_GetRegion, ReturnValue) == 0x000010, "Member 'TableCache_GetRegion::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetSeasonDefine
// 0x00B0 (0x00B0 - 0x0000)
struct TableCache_GetSeasonDefine final
{
public:
	struct FSeasonID                              _season_id;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2483[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Season                         ReturnValue;                                       // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetSeasonDefine) == 0x000008, "Wrong alignment on TableCache_GetSeasonDefine");
static_assert(sizeof(TableCache_GetSeasonDefine) == 0x0000B0, "Wrong size on TableCache_GetSeasonDefine");
static_assert(offsetof(TableCache_GetSeasonDefine, _season_id) == 0x000000, "Member 'TableCache_GetSeasonDefine::_season_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetSeasonDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetSeasonDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetSeasonRewardByTier
// 0x0020 (0x0020 - 0x0000)
struct TableCache_GetSeasonRewardByTier final
{
public:
	struct FSeasonID                              _season_id;                                        // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         _tier;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2484[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSeasonReward                          ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetSeasonRewardByTier) == 0x000008, "Wrong alignment on TableCache_GetSeasonRewardByTier");
static_assert(sizeof(TableCache_GetSeasonRewardByTier) == 0x000020, "Wrong size on TableCache_GetSeasonRewardByTier");
static_assert(offsetof(TableCache_GetSeasonRewardByTier, _season_id) == 0x000000, "Member 'TableCache_GetSeasonRewardByTier::_season_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetSeasonRewardByTier, _tier) == 0x000004, "Member 'TableCache_GetSeasonRewardByTier::_tier' has a wrong offset!");
static_assert(offsetof(TableCache_GetSeasonRewardByTier, ReturnValue) == 0x000008, "Member 'TableCache_GetSeasonRewardByTier::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetServiceConfig
// 0x0038 (0x0038 - 0x0000)
struct TableCache_GetServiceConfig final
{
public:
	ERunEnv                                       _run_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2485[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FServiceDefine                         ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetServiceConfig) == 0x000008, "Wrong alignment on TableCache_GetServiceConfig");
static_assert(sizeof(TableCache_GetServiceConfig) == 0x000038, "Wrong size on TableCache_GetServiceConfig");
static_assert(offsetof(TableCache_GetServiceConfig, _run_type) == 0x000000, "Member 'TableCache_GetServiceConfig::_run_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetServiceConfig, ReturnValue) == 0x000008, "Member 'TableCache_GetServiceConfig::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetStackItemDefine
// 0x0158 (0x0158 - 0x0000)
struct TableCache_GetStackItemDefine final
{
public:
	struct FItemID_Stack                          _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Stack                          ReturnValue;                                       // 0x0010(0x0148)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetStackItemDefine) == 0x000008, "Wrong alignment on TableCache_GetStackItemDefine");
static_assert(sizeof(TableCache_GetStackItemDefine) == 0x000158, "Wrong size on TableCache_GetStackItemDefine");
static_assert(offsetof(TableCache_GetStackItemDefine, _id) == 0x000000, "Member 'TableCache_GetStackItemDefine::_id' has a wrong offset!");
static_assert(offsetof(TableCache_GetStackItemDefine, ReturnValue) == 0x000010, "Member 'TableCache_GetStackItemDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetTeamColor
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetTeamColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetTeamColor) == 0x000004, "Wrong alignment on TableCache_GetTeamColor");
static_assert(sizeof(TableCache_GetTeamColor) == 0x000010, "Wrong size on TableCache_GetTeamColor");
static_assert(offsetof(TableCache_GetTeamColor, ReturnValue) == 0x000000, "Member 'TableCache_GetTeamColor::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetTeamDefine
// 0x0030 (0x0030 - 0x0000)
struct TableCache_GetTeamDefine final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2486[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTeamDef                               ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetTeamDefine) == 0x000008, "Wrong alignment on TableCache_GetTeamDefine");
static_assert(sizeof(TableCache_GetTeamDefine) == 0x000030, "Wrong size on TableCache_GetTeamDefine");
static_assert(offsetof(TableCache_GetTeamDefine, _Team) == 0x000000, "Member 'TableCache_GetTeamDefine::_Team' has a wrong offset!");
static_assert(offsetof(TableCache_GetTeamDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetTeamDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetTierDefine
// 0x00E0 (0x00E0 - 0x0000)
struct TableCache_GetTierDefine final
{
public:
	ETier                                         _tier;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2487[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Tier                           ReturnValue;                                       // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetTierDefine) == 0x000008, "Wrong alignment on TableCache_GetTierDefine");
static_assert(sizeof(TableCache_GetTierDefine) == 0x0000E0, "Wrong size on TableCache_GetTierDefine");
static_assert(offsetof(TableCache_GetTierDefine, _tier) == 0x000000, "Member 'TableCache_GetTierDefine::_tier' has a wrong offset!");
static_assert(offsetof(TableCache_GetTierDefine, ReturnValue) == 0x000008, "Member 'TableCache_GetTierDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.GetTooltipWidgetClass
// 0x0010 (0x0010 - 0x0000)
struct TableCache_GetTooltipWidgetClass final
{
public:
	ETooltipType                                  _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2488[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UUI_Tooltip>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_GetTooltipWidgetClass) == 0x000008, "Wrong alignment on TableCache_GetTooltipWidgetClass");
static_assert(sizeof(TableCache_GetTooltipWidgetClass) == 0x000010, "Wrong size on TableCache_GetTooltipWidgetClass");
static_assert(offsetof(TableCache_GetTooltipWidgetClass, _type) == 0x000000, "Member 'TableCache_GetTooltipWidgetClass::_type' has a wrong offset!");
static_assert(offsetof(TableCache_GetTooltipWidgetClass, ReturnValue) == 0x000008, "Member 'TableCache_GetTooltipWidgetClass::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.IsMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct TableCache_IsMaxLevel final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2489[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableCache_IsMaxLevel) == 0x000004, "Wrong alignment on TableCache_IsMaxLevel");
static_assert(sizeof(TableCache_IsMaxLevel) == 0x000008, "Wrong size on TableCache_IsMaxLevel");
static_assert(offsetof(TableCache_IsMaxLevel, _level) == 0x000000, "Member 'TableCache_IsMaxLevel::_level' has a wrong offset!");
static_assert(offsetof(TableCache_IsMaxLevel, ReturnValue) == 0x000004, "Member 'TableCache_IsMaxLevel::ReturnValue' has a wrong offset!");

// Function Stigma.TableCache.SetGameConfig_FOV
// 0x0004 (0x0004 - 0x0000)
struct TableCache_SetGameConfig_FOV final
{
public:
	float                                         _FOV;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_SetGameConfig_FOV) == 0x000004, "Wrong alignment on TableCache_SetGameConfig_FOV");
static_assert(sizeof(TableCache_SetGameConfig_FOV) == 0x000004, "Wrong size on TableCache_SetGameConfig_FOV");
static_assert(offsetof(TableCache_SetGameConfig_FOV, _FOV) == 0x000000, "Member 'TableCache_SetGameConfig_FOV::_FOV' has a wrong offset!");

// Function Stigma.TableCache.SetGunFOV
// 0x0008 (0x0008 - 0x0000)
struct TableCache_SetGunFOV final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _FOV;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableCache_SetGunFOV) == 0x000004, "Wrong alignment on TableCache_SetGunFOV");
static_assert(sizeof(TableCache_SetGunFOV) == 0x000008, "Wrong size on TableCache_SetGunFOV");
static_assert(offsetof(TableCache_SetGunFOV, _gun_type) == 0x000000, "Member 'TableCache_SetGunFOV::_gun_type' has a wrong offset!");
static_assert(offsetof(TableCache_SetGunFOV, _FOV) == 0x000004, "Member 'TableCache_SetGunFOV::_FOV' has a wrong offset!");

// Function Stigma.TableEntryBlueprintLibrary.FindGunMainEntry
// 0x0358 (0x0358 - 0x0000)
struct TableEntryBlueprintLibrary_FindGunMainEntry final
{
public:
	struct FGunEntry_Main                         _out_config;                                       // 0x0000(0x0350)(Parm, OutParm, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0350(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0351(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248B[0x6];                                     // 0x0352(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableEntryBlueprintLibrary_FindGunMainEntry) == 0x000008, "Wrong alignment on TableEntryBlueprintLibrary_FindGunMainEntry");
static_assert(sizeof(TableEntryBlueprintLibrary_FindGunMainEntry) == 0x000358, "Wrong size on TableEntryBlueprintLibrary_FindGunMainEntry");
static_assert(offsetof(TableEntryBlueprintLibrary_FindGunMainEntry, _out_config) == 0x000000, "Member 'TableEntryBlueprintLibrary_FindGunMainEntry::_out_config' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_FindGunMainEntry, _gun_type) == 0x000350, "Member 'TableEntryBlueprintLibrary_FindGunMainEntry::_gun_type' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_FindGunMainEntry, ReturnValue) == 0x000351, "Member 'TableEntryBlueprintLibrary_FindGunMainEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TableEntryBlueprintLibrary.FindItemIconByItemID
// 0x0020 (0x0020 - 0x0000)
struct TableEntryBlueprintLibrary_FindItemIconByItemID final
{
public:
	class UTexture2D*                             Out_texture;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _id;                                               // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableEntryBlueprintLibrary_FindItemIconByItemID) == 0x000008, "Wrong alignment on TableEntryBlueprintLibrary_FindItemIconByItemID");
static_assert(sizeof(TableEntryBlueprintLibrary_FindItemIconByItemID) == 0x000020, "Wrong size on TableEntryBlueprintLibrary_FindItemIconByItemID");
static_assert(offsetof(TableEntryBlueprintLibrary_FindItemIconByItemID, Out_texture) == 0x000000, "Member 'TableEntryBlueprintLibrary_FindItemIconByItemID::Out_texture' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_FindItemIconByItemID, _id) == 0x000008, "Member 'TableEntryBlueprintLibrary_FindItemIconByItemID::_id' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_FindItemIconByItemID, ReturnValue) == 0x000018, "Member 'TableEntryBlueprintLibrary_FindItemIconByItemID::ReturnValue' has a wrong offset!");

// Function Stigma.TableEntryBlueprintLibrary.GetDisplayNameByItemID
// 0x0030 (0x0030 - 0x0000)
struct TableEntryBlueprintLibrary_GetDisplayNameByItemID final
{
public:
	class FText                                   Out_name;                                          // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FItemID                                _id;                                               // 0x0018(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248D[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(TableEntryBlueprintLibrary_GetDisplayNameByItemID) == 0x000008, "Wrong alignment on TableEntryBlueprintLibrary_GetDisplayNameByItemID");
static_assert(sizeof(TableEntryBlueprintLibrary_GetDisplayNameByItemID) == 0x000030, "Wrong size on TableEntryBlueprintLibrary_GetDisplayNameByItemID");
static_assert(offsetof(TableEntryBlueprintLibrary_GetDisplayNameByItemID, Out_name) == 0x000000, "Member 'TableEntryBlueprintLibrary_GetDisplayNameByItemID::Out_name' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_GetDisplayNameByItemID, _id) == 0x000018, "Member 'TableEntryBlueprintLibrary_GetDisplayNameByItemID::_id' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_GetDisplayNameByItemID, ReturnValue) == 0x000028, "Member 'TableEntryBlueprintLibrary_GetDisplayNameByItemID::ReturnValue' has a wrong offset!");

// Function Stigma.TableEntryBlueprintLibrary.GetItemEntry
// 0x0140 (0x0140 - 0x0000)
struct TableEntryBlueprintLibrary_GetItemEntry final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemEntry                             ReturnValue;                                       // 0x0010(0x0130)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TableEntryBlueprintLibrary_GetItemEntry) == 0x000008, "Wrong alignment on TableEntryBlueprintLibrary_GetItemEntry");
static_assert(sizeof(TableEntryBlueprintLibrary_GetItemEntry) == 0x000140, "Wrong size on TableEntryBlueprintLibrary_GetItemEntry");
static_assert(offsetof(TableEntryBlueprintLibrary_GetItemEntry, _id) == 0x000000, "Member 'TableEntryBlueprintLibrary_GetItemEntry::_id' has a wrong offset!");
static_assert(offsetof(TableEntryBlueprintLibrary_GetItemEntry, ReturnValue) == 0x000010, "Member 'TableEntryBlueprintLibrary_GetItemEntry::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_GameState.SetCurrentPhase
// 0x0004 (0x0004 - 0x0000)
struct TDM_GameState_SetCurrentPhase final
{
public:
	int32                                         _phase;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_SetCurrentPhase) == 0x000004, "Wrong alignment on TDM_GameState_SetCurrentPhase");
static_assert(sizeof(TDM_GameState_SetCurrentPhase) == 0x000004, "Wrong size on TDM_GameState_SetCurrentPhase");
static_assert(offsetof(TDM_GameState_SetCurrentPhase, _phase) == 0x000000, "Member 'TDM_GameState_SetCurrentPhase::_phase' has a wrong offset!");

// Function Stigma.TDM_GameState.GetCurrentTDMPhase
// 0x0001 (0x0001 - 0x0000)
struct TDM_GameState_GetCurrentTDMPhase final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_GetCurrentTDMPhase) == 0x000001, "Wrong alignment on TDM_GameState_GetCurrentTDMPhase");
static_assert(sizeof(TDM_GameState_GetCurrentTDMPhase) == 0x000001, "Wrong size on TDM_GameState_GetCurrentTDMPhase");
static_assert(offsetof(TDM_GameState_GetCurrentTDMPhase, ReturnValue) == 0x000000, "Member 'TDM_GameState_GetCurrentTDMPhase::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_GameState.GetCurrentTDMPhaseDefine
// 0x0040 (0x0040 - 0x0000)
struct TDM_GameState_GetCurrentTDMPhaseDefine final
{
public:
	struct FTDMPhaseDefine                        ReturnValue;                                       // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_GetCurrentTDMPhaseDefine) == 0x000008, "Wrong alignment on TDM_GameState_GetCurrentTDMPhaseDefine");
static_assert(sizeof(TDM_GameState_GetCurrentTDMPhaseDefine) == 0x000040, "Wrong size on TDM_GameState_GetCurrentTDMPhaseDefine");
static_assert(offsetof(TDM_GameState_GetCurrentTDMPhaseDefine, ReturnValue) == 0x000000, "Member 'TDM_GameState_GetCurrentTDMPhaseDefine::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_GameState.GetGoldRule
// 0x0014 (0x0014 - 0x0000)
struct TDM_GameState_GetGoldRule final
{
public:
	struct FTDM_GoldRule                          ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_GetGoldRule) == 0x000004, "Wrong alignment on TDM_GameState_GetGoldRule");
static_assert(sizeof(TDM_GameState_GetGoldRule) == 0x000014, "Wrong size on TDM_GameState_GetGoldRule");
static_assert(offsetof(TDM_GameState_GetGoldRule, ReturnValue) == 0x000000, "Member 'TDM_GameState_GetGoldRule::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_GameState.GetTargetKillCount
// 0x0004 (0x0004 - 0x0000)
struct TDM_GameState_GetTargetKillCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_GetTargetKillCount) == 0x000004, "Wrong alignment on TDM_GameState_GetTargetKillCount");
static_assert(sizeof(TDM_GameState_GetTargetKillCount) == 0x000004, "Wrong size on TDM_GameState_GetTargetKillCount");
static_assert(offsetof(TDM_GameState_GetTargetKillCount, ReturnValue) == 0x000000, "Member 'TDM_GameState_GetTargetKillCount::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_GameState.GetTDMRule
// 0x0028 (0x0028 - 0x0000)
struct TDM_GameState_GetTDMRule final
{
public:
	struct FTDMRule                               ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_GetTDMRule) == 0x000008, "Wrong alignment on TDM_GameState_GetTDMRule");
static_assert(sizeof(TDM_GameState_GetTDMRule) == 0x000028, "Wrong size on TDM_GameState_GetTDMRule");
static_assert(offsetof(TDM_GameState_GetTDMRule, ReturnValue) == 0x000000, "Member 'TDM_GameState_GetTDMRule::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_GameState.GetTeamRemainKillCount
// 0x0008 (0x0008 - 0x0000)
struct TDM_GameState_GetTeamRemainKillCount final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2492[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_GameState_GetTeamRemainKillCount) == 0x000004, "Wrong alignment on TDM_GameState_GetTeamRemainKillCount");
static_assert(sizeof(TDM_GameState_GetTeamRemainKillCount) == 0x000008, "Wrong size on TDM_GameState_GetTeamRemainKillCount");
static_assert(offsetof(TDM_GameState_GetTeamRemainKillCount, _Team) == 0x000000, "Member 'TDM_GameState_GetTeamRemainKillCount::_Team' has a wrong offset!");
static_assert(offsetof(TDM_GameState_GetTeamRemainKillCount, ReturnValue) == 0x000004, "Member 'TDM_GameState_GetTeamRemainKillCount::ReturnValue' has a wrong offset!");

// Function Stigma.TDM_PlayerController.GetEnemyTeam
// 0x0001 (0x0001 - 0x0000)
struct TDM_PlayerController_GetEnemyTeam final
{
public:
	ETeams                                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDM_PlayerController_GetEnemyTeam) == 0x000001, "Wrong alignment on TDM_PlayerController_GetEnemyTeam");
static_assert(sizeof(TDM_PlayerController_GetEnemyTeam) == 0x000001, "Wrong size on TDM_PlayerController_GetEnemyTeam");
static_assert(offsetof(TDM_PlayerController_GetEnemyTeam, ReturnValue) == 0x000000, "Member 'TDM_PlayerController_GetEnemyTeam::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.AddDefaultAutoSystemChat
// 0x0010 (0x0010 - 0x0000)
struct Tools_AddDefaultAutoSystemChat final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2498[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_AddDefaultAutoSystemChat) == 0x000008, "Wrong alignment on Tools_AddDefaultAutoSystemChat");
static_assert(sizeof(Tools_AddDefaultAutoSystemChat) == 0x000010, "Wrong size on Tools_AddDefaultAutoSystemChat");
static_assert(offsetof(Tools_AddDefaultAutoSystemChat, _world_ctx) == 0x000000, "Member 'Tools_AddDefaultAutoSystemChat::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_AddDefaultAutoSystemChat, ReturnValue) == 0x000008, "Member 'Tools_AddDefaultAutoSystemChat::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.AddGameNotify
// 0x0030 (0x0030 - 0x0000)
struct Tools_AddGameNotify final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _notify_name;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         _overlap_life_time;                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2499[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_AddGameNotify) == 0x000008, "Wrong alignment on Tools_AddGameNotify");
static_assert(sizeof(Tools_AddGameNotify) == 0x000030, "Wrong size on Tools_AddGameNotify");
static_assert(offsetof(Tools_AddGameNotify, _world_ctx) == 0x000000, "Member 'Tools_AddGameNotify::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_AddGameNotify, _notify_name) == 0x000008, "Member 'Tools_AddGameNotify::_notify_name' has a wrong offset!");
static_assert(offsetof(Tools_AddGameNotify, _text) == 0x000010, "Member 'Tools_AddGameNotify::_text' has a wrong offset!");
static_assert(offsetof(Tools_AddGameNotify, _overlap_life_time) == 0x000028, "Member 'Tools_AddGameNotify::_overlap_life_time' has a wrong offset!");

// Function Stigma.Tools.AddSystemChat
// 0x0028 (0x0028 - 0x0000)
struct Tools_AddSystemChat final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _context;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_AddSystemChat) == 0x000008, "Wrong alignment on Tools_AddSystemChat");
static_assert(sizeof(Tools_AddSystemChat) == 0x000028, "Wrong size on Tools_AddSystemChat");
static_assert(offsetof(Tools_AddSystemChat, _world_ctx) == 0x000000, "Member 'Tools_AddSystemChat::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_AddSystemChat, _context) == 0x000008, "Member 'Tools_AddSystemChat::_context' has a wrong offset!");
static_assert(offsetof(Tools_AddSystemChat, ReturnValue) == 0x000020, "Member 'Tools_AddSystemChat::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.AddSystemChatWithColor
// 0x0038 (0x0038 - 0x0000)
struct Tools_AddSystemChatWithColor final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _context;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           _color;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249B[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_AddSystemChatWithColor) == 0x000008, "Wrong alignment on Tools_AddSystemChatWithColor");
static_assert(sizeof(Tools_AddSystemChatWithColor) == 0x000038, "Wrong size on Tools_AddSystemChatWithColor");
static_assert(offsetof(Tools_AddSystemChatWithColor, _world_ctx) == 0x000000, "Member 'Tools_AddSystemChatWithColor::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_AddSystemChatWithColor, _context) == 0x000008, "Member 'Tools_AddSystemChatWithColor::_context' has a wrong offset!");
static_assert(offsetof(Tools_AddSystemChatWithColor, _color) == 0x000020, "Member 'Tools_AddSystemChatWithColor::_color' has a wrong offset!");
static_assert(offsetof(Tools_AddSystemChatWithColor, ReturnValue) == 0x000030, "Member 'Tools_AddSystemChatWithColor::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.AddToastMessage
// 0x0020 (0x0020 - 0x0000)
struct Tools_AddToastMessage final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _msg;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_urgent;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249C[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_AddToastMessage) == 0x000008, "Wrong alignment on Tools_AddToastMessage");
static_assert(sizeof(Tools_AddToastMessage) == 0x000020, "Wrong size on Tools_AddToastMessage");
static_assert(offsetof(Tools_AddToastMessage, _world_ctx) == 0x000000, "Member 'Tools_AddToastMessage::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_AddToastMessage, _msg) == 0x000008, "Member 'Tools_AddToastMessage::_msg' has a wrong offset!");
static_assert(offsetof(Tools_AddToastMessage, _is_urgent) == 0x000018, "Member 'Tools_AddToastMessage::_is_urgent' has a wrong offset!");
static_assert(offsetof(Tools_AddToastMessage, ReturnValue) == 0x000019, "Member 'Tools_AddToastMessage::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.AddWidgetAsHUD
// 0x0010 (0x0010 - 0x0000)
struct Tools_AddWidgetAsHUD final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                _widget;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_AddWidgetAsHUD) == 0x000008, "Wrong alignment on Tools_AddWidgetAsHUD");
static_assert(sizeof(Tools_AddWidgetAsHUD) == 0x000010, "Wrong size on Tools_AddWidgetAsHUD");
static_assert(offsetof(Tools_AddWidgetAsHUD, _world_ctx) == 0x000000, "Member 'Tools_AddWidgetAsHUD::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_AddWidgetAsHUD, _widget) == 0x000008, "Member 'Tools_AddWidgetAsHUD::_widget' has a wrong offset!");

// Function Stigma.Tools.AreYouSureToExitGame
// 0x0008 (0x0008 - 0x0000)
struct Tools_AreYouSureToExitGame final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_AreYouSureToExitGame) == 0x000008, "Wrong alignment on Tools_AreYouSureToExitGame");
static_assert(sizeof(Tools_AreYouSureToExitGame) == 0x000008, "Wrong size on Tools_AreYouSureToExitGame");
static_assert(offsetof(Tools_AreYouSureToExitGame, _world_ctx) == 0x000000, "Member 'Tools_AreYouSureToExitGame::_world_ctx' has a wrong offset!");

// Function Stigma.Tools.BuffValueToText
// 0x0040 (0x0040 - 0x0000)
struct Tools_BuffValueToText final
{
public:
	EBuffValueDisplayType                         _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _prev_prefix_text;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _value;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_positive_beneficial;                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249E[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _additional_value;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_BuffValueToText) == 0x000008, "Wrong alignment on Tools_BuffValueToText");
static_assert(sizeof(Tools_BuffValueToText) == 0x000040, "Wrong size on Tools_BuffValueToText");
static_assert(offsetof(Tools_BuffValueToText, _type) == 0x000000, "Member 'Tools_BuffValueToText::_type' has a wrong offset!");
static_assert(offsetof(Tools_BuffValueToText, _prev_prefix_text) == 0x000008, "Member 'Tools_BuffValueToText::_prev_prefix_text' has a wrong offset!");
static_assert(offsetof(Tools_BuffValueToText, _value) == 0x000018, "Member 'Tools_BuffValueToText::_value' has a wrong offset!");
static_assert(offsetof(Tools_BuffValueToText, _is_positive_beneficial) == 0x00001C, "Member 'Tools_BuffValueToText::_is_positive_beneficial' has a wrong offset!");
static_assert(offsetof(Tools_BuffValueToText, _additional_value) == 0x000020, "Member 'Tools_BuffValueToText::_additional_value' has a wrong offset!");
static_assert(offsetof(Tools_BuffValueToText, ReturnValue) == 0x000028, "Member 'Tools_BuffValueToText::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CalcPassiveSkillEffectValue
// 0x0020 (0x0020 - 0x0000)
struct Tools_CalcPassiveSkillEffectValue final
{
public:
	struct FItemID                                _passive_id;                                       // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffEffectType                               _effect_type;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A0[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CalcPassiveSkillEffectValue) == 0x000008, "Wrong alignment on Tools_CalcPassiveSkillEffectValue");
static_assert(sizeof(Tools_CalcPassiveSkillEffectValue) == 0x000020, "Wrong size on Tools_CalcPassiveSkillEffectValue");
static_assert(offsetof(Tools_CalcPassiveSkillEffectValue, _passive_id) == 0x000000, "Member 'Tools_CalcPassiveSkillEffectValue::_passive_id' has a wrong offset!");
static_assert(offsetof(Tools_CalcPassiveSkillEffectValue, _level) == 0x000010, "Member 'Tools_CalcPassiveSkillEffectValue::_level' has a wrong offset!");
static_assert(offsetof(Tools_CalcPassiveSkillEffectValue, _effect_type) == 0x000014, "Member 'Tools_CalcPassiveSkillEffectValue::_effect_type' has a wrong offset!");
static_assert(offsetof(Tools_CalcPassiveSkillEffectValue, ReturnValue) == 0x000018, "Member 'Tools_CalcPassiveSkillEffectValue::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CanIRequestMatchMaking
// 0x0010 (0x0010 - 0x0000)
struct Tools_CanIRequestMatchMaking final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CanIRequestMatchMaking) == 0x000008, "Wrong alignment on Tools_CanIRequestMatchMaking");
static_assert(sizeof(Tools_CanIRequestMatchMaking) == 0x000010, "Wrong size on Tools_CanIRequestMatchMaking");
static_assert(offsetof(Tools_CanIRequestMatchMaking, _world_ctx) == 0x000000, "Member 'Tools_CanIRequestMatchMaking::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CanIRequestMatchMaking, ReturnValue) == 0x000008, "Member 'Tools_CanIRequestMatchMaking::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CanUseMinimap
// 0x0010 (0x0010 - 0x0000)
struct Tools_CanUseMinimap final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CanUseMinimap) == 0x000008, "Wrong alignment on Tools_CanUseMinimap");
static_assert(sizeof(Tools_CanUseMinimap) == 0x000010, "Wrong size on Tools_CanUseMinimap");
static_assert(offsetof(Tools_CanUseMinimap, _world_ctx) == 0x000000, "Member 'Tools_CanUseMinimap::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CanUseMinimap, ReturnValue) == 0x000008, "Member 'Tools_CanUseMinimap::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.ChangeMinimapSpot
// 0x0018 (0x0018 - 0x0000)
struct Tools_ChangeMinimapSpot final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMinimap*                               _Minimap;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_ChangeMinimapSpot) == 0x000008, "Wrong alignment on Tools_ChangeMinimapSpot");
static_assert(sizeof(Tools_ChangeMinimapSpot) == 0x000018, "Wrong size on Tools_ChangeMinimapSpot");
static_assert(offsetof(Tools_ChangeMinimapSpot, _world_ctx) == 0x000000, "Member 'Tools_ChangeMinimapSpot::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ChangeMinimapSpot, _Minimap) == 0x000008, "Member 'Tools_ChangeMinimapSpot::_Minimap' has a wrong offset!");
static_assert(offsetof(Tools_ChangeMinimapSpot, ReturnValue) == 0x000010, "Member 'Tools_ChangeMinimapSpot::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CheckImInParty
// 0x0010 (0x0010 - 0x0000)
struct Tools_CheckImInParty final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CheckImInParty) == 0x000008, "Wrong alignment on Tools_CheckImInParty");
static_assert(sizeof(Tools_CheckImInParty) == 0x000010, "Wrong size on Tools_CheckImInParty");
static_assert(offsetof(Tools_CheckImInParty, _world_ctx) == 0x000000, "Member 'Tools_CheckImInParty::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CheckImInParty, ReturnValue) == 0x000008, "Member 'Tools_CheckImInParty::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CheckImPartyLeader
// 0x0010 (0x0010 - 0x0000)
struct Tools_CheckImPartyLeader final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CheckImPartyLeader) == 0x000008, "Wrong alignment on Tools_CheckImPartyLeader");
static_assert(sizeof(Tools_CheckImPartyLeader) == 0x000010, "Wrong size on Tools_CheckImPartyLeader");
static_assert(offsetof(Tools_CheckImPartyLeader, _world_ctx) == 0x000000, "Member 'Tools_CheckImPartyLeader::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CheckImPartyLeader, ReturnValue) == 0x000008, "Member 'Tools_CheckImPartyLeader::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CheckIsMyFriend
// 0x0018 (0x0018 - 0x0000)
struct Tools_CheckIsMyFriend final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CheckIsMyFriend) == 0x000008, "Wrong alignment on Tools_CheckIsMyFriend");
static_assert(sizeof(Tools_CheckIsMyFriend) == 0x000018, "Wrong size on Tools_CheckIsMyFriend");
static_assert(offsetof(Tools_CheckIsMyFriend, _world_ctx) == 0x000000, "Member 'Tools_CheckIsMyFriend::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CheckIsMyFriend, _user_id) == 0x000008, "Member 'Tools_CheckIsMyFriend::_user_id' has a wrong offset!");
static_assert(offsetof(Tools_CheckIsMyFriend, ReturnValue) == 0x000010, "Member 'Tools_CheckIsMyFriend::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CheckIsMyPartyMember
// 0x0018 (0x0018 - 0x0000)
struct Tools_CheckIsMyPartyMember final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CheckIsMyPartyMember) == 0x000008, "Wrong alignment on Tools_CheckIsMyPartyMember");
static_assert(sizeof(Tools_CheckIsMyPartyMember) == 0x000018, "Wrong size on Tools_CheckIsMyPartyMember");
static_assert(offsetof(Tools_CheckIsMyPartyMember, _world_ctx) == 0x000000, "Member 'Tools_CheckIsMyPartyMember::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CheckIsMyPartyMember, _user_id) == 0x000008, "Member 'Tools_CheckIsMyPartyMember::_user_id' has a wrong offset!");
static_assert(offsetof(Tools_CheckIsMyPartyMember, ReturnValue) == 0x000010, "Member 'Tools_CheckIsMyPartyMember::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CheckKoreaCountry
// 0x0010 (0x0010 - 0x0000)
struct Tools_CheckKoreaCountry final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CheckKoreaCountry) == 0x000008, "Wrong alignment on Tools_CheckKoreaCountry");
static_assert(sizeof(Tools_CheckKoreaCountry) == 0x000010, "Wrong size on Tools_CheckKoreaCountry");
static_assert(offsetof(Tools_CheckKoreaCountry, _world_ctx) == 0x000000, "Member 'Tools_CheckKoreaCountry::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CheckKoreaCountry, ReturnValue) == 0x000008, "Member 'Tools_CheckKoreaCountry::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CheckNickname
// 0x0020 (0x0020 - 0x0000)
struct Tools_CheckNickname final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _nickname;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENicknameTestResult                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_CheckNickname) == 0x000008, "Wrong alignment on Tools_CheckNickname");
static_assert(sizeof(Tools_CheckNickname) == 0x000020, "Wrong size on Tools_CheckNickname");
static_assert(offsetof(Tools_CheckNickname, _world_ctx) == 0x000000, "Member 'Tools_CheckNickname::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CheckNickname, _nickname) == 0x000008, "Member 'Tools_CheckNickname::_nickname' has a wrong offset!");
static_assert(offsetof(Tools_CheckNickname, ReturnValue) == 0x000018, "Member 'Tools_CheckNickname::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.ClearAllChatHistories
// 0x0010 (0x0010 - 0x0000)
struct Tools_ClearAllChatHistories final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_ClearAllChatHistories) == 0x000008, "Wrong alignment on Tools_ClearAllChatHistories");
static_assert(sizeof(Tools_ClearAllChatHistories) == 0x000010, "Wrong size on Tools_ClearAllChatHistories");
static_assert(offsetof(Tools_ClearAllChatHistories, _world_ctx) == 0x000000, "Member 'Tools_ClearAllChatHistories::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ClearAllChatHistories, ReturnValue) == 0x000008, "Member 'Tools_ClearAllChatHistories::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.Convert_CM_To_M
// 0x0008 (0x0008 - 0x0000)
struct Tools_Convert_CM_To_M final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_Convert_CM_To_M) == 0x000004, "Wrong alignment on Tools_Convert_CM_To_M");
static_assert(sizeof(Tools_Convert_CM_To_M) == 0x000008, "Wrong size on Tools_Convert_CM_To_M");
static_assert(offsetof(Tools_Convert_CM_To_M, _value) == 0x000000, "Member 'Tools_Convert_CM_To_M::_value' has a wrong offset!");
static_assert(offsetof(Tools_Convert_CM_To_M, ReturnValue) == 0x000004, "Member 'Tools_Convert_CM_To_M::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.Convert_M_To_CM
// 0x0008 (0x0008 - 0x0000)
struct Tools_Convert_M_To_CM final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_Convert_M_To_CM) == 0x000004, "Wrong alignment on Tools_Convert_M_To_CM");
static_assert(sizeof(Tools_Convert_M_To_CM) == 0x000008, "Wrong size on Tools_Convert_M_To_CM");
static_assert(offsetof(Tools_Convert_M_To_CM, _value) == 0x000000, "Member 'Tools_Convert_M_To_CM::_value' has a wrong offset!");
static_assert(offsetof(Tools_Convert_M_To_CM, ReturnValue) == 0x000004, "Member 'Tools_Convert_M_To_CM::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.Convert_Percentage_To_Weight
// 0x0008 (0x0008 - 0x0000)
struct Tools_Convert_Percentage_To_Weight final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_Convert_Percentage_To_Weight) == 0x000004, "Wrong alignment on Tools_Convert_Percentage_To_Weight");
static_assert(sizeof(Tools_Convert_Percentage_To_Weight) == 0x000008, "Wrong size on Tools_Convert_Percentage_To_Weight");
static_assert(offsetof(Tools_Convert_Percentage_To_Weight, _value) == 0x000000, "Member 'Tools_Convert_Percentage_To_Weight::_value' has a wrong offset!");
static_assert(offsetof(Tools_Convert_Percentage_To_Weight, ReturnValue) == 0x000004, "Member 'Tools_Convert_Percentage_To_Weight::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.Convert_Weight_To_Percentage
// 0x0008 (0x0008 - 0x0000)
struct Tools_Convert_Weight_To_Percentage final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_Convert_Weight_To_Percentage) == 0x000004, "Wrong alignment on Tools_Convert_Weight_To_Percentage");
static_assert(sizeof(Tools_Convert_Weight_To_Percentage) == 0x000008, "Wrong size on Tools_Convert_Weight_To_Percentage");
static_assert(offsetof(Tools_Convert_Weight_To_Percentage, _value) == 0x000000, "Member 'Tools_Convert_Weight_To_Percentage::_value' has a wrong offset!");
static_assert(offsetof(Tools_Convert_Weight_To_Percentage, ReturnValue) == 0x000004, "Member 'Tools_Convert_Weight_To_Percentage::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.CreateUnownedGun
// 0x0018 (0x0018 - 0x0000)
struct Tools_CreateUnownedGun final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AC[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UGunObject*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_CreateUnownedGun) == 0x000008, "Wrong alignment on Tools_CreateUnownedGun");
static_assert(sizeof(Tools_CreateUnownedGun) == 0x000018, "Wrong size on Tools_CreateUnownedGun");
static_assert(offsetof(Tools_CreateUnownedGun, _world_ctx) == 0x000000, "Member 'Tools_CreateUnownedGun::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_CreateUnownedGun, _gun_type) == 0x000008, "Member 'Tools_CreateUnownedGun::_gun_type' has a wrong offset!");
static_assert(offsetof(Tools_CreateUnownedGun, ReturnValue) == 0x000010, "Member 'Tools_CreateUnownedGun::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.DamageToString
// 0x0040 (0x0040 - 0x0000)
struct Tools_DamageToString final
{
public:
	struct FDamagedData                           _damage;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_DamageToString) == 0x000008, "Wrong alignment on Tools_DamageToString");
static_assert(sizeof(Tools_DamageToString) == 0x000040, "Wrong size on Tools_DamageToString");
static_assert(offsetof(Tools_DamageToString, _damage) == 0x000000, "Member 'Tools_DamageToString::_damage' has a wrong offset!");
static_assert(offsetof(Tools_DamageToString, ReturnValue) == 0x000030, "Member 'Tools_DamageToString::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.EnableIMEOnWebUI
// 0x0008 (0x0008 - 0x0000)
struct Tools_EnableIMEOnWebUI final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_EnableIMEOnWebUI) == 0x000008, "Wrong alignment on Tools_EnableIMEOnWebUI");
static_assert(sizeof(Tools_EnableIMEOnWebUI) == 0x000008, "Wrong size on Tools_EnableIMEOnWebUI");
static_assert(offsetof(Tools_EnableIMEOnWebUI, _widget) == 0x000000, "Member 'Tools_EnableIMEOnWebUI::_widget' has a wrong offset!");

// Function Stigma.Tools.ExtractBattleIDS
// 0x0020 (0x0020 - 0x0000)
struct Tools_ExtractBattleIDS final
{
public:
	class FString                                 _str;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_ExtractBattleIDS) == 0x000008, "Wrong alignment on Tools_ExtractBattleIDS");
static_assert(sizeof(Tools_ExtractBattleIDS) == 0x000020, "Wrong size on Tools_ExtractBattleIDS");
static_assert(offsetof(Tools_ExtractBattleIDS, _str) == 0x000000, "Member 'Tools_ExtractBattleIDS::_str' has a wrong offset!");
static_assert(offsetof(Tools_ExtractBattleIDS, ReturnValue) == 0x000010, "Member 'Tools_ExtractBattleIDS::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.FindMatchServicedPlayerStateByUserID
// 0x0018 (0x0018 - 0x0000)
struct Tools_FindMatchServicedPlayerStateByUserID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMatchServicedPlayerState*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_FindMatchServicedPlayerStateByUserID) == 0x000008, "Wrong alignment on Tools_FindMatchServicedPlayerStateByUserID");
static_assert(sizeof(Tools_FindMatchServicedPlayerStateByUserID) == 0x000018, "Wrong size on Tools_FindMatchServicedPlayerStateByUserID");
static_assert(offsetof(Tools_FindMatchServicedPlayerStateByUserID, _world_ctx) == 0x000000, "Member 'Tools_FindMatchServicedPlayerStateByUserID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_FindMatchServicedPlayerStateByUserID, _user_id) == 0x000008, "Member 'Tools_FindMatchServicedPlayerStateByUserID::_user_id' has a wrong offset!");
static_assert(offsetof(Tools_FindMatchServicedPlayerStateByUserID, ReturnValue) == 0x000010, "Member 'Tools_FindMatchServicedPlayerStateByUserID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.FindMyBattlePlayerState
// 0x0018 (0x0018 - 0x0000)
struct Tools_FindMyBattlePlayerState final
{
public:
	TArray<class APlayerState*>                   _player_array;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ABattlePlayerState*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_FindMyBattlePlayerState) == 0x000008, "Wrong alignment on Tools_FindMyBattlePlayerState");
static_assert(sizeof(Tools_FindMyBattlePlayerState) == 0x000018, "Wrong size on Tools_FindMyBattlePlayerState");
static_assert(offsetof(Tools_FindMyBattlePlayerState, _player_array) == 0x000000, "Member 'Tools_FindMyBattlePlayerState::_player_array' has a wrong offset!");
static_assert(offsetof(Tools_FindMyBattlePlayerState, ReturnValue) == 0x000010, "Member 'Tools_FindMyBattlePlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.FindPlayerControllerByUserID
// 0x0018 (0x0018 - 0x0000)
struct Tools_FindPlayerControllerByUserID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMatchServicedPlayerController*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_FindPlayerControllerByUserID) == 0x000008, "Wrong alignment on Tools_FindPlayerControllerByUserID");
static_assert(sizeof(Tools_FindPlayerControllerByUserID) == 0x000018, "Wrong size on Tools_FindPlayerControllerByUserID");
static_assert(offsetof(Tools_FindPlayerControllerByUserID, _world_ctx) == 0x000000, "Member 'Tools_FindPlayerControllerByUserID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_FindPlayerControllerByUserID, _user_id) == 0x000008, "Member 'Tools_FindPlayerControllerByUserID::_user_id' has a wrong offset!");
static_assert(offsetof(Tools_FindPlayerControllerByUserID, ReturnValue) == 0x000010, "Member 'Tools_FindPlayerControllerByUserID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.FormatBattleIDS
// 0x0020 (0x0020 - 0x0000)
struct Tools_FormatBattleIDS final
{
public:
	class FString                                 _battle_ids;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_FormatBattleIDS) == 0x000008, "Wrong alignment on Tools_FormatBattleIDS");
static_assert(sizeof(Tools_FormatBattleIDS) == 0x000020, "Wrong size on Tools_FormatBattleIDS");
static_assert(offsetof(Tools_FormatBattleIDS, _battle_ids) == 0x000000, "Member 'Tools_FormatBattleIDS::_battle_ids' has a wrong offset!");
static_assert(offsetof(Tools_FormatBattleIDS, ReturnValue) == 0x000010, "Member 'Tools_FormatBattleIDS::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetAllGunTypes
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetAllGunTypes final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EGunType>                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetAllGunTypes) == 0x000008, "Wrong alignment on Tools_GetAllGunTypes");
static_assert(sizeof(Tools_GetAllGunTypes) == 0x000018, "Wrong size on Tools_GetAllGunTypes");
static_assert(offsetof(Tools_GetAllGunTypes, _world_ctx) == 0x000000, "Member 'Tools_GetAllGunTypes::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetAllGunTypes, ReturnValue) == 0x000008, "Member 'Tools_GetAllGunTypes::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetAllPlayerCharacters
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetAllPlayerCharacters final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTeamPlayers>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetAllPlayerCharacters) == 0x000008, "Wrong alignment on Tools_GetAllPlayerCharacters");
static_assert(sizeof(Tools_GetAllPlayerCharacters) == 0x000018, "Wrong size on Tools_GetAllPlayerCharacters");
static_assert(offsetof(Tools_GetAllPlayerCharacters, _world_ctx) == 0x000000, "Member 'Tools_GetAllPlayerCharacters::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetAllPlayerCharacters, ReturnValue) == 0x000008, "Member 'Tools_GetAllPlayerCharacters::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetAllPlayers
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetAllPlayers final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetAllPlayers) == 0x000008, "Wrong alignment on Tools_GetAllPlayers");
static_assert(sizeof(Tools_GetAllPlayers) == 0x000018, "Wrong size on Tools_GetAllPlayers");
static_assert(offsetof(Tools_GetAllPlayers, _world_ctx) == 0x000000, "Member 'Tools_GetAllPlayers::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetAllPlayers, ReturnValue) == 0x000008, "Member 'Tools_GetAllPlayers::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetAllPlayersForTabUI
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetAllPlayersForTabUI final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABattlePlayerState*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetAllPlayersForTabUI) == 0x000008, "Wrong alignment on Tools_GetAllPlayersForTabUI");
static_assert(sizeof(Tools_GetAllPlayersForTabUI) == 0x000018, "Wrong size on Tools_GetAllPlayersForTabUI");
static_assert(offsetof(Tools_GetAllPlayersForTabUI, _world_ctx) == 0x000000, "Member 'Tools_GetAllPlayersForTabUI::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetAllPlayersForTabUI, ReturnValue) == 0x000008, "Member 'Tools_GetAllPlayersForTabUI::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBoostedPassiveSkillLevel
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetBoostedPassiveSkillLevel final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AD[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetBoostedPassiveSkillLevel) == 0x000008, "Wrong alignment on Tools_GetBoostedPassiveSkillLevel");
static_assert(sizeof(Tools_GetBoostedPassiveSkillLevel) == 0x000010, "Wrong size on Tools_GetBoostedPassiveSkillLevel");
static_assert(offsetof(Tools_GetBoostedPassiveSkillLevel, _world_ctx) == 0x000000, "Member 'Tools_GetBoostedPassiveSkillLevel::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBoostedPassiveSkillLevel, ReturnValue) == 0x000008, "Member 'Tools_GetBoostedPassiveSkillLevel::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBoosters
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetBoosters final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Booster>                ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBoosters) == 0x000008, "Wrong alignment on Tools_GetBoosters");
static_assert(sizeof(Tools_GetBoosters) == 0x000018, "Wrong size on Tools_GetBoosters");
static_assert(offsetof(Tools_GetBoosters, _world_ctx) == 0x000000, "Member 'Tools_GetBoosters::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBoosters, ReturnValue) == 0x000008, "Member 'Tools_GetBoosters::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffAbilityFloatValue
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetBuffAbilityFloatValue final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ability_name;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AE[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetBuffAbilityFloatValue) == 0x000008, "Wrong alignment on Tools_GetBuffAbilityFloatValue");
static_assert(sizeof(Tools_GetBuffAbilityFloatValue) == 0x000018, "Wrong size on Tools_GetBuffAbilityFloatValue");
static_assert(offsetof(Tools_GetBuffAbilityFloatValue, _world_ctx) == 0x000000, "Member 'Tools_GetBuffAbilityFloatValue::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffAbilityFloatValue, _ability_name) == 0x000008, "Member 'Tools_GetBuffAbilityFloatValue::_ability_name' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffAbilityFloatValue, ReturnValue) == 0x000010, "Member 'Tools_GetBuffAbilityFloatValue::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffCalculatedResultStat
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetBuffCalculatedResultStat final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffEffectType                               _type;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24AF[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffCalculatedResultStat) == 0x000008, "Wrong alignment on Tools_GetBuffCalculatedResultStat");
static_assert(sizeof(Tools_GetBuffCalculatedResultStat) == 0x000010, "Wrong size on Tools_GetBuffCalculatedResultStat");
static_assert(offsetof(Tools_GetBuffCalculatedResultStat, _world_ctx) == 0x000000, "Member 'Tools_GetBuffCalculatedResultStat::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffCalculatedResultStat, _chara_type) == 0x000008, "Member 'Tools_GetBuffCalculatedResultStat::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffCalculatedResultStat, _type) == 0x000009, "Member 'Tools_GetBuffCalculatedResultStat::_type' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffCalculatedResultStat, ReturnValue) == 0x00000C, "Member 'Tools_GetBuffCalculatedResultStat::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffCalculatedResultStatFromCurrentCharacter
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetBuffCalculatedResultStatFromCurrentCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffEffectType                               _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffCalculatedResultStatFromCurrentCharacter) == 0x000008, "Wrong alignment on Tools_GetBuffCalculatedResultStatFromCurrentCharacter");
static_assert(sizeof(Tools_GetBuffCalculatedResultStatFromCurrentCharacter) == 0x000010, "Wrong size on Tools_GetBuffCalculatedResultStatFromCurrentCharacter");
static_assert(offsetof(Tools_GetBuffCalculatedResultStatFromCurrentCharacter, _world_ctx) == 0x000000, "Member 'Tools_GetBuffCalculatedResultStatFromCurrentCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffCalculatedResultStatFromCurrentCharacter, _type) == 0x000008, "Member 'Tools_GetBuffCalculatedResultStatFromCurrentCharacter::_type' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffCalculatedResultStatFromCurrentCharacter, ReturnValue) == 0x00000C, "Member 'Tools_GetBuffCalculatedResultStatFromCurrentCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffDiffTextFormBuffOption
// 0x0028 (0x0028 - 0x0000)
struct Tools_GetBuffDiffTextFormBuffOption final
{
public:
	struct FBuffEffectOption                      _option;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffDiffTextFormBuffOption) == 0x000008, "Wrong alignment on Tools_GetBuffDiffTextFormBuffOption");
static_assert(sizeof(Tools_GetBuffDiffTextFormBuffOption) == 0x000028, "Wrong size on Tools_GetBuffDiffTextFormBuffOption");
static_assert(offsetof(Tools_GetBuffDiffTextFormBuffOption, _option) == 0x000000, "Member 'Tools_GetBuffDiffTextFormBuffOption::_option' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffDiffTextFormBuffOption, ReturnValue) == 0x000010, "Member 'Tools_GetBuffDiffTextFormBuffOption::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffedEffects
// 0x0030 (0x0030 - 0x0000)
struct Tools_GetBuffedEffects final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FEffectDetail>                  ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffedEffects) == 0x000008, "Wrong alignment on Tools_GetBuffedEffects");
static_assert(sizeof(Tools_GetBuffedEffects) == 0x000030, "Wrong size on Tools_GetBuffedEffects");
static_assert(offsetof(Tools_GetBuffedEffects, _world_ctx) == 0x000000, "Member 'Tools_GetBuffedEffects::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffedEffects, _item_id) == 0x000008, "Member 'Tools_GetBuffedEffects::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffedEffects, _level) == 0x000018, "Member 'Tools_GetBuffedEffects::_level' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffedEffects, ReturnValue) == 0x000020, "Member 'Tools_GetBuffedEffects::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffNameFormBuffType
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetBuffNameFormBuffType final
{
public:
	EBuffEffectType                               _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffNameFormBuffType) == 0x000008, "Wrong alignment on Tools_GetBuffNameFormBuffType");
static_assert(sizeof(Tools_GetBuffNameFormBuffType) == 0x000020, "Wrong size on Tools_GetBuffNameFormBuffType");
static_assert(offsetof(Tools_GetBuffNameFormBuffType, _type) == 0x000000, "Member 'Tools_GetBuffNameFormBuffType::_type' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffNameFormBuffType, ReturnValue) == 0x000008, "Member 'Tools_GetBuffNameFormBuffType::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffsByItemID
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetBuffsByItemID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBuffBase*>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffsByItemID) == 0x000008, "Wrong alignment on Tools_GetBuffsByItemID");
static_assert(sizeof(Tools_GetBuffsByItemID) == 0x000020, "Wrong size on Tools_GetBuffsByItemID");
static_assert(offsetof(Tools_GetBuffsByItemID, _item_id) == 0x000000, "Member 'Tools_GetBuffsByItemID::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffsByItemID, ReturnValue) == 0x000010, "Member 'Tools_GetBuffsByItemID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffTextInfoMapFromItemID
// 0x0070 (0x0070 - 0x0000)
struct Tools_GetBuffTextInfoMapFromItemID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B3[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0020(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffTextInfoMapFromItemID) == 0x000008, "Wrong alignment on Tools_GetBuffTextInfoMapFromItemID");
static_assert(sizeof(Tools_GetBuffTextInfoMapFromItemID) == 0x000070, "Wrong size on Tools_GetBuffTextInfoMapFromItemID");
static_assert(offsetof(Tools_GetBuffTextInfoMapFromItemID, _world_ctx) == 0x000000, "Member 'Tools_GetBuffTextInfoMapFromItemID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffTextInfoMapFromItemID, _item_id) == 0x000008, "Member 'Tools_GetBuffTextInfoMapFromItemID::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffTextInfoMapFromItemID, _level) == 0x000018, "Member 'Tools_GetBuffTextInfoMapFromItemID::_level' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffTextInfoMapFromItemID, ReturnValue) == 0x000020, "Member 'Tools_GetBuffTextInfoMapFromItemID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffValueTextFormBuffOption
// 0x0030 (0x0030 - 0x0000)
struct Tools_GetBuffValueTextFormBuffOption final
{
public:
	struct FBuffEffectOption                      _option;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         _additional_value;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffValueTextFormBuffOption) == 0x000008, "Wrong alignment on Tools_GetBuffValueTextFormBuffOption");
static_assert(sizeof(Tools_GetBuffValueTextFormBuffOption) == 0x000030, "Wrong size on Tools_GetBuffValueTextFormBuffOption");
static_assert(offsetof(Tools_GetBuffValueTextFormBuffOption, _option) == 0x000000, "Member 'Tools_GetBuffValueTextFormBuffOption::_option' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFormBuffOption, _additional_value) == 0x000010, "Member 'Tools_GetBuffValueTextFormBuffOption::_additional_value' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFormBuffOption, ReturnValue) == 0x000018, "Member 'Tools_GetBuffValueTextFormBuffOption::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetBuffValueTextFromItemID
// 0x0040 (0x0040 - 0x0000)
struct Tools_GetBuffValueTextFromItemID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_only_value;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _item_id;                                          // 0x0010(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _level;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _additional_value;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetBuffValueTextFromItemID) == 0x000008, "Wrong alignment on Tools_GetBuffValueTextFromItemID");
static_assert(sizeof(Tools_GetBuffValueTextFromItemID) == 0x000040, "Wrong size on Tools_GetBuffValueTextFromItemID");
static_assert(offsetof(Tools_GetBuffValueTextFromItemID, _world_ctx) == 0x000000, "Member 'Tools_GetBuffValueTextFromItemID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFromItemID, _show_only_value) == 0x000008, "Member 'Tools_GetBuffValueTextFromItemID::_show_only_value' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFromItemID, _item_id) == 0x000010, "Member 'Tools_GetBuffValueTextFromItemID::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFromItemID, _level) == 0x000020, "Member 'Tools_GetBuffValueTextFromItemID::_level' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFromItemID, _additional_value) == 0x000024, "Member 'Tools_GetBuffValueTextFromItemID::_additional_value' has a wrong offset!");
static_assert(offsetof(Tools_GetBuffValueTextFromItemID, ReturnValue) == 0x000028, "Member 'Tools_GetBuffValueTextFromItemID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCharacter
// 0x0068 (0x0068 - 0x0000)
struct Tools_GetCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterInfo                         ReturnValue;                                       // 0x0010(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetCharacter) == 0x000008, "Wrong alignment on Tools_GetCharacter");
static_assert(sizeof(Tools_GetCharacter) == 0x000068, "Wrong size on Tools_GetCharacter");
static_assert(offsetof(Tools_GetCharacter, WorldContextObject) == 0x000000, "Member 'Tools_GetCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(Tools_GetCharacter, _chara_type) == 0x000008, "Member 'Tools_GetCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_GetCharacter, ReturnValue) == 0x000010, "Member 'Tools_GetCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCharacterTypesByGunType
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetCharacterTypesByGunType final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<ECharaType>                            ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetCharacterTypesByGunType) == 0x000008, "Wrong alignment on Tools_GetCharacterTypesByGunType");
static_assert(sizeof(Tools_GetCharacterTypesByGunType) == 0x000020, "Wrong size on Tools_GetCharacterTypesByGunType");
static_assert(offsetof(Tools_GetCharacterTypesByGunType, _world_ctx) == 0x000000, "Member 'Tools_GetCharacterTypesByGunType::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetCharacterTypesByGunType, _gun_type) == 0x000008, "Member 'Tools_GetCharacterTypesByGunType::_gun_type' has a wrong offset!");
static_assert(offsetof(Tools_GetCharacterTypesByGunType, ReturnValue) == 0x000010, "Member 'Tools_GetCharacterTypesByGunType::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCharaIconByType
// 0x0030 (0x0030 - 0x0000)
struct Tools_GetCharaIconByType final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetCharaIconByType) == 0x000008, "Wrong alignment on Tools_GetCharaIconByType");
static_assert(sizeof(Tools_GetCharaIconByType) == 0x000030, "Wrong size on Tools_GetCharaIconByType");
static_assert(offsetof(Tools_GetCharaIconByType, _chara_type) == 0x000000, "Member 'Tools_GetCharaIconByType::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_GetCharaIconByType, ReturnValue) == 0x000008, "Member 'Tools_GetCharaIconByType::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetChatManager
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetChatManager final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChatManager*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetChatManager) == 0x000008, "Wrong alignment on Tools_GetChatManager");
static_assert(sizeof(Tools_GetChatManager) == 0x000010, "Wrong size on Tools_GetChatManager");
static_assert(offsetof(Tools_GetChatManager, _world_ctx) == 0x000000, "Member 'Tools_GetChatManager::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetChatManager, ReturnValue) == 0x000008, "Member 'Tools_GetChatManager::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCurrencyValue
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetCurrencyValue final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurrencyTypes                                _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24B9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetCurrencyValue) == 0x000008, "Wrong alignment on Tools_GetCurrencyValue");
static_assert(sizeof(Tools_GetCurrencyValue) == 0x000010, "Wrong size on Tools_GetCurrencyValue");
static_assert(offsetof(Tools_GetCurrencyValue, _world_ctx) == 0x000000, "Member 'Tools_GetCurrencyValue::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrencyValue, _type) == 0x000008, "Member 'Tools_GetCurrencyValue::_type' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrencyValue, ReturnValue) == 0x00000C, "Member 'Tools_GetCurrencyValue::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCurrencyValueFromID
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetCurrencyValueFromID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Currency                       _currency_id;                                      // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BA[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetCurrencyValueFromID) == 0x000008, "Wrong alignment on Tools_GetCurrencyValueFromID");
static_assert(sizeof(Tools_GetCurrencyValueFromID) == 0x000020, "Wrong size on Tools_GetCurrencyValueFromID");
static_assert(offsetof(Tools_GetCurrencyValueFromID, _world_ctx) == 0x000000, "Member 'Tools_GetCurrencyValueFromID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrencyValueFromID, _currency_id) == 0x000008, "Member 'Tools_GetCurrencyValueFromID::_currency_id' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrencyValueFromID, ReturnValue) == 0x000018, "Member 'Tools_GetCurrencyValueFromID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCurrentCharacter
// 0x0060 (0x0060 - 0x0000)
struct Tools_GetCurrentCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterInfo                         ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetCurrentCharacter) == 0x000008, "Wrong alignment on Tools_GetCurrentCharacter");
static_assert(sizeof(Tools_GetCurrentCharacter) == 0x000060, "Wrong size on Tools_GetCurrentCharacter");
static_assert(offsetof(Tools_GetCurrentCharacter, _world_ctx) == 0x000000, "Member 'Tools_GetCurrentCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrentCharacter, ReturnValue) == 0x000008, "Member 'Tools_GetCurrentCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCurrentCharacterType
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetCurrentCharacterType final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetCurrentCharacterType) == 0x000008, "Wrong alignment on Tools_GetCurrentCharacterType");
static_assert(sizeof(Tools_GetCurrentCharacterType) == 0x000010, "Wrong size on Tools_GetCurrentCharacterType");
static_assert(offsetof(Tools_GetCurrentCharacterType, _world_ctx) == 0x000000, "Member 'Tools_GetCurrentCharacterType::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrentCharacterType, ReturnValue) == 0x000008, "Member 'Tools_GetCurrentCharacterType::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetCurrentGameModeType
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetCurrentGameModeType final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _out_game_mode_type;                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BC[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetCurrentGameModeType) == 0x000008, "Wrong alignment on Tools_GetCurrentGameModeType");
static_assert(sizeof(Tools_GetCurrentGameModeType) == 0x000010, "Wrong size on Tools_GetCurrentGameModeType");
static_assert(offsetof(Tools_GetCurrentGameModeType, _world_ctx) == 0x000000, "Member 'Tools_GetCurrentGameModeType::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrentGameModeType, _out_game_mode_type) == 0x000008, "Member 'Tools_GetCurrentGameModeType::_out_game_mode_type' has a wrong offset!");
static_assert(offsetof(Tools_GetCurrentGameModeType, ReturnValue) == 0x000009, "Member 'Tools_GetCurrentGameModeType::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetDisplayCountFromBuffOptions
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetDisplayCountFromBuffOptions final
{
public:
	TArray<struct FBuffEffectOption>              _buff_options;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BD[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetDisplayCountFromBuffOptions) == 0x000008, "Wrong alignment on Tools_GetDisplayCountFromBuffOptions");
static_assert(sizeof(Tools_GetDisplayCountFromBuffOptions) == 0x000018, "Wrong size on Tools_GetDisplayCountFromBuffOptions");
static_assert(offsetof(Tools_GetDisplayCountFromBuffOptions, _buff_options) == 0x000000, "Member 'Tools_GetDisplayCountFromBuffOptions::_buff_options' has a wrong offset!");
static_assert(offsetof(Tools_GetDisplayCountFromBuffOptions, ReturnValue) == 0x000010, "Member 'Tools_GetDisplayCountFromBuffOptions::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetElapsedUtcTimeString
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetElapsedUtcTimeString final
{
public:
	struct FDateTimeISO                           _standard_time_utc;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTimeISO                           _current_time_utc;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetElapsedUtcTimeString) == 0x000008, "Wrong alignment on Tools_GetElapsedUtcTimeString");
static_assert(sizeof(Tools_GetElapsedUtcTimeString) == 0x000020, "Wrong size on Tools_GetElapsedUtcTimeString");
static_assert(offsetof(Tools_GetElapsedUtcTimeString, _standard_time_utc) == 0x000000, "Member 'Tools_GetElapsedUtcTimeString::_standard_time_utc' has a wrong offset!");
static_assert(offsetof(Tools_GetElapsedUtcTimeString, _current_time_utc) == 0x000008, "Member 'Tools_GetElapsedUtcTimeString::_current_time_utc' has a wrong offset!");
static_assert(offsetof(Tools_GetElapsedUtcTimeString, ReturnValue) == 0x000010, "Member 'Tools_GetElapsedUtcTimeString::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetEquipedEffectValue
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetEquipedEffectValue final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffEffectType                               _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BE[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetEquipedEffectValue) == 0x000008, "Wrong alignment on Tools_GetEquipedEffectValue");
static_assert(sizeof(Tools_GetEquipedEffectValue) == 0x000010, "Wrong size on Tools_GetEquipedEffectValue");
static_assert(offsetof(Tools_GetEquipedEffectValue, _world_ctx) == 0x000000, "Member 'Tools_GetEquipedEffectValue::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipedEffectValue, _type) == 0x000008, "Member 'Tools_GetEquipedEffectValue::_type' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipedEffectValue, ReturnValue) == 0x00000C, "Member 'Tools_GetEquipedEffectValue::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetEquipFilterTextMap
// 0x0058 (0x0058 - 0x0000)
struct Tools_GetEquipFilterTextMap final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EItemEquipFilter, class FText>           ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetEquipFilterTextMap) == 0x000008, "Wrong alignment on Tools_GetEquipFilterTextMap");
static_assert(sizeof(Tools_GetEquipFilterTextMap) == 0x000058, "Wrong size on Tools_GetEquipFilterTextMap");
static_assert(offsetof(Tools_GetEquipFilterTextMap, _world_ctx) == 0x000000, "Member 'Tools_GetEquipFilterTextMap::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipFilterTextMap, ReturnValue) == 0x000008, "Member 'Tools_GetEquipFilterTextMap::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetEquipPassiveAndBoosterBuffOptions
// 0x0038 (0x0038 - 0x0000)
struct Tools_GetEquipPassiveAndBoosterBuffOptions final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSkill>                  _passive_skill_ids;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Booster>                _item_ids;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBuffEffectOption>              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetEquipPassiveAndBoosterBuffOptions) == 0x000008, "Wrong alignment on Tools_GetEquipPassiveAndBoosterBuffOptions");
static_assert(sizeof(Tools_GetEquipPassiveAndBoosterBuffOptions) == 0x000038, "Wrong size on Tools_GetEquipPassiveAndBoosterBuffOptions");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptions, _world_ctx) == 0x000000, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptions::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptions, _passive_skill_ids) == 0x000008, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptions::_passive_skill_ids' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptions, _item_ids) == 0x000018, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptions::_item_ids' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptions, ReturnValue) == 0x000028, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptions::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetEquipPassiveAndBoosterBuffOptionsEx
// 0x0068 (0x0068 - 0x0000)
struct Tools_GetEquipPassiveAndBoosterBuffOptionsEx final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _prev_mounted_item_id;                             // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _cur_mounted_item_id;                              // 0x0018(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _ignore_item_id;                                   // 0x0028(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSkill>                  _passive_skill_ids;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Booster>                _item_ids;                                         // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBuffEffectOption>              ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx) == 0x000008, "Wrong alignment on Tools_GetEquipPassiveAndBoosterBuffOptionsEx");
static_assert(sizeof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx) == 0x000068, "Wrong size on Tools_GetEquipPassiveAndBoosterBuffOptionsEx");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, _world_ctx) == 0x000000, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, _prev_mounted_item_id) == 0x000008, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::_prev_mounted_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, _cur_mounted_item_id) == 0x000018, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::_cur_mounted_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, _ignore_item_id) == 0x000028, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::_ignore_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, _passive_skill_ids) == 0x000038, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::_passive_skill_ids' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, _item_ids) == 0x000048, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::_item_ids' has a wrong offset!");
static_assert(offsetof(Tools_GetEquipPassiveAndBoosterBuffOptionsEx, ReturnValue) == 0x000058, "Member 'Tools_GetEquipPassiveAndBoosterBuffOptionsEx::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetEventCounterSubsystem
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetEventCounterSubsystem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEventCounterSubsystem*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetEventCounterSubsystem) == 0x000008, "Wrong alignment on Tools_GetEventCounterSubsystem");
static_assert(sizeof(Tools_GetEventCounterSubsystem) == 0x000010, "Wrong size on Tools_GetEventCounterSubsystem");
static_assert(offsetof(Tools_GetEventCounterSubsystem, _world_ctx) == 0x000000, "Member 'Tools_GetEventCounterSubsystem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetEventCounterSubsystem, ReturnValue) == 0x000008, "Member 'Tools_GetEventCounterSubsystem::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetFriendAskedList
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetFriendAskedList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserProfile*>                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetFriendAskedList) == 0x000008, "Wrong alignment on Tools_GetFriendAskedList");
static_assert(sizeof(Tools_GetFriendAskedList) == 0x000018, "Wrong size on Tools_GetFriendAskedList");
static_assert(offsetof(Tools_GetFriendAskedList, _world_ctx) == 0x000000, "Member 'Tools_GetFriendAskedList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetFriendAskedList, ReturnValue) == 0x000008, "Member 'Tools_GetFriendAskedList::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetGameContext
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetGameContext final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameContext*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetGameContext) == 0x000008, "Wrong alignment on Tools_GetGameContext");
static_assert(sizeof(Tools_GetGameContext) == 0x000010, "Wrong size on Tools_GetGameContext");
static_assert(offsetof(Tools_GetGameContext, _world_ctx) == 0x000000, "Member 'Tools_GetGameContext::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetGameContext, ReturnValue) == 0x000008, "Member 'Tools_GetGameContext::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetGunPartsSlotText
// 0x0028 (0x0028 - 0x0000)
struct Tools_GetGunPartsSlotText final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24BF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetGunPartsSlotText) == 0x000008, "Wrong alignment on Tools_GetGunPartsSlotText");
static_assert(sizeof(Tools_GetGunPartsSlotText) == 0x000028, "Wrong size on Tools_GetGunPartsSlotText");
static_assert(offsetof(Tools_GetGunPartsSlotText, _world_ctx) == 0x000000, "Member 'Tools_GetGunPartsSlotText::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetGunPartsSlotText, _gun_parts_slot) == 0x000008, "Member 'Tools_GetGunPartsSlotText::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(Tools_GetGunPartsSlotText, ReturnValue) == 0x000010, "Member 'Tools_GetGunPartsSlotText::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetGunSpecFilterTextMap
// 0x0058 (0x0058 - 0x0000)
struct Tools_GetGunSpecFilterTextMap final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EGunSpecFilter, class FText>             ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetGunSpecFilterTextMap) == 0x000008, "Wrong alignment on Tools_GetGunSpecFilterTextMap");
static_assert(sizeof(Tools_GetGunSpecFilterTextMap) == 0x000058, "Wrong size on Tools_GetGunSpecFilterTextMap");
static_assert(offsetof(Tools_GetGunSpecFilterTextMap, _world_ctx) == 0x000000, "Member 'Tools_GetGunSpecFilterTextMap::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetGunSpecFilterTextMap, ReturnValue) == 0x000008, "Member 'Tools_GetGunSpecFilterTextMap::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetInvatableFriendsCount
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetInvatableFriendsCount final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C0[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetInvatableFriendsCount) == 0x000008, "Wrong alignment on Tools_GetInvatableFriendsCount");
static_assert(sizeof(Tools_GetInvatableFriendsCount) == 0x000010, "Wrong size on Tools_GetInvatableFriendsCount");
static_assert(offsetof(Tools_GetInvatableFriendsCount, _world_ctx) == 0x000000, "Member 'Tools_GetInvatableFriendsCount::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetInvatableFriendsCount, ReturnValue) == 0x000008, "Member 'Tools_GetInvatableFriendsCount::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetInvatableRecentUsersCount
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetInvatableRecentUsersCount final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C1[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetInvatableRecentUsersCount) == 0x000008, "Wrong alignment on Tools_GetInvatableRecentUsersCount");
static_assert(sizeof(Tools_GetInvatableRecentUsersCount) == 0x000010, "Wrong size on Tools_GetInvatableRecentUsersCount");
static_assert(offsetof(Tools_GetInvatableRecentUsersCount, _world_ctx) == 0x000000, "Member 'Tools_GetInvatableRecentUsersCount::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetInvatableRecentUsersCount, ReturnValue) == 0x000008, "Member 'Tools_GetInvatableRecentUsersCount::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalInvenItemList
// 0x0028 (0x0028 - 0x0000)
struct Tools_GetLocalInvenItemList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _id;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInvenItem*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalInvenItemList) == 0x000008, "Wrong alignment on Tools_GetLocalInvenItemList");
static_assert(sizeof(Tools_GetLocalInvenItemList) == 0x000028, "Wrong size on Tools_GetLocalInvenItemList");
static_assert(offsetof(Tools_GetLocalInvenItemList, _world_ctx) == 0x000000, "Member 'Tools_GetLocalInvenItemList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalInvenItemList, _id) == 0x000008, "Member 'Tools_GetLocalInvenItemList::_id' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalInvenItemList, ReturnValue) == 0x000018, "Member 'Tools_GetLocalInvenItemList::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalInvenItems
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalInvenItems final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItems*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalInvenItems) == 0x000008, "Wrong alignment on Tools_GetLocalInvenItems");
static_assert(sizeof(Tools_GetLocalInvenItems) == 0x000010, "Wrong size on Tools_GetLocalInvenItems");
static_assert(offsetof(Tools_GetLocalInvenItems, _world_ctx) == 0x000000, "Member 'Tools_GetLocalInvenItems::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalInvenItems, ReturnValue) == 0x000008, "Member 'Tools_GetLocalInvenItems::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalPlayer final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStigmaLocalPlayer*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalPlayer) == 0x000008, "Wrong alignment on Tools_GetLocalPlayer");
static_assert(sizeof(Tools_GetLocalPlayer) == 0x000010, "Wrong size on Tools_GetLocalPlayer");
static_assert(offsetof(Tools_GetLocalPlayer, _world_ctx) == 0x000000, "Member 'Tools_GetLocalPlayer::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalPlayer, ReturnValue) == 0x000008, "Member 'Tools_GetLocalPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalPlayerCharacter
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalPlayerCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalPlayerCharacter) == 0x000008, "Wrong alignment on Tools_GetLocalPlayerCharacter");
static_assert(sizeof(Tools_GetLocalPlayerCharacter) == 0x000010, "Wrong size on Tools_GetLocalPlayerCharacter");
static_assert(offsetof(Tools_GetLocalPlayerCharacter, _world_ctx) == 0x000000, "Member 'Tools_GetLocalPlayerCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalPlayerCharacter, ReturnValue) == 0x000008, "Member 'Tools_GetLocalPlayerCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalPlayerContext
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalPlayerContext final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalPlayerContext*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalPlayerContext) == 0x000008, "Wrong alignment on Tools_GetLocalPlayerContext");
static_assert(sizeof(Tools_GetLocalPlayerContext) == 0x000010, "Wrong size on Tools_GetLocalPlayerContext");
static_assert(offsetof(Tools_GetLocalPlayerContext, _world_ctx) == 0x000000, "Member 'Tools_GetLocalPlayerContext::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalPlayerContext, ReturnValue) == 0x000008, "Member 'Tools_GetLocalPlayerContext::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalPlayerController
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalPlayerController final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStigmaPlayerController*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalPlayerController) == 0x000008, "Wrong alignment on Tools_GetLocalPlayerController");
static_assert(sizeof(Tools_GetLocalPlayerController) == 0x000010, "Wrong size on Tools_GetLocalPlayerController");
static_assert(offsetof(Tools_GetLocalPlayerController, _world_ctx) == 0x000000, "Member 'Tools_GetLocalPlayerController::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalPlayerController, ReturnValue) == 0x000008, "Member 'Tools_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalPlayerState
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalPlayerState final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalPlayerState) == 0x000008, "Wrong alignment on Tools_GetLocalPlayerState");
static_assert(sizeof(Tools_GetLocalPlayerState) == 0x000010, "Wrong size on Tools_GetLocalPlayerState");
static_assert(offsetof(Tools_GetLocalPlayerState, _world_ctx) == 0x000000, "Member 'Tools_GetLocalPlayerState::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalPlayerState, ReturnValue) == 0x000008, "Member 'Tools_GetLocalPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLocalRegistry
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLocalRegistry final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULocalRegistry*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetLocalRegistry) == 0x000008, "Wrong alignment on Tools_GetLocalRegistry");
static_assert(sizeof(Tools_GetLocalRegistry) == 0x000010, "Wrong size on Tools_GetLocalRegistry");
static_assert(offsetof(Tools_GetLocalRegistry, _world_ctx) == 0x000000, "Member 'Tools_GetLocalRegistry::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLocalRegistry, ReturnValue) == 0x000008, "Member 'Tools_GetLocalRegistry::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetLoginElapsedSec
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetLoginElapsedSec final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C2[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetLoginElapsedSec) == 0x000008, "Wrong alignment on Tools_GetLoginElapsedSec");
static_assert(sizeof(Tools_GetLoginElapsedSec) == 0x000010, "Wrong size on Tools_GetLoginElapsedSec");
static_assert(offsetof(Tools_GetLoginElapsedSec, _world_ctx) == 0x000000, "Member 'Tools_GetLoginElapsedSec::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetLoginElapsedSec, ReturnValue) == 0x000008, "Member 'Tools_GetLoginElapsedSec::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMasterObtainGuide
// 0x0038 (0x0038 - 0x0000)
struct Tools_GetMasterObtainGuide final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FObtainGuide                           ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetMasterObtainGuide) == 0x000008, "Wrong alignment on Tools_GetMasterObtainGuide");
static_assert(sizeof(Tools_GetMasterObtainGuide) == 0x000038, "Wrong size on Tools_GetMasterObtainGuide");
static_assert(offsetof(Tools_GetMasterObtainGuide, _chara_type) == 0x000000, "Member 'Tools_GetMasterObtainGuide::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_GetMasterObtainGuide, ReturnValue) == 0x000008, "Member 'Tools_GetMasterObtainGuide::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMasterObtainGuideText
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetMasterObtainGuideText final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetMasterObtainGuideText) == 0x000008, "Wrong alignment on Tools_GetMasterObtainGuideText");
static_assert(sizeof(Tools_GetMasterObtainGuideText) == 0x000020, "Wrong size on Tools_GetMasterObtainGuideText");
static_assert(offsetof(Tools_GetMasterObtainGuideText, _chara_type) == 0x000000, "Member 'Tools_GetMasterObtainGuideText::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_GetMasterObtainGuideText, ReturnValue) == 0x000008, "Member 'Tools_GetMasterObtainGuideText::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMatchableTimeRange
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetMatchableTimeRange final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetMatchableTimeRange) == 0x000008, "Wrong alignment on Tools_GetMatchableTimeRange");
static_assert(sizeof(Tools_GetMatchableTimeRange) == 0x000018, "Wrong size on Tools_GetMatchableTimeRange");
static_assert(offsetof(Tools_GetMatchableTimeRange, _world_ctx) == 0x000000, "Member 'Tools_GetMatchableTimeRange::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetMatchableTimeRange, ReturnValue) == 0x000008, "Member 'Tools_GetMatchableTimeRange::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMatchMakingStatus
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetMatchMakingStatus final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFindMatchStatus                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetMatchMakingStatus) == 0x000008, "Wrong alignment on Tools_GetMatchMakingStatus");
static_assert(sizeof(Tools_GetMatchMakingStatus) == 0x000010, "Wrong size on Tools_GetMatchMakingStatus");
static_assert(offsetof(Tools_GetMatchMakingStatus, _world_ctx) == 0x000000, "Member 'Tools_GetMatchMakingStatus::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetMatchMakingStatus, ReturnValue) == 0x000008, "Member 'Tools_GetMatchMakingStatus::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMyFriendList
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetMyFriendList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserProfile*>                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetMyFriendList) == 0x000008, "Wrong alignment on Tools_GetMyFriendList");
static_assert(sizeof(Tools_GetMyFriendList) == 0x000018, "Wrong size on Tools_GetMyFriendList");
static_assert(offsetof(Tools_GetMyFriendList, _world_ctx) == 0x000000, "Member 'Tools_GetMyFriendList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetMyFriendList, ReturnValue) == 0x000008, "Member 'Tools_GetMyFriendList::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMyPartyID
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetMyPartyID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyID                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetMyPartyID) == 0x000008, "Wrong alignment on Tools_GetMyPartyID");
static_assert(sizeof(Tools_GetMyPartyID) == 0x000010, "Wrong size on Tools_GetMyPartyID");
static_assert(offsetof(Tools_GetMyPartyID, _world_ctx) == 0x000000, "Member 'Tools_GetMyPartyID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetMyPartyID, ReturnValue) == 0x000008, "Member 'Tools_GetMyPartyID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetMyPlayer
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetMyPlayer final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStigmaLocalPlayer*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetMyPlayer) == 0x000008, "Wrong alignment on Tools_GetMyPlayer");
static_assert(sizeof(Tools_GetMyPlayer) == 0x000010, "Wrong size on Tools_GetMyPlayer");
static_assert(offsetof(Tools_GetMyPlayer, _world_ctx) == 0x000000, "Member 'Tools_GetMyPlayer::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetMyPlayer, ReturnValue) == 0x000008, "Member 'Tools_GetMyPlayer::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetNonBoostedPassiveSkillLevel
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetNonBoostedPassiveSkillLevel final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPassiveSkillID                        _skill_id;                                         // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetNonBoostedPassiveSkillLevel) == 0x000008, "Wrong alignment on Tools_GetNonBoostedPassiveSkillLevel");
static_assert(sizeof(Tools_GetNonBoostedPassiveSkillLevel) == 0x000020, "Wrong size on Tools_GetNonBoostedPassiveSkillLevel");
static_assert(offsetof(Tools_GetNonBoostedPassiveSkillLevel, _world_ctx) == 0x000000, "Member 'Tools_GetNonBoostedPassiveSkillLevel::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetNonBoostedPassiveSkillLevel, _skill_id) == 0x000008, "Member 'Tools_GetNonBoostedPassiveSkillLevel::_skill_id' has a wrong offset!");
static_assert(offsetof(Tools_GetNonBoostedPassiveSkillLevel, ReturnValue) == 0x000018, "Member 'Tools_GetNonBoostedPassiveSkillLevel::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetPassiveSkills
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetPassiveSkills final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSkill>                  ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetPassiveSkills) == 0x000008, "Wrong alignment on Tools_GetPassiveSkills");
static_assert(sizeof(Tools_GetPassiveSkills) == 0x000018, "Wrong size on Tools_GetPassiveSkills");
static_assert(offsetof(Tools_GetPassiveSkills, _world_ctx) == 0x000000, "Member 'Tools_GetPassiveSkills::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetPassiveSkills, ReturnValue) == 0x000008, "Member 'Tools_GetPassiveSkills::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetPhysicalMaterial
// 0x00F0 (0x00F0 - 0x0000)
struct Tools_GetPhysicalMaterial final
{
public:
	struct FHitResult                             _hit;                                              // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USpecterPhysicalMaterial*               ReturnValue;                                       // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetPhysicalMaterial) == 0x000008, "Wrong alignment on Tools_GetPhysicalMaterial");
static_assert(sizeof(Tools_GetPhysicalMaterial) == 0x0000F0, "Wrong size on Tools_GetPhysicalMaterial");
static_assert(offsetof(Tools_GetPhysicalMaterial, _hit) == 0x000000, "Member 'Tools_GetPhysicalMaterial::_hit' has a wrong offset!");
static_assert(offsetof(Tools_GetPhysicalMaterial, ReturnValue) == 0x0000E8, "Member 'Tools_GetPhysicalMaterial::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetPingQuality
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetPingQuality final
{
public:
	class APlayerState*                           _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPingQuality                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetPingQuality) == 0x000008, "Wrong alignment on Tools_GetPingQuality");
static_assert(sizeof(Tools_GetPingQuality) == 0x000010, "Wrong size on Tools_GetPingQuality");
static_assert(offsetof(Tools_GetPingQuality, _ps) == 0x000000, "Member 'Tools_GetPingQuality::_ps' has a wrong offset!");
static_assert(offsetof(Tools_GetPingQuality, ReturnValue) == 0x000008, "Member 'Tools_GetPingQuality::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetPlayableCharacterCount
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetPlayableCharacterCount final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C8[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetPlayableCharacterCount) == 0x000008, "Wrong alignment on Tools_GetPlayableCharacterCount");
static_assert(sizeof(Tools_GetPlayableCharacterCount) == 0x000010, "Wrong size on Tools_GetPlayableCharacterCount");
static_assert(offsetof(Tools_GetPlayableCharacterCount, _world_ctx) == 0x000000, "Member 'Tools_GetPlayableCharacterCount::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetPlayableCharacterCount, ReturnValue) == 0x000008, "Member 'Tools_GetPlayableCharacterCount::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetProperIconSizeWRTGuide
// 0x0040 (0x0040 - 0x0000)
struct Tools_GetProperIconSizeWRTGuide final
{
public:
	struct FVector2D                              _icon_sz;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _guide;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _margin;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetProperIconSizeWRTGuide) == 0x000008, "Wrong alignment on Tools_GetProperIconSizeWRTGuide");
static_assert(sizeof(Tools_GetProperIconSizeWRTGuide) == 0x000040, "Wrong size on Tools_GetProperIconSizeWRTGuide");
static_assert(offsetof(Tools_GetProperIconSizeWRTGuide, _icon_sz) == 0x000000, "Member 'Tools_GetProperIconSizeWRTGuide::_icon_sz' has a wrong offset!");
static_assert(offsetof(Tools_GetProperIconSizeWRTGuide, _guide) == 0x000010, "Member 'Tools_GetProperIconSizeWRTGuide::_guide' has a wrong offset!");
static_assert(offsetof(Tools_GetProperIconSizeWRTGuide, _margin) == 0x000020, "Member 'Tools_GetProperIconSizeWRTGuide::_margin' has a wrong offset!");
static_assert(offsetof(Tools_GetProperIconSizeWRTGuide, ReturnValue) == 0x000030, "Member 'Tools_GetProperIconSizeWRTGuide::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetRecentUserList
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetRecentUserList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserProfile*>                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetRecentUserList) == 0x000008, "Wrong alignment on Tools_GetRecentUserList");
static_assert(sizeof(Tools_GetRecentUserList) == 0x000018, "Wrong size on Tools_GetRecentUserList");
static_assert(offsetof(Tools_GetRecentUserList, _world_ctx) == 0x000000, "Member 'Tools_GetRecentUserList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetRecentUserList, ReturnValue) == 0x000008, "Member 'Tools_GetRecentUserList::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetSearchedUserList
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetSearchedUserList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserProfile*>                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetSearchedUserList) == 0x000008, "Wrong alignment on Tools_GetSearchedUserList");
static_assert(sizeof(Tools_GetSearchedUserList) == 0x000018, "Wrong size on Tools_GetSearchedUserList");
static_assert(offsetof(Tools_GetSearchedUserList, _world_ctx) == 0x000000, "Member 'Tools_GetSearchedUserList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetSearchedUserList, ReturnValue) == 0x000008, "Member 'Tools_GetSearchedUserList::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetServerStatus
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetServerStatus final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerStatus                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetServerStatus) == 0x000008, "Wrong alignment on Tools_GetServerStatus");
static_assert(sizeof(Tools_GetServerStatus) == 0x000010, "Wrong size on Tools_GetServerStatus");
static_assert(offsetof(Tools_GetServerStatus, _world_ctx) == 0x000000, "Member 'Tools_GetServerStatus::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetServerStatus, ReturnValue) == 0x000008, "Member 'Tools_GetServerStatus::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetSlateVisibility_Development
// 0x0002 (0x0002 - 0x0000)
struct Tools_GetSlateVisibility_Development final
{
public:
	ESlateVisibility                              _want;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetSlateVisibility_Development) == 0x000001, "Wrong alignment on Tools_GetSlateVisibility_Development");
static_assert(sizeof(Tools_GetSlateVisibility_Development) == 0x000002, "Wrong size on Tools_GetSlateVisibility_Development");
static_assert(offsetof(Tools_GetSlateVisibility_Development, _want) == 0x000000, "Member 'Tools_GetSlateVisibility_Development::_want' has a wrong offset!");
static_assert(offsetof(Tools_GetSlateVisibility_Development, ReturnValue) == 0x000001, "Member 'Tools_GetSlateVisibility_Development::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetSmallestTeam
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetSmallestTeam final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_team;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CA[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetSmallestTeam) == 0x000008, "Wrong alignment on Tools_GetSmallestTeam");
static_assert(sizeof(Tools_GetSmallestTeam) == 0x000010, "Wrong size on Tools_GetSmallestTeam");
static_assert(offsetof(Tools_GetSmallestTeam, _world_ctx) == 0x000000, "Member 'Tools_GetSmallestTeam::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetSmallestTeam, _max_team) == 0x000008, "Member 'Tools_GetSmallestTeam::_max_team' has a wrong offset!");
static_assert(offsetof(Tools_GetSmallestTeam, ReturnValue) == 0x00000C, "Member 'Tools_GetSmallestTeam::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetSocialContext
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetSocialContext final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USocialContext*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetSocialContext) == 0x000008, "Wrong alignment on Tools_GetSocialContext");
static_assert(sizeof(Tools_GetSocialContext) == 0x000010, "Wrong size on Tools_GetSocialContext");
static_assert(offsetof(Tools_GetSocialContext, _world_ctx) == 0x000000, "Member 'Tools_GetSocialContext::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetSocialContext, ReturnValue) == 0x000008, "Member 'Tools_GetSocialContext::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetSteamFriendList
// 0x0018 (0x0018 - 0x0000)
struct Tools_GetSteamFriendList final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserProfile*>                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetSteamFriendList) == 0x000008, "Wrong alignment on Tools_GetSteamFriendList");
static_assert(sizeof(Tools_GetSteamFriendList) == 0x000018, "Wrong size on Tools_GetSteamFriendList");
static_assert(offsetof(Tools_GetSteamFriendList, _world_ctx) == 0x000000, "Member 'Tools_GetSteamFriendList::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetSteamFriendList, ReturnValue) == 0x000008, "Member 'Tools_GetSteamFriendList::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetSurfaceMaterial
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetSurfaceMaterial final
{
public:
	const class UPhysicalMaterial*                _mat;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetSurfaceMaterial) == 0x000008, "Wrong alignment on Tools_GetSurfaceMaterial");
static_assert(sizeof(Tools_GetSurfaceMaterial) == 0x000010, "Wrong size on Tools_GetSurfaceMaterial");
static_assert(offsetof(Tools_GetSurfaceMaterial, _mat) == 0x000000, "Member 'Tools_GetSurfaceMaterial::_mat' has a wrong offset!");
static_assert(offsetof(Tools_GetSurfaceMaterial, ReturnValue) == 0x000008, "Member 'Tools_GetSurfaceMaterial::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTeamColorByPlayerState
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetTeamColorByPlayerState final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMatchServicedPlayerState*              _player_state;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetTeamColorByPlayerState) == 0x000008, "Wrong alignment on Tools_GetTeamColorByPlayerState");
static_assert(sizeof(Tools_GetTeamColorByPlayerState) == 0x000020, "Wrong size on Tools_GetTeamColorByPlayerState");
static_assert(offsetof(Tools_GetTeamColorByPlayerState, _world_ctx) == 0x000000, "Member 'Tools_GetTeamColorByPlayerState::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamColorByPlayerState, _player_state) == 0x000008, "Member 'Tools_GetTeamColorByPlayerState::_player_state' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamColorByPlayerState, ReturnValue) == 0x000010, "Member 'Tools_GetTeamColorByPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTeamColorByTeam
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetTeamColorByTeam final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        _other_team;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CC[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CD[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetTeamColorByTeam) == 0x000008, "Wrong alignment on Tools_GetTeamColorByTeam");
static_assert(sizeof(Tools_GetTeamColorByTeam) == 0x000020, "Wrong size on Tools_GetTeamColorByTeam");
static_assert(offsetof(Tools_GetTeamColorByTeam, _world_ctx) == 0x000000, "Member 'Tools_GetTeamColorByTeam::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamColorByTeam, _other_team) == 0x000008, "Member 'Tools_GetTeamColorByTeam::_other_team' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamColorByTeam, ReturnValue) == 0x00000C, "Member 'Tools_GetTeamColorByTeam::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTeamSide
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetTeamSide final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        _Team;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamSide                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CE[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetTeamSide) == 0x000008, "Wrong alignment on Tools_GetTeamSide");
static_assert(sizeof(Tools_GetTeamSide) == 0x000010, "Wrong size on Tools_GetTeamSide");
static_assert(offsetof(Tools_GetTeamSide, _world_ctx) == 0x000000, "Member 'Tools_GetTeamSide::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamSide, _Team) == 0x000008, "Member 'Tools_GetTeamSide::_Team' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamSide, ReturnValue) == 0x000009, "Member 'Tools_GetTeamSide::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTeamWRTSide
// 0x000C (0x000C - 0x0000)
struct Tools_GetTeamWRTSide final
{
public:
	ETeams                                        _base_team;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamSide                                     _side;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CF[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _max_team;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D0[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetTeamWRTSide) == 0x000004, "Wrong alignment on Tools_GetTeamWRTSide");
static_assert(sizeof(Tools_GetTeamWRTSide) == 0x00000C, "Wrong size on Tools_GetTeamWRTSide");
static_assert(offsetof(Tools_GetTeamWRTSide, _base_team) == 0x000000, "Member 'Tools_GetTeamWRTSide::_base_team' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamWRTSide, _side) == 0x000001, "Member 'Tools_GetTeamWRTSide::_side' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamWRTSide, _max_team) == 0x000004, "Member 'Tools_GetTeamWRTSide::_max_team' has a wrong offset!");
static_assert(offsetof(Tools_GetTeamWRTSide, ReturnValue) == 0x000008, "Member 'Tools_GetTeamWRTSide::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTextForCooltimeAndDuration
// 0x0028 (0x0028 - 0x0000)
struct Tools_GetTextForCooltimeAndDuration final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetTextForCooltimeAndDuration) == 0x000008, "Wrong alignment on Tools_GetTextForCooltimeAndDuration");
static_assert(sizeof(Tools_GetTextForCooltimeAndDuration) == 0x000028, "Wrong size on Tools_GetTextForCooltimeAndDuration");
static_assert(offsetof(Tools_GetTextForCooltimeAndDuration, _item_id) == 0x000000, "Member 'Tools_GetTextForCooltimeAndDuration::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_GetTextForCooltimeAndDuration, ReturnValue) == 0x000010, "Member 'Tools_GetTextForCooltimeAndDuration::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetToastManager
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetToastManager final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UToastManager*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetToastManager) == 0x000008, "Wrong alignment on Tools_GetToastManager");
static_assert(sizeof(Tools_GetToastManager) == 0x000010, "Wrong size on Tools_GetToastManager");
static_assert(offsetof(Tools_GetToastManager, _world_ctx) == 0x000000, "Member 'Tools_GetToastManager::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetToastManager, ReturnValue) == 0x000008, "Member 'Tools_GetToastManager::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTopLocalInvenItemByID
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetTopLocalInvenItemByID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _id;                                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInvenItem*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetTopLocalInvenItemByID) == 0x000008, "Wrong alignment on Tools_GetTopLocalInvenItemByID");
static_assert(sizeof(Tools_GetTopLocalInvenItemByID) == 0x000020, "Wrong size on Tools_GetTopLocalInvenItemByID");
static_assert(offsetof(Tools_GetTopLocalInvenItemByID, _world_ctx) == 0x000000, "Member 'Tools_GetTopLocalInvenItemByID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetTopLocalInvenItemByID, _id) == 0x000008, "Member 'Tools_GetTopLocalInvenItemByID::_id' has a wrong offset!");
static_assert(offsetof(Tools_GetTopLocalInvenItemByID, ReturnValue) == 0x000018, "Member 'Tools_GetTopLocalInvenItemByID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTopPopup
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetTopPopup final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPopupBase*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetTopPopup) == 0x000008, "Wrong alignment on Tools_GetTopPopup");
static_assert(sizeof(Tools_GetTopPopup) == 0x000010, "Wrong size on Tools_GetTopPopup");
static_assert(offsetof(Tools_GetTopPopup, _world_ctx) == 0x000000, "Member 'Tools_GetTopPopup::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetTopPopup, ReturnValue) == 0x000008, "Member 'Tools_GetTopPopup::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetTraceValue
// 0x001C (0x001C - 0x0000)
struct Tools_GetTraceValue final
{
public:
	float                                         _target_value;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _trace_value;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _time_add_value;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _time_sub_value;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _min;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetTraceValue) == 0x000004, "Wrong alignment on Tools_GetTraceValue");
static_assert(sizeof(Tools_GetTraceValue) == 0x00001C, "Wrong size on Tools_GetTraceValue");
static_assert(offsetof(Tools_GetTraceValue, _target_value) == 0x000000, "Member 'Tools_GetTraceValue::_target_value' has a wrong offset!");
static_assert(offsetof(Tools_GetTraceValue, _trace_value) == 0x000004, "Member 'Tools_GetTraceValue::_trace_value' has a wrong offset!");
static_assert(offsetof(Tools_GetTraceValue, _time_add_value) == 0x000008, "Member 'Tools_GetTraceValue::_time_add_value' has a wrong offset!");
static_assert(offsetof(Tools_GetTraceValue, _time_sub_value) == 0x00000C, "Member 'Tools_GetTraceValue::_time_sub_value' has a wrong offset!");
static_assert(offsetof(Tools_GetTraceValue, _min) == 0x000010, "Member 'Tools_GetTraceValue::_min' has a wrong offset!");
static_assert(offsetof(Tools_GetTraceValue, _max) == 0x000014, "Member 'Tools_GetTraceValue::_max' has a wrong offset!");
static_assert(offsetof(Tools_GetTraceValue, ReturnValue) == 0x000018, "Member 'Tools_GetTraceValue::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserExp
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserExp final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D1[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetUserExp) == 0x000008, "Wrong alignment on Tools_GetUserExp");
static_assert(sizeof(Tools_GetUserExp) == 0x000010, "Wrong size on Tools_GetUserExp");
static_assert(offsetof(Tools_GetUserExp, _world_ctx) == 0x000000, "Member 'Tools_GetUserExp::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserExp, ReturnValue) == 0x000008, "Member 'Tools_GetUserExp::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserExpPercent
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserExpPercent final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D2[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetUserExpPercent) == 0x000008, "Wrong alignment on Tools_GetUserExpPercent");
static_assert(sizeof(Tools_GetUserExpPercent) == 0x000010, "Wrong size on Tools_GetUserExpPercent");
static_assert(offsetof(Tools_GetUserExpPercent, _world_ctx) == 0x000000, "Member 'Tools_GetUserExpPercent::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserExpPercent, ReturnValue) == 0x000008, "Member 'Tools_GetUserExpPercent::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserID
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetUserID) == 0x000008, "Wrong alignment on Tools_GetUserID");
static_assert(sizeof(Tools_GetUserID) == 0x000010, "Wrong size on Tools_GetUserID");
static_assert(offsetof(Tools_GetUserID, _world_ctx) == 0x000000, "Member 'Tools_GetUserID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserID, ReturnValue) == 0x000008, "Member 'Tools_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserLevel
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserLevel final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D3[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetUserLevel) == 0x000008, "Wrong alignment on Tools_GetUserLevel");
static_assert(sizeof(Tools_GetUserLevel) == 0x000010, "Wrong size on Tools_GetUserLevel");
static_assert(offsetof(Tools_GetUserLevel, _world_ctx) == 0x000000, "Member 'Tools_GetUserLevel::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserLevel, ReturnValue) == 0x000008, "Member 'Tools_GetUserLevel::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserNextExp
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserNextExp final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetUserNextExp) == 0x000008, "Wrong alignment on Tools_GetUserNextExp");
static_assert(sizeof(Tools_GetUserNextExp) == 0x000010, "Wrong size on Tools_GetUserNextExp");
static_assert(offsetof(Tools_GetUserNextExp, _world_ctx) == 0x000000, "Member 'Tools_GetUserNextExp::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserNextExp, ReturnValue) == 0x000008, "Member 'Tools_GetUserNextExp::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserNickName
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetUserNickName final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetUserNickName) == 0x000008, "Wrong alignment on Tools_GetUserNickName");
static_assert(sizeof(Tools_GetUserNickName) == 0x000020, "Wrong size on Tools_GetUserNickName");
static_assert(offsetof(Tools_GetUserNickName, _world_ctx) == 0x000000, "Member 'Tools_GetUserNickName::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserNickName, ReturnValue) == 0x000008, "Member 'Tools_GetUserNickName::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserOptionSubSystem
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserOptionSubSystem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserOption*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_GetUserOptionSubSystem) == 0x000008, "Wrong alignment on Tools_GetUserOptionSubSystem");
static_assert(sizeof(Tools_GetUserOptionSubSystem) == 0x000010, "Wrong size on Tools_GetUserOptionSubSystem");
static_assert(offsetof(Tools_GetUserOptionSubSystem, _world_ctx) == 0x000000, "Member 'Tools_GetUserOptionSubSystem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserOptionSubSystem, ReturnValue) == 0x000008, "Member 'Tools_GetUserOptionSubSystem::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserPassiveSkillLevel
// 0x0020 (0x0020 - 0x0000)
struct Tools_GetUserPassiveSkillLevel final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPassiveSkillID                        _skill_id;                                         // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D5[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetUserPassiveSkillLevel) == 0x000008, "Wrong alignment on Tools_GetUserPassiveSkillLevel");
static_assert(sizeof(Tools_GetUserPassiveSkillLevel) == 0x000020, "Wrong size on Tools_GetUserPassiveSkillLevel");
static_assert(offsetof(Tools_GetUserPassiveSkillLevel, _world_ctx) == 0x000000, "Member 'Tools_GetUserPassiveSkillLevel::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserPassiveSkillLevel, _skill_id) == 0x000008, "Member 'Tools_GetUserPassiveSkillLevel::_skill_id' has a wrong offset!");
static_assert(offsetof(Tools_GetUserPassiveSkillLevel, ReturnValue) == 0x000018, "Member 'Tools_GetUserPassiveSkillLevel::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.GetUserRole
// 0x0010 (0x0010 - 0x0000)
struct Tools_GetUserRole final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserRole                              ReturnValue;                                       // 0x0008(0x0003)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D6[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_GetUserRole) == 0x000008, "Wrong alignment on Tools_GetUserRole");
static_assert(sizeof(Tools_GetUserRole) == 0x000010, "Wrong size on Tools_GetUserRole");
static_assert(offsetof(Tools_GetUserRole, _world_ctx) == 0x000000, "Member 'Tools_GetUserRole::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_GetUserRole, ReturnValue) == 0x000008, "Member 'Tools_GetUserRole::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.HasCharacter
// 0x0010 (0x0010 - 0x0000)
struct Tools_HasCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D7[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_HasCharacter) == 0x000008, "Wrong alignment on Tools_HasCharacter");
static_assert(sizeof(Tools_HasCharacter) == 0x000010, "Wrong size on Tools_HasCharacter");
static_assert(offsetof(Tools_HasCharacter, _world_ctx) == 0x000000, "Member 'Tools_HasCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_HasCharacter, _chara_type) == 0x000008, "Member 'Tools_HasCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_HasCharacter, ReturnValue) == 0x000009, "Member 'Tools_HasCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.HasGun
// 0x0010 (0x0010 - 0x0000)
struct Tools_HasGun final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D8[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_HasGun) == 0x000008, "Wrong alignment on Tools_HasGun");
static_assert(sizeof(Tools_HasGun) == 0x000010, "Wrong size on Tools_HasGun");
static_assert(offsetof(Tools_HasGun, _world_ctx) == 0x000000, "Member 'Tools_HasGun::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_HasGun, _gun_type) == 0x000008, "Member 'Tools_HasGun::_gun_type' has a wrong offset!");
static_assert(offsetof(Tools_HasGun, ReturnValue) == 0x000009, "Member 'Tools_HasGun::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.HasItem
// 0x0020 (0x0020 - 0x0000)
struct Tools_HasItem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_HasItem) == 0x000008, "Wrong alignment on Tools_HasItem");
static_assert(sizeof(Tools_HasItem) == 0x000020, "Wrong size on Tools_HasItem");
static_assert(offsetof(Tools_HasItem, _world_ctx) == 0x000000, "Member 'Tools_HasItem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_HasItem, _item_id) == 0x000008, "Member 'Tools_HasItem::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_HasItem, ReturnValue) == 0x000018, "Member 'Tools_HasItem::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.HasUniqueItem
// 0x0020 (0x0020 - 0x0000)
struct Tools_HasUniqueItem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24DA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_HasUniqueItem) == 0x000008, "Wrong alignment on Tools_HasUniqueItem");
static_assert(sizeof(Tools_HasUniqueItem) == 0x000020, "Wrong size on Tools_HasUniqueItem");
static_assert(offsetof(Tools_HasUniqueItem, _world_ctx) == 0x000000, "Member 'Tools_HasUniqueItem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_HasUniqueItem, _item_id) == 0x000008, "Member 'Tools_HasUniqueItem::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_HasUniqueItem, ReturnValue) == 0x000018, "Member 'Tools_HasUniqueItem::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.HideAllGameNotifies
// 0x0010 (0x0010 - 0x0000)
struct Tools_HideAllGameNotifies final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24DB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_HideAllGameNotifies) == 0x000008, "Wrong alignment on Tools_HideAllGameNotifies");
static_assert(sizeof(Tools_HideAllGameNotifies) == 0x000010, "Wrong size on Tools_HideAllGameNotifies");
static_assert(offsetof(Tools_HideAllGameNotifies, _world_ctx) == 0x000000, "Member 'Tools_HideAllGameNotifies::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_HideAllGameNotifies, _hide) == 0x000008, "Member 'Tools_HideAllGameNotifies::_hide' has a wrong offset!");

// Function Stigma.Tools.HideUI
// 0x0010 (0x0010 - 0x0000)
struct Tools_HideUI final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24DC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_HideUI) == 0x000008, "Wrong alignment on Tools_HideUI");
static_assert(sizeof(Tools_HideUI) == 0x000010, "Wrong size on Tools_HideUI");
static_assert(offsetof(Tools_HideUI, _world_ctx) == 0x000000, "Member 'Tools_HideUI::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_HideUI, _hide) == 0x000008, "Member 'Tools_HideUI::_hide' has a wrong offset!");

// Function Stigma.Tools.IsCurrentCharaEquipedItemID
// 0x0020 (0x0020 - 0x0000)
struct Tools_IsCurrentCharaEquipedItemID final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24DD[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsCurrentCharaEquipedItemID) == 0x000008, "Wrong alignment on Tools_IsCurrentCharaEquipedItemID");
static_assert(sizeof(Tools_IsCurrentCharaEquipedItemID) == 0x000020, "Wrong size on Tools_IsCurrentCharaEquipedItemID");
static_assert(offsetof(Tools_IsCurrentCharaEquipedItemID, _world_ctx) == 0x000000, "Member 'Tools_IsCurrentCharaEquipedItemID::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsCurrentCharaEquipedItemID, _item_id) == 0x000008, "Member 'Tools_IsCurrentCharaEquipedItemID::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_IsCurrentCharaEquipedItemID, ReturnValue) == 0x000018, "Member 'Tools_IsCurrentCharaEquipedItemID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsCustomGame
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsCustomGame final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24DE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsCustomGame) == 0x000008, "Wrong alignment on Tools_IsCustomGame");
static_assert(sizeof(Tools_IsCustomGame) == 0x000010, "Wrong size on Tools_IsCustomGame");
static_assert(offsetof(Tools_IsCustomGame, _world_ctx) == 0x000000, "Member 'Tools_IsCustomGame::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsCustomGame, ReturnValue) == 0x000008, "Member 'Tools_IsCustomGame::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsEqual
// 0x0005 (0x0005 - 0x0000)
struct Tools_IsEqual final
{
public:
	struct FNetID                                 _net_id_a;                                         // 0x0000(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetID                                 _net_id_b;                                         // 0x0002(0x0002)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_IsEqual) == 0x000001, "Wrong alignment on Tools_IsEqual");
static_assert(sizeof(Tools_IsEqual) == 0x000005, "Wrong size on Tools_IsEqual");
static_assert(offsetof(Tools_IsEqual, _net_id_a) == 0x000000, "Member 'Tools_IsEqual::_net_id_a' has a wrong offset!");
static_assert(offsetof(Tools_IsEqual, _net_id_b) == 0x000002, "Member 'Tools_IsEqual::_net_id_b' has a wrong offset!");
static_assert(offsetof(Tools_IsEqual, ReturnValue) == 0x000004, "Member 'Tools_IsEqual::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsEquipedPassiveAndBoosterFromCurrentCharacter
// 0x0020 (0x0020 - 0x0000)
struct Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24DF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter) == 0x000008, "Wrong alignment on Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter");
static_assert(sizeof(Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter) == 0x000020, "Wrong size on Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter");
static_assert(offsetof(Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter, _world_ctx) == 0x000000, "Member 'Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter, _item_id) == 0x000008, "Member 'Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter, ReturnValue) == 0x000018, "Member 'Tools_IsEquipedPassiveAndBoosterFromCurrentCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsGoodAck
// 0x000C (0x000C - 0x0000)
struct Tools_IsGoodAck final
{
public:
	struct FApiResult                             _ack;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E0[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsGoodAck) == 0x000004, "Wrong alignment on Tools_IsGoodAck");
static_assert(sizeof(Tools_IsGoodAck) == 0x00000C, "Wrong size on Tools_IsGoodAck");
static_assert(offsetof(Tools_IsGoodAck, _ack) == 0x000000, "Member 'Tools_IsGoodAck::_ack' has a wrong offset!");
static_assert(offsetof(Tools_IsGoodAck, ReturnValue) == 0x000008, "Member 'Tools_IsGoodAck::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsGunAccessoryID
// 0x0018 (0x0018 - 0x0000)
struct Tools_IsGunAccessoryID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E1[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsGunAccessoryID) == 0x000008, "Wrong alignment on Tools_IsGunAccessoryID");
static_assert(sizeof(Tools_IsGunAccessoryID) == 0x000018, "Wrong size on Tools_IsGunAccessoryID");
static_assert(offsetof(Tools_IsGunAccessoryID, _item_id) == 0x000000, "Member 'Tools_IsGunAccessoryID::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_IsGunAccessoryID, ReturnValue) == 0x000010, "Member 'Tools_IsGunAccessoryID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsMatchableTime
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsMatchableTime final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsMatchableTime) == 0x000008, "Wrong alignment on Tools_IsMatchableTime");
static_assert(sizeof(Tools_IsMatchableTime) == 0x000010, "Wrong size on Tools_IsMatchableTime");
static_assert(offsetof(Tools_IsMatchableTime, _world_ctx) == 0x000000, "Member 'Tools_IsMatchableTime::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsMatchableTime, ReturnValue) == 0x000008, "Member 'Tools_IsMatchableTime::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsNowBattleMode
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsNowBattleMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _allow_only_real_battle;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E3[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsNowBattleMode) == 0x000008, "Wrong alignment on Tools_IsNowBattleMode");
static_assert(sizeof(Tools_IsNowBattleMode) == 0x000010, "Wrong size on Tools_IsNowBattleMode");
static_assert(offsetof(Tools_IsNowBattleMode, _world_ctx) == 0x000000, "Member 'Tools_IsNowBattleMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsNowBattleMode, _allow_only_real_battle) == 0x000008, "Member 'Tools_IsNowBattleMode::_allow_only_real_battle' has a wrong offset!");
static_assert(offsetof(Tools_IsNowBattleMode, ReturnValue) == 0x000009, "Member 'Tools_IsNowBattleMode::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsNPC
// 0x0002 (0x0002 - 0x0000)
struct Tools_IsNPC final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_IsNPC) == 0x000001, "Wrong alignment on Tools_IsNPC");
static_assert(sizeof(Tools_IsNPC) == 0x000002, "Wrong size on Tools_IsNPC");
static_assert(offsetof(Tools_IsNPC, _chara_type) == 0x000000, "Member 'Tools_IsNPC::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_IsNPC, ReturnValue) == 0x000001, "Member 'Tools_IsNPC::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsPVPMode
// 0x0002 (0x0002 - 0x0000)
struct Tools_IsPVPMode final
{
public:
	EGameMode                                     _game_mode_type;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_IsPVPMode) == 0x000001, "Wrong alignment on Tools_IsPVPMode");
static_assert(sizeof(Tools_IsPVPMode) == 0x000002, "Wrong size on Tools_IsPVPMode");
static_assert(offsetof(Tools_IsPVPMode, _game_mode_type) == 0x000000, "Member 'Tools_IsPVPMode::_game_mode_type' has a wrong offset!");
static_assert(offsetof(Tools_IsPVPMode, ReturnValue) == 0x000001, "Member 'Tools_IsPVPMode::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsSelectableCharacterPickUI
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsSelectableCharacterPickUI final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsSelectableCharacterPickUI) == 0x000008, "Wrong alignment on Tools_IsSelectableCharacterPickUI");
static_assert(sizeof(Tools_IsSelectableCharacterPickUI) == 0x000010, "Wrong size on Tools_IsSelectableCharacterPickUI");
static_assert(offsetof(Tools_IsSelectableCharacterPickUI, _world_ctx) == 0x000000, "Member 'Tools_IsSelectableCharacterPickUI::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsSelectableCharacterPickUI, ReturnValue) == 0x000008, "Member 'Tools_IsSelectableCharacterPickUI::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsSupportedArmor
// 0x0018 (0x0018 - 0x0000)
struct Tools_IsSupportedArmor final
{
public:
	struct FItemID_Skin_Body                      _body_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    _armor_type;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E5[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsSupportedArmor) == 0x000008, "Wrong alignment on Tools_IsSupportedArmor");
static_assert(sizeof(Tools_IsSupportedArmor) == 0x000018, "Wrong size on Tools_IsSupportedArmor");
static_assert(offsetof(Tools_IsSupportedArmor, _body_id) == 0x000000, "Member 'Tools_IsSupportedArmor::_body_id' has a wrong offset!");
static_assert(offsetof(Tools_IsSupportedArmor, _armor_type) == 0x000010, "Member 'Tools_IsSupportedArmor::_armor_type' has a wrong offset!");
static_assert(offsetof(Tools_IsSupportedArmor, ReturnValue) == 0x000011, "Member 'Tools_IsSupportedArmor::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsTheOnlyMatachableGameMode
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsTheOnlyMatachableGameMode final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E6[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsTheOnlyMatachableGameMode) == 0x000008, "Wrong alignment on Tools_IsTheOnlyMatachableGameMode");
static_assert(sizeof(Tools_IsTheOnlyMatachableGameMode) == 0x000010, "Wrong size on Tools_IsTheOnlyMatachableGameMode");
static_assert(offsetof(Tools_IsTheOnlyMatachableGameMode, _world_ctx) == 0x000000, "Member 'Tools_IsTheOnlyMatachableGameMode::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsTheOnlyMatachableGameMode, _game_mode) == 0x000008, "Member 'Tools_IsTheOnlyMatachableGameMode::_game_mode' has a wrong offset!");
static_assert(offsetof(Tools_IsTheOnlyMatachableGameMode, ReturnValue) == 0x000009, "Member 'Tools_IsTheOnlyMatachableGameMode::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsUnlimitedBooster
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsUnlimitedBooster final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsUnlimitedBooster) == 0x000008, "Wrong alignment on Tools_IsUnlimitedBooster");
static_assert(sizeof(Tools_IsUnlimitedBooster) == 0x000010, "Wrong size on Tools_IsUnlimitedBooster");
static_assert(offsetof(Tools_IsUnlimitedBooster, _world_ctx) == 0x000000, "Member 'Tools_IsUnlimitedBooster::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsUnlimitedBooster, ReturnValue) == 0x000008, "Member 'Tools_IsUnlimitedBooster::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsUpcommingCharacter
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsUpcommingCharacter final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E8[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsUpcommingCharacter) == 0x000008, "Wrong alignment on Tools_IsUpcommingCharacter");
static_assert(sizeof(Tools_IsUpcommingCharacter) == 0x000010, "Wrong size on Tools_IsUpcommingCharacter");
static_assert(offsetof(Tools_IsUpcommingCharacter, _world_ctx) == 0x000000, "Member 'Tools_IsUpcommingCharacter::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsUpcommingCharacter, _chara_type) == 0x000008, "Member 'Tools_IsUpcommingCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(Tools_IsUpcommingCharacter, ReturnValue) == 0x000009, "Member 'Tools_IsUpcommingCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsUpcommingItem
// 0x0002 (0x0002 - 0x0000)
struct Tools_IsUpcommingItem final
{
public:
	EItemStage                                    _stage;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_IsUpcommingItem) == 0x000001, "Wrong alignment on Tools_IsUpcommingItem");
static_assert(sizeof(Tools_IsUpcommingItem) == 0x000002, "Wrong size on Tools_IsUpcommingItem");
static_assert(offsetof(Tools_IsUpcommingItem, _stage) == 0x000000, "Member 'Tools_IsUpcommingItem::_stage' has a wrong offset!");
static_assert(offsetof(Tools_IsUpcommingItem, ReturnValue) == 0x000001, "Member 'Tools_IsUpcommingItem::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsUseableItem
// 0x0002 (0x0002 - 0x0000)
struct Tools_IsUseableItem final
{
public:
	EItemStage                                    _stage;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_IsUseableItem) == 0x000001, "Wrong alignment on Tools_IsUseableItem");
static_assert(sizeof(Tools_IsUseableItem) == 0x000002, "Wrong size on Tools_IsUseableItem");
static_assert(offsetof(Tools_IsUseableItem, _stage) == 0x000000, "Member 'Tools_IsUseableItem::_stage' has a wrong offset!");
static_assert(offsetof(Tools_IsUseableItem, ReturnValue) == 0x000001, "Member 'Tools_IsUseableItem::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsUseableItemID
// 0x0018 (0x0018 - 0x0000)
struct Tools_IsUseableItemID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E9[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsUseableItemID) == 0x000008, "Wrong alignment on Tools_IsUseableItemID");
static_assert(sizeof(Tools_IsUseableItemID) == 0x000018, "Wrong size on Tools_IsUseableItemID");
static_assert(offsetof(Tools_IsUseableItemID, _item_id) == 0x000000, "Member 'Tools_IsUseableItemID::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_IsUseableItemID, ReturnValue) == 0x000010, "Member 'Tools_IsUseableItemID::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsVisibleRedDotOnAttachableParts
// 0x0010 (0x0010 - 0x0000)
struct Tools_IsVisibleRedDotOnAttachableParts final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EA[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsVisibleRedDotOnAttachableParts) == 0x000008, "Wrong alignment on Tools_IsVisibleRedDotOnAttachableParts");
static_assert(sizeof(Tools_IsVisibleRedDotOnAttachableParts) == 0x000010, "Wrong size on Tools_IsVisibleRedDotOnAttachableParts");
static_assert(offsetof(Tools_IsVisibleRedDotOnAttachableParts, _world_ctx) == 0x000000, "Member 'Tools_IsVisibleRedDotOnAttachableParts::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsVisibleRedDotOnAttachableParts, _gun_type) == 0x000008, "Member 'Tools_IsVisibleRedDotOnAttachableParts::_gun_type' has a wrong offset!");
static_assert(offsetof(Tools_IsVisibleRedDotOnAttachableParts, ReturnValue) == 0x000009, "Member 'Tools_IsVisibleRedDotOnAttachableParts::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.IsVisibleRedDotOnGun
// 0x0018 (0x0018 - 0x0000)
struct Tools_IsVisibleRedDotOnGun final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGunObject*                       _gun_object;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_IsVisibleRedDotOnGun) == 0x000008, "Wrong alignment on Tools_IsVisibleRedDotOnGun");
static_assert(sizeof(Tools_IsVisibleRedDotOnGun) == 0x000018, "Wrong size on Tools_IsVisibleRedDotOnGun");
static_assert(offsetof(Tools_IsVisibleRedDotOnGun, _world_ctx) == 0x000000, "Member 'Tools_IsVisibleRedDotOnGun::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_IsVisibleRedDotOnGun, _gun_object) == 0x000008, "Member 'Tools_IsVisibleRedDotOnGun::_gun_object' has a wrong offset!");
static_assert(offsetof(Tools_IsVisibleRedDotOnGun, ReturnValue) == 0x000010, "Member 'Tools_IsVisibleRedDotOnGun::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.JudgePingQuality
// 0x0008 (0x0008 - 0x0000)
struct Tools_JudgePingQuality final
{
public:
	int32                                         _ping_ms;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPingQuality                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_JudgePingQuality) == 0x000004, "Wrong alignment on Tools_JudgePingQuality");
static_assert(sizeof(Tools_JudgePingQuality) == 0x000008, "Wrong size on Tools_JudgePingQuality");
static_assert(offsetof(Tools_JudgePingQuality, _ping_ms) == 0x000000, "Member 'Tools_JudgePingQuality::_ping_ms' has a wrong offset!");
static_assert(offsetof(Tools_JudgePingQuality, ReturnValue) == 0x000004, "Member 'Tools_JudgePingQuality::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.NetReplyFromCode
// 0x0028 (0x0028 - 0x0000)
struct Tools_NetReplyFromCode final
{
public:
	EResultCode                                   _code;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24ED[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FNetReply                              ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_NetReplyFromCode) == 0x000008, "Wrong alignment on Tools_NetReplyFromCode");
static_assert(sizeof(Tools_NetReplyFromCode) == 0x000028, "Wrong size on Tools_NetReplyFromCode");
static_assert(offsetof(Tools_NetReplyFromCode, _code) == 0x000000, "Member 'Tools_NetReplyFromCode::_code' has a wrong offset!");
static_assert(offsetof(Tools_NetReplyFromCode, ReturnValue) == 0x000008, "Member 'Tools_NetReplyFromCode::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.NormalizeRandomBoxProbability
// 0x0010 (0x0010 - 0x0000)
struct Tools_NormalizeRandomBoxProbability final
{
public:
	TArray<struct FRandomItemEntry>               _list;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_NormalizeRandomBoxProbability) == 0x000008, "Wrong alignment on Tools_NormalizeRandomBoxProbability");
static_assert(sizeof(Tools_NormalizeRandomBoxProbability) == 0x000010, "Wrong size on Tools_NormalizeRandomBoxProbability");
static_assert(offsetof(Tools_NormalizeRandomBoxProbability, _list) == 0x000000, "Member 'Tools_NormalizeRandomBoxProbability::_list' has a wrong offset!");

// Function Stigma.Tools.OverrideWishedGameMode
// 0x0040 (0x0040 - 0x0000)
struct Tools_OverrideWishedGameMode final
{
public:
	struct FMatchOption                           _option;                                           // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EE[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_OverrideWishedGameMode) == 0x000008, "Wrong alignment on Tools_OverrideWishedGameMode");
static_assert(sizeof(Tools_OverrideWishedGameMode) == 0x000040, "Wrong size on Tools_OverrideWishedGameMode");
static_assert(offsetof(Tools_OverrideWishedGameMode, _option) == 0x000000, "Member 'Tools_OverrideWishedGameMode::_option' has a wrong offset!");
static_assert(offsetof(Tools_OverrideWishedGameMode, _game_mode) == 0x000038, "Member 'Tools_OverrideWishedGameMode::_game_mode' has a wrong offset!");

// Function Stigma.Tools.PopupESCMenu
// 0x0008 (0x0008 - 0x0000)
struct Tools_PopupESCMenu final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_PopupESCMenu) == 0x000008, "Wrong alignment on Tools_PopupESCMenu");
static_assert(sizeof(Tools_PopupESCMenu) == 0x000008, "Wrong size on Tools_PopupESCMenu");
static_assert(offsetof(Tools_PopupESCMenu, _world_ctx) == 0x000000, "Member 'Tools_PopupESCMenu::_world_ctx' has a wrong offset!");

// Function Stigma.Tools.ProcessWebCommands
// 0x0018 (0x0018 - 0x0000)
struct Tools_ProcessWebCommands final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _cmd_line;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_ProcessWebCommands) == 0x000008, "Wrong alignment on Tools_ProcessWebCommands");
static_assert(sizeof(Tools_ProcessWebCommands) == 0x000018, "Wrong size on Tools_ProcessWebCommands");
static_assert(offsetof(Tools_ProcessWebCommands, _world_ctx) == 0x000000, "Member 'Tools_ProcessWebCommands::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ProcessWebCommands, _cmd_line) == 0x000008, "Member 'Tools_ProcessWebCommands::_cmd_line' has a wrong offset!");

// Function Stigma.Tools.ReBuildEnhancedInput
// 0x0010 (0x0010 - 0x0000)
struct Tools_ReBuildEnhancedInput final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputMappingRebuildType                      _rebuild_type;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24EF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_ReBuildEnhancedInput) == 0x000008, "Wrong alignment on Tools_ReBuildEnhancedInput");
static_assert(sizeof(Tools_ReBuildEnhancedInput) == 0x000010, "Wrong size on Tools_ReBuildEnhancedInput");
static_assert(offsetof(Tools_ReBuildEnhancedInput, _world_ctx) == 0x000000, "Member 'Tools_ReBuildEnhancedInput::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ReBuildEnhancedInput, _rebuild_type) == 0x000008, "Member 'Tools_ReBuildEnhancedInput::_rebuild_type' has a wrong offset!");

// Function Stigma.Tools.RegisterNotify_OnLoad_Characters
// 0x0018 (0x0018 - 0x0000)
struct Tools_RegisterNotify_OnLoad_Characters final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             _callback;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_RegisterNotify_OnLoad_Characters) == 0x000008, "Wrong alignment on Tools_RegisterNotify_OnLoad_Characters");
static_assert(sizeof(Tools_RegisterNotify_OnLoad_Characters) == 0x000018, "Wrong size on Tools_RegisterNotify_OnLoad_Characters");
static_assert(offsetof(Tools_RegisterNotify_OnLoad_Characters, _world_ctx) == 0x000000, "Member 'Tools_RegisterNotify_OnLoad_Characters::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_RegisterNotify_OnLoad_Characters, _callback) == 0x000008, "Member 'Tools_RegisterNotify_OnLoad_Characters::_callback' has a wrong offset!");

// Function Stigma.Tools.RegisterNotify_OnLoad_UserInfo
// 0x0018 (0x0018 - 0x0000)
struct Tools_RegisterNotify_OnLoad_UserInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             _callback;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_RegisterNotify_OnLoad_UserInfo) == 0x000008, "Wrong alignment on Tools_RegisterNotify_OnLoad_UserInfo");
static_assert(sizeof(Tools_RegisterNotify_OnLoad_UserInfo) == 0x000018, "Wrong size on Tools_RegisterNotify_OnLoad_UserInfo");
static_assert(offsetof(Tools_RegisterNotify_OnLoad_UserInfo, _world_ctx) == 0x000000, "Member 'Tools_RegisterNotify_OnLoad_UserInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_RegisterNotify_OnLoad_UserInfo, _callback) == 0x000008, "Member 'Tools_RegisterNotify_OnLoad_UserInfo::_callback' has a wrong offset!");

// Function Stigma.Tools.RemoveGameNotify
// 0x0018 (0x0018 - 0x0000)
struct Tools_RemoveGameNotify final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _notify_name;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _force_remove;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F0[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_RemoveGameNotify) == 0x000008, "Wrong alignment on Tools_RemoveGameNotify");
static_assert(sizeof(Tools_RemoveGameNotify) == 0x000018, "Wrong size on Tools_RemoveGameNotify");
static_assert(offsetof(Tools_RemoveGameNotify, _world_ctx) == 0x000000, "Member 'Tools_RemoveGameNotify::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_RemoveGameNotify, _notify_name) == 0x000008, "Member 'Tools_RemoveGameNotify::_notify_name' has a wrong offset!");
static_assert(offsetof(Tools_RemoveGameNotify, _force_remove) == 0x000010, "Member 'Tools_RemoveGameNotify::_force_remove' has a wrong offset!");

// Function Stigma.Tools.RemoveWidgetAsHUD
// 0x0010 (0x0010 - 0x0000)
struct Tools_RemoveWidgetAsHUD final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                _widget;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_RemoveWidgetAsHUD) == 0x000008, "Wrong alignment on Tools_RemoveWidgetAsHUD");
static_assert(sizeof(Tools_RemoveWidgetAsHUD) == 0x000010, "Wrong size on Tools_RemoveWidgetAsHUD");
static_assert(offsetof(Tools_RemoveWidgetAsHUD, _world_ctx) == 0x000000, "Member 'Tools_RemoveWidgetAsHUD::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_RemoveWidgetAsHUD, _widget) == 0x000008, "Member 'Tools_RemoveWidgetAsHUD::_widget' has a wrong offset!");

// Function Stigma.Tools.SetAskedFriends
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetAskedFriends final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFriend>                        _asked_friends;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetAskedFriends) == 0x000008, "Wrong alignment on Tools_SetAskedFriends");
static_assert(sizeof(Tools_SetAskedFriends) == 0x000020, "Wrong size on Tools_SetAskedFriends");
static_assert(offsetof(Tools_SetAskedFriends, _world_ctx) == 0x000000, "Member 'Tools_SetAskedFriends::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetAskedFriends, _asked_friends) == 0x000008, "Member 'Tools_SetAskedFriends::_asked_friends' has a wrong offset!");
static_assert(offsetof(Tools_SetAskedFriends, ReturnValue) == 0x000018, "Member 'Tools_SetAskedFriends::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.SetButtonStyleImage
// 0x0030 (0x0030 - 0x0000)
struct Tools_SetButtonStyleImage final
{
public:
	class UButton*                                _button;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             _normal_texture;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             _hover_texture;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             _click_texture;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             _disable_texture;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _resize;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetButtonStyleImage) == 0x000008, "Wrong alignment on Tools_SetButtonStyleImage");
static_assert(sizeof(Tools_SetButtonStyleImage) == 0x000030, "Wrong size on Tools_SetButtonStyleImage");
static_assert(offsetof(Tools_SetButtonStyleImage, _button) == 0x000000, "Member 'Tools_SetButtonStyleImage::_button' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleImage, _normal_texture) == 0x000008, "Member 'Tools_SetButtonStyleImage::_normal_texture' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleImage, _hover_texture) == 0x000010, "Member 'Tools_SetButtonStyleImage::_hover_texture' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleImage, _click_texture) == 0x000018, "Member 'Tools_SetButtonStyleImage::_click_texture' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleImage, _disable_texture) == 0x000020, "Member 'Tools_SetButtonStyleImage::_disable_texture' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleImage, _resize) == 0x000028, "Member 'Tools_SetButtonStyleImage::_resize' has a wrong offset!");

// Function Stigma.Tools.SetButtonStyleTintColor
// 0x0048 (0x0048 - 0x0000)
struct Tools_SetButtonStyleTintColor final
{
public:
	class UButton*                                _button;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _normal_color;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _hover_color;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _click_color;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _disabled_color;                                   // 0x0038(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_SetButtonStyleTintColor) == 0x000008, "Wrong alignment on Tools_SetButtonStyleTintColor");
static_assert(sizeof(Tools_SetButtonStyleTintColor) == 0x000048, "Wrong size on Tools_SetButtonStyleTintColor");
static_assert(offsetof(Tools_SetButtonStyleTintColor, _button) == 0x000000, "Member 'Tools_SetButtonStyleTintColor::_button' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleTintColor, _normal_color) == 0x000008, "Member 'Tools_SetButtonStyleTintColor::_normal_color' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleTintColor, _hover_color) == 0x000018, "Member 'Tools_SetButtonStyleTintColor::_hover_color' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleTintColor, _click_color) == 0x000028, "Member 'Tools_SetButtonStyleTintColor::_click_color' has a wrong offset!");
static_assert(offsetof(Tools_SetButtonStyleTintColor, _disabled_color) == 0x000038, "Member 'Tools_SetButtonStyleTintColor::_disabled_color' has a wrong offset!");

// Function Stigma.Tools.SetInputBlocked
// 0x0010 (0x0010 - 0x0000)
struct Tools_SetInputBlocked final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_blocked;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetInputBlocked) == 0x000008, "Wrong alignment on Tools_SetInputBlocked");
static_assert(sizeof(Tools_SetInputBlocked) == 0x000010, "Wrong size on Tools_SetInputBlocked");
static_assert(offsetof(Tools_SetInputBlocked, _world_ctx) == 0x000000, "Member 'Tools_SetInputBlocked::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetInputBlocked, _is_blocked) == 0x000008, "Member 'Tools_SetInputBlocked::_is_blocked' has a wrong offset!");

// Function Stigma.Tools.SetLobbyCurrencyBox
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetLobbyCurrencyBox final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Currency>               _currency_ids;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          _use_wallet;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_quick_purchase;                               // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F4[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetLobbyCurrencyBox) == 0x000008, "Wrong alignment on Tools_SetLobbyCurrencyBox");
static_assert(sizeof(Tools_SetLobbyCurrencyBox) == 0x000020, "Wrong size on Tools_SetLobbyCurrencyBox");
static_assert(offsetof(Tools_SetLobbyCurrencyBox, _world_ctx) == 0x000000, "Member 'Tools_SetLobbyCurrencyBox::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetLobbyCurrencyBox, _currency_ids) == 0x000008, "Member 'Tools_SetLobbyCurrencyBox::_currency_ids' has a wrong offset!");
static_assert(offsetof(Tools_SetLobbyCurrencyBox, _use_wallet) == 0x000018, "Member 'Tools_SetLobbyCurrencyBox::_use_wallet' has a wrong offset!");
static_assert(offsetof(Tools_SetLobbyCurrencyBox, _use_quick_purchase) == 0x000019, "Member 'Tools_SetLobbyCurrencyBox::_use_quick_purchase' has a wrong offset!");

// Function Stigma.Tools.SetMannequinVisibility
// 0x0010 (0x0010 - 0x0000)
struct Tools_SetMannequinVisibility final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _visible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetMannequinVisibility) == 0x000008, "Wrong alignment on Tools_SetMannequinVisibility");
static_assert(sizeof(Tools_SetMannequinVisibility) == 0x000010, "Wrong size on Tools_SetMannequinVisibility");
static_assert(offsetof(Tools_SetMannequinVisibility, _world_ctx) == 0x000000, "Member 'Tools_SetMannequinVisibility::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetMannequinVisibility, _visible) == 0x000008, "Member 'Tools_SetMannequinVisibility::_visible' has a wrong offset!");

// Function Stigma.Tools.SetMyFriends
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetMyFriends final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFriend>                        _friends;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetMyFriends) == 0x000008, "Wrong alignment on Tools_SetMyFriends");
static_assert(sizeof(Tools_SetMyFriends) == 0x000020, "Wrong size on Tools_SetMyFriends");
static_assert(offsetof(Tools_SetMyFriends, _world_ctx) == 0x000000, "Member 'Tools_SetMyFriends::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetMyFriends, _friends) == 0x000008, "Member 'Tools_SetMyFriends::_friends' has a wrong offset!");
static_assert(offsetof(Tools_SetMyFriends, ReturnValue) == 0x000018, "Member 'Tools_SetMyFriends::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.SetNicknameFX
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetNicknameFX final
{
public:
	class URichTextBlock*                         _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _item_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _size;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F7[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetNicknameFX) == 0x000008, "Wrong alignment on Tools_SetNicknameFX");
static_assert(sizeof(Tools_SetNicknameFX) == 0x000020, "Wrong size on Tools_SetNicknameFX");
static_assert(offsetof(Tools_SetNicknameFX, _widget) == 0x000000, "Member 'Tools_SetNicknameFX::_widget' has a wrong offset!");
static_assert(offsetof(Tools_SetNicknameFX, _item_id) == 0x000008, "Member 'Tools_SetNicknameFX::_item_id' has a wrong offset!");
static_assert(offsetof(Tools_SetNicknameFX, _size) == 0x000018, "Member 'Tools_SetNicknameFX::_size' has a wrong offset!");

// Function Stigma.Tools.SetRecentBattleUsers
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetRecentBattleUsers final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFriend>                        _battle_users;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F8[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetRecentBattleUsers) == 0x000008, "Wrong alignment on Tools_SetRecentBattleUsers");
static_assert(sizeof(Tools_SetRecentBattleUsers) == 0x000020, "Wrong size on Tools_SetRecentBattleUsers");
static_assert(offsetof(Tools_SetRecentBattleUsers, _world_ctx) == 0x000000, "Member 'Tools_SetRecentBattleUsers::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetRecentBattleUsers, _battle_users) == 0x000008, "Member 'Tools_SetRecentBattleUsers::_battle_users' has a wrong offset!");
static_assert(offsetof(Tools_SetRecentBattleUsers, ReturnValue) == 0x000018, "Member 'Tools_SetRecentBattleUsers::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.SetSearchedUsers
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetSearchedUsers final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUserSearch>                    _users;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24F9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetSearchedUsers) == 0x000008, "Wrong alignment on Tools_SetSearchedUsers");
static_assert(sizeof(Tools_SetSearchedUsers) == 0x000020, "Wrong size on Tools_SetSearchedUsers");
static_assert(offsetof(Tools_SetSearchedUsers, _world_ctx) == 0x000000, "Member 'Tools_SetSearchedUsers::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetSearchedUsers, _users) == 0x000008, "Member 'Tools_SetSearchedUsers::_users' has a wrong offset!");
static_assert(offsetof(Tools_SetSearchedUsers, ReturnValue) == 0x000018, "Member 'Tools_SetSearchedUsers::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.SetSteamFriends
// 0x0020 (0x0020 - 0x0000)
struct Tools_SetSteamFriends final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFriend>                        _steam_friends;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24FA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_SetSteamFriends) == 0x000008, "Wrong alignment on Tools_SetSteamFriends");
static_assert(sizeof(Tools_SetSteamFriends) == 0x000020, "Wrong size on Tools_SetSteamFriends");
static_assert(offsetof(Tools_SetSteamFriends, _world_ctx) == 0x000000, "Member 'Tools_SetSteamFriends::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SetSteamFriends, _steam_friends) == 0x000008, "Member 'Tools_SetSteamFriends::_steam_friends' has a wrong offset!");
static_assert(offsetof(Tools_SetSteamFriends, ReturnValue) == 0x000018, "Member 'Tools_SetSteamFriends::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.ShowErrorBox
// 0x0038 (0x0038 - 0x0000)
struct Tools_ShowErrorBox final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _Title;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _msg;                                              // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_ShowErrorBox) == 0x000008, "Wrong alignment on Tools_ShowErrorBox");
static_assert(sizeof(Tools_ShowErrorBox) == 0x000038, "Wrong size on Tools_ShowErrorBox");
static_assert(offsetof(Tools_ShowErrorBox, _world_ctx) == 0x000000, "Member 'Tools_ShowErrorBox::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ShowErrorBox, _Title) == 0x000008, "Member 'Tools_ShowErrorBox::_Title' has a wrong offset!");
static_assert(offsetof(Tools_ShowErrorBox, _msg) == 0x000020, "Member 'Tools_ShowErrorBox::_msg' has a wrong offset!");

// Function Stigma.Tools.ShowLobbyUI
// 0x0010 (0x0010 - 0x0000)
struct Tools_ShowLobbyUI final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24FB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_ShowLobbyUI) == 0x000008, "Wrong alignment on Tools_ShowLobbyUI");
static_assert(sizeof(Tools_ShowLobbyUI) == 0x000010, "Wrong size on Tools_ShowLobbyUI");
static_assert(offsetof(Tools_ShowLobbyUI, _world_ctx) == 0x000000, "Member 'Tools_ShowLobbyUI::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ShowLobbyUI, _show) == 0x000008, "Member 'Tools_ShowLobbyUI::_show' has a wrong offset!");

// Function Stigma.Tools.ShowRewardPopup
// 0x0028 (0x0028 - 0x0000)
struct Tools_ShowRewardPopup final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardPlain                           _rewards;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_ShowRewardPopup) == 0x000008, "Wrong alignment on Tools_ShowRewardPopup");
static_assert(sizeof(Tools_ShowRewardPopup) == 0x000028, "Wrong size on Tools_ShowRewardPopup");
static_assert(offsetof(Tools_ShowRewardPopup, _world_ctx) == 0x000000, "Member 'Tools_ShowRewardPopup::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_ShowRewardPopup, _rewards) == 0x000008, "Member 'Tools_ShowRewardPopup::_rewards' has a wrong offset!");

// Function Stigma.Tools.SlotToSocket_Accessory
// 0x0002 (0x0002 - 0x0000)
struct Tools_SlotToSocket_Accessory final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSocket                               ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_SlotToSocket_Accessory) == 0x000001, "Wrong alignment on Tools_SlotToSocket_Accessory");
static_assert(sizeof(Tools_SlotToSocket_Accessory) == 0x000002, "Wrong size on Tools_SlotToSocket_Accessory");
static_assert(offsetof(Tools_SlotToSocket_Accessory, _slot) == 0x000000, "Member 'Tools_SlotToSocket_Accessory::_slot' has a wrong offset!");
static_assert(offsetof(Tools_SlotToSocket_Accessory, ReturnValue) == 0x000001, "Member 'Tools_SlotToSocket_Accessory::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.SortOwnedPriorityInvenItem
// 0x0020 (0x0020 - 0x0000)
struct Tools_SortOwnedPriorityInvenItem final
{
public:
	TArray<class UInvenItem*>                     _items;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FItemID                                _priority_id;                                      // 0x0010(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_SortOwnedPriorityInvenItem) == 0x000008, "Wrong alignment on Tools_SortOwnedPriorityInvenItem");
static_assert(sizeof(Tools_SortOwnedPriorityInvenItem) == 0x000020, "Wrong size on Tools_SortOwnedPriorityInvenItem");
static_assert(offsetof(Tools_SortOwnedPriorityInvenItem, _items) == 0x000000, "Member 'Tools_SortOwnedPriorityInvenItem::_items' has a wrong offset!");
static_assert(offsetof(Tools_SortOwnedPriorityInvenItem, _priority_id) == 0x000010, "Member 'Tools_SortOwnedPriorityInvenItem::_priority_id' has a wrong offset!");

// Function Stigma.Tools.SplitMyNearRankingForAll
// 0x0028 (0x0028 - 0x0000)
struct Tools_SplitMyNearRankingForAll final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetRankingEntry>               _ranking;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FNetRankingEntry>               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_SplitMyNearRankingForAll) == 0x000008, "Wrong alignment on Tools_SplitMyNearRankingForAll");
static_assert(sizeof(Tools_SplitMyNearRankingForAll) == 0x000028, "Wrong size on Tools_SplitMyNearRankingForAll");
static_assert(offsetof(Tools_SplitMyNearRankingForAll, _world_ctx) == 0x000000, "Member 'Tools_SplitMyNearRankingForAll::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SplitMyNearRankingForAll, _ranking) == 0x000008, "Member 'Tools_SplitMyNearRankingForAll::_ranking' has a wrong offset!");
static_assert(offsetof(Tools_SplitMyNearRankingForAll, ReturnValue) == 0x000018, "Member 'Tools_SplitMyNearRankingForAll::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.SplitMyNearRankingForChallenge
// 0x0028 (0x0028 - 0x0000)
struct Tools_SplitMyNearRankingForChallenge final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             _ranking;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_SplitMyNearRankingForChallenge) == 0x000008, "Wrong alignment on Tools_SplitMyNearRankingForChallenge");
static_assert(sizeof(Tools_SplitMyNearRankingForChallenge) == 0x000028, "Wrong size on Tools_SplitMyNearRankingForChallenge");
static_assert(offsetof(Tools_SplitMyNearRankingForChallenge, _world_ctx) == 0x000000, "Member 'Tools_SplitMyNearRankingForChallenge::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_SplitMyNearRankingForChallenge, _ranking) == 0x000008, "Member 'Tools_SplitMyNearRankingForChallenge::_ranking' has a wrong offset!");
static_assert(offsetof(Tools_SplitMyNearRankingForChallenge, ReturnValue) == 0x000018, "Member 'Tools_SplitMyNearRankingForChallenge::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.Subscribe_OnUpdateUser
// 0x0068 (0x0068 - 0x0000)
struct Tools_Subscribe_OnUpdateUser final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EUserEvent>                              _interested;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(EUserEvent _event)>            _callback;                                         // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_Subscribe_OnUpdateUser) == 0x000008, "Wrong alignment on Tools_Subscribe_OnUpdateUser");
static_assert(sizeof(Tools_Subscribe_OnUpdateUser) == 0x000068, "Wrong size on Tools_Subscribe_OnUpdateUser");
static_assert(offsetof(Tools_Subscribe_OnUpdateUser, _world_ctx) == 0x000000, "Member 'Tools_Subscribe_OnUpdateUser::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_Subscribe_OnUpdateUser, _interested) == 0x000008, "Member 'Tools_Subscribe_OnUpdateUser::_interested' has a wrong offset!");
static_assert(offsetof(Tools_Subscribe_OnUpdateUser, _callback) == 0x000058, "Member 'Tools_Subscribe_OnUpdateUser::_callback' has a wrong offset!");

// Function Stigma.Tools.ToGunType
// 0x0008 (0x0008 - 0x0000)
struct Tools_ToGunType final
{
public:
	int32                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24FC[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_ToGunType) == 0x000004, "Wrong alignment on Tools_ToGunType");
static_assert(sizeof(Tools_ToGunType) == 0x000008, "Wrong size on Tools_ToGunType");
static_assert(offsetof(Tools_ToGunType, _value) == 0x000000, "Member 'Tools_ToGunType::_value' has a wrong offset!");
static_assert(offsetof(Tools_ToGunType, ReturnValue) == 0x000004, "Member 'Tools_ToGunType::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.ToPlayerStatus
// 0x0008 (0x0008 - 0x0000)
struct Tools_ToPlayerStatus final
{
public:
	int32                                         _val;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24FD[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tools_ToPlayerStatus) == 0x000004, "Wrong alignment on Tools_ToPlayerStatus");
static_assert(sizeof(Tools_ToPlayerStatus) == 0x000008, "Wrong size on Tools_ToPlayerStatus");
static_assert(offsetof(Tools_ToPlayerStatus, _val) == 0x000000, "Member 'Tools_ToPlayerStatus::_val' has a wrong offset!");
static_assert(offsetof(Tools_ToPlayerStatus, ReturnValue) == 0x000004, "Member 'Tools_ToPlayerStatus::ReturnValue' has a wrong offset!");

// Function Stigma.Tools.UnregisterNotify_OnLoad_Characters
// 0x0010 (0x0010 - 0x0000)
struct Tools_UnregisterNotify_OnLoad_Characters final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _obj;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_UnregisterNotify_OnLoad_Characters) == 0x000008, "Wrong alignment on Tools_UnregisterNotify_OnLoad_Characters");
static_assert(sizeof(Tools_UnregisterNotify_OnLoad_Characters) == 0x000010, "Wrong size on Tools_UnregisterNotify_OnLoad_Characters");
static_assert(offsetof(Tools_UnregisterNotify_OnLoad_Characters, _world_ctx) == 0x000000, "Member 'Tools_UnregisterNotify_OnLoad_Characters::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_UnregisterNotify_OnLoad_Characters, _obj) == 0x000008, "Member 'Tools_UnregisterNotify_OnLoad_Characters::_obj' has a wrong offset!");

// Function Stigma.Tools.UnregisterNotify_OnLoad_UserInfo
// 0x0010 (0x0010 - 0x0000)
struct Tools_UnregisterNotify_OnLoad_UserInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _obj;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_UnregisterNotify_OnLoad_UserInfo) == 0x000008, "Wrong alignment on Tools_UnregisterNotify_OnLoad_UserInfo");
static_assert(sizeof(Tools_UnregisterNotify_OnLoad_UserInfo) == 0x000010, "Wrong size on Tools_UnregisterNotify_OnLoad_UserInfo");
static_assert(offsetof(Tools_UnregisterNotify_OnLoad_UserInfo, _world_ctx) == 0x000000, "Member 'Tools_UnregisterNotify_OnLoad_UserInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_UnregisterNotify_OnLoad_UserInfo, _obj) == 0x000008, "Member 'Tools_UnregisterNotify_OnLoad_UserInfo::_obj' has a wrong offset!");

// Function Stigma.Tools.Unsubscribe_OnUpdateUser
// 0x0010 (0x0010 - 0x0000)
struct Tools_Unsubscribe_OnUpdateUser final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _obj;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_Unsubscribe_OnUpdateUser) == 0x000008, "Wrong alignment on Tools_Unsubscribe_OnUpdateUser");
static_assert(sizeof(Tools_Unsubscribe_OnUpdateUser) == 0x000010, "Wrong size on Tools_Unsubscribe_OnUpdateUser");
static_assert(offsetof(Tools_Unsubscribe_OnUpdateUser, _world_ctx) == 0x000000, "Member 'Tools_Unsubscribe_OnUpdateUser::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_Unsubscribe_OnUpdateUser, _obj) == 0x000008, "Member 'Tools_Unsubscribe_OnUpdateUser::_obj' has a wrong offset!");

// Function Stigma.Tools.UpdateFlashBangRadar
// 0x0010 (0x0010 - 0x0000)
struct Tools_UpdateFlashBangRadar final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 _target_img;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_UpdateFlashBangRadar) == 0x000008, "Wrong alignment on Tools_UpdateFlashBangRadar");
static_assert(sizeof(Tools_UpdateFlashBangRadar) == 0x000010, "Wrong size on Tools_UpdateFlashBangRadar");
static_assert(offsetof(Tools_UpdateFlashBangRadar, _world_ctx) == 0x000000, "Member 'Tools_UpdateFlashBangRadar::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_UpdateFlashBangRadar, _target_img) == 0x000008, "Member 'Tools_UpdateFlashBangRadar::_target_img' has a wrong offset!");

// Function Stigma.Tools.UpdateGunOwnInfo
// 0x0010 (0x0010 - 0x0000)
struct Tools_UpdateGunOwnInfo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             _gun_object;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tools_UpdateGunOwnInfo) == 0x000008, "Wrong alignment on Tools_UpdateGunOwnInfo");
static_assert(sizeof(Tools_UpdateGunOwnInfo) == 0x000010, "Wrong size on Tools_UpdateGunOwnInfo");
static_assert(offsetof(Tools_UpdateGunOwnInfo, _world_ctx) == 0x000000, "Member 'Tools_UpdateGunOwnInfo::_world_ctx' has a wrong offset!");
static_assert(offsetof(Tools_UpdateGunOwnInfo, _gun_object) == 0x000008, "Member 'Tools_UpdateGunOwnInfo::_gun_object' has a wrong offset!");

// Function Stigma.TooltipHelper.CreateTooltipWidget
// 0x0018 (0x0018 - 0x0000)
struct TooltipHelper_CreateTooltipWidget final
{
public:
	class UWidget*                                _owning_widget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipType                                  _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24FE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUI_Tooltip*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TooltipHelper_CreateTooltipWidget) == 0x000008, "Wrong alignment on TooltipHelper_CreateTooltipWidget");
static_assert(sizeof(TooltipHelper_CreateTooltipWidget) == 0x000018, "Wrong size on TooltipHelper_CreateTooltipWidget");
static_assert(offsetof(TooltipHelper_CreateTooltipWidget, _owning_widget) == 0x000000, "Member 'TooltipHelper_CreateTooltipWidget::_owning_widget' has a wrong offset!");
static_assert(offsetof(TooltipHelper_CreateTooltipWidget, _type) == 0x000008, "Member 'TooltipHelper_CreateTooltipWidget::_type' has a wrong offset!");
static_assert(offsetof(TooltipHelper_CreateTooltipWidget, ReturnValue) == 0x000010, "Member 'TooltipHelper_CreateTooltipWidget::ReturnValue' has a wrong offset!");

// Function Stigma.TooltipHelper.GetTooltipTypeFromItemCategory
// 0x0002 (0x0002 - 0x0000)
struct TooltipHelper_GetTooltipTypeFromItemCategory final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipType                                  ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TooltipHelper_GetTooltipTypeFromItemCategory) == 0x000001, "Wrong alignment on TooltipHelper_GetTooltipTypeFromItemCategory");
static_assert(sizeof(TooltipHelper_GetTooltipTypeFromItemCategory) == 0x000002, "Wrong size on TooltipHelper_GetTooltipTypeFromItemCategory");
static_assert(offsetof(TooltipHelper_GetTooltipTypeFromItemCategory, _category) == 0x000000, "Member 'TooltipHelper_GetTooltipTypeFromItemCategory::_category' has a wrong offset!");
static_assert(offsetof(TooltipHelper_GetTooltipTypeFromItemCategory, ReturnValue) == 0x000001, "Member 'TooltipHelper_GetTooltipTypeFromItemCategory::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.AddRefWidget
// 0x0008 (0x0008 - 0x0000)
struct Tutorial_AddRefWidget final
{
public:
	class UUserWidget*                            _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_AddRefWidget) == 0x000008, "Wrong alignment on Tutorial_AddRefWidget");
static_assert(sizeof(Tutorial_AddRefWidget) == 0x000008, "Wrong size on Tutorial_AddRefWidget");
static_assert(offsetof(Tutorial_AddRefWidget, _widget) == 0x000000, "Member 'Tutorial_AddRefWidget::_widget' has a wrong offset!");

// Function Stigma.Tutorial.OnQueryStart
// 0x0001 (0x0001 - 0x0000)
struct Tutorial_OnQueryStart final
{
public:
	ETutorialStartResponse                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_OnQueryStart) == 0x000001, "Wrong alignment on Tutorial_OnQueryStart");
static_assert(sizeof(Tutorial_OnQueryStart) == 0x000001, "Wrong size on Tutorial_OnQueryStart");
static_assert(offsetof(Tutorial_OnQueryStart, ReturnValue) == 0x000000, "Member 'Tutorial_OnQueryStart::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.RemoveRefWidget
// 0x0008 (0x0008 - 0x0000)
struct Tutorial_RemoveRefWidget final
{
public:
	const class UUserWidget*                      _widget;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_RemoveRefWidget) == 0x000008, "Wrong alignment on Tutorial_RemoveRefWidget");
static_assert(sizeof(Tutorial_RemoveRefWidget) == 0x000008, "Wrong size on Tutorial_RemoveRefWidget");
static_assert(offsetof(Tutorial_RemoveRefWidget, _widget) == 0x000000, "Member 'Tutorial_RemoveRefWidget::_widget' has a wrong offset!");

// Function Stigma.Tutorial.GetBattlePhase
// 0x0001 (0x0001 - 0x0000)
struct Tutorial_GetBattlePhase final
{
public:
	EBattleModePhase                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_GetBattlePhase) == 0x000001, "Wrong alignment on Tutorial_GetBattlePhase");
static_assert(sizeof(Tutorial_GetBattlePhase) == 0x000001, "Wrong size on Tutorial_GetBattlePhase");
static_assert(offsetof(Tutorial_GetBattlePhase, ReturnValue) == 0x000000, "Member 'Tutorial_GetBattlePhase::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.GetBattlePhaseElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct Tutorial_GetBattlePhaseElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_GetBattlePhaseElapsedTime) == 0x000004, "Wrong alignment on Tutorial_GetBattlePhaseElapsedTime");
static_assert(sizeof(Tutorial_GetBattlePhaseElapsedTime) == 0x000004, "Wrong size on Tutorial_GetBattlePhaseElapsedTime");
static_assert(offsetof(Tutorial_GetBattlePhaseElapsedTime, ReturnValue) == 0x000000, "Member 'Tutorial_GetBattlePhaseElapsedTime::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.GetCurrentRound
// 0x0004 (0x0004 - 0x0000)
struct Tutorial_GetCurrentRound final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_GetCurrentRound) == 0x000004, "Wrong alignment on Tutorial_GetCurrentRound");
static_assert(sizeof(Tutorial_GetCurrentRound) == 0x000004, "Wrong size on Tutorial_GetCurrentRound");
static_assert(offsetof(Tutorial_GetCurrentRound, ReturnValue) == 0x000000, "Member 'Tutorial_GetCurrentRound::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.GetHP
// 0x0004 (0x0004 - 0x0000)
struct Tutorial_GetHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_GetHP) == 0x000004, "Wrong alignment on Tutorial_GetHP");
static_assert(sizeof(Tutorial_GetHP) == 0x000004, "Wrong size on Tutorial_GetHP");
static_assert(offsetof(Tutorial_GetHP, ReturnValue) == 0x000000, "Member 'Tutorial_GetHP::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.GetPlayedCount
// 0x0004 (0x0004 - 0x0000)
struct Tutorial_GetPlayedCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_GetPlayedCount) == 0x000004, "Wrong alignment on Tutorial_GetPlayedCount");
static_assert(sizeof(Tutorial_GetPlayedCount) == 0x000004, "Wrong size on Tutorial_GetPlayedCount");
static_assert(offsetof(Tutorial_GetPlayedCount, ReturnValue) == 0x000000, "Member 'Tutorial_GetPlayedCount::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.GetPlayedMatchCount
// 0x0004 (0x0004 - 0x0000)
struct Tutorial_GetPlayedMatchCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_GetPlayedMatchCount) == 0x000004, "Wrong alignment on Tutorial_GetPlayedMatchCount");
static_assert(sizeof(Tutorial_GetPlayedMatchCount) == 0x000004, "Wrong size on Tutorial_GetPlayedMatchCount");
static_assert(offsetof(Tutorial_GetPlayedMatchCount, ReturnValue) == 0x000000, "Member 'Tutorial_GetPlayedMatchCount::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.IsAnyPopupOpened
// 0x0001 (0x0001 - 0x0000)
struct Tutorial_IsAnyPopupOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_IsAnyPopupOpened) == 0x000001, "Wrong alignment on Tutorial_IsAnyPopupOpened");
static_assert(sizeof(Tutorial_IsAnyPopupOpened) == 0x000001, "Wrong size on Tutorial_IsAnyPopupOpened");
static_assert(offsetof(Tutorial_IsAnyPopupOpened, ReturnValue) == 0x000000, "Member 'Tutorial_IsAnyPopupOpened::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.IsBattlePhase
// 0x0002 (0x0002 - 0x0000)
struct Tutorial_IsBattlePhase final
{
public:
	EBattleModePhase                              _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tutorial_IsBattlePhase) == 0x000001, "Wrong alignment on Tutorial_IsBattlePhase");
static_assert(sizeof(Tutorial_IsBattlePhase) == 0x000002, "Wrong size on Tutorial_IsBattlePhase");
static_assert(offsetof(Tutorial_IsBattlePhase, _phase) == 0x000000, "Member 'Tutorial_IsBattlePhase::_phase' has a wrong offset!");
static_assert(offsetof(Tutorial_IsBattlePhase, ReturnValue) == 0x000001, "Member 'Tutorial_IsBattlePhase::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.IsCurrentRound
// 0x0008 (0x0008 - 0x0000)
struct Tutorial_IsCurrentRound final
{
public:
	int32                                         _round;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2502[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tutorial_IsCurrentRound) == 0x000004, "Wrong alignment on Tutorial_IsCurrentRound");
static_assert(sizeof(Tutorial_IsCurrentRound) == 0x000008, "Wrong size on Tutorial_IsCurrentRound");
static_assert(offsetof(Tutorial_IsCurrentRound, _round) == 0x000000, "Member 'Tutorial_IsCurrentRound::_round' has a wrong offset!");
static_assert(offsetof(Tutorial_IsCurrentRound, ReturnValue) == 0x000004, "Member 'Tutorial_IsCurrentRound::ReturnValue' has a wrong offset!");

// Function Stigma.Tutorial.IsPassOverTimeFromLastPlaying
// 0x0008 (0x0008 - 0x0000)
struct Tutorial_IsPassOverTimeFromLastPlaying final
{
public:
	int32                                         _secs;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2503[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Tutorial_IsPassOverTimeFromLastPlaying) == 0x000004, "Wrong alignment on Tutorial_IsPassOverTimeFromLastPlaying");
static_assert(sizeof(Tutorial_IsPassOverTimeFromLastPlaying) == 0x000008, "Wrong size on Tutorial_IsPassOverTimeFromLastPlaying");
static_assert(offsetof(Tutorial_IsPassOverTimeFromLastPlaying, _secs) == 0x000000, "Member 'Tutorial_IsPassOverTimeFromLastPlaying::_secs' has a wrong offset!");
static_assert(offsetof(Tutorial_IsPassOverTimeFromLastPlaying, ReturnValue) == 0x000004, "Member 'Tutorial_IsPassOverTimeFromLastPlaying::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ClosePointUI.Tutorial_ClosePointUI
// 0x0010 (0x0010 - 0x0000)
struct UIGuide_ClosePointUI_Tutorial_ClosePointUI final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_ClosePointUI*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ClosePointUI_Tutorial_ClosePointUI) == 0x000008, "Wrong alignment on UIGuide_ClosePointUI_Tutorial_ClosePointUI");
static_assert(sizeof(UIGuide_ClosePointUI_Tutorial_ClosePointUI) == 0x000010, "Wrong size on UIGuide_ClosePointUI_Tutorial_ClosePointUI");
static_assert(offsetof(UIGuide_ClosePointUI_Tutorial_ClosePointUI, _tutorial) == 0x000000, "Member 'UIGuide_ClosePointUI_Tutorial_ClosePointUI::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ClosePointUI_Tutorial_ClosePointUI, ReturnValue) == 0x000008, "Member 'UIGuide_ClosePointUI_Tutorial_ClosePointUI::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ShowMissionWidget.Tutorial_ShowMissionWidget
// 0x0018 (0x0018 - 0x0000)
struct UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2505[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_ShowMissionWidget*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget) == 0x000008, "Wrong alignment on UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget");
static_assert(sizeof(UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget) == 0x000018, "Wrong size on UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget");
static_assert(offsetof(UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget, _tutorial) == 0x000000, "Member 'UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget, _show) == 0x000008, "Member 'UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget::_show' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget, ReturnValue) == 0x000010, "Member 'UIGuide_ShowMissionWidget_Tutorial_ShowMissionWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ShowHelpWidget.Tutorial_ShowHelpWidget
// 0x0028 (0x0028 - 0x0000)
struct UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2507[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _help_contents_key;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_ShowHelpWidget*                ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget) == 0x000008, "Wrong alignment on UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget");
static_assert(sizeof(UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget) == 0x000028, "Wrong size on UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget");
static_assert(offsetof(UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget, _tutorial) == 0x000000, "Member 'UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget, _show) == 0x000008, "Member 'UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget::_show' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget, _help_contents_key) == 0x000010, "Member 'UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget::_help_contents_key' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget, ReturnValue) == 0x000020, "Member 'UIGuide_ShowHelpWidget_Tutorial_ShowHelpWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_Finish.Tutorial_Finish
// 0x0010 (0x0010 - 0x0000)
struct UIGuide_Finish_Tutorial_Finish final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_Finish*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_Finish_Tutorial_Finish) == 0x000008, "Wrong alignment on UIGuide_Finish_Tutorial_Finish");
static_assert(sizeof(UIGuide_Finish_Tutorial_Finish) == 0x000010, "Wrong size on UIGuide_Finish_Tutorial_Finish");
static_assert(offsetof(UIGuide_Finish_Tutorial_Finish, _tutorial) == 0x000000, "Member 'UIGuide_Finish_Tutorial_Finish::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_Finish_Tutorial_Finish, ReturnValue) == 0x000008, "Member 'UIGuide_Finish_Tutorial_Finish::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_PauseGame.Tutorial_PauseGame
// 0x0018 (0x0018 - 0x0000)
struct UIGuide_PauseGame_Tutorial_PauseGame final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _pause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2509[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_PauseGame*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_PauseGame_Tutorial_PauseGame) == 0x000008, "Wrong alignment on UIGuide_PauseGame_Tutorial_PauseGame");
static_assert(sizeof(UIGuide_PauseGame_Tutorial_PauseGame) == 0x000018, "Wrong size on UIGuide_PauseGame_Tutorial_PauseGame");
static_assert(offsetof(UIGuide_PauseGame_Tutorial_PauseGame, _tutorial) == 0x000000, "Member 'UIGuide_PauseGame_Tutorial_PauseGame::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_PauseGame_Tutorial_PauseGame, _pause) == 0x000008, "Member 'UIGuide_PauseGame_Tutorial_PauseGame::_pause' has a wrong offset!");
static_assert(offsetof(UIGuide_PauseGame_Tutorial_PauseGame, ReturnValue) == 0x000010, "Member 'UIGuide_PauseGame_Tutorial_PauseGame::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ShowBattleStore.Tutorial_ShowBattleStore
// 0x0018 (0x0018 - 0x0000)
struct UIGuide_ShowBattleStore_Tutorial_ShowBattleStore final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_250B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_ShowBattleStore*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ShowBattleStore_Tutorial_ShowBattleStore) == 0x000008, "Wrong alignment on UIGuide_ShowBattleStore_Tutorial_ShowBattleStore");
static_assert(sizeof(UIGuide_ShowBattleStore_Tutorial_ShowBattleStore) == 0x000018, "Wrong size on UIGuide_ShowBattleStore_Tutorial_ShowBattleStore");
static_assert(offsetof(UIGuide_ShowBattleStore_Tutorial_ShowBattleStore, _tutorial) == 0x000000, "Member 'UIGuide_ShowBattleStore_Tutorial_ShowBattleStore::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowBattleStore_Tutorial_ShowBattleStore, _show) == 0x000008, "Member 'UIGuide_ShowBattleStore_Tutorial_ShowBattleStore::_show' has a wrong offset!");
static_assert(offsetof(UIGuide_ShowBattleStore_Tutorial_ShowBattleStore, ReturnValue) == 0x000010, "Member 'UIGuide_ShowBattleStore_Tutorial_ShowBattleStore::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ResumeTutorial.Tutorial_ResumeTutorial
// 0x0010 (0x0010 - 0x0000)
struct UIGuide_ResumeTutorial_Tutorial_ResumeTutorial final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIGuide_ResumeTutorial*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ResumeTutorial_Tutorial_ResumeTutorial) == 0x000008, "Wrong alignment on UIGuide_ResumeTutorial_Tutorial_ResumeTutorial");
static_assert(sizeof(UIGuide_ResumeTutorial_Tutorial_ResumeTutorial) == 0x000010, "Wrong size on UIGuide_ResumeTutorial_Tutorial_ResumeTutorial");
static_assert(offsetof(UIGuide_ResumeTutorial_Tutorial_ResumeTutorial, _tutorial) == 0x000000, "Member 'UIGuide_ResumeTutorial_Tutorial_ResumeTutorial::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ResumeTutorial_Tutorial_ResumeTutorial, ReturnValue) == 0x000008, "Member 'UIGuide_ResumeTutorial_Tutorial_ResumeTutorial::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_WaitCharacterSelect.Tutorial_WaitCharacterSelect
// 0x0018 (0x0018 - 0x0000)
struct UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFightingStyle                                _fighting_style;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_250D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_WaitCharacterSelect*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect) == 0x000008, "Wrong alignment on UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect");
static_assert(sizeof(UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect) == 0x000018, "Wrong size on UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect");
static_assert(offsetof(UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect, _tutorial) == 0x000000, "Member 'UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect, _fighting_style) == 0x000008, "Member 'UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect::_fighting_style' has a wrong offset!");
static_assert(offsetof(UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect, ReturnValue) == 0x000010, "Member 'UIGuide_WaitCharacterSelect_Tutorial_WaitCharacterSelect::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_ApplyFunction.Tutorial_ApplyFunction
// 0x0028 (0x0028 - 0x0000)
struct UIGuide_ApplyFunction_Tutorial_ApplyFunction final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Function                    _func_id;                                          // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _remove;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_250F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_ApplyFunction*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_ApplyFunction_Tutorial_ApplyFunction) == 0x000008, "Wrong alignment on UIGuide_ApplyFunction_Tutorial_ApplyFunction");
static_assert(sizeof(UIGuide_ApplyFunction_Tutorial_ApplyFunction) == 0x000028, "Wrong size on UIGuide_ApplyFunction_Tutorial_ApplyFunction");
static_assert(offsetof(UIGuide_ApplyFunction_Tutorial_ApplyFunction, _tutorial) == 0x000000, "Member 'UIGuide_ApplyFunction_Tutorial_ApplyFunction::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_ApplyFunction_Tutorial_ApplyFunction, _func_id) == 0x000008, "Member 'UIGuide_ApplyFunction_Tutorial_ApplyFunction::_func_id' has a wrong offset!");
static_assert(offsetof(UIGuide_ApplyFunction_Tutorial_ApplyFunction, _remove) == 0x000018, "Member 'UIGuide_ApplyFunction_Tutorial_ApplyFunction::_remove' has a wrong offset!");
static_assert(offsetof(UIGuide_ApplyFunction_Tutorial_ApplyFunction, ReturnValue) == 0x000020, "Member 'UIGuide_ApplyFunction_Tutorial_ApplyFunction::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_PlayCutScene.Tutorial_PlayCutScene
// 0x0050 (0x0050 - 0x0000)
struct UIGuide_PlayCutScene_Tutorial_PlayCutScene final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  _level_path;                                       // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _sequence_name;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_ui;                                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2511[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_PlayCutScene*                  ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_PlayCutScene_Tutorial_PlayCutScene) == 0x000008, "Wrong alignment on UIGuide_PlayCutScene_Tutorial_PlayCutScene");
static_assert(sizeof(UIGuide_PlayCutScene_Tutorial_PlayCutScene) == 0x000050, "Wrong size on UIGuide_PlayCutScene_Tutorial_PlayCutScene");
static_assert(offsetof(UIGuide_PlayCutScene_Tutorial_PlayCutScene, _tutorial) == 0x000000, "Member 'UIGuide_PlayCutScene_Tutorial_PlayCutScene::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_PlayCutScene_Tutorial_PlayCutScene, _level_path) == 0x000008, "Member 'UIGuide_PlayCutScene_Tutorial_PlayCutScene::_level_path' has a wrong offset!");
static_assert(offsetof(UIGuide_PlayCutScene_Tutorial_PlayCutScene, _sequence_name) == 0x000030, "Member 'UIGuide_PlayCutScene_Tutorial_PlayCutScene::_sequence_name' has a wrong offset!");
static_assert(offsetof(UIGuide_PlayCutScene_Tutorial_PlayCutScene, _hide_ui) == 0x000040, "Member 'UIGuide_PlayCutScene_Tutorial_PlayCutScene::_hide_ui' has a wrong offset!");
static_assert(offsetof(UIGuide_PlayCutScene_Tutorial_PlayCutScene, ReturnValue) == 0x000048, "Member 'UIGuide_PlayCutScene_Tutorial_PlayCutScene::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_Wait.Tutorial_Wait
// 0x0018 (0x0018 - 0x0000)
struct UIGuide_Wait_Tutorial_Wait final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _time;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2513[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_Wait*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_Wait_Tutorial_Wait) == 0x000008, "Wrong alignment on UIGuide_Wait_Tutorial_Wait");
static_assert(sizeof(UIGuide_Wait_Tutorial_Wait) == 0x000018, "Wrong size on UIGuide_Wait_Tutorial_Wait");
static_assert(offsetof(UIGuide_Wait_Tutorial_Wait, _tutorial) == 0x000000, "Member 'UIGuide_Wait_Tutorial_Wait::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_Wait_Tutorial_Wait, _time) == 0x000008, "Member 'UIGuide_Wait_Tutorial_Wait::_time' has a wrong offset!");
static_assert(offsetof(UIGuide_Wait_Tutorial_Wait, ReturnValue) == 0x000010, "Member 'UIGuide_Wait_Tutorial_Wait::ReturnValue' has a wrong offset!");

// Function Stigma.UIGuide_PlayCharacterCutScene.Tutorial_PlayCharacterCutScene
// 0x0018 (0x0018 - 0x0000)
struct UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene final
{
public:
	class UTutorial*                              _tutorial;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _chara_type;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2515[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUIGuide_PlayCharacterCutScene*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene) == 0x000008, "Wrong alignment on UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene");
static_assert(sizeof(UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene) == 0x000018, "Wrong size on UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene");
static_assert(offsetof(UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene, _tutorial) == 0x000000, "Member 'UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene::_tutorial' has a wrong offset!");
static_assert(offsetof(UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene, _chara_type) == 0x000008, "Member 'UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene::_chara_type' has a wrong offset!");
static_assert(offsetof(UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene, ReturnValue) == 0x000010, "Member 'UIGuide_PlayCharacterCutScene_Tutorial_PlayCharacterCutScene::ReturnValue' has a wrong offset!");

// Function Stigma.UIAnimInstance.CheckCanTransit
// 0x0003 (0x0003 - 0x0000)
struct UIAnimInstance_CheckCanTransit final
{
public:
	bool                                          _from_idle_state;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _can_check;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimInstance_CheckCanTransit) == 0x000001, "Wrong alignment on UIAnimInstance_CheckCanTransit");
static_assert(sizeof(UIAnimInstance_CheckCanTransit) == 0x000003, "Wrong size on UIAnimInstance_CheckCanTransit");
static_assert(offsetof(UIAnimInstance_CheckCanTransit, _from_idle_state) == 0x000000, "Member 'UIAnimInstance_CheckCanTransit::_from_idle_state' has a wrong offset!");
static_assert(offsetof(UIAnimInstance_CheckCanTransit, _can_check) == 0x000001, "Member 'UIAnimInstance_CheckCanTransit::_can_check' has a wrong offset!");
static_assert(offsetof(UIAnimInstance_CheckCanTransit, ReturnValue) == 0x000002, "Member 'UIAnimInstance_CheckCanTransit::ReturnValue' has a wrong offset!");

// Function Stigma.UIAnimInstance.GetCutSceneIntroAnim
// 0x0010 (0x0010 - 0x0000)
struct UIAnimInstance_GetCutSceneIntroAnim final
{
public:
	int32                                         _Pos;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimInstance_GetCutSceneIntroAnim) == 0x000008, "Wrong alignment on UIAnimInstance_GetCutSceneIntroAnim");
static_assert(sizeof(UIAnimInstance_GetCutSceneIntroAnim) == 0x000010, "Wrong size on UIAnimInstance_GetCutSceneIntroAnim");
static_assert(offsetof(UIAnimInstance_GetCutSceneIntroAnim, _Pos) == 0x000000, "Member 'UIAnimInstance_GetCutSceneIntroAnim::_Pos' has a wrong offset!");
static_assert(offsetof(UIAnimInstance_GetCutSceneIntroAnim, ReturnValue) == 0x000008, "Member 'UIAnimInstance_GetCutSceneIntroAnim::ReturnValue' has a wrong offset!");

// Function Stigma.UIAnimInstance.GetCutSceneIntroAnim_VS
// 0x0008 (0x0008 - 0x0000)
struct UIAnimInstance_GetCutSceneIntroAnim_VS final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimInstance_GetCutSceneIntroAnim_VS) == 0x000008, "Wrong alignment on UIAnimInstance_GetCutSceneIntroAnim_VS");
static_assert(sizeof(UIAnimInstance_GetCutSceneIntroAnim_VS) == 0x000008, "Wrong size on UIAnimInstance_GetCutSceneIntroAnim_VS");
static_assert(offsetof(UIAnimInstance_GetCutSceneIntroAnim_VS, ReturnValue) == 0x000000, "Member 'UIAnimInstance_GetCutSceneIntroAnim_VS::ReturnValue' has a wrong offset!");

// Function Stigma.UIAnimInstance.GetCutSceneLobbySelection
// 0x0008 (0x0008 - 0x0000)
struct UIAnimInstance_GetCutSceneLobbySelection final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimInstance_GetCutSceneLobbySelection) == 0x000008, "Wrong alignment on UIAnimInstance_GetCutSceneLobbySelection");
static_assert(sizeof(UIAnimInstance_GetCutSceneLobbySelection) == 0x000008, "Wrong size on UIAnimInstance_GetCutSceneLobbySelection");
static_assert(offsetof(UIAnimInstance_GetCutSceneLobbySelection, ReturnValue) == 0x000000, "Member 'UIAnimInstance_GetCutSceneLobbySelection::ReturnValue' has a wrong offset!");

// Function Stigma.UIAnimInstance.GetCutSceneLobbySelection_Cam
// 0x0008 (0x0008 - 0x0000)
struct UIAnimInstance_GetCutSceneLobbySelection_Cam final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAnimInstance_GetCutSceneLobbySelection_Cam) == 0x000008, "Wrong alignment on UIAnimInstance_GetCutSceneLobbySelection_Cam");
static_assert(sizeof(UIAnimInstance_GetCutSceneLobbySelection_Cam) == 0x000008, "Wrong size on UIAnimInstance_GetCutSceneLobbySelection_Cam");
static_assert(offsetof(UIAnimInstance_GetCutSceneLobbySelection_Cam, ReturnValue) == 0x000000, "Member 'UIAnimInstance_GetCutSceneLobbySelection_Cam::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ActionWheelParts.SetValues
// 0x0040 (0x0040 - 0x0000)
struct UI_ActionWheelParts_SetValues final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _icon_name;                                        // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ActionWheelParts_SetValues) == 0x000008, "Wrong alignment on UI_ActionWheelParts_SetValues");
static_assert(sizeof(UI_ActionWheelParts_SetValues) == 0x000040, "Wrong size on UI_ActionWheelParts_SetValues");
static_assert(offsetof(UI_ActionWheelParts_SetValues, _Icon) == 0x000000, "Member 'UI_ActionWheelParts_SetValues::_Icon' has a wrong offset!");
static_assert(offsetof(UI_ActionWheelParts_SetValues, _icon_name) == 0x000028, "Member 'UI_ActionWheelParts_SetValues::_icon_name' has a wrong offset!");

// Function Stigma.UI_ActiveFunctionBase.SetCustomTooltipText
// 0x0030 (0x0030 - 0x0000)
struct UI_ActiveFunctionBase_SetCustomTooltipText final
{
public:
	class FText                                   _Title;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   _Desc;                                             // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ActiveFunctionBase_SetCustomTooltipText) == 0x000008, "Wrong alignment on UI_ActiveFunctionBase_SetCustomTooltipText");
static_assert(sizeof(UI_ActiveFunctionBase_SetCustomTooltipText) == 0x000030, "Wrong size on UI_ActiveFunctionBase_SetCustomTooltipText");
static_assert(offsetof(UI_ActiveFunctionBase_SetCustomTooltipText, _Title) == 0x000000, "Member 'UI_ActiveFunctionBase_SetCustomTooltipText::_Title' has a wrong offset!");
static_assert(offsetof(UI_ActiveFunctionBase_SetCustomTooltipText, _Desc) == 0x000018, "Member 'UI_ActiveFunctionBase_SetCustomTooltipText::_Desc' has a wrong offset!");

// Function Stigma.UI_ActiveFunctionBase.SetValues
// 0x0020 (0x0020 - 0x0000)
struct UI_ActiveFunctionBase_SetValues final
{
public:
	TArray<struct FItemID>                        _item_ids;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              Param__expiry;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _GM_func_idn;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2521[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ActiveFunctionBase_SetValues) == 0x000008, "Wrong alignment on UI_ActiveFunctionBase_SetValues");
static_assert(sizeof(UI_ActiveFunctionBase_SetValues) == 0x000020, "Wrong size on UI_ActiveFunctionBase_SetValues");
static_assert(offsetof(UI_ActiveFunctionBase_SetValues, _item_ids) == 0x000000, "Member 'UI_ActiveFunctionBase_SetValues::_item_ids' has a wrong offset!");
static_assert(offsetof(UI_ActiveFunctionBase_SetValues, Param__expiry) == 0x000010, "Member 'UI_ActiveFunctionBase_SetValues::Param__expiry' has a wrong offset!");
static_assert(offsetof(UI_ActiveFunctionBase_SetValues, _GM_func_idn) == 0x000018, "Member 'UI_ActiveFunctionBase_SetValues::_GM_func_idn' has a wrong offset!");

// Function Stigma.UI_BattlePassBrief.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBrief_InitWidget final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBrief_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassBrief_InitWidget");
static_assert(sizeof(UI_BattlePassBrief_InitWidget) == 0x000010, "Wrong size on UI_BattlePassBrief_InitWidget");
static_assert(offsetof(UI_BattlePassBrief_InitWidget, _pass_id) == 0x000000, "Member 'UI_BattlePassBrief_InitWidget::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefContainer.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBriefContainer_InitWidget final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBriefContainer_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassBriefContainer_InitWidget");
static_assert(sizeof(UI_BattlePassBriefContainer_InitWidget) == 0x000010, "Wrong size on UI_BattlePassBriefContainer_InitWidget");
static_assert(offsetof(UI_BattlePassBriefContainer_InitWidget, _pass_id) == 0x000000, "Member 'UI_BattlePassBriefContainer_InitWidget::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefContainer.OnClickSlot
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBriefContainer_OnClickSlot final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2524[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassBriefContainer_OnClickSlot) == 0x000008, "Wrong alignment on UI_BattlePassBriefContainer_OnClickSlot");
static_assert(sizeof(UI_BattlePassBriefContainer_OnClickSlot) == 0x000010, "Wrong size on UI_BattlePassBriefContainer_OnClickSlot");
static_assert(offsetof(UI_BattlePassBriefContainer_OnClickSlot, _widget) == 0x000000, "Member 'UI_BattlePassBriefContainer_OnClickSlot::_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassBriefContainer_OnClickSlot, _selected) == 0x000008, "Member 'UI_BattlePassBriefContainer_OnClickSlot::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefContainer.SwapAnimation
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassBriefContainer_SwapAnimation final
{
public:
	bool                                          _forward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBriefContainer_SwapAnimation) == 0x000001, "Wrong alignment on UI_BattlePassBriefContainer_SwapAnimation");
static_assert(sizeof(UI_BattlePassBriefContainer_SwapAnimation) == 0x000001, "Wrong size on UI_BattlePassBriefContainer_SwapAnimation");
static_assert(offsetof(UI_BattlePassBriefContainer_SwapAnimation, _forward) == 0x000000, "Member 'UI_BattlePassBriefContainer_SwapAnimation::_forward' has a wrong offset!");

// Function Stigma.UI_BattlePassBriefContainer.GetFrontPassSlotWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassBriefContainer_GetFrontPassSlotWidget final
{
public:
	class UUI_BattlePassBriefSlot*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBriefContainer_GetFrontPassSlotWidget) == 0x000008, "Wrong alignment on UI_BattlePassBriefContainer_GetFrontPassSlotWidget");
static_assert(sizeof(UI_BattlePassBriefContainer_GetFrontPassSlotWidget) == 0x000008, "Wrong size on UI_BattlePassBriefContainer_GetFrontPassSlotWidget");
static_assert(offsetof(UI_BattlePassBriefContainer_GetFrontPassSlotWidget, ReturnValue) == 0x000000, "Member 'UI_BattlePassBriefContainer_GetFrontPassSlotWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BattlePassBuyPopup.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBuyPopup_InitWidget final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBuyPopup_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassBuyPopup_InitWidget");
static_assert(sizeof(UI_BattlePassBuyPopup_InitWidget) == 0x000010, "Wrong size on UI_BattlePassBuyPopup_InitWidget");
static_assert(offsetof(UI_BattlePassBuyPopup_InitWidget, _pass_id) == 0x000000, "Member 'UI_BattlePassBuyPopup_InitWidget::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassBuyPopup.OnClickBuyBtn
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassBuyPopup_OnClickBuyBtn final
{
public:
	class UAnimatableWidget*                      _btn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2526[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassBuyPopup_OnClickBuyBtn) == 0x000008, "Wrong alignment on UI_BattlePassBuyPopup_OnClickBuyBtn");
static_assert(sizeof(UI_BattlePassBuyPopup_OnClickBuyBtn) == 0x000010, "Wrong size on UI_BattlePassBuyPopup_OnClickBuyBtn");
static_assert(offsetof(UI_BattlePassBuyPopup_OnClickBuyBtn, _btn) == 0x000000, "Member 'UI_BattlePassBuyPopup_OnClickBuyBtn::_btn' has a wrong offset!");
static_assert(offsetof(UI_BattlePassBuyPopup_OnClickBuyBtn, _selected) == 0x000008, "Member 'UI_BattlePassBuyPopup_OnClickBuyBtn::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassBuyPopup.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_BattlePassBuyPopup_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBuyPopup_SetDesc) == 0x000008, "Wrong alignment on UI_BattlePassBuyPopup_SetDesc");
static_assert(sizeof(UI_BattlePassBuyPopup_SetDesc) == 0x000018, "Wrong size on UI_BattlePassBuyPopup_SetDesc");
static_assert(offsetof(UI_BattlePassBuyPopup_SetDesc, _text) == 0x000000, "Member 'UI_BattlePassBuyPopup_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_BattlePassBuyPopup.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_BattlePassBuyPopup_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassBuyPopup_SetTitle) == 0x000008, "Wrong alignment on UI_BattlePassBuyPopup_SetTitle");
static_assert(sizeof(UI_BattlePassBuyPopup_SetTitle) == 0x000018, "Wrong size on UI_BattlePassBuyPopup_SetTitle");
static_assert(offsetof(UI_BattlePassBuyPopup_SetTitle, _text) == 0x000000, "Member 'UI_BattlePassBuyPopup_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoLevelRewardSlot.SetPremiumLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked final
{
public:
	bool                                          _locked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked) == 0x000001, "Wrong alignment on UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked");
static_assert(sizeof(UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked) == 0x000001, "Wrong size on UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked");
static_assert(offsetof(UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked, _locked) == 0x000000, "Member 'UI_BattlePassInfoLevelRewardSlot_SetPremiumLocked::_locked' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoLevelRewardSlot.SetPremiumTag
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoLevelRewardSlot_SetPremiumTag final
{
public:
	bool                                          _is_premium;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoLevelRewardSlot_SetPremiumTag) == 0x000001, "Wrong alignment on UI_BattlePassInfoLevelRewardSlot_SetPremiumTag");
static_assert(sizeof(UI_BattlePassInfoLevelRewardSlot_SetPremiumTag) == 0x000001, "Wrong size on UI_BattlePassInfoLevelRewardSlot_SetPremiumTag");
static_assert(offsetof(UI_BattlePassInfoLevelRewardSlot_SetPremiumTag, _is_premium) == 0x000000, "Member 'UI_BattlePassInfoLevelRewardSlot_SetPremiumTag::_is_premium' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoLevelRewardSlot.SetRewardState
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoLevelRewardSlot_SetRewardState final
{
public:
	ERewardItemState                              _reward_state;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoLevelRewardSlot_SetRewardState) == 0x000001, "Wrong alignment on UI_BattlePassInfoLevelRewardSlot_SetRewardState");
static_assert(sizeof(UI_BattlePassInfoLevelRewardSlot_SetRewardState) == 0x000001, "Wrong size on UI_BattlePassInfoLevelRewardSlot_SetRewardState");
static_assert(offsetof(UI_BattlePassInfoLevelRewardSlot_SetRewardState, _reward_state) == 0x000000, "Member 'UI_BattlePassInfoLevelRewardSlot_SetRewardState::_reward_state' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoLevelRewardSlot.SetTargetLevel
// 0x0004 (0x0004 - 0x0000)
struct UI_BattlePassInfoLevelRewardSlot_SetTargetLevel final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoLevelRewardSlot_SetTargetLevel) == 0x000004, "Wrong alignment on UI_BattlePassInfoLevelRewardSlot_SetTargetLevel");
static_assert(sizeof(UI_BattlePassInfoLevelRewardSlot_SetTargetLevel) == 0x000004, "Wrong size on UI_BattlePassInfoLevelRewardSlot_SetTargetLevel");
static_assert(offsetof(UI_BattlePassInfoLevelRewardSlot_SetTargetLevel, _level) == 0x000000, "Member 'UI_BattlePassInfoLevelRewardSlot_SetTargetLevel::_level' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.EnableLevelBuyBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoPage_EnableLevelBuyBtn final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_EnableLevelBuyBtn) == 0x000001, "Wrong alignment on UI_BattlePassInfoPage_EnableLevelBuyBtn");
static_assert(sizeof(UI_BattlePassInfoPage_EnableLevelBuyBtn) == 0x000001, "Wrong size on UI_BattlePassInfoPage_EnableLevelBuyBtn");
static_assert(offsetof(UI_BattlePassInfoPage_EnableLevelBuyBtn, _enable) == 0x000000, "Member 'UI_BattlePassInfoPage_EnableLevelBuyBtn::_enable' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.EnablePurchaseBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoPage_EnablePurchaseBtn final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_EnablePurchaseBtn) == 0x000001, "Wrong alignment on UI_BattlePassInfoPage_EnablePurchaseBtn");
static_assert(sizeof(UI_BattlePassInfoPage_EnablePurchaseBtn) == 0x000001, "Wrong size on UI_BattlePassInfoPage_EnablePurchaseBtn");
static_assert(offsetof(UI_BattlePassInfoPage_EnablePurchaseBtn, _enable) == 0x000000, "Member 'UI_BattlePassInfoPage_EnablePurchaseBtn::_enable' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.OnSwapPass
// 0x0008 (0x0008 - 0x0000)
struct UI_BattlePassInfoPage_OnSwapPass final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_OnSwapPass) == 0x000008, "Wrong alignment on UI_BattlePassInfoPage_OnSwapPass");
static_assert(sizeof(UI_BattlePassInfoPage_OnSwapPass) == 0x000008, "Wrong size on UI_BattlePassInfoPage_OnSwapPass");
static_assert(offsetof(UI_BattlePassInfoPage_OnSwapPass, _widget) == 0x000000, "Member 'UI_BattlePassInfoPage_OnSwapPass::_widget' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.OpenIntroPopup
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoPage_OpenIntroPopup final
{
public:
	bool                                          _is_auto_opened;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_OpenIntroPopup) == 0x000001, "Wrong alignment on UI_BattlePassInfoPage_OpenIntroPopup");
static_assert(sizeof(UI_BattlePassInfoPage_OpenIntroPopup) == 0x000001, "Wrong size on UI_BattlePassInfoPage_OpenIntroPopup");
static_assert(offsetof(UI_BattlePassInfoPage_OpenIntroPopup, _is_auto_opened) == 0x000000, "Member 'UI_BattlePassInfoPage_OpenIntroPopup::_is_auto_opened' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.SetPreviewItemInfo
// 0x0020 (0x0020 - 0x0000)
struct UI_BattlePassInfoPage_SetPreviewItemInfo final
{
public:
	class FText                                   _Name;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EItemGrade                                    _Grade;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _premium_locked;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2529[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassInfoPage_SetPreviewItemInfo) == 0x000008, "Wrong alignment on UI_BattlePassInfoPage_SetPreviewItemInfo");
static_assert(sizeof(UI_BattlePassInfoPage_SetPreviewItemInfo) == 0x000020, "Wrong size on UI_BattlePassInfoPage_SetPreviewItemInfo");
static_assert(offsetof(UI_BattlePassInfoPage_SetPreviewItemInfo, _Name) == 0x000000, "Member 'UI_BattlePassInfoPage_SetPreviewItemInfo::_Name' has a wrong offset!");
static_assert(offsetof(UI_BattlePassInfoPage_SetPreviewItemInfo, _Grade) == 0x000018, "Member 'UI_BattlePassInfoPage_SetPreviewItemInfo::_Grade' has a wrong offset!");
static_assert(offsetof(UI_BattlePassInfoPage_SetPreviewItemInfo, _premium_locked) == 0x000019, "Member 'UI_BattlePassInfoPage_SetPreviewItemInfo::_premium_locked' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.ShowActivateButton
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoPage_ShowActivateButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_ShowActivateButton) == 0x000001, "Wrong alignment on UI_BattlePassInfoPage_ShowActivateButton");
static_assert(sizeof(UI_BattlePassInfoPage_ShowActivateButton) == 0x000001, "Wrong size on UI_BattlePassInfoPage_ShowActivateButton");
static_assert(offsetof(UI_BattlePassInfoPage_ShowActivateButton, _show) == 0x000000, "Member 'UI_BattlePassInfoPage_ShowActivateButton::_show' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.ShowAllRewardBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoPage_ShowAllRewardBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_ShowAllRewardBtn) == 0x000001, "Wrong alignment on UI_BattlePassInfoPage_ShowAllRewardBtn");
static_assert(sizeof(UI_BattlePassInfoPage_ShowAllRewardBtn) == 0x000001, "Wrong size on UI_BattlePassInfoPage_ShowAllRewardBtn");
static_assert(offsetof(UI_BattlePassInfoPage_ShowAllRewardBtn, _show) == 0x000000, "Member 'UI_BattlePassInfoPage_ShowAllRewardBtn::_show' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.ShowMain
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassInfoPage_ShowMain final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_ShowMain) == 0x000008, "Wrong alignment on UI_BattlePassInfoPage_ShowMain");
static_assert(sizeof(UI_BattlePassInfoPage_ShowMain) == 0x000010, "Wrong size on UI_BattlePassInfoPage_ShowMain");
static_assert(offsetof(UI_BattlePassInfoPage_ShowMain, _pass_id) == 0x000000, "Member 'UI_BattlePassInfoPage_ShowMain::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoPage.ShowPreviewItemInfo
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoPage_ShowPreviewItemInfo final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoPage_ShowPreviewItemInfo) == 0x000001, "Wrong alignment on UI_BattlePassInfoPage_ShowPreviewItemInfo");
static_assert(sizeof(UI_BattlePassInfoPage_ShowPreviewItemInfo) == 0x000001, "Wrong size on UI_BattlePassInfoPage_ShowPreviewItemInfo");
static_assert(offsetof(UI_BattlePassInfoPage_ShowPreviewItemInfo, _show) == 0x000000, "Member 'UI_BattlePassInfoPage_ShowPreviewItemInfo::_show' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoTab.SetIsActivated
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassInfoTab_SetIsActivated final
{
public:
	bool                                          _activated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoTab_SetIsActivated) == 0x000001, "Wrong alignment on UI_BattlePassInfoTab_SetIsActivated");
static_assert(sizeof(UI_BattlePassInfoTab_SetIsActivated) == 0x000001, "Wrong size on UI_BattlePassInfoTab_SetIsActivated");
static_assert(offsetof(UI_BattlePassInfoTab_SetIsActivated, _activated) == 0x000000, "Member 'UI_BattlePassInfoTab_SetIsActivated::_activated' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoTab.SetText
// 0x0018 (0x0018 - 0x0000)
struct UI_BattlePassInfoTab_SetText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassInfoTab_SetText) == 0x000008, "Wrong alignment on UI_BattlePassInfoTab_SetText");
static_assert(sizeof(UI_BattlePassInfoTab_SetText) == 0x000018, "Wrong size on UI_BattlePassInfoTab_SetText");
static_assert(offsetof(UI_BattlePassInfoTab_SetText, _text) == 0x000000, "Member 'UI_BattlePassInfoTab_SetText::_text' has a wrong offset!");

// Function Stigma.UI_BattlePassInfoTab.ShowRemainTimer
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassInfoTab_ShowRemainTimer final
{
public:
	struct FDateTime                              _end_at;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _alert_hour;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassInfoTab_ShowRemainTimer) == 0x000008, "Wrong alignment on UI_BattlePassInfoTab_ShowRemainTimer");
static_assert(sizeof(UI_BattlePassInfoTab_ShowRemainTimer) == 0x000010, "Wrong size on UI_BattlePassInfoTab_ShowRemainTimer");
static_assert(offsetof(UI_BattlePassInfoTab_ShowRemainTimer, _end_at) == 0x000000, "Member 'UI_BattlePassInfoTab_ShowRemainTimer::_end_at' has a wrong offset!");
static_assert(offsetof(UI_BattlePassInfoTab_ShowRemainTimer, _alert_hour) == 0x000008, "Member 'UI_BattlePassInfoTab_ShowRemainTimer::_alert_hour' has a wrong offset!");

// Function Stigma.UI_BattlePassIntroContainer.CheckDoNotOpen
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassIntroContainer_CheckDoNotOpen final
{
public:
	bool                                          _is_checked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassIntroContainer_CheckDoNotOpen) == 0x000001, "Wrong alignment on UI_BattlePassIntroContainer_CheckDoNotOpen");
static_assert(sizeof(UI_BattlePassIntroContainer_CheckDoNotOpen) == 0x000001, "Wrong size on UI_BattlePassIntroContainer_CheckDoNotOpen");
static_assert(offsetof(UI_BattlePassIntroContainer_CheckDoNotOpen, _is_checked) == 0x000000, "Member 'UI_BattlePassIntroContainer_CheckDoNotOpen::_is_checked' has a wrong offset!");

// Function Stigma.UI_BattlePassIntroContainer.ShowDoNotOpenCheckBox
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox) == 0x000001, "Wrong alignment on UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox");
static_assert(sizeof(UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox) == 0x000001, "Wrong size on UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox");
static_assert(offsetof(UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox, _show) == 0x000000, "Member 'UI_BattlePassIntroContainer_ShowDoNotOpenCheckBox::_show' has a wrong offset!");

// Function Stigma.UI_BattlePassIntroContainer.ShowMainPassPage
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassIntroContainer_ShowMainPassPage final
{
public:
	class UAnimatableWidget*                      _slot_widget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassIntroContainer_ShowMainPassPage) == 0x000008, "Wrong alignment on UI_BattlePassIntroContainer_ShowMainPassPage");
static_assert(sizeof(UI_BattlePassIntroContainer_ShowMainPassPage) == 0x000010, "Wrong size on UI_BattlePassIntroContainer_ShowMainPassPage");
static_assert(offsetof(UI_BattlePassIntroContainer_ShowMainPassPage, _slot_widget) == 0x000000, "Member 'UI_BattlePassIntroContainer_ShowMainPassPage::_slot_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassIntroContainer_ShowMainPassPage, _selected) == 0x000008, "Member 'UI_BattlePassIntroContainer_ShowMainPassPage::_selected' has a wrong offset!");

// Function Stigma.UI_SelectBuffPanel.OnHoverBuffItem
// 0x00B0 (0x00B0 - 0x0000)
struct UI_SelectBuffPanel_OnHoverBuffItem final
{
public:
	struct FBattleStoreEntry                      _battle_store_entry;                               // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SelectBuffPanel_OnHoverBuffItem) == 0x000008, "Wrong alignment on UI_SelectBuffPanel_OnHoverBuffItem");
static_assert(sizeof(UI_SelectBuffPanel_OnHoverBuffItem) == 0x0000B0, "Wrong size on UI_SelectBuffPanel_OnHoverBuffItem");
static_assert(offsetof(UI_SelectBuffPanel_OnHoverBuffItem, _battle_store_entry) == 0x000000, "Member 'UI_SelectBuffPanel_OnHoverBuffItem::_battle_store_entry' has a wrong offset!");

// Function Stigma.UI_SelectBuffPanel.UpdateDetail
// 0x00B0 (0x00B0 - 0x0000)
struct UI_SelectBuffPanel_UpdateDetail final
{
public:
	struct FBattleStoreEntry                      _battle_store_entry;                               // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SelectBuffPanel_UpdateDetail) == 0x000008, "Wrong alignment on UI_SelectBuffPanel_UpdateDetail");
static_assert(sizeof(UI_SelectBuffPanel_UpdateDetail) == 0x0000B0, "Wrong size on UI_SelectBuffPanel_UpdateDetail");
static_assert(offsetof(UI_SelectBuffPanel_UpdateDetail, _battle_store_entry) == 0x000000, "Member 'UI_SelectBuffPanel_UpdateDetail::_battle_store_entry' has a wrong offset!");

// Function Stigma.UI_BattlePassIntroSlot.OnClickBtn
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassIntroSlot_OnClickBtn final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassIntroSlot_OnClickBtn) == 0x000008, "Wrong alignment on UI_BattlePassIntroSlot_OnClickBtn");
static_assert(sizeof(UI_BattlePassIntroSlot_OnClickBtn) == 0x000010, "Wrong size on UI_BattlePassIntroSlot_OnClickBtn");
static_assert(offsetof(UI_BattlePassIntroSlot_OnClickBtn, _widget) == 0x000000, "Member 'UI_BattlePassIntroSlot_OnClickBtn::_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassIntroSlot_OnClickBtn, _selected) == 0x000008, "Member 'UI_BattlePassIntroSlot_OnClickBtn::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassIntroSlot.SetActivated
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassIntroSlot_SetActivated final
{
public:
	bool                                          _is_activated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassIntroSlot_SetActivated) == 0x000001, "Wrong alignment on UI_BattlePassIntroSlot_SetActivated");
static_assert(sizeof(UI_BattlePassIntroSlot_SetActivated) == 0x000001, "Wrong size on UI_BattlePassIntroSlot_SetActivated");
static_assert(offsetof(UI_BattlePassIntroSlot_SetActivated, _is_activated) == 0x000000, "Member 'UI_BattlePassIntroSlot_SetActivated::_is_activated' has a wrong offset!");

// Function Stigma.UI_BattlePassLevelBuyPopup.InitBuySlider
// 0x0004 (0x0004 - 0x0000)
struct UI_BattlePassLevelBuyPopup_InitBuySlider final
{
public:
	int32                                         _slider_max_value;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassLevelBuyPopup_InitBuySlider) == 0x000004, "Wrong alignment on UI_BattlePassLevelBuyPopup_InitBuySlider");
static_assert(sizeof(UI_BattlePassLevelBuyPopup_InitBuySlider) == 0x000004, "Wrong size on UI_BattlePassLevelBuyPopup_InitBuySlider");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_InitBuySlider, _slider_max_value) == 0x000000, "Member 'UI_BattlePassLevelBuyPopup_InitBuySlider::_slider_max_value' has a wrong offset!");

// Function Stigma.UI_BattlePassLevelBuyPopup.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassLevelBuyPopup_InitWidget final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassLevelBuyPopup_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassLevelBuyPopup_InitWidget");
static_assert(sizeof(UI_BattlePassLevelBuyPopup_InitWidget) == 0x000010, "Wrong size on UI_BattlePassLevelBuyPopup_InitWidget");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_InitWidget, _pass_id) == 0x000000, "Member 'UI_BattlePassLevelBuyPopup_InitWidget::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassLevelBuyPopup.OnBuyLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct UI_BattlePassLevelBuyPopup_OnBuyLevelChanged final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassLevelBuyPopup_OnBuyLevelChanged) == 0x000004, "Wrong alignment on UI_BattlePassLevelBuyPopup_OnBuyLevelChanged");
static_assert(sizeof(UI_BattlePassLevelBuyPopup_OnBuyLevelChanged) == 0x000004, "Wrong size on UI_BattlePassLevelBuyPopup_OnBuyLevelChanged");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_OnBuyLevelChanged, _level) == 0x000000, "Member 'UI_BattlePassLevelBuyPopup_OnBuyLevelChanged::_level' has a wrong offset!");

// Function Stigma.UI_BattlePassLevelBuyPopup.OnClickBuyBtn
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassLevelBuyPopup_OnClickBuyBtn final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2530[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassLevelBuyPopup_OnClickBuyBtn) == 0x000008, "Wrong alignment on UI_BattlePassLevelBuyPopup_OnClickBuyBtn");
static_assert(sizeof(UI_BattlePassLevelBuyPopup_OnClickBuyBtn) == 0x000010, "Wrong size on UI_BattlePassLevelBuyPopup_OnClickBuyBtn");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_OnClickBuyBtn, _widget) == 0x000000, "Member 'UI_BattlePassLevelBuyPopup_OnClickBuyBtn::_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_OnClickBuyBtn, _selected) == 0x000008, "Member 'UI_BattlePassLevelBuyPopup_OnClickBuyBtn::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassLevelBuyPopup.OnClickItem
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassLevelBuyPopup_OnClickItem final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2531[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassLevelBuyPopup_OnClickItem) == 0x000008, "Wrong alignment on UI_BattlePassLevelBuyPopup_OnClickItem");
static_assert(sizeof(UI_BattlePassLevelBuyPopup_OnClickItem) == 0x000010, "Wrong size on UI_BattlePassLevelBuyPopup_OnClickItem");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_OnClickItem, _widget) == 0x000000, "Member 'UI_BattlePassLevelBuyPopup_OnClickItem::_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassLevelBuyPopup_OnClickItem, _selected) == 0x000008, "Member 'UI_BattlePassLevelBuyPopup_OnClickItem::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassRewardPreviewPopup.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassRewardPreviewPopup_InitWidget final
{
public:
	struct FItemID_BattlePass                     _pass_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassRewardPreviewPopup_InitWidget) == 0x000008, "Wrong alignment on UI_BattlePassRewardPreviewPopup_InitWidget");
static_assert(sizeof(UI_BattlePassRewardPreviewPopup_InitWidget) == 0x000010, "Wrong size on UI_BattlePassRewardPreviewPopup_InitWidget");
static_assert(offsetof(UI_BattlePassRewardPreviewPopup_InitWidget, _pass_id) == 0x000000, "Member 'UI_BattlePassRewardPreviewPopup_InitWidget::_pass_id' has a wrong offset!");

// Function Stigma.UI_BattlePassRewardPreviewPopup.OnClickItem
// 0x0010 (0x0010 - 0x0000)
struct UI_BattlePassRewardPreviewPopup_OnClickItem final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2533[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BattlePassRewardPreviewPopup_OnClickItem) == 0x000008, "Wrong alignment on UI_BattlePassRewardPreviewPopup_OnClickItem");
static_assert(sizeof(UI_BattlePassRewardPreviewPopup_OnClickItem) == 0x000010, "Wrong size on UI_BattlePassRewardPreviewPopup_OnClickItem");
static_assert(offsetof(UI_BattlePassRewardPreviewPopup_OnClickItem, _widget) == 0x000000, "Member 'UI_BattlePassRewardPreviewPopup_OnClickItem::_widget' has a wrong offset!");
static_assert(offsetof(UI_BattlePassRewardPreviewPopup_OnClickItem, _selected) == 0x000008, "Member 'UI_BattlePassRewardPreviewPopup_OnClickItem::_selected' has a wrong offset!");

// Function Stigma.UI_BattlePassRewardPreviewPopup.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_BattlePassRewardPreviewPopup_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassRewardPreviewPopup_SetDesc) == 0x000008, "Wrong alignment on UI_BattlePassRewardPreviewPopup_SetDesc");
static_assert(sizeof(UI_BattlePassRewardPreviewPopup_SetDesc) == 0x000018, "Wrong size on UI_BattlePassRewardPreviewPopup_SetDesc");
static_assert(offsetof(UI_BattlePassRewardPreviewPopup_SetDesc, _text) == 0x000000, "Member 'UI_BattlePassRewardPreviewPopup_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_BattlePassRewardPreviewPopup.ShowBuyPremiumBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn) == 0x000001, "Wrong alignment on UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn");
static_assert(sizeof(UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn) == 0x000001, "Wrong size on UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn");
static_assert(offsetof(UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn, _show) == 0x000000, "Member 'UI_BattlePassRewardPreviewPopup_ShowBuyPremiumBtn::_show' has a wrong offset!");

// Function Stigma.UI_BattleStorePopup.OnChangedGun
// 0x0010 (0x0010 - 0x0000)
struct UI_BattleStorePopup_OnChangedGun final
{
public:
	struct FGunPreset                             _gun_preset;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattleStorePopup_OnChangedGun) == 0x000008, "Wrong alignment on UI_BattleStorePopup_OnChangedGun");
static_assert(sizeof(UI_BattleStorePopup_OnChangedGun) == 0x000010, "Wrong size on UI_BattleStorePopup_OnChangedGun");
static_assert(offsetof(UI_BattleStorePopup_OnChangedGun, _gun_preset) == 0x000000, "Member 'UI_BattleStorePopup_OnChangedGun::_gun_preset' has a wrong offset!");

// Function Stigma.UI_BattleStorePopup.OnChangedMaster
// 0x0004 (0x0004 - 0x0000)
struct UI_BattleStorePopup_OnChangedMaster final
{
public:
	int32                                         _idx_master;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattleStorePopup_OnChangedMaster) == 0x000004, "Wrong alignment on UI_BattleStorePopup_OnChangedMaster");
static_assert(sizeof(UI_BattleStorePopup_OnChangedMaster) == 0x000004, "Wrong size on UI_BattleStorePopup_OnChangedMaster");
static_assert(offsetof(UI_BattleStorePopup_OnChangedMaster, _idx_master) == 0x000000, "Member 'UI_BattleStorePopup_OnChangedMaster::_idx_master' has a wrong offset!");

// Function Stigma.UI_BattleStorePopup.OnTabChanged
// 0x000C (0x000C - 0x0000)
struct UI_BattleStorePopup_OnTabChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattleStorePopup_OnTabChanged) == 0x000004, "Wrong alignment on UI_BattleStorePopup_OnTabChanged");
static_assert(sizeof(UI_BattleStorePopup_OnTabChanged) == 0x00000C, "Wrong size on UI_BattleStorePopup_OnTabChanged");
static_assert(offsetof(UI_BattleStorePopup_OnTabChanged, _id) == 0x000000, "Member 'UI_BattleStorePopup_OnTabChanged::_id' has a wrong offset!");
static_assert(offsetof(UI_BattleStorePopup_OnTabChanged, _idx) == 0x000008, "Member 'UI_BattleStorePopup_OnTabChanged::_idx' has a wrong offset!");

// Function Stigma.UI_BattleStorePopup.UpdateMasterDetail
// 0x0018 (0x0018 - 0x0000)
struct UI_BattleStorePopup_UpdateMasterDetail final
{
public:
	int32                                         _chara_idx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2536[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             _gun_preset;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BattleStorePopup_UpdateMasterDetail) == 0x000008, "Wrong alignment on UI_BattleStorePopup_UpdateMasterDetail");
static_assert(sizeof(UI_BattleStorePopup_UpdateMasterDetail) == 0x000018, "Wrong size on UI_BattleStorePopup_UpdateMasterDetail");
static_assert(offsetof(UI_BattleStorePopup_UpdateMasterDetail, _chara_idx) == 0x000000, "Member 'UI_BattleStorePopup_UpdateMasterDetail::_chara_idx' has a wrong offset!");
static_assert(offsetof(UI_BattleStorePopup_UpdateMasterDetail, _gun_preset) == 0x000008, "Member 'UI_BattleStorePopup_UpdateMasterDetail::_gun_preset' has a wrong offset!");

// Function Stigma.UI_ShopQuickPurchase.GetCurrencyGoodsList
// 0x0020 (0x0020 - 0x0000)
struct UI_ShopQuickPurchase_GetCurrencyGoodsList final
{
public:
	struct FItemID_Currency                       _currency_type;                                    // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGoodsID>                       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopQuickPurchase_GetCurrencyGoodsList) == 0x000008, "Wrong alignment on UI_ShopQuickPurchase_GetCurrencyGoodsList");
static_assert(sizeof(UI_ShopQuickPurchase_GetCurrencyGoodsList) == 0x000020, "Wrong size on UI_ShopQuickPurchase_GetCurrencyGoodsList");
static_assert(offsetof(UI_ShopQuickPurchase_GetCurrencyGoodsList, _currency_type) == 0x000000, "Member 'UI_ShopQuickPurchase_GetCurrencyGoodsList::_currency_type' has a wrong offset!");
static_assert(offsetof(UI_ShopQuickPurchase_GetCurrencyGoodsList, ReturnValue) == 0x000010, "Member 'UI_ShopQuickPurchase_GetCurrencyGoodsList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ShopQuickPurchase.GetGunTypeGoodsList
// 0x0018 (0x0018 - 0x0000)
struct UI_ShopQuickPurchase_GetGunTypeGoodsList final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2539[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FGoodsID>                       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopQuickPurchase_GetGunTypeGoodsList) == 0x000008, "Wrong alignment on UI_ShopQuickPurchase_GetGunTypeGoodsList");
static_assert(sizeof(UI_ShopQuickPurchase_GetGunTypeGoodsList) == 0x000018, "Wrong size on UI_ShopQuickPurchase_GetGunTypeGoodsList");
static_assert(offsetof(UI_ShopQuickPurchase_GetGunTypeGoodsList, _gun_type) == 0x000000, "Member 'UI_ShopQuickPurchase_GetGunTypeGoodsList::_gun_type' has a wrong offset!");
static_assert(offsetof(UI_ShopQuickPurchase_GetGunTypeGoodsList, ReturnValue) == 0x000008, "Member 'UI_ShopQuickPurchase_GetGunTypeGoodsList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ShopQuickPurchase.Init
// 0x0018 (0x0018 - 0x0000)
struct UI_ShopQuickPurchase_Init final
{
public:
	TArray<struct FGoodsID>                       _quick_purchase_goods_list;                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EGoodsCategory                                _goods_category;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_253A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ShopQuickPurchase_Init) == 0x000008, "Wrong alignment on UI_ShopQuickPurchase_Init");
static_assert(sizeof(UI_ShopQuickPurchase_Init) == 0x000018, "Wrong size on UI_ShopQuickPurchase_Init");
static_assert(offsetof(UI_ShopQuickPurchase_Init, _quick_purchase_goods_list) == 0x000000, "Member 'UI_ShopQuickPurchase_Init::_quick_purchase_goods_list' has a wrong offset!");
static_assert(offsetof(UI_ShopQuickPurchase_Init, _goods_category) == 0x000010, "Member 'UI_ShopQuickPurchase_Init::_goods_category' has a wrong offset!");

// Function Stigma.UI_ShopQuickPurchase.OnUpdateGoods
// 0x0001 (0x0001 - 0x0000)
struct UI_ShopQuickPurchase_OnUpdateGoods final
{
public:
	EUserEvent                                    _event;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopQuickPurchase_OnUpdateGoods) == 0x000001, "Wrong alignment on UI_ShopQuickPurchase_OnUpdateGoods");
static_assert(sizeof(UI_ShopQuickPurchase_OnUpdateGoods) == 0x000001, "Wrong size on UI_ShopQuickPurchase_OnUpdateGoods");
static_assert(offsetof(UI_ShopQuickPurchase_OnUpdateGoods, _event) == 0x000000, "Member 'UI_ShopQuickPurchase_OnUpdateGoods::_event' has a wrong offset!");

// Function Stigma.UI_BoosterSelectMenuItem.InitBuffDesc
// 0x0178 (0x0178 - 0x0000)
struct UI_BoosterSelectMenuItem_InitBuffDesc final
{
public:
	struct FConfig_Booster                        _booster_def;                                      // 0x0000(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSelectMenuItem_InitBuffDesc) == 0x000008, "Wrong alignment on UI_BoosterSelectMenuItem_InitBuffDesc");
static_assert(sizeof(UI_BoosterSelectMenuItem_InitBuffDesc) == 0x000178, "Wrong size on UI_BoosterSelectMenuItem_InitBuffDesc");
static_assert(offsetof(UI_BoosterSelectMenuItem_InitBuffDesc, _booster_def) == 0x000000, "Member 'UI_BoosterSelectMenuItem_InitBuffDesc::_booster_def' has a wrong offset!");

// Function Stigma.UI_BoosterSelectMenuItem.GetBoosterID
// 0x0010 (0x0010 - 0x0000)
struct UI_BoosterSelectMenuItem_GetBoosterID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSelectMenuItem_GetBoosterID) == 0x000008, "Wrong alignment on UI_BoosterSelectMenuItem_GetBoosterID");
static_assert(sizeof(UI_BoosterSelectMenuItem_GetBoosterID) == 0x000010, "Wrong size on UI_BoosterSelectMenuItem_GetBoosterID");
static_assert(offsetof(UI_BoosterSelectMenuItem_GetBoosterID, ReturnValue) == 0x000000, "Member 'UI_BoosterSelectMenuItem_GetBoosterID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_SurveyWeb.OnOpen
// 0x0018 (0x0018 - 0x0000)
struct UI_SurveyWeb_OnOpen final
{
public:
	class FString                                 _url;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_253E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_SurveyWeb_OnOpen) == 0x000008, "Wrong alignment on UI_SurveyWeb_OnOpen");
static_assert(sizeof(UI_SurveyWeb_OnOpen) == 0x000018, "Wrong size on UI_SurveyWeb_OnOpen");
static_assert(offsetof(UI_SurveyWeb_OnOpen, _url) == 0x000000, "Member 'UI_SurveyWeb_OnOpen::_url' has a wrong offset!");
static_assert(offsetof(UI_SurveyWeb_OnOpen, ReturnValue) == 0x000010, "Member 'UI_SurveyWeb_OnOpen::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BoosterSlotList.OnAck_BoosterUpdate
// 0x0010 (0x0010 - 0x0000)
struct UI_BoosterSlotList_OnAck_BoosterUpdate final
{
public:
	struct FACK_BoosterUpdate                     _ack;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSlotList_OnAck_BoosterUpdate) == 0x000008, "Wrong alignment on UI_BoosterSlotList_OnAck_BoosterUpdate");
static_assert(sizeof(UI_BoosterSlotList_OnAck_BoosterUpdate) == 0x000010, "Wrong size on UI_BoosterSlotList_OnAck_BoosterUpdate");
static_assert(offsetof(UI_BoosterSlotList_OnAck_BoosterUpdate, _ack) == 0x000000, "Member 'UI_BoosterSlotList_OnAck_BoosterUpdate::_ack' has a wrong offset!");

// Function Stigma.UI_BoosterSlotList.OnCreateMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_BoosterSlotList_OnCreateMenuWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSlotList_OnCreateMenuWidget) == 0x000008, "Wrong alignment on UI_BoosterSlotList_OnCreateMenuWidget");
static_assert(sizeof(UI_BoosterSlotList_OnCreateMenuWidget) == 0x000008, "Wrong size on UI_BoosterSlotList_OnCreateMenuWidget");
static_assert(offsetof(UI_BoosterSlotList_OnCreateMenuWidget, ReturnValue) == 0x000000, "Member 'UI_BoosterSlotList_OnCreateMenuWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BoosterSlotList.OnMenuOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_BoosterSlotList_OnMenuOpenChanged final
{
public:
	bool                                          _is_open;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSlotList_OnMenuOpenChanged) == 0x000001, "Wrong alignment on UI_BoosterSlotList_OnMenuOpenChanged");
static_assert(sizeof(UI_BoosterSlotList_OnMenuOpenChanged) == 0x000001, "Wrong size on UI_BoosterSlotList_OnMenuOpenChanged");
static_assert(offsetof(UI_BoosterSlotList_OnMenuOpenChanged, _is_open) == 0x000000, "Member 'UI_BoosterSlotList_OnMenuOpenChanged::_is_open' has a wrong offset!");

// Function Stigma.UI_BoosterSlotList.OnSelectBoosterSlot
// 0x0004 (0x0004 - 0x0000)
struct UI_BoosterSlotList_OnSelectBoosterSlot final
{
public:
	int32                                         _slot_index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BoosterSlotList_OnSelectBoosterSlot) == 0x000004, "Wrong alignment on UI_BoosterSlotList_OnSelectBoosterSlot");
static_assert(sizeof(UI_BoosterSlotList_OnSelectBoosterSlot) == 0x000004, "Wrong size on UI_BoosterSlotList_OnSelectBoosterSlot");
static_assert(offsetof(UI_BoosterSlotList_OnSelectBoosterSlot, _slot_index) == 0x000000, "Member 'UI_BoosterSlotList_OnSelectBoosterSlot::_slot_index' has a wrong offset!");

// Function Stigma.UI_Bounty_Progress.CancelTimer
// 0x0002 (0x0002 - 0x0000)
struct UI_Bounty_Progress_CancelTimer final
{
public:
	EBountyActionType                             _bounty_action_type;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_widget;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Bounty_Progress_CancelTimer) == 0x000001, "Wrong alignment on UI_Bounty_Progress_CancelTimer");
static_assert(sizeof(UI_Bounty_Progress_CancelTimer) == 0x000002, "Wrong size on UI_Bounty_Progress_CancelTimer");
static_assert(offsetof(UI_Bounty_Progress_CancelTimer, _bounty_action_type) == 0x000000, "Member 'UI_Bounty_Progress_CancelTimer::_bounty_action_type' has a wrong offset!");
static_assert(offsetof(UI_Bounty_Progress_CancelTimer, _hide_widget) == 0x000001, "Member 'UI_Bounty_Progress_CancelTimer::_hide_widget' has a wrong offset!");

// Function Stigma.UI_Bounty_Progress.DriveTimer
// 0x0004 (0x0004 - 0x0000)
struct UI_Bounty_Progress_DriveTimer final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Bounty_Progress_DriveTimer) == 0x000004, "Wrong alignment on UI_Bounty_Progress_DriveTimer");
static_assert(sizeof(UI_Bounty_Progress_DriveTimer) == 0x000004, "Wrong size on UI_Bounty_Progress_DriveTimer");
static_assert(offsetof(UI_Bounty_Progress_DriveTimer, _delta) == 0x000000, "Member 'UI_Bounty_Progress_DriveTimer::_delta' has a wrong offset!");

// Function Stigma.UI_Bounty_Progress.SetBountyActionType
// 0x0001 (0x0001 - 0x0000)
struct UI_Bounty_Progress_SetBountyActionType final
{
public:
	EBountyActionType                             _bounty_action_type;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Bounty_Progress_SetBountyActionType) == 0x000001, "Wrong alignment on UI_Bounty_Progress_SetBountyActionType");
static_assert(sizeof(UI_Bounty_Progress_SetBountyActionType) == 0x000001, "Wrong size on UI_Bounty_Progress_SetBountyActionType");
static_assert(offsetof(UI_Bounty_Progress_SetBountyActionType, _bounty_action_type) == 0x000000, "Member 'UI_Bounty_Progress_SetBountyActionType::_bounty_action_type' has a wrong offset!");

// Function Stigma.UI_Bounty_Progress.StartTimer
// 0x0020 (0x0020 - 0x0000)
struct UI_Bounty_Progress_StartTimer final
{
public:
	EBountyActionType                             _bounty_action_type;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2543[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _start_time;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max_time;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _reverse;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2544[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(bool _end_success)>            _proc;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Bounty_Progress_StartTimer) == 0x000004, "Wrong alignment on UI_Bounty_Progress_StartTimer");
static_assert(sizeof(UI_Bounty_Progress_StartTimer) == 0x000020, "Wrong size on UI_Bounty_Progress_StartTimer");
static_assert(offsetof(UI_Bounty_Progress_StartTimer, _bounty_action_type) == 0x000000, "Member 'UI_Bounty_Progress_StartTimer::_bounty_action_type' has a wrong offset!");
static_assert(offsetof(UI_Bounty_Progress_StartTimer, _start_time) == 0x000004, "Member 'UI_Bounty_Progress_StartTimer::_start_time' has a wrong offset!");
static_assert(offsetof(UI_Bounty_Progress_StartTimer, _max_time) == 0x000008, "Member 'UI_Bounty_Progress_StartTimer::_max_time' has a wrong offset!");
static_assert(offsetof(UI_Bounty_Progress_StartTimer, _reverse) == 0x00000C, "Member 'UI_Bounty_Progress_StartTimer::_reverse' has a wrong offset!");
static_assert(offsetof(UI_Bounty_Progress_StartTimer, _proc) == 0x000010, "Member 'UI_Bounty_Progress_StartTimer::_proc' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.GetBriefToolTipEntries
// 0x0010 (0x0010 - 0x0000)
struct UI_BriefUserSlot_GetBriefToolTipEntries final
{
public:
	TArray<struct FHoverMenuEntry>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_GetBriefToolTipEntries) == 0x000008, "Wrong alignment on UI_BriefUserSlot_GetBriefToolTipEntries");
static_assert(sizeof(UI_BriefUserSlot_GetBriefToolTipEntries) == 0x000010, "Wrong size on UI_BriefUserSlot_GetBriefToolTipEntries");
static_assert(offsetof(UI_BriefUserSlot_GetBriefToolTipEntries, ReturnValue) == 0x000000, "Member 'UI_BriefUserSlot_GetBriefToolTipEntries::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.InitContext
// 0x0010 (0x0010 - 0x0000)
struct UI_BriefUserSlot_InitContext final
{
public:
	class UUserProfile*                           _brief_user;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserProfileType                              _as;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2547[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_BriefUserSlot_InitContext) == 0x000008, "Wrong alignment on UI_BriefUserSlot_InitContext");
static_assert(sizeof(UI_BriefUserSlot_InitContext) == 0x000010, "Wrong size on UI_BriefUserSlot_InitContext");
static_assert(offsetof(UI_BriefUserSlot_InitContext, _brief_user) == 0x000000, "Member 'UI_BriefUserSlot_InitContext::_brief_user' has a wrong offset!");
static_assert(offsetof(UI_BriefUserSlot_InitContext, _as) == 0x000008, "Member 'UI_BriefUserSlot_InitContext::_as' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.SetActivePartyInvitingText
// 0x0001 (0x0001 - 0x0000)
struct UI_BriefUserSlot_SetActivePartyInvitingText final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_SetActivePartyInvitingText) == 0x000001, "Wrong alignment on UI_BriefUserSlot_SetActivePartyInvitingText");
static_assert(sizeof(UI_BriefUserSlot_SetActivePartyInvitingText) == 0x000001, "Wrong size on UI_BriefUserSlot_SetActivePartyInvitingText");
static_assert(offsetof(UI_BriefUserSlot_SetActivePartyInvitingText, _flag) == 0x000000, "Member 'UI_BriefUserSlot_SetActivePartyInvitingText::_flag' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.SetNickNameColor
// 0x0014 (0x0014 - 0x0000)
struct UI_BriefUserSlot_SetNickNameColor final
{
public:
	struct FSlateColor                            _color;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_SetNickNameColor) == 0x000004, "Wrong alignment on UI_BriefUserSlot_SetNickNameColor");
static_assert(sizeof(UI_BriefUserSlot_SetNickNameColor) == 0x000014, "Wrong size on UI_BriefUserSlot_SetNickNameColor");
static_assert(offsetof(UI_BriefUserSlot_SetNickNameColor, _color) == 0x000000, "Member 'UI_BriefUserSlot_SetNickNameColor::_color' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.SetNickNameText
// 0x0018 (0x0018 - 0x0000)
struct UI_BriefUserSlot_SetNickNameText final
{
public:
	class FText                                   _nickname;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_SetNickNameText) == 0x000008, "Wrong alignment on UI_BriefUserSlot_SetNickNameText");
static_assert(sizeof(UI_BriefUserSlot_SetNickNameText) == 0x000018, "Wrong size on UI_BriefUserSlot_SetNickNameText");
static_assert(offsetof(UI_BriefUserSlot_SetNickNameText, _nickname) == 0x000000, "Member 'UI_BriefUserSlot_SetNickNameText::_nickname' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.SetStateColor
// 0x0014 (0x0014 - 0x0000)
struct UI_BriefUserSlot_SetStateColor final
{
public:
	struct FSlateColor                            _color;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_SetStateColor) == 0x000004, "Wrong alignment on UI_BriefUserSlot_SetStateColor");
static_assert(sizeof(UI_BriefUserSlot_SetStateColor) == 0x000014, "Wrong size on UI_BriefUserSlot_SetStateColor");
static_assert(offsetof(UI_BriefUserSlot_SetStateColor, _color) == 0x000000, "Member 'UI_BriefUserSlot_SetStateColor::_color' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.SetStateText
// 0x0018 (0x0018 - 0x0000)
struct UI_BriefUserSlot_SetStateText final
{
public:
	class FText                                   _state;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_SetStateText) == 0x000008, "Wrong alignment on UI_BriefUserSlot_SetStateText");
static_assert(sizeof(UI_BriefUserSlot_SetStateText) == 0x000018, "Wrong size on UI_BriefUserSlot_SetStateText");
static_assert(offsetof(UI_BriefUserSlot_SetStateText, _state) == 0x000000, "Member 'UI_BriefUserSlot_SetStateText::_state' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.UpdateProfileCard
// 0x0008 (0x0008 - 0x0000)
struct UI_BriefUserSlot_UpdateProfileCard final
{
public:
	class UUserProfile*                           _brief_user;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_UpdateProfileCard) == 0x000008, "Wrong alignment on UI_BriefUserSlot_UpdateProfileCard");
static_assert(sizeof(UI_BriefUserSlot_UpdateProfileCard) == 0x000008, "Wrong size on UI_BriefUserSlot_UpdateProfileCard");
static_assert(offsetof(UI_BriefUserSlot_UpdateProfileCard, _brief_user) == 0x000000, "Member 'UI_BriefUserSlot_UpdateProfileCard::_brief_user' has a wrong offset!");

// Function Stigma.UI_BriefUserSlot.GetBriefUser
// 0x0008 (0x0008 - 0x0000)
struct UI_BriefUserSlot_GetBriefUser final
{
public:
	const class UUserProfile*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BriefUserSlot_GetBriefUser) == 0x000008, "Wrong alignment on UI_BriefUserSlot_GetBriefUser");
static_assert(sizeof(UI_BriefUserSlot_GetBriefUser) == 0x000008, "Wrong size on UI_BriefUserSlot_GetBriefUser");
static_assert(offsetof(UI_BriefUserSlot_GetBriefUser, ReturnValue) == 0x000000, "Member 'UI_BriefUserSlot_GetBriefUser::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BuffTypeBoxItem.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_BuffTypeBoxItem_SetTitle final
{
public:
	class FText                                   _buff_category;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BuffTypeBoxItem_SetTitle) == 0x000008, "Wrong alignment on UI_BuffTypeBoxItem_SetTitle");
static_assert(sizeof(UI_BuffTypeBoxItem_SetTitle) == 0x000018, "Wrong size on UI_BuffTypeBoxItem_SetTitle");
static_assert(offsetof(UI_BuffTypeBoxItem_SetTitle, _buff_category) == 0x000000, "Member 'UI_BuffTypeBoxItem_SetTitle::_buff_category' has a wrong offset!");

// Function Stigma.UI_BulletTipBtn.CheckAvailable
// 0x0050 (0x0050 - 0x0000)
struct UI_BulletTipBtn_CheckAvailable final
{
public:
	TSet<EBulletTip>                              _available_bullet_tips;                            // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BulletTipBtn_CheckAvailable) == 0x000008, "Wrong alignment on UI_BulletTipBtn_CheckAvailable");
static_assert(sizeof(UI_BulletTipBtn_CheckAvailable) == 0x000050, "Wrong size on UI_BulletTipBtn_CheckAvailable");
static_assert(offsetof(UI_BulletTipBtn_CheckAvailable, _available_bullet_tips) == 0x000000, "Member 'UI_BulletTipBtn_CheckAvailable::_available_bullet_tips' has a wrong offset!");

// Function Stigma.UI_BulletTipBtn.SetGunObject
// 0x0008 (0x0008 - 0x0000)
struct UI_BulletTipBtn_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BulletTipBtn_SetGunObject) == 0x000008, "Wrong alignment on UI_BulletTipBtn_SetGunObject");
static_assert(sizeof(UI_BulletTipBtn_SetGunObject) == 0x000008, "Wrong size on UI_BulletTipBtn_SetGunObject");
static_assert(offsetof(UI_BulletTipBtn_SetGunObject, _gun_object) == 0x000000, "Member 'UI_BulletTipBtn_SetGunObject::_gun_object' has a wrong offset!");

// Function Stigma.UI_BulletTipSelection.AddToastMessage
// 0x0001 (0x0001 - 0x0000)
struct UI_BulletTipSelection_AddToastMessage final
{
public:
	EBulletTip                                    _bullet_tip;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BulletTipSelection_AddToastMessage) == 0x000001, "Wrong alignment on UI_BulletTipSelection_AddToastMessage");
static_assert(sizeof(UI_BulletTipSelection_AddToastMessage) == 0x000001, "Wrong size on UI_BulletTipSelection_AddToastMessage");
static_assert(offsetof(UI_BulletTipSelection_AddToastMessage, _bullet_tip) == 0x000000, "Member 'UI_BulletTipSelection_AddToastMessage::_bullet_tip' has a wrong offset!");

// Function Stigma.UI_BulletTipSelection.OnUpdateGunAck
// 0x0038 (0x0038 - 0x0000)
struct UI_BulletTipSelection_OnUpdateGunAck final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_UpdateGunSpec                     _ack;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BulletTipSelection_OnUpdateGunAck) == 0x000008, "Wrong alignment on UI_BulletTipSelection_OnUpdateGunAck");
static_assert(sizeof(UI_BulletTipSelection_OnUpdateGunAck) == 0x000038, "Wrong size on UI_BulletTipSelection_OnUpdateGunAck");
static_assert(offsetof(UI_BulletTipSelection_OnUpdateGunAck, _rcode) == 0x000000, "Member 'UI_BulletTipSelection_OnUpdateGunAck::_rcode' has a wrong offset!");
static_assert(offsetof(UI_BulletTipSelection_OnUpdateGunAck, _ack) == 0x000008, "Member 'UI_BulletTipSelection_OnUpdateGunAck::_ack' has a wrong offset!");
static_assert(offsetof(UI_BulletTipSelection_OnUpdateGunAck, ReturnValue) == 0x000018, "Member 'UI_BulletTipSelection_OnUpdateGunAck::ReturnValue' has a wrong offset!");

// Function Stigma.UI_BulletTipSelection.SelectBulletTip
// 0x0001 (0x0001 - 0x0000)
struct UI_BulletTipSelection_SelectBulletTip final
{
public:
	EBulletTip                                    _bullet_tip;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BulletTipSelection_SelectBulletTip) == 0x000001, "Wrong alignment on UI_BulletTipSelection_SelectBulletTip");
static_assert(sizeof(UI_BulletTipSelection_SelectBulletTip) == 0x000001, "Wrong size on UI_BulletTipSelection_SelectBulletTip");
static_assert(offsetof(UI_BulletTipSelection_SelectBulletTip, _bullet_tip) == 0x000000, "Member 'UI_BulletTipSelection_SelectBulletTip::_bullet_tip' has a wrong offset!");

// Function Stigma.UI_BulletTipSelection.SetGunObject
// 0x0008 (0x0008 - 0x0000)
struct UI_BulletTipSelection_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_BulletTipSelection_SetGunObject) == 0x000008, "Wrong alignment on UI_BulletTipSelection_SetGunObject");
static_assert(sizeof(UI_BulletTipSelection_SetGunObject) == 0x000008, "Wrong size on UI_BulletTipSelection_SetGunObject");
static_assert(offsetof(UI_BulletTipSelection_SetGunObject, _gun_object) == 0x000000, "Member 'UI_BulletTipSelection_SetGunObject::_gun_object' has a wrong offset!");

// Function Stigma.UI_CancellationPolicy.CheckCurrencyType
// 0x0010 (0x0010 - 0x0000)
struct UI_CancellationPolicy_CheckCurrencyType final
{
public:
	TArray<struct FItemID_Currency>               _currency_types;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CancellationPolicy_CheckCurrencyType) == 0x000008, "Wrong alignment on UI_CancellationPolicy_CheckCurrencyType");
static_assert(sizeof(UI_CancellationPolicy_CheckCurrencyType) == 0x000010, "Wrong size on UI_CancellationPolicy_CheckCurrencyType");
static_assert(offsetof(UI_CancellationPolicy_CheckCurrencyType, _currency_types) == 0x000000, "Member 'UI_CancellationPolicy_CheckCurrencyType::_currency_types' has a wrong offset!");

// Function Stigma.UI_CancellationPolicy.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_CancellationPolicy_InitWidget final
{
public:
	TArray<struct FItemID_Currency>               _currency_types;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CancellationPolicy_InitWidget) == 0x000008, "Wrong alignment on UI_CancellationPolicy_InitWidget");
static_assert(sizeof(UI_CancellationPolicy_InitWidget) == 0x000010, "Wrong size on UI_CancellationPolicy_InitWidget");
static_assert(offsetof(UI_CancellationPolicy_InitWidget, _currency_types) == 0x000000, "Member 'UI_CancellationPolicy_InitWidget::_currency_types' has a wrong offset!");

// Function Stigma.UI_CharacterPalette.IsSelectedCharacter
// 0x0002 (0x0002 - 0x0000)
struct UI_CharacterPalette_IsSelectedCharacter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CharacterPalette_IsSelectedCharacter) == 0x000001, "Wrong alignment on UI_CharacterPalette_IsSelectedCharacter");
static_assert(sizeof(UI_CharacterPalette_IsSelectedCharacter) == 0x000002, "Wrong size on UI_CharacterPalette_IsSelectedCharacter");
static_assert(offsetof(UI_CharacterPalette_IsSelectedCharacter, _chara_type) == 0x000000, "Member 'UI_CharacterPalette_IsSelectedCharacter::_chara_type' has a wrong offset!");
static_assert(offsetof(UI_CharacterPalette_IsSelectedCharacter, ReturnValue) == 0x000001, "Member 'UI_CharacterPalette_IsSelectedCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CharacterPicker.Ready
// 0x0001 (0x0001 - 0x0000)
struct UI_CharacterPicker_Ready final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CharacterPicker_Ready) == 0x000001, "Wrong alignment on UI_CharacterPicker_Ready");
static_assert(sizeof(UI_CharacterPicker_Ready) == 0x000001, "Wrong size on UI_CharacterPicker_Ready");
static_assert(offsetof(UI_CharacterPicker_Ready, ReturnValue) == 0x000000, "Member 'UI_CharacterPicker_Ready::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CharacterPicker.SelectCharacter
// 0x0001 (0x0001 - 0x0000)
struct UI_CharacterPicker_SelectCharacter final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CharacterPicker_SelectCharacter) == 0x000001, "Wrong alignment on UI_CharacterPicker_SelectCharacter");
static_assert(sizeof(UI_CharacterPicker_SelectCharacter) == 0x000001, "Wrong size on UI_CharacterPicker_SelectCharacter");
static_assert(offsetof(UI_CharacterPicker_SelectCharacter, _chara_type) == 0x000000, "Member 'UI_CharacterPicker_SelectCharacter::_chara_type' has a wrong offset!");

// Function Stigma.UI_CharacterPicker.GetPickedCharacter
// 0x0060 (0x0060 - 0x0000)
struct UI_CharacterPicker_GetPickedCharacter final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2550[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterInfo                         ReturnValue;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CharacterPicker_GetPickedCharacter) == 0x000008, "Wrong alignment on UI_CharacterPicker_GetPickedCharacter");
static_assert(sizeof(UI_CharacterPicker_GetPickedCharacter) == 0x000060, "Wrong size on UI_CharacterPicker_GetPickedCharacter");
static_assert(offsetof(UI_CharacterPicker_GetPickedCharacter, _idx) == 0x000000, "Member 'UI_CharacterPicker_GetPickedCharacter::_idx' has a wrong offset!");
static_assert(offsetof(UI_CharacterPicker_GetPickedCharacter, ReturnValue) == 0x000008, "Member 'UI_CharacterPicker_GetPickedCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CharacterPicker.GetPickedCharacterGun
// 0x00D8 (0x00D8 - 0x0000)
struct UI_CharacterPicker_GetPickedCharacterGun final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2551[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunSpec                               ReturnValue;                                       // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CharacterPicker_GetPickedCharacterGun) == 0x000008, "Wrong alignment on UI_CharacterPicker_GetPickedCharacterGun");
static_assert(sizeof(UI_CharacterPicker_GetPickedCharacterGun) == 0x0000D8, "Wrong size on UI_CharacterPicker_GetPickedCharacterGun");
static_assert(offsetof(UI_CharacterPicker_GetPickedCharacterGun, _idx) == 0x000000, "Member 'UI_CharacterPicker_GetPickedCharacterGun::_idx' has a wrong offset!");
static_assert(offsetof(UI_CharacterPicker_GetPickedCharacterGun, ReturnValue) == 0x000008, "Member 'UI_CharacterPicker_GetPickedCharacterGun::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CharacterPicker.GetPickedCharacterType
// 0x0008 (0x0008 - 0x0000)
struct UI_CharacterPicker_GetPickedCharacterType final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2552[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_CharacterPicker_GetPickedCharacterType) == 0x000004, "Wrong alignment on UI_CharacterPicker_GetPickedCharacterType");
static_assert(sizeof(UI_CharacterPicker_GetPickedCharacterType) == 0x000008, "Wrong size on UI_CharacterPicker_GetPickedCharacterType");
static_assert(offsetof(UI_CharacterPicker_GetPickedCharacterType, _idx) == 0x000000, "Member 'UI_CharacterPicker_GetPickedCharacterType::_idx' has a wrong offset!");
static_assert(offsetof(UI_CharacterPicker_GetPickedCharacterType, ReturnValue) == 0x000004, "Member 'UI_CharacterPicker_GetPickedCharacterType::ReturnValue' has a wrong offset!");

// Function Stigma.POPUP_ChangeMaster.SetTimeLimit
// 0x0004 (0x0004 - 0x0000)
struct POPUP_ChangeMaster_SetTimeLimit final
{
public:
	int32                                         _limit_time_sec;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(POPUP_ChangeMaster_SetTimeLimit) == 0x000004, "Wrong alignment on POPUP_ChangeMaster_SetTimeLimit");
static_assert(sizeof(POPUP_ChangeMaster_SetTimeLimit) == 0x000004, "Wrong size on POPUP_ChangeMaster_SetTimeLimit");
static_assert(offsetof(POPUP_ChangeMaster_SetTimeLimit, _limit_time_sec) == 0x000000, "Member 'POPUP_ChangeMaster_SetTimeLimit::_limit_time_sec' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetChannelTypeText
// 0x0018 (0x0018 - 0x0000)
struct UI_ChatSlot_SetChannelTypeText final
{
public:
	class FText                                   _channel_type_text;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetChannelTypeText) == 0x000008, "Wrong alignment on UI_ChatSlot_SetChannelTypeText");
static_assert(sizeof(UI_ChatSlot_SetChannelTypeText) == 0x000018, "Wrong size on UI_ChatSlot_SetChannelTypeText");
static_assert(offsetof(UI_ChatSlot_SetChannelTypeText, _channel_type_text) == 0x000000, "Member 'UI_ChatSlot_SetChannelTypeText::_channel_type_text' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetChannelTypeTextColor
// 0x0010 (0x0010 - 0x0000)
struct UI_ChatSlot_SetChannelTypeTextColor final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetChannelTypeTextColor) == 0x000004, "Wrong alignment on UI_ChatSlot_SetChannelTypeTextColor");
static_assert(sizeof(UI_ChatSlot_SetChannelTypeTextColor) == 0x000010, "Wrong size on UI_ChatSlot_SetChannelTypeTextColor");
static_assert(offsetof(UI_ChatSlot_SetChannelTypeTextColor, _color) == 0x000000, "Member 'UI_ChatSlot_SetChannelTypeTextColor::_color' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetChat
// 0x0040 (0x0040 - 0x0000)
struct UI_ChatSlot_SetChat final
{
public:
	EChatType                                     _chat_type;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2556[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   _nickname;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _chat_text;                                        // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2557[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ChatSlot_SetChat) == 0x000008, "Wrong alignment on UI_ChatSlot_SetChat");
static_assert(sizeof(UI_ChatSlot_SetChat) == 0x000040, "Wrong size on UI_ChatSlot_SetChat");
static_assert(offsetof(UI_ChatSlot_SetChat, _chat_type) == 0x000000, "Member 'UI_ChatSlot_SetChat::_chat_type' has a wrong offset!");
static_assert(offsetof(UI_ChatSlot_SetChat, _nickname) == 0x000008, "Member 'UI_ChatSlot_SetChat::_nickname' has a wrong offset!");
static_assert(offsetof(UI_ChatSlot_SetChat, _chat_text) == 0x000020, "Member 'UI_ChatSlot_SetChat::_chat_text' has a wrong offset!");
static_assert(offsetof(UI_ChatSlot_SetChat, ReturnValue) == 0x000038, "Member 'UI_ChatSlot_SetChat::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetChatTypeText
// 0x0018 (0x0018 - 0x0000)
struct UI_ChatSlot_SetChatTypeText final
{
public:
	class FText                                   _chat_type_text;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetChatTypeText) == 0x000008, "Wrong alignment on UI_ChatSlot_SetChatTypeText");
static_assert(sizeof(UI_ChatSlot_SetChatTypeText) == 0x000018, "Wrong size on UI_ChatSlot_SetChatTypeText");
static_assert(offsetof(UI_ChatSlot_SetChatTypeText, _chat_type_text) == 0x000000, "Member 'UI_ChatSlot_SetChatTypeText::_chat_type_text' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetChatTypeTextColor
// 0x0010 (0x0010 - 0x0000)
struct UI_ChatSlot_SetChatTypeTextColor final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetChatTypeTextColor) == 0x000004, "Wrong alignment on UI_ChatSlot_SetChatTypeTextColor");
static_assert(sizeof(UI_ChatSlot_SetChatTypeTextColor) == 0x000010, "Wrong size on UI_ChatSlot_SetChatTypeTextColor");
static_assert(offsetof(UI_ChatSlot_SetChatTypeTextColor, _color) == 0x000000, "Member 'UI_ChatSlot_SetChatTypeTextColor::_color' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetContextTextColor
// 0x0010 (0x0010 - 0x0000)
struct UI_ChatSlot_SetContextTextColor final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetContextTextColor) == 0x000004, "Wrong alignment on UI_ChatSlot_SetContextTextColor");
static_assert(sizeof(UI_ChatSlot_SetContextTextColor) == 0x000010, "Wrong size on UI_ChatSlot_SetContextTextColor");
static_assert(offsetof(UI_ChatSlot_SetContextTextColor, _color) == 0x000000, "Member 'UI_ChatSlot_SetContextTextColor::_color' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetFont
// 0x0058 (0x0058 - 0x0000)
struct UI_ChatSlot_SetFont final
{
public:
	struct FSlateFontInfo                         _font_info;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetFont) == 0x000008, "Wrong alignment on UI_ChatSlot_SetFont");
static_assert(sizeof(UI_ChatSlot_SetFont) == 0x000058, "Wrong size on UI_ChatSlot_SetFont");
static_assert(offsetof(UI_ChatSlot_SetFont, _font_info) == 0x000000, "Member 'UI_ChatSlot_SetFont::_font_info' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetNicknameTextColor
// 0x0010 (0x0010 - 0x0000)
struct UI_ChatSlot_SetNicknameTextColor final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetNicknameTextColor) == 0x000004, "Wrong alignment on UI_ChatSlot_SetNicknameTextColor");
static_assert(sizeof(UI_ChatSlot_SetNicknameTextColor) == 0x000010, "Wrong size on UI_ChatSlot_SetNicknameTextColor");
static_assert(offsetof(UI_ChatSlot_SetNicknameTextColor, _color) == 0x000000, "Member 'UI_ChatSlot_SetNicknameTextColor::_color' has a wrong offset!");

// Function Stigma.UI_ChatSlot.SetUseChatTypeText
// 0x0001 (0x0001 - 0x0000)
struct UI_ChatSlot_SetUseChatTypeText final
{
public:
	bool                                          _is_use;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ChatSlot_SetUseChatTypeText) == 0x000001, "Wrong alignment on UI_ChatSlot_SetUseChatTypeText");
static_assert(sizeof(UI_ChatSlot_SetUseChatTypeText) == 0x000001, "Wrong size on UI_ChatSlot_SetUseChatTypeText");
static_assert(offsetof(UI_ChatSlot_SetUseChatTypeText, _is_use) == 0x000000, "Member 'UI_ChatSlot_SetUseChatTypeText::_is_use' has a wrong offset!");

// Function Stigma.UI_CheatBase.OnBindChara
// 0x0010 (0x0010 - 0x0000)
struct UI_CheatBase_OnBindChara final
{
public:
	class ACharaBase*                             _pawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2558[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_CheatBase_OnBindChara) == 0x000008, "Wrong alignment on UI_CheatBase_OnBindChara");
static_assert(sizeof(UI_CheatBase_OnBindChara) == 0x000010, "Wrong size on UI_CheatBase_OnBindChara");
static_assert(offsetof(UI_CheatBase_OnBindChara, _pawn) == 0x000000, "Member 'UI_CheatBase_OnBindChara::_pawn' has a wrong offset!");
static_assert(offsetof(UI_CheatBase_OnBindChara, ReturnValue) == 0x000008, "Member 'UI_CheatBase_OnBindChara::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CLBStorePopup.OnClearAllItems
// 0x0001 (0x0001 - 0x0000)
struct UI_CLBStorePopup_OnClearAllItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CLBStorePopup_OnClearAllItems) == 0x000001, "Wrong alignment on UI_CLBStorePopup_OnClearAllItems");
static_assert(sizeof(UI_CLBStorePopup_OnClearAllItems) == 0x000001, "Wrong size on UI_CLBStorePopup_OnClearAllItems");
static_assert(offsetof(UI_CLBStorePopup_OnClearAllItems, ReturnValue) == 0x000000, "Member 'UI_CLBStorePopup_OnClearAllItems::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CLBStorePopup.OnFinishAllItems
// 0x0001 (0x0001 - 0x0000)
struct UI_CLBStorePopup_OnFinishAllItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CLBStorePopup_OnFinishAllItems) == 0x000001, "Wrong alignment on UI_CLBStorePopup_OnFinishAllItems");
static_assert(sizeof(UI_CLBStorePopup_OnFinishAllItems) == 0x000001, "Wrong size on UI_CLBStorePopup_OnFinishAllItems");
static_assert(offsetof(UI_CLBStorePopup_OnFinishAllItems, ReturnValue) == 0x000000, "Member 'UI_CLBStorePopup_OnFinishAllItems::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CLBStorePopup.OnInitializeItem
// 0x0010 (0x0010 - 0x0000)
struct UI_CLBStorePopup_OnInitializeItem final
{
public:
	class UCLB_StoreItem*                         Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Item_index;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2559[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_CLBStorePopup_OnInitializeItem) == 0x000008, "Wrong alignment on UI_CLBStorePopup_OnInitializeItem");
static_assert(sizeof(UI_CLBStorePopup_OnInitializeItem) == 0x000010, "Wrong size on UI_CLBStorePopup_OnInitializeItem");
static_assert(offsetof(UI_CLBStorePopup_OnInitializeItem, Item) == 0x000000, "Member 'UI_CLBStorePopup_OnInitializeItem::Item' has a wrong offset!");
static_assert(offsetof(UI_CLBStorePopup_OnInitializeItem, Item_index) == 0x000008, "Member 'UI_CLBStorePopup_OnInitializeItem::Item_index' has a wrong offset!");
static_assert(offsetof(UI_CLBStorePopup_OnInitializeItem, ReturnValue) == 0x00000C, "Member 'UI_CLBStorePopup_OnInitializeItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CompetitionBrief.InitWidget
// 0x0001 (0x0001 - 0x0000)
struct UI_CompetitionBrief_InitWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CompetitionBrief_InitWidget) == 0x000001, "Wrong alignment on UI_CompetitionBrief_InitWidget");
static_assert(sizeof(UI_CompetitionBrief_InitWidget) == 0x000001, "Wrong size on UI_CompetitionBrief_InitWidget");
static_assert(offsetof(UI_CompetitionBrief_InitWidget, ReturnValue) == 0x000000, "Member 'UI_CompetitionBrief_InitWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CompetitionRankingListItem.UpdateUI
// 0x0001 (0x0001 - 0x0000)
struct UI_CompetitionRankingListItem_UpdateUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CompetitionRankingListItem_UpdateUI) == 0x000001, "Wrong alignment on UI_CompetitionRankingListItem_UpdateUI");
static_assert(sizeof(UI_CompetitionRankingListItem_UpdateUI) == 0x000001, "Wrong size on UI_CompetitionRankingListItem_UpdateUI");
static_assert(offsetof(UI_CompetitionRankingListItem_UpdateUI, ReturnValue) == 0x000000, "Member 'UI_CompetitionRankingListItem_UpdateUI::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Comp_Indicator_HPBar.SetArmor
// 0x0004 (0x0004 - 0x0000)
struct UI_Comp_Indicator_HPBar_SetArmor final
{
public:
	float                                         _armor_percent;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Comp_Indicator_HPBar_SetArmor) == 0x000004, "Wrong alignment on UI_Comp_Indicator_HPBar_SetArmor");
static_assert(sizeof(UI_Comp_Indicator_HPBar_SetArmor) == 0x000004, "Wrong size on UI_Comp_Indicator_HPBar_SetArmor");
static_assert(offsetof(UI_Comp_Indicator_HPBar_SetArmor, _armor_percent) == 0x000000, "Member 'UI_Comp_Indicator_HPBar_SetArmor::_armor_percent' has a wrong offset!");

// Function Stigma.UI_Comp_Indicator_HPBar.SetArmor_Interp
// 0x0004 (0x0004 - 0x0000)
struct UI_Comp_Indicator_HPBar_SetArmor_Interp final
{
public:
	float                                         _armor_percent;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Comp_Indicator_HPBar_SetArmor_Interp) == 0x000004, "Wrong alignment on UI_Comp_Indicator_HPBar_SetArmor_Interp");
static_assert(sizeof(UI_Comp_Indicator_HPBar_SetArmor_Interp) == 0x000004, "Wrong size on UI_Comp_Indicator_HPBar_SetArmor_Interp");
static_assert(offsetof(UI_Comp_Indicator_HPBar_SetArmor_Interp, _armor_percent) == 0x000000, "Member 'UI_Comp_Indicator_HPBar_SetArmor_Interp::_armor_percent' has a wrong offset!");

// Function Stigma.UI_Comp_Indicator_HPBar.SetArmorTypeIcon
// 0x0028 (0x0028 - 0x0000)
struct UI_Comp_Indicator_HPBar_SetArmorTypeIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Comp_Indicator_HPBar_SetArmorTypeIcon) == 0x000008, "Wrong alignment on UI_Comp_Indicator_HPBar_SetArmorTypeIcon");
static_assert(sizeof(UI_Comp_Indicator_HPBar_SetArmorTypeIcon) == 0x000028, "Wrong size on UI_Comp_Indicator_HPBar_SetArmorTypeIcon");
static_assert(offsetof(UI_Comp_Indicator_HPBar_SetArmorTypeIcon, _Icon) == 0x000000, "Member 'UI_Comp_Indicator_HPBar_SetArmorTypeIcon::_Icon' has a wrong offset!");

// Function Stigma.UI_Comp_Indicator_HPBar.SetHP
// 0x0004 (0x0004 - 0x0000)
struct UI_Comp_Indicator_HPBar_SetHP final
{
public:
	float                                         _hp_percent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Comp_Indicator_HPBar_SetHP) == 0x000004, "Wrong alignment on UI_Comp_Indicator_HPBar_SetHP");
static_assert(sizeof(UI_Comp_Indicator_HPBar_SetHP) == 0x000004, "Wrong size on UI_Comp_Indicator_HPBar_SetHP");
static_assert(offsetof(UI_Comp_Indicator_HPBar_SetHP, _hp_percent) == 0x000000, "Member 'UI_Comp_Indicator_HPBar_SetHP::_hp_percent' has a wrong offset!");

// Function Stigma.UI_Comp_Indicator_HPBar.SetHP_Interp
// 0x0004 (0x0004 - 0x0000)
struct UI_Comp_Indicator_HPBar_SetHP_Interp final
{
public:
	float                                         _hp_percent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Comp_Indicator_HPBar_SetHP_Interp) == 0x000004, "Wrong alignment on UI_Comp_Indicator_HPBar_SetHP_Interp");
static_assert(sizeof(UI_Comp_Indicator_HPBar_SetHP_Interp) == 0x000004, "Wrong size on UI_Comp_Indicator_HPBar_SetHP_Interp");
static_assert(offsetof(UI_Comp_Indicator_HPBar_SetHP_Interp, _hp_percent) == 0x000000, "Member 'UI_Comp_Indicator_HPBar_SetHP_Interp::_hp_percent' has a wrong offset!");

// Function Stigma.UI_Comp_Indicator_HPBar.UpdateDistance
// 0x0004 (0x0004 - 0x0000)
struct UI_Comp_Indicator_HPBar_UpdateDistance final
{
public:
	float                                         _distance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Comp_Indicator_HPBar_UpdateDistance) == 0x000004, "Wrong alignment on UI_Comp_Indicator_HPBar_UpdateDistance");
static_assert(sizeof(UI_Comp_Indicator_HPBar_UpdateDistance) == 0x000004, "Wrong size on UI_Comp_Indicator_HPBar_UpdateDistance");
static_assert(offsetof(UI_Comp_Indicator_HPBar_UpdateDistance, _distance) == 0x000000, "Member 'UI_Comp_Indicator_HPBar_UpdateDistance::_distance' has a wrong offset!");

// Function Stigma.UI_ControlPowerMasterList.HasLackCPInSelectedMaster
// 0x0001 (0x0001 - 0x0000)
struct UI_ControlPowerMasterList_HasLackCPInSelectedMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ControlPowerMasterList_HasLackCPInSelectedMaster) == 0x000001, "Wrong alignment on UI_ControlPowerMasterList_HasLackCPInSelectedMaster");
static_assert(sizeof(UI_ControlPowerMasterList_HasLackCPInSelectedMaster) == 0x000001, "Wrong size on UI_ControlPowerMasterList_HasLackCPInSelectedMaster");
static_assert(offsetof(UI_ControlPowerMasterList_HasLackCPInSelectedMaster, ReturnValue) == 0x000000, "Member 'UI_ControlPowerMasterList_HasLackCPInSelectedMaster::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ControlPowerMasterList.SetGunObject
// 0x0008 (0x0008 - 0x0000)
struct UI_ControlPowerMasterList_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ControlPowerMasterList_SetGunObject) == 0x000008, "Wrong alignment on UI_ControlPowerMasterList_SetGunObject");
static_assert(sizeof(UI_ControlPowerMasterList_SetGunObject) == 0x000008, "Wrong size on UI_ControlPowerMasterList_SetGunObject");
static_assert(offsetof(UI_ControlPowerMasterList_SetGunObject, _gun_object) == 0x000000, "Member 'UI_ControlPowerMasterList_SetGunObject::_gun_object' has a wrong offset!");

// Function Stigma.UI_ControlPowerMasterList.UpdateUI
// 0x0008 (0x0008 - 0x0000)
struct UI_ControlPowerMasterList_UpdateUI final
{
public:
	class ULVData_ControlPowerMaster*             _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ControlPowerMasterList_UpdateUI) == 0x000008, "Wrong alignment on UI_ControlPowerMasterList_UpdateUI");
static_assert(sizeof(UI_ControlPowerMasterList_UpdateUI) == 0x000008, "Wrong size on UI_ControlPowerMasterList_UpdateUI");
static_assert(offsetof(UI_ControlPowerMasterList_UpdateUI, _item) == 0x000000, "Member 'UI_ControlPowerMasterList_UpdateUI::_item' has a wrong offset!");

// Function Stigma.UI_CurrencyBox.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_CurrencyBox_InitWidget final
{
public:
	struct FItemID_Currency                       _currency_type;                                    // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CurrencyBox_InitWidget) == 0x000008, "Wrong alignment on UI_CurrencyBox_InitWidget");
static_assert(sizeof(UI_CurrencyBox_InitWidget) == 0x000010, "Wrong size on UI_CurrencyBox_InitWidget");
static_assert(offsetof(UI_CurrencyBox_InitWidget, _currency_type) == 0x000000, "Member 'UI_CurrencyBox_InitWidget::_currency_type' has a wrong offset!");

// Function Stigma.UI_CurrencyBox.OnUpdateUser
// 0x0001 (0x0001 - 0x0000)
struct UI_CurrencyBox_OnUpdateUser final
{
public:
	EUserEvent                                    _event;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CurrencyBox_OnUpdateUser) == 0x000001, "Wrong alignment on UI_CurrencyBox_OnUpdateUser");
static_assert(sizeof(UI_CurrencyBox_OnUpdateUser) == 0x000001, "Wrong size on UI_CurrencyBox_OnUpdateUser");
static_assert(offsetof(UI_CurrencyBox_OnUpdateUser, _event) == 0x000000, "Member 'UI_CurrencyBox_OnUpdateUser::_event' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.OnUpdateSlot
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_OnUpdateSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_OnUpdateSlot) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_OnUpdateSlot");
static_assert(sizeof(UI_CustomGame_Slot_OnUpdateSlot) == 0x000001, "Wrong size on UI_CustomGame_Slot_OnUpdateSlot");
static_assert(offsetof(UI_CustomGame_Slot_OnUpdateSlot, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_OnUpdateSlot::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.OnUpdateState
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_OnUpdateState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_OnUpdateState) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_OnUpdateState");
static_assert(sizeof(UI_CustomGame_Slot_OnUpdateState) == 0x000001, "Wrong size on UI_CustomGame_Slot_OnUpdateState");
static_assert(offsetof(UI_CustomGame_Slot_OnUpdateState, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_OnUpdateState::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.RequestCloseSlot
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_RequestCloseSlot final
{
public:
	bool                                          _close;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_RequestCloseSlot) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_RequestCloseSlot");
static_assert(sizeof(UI_CustomGame_Slot_RequestCloseSlot) == 0x000001, "Wrong size on UI_CustomGame_Slot_RequestCloseSlot");
static_assert(offsetof(UI_CustomGame_Slot_RequestCloseSlot, _close) == 0x000000, "Member 'UI_CustomGame_Slot_RequestCloseSlot::_close' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.RequestMove
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_RequestMove final
{
public:
	struct FCustomGameSlotIndex                   _to;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_RequestMove) == 0x000004, "Wrong alignment on UI_CustomGame_Slot_RequestMove");
static_assert(sizeof(UI_CustomGame_Slot_RequestMove) == 0x000008, "Wrong size on UI_CustomGame_Slot_RequestMove");
static_assert(offsetof(UI_CustomGame_Slot_RequestMove, _to) == 0x000000, "Member 'UI_CustomGame_Slot_RequestMove::_to' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.SetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_SetSlotIndex final
{
public:
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_SetSlotIndex) == 0x000004, "Wrong alignment on UI_CustomGame_Slot_SetSlotIndex");
static_assert(sizeof(UI_CustomGame_Slot_SetSlotIndex) == 0x000008, "Wrong size on UI_CustomGame_Slot_SetSlotIndex");
static_assert(offsetof(UI_CustomGame_Slot_SetSlotIndex, _idx) == 0x000000, "Member 'UI_CustomGame_Slot_SetSlotIndex::_idx' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GameState
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_GameState final
{
public:
	class AWaitingRoomGameState*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GameState) == 0x000008, "Wrong alignment on UI_CustomGame_Slot_GameState");
static_assert(sizeof(UI_CustomGame_Slot_GameState) == 0x000008, "Wrong size on UI_CustomGame_Slot_GameState");
static_assert(offsetof(UI_CustomGame_Slot_GameState, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GameState::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GetBoundPlayerState
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_GetBoundPlayerState final
{
public:
	class AWaitingRoomPlayerState*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GetBoundPlayerState) == 0x000008, "Wrong alignment on UI_CustomGame_Slot_GetBoundPlayerState");
static_assert(sizeof(UI_CustomGame_Slot_GetBoundPlayerState) == 0x000008, "Wrong size on UI_CustomGame_Slot_GetBoundPlayerState");
static_assert(offsetof(UI_CustomGame_Slot_GetBoundPlayerState, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GetBoundPlayerState::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GetNickname
// 0x0018 (0x0018 - 0x0000)
struct UI_CustomGame_Slot_GetNickname final
{
public:
	struct FUserName                              ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GetNickname) == 0x000008, "Wrong alignment on UI_CustomGame_Slot_GetNickname");
static_assert(sizeof(UI_CustomGame_Slot_GetNickname) == 0x000018, "Wrong size on UI_CustomGame_Slot_GetNickname");
static_assert(offsetof(UI_CustomGame_Slot_GetNickname, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GetPC
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_GetPC final
{
public:
	class AWaitingRoomPlayerController*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GetPC) == 0x000008, "Wrong alignment on UI_CustomGame_Slot_GetPC");
static_assert(sizeof(UI_CustomGame_Slot_GetPC) == 0x000008, "Wrong size on UI_CustomGame_Slot_GetPC");
static_assert(offsetof(UI_CustomGame_Slot_GetPC, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GetPC::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GetSlot
// 0x0020 (0x0020 - 0x0000)
struct UI_CustomGame_Slot_GetSlot final
{
public:
	struct FCustomGameSlot                        ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GetSlot) == 0x000008, "Wrong alignment on UI_CustomGame_Slot_GetSlot");
static_assert(sizeof(UI_CustomGame_Slot_GetSlot) == 0x000020, "Wrong size on UI_CustomGame_Slot_GetSlot");
static_assert(offsetof(UI_CustomGame_Slot_GetSlot, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GetSlot::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_GetSlotIndex final
{
public:
	struct FCustomGameSlotIndex                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GetSlotIndex) == 0x000004, "Wrong alignment on UI_CustomGame_Slot_GetSlotIndex");
static_assert(sizeof(UI_CustomGame_Slot_GetSlotIndex) == 0x000008, "Wrong size on UI_CustomGame_Slot_GetSlotIndex");
static_assert(offsetof(UI_CustomGame_Slot_GetSlotIndex, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.GetUserID
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomGame_Slot_GetUserID final
{
public:
	struct FUserID                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_GetUserID) == 0x000008, "Wrong alignment on UI_CustomGame_Slot_GetUserID");
static_assert(sizeof(UI_CustomGame_Slot_GetUserID) == 0x000008, "Wrong size on UI_CustomGame_Slot_GetUserID");
static_assert(offsetof(UI_CustomGame_Slot_GetUserID, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_GetUserID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsBound
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsBound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsBound) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsBound");
static_assert(sizeof(UI_CustomGame_Slot_IsBound) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsBound");
static_assert(offsetof(UI_CustomGame_Slot_IsBound, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsBound::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsClosedSlot
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsClosedSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsClosedSlot) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsClosedSlot");
static_assert(sizeof(UI_CustomGame_Slot_IsClosedSlot) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsClosedSlot");
static_assert(offsetof(UI_CustomGame_Slot_IsClosedSlot, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsClosedSlot::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsFriend
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsFriend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsFriend) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsFriend");
static_assert(sizeof(UI_CustomGame_Slot_IsFriend) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsFriend");
static_assert(offsetof(UI_CustomGame_Slot_IsFriend, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsFriend::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsLocalRoomLeader
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsLocalRoomLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsLocalRoomLeader) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsLocalRoomLeader");
static_assert(sizeof(UI_CustomGame_Slot_IsLocalRoomLeader) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsLocalRoomLeader");
static_assert(offsetof(UI_CustomGame_Slot_IsLocalRoomLeader, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsLocalRoomLeader::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsLocalRoomManager
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsLocalRoomManager final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsLocalRoomManager) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsLocalRoomManager");
static_assert(sizeof(UI_CustomGame_Slot_IsLocalRoomManager) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsLocalRoomManager");
static_assert(offsetof(UI_CustomGame_Slot_IsLocalRoomManager, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsLocalRoomManager::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsMine
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsMine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsMine) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsMine");
static_assert(sizeof(UI_CustomGame_Slot_IsMine) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsMine");
static_assert(offsetof(UI_CustomGame_Slot_IsMine, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsMine::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsRoomLeader
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsRoomLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsRoomLeader) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsRoomLeader");
static_assert(sizeof(UI_CustomGame_Slot_IsRoomLeader) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsRoomLeader");
static_assert(offsetof(UI_CustomGame_Slot_IsRoomLeader, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsRoomLeader::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomGame_Slot.IsRoomManager
// 0x0001 (0x0001 - 0x0000)
struct UI_CustomGame_Slot_IsRoomManager final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomGame_Slot_IsRoomManager) == 0x000001, "Wrong alignment on UI_CustomGame_Slot_IsRoomManager");
static_assert(sizeof(UI_CustomGame_Slot_IsRoomManager) == 0x000001, "Wrong size on UI_CustomGame_Slot_IsRoomManager");
static_assert(offsetof(UI_CustomGame_Slot_IsRoomManager, ReturnValue) == 0x000000, "Member 'UI_CustomGame_Slot_IsRoomManager::ReturnValue' has a wrong offset!");

// Function Stigma.UI_CustomItemUsing.Open
// 0x0008 (0x0008 - 0x0000)
struct UI_CustomItemUsing_Open final
{
public:
	class UInvenItem*                             _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_CustomItemUsing_Open) == 0x000008, "Wrong alignment on UI_CustomItemUsing_Open");
static_assert(sizeof(UI_CustomItemUsing_Open) == 0x000008, "Wrong size on UI_CustomItemUsing_Open");
static_assert(offsetof(UI_CustomItemUsing_Open, _item) == 0x000000, "Member 'UI_CustomItemUsing_Open::_item' has a wrong offset!");

// Function Stigma.UI_DamageViewer.OnShow
// 0x0038 (0x0038 - 0x0000)
struct UI_DamageViewer_OnShow final
{
public:
	struct FDamagedData                           _data;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_DamageViewer_OnShow) == 0x000008, "Wrong alignment on UI_DamageViewer_OnShow");
static_assert(sizeof(UI_DamageViewer_OnShow) == 0x000038, "Wrong size on UI_DamageViewer_OnShow");
static_assert(offsetof(UI_DamageViewer_OnShow, _data) == 0x000000, "Member 'UI_DamageViewer_OnShow::_data' has a wrong offset!");
static_assert(offsetof(UI_DamageViewer_OnShow, ReturnValue) == 0x000030, "Member 'UI_DamageViewer_OnShow::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Debug_CharaBase.OnChangeSwitchIndex
// 0x0004 (0x0004 - 0x0000)
struct UI_Debug_CharaBase_OnChangeSwitchIndex final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Debug_CharaBase_OnChangeSwitchIndex) == 0x000004, "Wrong alignment on UI_Debug_CharaBase_OnChangeSwitchIndex");
static_assert(sizeof(UI_Debug_CharaBase_OnChangeSwitchIndex) == 0x000004, "Wrong size on UI_Debug_CharaBase_OnChangeSwitchIndex");
static_assert(offsetof(UI_Debug_CharaBase_OnChangeSwitchIndex, _index) == 0x000000, "Member 'UI_Debug_CharaBase_OnChangeSwitchIndex::_index' has a wrong offset!");

// Function Stigma.UI_Debug_CharaBase.OnChangeTarget
// 0x0008 (0x0008 - 0x0000)
struct UI_Debug_CharaBase_OnChangeTarget final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Debug_CharaBase_OnChangeTarget) == 0x000008, "Wrong alignment on UI_Debug_CharaBase_OnChangeTarget");
static_assert(sizeof(UI_Debug_CharaBase_OnChangeTarget) == 0x000008, "Wrong size on UI_Debug_CharaBase_OnChangeTarget");
static_assert(offsetof(UI_Debug_CharaBase_OnChangeTarget, _chara) == 0x000000, "Member 'UI_Debug_CharaBase_OnChangeTarget::_chara' has a wrong offset!");

// Function Stigma.UI_Debug_CharaBase.SetSwitchIndex
// 0x0004 (0x0004 - 0x0000)
struct UI_Debug_CharaBase_SetSwitchIndex final
{
public:
	int32                                         _index;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Debug_CharaBase_SetSwitchIndex) == 0x000004, "Wrong alignment on UI_Debug_CharaBase_SetSwitchIndex");
static_assert(sizeof(UI_Debug_CharaBase_SetSwitchIndex) == 0x000004, "Wrong size on UI_Debug_CharaBase_SetSwitchIndex");
static_assert(offsetof(UI_Debug_CharaBase_SetSwitchIndex, _index) == 0x000000, "Member 'UI_Debug_CharaBase_SetSwitchIndex::_index' has a wrong offset!");

// Function Stigma.UI_Debug_CharaBase.GetSwitchIndex
// 0x0004 (0x0004 - 0x0000)
struct UI_Debug_CharaBase_GetSwitchIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Debug_CharaBase_GetSwitchIndex) == 0x000004, "Wrong alignment on UI_Debug_CharaBase_GetSwitchIndex");
static_assert(sizeof(UI_Debug_CharaBase_GetSwitchIndex) == 0x000004, "Wrong size on UI_Debug_CharaBase_GetSwitchIndex");
static_assert(offsetof(UI_Debug_CharaBase_GetSwitchIndex, ReturnValue) == 0x000000, "Member 'UI_Debug_CharaBase_GetSwitchIndex::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ResultBase.GetFocusControl
// 0x0008 (0x0008 - 0x0000)
struct UI_ResultBase_GetFocusControl final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ResultBase_GetFocusControl) == 0x000008, "Wrong alignment on UI_ResultBase_GetFocusControl");
static_assert(sizeof(UI_ResultBase_GetFocusControl) == 0x000008, "Wrong size on UI_ResultBase_GetFocusControl");
static_assert(offsetof(UI_ResultBase_GetFocusControl, ReturnValue) == 0x000000, "Member 'UI_ResultBase_GetFocusControl::ReturnValue' has a wrong offset!");

// Function Stigma.UI_EquippedGunParts.OnUpdatedGunSpec
// 0x0008 (0x0008 - 0x0000)
struct UI_EquippedGunParts_OnUpdatedGunSpec final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EquippedGunParts_OnUpdatedGunSpec) == 0x000008, "Wrong alignment on UI_EquippedGunParts_OnUpdatedGunSpec");
static_assert(sizeof(UI_EquippedGunParts_OnUpdatedGunSpec) == 0x000008, "Wrong size on UI_EquippedGunParts_OnUpdatedGunSpec");
static_assert(offsetof(UI_EquippedGunParts_OnUpdatedGunSpec, _gun_object) == 0x000000, "Member 'UI_EquippedGunParts_OnUpdatedGunSpec::_gun_object' has a wrong offset!");

// Function Stigma.UI_EquippedGunParts.SetGunObject
// 0x0008 (0x0008 - 0x0000)
struct UI_EquippedGunParts_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EquippedGunParts_SetGunObject) == 0x000008, "Wrong alignment on UI_EquippedGunParts_SetGunObject");
static_assert(sizeof(UI_EquippedGunParts_SetGunObject) == 0x000008, "Wrong size on UI_EquippedGunParts_SetGunObject");
static_assert(offsetof(UI_EquippedGunParts_SetGunObject, _gun_object) == 0x000000, "Member 'UI_EquippedGunParts_SetGunObject::_gun_object' has a wrong offset!");

// Function Stigma.UI_EventAttendance.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_EventAttendance_InitWidget final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventAttendance_InitWidget) == 0x000008, "Wrong alignment on UI_EventAttendance_InitWidget");
static_assert(sizeof(UI_EventAttendance_InitWidget) == 0x000010, "Wrong size on UI_EventAttendance_InitWidget");
static_assert(offsetof(UI_EventAttendance_InitWidget, _event_page_id) == 0x000000, "Member 'UI_EventAttendance_InitWidget::_event_page_id' has a wrong offset!");

// Function Stigma.UI_EventAttendance.SetFromEventInfo
// 0x0090 (0x0090 - 0x0000)
struct UI_EventAttendance_SetFromEventInfo final
{
public:
	struct FEventPageInfo                         _event_page_info;                                  // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventAttendance_SetFromEventInfo) == 0x000008, "Wrong alignment on UI_EventAttendance_SetFromEventInfo");
static_assert(sizeof(UI_EventAttendance_SetFromEventInfo) == 0x000090, "Wrong size on UI_EventAttendance_SetFromEventInfo");
static_assert(offsetof(UI_EventAttendance_SetFromEventInfo, _event_page_info) == 0x000000, "Member 'UI_EventAttendance_SetFromEventInfo::_event_page_info' has a wrong offset!");

// Function Stigma.UI_EventCollection.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_EventCollection_InitWidget final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventCollection_InitWidget) == 0x000008, "Wrong alignment on UI_EventCollection_InitWidget");
static_assert(sizeof(UI_EventCollection_InitWidget) == 0x000010, "Wrong size on UI_EventCollection_InitWidget");
static_assert(offsetof(UI_EventCollection_InitWidget, _event_page_id) == 0x000000, "Member 'UI_EventCollection_InitWidget::_event_page_id' has a wrong offset!");

// Function Stigma.UI_RewardContainer.CreateRewardWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_RewardContainer_CreateRewardWidget final
{
public:
	class UUI_RewardItem*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardContainer_CreateRewardWidget) == 0x000008, "Wrong alignment on UI_RewardContainer_CreateRewardWidget");
static_assert(sizeof(UI_RewardContainer_CreateRewardWidget) == 0x000008, "Wrong size on UI_RewardContainer_CreateRewardWidget");
static_assert(offsetof(UI_RewardContainer_CreateRewardWidget, ReturnValue) == 0x000000, "Member 'UI_RewardContainer_CreateRewardWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RewardContainer.SetRewardState
// 0x0001 (0x0001 - 0x0000)
struct UI_RewardContainer_SetRewardState final
{
public:
	ERewardItemState                              _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RewardContainer_SetRewardState) == 0x000001, "Wrong alignment on UI_RewardContainer_SetRewardState");
static_assert(sizeof(UI_RewardContainer_SetRewardState) == 0x000001, "Wrong size on UI_RewardContainer_SetRewardState");
static_assert(offsetof(UI_RewardContainer_SetRewardState, _state) == 0x000000, "Member 'UI_RewardContainer_SetRewardState::_state' has a wrong offset!");

// Function Stigma.UI_EventCurrencyTab.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_EventCurrencyTab_InitWidget final
{
public:
	struct FItemID_Currency                       _currency_id;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventCurrencyTab_InitWidget) == 0x000008, "Wrong alignment on UI_EventCurrencyTab_InitWidget");
static_assert(sizeof(UI_EventCurrencyTab_InitWidget) == 0x000010, "Wrong size on UI_EventCurrencyTab_InitWidget");
static_assert(offsetof(UI_EventCurrencyTab_InitWidget, _currency_id) == 0x000000, "Member 'UI_EventCurrencyTab_InitWidget::_currency_id' has a wrong offset!");

// Function Stigma.UI_EventCurrencyTab.SetAmount
// 0x0004 (0x0004 - 0x0000)
struct UI_EventCurrencyTab_SetAmount final
{
public:
	int32                                         _Amount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventCurrencyTab_SetAmount) == 0x000004, "Wrong alignment on UI_EventCurrencyTab_SetAmount");
static_assert(sizeof(UI_EventCurrencyTab_SetAmount) == 0x000004, "Wrong size on UI_EventCurrencyTab_SetAmount");
static_assert(offsetof(UI_EventCurrencyTab_SetAmount, _Amount) == 0x000000, "Member 'UI_EventCurrencyTab_SetAmount::_Amount' has a wrong offset!");

// Function Stigma.UI_EventCurrencyTab.SetIcon
// 0x0028 (0x0028 - 0x0000)
struct UI_EventCurrencyTab_SetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventCurrencyTab_SetIcon) == 0x000008, "Wrong alignment on UI_EventCurrencyTab_SetIcon");
static_assert(sizeof(UI_EventCurrencyTab_SetIcon) == 0x000028, "Wrong size on UI_EventCurrencyTab_SetIcon");
static_assert(offsetof(UI_EventCurrencyTab_SetIcon, _Icon) == 0x000000, "Member 'UI_EventCurrencyTab_SetIcon::_Icon' has a wrong offset!");

// Function Stigma.UI_EventKeepConnect.CheckReawrdItemStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct UI_EventKeepConnect_CheckReawrdItemStateUpdated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventKeepConnect_CheckReawrdItemStateUpdated) == 0x000001, "Wrong alignment on UI_EventKeepConnect_CheckReawrdItemStateUpdated");
static_assert(sizeof(UI_EventKeepConnect_CheckReawrdItemStateUpdated) == 0x000001, "Wrong size on UI_EventKeepConnect_CheckReawrdItemStateUpdated");
static_assert(offsetof(UI_EventKeepConnect_CheckReawrdItemStateUpdated, ReturnValue) == 0x000000, "Member 'UI_EventKeepConnect_CheckReawrdItemStateUpdated::ReturnValue' has a wrong offset!");

// Function Stigma.UI_EventKeepConnect.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_EventKeepConnect_InitWidget final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventKeepConnect_InitWidget) == 0x000008, "Wrong alignment on UI_EventKeepConnect_InitWidget");
static_assert(sizeof(UI_EventKeepConnect_InitWidget) == 0x000010, "Wrong size on UI_EventKeepConnect_InitWidget");
static_assert(offsetof(UI_EventKeepConnect_InitWidget, _event_page_id) == 0x000000, "Member 'UI_EventKeepConnect_InitWidget::_event_page_id' has a wrong offset!");

// Function Stigma.UI_EventKeepConnect.SetFromEventInfo
// 0x0090 (0x0090 - 0x0000)
struct UI_EventKeepConnect_SetFromEventInfo final
{
public:
	struct FEventPageInfo                         _event_page_info;                                  // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventKeepConnect_SetFromEventInfo) == 0x000008, "Wrong alignment on UI_EventKeepConnect_SetFromEventInfo");
static_assert(sizeof(UI_EventKeepConnect_SetFromEventInfo) == 0x000090, "Wrong size on UI_EventKeepConnect_SetFromEventInfo");
static_assert(offsetof(UI_EventKeepConnect_SetFromEventInfo, _event_page_info) == 0x000000, "Member 'UI_EventKeepConnect_SetFromEventInfo::_event_page_info' has a wrong offset!");

// Function Stigma.UI_EventKeepConnect.ShowNextRemainMinutes
// 0x0008 (0x0008 - 0x0000)
struct UI_EventKeepConnect_ShowNextRemainMinutes final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2575[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _minutes;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventKeepConnect_ShowNextRemainMinutes) == 0x000004, "Wrong alignment on UI_EventKeepConnect_ShowNextRemainMinutes");
static_assert(sizeof(UI_EventKeepConnect_ShowNextRemainMinutes) == 0x000008, "Wrong size on UI_EventKeepConnect_ShowNextRemainMinutes");
static_assert(offsetof(UI_EventKeepConnect_ShowNextRemainMinutes, _show) == 0x000000, "Member 'UI_EventKeepConnect_ShowNextRemainMinutes::_show' has a wrong offset!");
static_assert(offsetof(UI_EventKeepConnect_ShowNextRemainMinutes, _minutes) == 0x000004, "Member 'UI_EventKeepConnect_ShowNextRemainMinutes::_minutes' has a wrong offset!");

// Function Stigma.UI_EventMission.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_EventMission_InitWidget final
{
public:
	struct FItemID_EventPage                      _event_page_id;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMission_InitWidget) == 0x000008, "Wrong alignment on UI_EventMission_InitWidget");
static_assert(sizeof(UI_EventMission_InitWidget) == 0x000010, "Wrong size on UI_EventMission_InitWidget");
static_assert(offsetof(UI_EventMission_InitWidget, _event_page_id) == 0x000000, "Member 'UI_EventMission_InitWidget::_event_page_id' has a wrong offset!");

// Function Stigma.UI_EventMission.SetFromEventInfo
// 0x0090 (0x0090 - 0x0000)
struct UI_EventMission_SetFromEventInfo final
{
public:
	struct FEventPageInfo                         _event_page_info;                                  // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMission_SetFromEventInfo) == 0x000008, "Wrong alignment on UI_EventMission_SetFromEventInfo");
static_assert(sizeof(UI_EventMission_SetFromEventInfo) == 0x000090, "Wrong size on UI_EventMission_SetFromEventInfo");
static_assert(offsetof(UI_EventMission_SetFromEventInfo, _event_page_info) == 0x000000, "Member 'UI_EventMission_SetFromEventInfo::_event_page_info' has a wrong offset!");

// Function Stigma.UI_EventMissionSlot.OnUpdateMission
// 0x0010 (0x0010 - 0x0000)
struct UI_EventMissionSlot_OnUpdateMission final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2577[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMissionSlot_OnUpdateMission) == 0x000008, "Wrong alignment on UI_EventMissionSlot_OnUpdateMission");
static_assert(sizeof(UI_EventMissionSlot_OnUpdateMission) == 0x000010, "Wrong size on UI_EventMissionSlot_OnUpdateMission");
static_assert(offsetof(UI_EventMissionSlot_OnUpdateMission, _type) == 0x000000, "Member 'UI_EventMissionSlot_OnUpdateMission::_type' has a wrong offset!");
static_assert(offsetof(UI_EventMissionSlot_OnUpdateMission, _updated_mission) == 0x000008, "Member 'UI_EventMissionSlot_OnUpdateMission::_updated_mission' has a wrong offset!");

// Function Stigma.UI_EventMissionSlot.SetCanReward
// 0x0001 (0x0001 - 0x0000)
struct UI_EventMissionSlot_SetCanReward final
{
public:
	bool                                          _can_reward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMissionSlot_SetCanReward) == 0x000001, "Wrong alignment on UI_EventMissionSlot_SetCanReward");
static_assert(sizeof(UI_EventMissionSlot_SetCanReward) == 0x000001, "Wrong size on UI_EventMissionSlot_SetCanReward");
static_assert(offsetof(UI_EventMissionSlot_SetCanReward, _can_reward) == 0x000000, "Member 'UI_EventMissionSlot_SetCanReward::_can_reward' has a wrong offset!");

// Function Stigma.UI_EventMissionSlot.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_EventMissionSlot_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMissionSlot_SetDesc) == 0x000008, "Wrong alignment on UI_EventMissionSlot_SetDesc");
static_assert(sizeof(UI_EventMissionSlot_SetDesc) == 0x000018, "Wrong size on UI_EventMissionSlot_SetDesc");
static_assert(offsetof(UI_EventMissionSlot_SetDesc, _text) == 0x000000, "Member 'UI_EventMissionSlot_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_EventMissionSlot.SetProgress
// 0x0010 (0x0010 - 0x0000)
struct UI_EventMissionSlot_SetProgress final
{
public:
	EMissionProgressType                          _progress_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2578[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _rate;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _count;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _target_count;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMissionSlot_SetProgress) == 0x000004, "Wrong alignment on UI_EventMissionSlot_SetProgress");
static_assert(sizeof(UI_EventMissionSlot_SetProgress) == 0x000010, "Wrong size on UI_EventMissionSlot_SetProgress");
static_assert(offsetof(UI_EventMissionSlot_SetProgress, _progress_type) == 0x000000, "Member 'UI_EventMissionSlot_SetProgress::_progress_type' has a wrong offset!");
static_assert(offsetof(UI_EventMissionSlot_SetProgress, _rate) == 0x000004, "Member 'UI_EventMissionSlot_SetProgress::_rate' has a wrong offset!");
static_assert(offsetof(UI_EventMissionSlot_SetProgress, _count) == 0x000008, "Member 'UI_EventMissionSlot_SetProgress::_count' has a wrong offset!");
static_assert(offsetof(UI_EventMissionSlot_SetProgress, _target_count) == 0x00000C, "Member 'UI_EventMissionSlot_SetProgress::_target_count' has a wrong offset!");

// Function Stigma.UI_EventMissionSlot.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_EventMissionSlot_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMissionSlot_SetTitle) == 0x000008, "Wrong alignment on UI_EventMissionSlot_SetTitle");
static_assert(sizeof(UI_EventMissionSlot_SetTitle) == 0x000018, "Wrong size on UI_EventMissionSlot_SetTitle");
static_assert(offsetof(UI_EventMissionSlot_SetTitle, _text) == 0x000000, "Member 'UI_EventMissionSlot_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_EventMissionSlot.ShowGoToButton
// 0x0001 (0x0001 - 0x0000)
struct UI_EventMissionSlot_ShowGoToButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventMissionSlot_ShowGoToButton) == 0x000001, "Wrong alignment on UI_EventMissionSlot_ShowGoToButton");
static_assert(sizeof(UI_EventMissionSlot_ShowGoToButton) == 0x000001, "Wrong size on UI_EventMissionSlot_ShowGoToButton");
static_assert(offsetof(UI_EventMissionSlot_ShowGoToButton, _show) == 0x000000, "Member 'UI_EventMissionSlot_ShowGoToButton::_show' has a wrong offset!");

// Function Stigma.UI_EventPagePopup.InitWidget
// 0x0001 (0x0001 - 0x0000)
struct UI_EventPagePopup_InitWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopup_InitWidget) == 0x000001, "Wrong alignment on UI_EventPagePopup_InitWidget");
static_assert(sizeof(UI_EventPagePopup_InitWidget) == 0x000001, "Wrong size on UI_EventPagePopup_InitWidget");
static_assert(offsetof(UI_EventPagePopup_InitWidget, ReturnValue) == 0x000000, "Member 'UI_EventPagePopup_InitWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.EnableRewardButton
// 0x0001 (0x0001 - 0x0000)
struct UI_EventPagePopupContainer_EnableRewardButton final
{
public:
	bool                                          _is_enable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_EnableRewardButton) == 0x000001, "Wrong alignment on UI_EventPagePopupContainer_EnableRewardButton");
static_assert(sizeof(UI_EventPagePopupContainer_EnableRewardButton) == 0x000001, "Wrong size on UI_EventPagePopupContainer_EnableRewardButton");
static_assert(offsetof(UI_EventPagePopupContainer_EnableRewardButton, _is_enable) == 0x000000, "Member 'UI_EventPagePopupContainer_EnableRewardButton::_is_enable' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.OnClickRewardBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_EventPagePopupContainer_OnClickRewardBtn final
{
public:
	bool                                          _is_option;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_OnClickRewardBtn) == 0x000001, "Wrong alignment on UI_EventPagePopupContainer_OnClickRewardBtn");
static_assert(sizeof(UI_EventPagePopupContainer_OnClickRewardBtn) == 0x000001, "Wrong size on UI_EventPagePopupContainer_OnClickRewardBtn");
static_assert(offsetof(UI_EventPagePopupContainer_OnClickRewardBtn, _is_option) == 0x000000, "Member 'UI_EventPagePopupContainer_OnClickRewardBtn::_is_option' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.OnUpdateEventPageInfo
// 0x0090 (0x0090 - 0x0000)
struct UI_EventPagePopupContainer_OnUpdateEventPageInfo final
{
public:
	struct FEventPageInfo                         _event_page_info;                                  // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_OnUpdateEventPageInfo) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_OnUpdateEventPageInfo");
static_assert(sizeof(UI_EventPagePopupContainer_OnUpdateEventPageInfo) == 0x000090, "Wrong size on UI_EventPagePopupContainer_OnUpdateEventPageInfo");
static_assert(offsetof(UI_EventPagePopupContainer_OnUpdateEventPageInfo, _event_page_info) == 0x000000, "Member 'UI_EventPagePopupContainer_OnUpdateEventPageInfo::_event_page_info' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetCompleteCountRewardItems
// 0x0008 (0x0008 - 0x0000)
struct UI_EventPagePopupContainer_SetCompleteCountRewardItems final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _reward_count;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_SetCompleteCountRewardItems) == 0x000004, "Wrong alignment on UI_EventPagePopupContainer_SetCompleteCountRewardItems");
static_assert(sizeof(UI_EventPagePopupContainer_SetCompleteCountRewardItems) == 0x000008, "Wrong size on UI_EventPagePopupContainer_SetCompleteCountRewardItems");
static_assert(offsetof(UI_EventPagePopupContainer_SetCompleteCountRewardItems, _count) == 0x000000, "Member 'UI_EventPagePopupContainer_SetCompleteCountRewardItems::_count' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetCompleteCountRewardItems, _reward_count) == 0x000004, "Member 'UI_EventPagePopupContainer_SetCompleteCountRewardItems::_reward_count' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetDailyResetTimer
// 0x0010 (0x0010 - 0x0000)
struct UI_EventPagePopupContainer_SetDailyResetTimer final
{
public:
	struct FDateTime                              _end_at;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _alert_hour;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_EventPagePopupContainer_SetDailyResetTimer) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetDailyResetTimer");
static_assert(sizeof(UI_EventPagePopupContainer_SetDailyResetTimer) == 0x000010, "Wrong size on UI_EventPagePopupContainer_SetDailyResetTimer");
static_assert(offsetof(UI_EventPagePopupContainer_SetDailyResetTimer, _end_at) == 0x000000, "Member 'UI_EventPagePopupContainer_SetDailyResetTimer::_end_at' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetDailyResetTimer, _alert_hour) == 0x000008, "Member 'UI_EventPagePopupContainer_SetDailyResetTimer::_alert_hour' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetDate
// 0x0020 (0x0020 - 0x0000)
struct UI_EventPagePopupContainer_SetDate final
{
public:
	class FString                                 _start_at_str;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _end_at_str;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_SetDate) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetDate");
static_assert(sizeof(UI_EventPagePopupContainer_SetDate) == 0x000020, "Wrong size on UI_EventPagePopupContainer_SetDate");
static_assert(offsetof(UI_EventPagePopupContainer_SetDate, _start_at_str) == 0x000000, "Member 'UI_EventPagePopupContainer_SetDate::_start_at_str' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetDate, _end_at_str) == 0x000010, "Member 'UI_EventPagePopupContainer_SetDate::_end_at_str' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_EventPagePopupContainer_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_SetDesc) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetDesc");
static_assert(sizeof(UI_EventPagePopupContainer_SetDesc) == 0x000018, "Wrong size on UI_EventPagePopupContainer_SetDesc");
static_assert(offsetof(UI_EventPagePopupContainer_SetDesc, _text) == 0x000000, "Member 'UI_EventPagePopupContainer_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetEventCurrency
// 0x0010 (0x0010 - 0x0000)
struct UI_EventPagePopupContainer_SetEventCurrency final
{
public:
	struct FItemID_Currency                       _currency_id;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_SetEventCurrency) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetEventCurrency");
static_assert(sizeof(UI_EventPagePopupContainer_SetEventCurrency) == 0x000010, "Wrong size on UI_EventPagePopupContainer_SetEventCurrency");
static_assert(offsetof(UI_EventPagePopupContainer_SetEventCurrency, _currency_id) == 0x000000, "Member 'UI_EventPagePopupContainer_SetEventCurrency::_currency_id' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetRemainTimer
// 0x0010 (0x0010 - 0x0000)
struct UI_EventPagePopupContainer_SetRemainTimer final
{
public:
	struct FDateTime                              _end_at;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _alert_hour;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257C[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_EventPagePopupContainer_SetRemainTimer) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetRemainTimer");
static_assert(sizeof(UI_EventPagePopupContainer_SetRemainTimer) == 0x000010, "Wrong size on UI_EventPagePopupContainer_SetRemainTimer");
static_assert(offsetof(UI_EventPagePopupContainer_SetRemainTimer, _end_at) == 0x000000, "Member 'UI_EventPagePopupContainer_SetRemainTimer::_end_at' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetRemainTimer, _alert_hour) == 0x000008, "Member 'UI_EventPagePopupContainer_SetRemainTimer::_alert_hour' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetRepeatRewardItem
// 0x0028 (0x0028 - 0x0000)
struct UI_EventPagePopupContainer_SetRepeatRewardItem final
{
public:
	struct FRewardItem                            _reward_item;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         _repeat_count;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _repeat_reward_count;                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardItemState                              _reward_state;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_257D[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_EventPagePopupContainer_SetRepeatRewardItem) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetRepeatRewardItem");
static_assert(sizeof(UI_EventPagePopupContainer_SetRepeatRewardItem) == 0x000028, "Wrong size on UI_EventPagePopupContainer_SetRepeatRewardItem");
static_assert(offsetof(UI_EventPagePopupContainer_SetRepeatRewardItem, _reward_item) == 0x000000, "Member 'UI_EventPagePopupContainer_SetRepeatRewardItem::_reward_item' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetRepeatRewardItem, _repeat_count) == 0x000018, "Member 'UI_EventPagePopupContainer_SetRepeatRewardItem::_repeat_count' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetRepeatRewardItem, _repeat_reward_count) == 0x00001C, "Member 'UI_EventPagePopupContainer_SetRepeatRewardItem::_repeat_reward_count' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetRepeatRewardItem, _reward_state) == 0x000020, "Member 'UI_EventPagePopupContainer_SetRepeatRewardItem::_reward_state' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetTextures
// 0x01A0 (0x01A0 - 0x0000)
struct UI_EventPagePopupContainer_SetTextures final
{
public:
	struct FSlateBrush                            _bubble_image;                                     // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            _speecher_image;                                   // 0x00D0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_SetTextures) == 0x000010, "Wrong alignment on UI_EventPagePopupContainer_SetTextures");
static_assert(sizeof(UI_EventPagePopupContainer_SetTextures) == 0x0001A0, "Wrong size on UI_EventPagePopupContainer_SetTextures");
static_assert(offsetof(UI_EventPagePopupContainer_SetTextures, _bubble_image) == 0x000000, "Member 'UI_EventPagePopupContainer_SetTextures::_bubble_image' has a wrong offset!");
static_assert(offsetof(UI_EventPagePopupContainer_SetTextures, _speecher_image) == 0x0000D0, "Member 'UI_EventPagePopupContainer_SetTextures::_speecher_image' has a wrong offset!");

// Function Stigma.UI_EventPagePopupContainer.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_EventPagePopupContainer_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupContainer_SetTitle) == 0x000008, "Wrong alignment on UI_EventPagePopupContainer_SetTitle");
static_assert(sizeof(UI_EventPagePopupContainer_SetTitle) == 0x000018, "Wrong size on UI_EventPagePopupContainer_SetTitle");
static_assert(offsetof(UI_EventPagePopupContainer_SetTitle, _text) == 0x000000, "Member 'UI_EventPagePopupContainer_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_EventPagePopupTab.SetBackground
// 0x00D0 (0x00D0 - 0x0000)
struct UI_EventPagePopupTab_SetBackground final
{
public:
	struct FSlateBrush                            _brush;                                            // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupTab_SetBackground) == 0x000010, "Wrong alignment on UI_EventPagePopupTab_SetBackground");
static_assert(sizeof(UI_EventPagePopupTab_SetBackground) == 0x0000D0, "Wrong size on UI_EventPagePopupTab_SetBackground");
static_assert(offsetof(UI_EventPagePopupTab_SetBackground, _brush) == 0x000000, "Member 'UI_EventPagePopupTab_SetBackground::_brush' has a wrong offset!");

// Function Stigma.UI_EventPagePopupTab.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_EventPagePopupTab_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupTab_SetTitle) == 0x000008, "Wrong alignment on UI_EventPagePopupTab_SetTitle");
static_assert(sizeof(UI_EventPagePopupTab_SetTitle) == 0x000018, "Wrong size on UI_EventPagePopupTab_SetTitle");
static_assert(offsetof(UI_EventPagePopupTab_SetTitle, _text) == 0x000000, "Member 'UI_EventPagePopupTab_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_EventPagePopupTab.ShowRedDot
// 0x0001 (0x0001 - 0x0000)
struct UI_EventPagePopupTab_ShowRedDot final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPagePopupTab_ShowRedDot) == 0x000001, "Wrong alignment on UI_EventPagePopupTab_ShowRedDot");
static_assert(sizeof(UI_EventPagePopupTab_ShowRedDot) == 0x000001, "Wrong size on UI_EventPagePopupTab_ShowRedDot");
static_assert(offsetof(UI_EventPagePopupTab_ShowRedDot, _show) == 0x000000, "Member 'UI_EventPagePopupTab_ShowRedDot::_show' has a wrong offset!");

// Function Stigma.UI_RoundCountDown.SetCount
// 0x0004 (0x0004 - 0x0000)
struct UI_RoundCountDown_SetCount final
{
public:
	int32                                         _count;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RoundCountDown_SetCount) == 0x000004, "Wrong alignment on UI_RoundCountDown_SetCount");
static_assert(sizeof(UI_RoundCountDown_SetCount) == 0x000004, "Wrong size on UI_RoundCountDown_SetCount");
static_assert(offsetof(UI_RoundCountDown_SetCount, _count) == 0x000000, "Member 'UI_RoundCountDown_SetCount::_count' has a wrong offset!");

// Function Stigma.UI_EventPageRewardItem.SetState
// 0x0001 (0x0001 - 0x0000)
struct UI_EventPageRewardItem_SetState final
{
public:
	ERewardItemState                              _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPageRewardItem_SetState) == 0x000001, "Wrong alignment on UI_EventPageRewardItem_SetState");
static_assert(sizeof(UI_EventPageRewardItem_SetState) == 0x000001, "Wrong size on UI_EventPageRewardItem_SetState");
static_assert(offsetof(UI_EventPageRewardItem_SetState, _state) == 0x000000, "Member 'UI_EventPageRewardItem_SetState::_state' has a wrong offset!");

// Function Stigma.UI_EventPageRewardItem.GetState
// 0x0001 (0x0001 - 0x0000)
struct UI_EventPageRewardItem_GetState final
{
public:
	ERewardItemState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPageRewardItem_GetState) == 0x000001, "Wrong alignment on UI_EventPageRewardItem_GetState");
static_assert(sizeof(UI_EventPageRewardItem_GetState) == 0x000001, "Wrong size on UI_EventPageRewardItem_GetState");
static_assert(offsetof(UI_EventPageRewardItem_GetState, ReturnValue) == 0x000000, "Member 'UI_EventPageRewardItem_GetState::ReturnValue' has a wrong offset!");

// Function Stigma.UI_EventPageRewardItem.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UI_EventPageRewardItem_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_EventPageRewardItem_GetValue) == 0x000004, "Wrong alignment on UI_EventPageRewardItem_GetValue");
static_assert(sizeof(UI_EventPageRewardItem_GetValue) == 0x000004, "Wrong size on UI_EventPageRewardItem_GetValue");
static_assert(offsetof(UI_EventPageRewardItem_GetValue, ReturnValue) == 0x000000, "Member 'UI_EventPageRewardItem_GetValue::ReturnValue' has a wrong offset!");

// Function Stigma.UI_FloatingGuide.ShowFloatingGuide
// 0x0068 (0x0068 - 0x0000)
struct UI_FloatingGuide_ShowFloatingGuide final
{
public:
	class UObject*                                _world_ctx;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Name;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                _parent;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_FloatingGuide>          _Class;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFloatingGuidePosition                        _position;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2583[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              _Space;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                _sub_widget_type;                                  // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _help_url;                                         // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         _show_duration;                                    // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2584[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UUI_FloatingGuide*                      ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_FloatingGuide_ShowFloatingGuide) == 0x000008, "Wrong alignment on UI_FloatingGuide_ShowFloatingGuide");
static_assert(sizeof(UI_FloatingGuide_ShowFloatingGuide) == 0x000068, "Wrong size on UI_FloatingGuide_ShowFloatingGuide");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _world_ctx) == 0x000000, "Member 'UI_FloatingGuide_ShowFloatingGuide::_world_ctx' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _Name) == 0x000008, "Member 'UI_FloatingGuide_ShowFloatingGuide::_Name' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _parent) == 0x000010, "Member 'UI_FloatingGuide_ShowFloatingGuide::_parent' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _Class) == 0x000018, "Member 'UI_FloatingGuide_ShowFloatingGuide::_Class' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _position) == 0x000020, "Member 'UI_FloatingGuide_ShowFloatingGuide::_position' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _Space) == 0x000028, "Member 'UI_FloatingGuide_ShowFloatingGuide::_Space' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _sub_widget_type) == 0x000038, "Member 'UI_FloatingGuide_ShowFloatingGuide::_sub_widget_type' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _help_url) == 0x000040, "Member 'UI_FloatingGuide_ShowFloatingGuide::_help_url' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, _show_duration) == 0x000058, "Member 'UI_FloatingGuide_ShowFloatingGuide::_show_duration' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_ShowFloatingGuide, ReturnValue) == 0x000060, "Member 'UI_FloatingGuide_ShowFloatingGuide::ReturnValue' has a wrong offset!");

// Function Stigma.UI_FloatingGuide.OnInsertSubWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_FloatingGuide_OnInsertSubWidget final
{
public:
	class UUserWidget*                            _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2585[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_FloatingGuide_OnInsertSubWidget) == 0x000008, "Wrong alignment on UI_FloatingGuide_OnInsertSubWidget");
static_assert(sizeof(UI_FloatingGuide_OnInsertSubWidget) == 0x000010, "Wrong size on UI_FloatingGuide_OnInsertSubWidget");
static_assert(offsetof(UI_FloatingGuide_OnInsertSubWidget, _widget) == 0x000000, "Member 'UI_FloatingGuide_OnInsertSubWidget::_widget' has a wrong offset!");
static_assert(offsetof(UI_FloatingGuide_OnInsertSubWidget, ReturnValue) == 0x000008, "Member 'UI_FloatingGuide_OnInsertSubWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_NotifySlot.DriveLifeTimeGauge
// 0x0004 (0x0004 - 0x0000)
struct UI_NotifySlot_DriveLifeTimeGauge final
{
public:
	float                                         _percent;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_NotifySlot_DriveLifeTimeGauge) == 0x000004, "Wrong alignment on UI_NotifySlot_DriveLifeTimeGauge");
static_assert(sizeof(UI_NotifySlot_DriveLifeTimeGauge) == 0x000004, "Wrong size on UI_NotifySlot_DriveLifeTimeGauge");
static_assert(offsetof(UI_NotifySlot_DriveLifeTimeGauge, _percent) == 0x000000, "Member 'UI_NotifySlot_DriveLifeTimeGauge::_percent' has a wrong offset!");

// Function Stigma.UI_NotifySlot.ForceFinish
// 0x0001 (0x0001 - 0x0000)
struct UI_NotifySlot_ForceFinish final
{
public:
	bool                                          _force_immediately;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_NotifySlot_ForceFinish) == 0x000001, "Wrong alignment on UI_NotifySlot_ForceFinish");
static_assert(sizeof(UI_NotifySlot_ForceFinish) == 0x000001, "Wrong size on UI_NotifySlot_ForceFinish");
static_assert(offsetof(UI_NotifySlot_ForceFinish, _force_immediately) == 0x000000, "Member 'UI_NotifySlot_ForceFinish::_force_immediately' has a wrong offset!");

// Function Stigma.UI_NotifySlot.ShowLifeTimeGauge
// 0x0001 (0x0001 - 0x0000)
struct UI_NotifySlot_ShowLifeTimeGauge final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_NotifySlot_ShowLifeTimeGauge) == 0x000001, "Wrong alignment on UI_NotifySlot_ShowLifeTimeGauge");
static_assert(sizeof(UI_NotifySlot_ShowLifeTimeGauge) == 0x000001, "Wrong size on UI_NotifySlot_ShowLifeTimeGauge");
static_assert(offsetof(UI_NotifySlot_ShowLifeTimeGauge, _show) == 0x000000, "Member 'UI_NotifySlot_ShowLifeTimeGauge::_show' has a wrong offset!");

// Function Stigma.UI_FriendNotifySlot.SetText
// 0x0018 (0x0018 - 0x0000)
struct UI_FriendNotifySlot_SetText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_FriendNotifySlot_SetText) == 0x000008, "Wrong alignment on UI_FriendNotifySlot_SetText");
static_assert(sizeof(UI_FriendNotifySlot_SetText) == 0x000018, "Wrong size on UI_FriendNotifySlot_SetText");
static_assert(offsetof(UI_FriendNotifySlot_SetText, _text) == 0x000000, "Member 'UI_FriendNotifySlot_SetText::_text' has a wrong offset!");

// Function Stigma.UI_GameNotify.InitWidget
// 0x0020 (0x0020 - 0x0000)
struct UI_GameNotify_InitWidget final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         _duration;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258C[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GameNotify_InitWidget) == 0x000008, "Wrong alignment on UI_GameNotify_InitWidget");
static_assert(sizeof(UI_GameNotify_InitWidget) == 0x000020, "Wrong size on UI_GameNotify_InitWidget");
static_assert(offsetof(UI_GameNotify_InitWidget, _text) == 0x000000, "Member 'UI_GameNotify_InitWidget::_text' has a wrong offset!");
static_assert(offsetof(UI_GameNotify_InitWidget, _duration) == 0x000018, "Member 'UI_GameNotify_InitWidget::_duration' has a wrong offset!");

// Function Stigma.UI_GameNotify_ContentUnlockerContainer.CloseAllUnlockers
// 0x0010 (0x0010 - 0x0000)
struct UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers) == 0x000008, "Wrong alignment on UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers");
static_assert(sizeof(UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers) == 0x000010, "Wrong size on UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers");
static_assert(offsetof(UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers, _widget) == 0x000000, "Member 'UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers::_widget' has a wrong offset!");
static_assert(offsetof(UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers, _select) == 0x000008, "Member 'UI_GameNotify_ContentUnlockerContainer_CloseAllUnlockers::_select' has a wrong offset!");

// Function Stigma.UI_GameResult_BackBase.InitWidget
// 0x00D8 (0x00D8 - 0x0000)
struct UI_GameResult_BackBase_InitWidget final
{
public:
	ETeams                                        _my_team;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2592[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattleDecisionDetail                  _result;                                           // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GameResult_BackBase_InitWidget) == 0x000008, "Wrong alignment on UI_GameResult_BackBase_InitWidget");
static_assert(sizeof(UI_GameResult_BackBase_InitWidget) == 0x0000D8, "Wrong size on UI_GameResult_BackBase_InitWidget");
static_assert(offsetof(UI_GameResult_BackBase_InitWidget, _my_team) == 0x000000, "Member 'UI_GameResult_BackBase_InitWidget::_my_team' has a wrong offset!");
static_assert(offsetof(UI_GameResult_BackBase_InitWidget, _result) == 0x000008, "Member 'UI_GameResult_BackBase_InitWidget::_result' has a wrong offset!");

// Function Stigma.UI_GameResult_Report.OnACK_GetUserTierInfo
// 0x0078 (0x0078 - 0x0000)
struct UI_GameResult_Report_OnACK_GetUserTierInfo final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2594[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadUserTierInfo                  _ack;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0058(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GameResult_Report_OnACK_GetUserTierInfo) == 0x000008, "Wrong alignment on UI_GameResult_Report_OnACK_GetUserTierInfo");
static_assert(sizeof(UI_GameResult_Report_OnACK_GetUserTierInfo) == 0x000078, "Wrong size on UI_GameResult_Report_OnACK_GetUserTierInfo");
static_assert(offsetof(UI_GameResult_Report_OnACK_GetUserTierInfo, _rcode) == 0x000000, "Member 'UI_GameResult_Report_OnACK_GetUserTierInfo::_rcode' has a wrong offset!");
static_assert(offsetof(UI_GameResult_Report_OnACK_GetUserTierInfo, _ack) == 0x000008, "Member 'UI_GameResult_Report_OnACK_GetUserTierInfo::_ack' has a wrong offset!");
static_assert(offsetof(UI_GameResult_Report_OnACK_GetUserTierInfo, ReturnValue) == 0x000058, "Member 'UI_GameResult_Report_OnACK_GetUserTierInfo::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GameResult_Report.SetDecision
// 0x00F0 (0x00F0 - 0x0000)
struct UI_GameResult_Report_SetDecision final
{
public:
	ETeams                                        _my_team;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2595[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserName                              _my_nickname;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleDecisionDetail                  _decision;                                         // 0x0020(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GameResult_Report_SetDecision) == 0x000008, "Wrong alignment on UI_GameResult_Report_SetDecision");
static_assert(sizeof(UI_GameResult_Report_SetDecision) == 0x0000F0, "Wrong size on UI_GameResult_Report_SetDecision");
static_assert(offsetof(UI_GameResult_Report_SetDecision, _my_team) == 0x000000, "Member 'UI_GameResult_Report_SetDecision::_my_team' has a wrong offset!");
static_assert(offsetof(UI_GameResult_Report_SetDecision, _my_nickname) == 0x000008, "Member 'UI_GameResult_Report_SetDecision::_my_nickname' has a wrong offset!");
static_assert(offsetof(UI_GameResult_Report_SetDecision, _decision) == 0x000020, "Member 'UI_GameResult_Report_SetDecision::_decision' has a wrong offset!");

// Function Stigma.UI_GNB_LobbyBase.OnUpdateUser
// 0x0001 (0x0001 - 0x0000)
struct UI_GNB_LobbyBase_OnUpdateUser final
{
public:
	EUserEvent                                    _event;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GNB_LobbyBase_OnUpdateUser) == 0x000001, "Wrong alignment on UI_GNB_LobbyBase_OnUpdateUser");
static_assert(sizeof(UI_GNB_LobbyBase_OnUpdateUser) == 0x000001, "Wrong size on UI_GNB_LobbyBase_OnUpdateUser");
static_assert(offsetof(UI_GNB_LobbyBase_OnUpdateUser, _event) == 0x000000, "Member 'UI_GNB_LobbyBase_OnUpdateUser::_event' has a wrong offset!");

// Function Stigma.UI_GNB_LobbyBase.SetCurrencyBoxList
// 0x0018 (0x0018 - 0x0000)
struct UI_GNB_LobbyBase_SetCurrencyBoxList final
{
public:
	TArray<struct FItemID_Currency>               _currency_ids;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          _use_wallet;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _use_quick_purchase;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2596[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GNB_LobbyBase_SetCurrencyBoxList) == 0x000008, "Wrong alignment on UI_GNB_LobbyBase_SetCurrencyBoxList");
static_assert(sizeof(UI_GNB_LobbyBase_SetCurrencyBoxList) == 0x000018, "Wrong size on UI_GNB_LobbyBase_SetCurrencyBoxList");
static_assert(offsetof(UI_GNB_LobbyBase_SetCurrencyBoxList, _currency_ids) == 0x000000, "Member 'UI_GNB_LobbyBase_SetCurrencyBoxList::_currency_ids' has a wrong offset!");
static_assert(offsetof(UI_GNB_LobbyBase_SetCurrencyBoxList, _use_wallet) == 0x000010, "Member 'UI_GNB_LobbyBase_SetCurrencyBoxList::_use_wallet' has a wrong offset!");
static_assert(offsetof(UI_GNB_LobbyBase_SetCurrencyBoxList, _use_quick_purchase) == 0x000011, "Member 'UI_GNB_LobbyBase_SetCurrencyBoxList::_use_quick_purchase' has a wrong offset!");

// Function Stigma.UI_GunCustomizePopupBase.OnBeforeClose_CallBack
// 0x0010 (0x0010 - 0x0000)
struct UI_GunCustomizePopupBase_OnBeforeClose_CallBack final
{
public:
	const class UPopupBase*                       _popup;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ctrl_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunCustomizePopupBase_OnBeforeClose_CallBack) == 0x000008, "Wrong alignment on UI_GunCustomizePopupBase_OnBeforeClose_CallBack");
static_assert(sizeof(UI_GunCustomizePopupBase_OnBeforeClose_CallBack) == 0x000010, "Wrong size on UI_GunCustomizePopupBase_OnBeforeClose_CallBack");
static_assert(offsetof(UI_GunCustomizePopupBase_OnBeforeClose_CallBack, _popup) == 0x000000, "Member 'UI_GunCustomizePopupBase_OnBeforeClose_CallBack::_popup' has a wrong offset!");
static_assert(offsetof(UI_GunCustomizePopupBase_OnBeforeClose_CallBack, _ctrl_id) == 0x000008, "Member 'UI_GunCustomizePopupBase_OnBeforeClose_CallBack::_ctrl_id' has a wrong offset!");

// Function Stigma.UI_GunCustomizePopupBase.SetGunType
// 0x0001 (0x0001 - 0x0000)
struct UI_GunCustomizePopupBase_SetGunType final
{
public:
	EGunType                                      _gun_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunCustomizePopupBase_SetGunType) == 0x000001, "Wrong alignment on UI_GunCustomizePopupBase_SetGunType");
static_assert(sizeof(UI_GunCustomizePopupBase_SetGunType) == 0x000001, "Wrong size on UI_GunCustomizePopupBase_SetGunType");
static_assert(offsetof(UI_GunCustomizePopupBase_SetGunType, _gun_type) == 0x000000, "Member 'UI_GunCustomizePopupBase_SetGunType::_gun_type' has a wrong offset!");

// Function Stigma.UI_GunListItem.IsSelection
// 0x0001 (0x0001 - 0x0000)
struct UI_GunListItem_IsSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunListItem_IsSelection) == 0x000001, "Wrong alignment on UI_GunListItem_IsSelection");
static_assert(sizeof(UI_GunListItem_IsSelection) == 0x000001, "Wrong size on UI_GunListItem_IsSelection");
static_assert(offsetof(UI_GunListItem_IsSelection, ReturnValue) == 0x000000, "Member 'UI_GunListItem_IsSelection::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.BuildGunPartsListView
// 0x0018 (0x0018 - 0x0000)
struct UI_GunNPartsListViews_BuildGunPartsListView final
{
public:
	EGunPartsSlot                                 _gun_parts_slot;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _gun_type;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                _selected_parts_id;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunNPartsListViews_BuildGunPartsListView) == 0x000008, "Wrong alignment on UI_GunNPartsListViews_BuildGunPartsListView");
static_assert(sizeof(UI_GunNPartsListViews_BuildGunPartsListView) == 0x000018, "Wrong size on UI_GunNPartsListViews_BuildGunPartsListView");
static_assert(offsetof(UI_GunNPartsListViews_BuildGunPartsListView, _gun_parts_slot) == 0x000000, "Member 'UI_GunNPartsListViews_BuildGunPartsListView::_gun_parts_slot' has a wrong offset!");
static_assert(offsetof(UI_GunNPartsListViews_BuildGunPartsListView, _gun_type) == 0x000001, "Member 'UI_GunNPartsListViews_BuildGunPartsListView::_gun_type' has a wrong offset!");
static_assert(offsetof(UI_GunNPartsListViews_BuildGunPartsListView, _selected_parts_id) == 0x000008, "Member 'UI_GunNPartsListViews_BuildGunPartsListView::_selected_parts_id' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.ChangeListView
// 0x0001 (0x0001 - 0x0000)
struct UI_GunNPartsListViews_ChangeListView final
{
public:
	bool                                          _is_selecting_parts;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunNPartsListViews_ChangeListView) == 0x000001, "Wrong alignment on UI_GunNPartsListViews_ChangeListView");
static_assert(sizeof(UI_GunNPartsListViews_ChangeListView) == 0x000001, "Wrong size on UI_GunNPartsListViews_ChangeListView");
static_assert(offsetof(UI_GunNPartsListViews_ChangeListView, _is_selecting_parts) == 0x000000, "Member 'UI_GunNPartsListViews_ChangeListView::_is_selecting_parts' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.Init
// 0x0018 (0x0018 - 0x0000)
struct UI_GunNPartsListViews_Init final
{
public:
	class UObject*                                _owner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunPreset                             _selected_gun_preset;                              // 0x0008(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunNPartsListViews_Init) == 0x000008, "Wrong alignment on UI_GunNPartsListViews_Init");
static_assert(sizeof(UI_GunNPartsListViews_Init) == 0x000018, "Wrong size on UI_GunNPartsListViews_Init");
static_assert(offsetof(UI_GunNPartsListViews_Init, _owner) == 0x000000, "Member 'UI_GunNPartsListViews_Init::_owner' has a wrong offset!");
static_assert(offsetof(UI_GunNPartsListViews_Init, _selected_gun_preset) == 0x000008, "Member 'UI_GunNPartsListViews_Init::_selected_gun_preset' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.OnClickCloseBtn
// 0x0010 (0x0010 - 0x0000)
struct UI_GunNPartsListViews_OnClickCloseBtn final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GunNPartsListViews_OnClickCloseBtn) == 0x000008, "Wrong alignment on UI_GunNPartsListViews_OnClickCloseBtn");
static_assert(sizeof(UI_GunNPartsListViews_OnClickCloseBtn) == 0x000010, "Wrong size on UI_GunNPartsListViews_OnClickCloseBtn");
static_assert(offsetof(UI_GunNPartsListViews_OnClickCloseBtn, _widget) == 0x000000, "Member 'UI_GunNPartsListViews_OnClickCloseBtn::_widget' has a wrong offset!");
static_assert(offsetof(UI_GunNPartsListViews_OnClickCloseBtn, _select) == 0x000008, "Member 'UI_GunNPartsListViews_OnClickCloseBtn::_select' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.RefreshGunListView
// 0x0010 (0x0010 - 0x0000)
struct UI_GunNPartsListViews_RefreshGunListView final
{
public:
	struct FGunPreset                             _selected_gun_preset;                              // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunNPartsListViews_RefreshGunListView) == 0x000008, "Wrong alignment on UI_GunNPartsListViews_RefreshGunListView");
static_assert(sizeof(UI_GunNPartsListViews_RefreshGunListView) == 0x000010, "Wrong size on UI_GunNPartsListViews_RefreshGunListView");
static_assert(offsetof(UI_GunNPartsListViews_RefreshGunListView, _selected_gun_preset) == 0x000000, "Member 'UI_GunNPartsListViews_RefreshGunListView::_selected_gun_preset' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.SetSelectGun
// 0x0010 (0x0010 - 0x0000)
struct UI_GunNPartsListViews_SetSelectGun final
{
public:
	class ULVData_Gun*                            _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _from_ctrl;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GunNPartsListViews_SetSelectGun) == 0x000008, "Wrong alignment on UI_GunNPartsListViews_SetSelectGun");
static_assert(sizeof(UI_GunNPartsListViews_SetSelectGun) == 0x000010, "Wrong size on UI_GunNPartsListViews_SetSelectGun");
static_assert(offsetof(UI_GunNPartsListViews_SetSelectGun, _item) == 0x000000, "Member 'UI_GunNPartsListViews_SetSelectGun::_item' has a wrong offset!");
static_assert(offsetof(UI_GunNPartsListViews_SetSelectGun, _from_ctrl) == 0x000008, "Member 'UI_GunNPartsListViews_SetSelectGun::_from_ctrl' has a wrong offset!");

// Function Stigma.UI_GunNPartsListViews.SetSelectGunParts
// 0x0010 (0x0010 - 0x0000)
struct UI_GunNPartsListViews_SetSelectGunParts final
{
public:
	class ULVData_GunParts*                       _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _from_ctrl;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GunNPartsListViews_SetSelectGunParts) == 0x000008, "Wrong alignment on UI_GunNPartsListViews_SetSelectGunParts");
static_assert(sizeof(UI_GunNPartsListViews_SetSelectGunParts) == 0x000010, "Wrong size on UI_GunNPartsListViews_SetSelectGunParts");
static_assert(offsetof(UI_GunNPartsListViews_SetSelectGunParts, _item) == 0x000000, "Member 'UI_GunNPartsListViews_SetSelectGunParts::_item' has a wrong offset!");
static_assert(offsetof(UI_GunNPartsListViews_SetSelectGunParts, _from_ctrl) == 0x000008, "Member 'UI_GunNPartsListViews_SetSelectGunParts::_from_ctrl' has a wrong offset!");

// Function Stigma.UI_GunPartsListItem.BindItem
// 0x0018 (0x0018 - 0x0000)
struct UI_GunPartsListItem_BindItem final
{
public:
	EGunPartsSlot                                 _current_slot;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UInvenItem*                             _item;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             _current_gun_obj;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsListItem_BindItem) == 0x000008, "Wrong alignment on UI_GunPartsListItem_BindItem");
static_assert(sizeof(UI_GunPartsListItem_BindItem) == 0x000018, "Wrong size on UI_GunPartsListItem_BindItem");
static_assert(offsetof(UI_GunPartsListItem_BindItem, _current_slot) == 0x000000, "Member 'UI_GunPartsListItem_BindItem::_current_slot' has a wrong offset!");
static_assert(offsetof(UI_GunPartsListItem_BindItem, _item) == 0x000008, "Member 'UI_GunPartsListItem_BindItem::_item' has a wrong offset!");
static_assert(offsetof(UI_GunPartsListItem_BindItem, _current_gun_obj) == 0x000010, "Member 'UI_GunPartsListItem_BindItem::_current_gun_obj' has a wrong offset!");

// Function Stigma.UI_GunPartsListItem.OnCheckBoxStateChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsListItem_OnCheckBoxStateChanged final
{
public:
	bool                                          _is_checked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsListItem_OnCheckBoxStateChanged) == 0x000001, "Wrong alignment on UI_GunPartsListItem_OnCheckBoxStateChanged");
static_assert(sizeof(UI_GunPartsListItem_OnCheckBoxStateChanged) == 0x000001, "Wrong size on UI_GunPartsListItem_OnCheckBoxStateChanged");
static_assert(offsetof(UI_GunPartsListItem_OnCheckBoxStateChanged, _is_checked) == 0x000000, "Member 'UI_GunPartsListItem_OnCheckBoxStateChanged::_is_checked' has a wrong offset!");

// Function Stigma.UI_GunPartsListItem.SetSelection
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsListItem_SetSelection final
{
public:
	bool                                          _is_selected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsListItem_SetSelection) == 0x000001, "Wrong alignment on UI_GunPartsListItem_SetSelection");
static_assert(sizeof(UI_GunPartsListItem_SetSelection) == 0x000001, "Wrong size on UI_GunPartsListItem_SetSelection");
static_assert(offsetof(UI_GunPartsListItem_SetSelection, _is_selected) == 0x000000, "Member 'UI_GunPartsListItem_SetSelection::_is_selected' has a wrong offset!");

// Function Stigma.UI_GunPartsSlot.GetAttachablePartsCount
// 0x0004 (0x0004 - 0x0000)
struct UI_GunPartsSlot_GetAttachablePartsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlot_GetAttachablePartsCount) == 0x000004, "Wrong alignment on UI_GunPartsSlot_GetAttachablePartsCount");
static_assert(sizeof(UI_GunPartsSlot_GetAttachablePartsCount) == 0x000004, "Wrong size on UI_GunPartsSlot_GetAttachablePartsCount");
static_assert(offsetof(UI_GunPartsSlot_GetAttachablePartsCount, ReturnValue) == 0x000000, "Member 'UI_GunPartsSlot_GetAttachablePartsCount::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPartsSlot.GetVisibility_Img_RedDot
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsSlot_GetVisibility_Img_RedDot final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlot_GetVisibility_Img_RedDot) == 0x000001, "Wrong alignment on UI_GunPartsSlot_GetVisibility_Img_RedDot");
static_assert(sizeof(UI_GunPartsSlot_GetVisibility_Img_RedDot) == 0x000001, "Wrong size on UI_GunPartsSlot_GetVisibility_Img_RedDot");
static_assert(offsetof(UI_GunPartsSlot_GetVisibility_Img_RedDot, ReturnValue) == 0x000000, "Member 'UI_GunPartsSlot_GetVisibility_Img_RedDot::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPartsSlot.GetVisibility_IsUnOwned
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsSlot_GetVisibility_IsUnOwned final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlot_GetVisibility_IsUnOwned) == 0x000001, "Wrong alignment on UI_GunPartsSlot_GetVisibility_IsUnOwned");
static_assert(sizeof(UI_GunPartsSlot_GetVisibility_IsUnOwned) == 0x000001, "Wrong size on UI_GunPartsSlot_GetVisibility_IsUnOwned");
static_assert(offsetof(UI_GunPartsSlot_GetVisibility_IsUnOwned, ReturnValue) == 0x000000, "Member 'UI_GunPartsSlot_GetVisibility_IsUnOwned::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPartsSlot.SetGunObject
// 0x0010 (0x0010 - 0x0000)
struct UI_GunPartsSlot_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _slot;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GunPartsSlot_SetGunObject) == 0x000008, "Wrong alignment on UI_GunPartsSlot_SetGunObject");
static_assert(sizeof(UI_GunPartsSlot_SetGunObject) == 0x000010, "Wrong size on UI_GunPartsSlot_SetGunObject");
static_assert(offsetof(UI_GunPartsSlot_SetGunObject, _gun_object) == 0x000000, "Member 'UI_GunPartsSlot_SetGunObject::_gun_object' has a wrong offset!");
static_assert(offsetof(UI_GunPartsSlot_SetGunObject, _slot) == 0x000008, "Member 'UI_GunPartsSlot_SetGunObject::_slot' has a wrong offset!");

// Function Stigma.UI_GunPartsSlotAccessory.GetVisibility_Img_RedDot
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot) == 0x000001, "Wrong alignment on UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot");
static_assert(sizeof(UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot) == 0x000001, "Wrong size on UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot");
static_assert(offsetof(UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot, ReturnValue) == 0x000000, "Member 'UI_GunPartsSlotAccessory_GetVisibility_Img_RedDot::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPartsSlotAccessory.GetVisibility_IsUnOwned
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned) == 0x000001, "Wrong alignment on UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned");
static_assert(sizeof(UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned) == 0x000001, "Wrong size on UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned");
static_assert(offsetof(UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned, ReturnValue) == 0x000000, "Member 'UI_GunPartsSlotAccessory_GetVisibility_IsUnOwned::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPartsSlotAccessory.SetGunObject
// 0x0010 (0x0010 - 0x0000)
struct UI_GunPartsSlotAccessory_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _parent_slot;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 _main_slot;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A6[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_GunPartsSlotAccessory_SetGunObject) == 0x000008, "Wrong alignment on UI_GunPartsSlotAccessory_SetGunObject");
static_assert(sizeof(UI_GunPartsSlotAccessory_SetGunObject) == 0x000010, "Wrong size on UI_GunPartsSlotAccessory_SetGunObject");
static_assert(offsetof(UI_GunPartsSlotAccessory_SetGunObject, _gun_object) == 0x000000, "Member 'UI_GunPartsSlotAccessory_SetGunObject::_gun_object' has a wrong offset!");
static_assert(offsetof(UI_GunPartsSlotAccessory_SetGunObject, _parent_slot) == 0x000008, "Member 'UI_GunPartsSlotAccessory_SetGunObject::_parent_slot' has a wrong offset!");
static_assert(offsetof(UI_GunPartsSlotAccessory_SetGunObject, _main_slot) == 0x000009, "Member 'UI_GunPartsSlotAccessory_SetGunObject::_main_slot' has a wrong offset!");

// Function Stigma.UI_GunPartsSlotGroup.OnClickPartsSlot
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPartsSlotGroup_OnClickPartsSlot final
{
public:
	EGunPartsSlot                                 _slot;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlotGroup_OnClickPartsSlot) == 0x000001, "Wrong alignment on UI_GunPartsSlotGroup_OnClickPartsSlot");
static_assert(sizeof(UI_GunPartsSlotGroup_OnClickPartsSlot) == 0x000001, "Wrong size on UI_GunPartsSlotGroup_OnClickPartsSlot");
static_assert(offsetof(UI_GunPartsSlotGroup_OnClickPartsSlot, _slot) == 0x000000, "Member 'UI_GunPartsSlotGroup_OnClickPartsSlot::_slot' has a wrong offset!");

// Function Stigma.UI_GunPartsSlotGroup.SetGunObject
// 0x0008 (0x0008 - 0x0000)
struct UI_GunPartsSlotGroup_SetGunObject final
{
public:
	class UGunObject*                             _gun_object;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPartsSlotGroup_SetGunObject) == 0x000008, "Wrong alignment on UI_GunPartsSlotGroup_SetGunObject");
static_assert(sizeof(UI_GunPartsSlotGroup_SetGunObject) == 0x000008, "Wrong size on UI_GunPartsSlotGroup_SetGunObject");
static_assert(offsetof(UI_GunPartsSlotGroup_SetGunObject, _gun_object) == 0x000000, "Member 'UI_GunPartsSlotGroup_SetGunObject::_gun_object' has a wrong offset!");

// Function Stigma.UI_GunPresetItem.OnAck_SetGunType
// 0x0030 (0x0030 - 0x0000)
struct UI_GunPresetItem_OnAck_SetGunType final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FApiResult                             _ack;                                              // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25AB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FNetReply                              ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPresetItem_OnAck_SetGunType) == 0x000008, "Wrong alignment on UI_GunPresetItem_OnAck_SetGunType");
static_assert(sizeof(UI_GunPresetItem_OnAck_SetGunType) == 0x000030, "Wrong size on UI_GunPresetItem_OnAck_SetGunType");
static_assert(offsetof(UI_GunPresetItem_OnAck_SetGunType, _rcode) == 0x000000, "Member 'UI_GunPresetItem_OnAck_SetGunType::_rcode' has a wrong offset!");
static_assert(offsetof(UI_GunPresetItem_OnAck_SetGunType, _ack) == 0x000004, "Member 'UI_GunPresetItem_OnAck_SetGunType::_ack' has a wrong offset!");
static_assert(offsetof(UI_GunPresetItem_OnAck_SetGunType, ReturnValue) == 0x000010, "Member 'UI_GunPresetItem_OnAck_SetGunType::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPresetItem.CanEquipGun
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPresetItem_CanEquipGun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPresetItem_CanEquipGun) == 0x000001, "Wrong alignment on UI_GunPresetItem_CanEquipGun");
static_assert(sizeof(UI_GunPresetItem_CanEquipGun) == 0x000001, "Wrong size on UI_GunPresetItem_CanEquipGun");
static_assert(offsetof(UI_GunPresetItem_CanEquipGun, ReturnValue) == 0x000000, "Member 'UI_GunPresetItem_CanEquipGun::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPresetItem.IsSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPresetItem_IsSelectedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPresetItem_IsSelectedItem) == 0x000001, "Wrong alignment on UI_GunPresetItem_IsSelectedItem");
static_assert(sizeof(UI_GunPresetItem_IsSelectedItem) == 0x000001, "Wrong size on UI_GunPresetItem_IsSelectedItem");
static_assert(offsetof(UI_GunPresetItem_IsSelectedItem, ReturnValue) == 0x000000, "Member 'UI_GunPresetItem_IsSelectedItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PreviewBase.ActivateSubLevel
// 0x0001 (0x0001 - 0x0000)
struct UI_PreviewBase_ActivateSubLevel final
{
public:
	bool                                          _activate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewBase_ActivateSubLevel) == 0x000001, "Wrong alignment on UI_PreviewBase_ActivateSubLevel");
static_assert(sizeof(UI_PreviewBase_ActivateSubLevel) == 0x000001, "Wrong size on UI_PreviewBase_ActivateSubLevel");
static_assert(offsetof(UI_PreviewBase_ActivateSubLevel, _activate) == 0x000000, "Member 'UI_PreviewBase_ActivateSubLevel::_activate' has a wrong offset!");

// Function Stigma.UI_PreviewBase.SetPreviewCam
// 0x0010 (0x0010 - 0x0000)
struct UI_PreviewBase_SetPreviewCam final
{
public:
	class FName                                   _tag;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _target;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewBase_SetPreviewCam) == 0x000008, "Wrong alignment on UI_PreviewBase_SetPreviewCam");
static_assert(sizeof(UI_PreviewBase_SetPreviewCam) == 0x000010, "Wrong size on UI_PreviewBase_SetPreviewCam");
static_assert(offsetof(UI_PreviewBase_SetPreviewCam, _tag) == 0x000000, "Member 'UI_PreviewBase_SetPreviewCam::_tag' has a wrong offset!");
static_assert(offsetof(UI_PreviewBase_SetPreviewCam, _target) == 0x000008, "Member 'UI_PreviewBase_SetPreviewCam::_target' has a wrong offset!");

// Function Stigma.UI_PreviewBase.IsSubLevelActived
// 0x0001 (0x0001 - 0x0000)
struct UI_PreviewBase_IsSubLevelActived final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewBase_IsSubLevelActived) == 0x000001, "Wrong alignment on UI_PreviewBase_IsSubLevelActived");
static_assert(sizeof(UI_PreviewBase_IsSubLevelActived) == 0x000001, "Wrong size on UI_PreviewBase_IsSubLevelActived");
static_assert(offsetof(UI_PreviewBase_IsSubLevelActived, ReturnValue) == 0x000000, "Member 'UI_PreviewBase_IsSubLevelActived::ReturnValue' has a wrong offset!");

// Function Stigma.UI_GunPreview.AllowRotationMode
// 0x0001 (0x0001 - 0x0000)
struct UI_GunPreview_AllowRotationMode final
{
public:
	bool                                          _allow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPreview_AllowRotationMode) == 0x000001, "Wrong alignment on UI_GunPreview_AllowRotationMode");
static_assert(sizeof(UI_GunPreview_AllowRotationMode) == 0x000001, "Wrong size on UI_GunPreview_AllowRotationMode");
static_assert(offsetof(UI_GunPreview_AllowRotationMode, _allow) == 0x000000, "Member 'UI_GunPreview_AllowRotationMode::_allow' has a wrong offset!");

// Function Stigma.UI_GunPreview.RegisterOnSubLevelShown
// 0x0010 (0x0010 - 0x0000)
struct UI_GunPreview_RegisterOnSubLevelShown final
{
public:
	TDelegate<void()>                             _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPreview_RegisterOnSubLevelShown) == 0x000004, "Wrong alignment on UI_GunPreview_RegisterOnSubLevelShown");
static_assert(sizeof(UI_GunPreview_RegisterOnSubLevelShown) == 0x000010, "Wrong size on UI_GunPreview_RegisterOnSubLevelShown");
static_assert(offsetof(UI_GunPreview_RegisterOnSubLevelShown, _callback) == 0x000000, "Member 'UI_GunPreview_RegisterOnSubLevelShown::_callback' has a wrong offset!");

// Function Stigma.UI_GunPreview.SetGunPreviewer
// 0x0008 (0x0008 - 0x0000)
struct UI_GunPreview_SetGunPreviewer final
{
public:
	class UGunObject*                             _gun_obj;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_GunPreview_SetGunPreviewer) == 0x000008, "Wrong alignment on UI_GunPreview_SetGunPreviewer");
static_assert(sizeof(UI_GunPreview_SetGunPreviewer) == 0x000008, "Wrong size on UI_GunPreview_SetGunPreviewer");
static_assert(offsetof(UI_GunPreview_SetGunPreviewer, _gun_obj) == 0x000000, "Member 'UI_GunPreview_SetGunPreviewer::_gun_obj' has a wrong offset!");

// Function Stigma.UI_HelpPopup.GetCategoryMenuWidget
// 0x0018 (0x0018 - 0x0000)
struct UI_HelpPopup_GetCategoryMenuWidget final
{
public:
	class FString                                 _category;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HelpPopup_GetCategoryMenuWidget) == 0x000008, "Wrong alignment on UI_HelpPopup_GetCategoryMenuWidget");
static_assert(sizeof(UI_HelpPopup_GetCategoryMenuWidget) == 0x000018, "Wrong size on UI_HelpPopup_GetCategoryMenuWidget");
static_assert(offsetof(UI_HelpPopup_GetCategoryMenuWidget, _category) == 0x000000, "Member 'UI_HelpPopup_GetCategoryMenuWidget::_category' has a wrong offset!");
static_assert(offsetof(UI_HelpPopup_GetCategoryMenuWidget, ReturnValue) == 0x000010, "Member 'UI_HelpPopup_GetCategoryMenuWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HelpPopup.GetContentsMenuWidget
// 0x0018 (0x0018 - 0x0000)
struct UI_HelpPopup_GetContentsMenuWidget final
{
public:
	class FString                                 _contents_key;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HelpPopup_GetContentsMenuWidget) == 0x000008, "Wrong alignment on UI_HelpPopup_GetContentsMenuWidget");
static_assert(sizeof(UI_HelpPopup_GetContentsMenuWidget) == 0x000018, "Wrong size on UI_HelpPopup_GetContentsMenuWidget");
static_assert(offsetof(UI_HelpPopup_GetContentsMenuWidget, _contents_key) == 0x000000, "Member 'UI_HelpPopup_GetContentsMenuWidget::_contents_key' has a wrong offset!");
static_assert(offsetof(UI_HelpPopup_GetContentsMenuWidget, ReturnValue) == 0x000010, "Member 'UI_HelpPopup_GetContentsMenuWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HelpPopup.OnTextChangedSearch
// 0x0018 (0x0018 - 0x0000)
struct UI_HelpPopup_OnTextChangedSearch final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HelpPopup_OnTextChangedSearch) == 0x000008, "Wrong alignment on UI_HelpPopup_OnTextChangedSearch");
static_assert(sizeof(UI_HelpPopup_OnTextChangedSearch) == 0x000018, "Wrong size on UI_HelpPopup_OnTextChangedSearch");
static_assert(offsetof(UI_HelpPopup_OnTextChangedSearch, _text) == 0x000000, "Member 'UI_HelpPopup_OnTextChangedSearch::_text' has a wrong offset!");

// Function Stigma.UI_HelpPopup.OnTextCommittedSearch
// 0x0020 (0x0020 - 0x0000)
struct UI_HelpPopup_OnTextCommittedSearch final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   _type;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HelpPopup_OnTextCommittedSearch) == 0x000008, "Wrong alignment on UI_HelpPopup_OnTextCommittedSearch");
static_assert(sizeof(UI_HelpPopup_OnTextCommittedSearch) == 0x000020, "Wrong size on UI_HelpPopup_OnTextCommittedSearch");
static_assert(offsetof(UI_HelpPopup_OnTextCommittedSearch, _text) == 0x000000, "Member 'UI_HelpPopup_OnTextCommittedSearch::_text' has a wrong offset!");
static_assert(offsetof(UI_HelpPopup_OnTextCommittedSearch, _type) == 0x000018, "Member 'UI_HelpPopup_OnTextCommittedSearch::_type' has a wrong offset!");

// Function Stigma.UI_HelpPopup.UpdateContents
// 0x0010 (0x0010 - 0x0000)
struct UI_HelpPopup_UpdateContents final
{
public:
	class FString                                 _contents_key;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HelpPopup_UpdateContents) == 0x000008, "Wrong alignment on UI_HelpPopup_UpdateContents");
static_assert(sizeof(UI_HelpPopup_UpdateContents) == 0x000010, "Wrong size on UI_HelpPopup_UpdateContents");
static_assert(offsetof(UI_HelpPopup_UpdateContents, _contents_key) == 0x000000, "Member 'UI_HelpPopup_UpdateContents::_contents_key' has a wrong offset!");

// Function Stigma.UI_HelpPopup.UpdateTargetTreeViewMenu
// 0x0010 (0x0010 - 0x0000)
struct UI_HelpPopup_UpdateTargetTreeViewMenu final
{
public:
	class FString                                 _contents_key;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HelpPopup_UpdateTargetTreeViewMenu) == 0x000008, "Wrong alignment on UI_HelpPopup_UpdateTargetTreeViewMenu");
static_assert(sizeof(UI_HelpPopup_UpdateTargetTreeViewMenu) == 0x000010, "Wrong size on UI_HelpPopup_UpdateTargetTreeViewMenu");
static_assert(offsetof(UI_HelpPopup_UpdateTargetTreeViewMenu, _contents_key) == 0x000000, "Member 'UI_HelpPopup_UpdateTargetTreeViewMenu::_contents_key' has a wrong offset!");

// Function Stigma.UI_HelpPopup.UpdateTreeViewFilteredMenu
// 0x0018 (0x0018 - 0x0000)
struct UI_HelpPopup_UpdateTreeViewFilteredMenu final
{
public:
	class FText                                   _filtered_text;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HelpPopup_UpdateTreeViewFilteredMenu) == 0x000008, "Wrong alignment on UI_HelpPopup_UpdateTreeViewFilteredMenu");
static_assert(sizeof(UI_HelpPopup_UpdateTreeViewFilteredMenu) == 0x000018, "Wrong size on UI_HelpPopup_UpdateTreeViewFilteredMenu");
static_assert(offsetof(UI_HelpPopup_UpdateTreeViewFilteredMenu, _filtered_text) == 0x000000, "Member 'UI_HelpPopup_UpdateTreeViewFilteredMenu::_filtered_text' has a wrong offset!");

// Function Stigma.UI_HoverMenuWidget.Init
// 0x0060 (0x0060 - 0x0000)
struct UI_HoverMenuWidget_Init final
{
public:
	struct FHoverMenuEntry                        _menu_entry;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _is_odd;                                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B6[0x6];                                     // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HoverMenuWidget_Init) == 0x000008, "Wrong alignment on UI_HoverMenuWidget_Init");
static_assert(sizeof(UI_HoverMenuWidget_Init) == 0x000060, "Wrong size on UI_HoverMenuWidget_Init");
static_assert(offsetof(UI_HoverMenuWidget_Init, _menu_entry) == 0x000000, "Member 'UI_HoverMenuWidget_Init::_menu_entry' has a wrong offset!");
static_assert(offsetof(UI_HoverMenuWidget_Init, _is_odd) == 0x000058, "Member 'UI_HoverMenuWidget_Init::_is_odd' has a wrong offset!");
static_assert(offsetof(UI_HoverMenuWidget_Init, ReturnValue) == 0x000059, "Member 'UI_HoverMenuWidget_Init::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HoverMenuWidget.GetID
// 0x0008 (0x0008 - 0x0000)
struct UI_HoverMenuWidget_GetID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HoverMenuWidget_GetID) == 0x000004, "Wrong alignment on UI_HoverMenuWidget_GetID");
static_assert(sizeof(UI_HoverMenuWidget_GetID) == 0x000008, "Wrong size on UI_HoverMenuWidget_GetID");
static_assert(offsetof(UI_HoverMenuWidget_GetID, ReturnValue) == 0x000000, "Member 'UI_HoverMenuWidget_GetID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ToastMessageContainerBase.AddSimpleToast
// 0x0018 (0x0018 - 0x0000)
struct UI_ToastMessageContainerBase_AddSimpleToast final
{
public:
	class FString                                 _msg;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ToastMessageContainerBase_AddSimpleToast) == 0x000008, "Wrong alignment on UI_ToastMessageContainerBase_AddSimpleToast");
static_assert(sizeof(UI_ToastMessageContainerBase_AddSimpleToast) == 0x000018, "Wrong size on UI_ToastMessageContainerBase_AddSimpleToast");
static_assert(offsetof(UI_ToastMessageContainerBase_AddSimpleToast, _msg) == 0x000000, "Member 'UI_ToastMessageContainerBase_AddSimpleToast::_msg' has a wrong offset!");
static_assert(offsetof(UI_ToastMessageContainerBase_AddSimpleToast, ReturnValue) == 0x000010, "Member 'UI_ToastMessageContainerBase_AddSimpleToast::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ToastMessageContainerBase.GetRestToastCount
// 0x0004 (0x0004 - 0x0000)
struct UI_ToastMessageContainerBase_GetRestToastCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ToastMessageContainerBase_GetRestToastCount) == 0x000004, "Wrong alignment on UI_ToastMessageContainerBase_GetRestToastCount");
static_assert(sizeof(UI_ToastMessageContainerBase_GetRestToastCount) == 0x000004, "Wrong size on UI_ToastMessageContainerBase_GetRestToastCount");
static_assert(offsetof(UI_ToastMessageContainerBase_GetRestToastCount, ReturnValue) == 0x000000, "Member 'UI_ToastMessageContainerBase_GetRestToastCount::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ToastMessageContainerBase.OnToastInactived
// 0x0008 (0x0008 - 0x0000)
struct UI_ToastMessageContainerBase_OnToastInactived final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ToastMessageContainerBase_OnToastInactived) == 0x000008, "Wrong alignment on UI_ToastMessageContainerBase_OnToastInactived");
static_assert(sizeof(UI_ToastMessageContainerBase_OnToastInactived) == 0x000008, "Wrong size on UI_ToastMessageContainerBase_OnToastInactived");
static_assert(offsetof(UI_ToastMessageContainerBase_OnToastInactived, _widget) == 0x000000, "Member 'UI_ToastMessageContainerBase_OnToastInactived::_widget' has a wrong offset!");

// Function Stigma.UI_HoverMenuBase.Init
// 0x0001 (0x0001 - 0x0000)
struct UI_HoverMenuBase_Init final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HoverMenuBase_Init) == 0x000001, "Wrong alignment on UI_HoverMenuBase_Init");
static_assert(sizeof(UI_HoverMenuBase_Init) == 0x000001, "Wrong size on UI_HoverMenuBase_Init");
static_assert(offsetof(UI_HoverMenuBase_Init, ReturnValue) == 0x000000, "Member 'UI_HoverMenuBase_Init::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HoverMenuBase.SetMenuText
// 0x0020 (0x0020 - 0x0000)
struct UI_HoverMenuBase_SetMenuText final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HoverMenuBase_SetMenuText) == 0x000008, "Wrong alignment on UI_HoverMenuBase_SetMenuText");
static_assert(sizeof(UI_HoverMenuBase_SetMenuText) == 0x000020, "Wrong size on UI_HoverMenuBase_SetMenuText");
static_assert(offsetof(UI_HoverMenuBase_SetMenuText, _id) == 0x000000, "Member 'UI_HoverMenuBase_SetMenuText::_id' has a wrong offset!");
static_assert(offsetof(UI_HoverMenuBase_SetMenuText, _text) == 0x000008, "Member 'UI_HoverMenuBase_SetMenuText::_text' has a wrong offset!");

// Function Stigma.UI_HoverMenuBase.SetMenuVisibility
// 0x000C (0x000C - 0x0000)
struct UI_HoverMenuBase_SetMenuVisibility final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B8[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HoverMenuBase_SetMenuVisibility) == 0x000004, "Wrong alignment on UI_HoverMenuBase_SetMenuVisibility");
static_assert(sizeof(UI_HoverMenuBase_SetMenuVisibility) == 0x00000C, "Wrong size on UI_HoverMenuBase_SetMenuVisibility");
static_assert(offsetof(UI_HoverMenuBase_SetMenuVisibility, _id) == 0x000000, "Member 'UI_HoverMenuBase_SetMenuVisibility::_id' has a wrong offset!");
static_assert(offsetof(UI_HoverMenuBase_SetMenuVisibility, _show) == 0x000008, "Member 'UI_HoverMenuBase_SetMenuVisibility::_show' has a wrong offset!");

// Function Stigma.UI_HoverMenuBase.Setup
// 0x0010 (0x0010 - 0x0000)
struct UI_HoverMenuBase_Setup final
{
public:
	TArray<struct FHoverMenuEntry>                _setting;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HoverMenuBase_Setup) == 0x000008, "Wrong alignment on UI_HoverMenuBase_Setup");
static_assert(sizeof(UI_HoverMenuBase_Setup) == 0x000010, "Wrong size on UI_HoverMenuBase_Setup");
static_assert(offsetof(UI_HoverMenuBase_Setup, _setting) == 0x000000, "Member 'UI_HoverMenuBase_Setup::_setting' has a wrong offset!");

// Function Stigma.UI_HoverMenuBase.SetupWithReferer
// 0x0018 (0x0018 - 0x0000)
struct UI_HoverMenuBase_SetupWithReferer final
{
public:
	TArray<struct FHoverMenuEntry>                _setting;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                _refer_obj;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HoverMenuBase_SetupWithReferer) == 0x000008, "Wrong alignment on UI_HoverMenuBase_SetupWithReferer");
static_assert(sizeof(UI_HoverMenuBase_SetupWithReferer) == 0x000018, "Wrong size on UI_HoverMenuBase_SetupWithReferer");
static_assert(offsetof(UI_HoverMenuBase_SetupWithReferer, _setting) == 0x000000, "Member 'UI_HoverMenuBase_SetupWithReferer::_setting' has a wrong offset!");
static_assert(offsetof(UI_HoverMenuBase_SetupWithReferer, _refer_obj) == 0x000010, "Member 'UI_HoverMenuBase_SetupWithReferer::_refer_obj' has a wrong offset!");

// Function Stigma.UI_HTMLHelpViewer.OpenHelp
// 0x0020 (0x0020 - 0x0000)
struct UI_HTMLHelpViewer_OpenHelp final
{
public:
	class FText                                   _url;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25B9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HTMLHelpViewer_OpenHelp) == 0x000008, "Wrong alignment on UI_HTMLHelpViewer_OpenHelp");
static_assert(sizeof(UI_HTMLHelpViewer_OpenHelp) == 0x000020, "Wrong size on UI_HTMLHelpViewer_OpenHelp");
static_assert(offsetof(UI_HTMLHelpViewer_OpenHelp, _url) == 0x000000, "Member 'UI_HTMLHelpViewer_OpenHelp::_url' has a wrong offset!");
static_assert(offsetof(UI_HTMLHelpViewer_OpenHelp, ReturnValue) == 0x000018, "Member 'UI_HTMLHelpViewer_OpenHelp::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.AddActionLog_Bounty
// 0x0020 (0x0020 - 0x0000)
struct UI_HUDBase_AddActionLog_Bounty final
{
public:
	struct FActionLog_Bounty                      _log;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C0[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_AddActionLog_Bounty) == 0x000008, "Wrong alignment on UI_HUDBase_AddActionLog_Bounty");
static_assert(sizeof(UI_HUDBase_AddActionLog_Bounty) == 0x000020, "Wrong size on UI_HUDBase_AddActionLog_Bounty");
static_assert(offsetof(UI_HUDBase_AddActionLog_Bounty, _log) == 0x000000, "Member 'UI_HUDBase_AddActionLog_Bounty::_log' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_AddActionLog_Bounty, ReturnValue) == 0x000018, "Member 'UI_HUDBase_AddActionLog_Bounty::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.AddChat
// 0x0058 (0x0058 - 0x0000)
struct UI_HUDBase_AddChat final
{
public:
	struct FChatMsg                               _chat_msg;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_AddChat) == 0x000008, "Wrong alignment on UI_HUDBase_AddChat");
static_assert(sizeof(UI_HUDBase_AddChat) == 0x000058, "Wrong size on UI_HUDBase_AddChat");
static_assert(offsetof(UI_HUDBase_AddChat, _chat_msg) == 0x000000, "Member 'UI_HUDBase_AddChat::_chat_msg' has a wrong offset!");

// Function Stigma.UI_HUDBase.AddFullScreenWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_AddFullScreenWidget final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_AddFullScreenWidget) == 0x000008, "Wrong alignment on UI_HUDBase_AddFullScreenWidget");
static_assert(sizeof(UI_HUDBase_AddFullScreenWidget) == 0x000008, "Wrong size on UI_HUDBase_AddFullScreenWidget");
static_assert(offsetof(UI_HUDBase_AddFullScreenWidget, _widget) == 0x000000, "Member 'UI_HUDBase_AddFullScreenWidget::_widget' has a wrong offset!");

// Function Stigma.UI_HUDBase.AddHitData
// 0x00B0 (0x00B0 - 0x0000)
struct UI_HUDBase_AddHitData final
{
public:
	struct FHitData                               _hit;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C1[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_AddHitData) == 0x000008, "Wrong alignment on UI_HUDBase_AddHitData");
static_assert(sizeof(UI_HUDBase_AddHitData) == 0x0000B0, "Wrong size on UI_HUDBase_AddHitData");
static_assert(offsetof(UI_HUDBase_AddHitData, _hit) == 0x000000, "Member 'UI_HUDBase_AddHitData::_hit' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_AddHitData, ReturnValue) == 0x0000A8, "Member 'UI_HUDBase_AddHitData::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.AddKillLog
// 0x0030 (0x0030 - 0x0000)
struct UI_HUDBase_AddKillLog final
{
public:
	struct FKillLog                               _log;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_AddKillLog) == 0x000008, "Wrong alignment on UI_HUDBase_AddKillLog");
static_assert(sizeof(UI_HUDBase_AddKillLog) == 0x000030, "Wrong size on UI_HUDBase_AddKillLog");
static_assert(offsetof(UI_HUDBase_AddKillLog, _log) == 0x000000, "Member 'UI_HUDBase_AddKillLog::_log' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_AddKillLog, ReturnValue) == 0x000028, "Member 'UI_HUDBase_AddKillLog::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.AddKillLog_Revive
// 0x0018 (0x0018 - 0x0000)
struct UI_HUDBase_AddKillLog_Revive final
{
public:
	struct FKillLog_ForRevive                     _log;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_AddKillLog_Revive) == 0x000008, "Wrong alignment on UI_HUDBase_AddKillLog_Revive");
static_assert(sizeof(UI_HUDBase_AddKillLog_Revive) == 0x000018, "Wrong size on UI_HUDBase_AddKillLog_Revive");
static_assert(offsetof(UI_HUDBase_AddKillLog_Revive, _log) == 0x000000, "Member 'UI_HUDBase_AddKillLog_Revive::_log' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_AddKillLog_Revive, ReturnValue) == 0x000010, "Member 'UI_HUDBase_AddKillLog_Revive::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.BindTargetChara
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_BindTargetChara final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_BindTargetChara) == 0x000008, "Wrong alignment on UI_HUDBase_BindTargetChara");
static_assert(sizeof(UI_HUDBase_BindTargetChara) == 0x000008, "Wrong size on UI_HUDBase_BindTargetChara");
static_assert(offsetof(UI_HUDBase_BindTargetChara, _chara) == 0x000000, "Member 'UI_HUDBase_BindTargetChara::_chara' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnBindTargetChara
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnBindTargetChara final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnBindTargetChara) == 0x000008, "Wrong alignment on UI_HUDBase_OnBindTargetChara");
static_assert(sizeof(UI_HUDBase_OnBindTargetChara) == 0x000010, "Wrong size on UI_HUDBase_OnBindTargetChara");
static_assert(offsetof(UI_HUDBase_OnBindTargetChara, _chara) == 0x000000, "Member 'UI_HUDBase_OnBindTargetChara::_chara' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnBindTargetChara, ReturnValue) == 0x000008, "Member 'UI_HUDBase_OnBindTargetChara::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnChangeActionSetting
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDBase_OnChangeActionSetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_OnChangeActionSetting) == 0x000001, "Wrong alignment on UI_HUDBase_OnChangeActionSetting");
static_assert(sizeof(UI_HUDBase_OnChangeActionSetting) == 0x000001, "Wrong size on UI_HUDBase_OnChangeActionSetting");
static_assert(offsetof(UI_HUDBase_OnChangeActionSetting, ReturnValue) == 0x000000, "Member 'UI_HUDBase_OnChangeActionSetting::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnChangeGun
// 0x0018 (0x0018 - 0x0000)
struct UI_HUDBase_OnChangeGun final
{
public:
	class AGunBase*                               _old_gun;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGunBase*                               _new_gun;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnChangeGun) == 0x000008, "Wrong alignment on UI_HUDBase_OnChangeGun");
static_assert(sizeof(UI_HUDBase_OnChangeGun) == 0x000018, "Wrong size on UI_HUDBase_OnChangeGun");
static_assert(offsetof(UI_HUDBase_OnChangeGun, _old_gun) == 0x000000, "Member 'UI_HUDBase_OnChangeGun::_old_gun' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnChangeGun, _new_gun) == 0x000008, "Member 'UI_HUDBase_OnChangeGun::_new_gun' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnChangeGun, ReturnValue) == 0x000010, "Member 'UI_HUDBase_OnChangeGun::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnChangeLinkedSkillKeyGuide
// 0x0058 (0x0058 - 0x0000)
struct UI_HUDBase_OnChangeLinkedSkillKeyGuide final
{
public:
	struct FLinkedSkillGuide                      _Key;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C6[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnChangeLinkedSkillKeyGuide) == 0x000008, "Wrong alignment on UI_HUDBase_OnChangeLinkedSkillKeyGuide");
static_assert(sizeof(UI_HUDBase_OnChangeLinkedSkillKeyGuide) == 0x000058, "Wrong size on UI_HUDBase_OnChangeLinkedSkillKeyGuide");
static_assert(offsetof(UI_HUDBase_OnChangeLinkedSkillKeyGuide, _Key) == 0x000000, "Member 'UI_HUDBase_OnChangeLinkedSkillKeyGuide::_Key' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnChangeLinkedSkillKeyGuide, ReturnValue) == 0x000050, "Member 'UI_HUDBase_OnChangeLinkedSkillKeyGuide::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnCreateFloatingHitMessageWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnCreateFloatingHitMessageWidget final
{
public:
	EAbnormal                                     _abnormal;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_OnCreateFloatingHitMessageWidget) == 0x000008, "Wrong alignment on UI_HUDBase_OnCreateFloatingHitMessageWidget");
static_assert(sizeof(UI_HUDBase_OnCreateFloatingHitMessageWidget) == 0x000010, "Wrong size on UI_HUDBase_OnCreateFloatingHitMessageWidget");
static_assert(offsetof(UI_HUDBase_OnCreateFloatingHitMessageWidget, _abnormal) == 0x000000, "Member 'UI_HUDBase_OnCreateFloatingHitMessageWidget::_abnormal' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnCreateFloatingHitMessageWidget, ReturnValue) == 0x000008, "Member 'UI_HUDBase_OnCreateFloatingHitMessageWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnDiscoverEnemy
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnDiscoverEnemy final
{
public:
	class ACharaBase*                             _enemy;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _discovered;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C8[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnDiscoverEnemy) == 0x000008, "Wrong alignment on UI_HUDBase_OnDiscoverEnemy");
static_assert(sizeof(UI_HUDBase_OnDiscoverEnemy) == 0x000010, "Wrong size on UI_HUDBase_OnDiscoverEnemy");
static_assert(offsetof(UI_HUDBase_OnDiscoverEnemy, _enemy) == 0x000000, "Member 'UI_HUDBase_OnDiscoverEnemy::_enemy' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnDiscoverEnemy, _discovered) == 0x000008, "Member 'UI_HUDBase_OnDiscoverEnemy::_discovered' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnDiscoverEnemy, ReturnValue) == 0x000009, "Member 'UI_HUDBase_OnDiscoverEnemy::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnGetIngameMoney
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_OnGetIngameMoney final
{
public:
	int32                                         _inc_money;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoldRewardType                               _reward_type;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C9[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnGetIngameMoney) == 0x000004, "Wrong alignment on UI_HUDBase_OnGetIngameMoney");
static_assert(sizeof(UI_HUDBase_OnGetIngameMoney) == 0x000008, "Wrong size on UI_HUDBase_OnGetIngameMoney");
static_assert(offsetof(UI_HUDBase_OnGetIngameMoney, _inc_money) == 0x000000, "Member 'UI_HUDBase_OnGetIngameMoney::_inc_money' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnGetIngameMoney, _reward_type) == 0x000004, "Member 'UI_HUDBase_OnGetIngameMoney::_reward_type' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnPointingActor
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnPointingActor final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnPointingActor) == 0x000008, "Wrong alignment on UI_HUDBase_OnPointingActor");
static_assert(sizeof(UI_HUDBase_OnPointingActor) == 0x000010, "Wrong size on UI_HUDBase_OnPointingActor");
static_assert(offsetof(UI_HUDBase_OnPointingActor, _Actor) == 0x000000, "Member 'UI_HUDBase_OnPointingActor::_Actor' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnPointingActor, ReturnValue) == 0x000008, "Member 'UI_HUDBase_OnPointingActor::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnReloadEnd
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnReloadEnd final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_cancel;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CB[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnReloadEnd) == 0x000008, "Wrong alignment on UI_HUDBase_OnReloadEnd");
static_assert(sizeof(UI_HUDBase_OnReloadEnd) == 0x000010, "Wrong size on UI_HUDBase_OnReloadEnd");
static_assert(offsetof(UI_HUDBase_OnReloadEnd, _gun) == 0x000000, "Member 'UI_HUDBase_OnReloadEnd::_gun' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnReloadEnd, _is_cancel) == 0x000008, "Member 'UI_HUDBase_OnReloadEnd::_is_cancel' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnReloadEnd, ReturnValue) == 0x000009, "Member 'UI_HUDBase_OnReloadEnd::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnReloadStart
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnReloadStart final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnReloadStart) == 0x000008, "Wrong alignment on UI_HUDBase_OnReloadStart");
static_assert(sizeof(UI_HUDBase_OnReloadStart) == 0x000010, "Wrong size on UI_HUDBase_OnReloadStart");
static_assert(offsetof(UI_HUDBase_OnReloadStart, _gun) == 0x000000, "Member 'UI_HUDBase_OnReloadStart::_gun' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnReloadStart, ReturnValue) == 0x000008, "Member 'UI_HUDBase_OnReloadStart::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnShowKillStreak
// 0x00F0 (0x00F0 - 0x0000)
struct UI_HUDBase_OnShowKillStreak final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKillStreakDefine                      _streak;                                           // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CE[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnShowKillStreak) == 0x000008, "Wrong alignment on UI_HUDBase_OnShowKillStreak");
static_assert(sizeof(UI_HUDBase_OnShowKillStreak) == 0x0000F0, "Wrong size on UI_HUDBase_OnShowKillStreak");
static_assert(offsetof(UI_HUDBase_OnShowKillStreak, _show) == 0x000000, "Member 'UI_HUDBase_OnShowKillStreak::_show' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnShowKillStreak, _streak) == 0x000008, "Member 'UI_HUDBase_OnShowKillStreak::_streak' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnShowKillStreak, ReturnValue) == 0x0000E8, "Member 'UI_HUDBase_OnShowKillStreak::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnTargetCharaIsKilled
// 0x0010 (0x0010 - 0x0000)
struct UI_HUDBase_OnTargetCharaIsKilled final
{
public:
	class ACharaBase*                             _killer;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25CF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnTargetCharaIsKilled) == 0x000008, "Wrong alignment on UI_HUDBase_OnTargetCharaIsKilled");
static_assert(sizeof(UI_HUDBase_OnTargetCharaIsKilled) == 0x000010, "Wrong size on UI_HUDBase_OnTargetCharaIsKilled");
static_assert(offsetof(UI_HUDBase_OnTargetCharaIsKilled, _killer) == 0x000000, "Member 'UI_HUDBase_OnTargetCharaIsKilled::_killer' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnTargetCharaIsKilled, ReturnValue) == 0x000008, "Member 'UI_HUDBase_OnTargetCharaIsKilled::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnTargetCharaIsRespawned
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDBase_OnTargetCharaIsRespawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_OnTargetCharaIsRespawned) == 0x000001, "Wrong alignment on UI_HUDBase_OnTargetCharaIsRespawned");
static_assert(sizeof(UI_HUDBase_OnTargetCharaIsRespawned) == 0x000001, "Wrong size on UI_HUDBase_OnTargetCharaIsRespawned");
static_assert(offsetof(UI_HUDBase_OnTargetCharaIsRespawned, ReturnValue) == 0x000000, "Member 'UI_HUDBase_OnTargetCharaIsRespawned::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnUpdateKillStreakAlpha
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_OnUpdateKillStreakAlpha final
{
public:
	float                                         _t;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_OnUpdateKillStreakAlpha) == 0x000004, "Wrong alignment on UI_HUDBase_OnUpdateKillStreakAlpha");
static_assert(sizeof(UI_HUDBase_OnUpdateKillStreakAlpha) == 0x000008, "Wrong size on UI_HUDBase_OnUpdateKillStreakAlpha");
static_assert(offsetof(UI_HUDBase_OnUpdateKillStreakAlpha, _t) == 0x000000, "Member 'UI_HUDBase_OnUpdateKillStreakAlpha::_t' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_OnUpdateKillStreakAlpha, ReturnValue) == 0x000004, "Member 'UI_HUDBase_OnUpdateKillStreakAlpha::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnUseAutoBooster
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDBase_OnUseAutoBooster final
{
public:
	bool                                          _is_used;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_OnUseAutoBooster) == 0x000001, "Wrong alignment on UI_HUDBase_OnUseAutoBooster");
static_assert(sizeof(UI_HUDBase_OnUseAutoBooster) == 0x000001, "Wrong size on UI_HUDBase_OnUseAutoBooster");
static_assert(offsetof(UI_HUDBase_OnUseAutoBooster, _is_used) == 0x000000, "Member 'UI_HUDBase_OnUseAutoBooster::_is_used' has a wrong offset!");

// Function Stigma.UI_HUDBase.RemoveFullScreenWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_RemoveFullScreenWidget final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_RemoveFullScreenWidget) == 0x000008, "Wrong alignment on UI_HUDBase_RemoveFullScreenWidget");
static_assert(sizeof(UI_HUDBase_RemoveFullScreenWidget) == 0x000008, "Wrong size on UI_HUDBase_RemoveFullScreenWidget");
static_assert(offsetof(UI_HUDBase_RemoveFullScreenWidget, _widget) == 0x000000, "Member 'UI_HUDBase_RemoveFullScreenWidget::_widget' has a wrong offset!");

// Function Stigma.UI_HUDBase.Reset
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDBase_Reset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_Reset) == 0x000001, "Wrong alignment on UI_HUDBase_Reset");
static_assert(sizeof(UI_HUDBase_Reset) == 0x000001, "Wrong size on UI_HUDBase_Reset");
static_assert(offsetof(UI_HUDBase_Reset, ReturnValue) == 0x000000, "Member 'UI_HUDBase_Reset::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.SelectRadioChatCategory
// 0x0004 (0x0004 - 0x0000)
struct UI_HUDBase_SelectRadioChatCategory final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_SelectRadioChatCategory) == 0x000004, "Wrong alignment on UI_HUDBase_SelectRadioChatCategory");
static_assert(sizeof(UI_HUDBase_SelectRadioChatCategory) == 0x000004, "Wrong size on UI_HUDBase_SelectRadioChatCategory");
static_assert(offsetof(UI_HUDBase_SelectRadioChatCategory, _idx) == 0x000000, "Member 'UI_HUDBase_SelectRadioChatCategory::_idx' has a wrong offset!");

// Function Stigma.UI_HUDBase.SelectRadioChatListItem
// 0x0004 (0x0004 - 0x0000)
struct UI_HUDBase_SelectRadioChatListItem final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_SelectRadioChatListItem) == 0x000004, "Wrong alignment on UI_HUDBase_SelectRadioChatListItem");
static_assert(sizeof(UI_HUDBase_SelectRadioChatListItem) == 0x000004, "Wrong size on UI_HUDBase_SelectRadioChatListItem");
static_assert(offsetof(UI_HUDBase_SelectRadioChatListItem, _idx) == 0x000000, "Member 'UI_HUDBase_SelectRadioChatListItem::_idx' has a wrong offset!");

// Function Stigma.UI_HUDBase.SetChatBox
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_SetChatBox final
{
public:
	class UUI_ChatBox*                            _chat_box;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_SetChatBox) == 0x000008, "Wrong alignment on UI_HUDBase_SetChatBox");
static_assert(sizeof(UI_HUDBase_SetChatBox) == 0x000008, "Wrong size on UI_HUDBase_SetChatBox");
static_assert(offsetof(UI_HUDBase_SetChatBox, _chat_box) == 0x000000, "Member 'UI_HUDBase_SetChatBox::_chat_box' has a wrong offset!");

// Function Stigma.UI_HUDBase.SetHUDMode
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_SetHUDMode final
{
public:
	class UUI_HUDMode*                            _hud_mode;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_SetHUDMode) == 0x000008, "Wrong alignment on UI_HUDBase_SetHUDMode");
static_assert(sizeof(UI_HUDBase_SetHUDMode) == 0x000008, "Wrong size on UI_HUDBase_SetHUDMode");
static_assert(offsetof(UI_HUDBase_SetHUDMode, _hud_mode) == 0x000000, "Member 'UI_HUDBase_SetHUDMode::_hud_mode' has a wrong offset!");

// Function Stigma.UI_HUDBase.SetInteractionProgressBar
// 0x000C (0x000C - 0x0000)
struct UI_HUDBase_SetInteractionProgressBar final
{
public:
	bool                                          _visibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _duration;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D2[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_HUDBase_SetInteractionProgressBar) == 0x000004, "Wrong alignment on UI_HUDBase_SetInteractionProgressBar");
static_assert(sizeof(UI_HUDBase_SetInteractionProgressBar) == 0x00000C, "Wrong size on UI_HUDBase_SetInteractionProgressBar");
static_assert(offsetof(UI_HUDBase_SetInteractionProgressBar, _visibility) == 0x000000, "Member 'UI_HUDBase_SetInteractionProgressBar::_visibility' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_SetInteractionProgressBar, _duration) == 0x000004, "Member 'UI_HUDBase_SetInteractionProgressBar::_duration' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_SetInteractionProgressBar, ReturnValue) == 0x000008, "Member 'UI_HUDBase_SetInteractionProgressBar::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.SetShowEnemyDamageMode
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDBase_SetShowEnemyDamageMode final
{
public:
	bool                                          _show_enemy_damage;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_SetShowEnemyDamageMode) == 0x000001, "Wrong alignment on UI_HUDBase_SetShowEnemyDamageMode");
static_assert(sizeof(UI_HUDBase_SetShowEnemyDamageMode) == 0x000001, "Wrong size on UI_HUDBase_SetShowEnemyDamageMode");
static_assert(offsetof(UI_HUDBase_SetShowEnemyDamageMode, _show_enemy_damage) == 0x000000, "Member 'UI_HUDBase_SetShowEnemyDamageMode::_show_enemy_damage' has a wrong offset!");

// Function Stigma.UI_HUDBase.ShowLoadingThrobber
// 0x0002 (0x0002 - 0x0000)
struct UI_HUDBase_ShowLoadingThrobber final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_ShowLoadingThrobber) == 0x000001, "Wrong alignment on UI_HUDBase_ShowLoadingThrobber");
static_assert(sizeof(UI_HUDBase_ShowLoadingThrobber) == 0x000002, "Wrong size on UI_HUDBase_ShowLoadingThrobber");
static_assert(offsetof(UI_HUDBase_ShowLoadingThrobber, _show) == 0x000000, "Member 'UI_HUDBase_ShowLoadingThrobber::_show' has a wrong offset!");
static_assert(offsetof(UI_HUDBase_ShowLoadingThrobber, ReturnValue) == 0x000001, "Member 'UI_HUDBase_ShowLoadingThrobber::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.TestShot
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_TestShot final
{
public:
	class AGunBase*                               _gun;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_TestShot) == 0x000008, "Wrong alignment on UI_HUDBase_TestShot");
static_assert(sizeof(UI_HUDBase_TestShot) == 0x000008, "Wrong size on UI_HUDBase_TestShot");
static_assert(offsetof(UI_HUDBase_TestShot, _gun) == 0x000000, "Member 'UI_HUDBase_TestShot::_gun' has a wrong offset!");

// Function Stigma.UI_HUDBase.GetHUDMode
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_GetHUDMode final
{
public:
	class UUI_HUDMode*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_GetHUDMode) == 0x000008, "Wrong alignment on UI_HUDBase_GetHUDMode");
static_assert(sizeof(UI_HUDBase_GetHUDMode) == 0x000008, "Wrong size on UI_HUDBase_GetHUDMode");
static_assert(offsetof(UI_HUDBase_GetHUDMode, ReturnValue) == 0x000000, "Member 'UI_HUDBase_GetHUDMode::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.GetTargetChara
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDBase_GetTargetChara final
{
public:
	class ACharaBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_GetTargetChara) == 0x000008, "Wrong alignment on UI_HUDBase_GetTargetChara");
static_assert(sizeof(UI_HUDBase_GetTargetChara) == 0x000008, "Wrong size on UI_HUDBase_GetTargetChara");
static_assert(offsetof(UI_HUDBase_GetTargetChara, ReturnValue) == 0x000000, "Member 'UI_HUDBase_GetTargetChara::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDBase.OnGetVisibility_ValidTargetCharacter
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDBase_OnGetVisibility_ValidTargetCharacter final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDBase_OnGetVisibility_ValidTargetCharacter) == 0x000001, "Wrong alignment on UI_HUDBase_OnGetVisibility_ValidTargetCharacter");
static_assert(sizeof(UI_HUDBase_OnGetVisibility_ValidTargetCharacter) == 0x000001, "Wrong size on UI_HUDBase_OnGetVisibility_ValidTargetCharacter");
static_assert(offsetof(UI_HUDBase_OnGetVisibility_ValidTargetCharacter, ReturnValue) == 0x000000, "Member 'UI_HUDBase_OnGetVisibility_ValidTargetCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TrainingRoomHUD.OnLemmingsGame_ChangeGameState
// 0x0028 (0x0028 - 0x0000)
struct UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState final
{
public:
	class ALemmingsGameZone*                      _game;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLemmingsGameState                     _state;                                            // 0x0008(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D3[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState) == 0x000008, "Wrong alignment on UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState");
static_assert(sizeof(UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState) == 0x000028, "Wrong size on UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState, _game) == 0x000000, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState::_game' has a wrong offset!");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState, _state) == 0x000008, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState::_state' has a wrong offset!");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState, ReturnValue) == 0x000024, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_ChangeGameState::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TrainingRoomHUD.OnLemmingsGame_KillNPC
// 0x0018 (0x0018 - 0x0000)
struct UI_TrainingRoomHUD_OnLemmingsGame_KillNPC final
{
public:
	class ALemmingsGameZone*                      _game;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANPC_Lemming*                           _lemming;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_killed_by_player;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D4[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_TrainingRoomHUD_OnLemmingsGame_KillNPC) == 0x000008, "Wrong alignment on UI_TrainingRoomHUD_OnLemmingsGame_KillNPC");
static_assert(sizeof(UI_TrainingRoomHUD_OnLemmingsGame_KillNPC) == 0x000018, "Wrong size on UI_TrainingRoomHUD_OnLemmingsGame_KillNPC");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_KillNPC, _game) == 0x000000, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_KillNPC::_game' has a wrong offset!");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_KillNPC, _lemming) == 0x000008, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_KillNPC::_lemming' has a wrong offset!");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_KillNPC, _is_killed_by_player) == 0x000010, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_KillNPC::_is_killed_by_player' has a wrong offset!");
static_assert(offsetof(UI_TrainingRoomHUD_OnLemmingsGame_KillNPC, ReturnValue) == 0x000011, "Member 'UI_TrainingRoomHUD_OnLemmingsGame_KillNPC::ReturnValue' has a wrong offset!");

// Function Stigma.UI_HUDMode_Bounty.DriveHacking
// 0x0008 (0x0008 - 0x0000)
struct UI_HUDMode_Bounty_DriveHacking final
{
public:
	class ACharaBase*                             _owning_chara;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_Bounty_DriveHacking) == 0x000008, "Wrong alignment on UI_HUDMode_Bounty_DriveHacking");
static_assert(sizeof(UI_HUDMode_Bounty_DriveHacking) == 0x000008, "Wrong size on UI_HUDMode_Bounty_DriveHacking");
static_assert(offsetof(UI_HUDMode_Bounty_DriveHacking, _owning_chara) == 0x000000, "Member 'UI_HUDMode_Bounty_DriveHacking::_owning_chara' has a wrong offset!");

// Function Stigma.UI_HUDMode_Bounty.HighlightWinningTeamScore
// 0x0002 (0x0002 - 0x0000)
struct UI_HUDMode_Bounty_HighlightWinningTeamScore final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _highlight;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_Bounty_HighlightWinningTeamScore) == 0x000001, "Wrong alignment on UI_HUDMode_Bounty_HighlightWinningTeamScore");
static_assert(sizeof(UI_HUDMode_Bounty_HighlightWinningTeamScore) == 0x000002, "Wrong size on UI_HUDMode_Bounty_HighlightWinningTeamScore");
static_assert(offsetof(UI_HUDMode_Bounty_HighlightWinningTeamScore, _Team) == 0x000000, "Member 'UI_HUDMode_Bounty_HighlightWinningTeamScore::_Team' has a wrong offset!");
static_assert(offsetof(UI_HUDMode_Bounty_HighlightWinningTeamScore, _highlight) == 0x000001, "Member 'UI_HUDMode_Bounty_HighlightWinningTeamScore::_highlight' has a wrong offset!");

// Function Stigma.UI_HUDMode_Bounty.OnHacking
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDMode_Bounty_OnHacking final
{
public:
	ETeams                                        _target_team;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_Bounty_OnHacking) == 0x000001, "Wrong alignment on UI_HUDMode_Bounty_OnHacking");
static_assert(sizeof(UI_HUDMode_Bounty_OnHacking) == 0x000001, "Wrong size on UI_HUDMode_Bounty_OnHacking");
static_assert(offsetof(UI_HUDMode_Bounty_OnHacking, _target_team) == 0x000000, "Member 'UI_HUDMode_Bounty_OnHacking::_target_team' has a wrong offset!");

// Function Stigma.UI_HUDMode_Bounty.SetGettering
// 0x0004 (0x0004 - 0x0000)
struct UI_HUDMode_Bounty_SetGettering final
{
public:
	int32                                         _Amount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_Bounty_SetGettering) == 0x000004, "Wrong alignment on UI_HUDMode_Bounty_SetGettering");
static_assert(sizeof(UI_HUDMode_Bounty_SetGettering) == 0x000004, "Wrong size on UI_HUDMode_Bounty_SetGettering");
static_assert(offsetof(UI_HUDMode_Bounty_SetGettering, _Amount) == 0x000000, "Member 'UI_HUDMode_Bounty_SetGettering::_Amount' has a wrong offset!");

// Function Stigma.UI_HUDMode_Bounty.WarningBeHacking
// 0x0001 (0x0001 - 0x0000)
struct UI_HUDMode_Bounty_WarningBeHacking final
{
public:
	bool                                          _be_hacking;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_HUDMode_Bounty_WarningBeHacking) == 0x000001, "Wrong alignment on UI_HUDMode_Bounty_WarningBeHacking");
static_assert(sizeof(UI_HUDMode_Bounty_WarningBeHacking) == 0x000001, "Wrong size on UI_HUDMode_Bounty_WarningBeHacking");
static_assert(offsetof(UI_HUDMode_Bounty_WarningBeHacking, _be_hacking) == 0x000000, "Member 'UI_HUDMode_Bounty_WarningBeHacking::_be_hacking' has a wrong offset!");

// Function Stigma.UI_Record_KillStreakListItem.OnSetKillStreakIcon
// 0x0001 (0x0001 - 0x0000)
struct UI_Record_KillStreakListItem_OnSetKillStreakIcon final
{
public:
	EKillStreak                                   _kill_streak;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Record_KillStreakListItem_OnSetKillStreakIcon) == 0x000001, "Wrong alignment on UI_Record_KillStreakListItem_OnSetKillStreakIcon");
static_assert(sizeof(UI_Record_KillStreakListItem_OnSetKillStreakIcon) == 0x000001, "Wrong size on UI_Record_KillStreakListItem_OnSetKillStreakIcon");
static_assert(offsetof(UI_Record_KillStreakListItem_OnSetKillStreakIcon, _kill_streak) == 0x000000, "Member 'UI_Record_KillStreakListItem_OnSetKillStreakIcon::_kill_streak' has a wrong offset!");

// Function Stigma.UI_Record_KillStreakListItem.GetSkillStreakItem
// 0x0008 (0x0008 - 0x0000)
struct UI_Record_KillStreakListItem_GetSkillStreakItem final
{
public:
	class URecord_KillStreak_ListItemData*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Record_KillStreakListItem_GetSkillStreakItem) == 0x000008, "Wrong alignment on UI_Record_KillStreakListItem_GetSkillStreakItem");
static_assert(sizeof(UI_Record_KillStreakListItem_GetSkillStreakItem) == 0x000008, "Wrong size on UI_Record_KillStreakListItem_GetSkillStreakItem");
static_assert(offsetof(UI_Record_KillStreakListItem_GetSkillStreakItem, ReturnValue) == 0x000000, "Member 'UI_Record_KillStreakListItem_GetSkillStreakItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecruitBuyButton.OnClickButton
// 0x0010 (0x0010 - 0x0000)
struct UI_RecruitBuyButton_OnClickButton final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_RecruitBuyButton_OnClickButton) == 0x000008, "Wrong alignment on UI_RecruitBuyButton_OnClickButton");
static_assert(sizeof(UI_RecruitBuyButton_OnClickButton) == 0x000010, "Wrong size on UI_RecruitBuyButton_OnClickButton");
static_assert(offsetof(UI_RecruitBuyButton_OnClickButton, _widget) == 0x000000, "Member 'UI_RecruitBuyButton_OnClickButton::_widget' has a wrong offset!");
static_assert(offsetof(UI_RecruitBuyButton_OnClickButton, _select) == 0x000008, "Member 'UI_RecruitBuyButton_OnClickButton::_select' has a wrong offset!");

// Function Stigma.UI_Interaction.HideInteractionUI
// 0x0001 (0x0001 - 0x0000)
struct UI_Interaction_HideInteractionUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Interaction_HideInteractionUI) == 0x000001, "Wrong alignment on UI_Interaction_HideInteractionUI");
static_assert(sizeof(UI_Interaction_HideInteractionUI) == 0x000001, "Wrong size on UI_Interaction_HideInteractionUI");
static_assert(offsetof(UI_Interaction_HideInteractionUI, ReturnValue) == 0x000000, "Member 'UI_Interaction_HideInteractionUI::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Interaction.HideProgress
// 0x0001 (0x0001 - 0x0000)
struct UI_Interaction_HideProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Interaction_HideProgress) == 0x000001, "Wrong alignment on UI_Interaction_HideProgress");
static_assert(sizeof(UI_Interaction_HideProgress) == 0x000001, "Wrong size on UI_Interaction_HideProgress");
static_assert(offsetof(UI_Interaction_HideProgress, ReturnValue) == 0x000000, "Member 'UI_Interaction_HideProgress::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Interaction.ShowInteractionUI
// 0x0068 (0x0068 - 0x0000)
struct UI_Interaction_ShowInteractionUI final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionData                       _data;                                             // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E1[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_Interaction_ShowInteractionUI) == 0x000008, "Wrong alignment on UI_Interaction_ShowInteractionUI");
static_assert(sizeof(UI_Interaction_ShowInteractionUI) == 0x000068, "Wrong size on UI_Interaction_ShowInteractionUI");
static_assert(offsetof(UI_Interaction_ShowInteractionUI, _target) == 0x000000, "Member 'UI_Interaction_ShowInteractionUI::_target' has a wrong offset!");
static_assert(offsetof(UI_Interaction_ShowInteractionUI, _data) == 0x000008, "Member 'UI_Interaction_ShowInteractionUI::_data' has a wrong offset!");
static_assert(offsetof(UI_Interaction_ShowInteractionUI, ReturnValue) == 0x000060, "Member 'UI_Interaction_ShowInteractionUI::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Interaction.ShowProgress
// 0x0018 (0x0018 - 0x0000)
struct UI_Interaction_ShowProgress final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _param;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Delay;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E2[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_Interaction_ShowProgress) == 0x000008, "Wrong alignment on UI_Interaction_ShowProgress");
static_assert(sizeof(UI_Interaction_ShowProgress) == 0x000018, "Wrong size on UI_Interaction_ShowProgress");
static_assert(offsetof(UI_Interaction_ShowProgress, _target) == 0x000000, "Member 'UI_Interaction_ShowProgress::_target' has a wrong offset!");
static_assert(offsetof(UI_Interaction_ShowProgress, _param) == 0x000008, "Member 'UI_Interaction_ShowProgress::_param' has a wrong offset!");
static_assert(offsetof(UI_Interaction_ShowProgress, _Delay) == 0x00000C, "Member 'UI_Interaction_ShowProgress::_Delay' has a wrong offset!");
static_assert(offsetof(UI_Interaction_ShowProgress, ReturnValue) == 0x000010, "Member 'UI_Interaction_ShowProgress::ReturnValue' has a wrong offset!");

// Function Stigma.UI_InvenSlotToolTipBase.Init
// 0x0010 (0x0010 - 0x0000)
struct UI_InvenSlotToolTipBase_Init final
{
public:
	const class UUI_InventoryItemSlotBase*        _slot;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_InvenSlotToolTipBase_Init) == 0x000008, "Wrong alignment on UI_InvenSlotToolTipBase_Init");
static_assert(sizeof(UI_InvenSlotToolTipBase_Init) == 0x000010, "Wrong size on UI_InvenSlotToolTipBase_Init");
static_assert(offsetof(UI_InvenSlotToolTipBase_Init, _slot) == 0x000000, "Member 'UI_InvenSlotToolTipBase_Init::_slot' has a wrong offset!");
static_assert(offsetof(UI_InvenSlotToolTipBase_Init, ReturnValue) == 0x000008, "Member 'UI_InvenSlotToolTipBase_Init::ReturnValue' has a wrong offset!");

// Function Stigma.UI_InventoryItemSlotBase.SetActiveNoticeDot
// 0x0001 (0x0001 - 0x0000)
struct UI_InventoryItemSlotBase_SetActiveNoticeDot final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_InventoryItemSlotBase_SetActiveNoticeDot) == 0x000001, "Wrong alignment on UI_InventoryItemSlotBase_SetActiveNoticeDot");
static_assert(sizeof(UI_InventoryItemSlotBase_SetActiveNoticeDot) == 0x000001, "Wrong size on UI_InventoryItemSlotBase_SetActiveNoticeDot");
static_assert(offsetof(UI_InventoryItemSlotBase_SetActiveNoticeDot, _flag) == 0x000000, "Member 'UI_InventoryItemSlotBase_SetActiveNoticeDot::_flag' has a wrong offset!");

// Function Stigma.UI_InviteBattleNotifySlot.OnClickYesNo
// 0x0010 (0x0010 - 0x0000)
struct UI_InviteBattleNotifySlot_OnClickYesNo final
{
public:
	const class UPopupBase*                       _popup;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ctrl_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_InviteBattleNotifySlot_OnClickYesNo) == 0x000008, "Wrong alignment on UI_InviteBattleNotifySlot_OnClickYesNo");
static_assert(sizeof(UI_InviteBattleNotifySlot_OnClickYesNo) == 0x000010, "Wrong size on UI_InviteBattleNotifySlot_OnClickYesNo");
static_assert(offsetof(UI_InviteBattleNotifySlot_OnClickYesNo, _popup) == 0x000000, "Member 'UI_InviteBattleNotifySlot_OnClickYesNo::_popup' has a wrong offset!");
static_assert(offsetof(UI_InviteBattleNotifySlot_OnClickYesNo, _ctrl_id) == 0x000008, "Member 'UI_InviteBattleNotifySlot_OnClickYesNo::_ctrl_id' has a wrong offset!");

// Function Stigma.UI_InviteBattleNotifySlot.SetText
// 0x0018 (0x0018 - 0x0000)
struct UI_InviteBattleNotifySlot_SetText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_InviteBattleNotifySlot_SetText) == 0x000008, "Wrong alignment on UI_InviteBattleNotifySlot_SetText");
static_assert(sizeof(UI_InviteBattleNotifySlot_SetText) == 0x000018, "Wrong size on UI_InviteBattleNotifySlot_SetText");
static_assert(offsetof(UI_InviteBattleNotifySlot_SetText, _text) == 0x000000, "Member 'UI_InviteBattleNotifySlot_SetText::_text' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.BindItem
// 0x0008 (0x0008 - 0x0000)
struct UI_ItemIDListViewItem_BindItem final
{
public:
	class UInvenItem*                             _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_BindItem) == 0x000008, "Wrong alignment on UI_ItemIDListViewItem_BindItem");
static_assert(sizeof(UI_ItemIDListViewItem_BindItem) == 0x000008, "Wrong size on UI_ItemIDListViewItem_BindItem");
static_assert(offsetof(UI_ItemIDListViewItem_BindItem, _item) == 0x000000, "Member 'UI_ItemIDListViewItem_BindItem::_item' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.OnClickBtn
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDListViewItem_OnClickBtn final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ItemIDListViewItem_OnClickBtn) == 0x000008, "Wrong alignment on UI_ItemIDListViewItem_OnClickBtn");
static_assert(sizeof(UI_ItemIDListViewItem_OnClickBtn) == 0x000010, "Wrong size on UI_ItemIDListViewItem_OnClickBtn");
static_assert(offsetof(UI_ItemIDListViewItem_OnClickBtn, _widget) == 0x000000, "Member 'UI_ItemIDListViewItem_OnClickBtn::_widget' has a wrong offset!");
static_assert(offsetof(UI_ItemIDListViewItem_OnClickBtn, _selected) == 0x000008, "Member 'UI_ItemIDListViewItem_OnClickBtn::_selected' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetEquippedDelegate
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDListViewItem_SetEquippedDelegate final
{
public:
	TDelegate<void(struct FItemID& _item_id)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetEquippedDelegate) == 0x000004, "Wrong alignment on UI_ItemIDListViewItem_SetEquippedDelegate");
static_assert(sizeof(UI_ItemIDListViewItem_SetEquippedDelegate) == 0x000010, "Wrong size on UI_ItemIDListViewItem_SetEquippedDelegate");
static_assert(offsetof(UI_ItemIDListViewItem_SetEquippedDelegate, _event) == 0x000000, "Member 'UI_ItemIDListViewItem_SetEquippedDelegate::_event' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetOccupiedDelegate
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDListViewItem_SetOccupiedDelegate final
{
public:
	TDelegate<void(struct FItemID& _item_id)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetOccupiedDelegate) == 0x000004, "Wrong alignment on UI_ItemIDListViewItem_SetOccupiedDelegate");
static_assert(sizeof(UI_ItemIDListViewItem_SetOccupiedDelegate) == 0x000010, "Wrong size on UI_ItemIDListViewItem_SetOccupiedDelegate");
static_assert(offsetof(UI_ItemIDListViewItem_SetOccupiedDelegate, _event) == 0x000000, "Member 'UI_ItemIDListViewItem_SetOccupiedDelegate::_event' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetPanelSize
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDListViewItem_SetPanelSize final
{
public:
	struct FVector2D                              _size;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetPanelSize) == 0x000008, "Wrong alignment on UI_ItemIDListViewItem_SetPanelSize");
static_assert(sizeof(UI_ItemIDListViewItem_SetPanelSize) == 0x000010, "Wrong size on UI_ItemIDListViewItem_SetPanelSize");
static_assert(offsetof(UI_ItemIDListViewItem_SetPanelSize, _size) == 0x000000, "Member 'UI_ItemIDListViewItem_SetPanelSize::_size' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetSelection
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_SetSelection final
{
public:
	bool                                          _is_selected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetSelection) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_SetSelection");
static_assert(sizeof(UI_ItemIDListViewItem_SetSelection) == 0x000001, "Wrong size on UI_ItemIDListViewItem_SetSelection");
static_assert(offsetof(UI_ItemIDListViewItem_SetSelection, _is_selected) == 0x000000, "Member 'UI_ItemIDListViewItem_SetSelection::_is_selected' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetShouldUpdateExpireTime
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_SetShouldUpdateExpireTime final
{
public:
	bool                                          _value;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetShouldUpdateExpireTime) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_SetShouldUpdateExpireTime");
static_assert(sizeof(UI_ItemIDListViewItem_SetShouldUpdateExpireTime) == 0x000001, "Wrong size on UI_ItemIDListViewItem_SetShouldUpdateExpireTime");
static_assert(offsetof(UI_ItemIDListViewItem_SetShouldUpdateExpireTime, _value) == 0x000000, "Member 'UI_ItemIDListViewItem_SetShouldUpdateExpireTime::_value' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetShowRedDot
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_SetShowRedDot final
{
public:
	bool                                          _is_show;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetShowRedDot) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_SetShowRedDot");
static_assert(sizeof(UI_ItemIDListViewItem_SetShowRedDot) == 0x000001, "Wrong size on UI_ItemIDListViewItem_SetShowRedDot");
static_assert(offsetof(UI_ItemIDListViewItem_SetShowRedDot, _is_show) == 0x000000, "Member 'UI_ItemIDListViewItem_SetShowRedDot::_is_show' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetShowTooltip
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_SetShowTooltip final
{
public:
	bool                                          _is_show;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetShowTooltip) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_SetShowTooltip");
static_assert(sizeof(UI_ItemIDListViewItem_SetShowTooltip) == 0x000001, "Wrong size on UI_ItemIDListViewItem_SetShowTooltip");
static_assert(offsetof(UI_ItemIDListViewItem_SetShowTooltip, _is_show) == 0x000000, "Member 'UI_ItemIDListViewItem_SetShowTooltip::_is_show' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetShowTooltipKeyUI
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_SetShowTooltipKeyUI final
{
public:
	bool                                          _is_show;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetShowTooltipKeyUI) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_SetShowTooltipKeyUI");
static_assert(sizeof(UI_ItemIDListViewItem_SetShowTooltipKeyUI) == 0x000001, "Wrong size on UI_ItemIDListViewItem_SetShowTooltipKeyUI");
static_assert(offsetof(UI_ItemIDListViewItem_SetShowTooltipKeyUI, _is_show) == 0x000000, "Member 'UI_ItemIDListViewItem_SetShowTooltipKeyUI::_is_show' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.SetTags
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDListViewItem_SetTags final
{
public:
	TArray<EItemUITag>                            _tags;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_SetTags) == 0x000008, "Wrong alignment on UI_ItemIDListViewItem_SetTags");
static_assert(sizeof(UI_ItemIDListViewItem_SetTags) == 0x000010, "Wrong size on UI_ItemIDListViewItem_SetTags");
static_assert(offsetof(UI_ItemIDListViewItem_SetTags, _tags) == 0x000000, "Member 'UI_ItemIDListViewItem_SetTags::_tags' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.GetHoverImageVisibility
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_GetHoverImageVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_GetHoverImageVisibility) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_GetHoverImageVisibility");
static_assert(sizeof(UI_ItemIDListViewItem_GetHoverImageVisibility) == 0x000001, "Wrong size on UI_ItemIDListViewItem_GetHoverImageVisibility");
static_assert(offsetof(UI_ItemIDListViewItem_GetHoverImageVisibility, ReturnValue) == 0x000000, "Member 'UI_ItemIDListViewItem_GetHoverImageVisibility::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.IsEquippedItem
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_IsEquippedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_IsEquippedItem) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_IsEquippedItem");
static_assert(sizeof(UI_ItemIDListViewItem_IsEquippedItem) == 0x000001, "Wrong size on UI_ItemIDListViewItem_IsEquippedItem");
static_assert(offsetof(UI_ItemIDListViewItem_IsEquippedItem, ReturnValue) == 0x000000, "Member 'UI_ItemIDListViewItem_IsEquippedItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.IsOccupiedItem
// 0x0020 (0x0020 - 0x0000)
struct UI_ItemIDListViewItem_IsOccupiedItem final
{
public:
	struct FIsOccupiedResult                      ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_IsOccupiedItem) == 0x000008, "Wrong alignment on UI_ItemIDListViewItem_IsOccupiedItem");
static_assert(sizeof(UI_ItemIDListViewItem_IsOccupiedItem) == 0x000020, "Wrong size on UI_ItemIDListViewItem_IsOccupiedItem");
static_assert(offsetof(UI_ItemIDListViewItem_IsOccupiedItem, ReturnValue) == 0x000000, "Member 'UI_ItemIDListViewItem_IsOccupiedItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ItemIDListViewItem.IsOwnedItem
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDListViewItem_IsOwnedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDListViewItem_IsOwnedItem) == 0x000001, "Wrong alignment on UI_ItemIDListViewItem_IsOwnedItem");
static_assert(sizeof(UI_ItemIDListViewItem_IsOwnedItem) == 0x000001, "Wrong size on UI_ItemIDListViewItem_IsOwnedItem");
static_assert(offsetof(UI_ItemIDListViewItem_IsOwnedItem, ReturnValue) == 0x000000, "Member 'UI_ItemIDListViewItem_IsOwnedItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.InitializeTileViewEntry
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDTileView_InitializeTileViewEntry final
{
public:
	class UUserWidget*                            _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _item;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_InitializeTileViewEntry) == 0x000008, "Wrong alignment on UI_ItemIDTileView_InitializeTileViewEntry");
static_assert(sizeof(UI_ItemIDTileView_InitializeTileViewEntry) == 0x000010, "Wrong size on UI_ItemIDTileView_InitializeTileViewEntry");
static_assert(offsetof(UI_ItemIDTileView_InitializeTileViewEntry, _widget) == 0x000000, "Member 'UI_ItemIDTileView_InitializeTileViewEntry::_widget' has a wrong offset!");
static_assert(offsetof(UI_ItemIDTileView_InitializeTileViewEntry, _item) == 0x000008, "Member 'UI_ItemIDTileView_InitializeTileViewEntry::_item' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SelectWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDTileView_SelectWidget final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SelectWidget) == 0x000008, "Wrong alignment on UI_ItemIDTileView_SelectWidget");
static_assert(sizeof(UI_ItemIDTileView_SelectWidget) == 0x000010, "Wrong size on UI_ItemIDTileView_SelectWidget");
static_assert(offsetof(UI_ItemIDTileView_SelectWidget, _id) == 0x000000, "Member 'UI_ItemIDTileView_SelectWidget::_id' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetCustomFilter
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDTileView_SetCustomFilter final
{
public:
	TDelegate<void(struct FItemID& _item_id)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetCustomFilter) == 0x000004, "Wrong alignment on UI_ItemIDTileView_SetCustomFilter");
static_assert(sizeof(UI_ItemIDTileView_SetCustomFilter) == 0x000010, "Wrong size on UI_ItemIDTileView_SetCustomFilter");
static_assert(offsetof(UI_ItemIDTileView_SetCustomFilter, _event) == 0x000000, "Member 'UI_ItemIDTileView_SetCustomFilter::_event' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetEquippedEvent
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDTileView_SetEquippedEvent final
{
public:
	TDelegate<void(struct FItemID& _item_id)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetEquippedEvent) == 0x000004, "Wrong alignment on UI_ItemIDTileView_SetEquippedEvent");
static_assert(sizeof(UI_ItemIDTileView_SetEquippedEvent) == 0x000010, "Wrong size on UI_ItemIDTileView_SetEquippedEvent");
static_assert(offsetof(UI_ItemIDTileView_SetEquippedEvent, _event) == 0x000000, "Member 'UI_ItemIDTileView_SetEquippedEvent::_event' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetFilter
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDTileView_SetFilter final
{
public:
	EItemEquipFilter                              _equip_filter;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetFilter) == 0x000001, "Wrong alignment on UI_ItemIDTileView_SetFilter");
static_assert(sizeof(UI_ItemIDTileView_SetFilter) == 0x000001, "Wrong size on UI_ItemIDTileView_SetFilter");
static_assert(offsetof(UI_ItemIDTileView_SetFilter, _equip_filter) == 0x000000, "Member 'UI_ItemIDTileView_SetFilter::_equip_filter' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetHasNullItem
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDTileView_SetHasNullItem final
{
public:
	bool                                          _has_item;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetHasNullItem) == 0x000001, "Wrong alignment on UI_ItemIDTileView_SetHasNullItem");
static_assert(sizeof(UI_ItemIDTileView_SetHasNullItem) == 0x000001, "Wrong size on UI_ItemIDTileView_SetHasNullItem");
static_assert(offsetof(UI_ItemIDTileView_SetHasNullItem, _has_item) == 0x000000, "Member 'UI_ItemIDTileView_SetHasNullItem::_has_item' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetItemCategory
// 0x000C (0x000C - 0x0000)
struct UI_ItemIDTileView_SetItemCategory final
{
public:
	EItemCategory                                 _category;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _sub_category;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_adding;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _rebuild_list;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _has_null_item;                                    // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25ED[0x1];                                     // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ItemIDTileView_SetItemCategory) == 0x000004, "Wrong alignment on UI_ItemIDTileView_SetItemCategory");
static_assert(sizeof(UI_ItemIDTileView_SetItemCategory) == 0x00000C, "Wrong size on UI_ItemIDTileView_SetItemCategory");
static_assert(offsetof(UI_ItemIDTileView_SetItemCategory, _category) == 0x000000, "Member 'UI_ItemIDTileView_SetItemCategory::_category' has a wrong offset!");
static_assert(offsetof(UI_ItemIDTileView_SetItemCategory, _sub_category) == 0x000004, "Member 'UI_ItemIDTileView_SetItemCategory::_sub_category' has a wrong offset!");
static_assert(offsetof(UI_ItemIDTileView_SetItemCategory, _is_adding) == 0x000008, "Member 'UI_ItemIDTileView_SetItemCategory::_is_adding' has a wrong offset!");
static_assert(offsetof(UI_ItemIDTileView_SetItemCategory, _rebuild_list) == 0x000009, "Member 'UI_ItemIDTileView_SetItemCategory::_rebuild_list' has a wrong offset!");
static_assert(offsetof(UI_ItemIDTileView_SetItemCategory, _has_null_item) == 0x00000A, "Member 'UI_ItemIDTileView_SetItemCategory::_has_null_item' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetOccupiedEvent
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDTileView_SetOccupiedEvent final
{
public:
	TDelegate<void(struct FItemID& _item_id)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetOccupiedEvent) == 0x000004, "Wrong alignment on UI_ItemIDTileView_SetOccupiedEvent");
static_assert(sizeof(UI_ItemIDTileView_SetOccupiedEvent) == 0x000010, "Wrong size on UI_ItemIDTileView_SetOccupiedEvent");
static_assert(offsetof(UI_ItemIDTileView_SetOccupiedEvent, _event) == 0x000000, "Member 'UI_ItemIDTileView_SetOccupiedEvent::_event' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetOwnedEvent
// 0x0010 (0x0010 - 0x0000)
struct UI_ItemIDTileView_SetOwnedEvent final
{
public:
	TDelegate<void(struct FItemID& _item_id)>     _event;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetOwnedEvent) == 0x000004, "Wrong alignment on UI_ItemIDTileView_SetOwnedEvent");
static_assert(sizeof(UI_ItemIDTileView_SetOwnedEvent) == 0x000010, "Wrong size on UI_ItemIDTileView_SetOwnedEvent");
static_assert(offsetof(UI_ItemIDTileView_SetOwnedEvent, _event) == 0x000000, "Member 'UI_ItemIDTileView_SetOwnedEvent::_event' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SetVisibleItemCategoryImage
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDTileView_SetVisibleItemCategoryImage final
{
public:
	ESlateVisibility                              _visibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SetVisibleItemCategoryImage) == 0x000001, "Wrong alignment on UI_ItemIDTileView_SetVisibleItemCategoryImage");
static_assert(sizeof(UI_ItemIDTileView_SetVisibleItemCategoryImage) == 0x000001, "Wrong size on UI_ItemIDTileView_SetVisibleItemCategoryImage");
static_assert(offsetof(UI_ItemIDTileView_SetVisibleItemCategoryImage, _visibility) == 0x000000, "Member 'UI_ItemIDTileView_SetVisibleItemCategoryImage::_visibility' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SortExpiredDate
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDTileView_SortExpiredDate final
{
public:
	bool                                          _is_descending_order;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SortExpiredDate) == 0x000001, "Wrong alignment on UI_ItemIDTileView_SortExpiredDate");
static_assert(sizeof(UI_ItemIDTileView_SortExpiredDate) == 0x000001, "Wrong size on UI_ItemIDTileView_SortExpiredDate");
static_assert(offsetof(UI_ItemIDTileView_SortExpiredDate, _is_descending_order) == 0x000000, "Member 'UI_ItemIDTileView_SortExpiredDate::_is_descending_order' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SortGrade
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDTileView_SortGrade final
{
public:
	bool                                          _is_descending_order;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SortGrade) == 0x000001, "Wrong alignment on UI_ItemIDTileView_SortGrade");
static_assert(sizeof(UI_ItemIDTileView_SortGrade) == 0x000001, "Wrong size on UI_ItemIDTileView_SortGrade");
static_assert(offsetof(UI_ItemIDTileView_SortGrade, _is_descending_order) == 0x000000, "Member 'UI_ItemIDTileView_SortGrade::_is_descending_order' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.SortLaunchingDate
// 0x0001 (0x0001 - 0x0000)
struct UI_ItemIDTileView_SortLaunchingDate final
{
public:
	bool                                          _is_descending_order;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ItemIDTileView_SortLaunchingDate) == 0x000001, "Wrong alignment on UI_ItemIDTileView_SortLaunchingDate");
static_assert(sizeof(UI_ItemIDTileView_SortLaunchingDate) == 0x000001, "Wrong size on UI_ItemIDTileView_SortLaunchingDate");
static_assert(offsetof(UI_ItemIDTileView_SortLaunchingDate, _is_descending_order) == 0x000000, "Member 'UI_ItemIDTileView_SortLaunchingDate::_is_descending_order' has a wrong offset!");

// Function Stigma.UI_ItemIDTileView.IsFilteredItem
// 0x0018 (0x0018 - 0x0000)
struct UI_ItemIDTileView_IsFilteredItem final
{
public:
	struct FItemID                                _id;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25EE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ItemIDTileView_IsFilteredItem) == 0x000008, "Wrong alignment on UI_ItemIDTileView_IsFilteredItem");
static_assert(sizeof(UI_ItemIDTileView_IsFilteredItem) == 0x000018, "Wrong size on UI_ItemIDTileView_IsFilteredItem");
static_assert(offsetof(UI_ItemIDTileView_IsFilteredItem, _id) == 0x000000, "Member 'UI_ItemIDTileView_IsFilteredItem::_id' has a wrong offset!");
static_assert(offsetof(UI_ItemIDTileView_IsFilteredItem, ReturnValue) == 0x000010, "Member 'UI_ItemIDTileView_IsFilteredItem::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LackControlPower.CheckAndBindTarget
// 0x0018 (0x0018 - 0x0000)
struct UI_LackControlPower_CheckAndBindTarget final
{
public:
	int32                                         _target_cp;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UGunObject*                             _gun_object;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_LackControlPower_CheckAndBindTarget) == 0x000008, "Wrong alignment on UI_LackControlPower_CheckAndBindTarget");
static_assert(sizeof(UI_LackControlPower_CheckAndBindTarget) == 0x000018, "Wrong size on UI_LackControlPower_CheckAndBindTarget");
static_assert(offsetof(UI_LackControlPower_CheckAndBindTarget, _target_cp) == 0x000000, "Member 'UI_LackControlPower_CheckAndBindTarget::_target_cp' has a wrong offset!");
static_assert(offsetof(UI_LackControlPower_CheckAndBindTarget, _gun_object) == 0x000008, "Member 'UI_LackControlPower_CheckAndBindTarget::_gun_object' has a wrong offset!");
static_assert(offsetof(UI_LackControlPower_CheckAndBindTarget, ReturnValue) == 0x000010, "Member 'UI_LackControlPower_CheckAndBindTarget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_LackControlPower.IsLackControlPower
// 0x0001 (0x0001 - 0x0000)
struct UI_LackControlPower_IsLackControlPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_LackControlPower_IsLackControlPower) == 0x000001, "Wrong alignment on UI_LackControlPower_IsLackControlPower");
static_assert(sizeof(UI_LackControlPower_IsLackControlPower) == 0x000001, "Wrong size on UI_LackControlPower_IsLackControlPower");
static_assert(offsetof(UI_LackControlPower_IsLackControlPower, ReturnValue) == 0x000000, "Member 'UI_LackControlPower_IsLackControlPower::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GetCurrentLobbyPage
// 0x0010 (0x0010 - 0x0000)
struct UI_Lobby_GetCurrentLobbyPage final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUI_LobbyPage*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetCurrentLobbyPage) == 0x000008, "Wrong alignment on UI_Lobby_GetCurrentLobbyPage");
static_assert(sizeof(UI_Lobby_GetCurrentLobbyPage) == 0x000010, "Wrong size on UI_Lobby_GetCurrentLobbyPage");
static_assert(offsetof(UI_Lobby_GetCurrentLobbyPage, _world_ctx) == 0x000000, "Member 'UI_Lobby_GetCurrentLobbyPage::_world_ctx' has a wrong offset!");
static_assert(offsetof(UI_Lobby_GetCurrentLobbyPage, ReturnValue) == 0x000008, "Member 'UI_Lobby_GetCurrentLobbyPage::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GotoLobbyPage
// 0x0010 (0x0010 - 0x0000)
struct UI_Lobby_GotoLobbyPage final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbyPage                                    _page;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 _sub_option;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F8[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_Lobby_GotoLobbyPage) == 0x000008, "Wrong alignment on UI_Lobby_GotoLobbyPage");
static_assert(sizeof(UI_Lobby_GotoLobbyPage) == 0x000010, "Wrong size on UI_Lobby_GotoLobbyPage");
static_assert(offsetof(UI_Lobby_GotoLobbyPage, _world_ctx) == 0x000000, "Member 'UI_Lobby_GotoLobbyPage::_world_ctx' has a wrong offset!");
static_assert(offsetof(UI_Lobby_GotoLobbyPage, _page) == 0x000008, "Member 'UI_Lobby_GotoLobbyPage::_page' has a wrong offset!");
static_assert(offsetof(UI_Lobby_GotoLobbyPage, _sub_option) == 0x000009, "Member 'UI_Lobby_GotoLobbyPage::_sub_option' has a wrong offset!");

// Function Stigma.UI_Lobby.CloseMailBox
// 0x0001 (0x0001 - 0x0000)
struct UI_Lobby_CloseMailBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_CloseMailBox) == 0x000001, "Wrong alignment on UI_Lobby_CloseMailBox");
static_assert(sizeof(UI_Lobby_CloseMailBox) == 0x000001, "Wrong size on UI_Lobby_CloseMailBox");
static_assert(offsetof(UI_Lobby_CloseMailBox, ReturnValue) == 0x000000, "Member 'UI_Lobby_CloseMailBox::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GetChatBox
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_GetChatBox final
{
public:
	class UUI_ChatBox*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetChatBox) == 0x000008, "Wrong alignment on UI_Lobby_GetChatBox");
static_assert(sizeof(UI_Lobby_GetChatBox) == 0x000008, "Wrong size on UI_Lobby_GetChatBox");
static_assert(offsetof(UI_Lobby_GetChatBox, ReturnValue) == 0x000000, "Member 'UI_Lobby_GetChatBox::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GetCurrentPage
// 0x0001 (0x0001 - 0x0000)
struct UI_Lobby_GetCurrentPage final
{
public:
	ELobbyPage                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetCurrentPage) == 0x000001, "Wrong alignment on UI_Lobby_GetCurrentPage");
static_assert(sizeof(UI_Lobby_GetCurrentPage) == 0x000001, "Wrong size on UI_Lobby_GetCurrentPage");
static_assert(offsetof(UI_Lobby_GetCurrentPage, ReturnValue) == 0x000000, "Member 'UI_Lobby_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GetCurrentPageUI
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_GetCurrentPageUI final
{
public:
	class UUI_LobbyPage*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetCurrentPageUI) == 0x000008, "Wrong alignment on UI_Lobby_GetCurrentPageUI");
static_assert(sizeof(UI_Lobby_GetCurrentPageUI) == 0x000008, "Wrong size on UI_Lobby_GetCurrentPageUI");
static_assert(offsetof(UI_Lobby_GetCurrentPageUI, ReturnValue) == 0x000000, "Member 'UI_Lobby_GetCurrentPageUI::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GetGNBLobby
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_GetGNBLobby final
{
public:
	class UUI_GNB_LobbyBase*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetGNBLobby) == 0x000008, "Wrong alignment on UI_Lobby_GetGNBLobby");
static_assert(sizeof(UI_Lobby_GetGNBLobby) == 0x000008, "Wrong size on UI_Lobby_GetGNBLobby");
static_assert(offsetof(UI_Lobby_GetGNBLobby, ReturnValue) == 0x000000, "Member 'UI_Lobby_GetGNBLobby::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GotoPage
// 0x0002 (0x0002 - 0x0000)
struct UI_Lobby_GotoPage final
{
public:
	ELobbyPage                                    _page;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 _sub_option;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GotoPage) == 0x000001, "Wrong alignment on UI_Lobby_GotoPage");
static_assert(sizeof(UI_Lobby_GotoPage) == 0x000002, "Wrong size on UI_Lobby_GotoPage");
static_assert(offsetof(UI_Lobby_GotoPage, _page) == 0x000000, "Member 'UI_Lobby_GotoPage::_page' has a wrong offset!");
static_assert(offsetof(UI_Lobby_GotoPage, _sub_option) == 0x000001, "Member 'UI_Lobby_GotoPage::_sub_option' has a wrong offset!");

// Function Stigma.UI_Lobby.OnGotoPage
// 0x0003 (0x0003 - 0x0000)
struct UI_Lobby_OnGotoPage final
{
public:
	ELobbyPage                                    _page;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 _sub_option;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnGotoPage) == 0x000001, "Wrong alignment on UI_Lobby_OnGotoPage");
static_assert(sizeof(UI_Lobby_OnGotoPage) == 0x000003, "Wrong size on UI_Lobby_OnGotoPage");
static_assert(offsetof(UI_Lobby_OnGotoPage, _page) == 0x000000, "Member 'UI_Lobby_OnGotoPage::_page' has a wrong offset!");
static_assert(offsetof(UI_Lobby_OnGotoPage, _sub_option) == 0x000001, "Member 'UI_Lobby_OnGotoPage::_sub_option' has a wrong offset!");
static_assert(offsetof(UI_Lobby_OnGotoPage, ReturnValue) == 0x000002, "Member 'UI_Lobby_OnGotoPage::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.OnInit
// 0x0001 (0x0001 - 0x0000)
struct UI_Lobby_OnInit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnInit) == 0x000001, "Wrong alignment on UI_Lobby_OnInit");
static_assert(sizeof(UI_Lobby_OnInit) == 0x000001, "Wrong size on UI_Lobby_OnInit");
static_assert(offsetof(UI_Lobby_OnInit, ReturnValue) == 0x000000, "Member 'UI_Lobby_OnInit::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.OnParty_CharacterUpdated
// 0x0108 (0x0108 - 0x0000)
struct UI_Lobby_OnParty_CharacterUpdated final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharSpec                              _chara;                                            // 0x0008(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnParty_CharacterUpdated) == 0x000008, "Wrong alignment on UI_Lobby_OnParty_CharacterUpdated");
static_assert(sizeof(UI_Lobby_OnParty_CharacterUpdated) == 0x000108, "Wrong size on UI_Lobby_OnParty_CharacterUpdated");
static_assert(offsetof(UI_Lobby_OnParty_CharacterUpdated, _user_id) == 0x000000, "Member 'UI_Lobby_OnParty_CharacterUpdated::_user_id' has a wrong offset!");
static_assert(offsetof(UI_Lobby_OnParty_CharacterUpdated, _chara) == 0x000008, "Member 'UI_Lobby_OnParty_CharacterUpdated::_chara' has a wrong offset!");

// Function Stigma.UI_Lobby.OnParty_LeaderUpdated
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_OnParty_LeaderUpdated final
{
public:
	struct FUserID                                _leader_id;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnParty_LeaderUpdated) == 0x000008, "Wrong alignment on UI_Lobby_OnParty_LeaderUpdated");
static_assert(sizeof(UI_Lobby_OnParty_LeaderUpdated) == 0x000008, "Wrong size on UI_Lobby_OnParty_LeaderUpdated");
static_assert(offsetof(UI_Lobby_OnParty_LeaderUpdated, _leader_id) == 0x000000, "Member 'UI_Lobby_OnParty_LeaderUpdated::_leader_id' has a wrong offset!");

// Function Stigma.UI_Lobby.OnParty_MemberAdded
// 0x0010 (0x0010 - 0x0000)
struct UI_Lobby_OnParty_MemberAdded final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UUserProfile*                     _member;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnParty_MemberAdded) == 0x000008, "Wrong alignment on UI_Lobby_OnParty_MemberAdded");
static_assert(sizeof(UI_Lobby_OnParty_MemberAdded) == 0x000010, "Wrong size on UI_Lobby_OnParty_MemberAdded");
static_assert(offsetof(UI_Lobby_OnParty_MemberAdded, _party) == 0x000000, "Member 'UI_Lobby_OnParty_MemberAdded::_party' has a wrong offset!");
static_assert(offsetof(UI_Lobby_OnParty_MemberAdded, _member) == 0x000008, "Member 'UI_Lobby_OnParty_MemberAdded::_member' has a wrong offset!");

// Function Stigma.UI_Lobby.OnParty_MemberDeleted
// 0x0010 (0x0010 - 0x0000)
struct UI_Lobby_OnParty_MemberDeleted final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _user_id;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnParty_MemberDeleted) == 0x000008, "Wrong alignment on UI_Lobby_OnParty_MemberDeleted");
static_assert(sizeof(UI_Lobby_OnParty_MemberDeleted) == 0x000010, "Wrong size on UI_Lobby_OnParty_MemberDeleted");
static_assert(offsetof(UI_Lobby_OnParty_MemberDeleted, _party) == 0x000000, "Member 'UI_Lobby_OnParty_MemberDeleted::_party' has a wrong offset!");
static_assert(offsetof(UI_Lobby_OnParty_MemberDeleted, _user_id) == 0x000008, "Member 'UI_Lobby_OnParty_MemberDeleted::_user_id' has a wrong offset!");

// Function Stigma.UI_Lobby.OnPartyEntered
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_OnPartyEntered final
{
public:
	const class UBriefParty*                      _party;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnPartyEntered) == 0x000008, "Wrong alignment on UI_Lobby_OnPartyEntered");
static_assert(sizeof(UI_Lobby_OnPartyEntered) == 0x000008, "Wrong size on UI_Lobby_OnPartyEntered");
static_assert(offsetof(UI_Lobby_OnPartyEntered, _party) == 0x000000, "Member 'UI_Lobby_OnPartyEntered::_party' has a wrong offset!");

// Function Stigma.UI_Lobby.OnUpdateCharaModel
// 0x0001 (0x0001 - 0x0000)
struct UI_Lobby_OnUpdateCharaModel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_OnUpdateCharaModel) == 0x000001, "Wrong alignment on UI_Lobby_OnUpdateCharaModel");
static_assert(sizeof(UI_Lobby_OnUpdateCharaModel) == 0x000001, "Wrong size on UI_Lobby_OnUpdateCharaModel");
static_assert(offsetof(UI_Lobby_OnUpdateCharaModel, ReturnValue) == 0x000000, "Member 'UI_Lobby_OnUpdateCharaModel::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.RegisterOnLobbyPageChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_Lobby_RegisterOnLobbyPageChanged final
{
public:
	TDelegate<void(ELobbyPage _lobby_type)>       _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_RegisterOnLobbyPageChanged) == 0x000004, "Wrong alignment on UI_Lobby_RegisterOnLobbyPageChanged");
static_assert(sizeof(UI_Lobby_RegisterOnLobbyPageChanged) == 0x000010, "Wrong size on UI_Lobby_RegisterOnLobbyPageChanged");
static_assert(offsetof(UI_Lobby_RegisterOnLobbyPageChanged, _callback) == 0x000000, "Member 'UI_Lobby_RegisterOnLobbyPageChanged::_callback' has a wrong offset!");

// Function Stigma.UI_Lobby.UpdateAllMannequins
// 0x0001 (0x0001 - 0x0000)
struct UI_Lobby_UpdateAllMannequins final
{
public:
	ELobbyPage                                    _page;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_UpdateAllMannequins) == 0x000001, "Wrong alignment on UI_Lobby_UpdateAllMannequins");
static_assert(sizeof(UI_Lobby_UpdateAllMannequins) == 0x000001, "Wrong size on UI_Lobby_UpdateAllMannequins");
static_assert(offsetof(UI_Lobby_UpdateAllMannequins, _page) == 0x000000, "Member 'UI_Lobby_UpdateAllMannequins::_page' has a wrong offset!");

// Function Stigma.UI_Lobby.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_GetCamera final
{
public:
	class AFollowCameraActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetCamera) == 0x000008, "Wrong alignment on UI_Lobby_GetCamera");
static_assert(sizeof(UI_Lobby_GetCamera) == 0x000008, "Wrong size on UI_Lobby_GetCamera");
static_assert(offsetof(UI_Lobby_GetCamera, ReturnValue) == 0x000000, "Member 'UI_Lobby_GetCamera::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.GetCharaModel
// 0x0008 (0x0008 - 0x0000)
struct UI_Lobby_GetCharaModel final
{
public:
	class AMannequin*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_GetCharaModel) == 0x000008, "Wrong alignment on UI_Lobby_GetCharaModel");
static_assert(sizeof(UI_Lobby_GetCharaModel) == 0x000008, "Wrong size on UI_Lobby_GetCharaModel");
static_assert(offsetof(UI_Lobby_GetCharaModel, ReturnValue) == 0x000000, "Member 'UI_Lobby_GetCharaModel::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Lobby.IsMannequinVisible
// 0x0001 (0x0001 - 0x0000)
struct UI_Lobby_IsMannequinVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Lobby_IsMannequinVisible) == 0x000001, "Wrong alignment on UI_Lobby_IsMannequinVisible");
static_assert(sizeof(UI_Lobby_IsMannequinVisible) == 0x000001, "Wrong size on UI_Lobby_IsMannequinVisible");
static_assert(offsetof(UI_Lobby_IsMannequinVisible, ReturnValue) == 0x000000, "Member 'UI_Lobby_IsMannequinVisible::ReturnValue' has a wrong offset!");

// Function Stigma.UI_MailBox.Close
// 0x0001 (0x0001 - 0x0000)
struct UI_MailBox_Close final
{
public:
	bool                                          _play_animation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailBox_Close) == 0x000001, "Wrong alignment on UI_MailBox_Close");
static_assert(sizeof(UI_MailBox_Close) == 0x000001, "Wrong size on UI_MailBox_Close");
static_assert(offsetof(UI_MailBox_Close, _play_animation) == 0x000000, "Member 'UI_MailBox_Close::_play_animation' has a wrong offset!");

// Function Stigma.UI_MailBox.OnAck_MailDelete
// 0x0010 (0x0010 - 0x0000)
struct UI_MailBox_OnAck_MailDelete final
{
public:
	struct FACK_MailDelete                        _ack;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailBox_OnAck_MailDelete) == 0x000008, "Wrong alignment on UI_MailBox_OnAck_MailDelete");
static_assert(sizeof(UI_MailBox_OnAck_MailDelete) == 0x000010, "Wrong size on UI_MailBox_OnAck_MailDelete");
static_assert(offsetof(UI_MailBox_OnAck_MailDelete, _ack) == 0x000000, "Member 'UI_MailBox_OnAck_MailDelete::_ack' has a wrong offset!");

// Function Stigma.UI_MailBox.OnAck_MailRead
// 0x0018 (0x0018 - 0x0000)
struct UI_MailBox_OnAck_MailRead final
{
public:
	struct FACK_MailRead                          _ack;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailBox_OnAck_MailRead) == 0x000008, "Wrong alignment on UI_MailBox_OnAck_MailRead");
static_assert(sizeof(UI_MailBox_OnAck_MailRead) == 0x000018, "Wrong size on UI_MailBox_OnAck_MailRead");
static_assert(offsetof(UI_MailBox_OnAck_MailRead, _ack) == 0x000000, "Member 'UI_MailBox_OnAck_MailRead::_ack' has a wrong offset!");

// Function Stigma.UI_MailBox.OnAck_MailUpdate
// 0x0040 (0x0040 - 0x0000)
struct UI_MailBox_OnAck_MailUpdate final
{
public:
	struct FACK_MailUpdate                        _ack;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailBox_OnAck_MailUpdate) == 0x000008, "Wrong alignment on UI_MailBox_OnAck_MailUpdate");
static_assert(sizeof(UI_MailBox_OnAck_MailUpdate) == 0x000040, "Wrong size on UI_MailBox_OnAck_MailUpdate");
static_assert(offsetof(UI_MailBox_OnAck_MailUpdate, _ack) == 0x000000, "Member 'UI_MailBox_OnAck_MailUpdate::_ack' has a wrong offset!");

// Function Stigma.UI_MailBox.OnClickSelectAll
// 0x0001 (0x0001 - 0x0000)
struct UI_MailBox_OnClickSelectAll final
{
public:
	bool                                          _is_selected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailBox_OnClickSelectAll) == 0x000001, "Wrong alignment on UI_MailBox_OnClickSelectAll");
static_assert(sizeof(UI_MailBox_OnClickSelectAll) == 0x000001, "Wrong size on UI_MailBox_OnClickSelectAll");
static_assert(offsetof(UI_MailBox_OnClickSelectAll, _is_selected) == 0x000000, "Member 'UI_MailBox_OnClickSelectAll::_is_selected' has a wrong offset!");

// Function Stigma.UI_MailBox.OnMailRead
// 0x0004 (0x0004 - 0x0000)
struct UI_MailBox_OnMailRead final
{
public:
	int32                                         _mail_idn;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MailBox_OnMailRead) == 0x000004, "Wrong alignment on UI_MailBox_OnMailRead");
static_assert(sizeof(UI_MailBox_OnMailRead) == 0x000004, "Wrong size on UI_MailBox_OnMailRead");
static_assert(offsetof(UI_MailBox_OnMailRead, _mail_idn) == 0x000000, "Member 'UI_MailBox_OnMailRead::_mail_idn' has a wrong offset!");

// Function Stigma.UI_MailBox.OnMailSelect
// 0x0008 (0x0008 - 0x0000)
struct UI_MailBox_OnMailSelect final
{
public:
	int32                                         _mail_idn;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_selected;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25FA[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_MailBox_OnMailSelect) == 0x000004, "Wrong alignment on UI_MailBox_OnMailSelect");
static_assert(sizeof(UI_MailBox_OnMailSelect) == 0x000008, "Wrong size on UI_MailBox_OnMailSelect");
static_assert(offsetof(UI_MailBox_OnMailSelect, _mail_idn) == 0x000000, "Member 'UI_MailBox_OnMailSelect::_mail_idn' has a wrong offset!");
static_assert(offsetof(UI_MailBox_OnMailSelect, _is_selected) == 0x000004, "Member 'UI_MailBox_OnMailSelect::_is_selected' has a wrong offset!");

// Function Stigma.UI_MainBase.OnSetAnnouncements
// 0x0018 (0x0018 - 0x0000)
struct UI_MainBase_OnSetAnnouncements final
{
public:
	TArray<struct FAnnounce>                      _announcements;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25FD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_MainBase_OnSetAnnouncements) == 0x000008, "Wrong alignment on UI_MainBase_OnSetAnnouncements");
static_assert(sizeof(UI_MainBase_OnSetAnnouncements) == 0x000018, "Wrong size on UI_MainBase_OnSetAnnouncements");
static_assert(offsetof(UI_MainBase_OnSetAnnouncements, _announcements) == 0x000000, "Member 'UI_MainBase_OnSetAnnouncements::_announcements' has a wrong offset!");
static_assert(offsetof(UI_MainBase_OnSetAnnouncements, ReturnValue) == 0x000010, "Member 'UI_MainBase_OnSetAnnouncements::ReturnValue' has a wrong offset!");

// Function Stigma.UI_MasterLevelRewardSlot.FillPercentBar
// 0x0002 (0x0002 - 0x0000)
struct UI_MasterLevelRewardSlot_FillPercentBar final
{
public:
	bool                                          _fill_left;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _fill_right;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterLevelRewardSlot_FillPercentBar) == 0x000001, "Wrong alignment on UI_MasterLevelRewardSlot_FillPercentBar");
static_assert(sizeof(UI_MasterLevelRewardSlot_FillPercentBar) == 0x000002, "Wrong size on UI_MasterLevelRewardSlot_FillPercentBar");
static_assert(offsetof(UI_MasterLevelRewardSlot_FillPercentBar, _fill_left) == 0x000000, "Member 'UI_MasterLevelRewardSlot_FillPercentBar::_fill_left' has a wrong offset!");
static_assert(offsetof(UI_MasterLevelRewardSlot_FillPercentBar, _fill_right) == 0x000001, "Member 'UI_MasterLevelRewardSlot_FillPercentBar::_fill_right' has a wrong offset!");

// Function Stigma.UI_MasterLevelRewardSlot.SetCheckPoint
// 0x0001 (0x0001 - 0x0000)
struct UI_MasterLevelRewardSlot_SetCheckPoint final
{
public:
	bool                                          _checked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterLevelRewardSlot_SetCheckPoint) == 0x000001, "Wrong alignment on UI_MasterLevelRewardSlot_SetCheckPoint");
static_assert(sizeof(UI_MasterLevelRewardSlot_SetCheckPoint) == 0x000001, "Wrong size on UI_MasterLevelRewardSlot_SetCheckPoint");
static_assert(offsetof(UI_MasterLevelRewardSlot_SetCheckPoint, _checked) == 0x000000, "Member 'UI_MasterLevelRewardSlot_SetCheckPoint::_checked' has a wrong offset!");

// Function Stigma.UI_MasterLevelRewardSlot.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct UI_MasterLevelRewardSlot_SetLevel final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterLevelRewardSlot_SetLevel) == 0x000004, "Wrong alignment on UI_MasterLevelRewardSlot_SetLevel");
static_assert(sizeof(UI_MasterLevelRewardSlot_SetLevel) == 0x000004, "Wrong size on UI_MasterLevelRewardSlot_SetLevel");
static_assert(offsetof(UI_MasterLevelRewardSlot_SetLevel, _level) == 0x000000, "Member 'UI_MasterLevelRewardSlot_SetLevel::_level' has a wrong offset!");

// Function Stigma.UI_MasterLevelRewardSlot.SetMasterImage
// 0x0028 (0x0028 - 0x0000)
struct UI_MasterLevelRewardSlot_SetMasterImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              _soft_texture;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterLevelRewardSlot_SetMasterImage) == 0x000008, "Wrong alignment on UI_MasterLevelRewardSlot_SetMasterImage");
static_assert(sizeof(UI_MasterLevelRewardSlot_SetMasterImage) == 0x000028, "Wrong size on UI_MasterLevelRewardSlot_SetMasterImage");
static_assert(offsetof(UI_MasterLevelRewardSlot_SetMasterImage, _soft_texture) == 0x000000, "Member 'UI_MasterLevelRewardSlot_SetMasterImage::_soft_texture' has a wrong offset!");

// Function Stigma.UI_MasterMissionBrief.InitWidget
// 0x0002 (0x0002 - 0x0000)
struct UI_MasterMissionBrief_InitWidget final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterMissionBrief_InitWidget) == 0x000001, "Wrong alignment on UI_MasterMissionBrief_InitWidget");
static_assert(sizeof(UI_MasterMissionBrief_InitWidget) == 0x000002, "Wrong size on UI_MasterMissionBrief_InitWidget");
static_assert(offsetof(UI_MasterMissionBrief_InitWidget, _chara_type) == 0x000000, "Member 'UI_MasterMissionBrief_InitWidget::_chara_type' has a wrong offset!");
static_assert(offsetof(UI_MasterMissionBrief_InitWidget, ReturnValue) == 0x000001, "Member 'UI_MasterMissionBrief_InitWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_MasterMissionBrief.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MasterMissionBrief_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterMissionBrief_SetTitle) == 0x000008, "Wrong alignment on UI_MasterMissionBrief_SetTitle");
static_assert(sizeof(UI_MasterMissionBrief_SetTitle) == 0x000018, "Wrong size on UI_MasterMissionBrief_SetTitle");
static_assert(offsetof(UI_MasterMissionBrief_SetTitle, _text) == 0x000000, "Member 'UI_MasterMissionBrief_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MasterMissionBrief.ShowRedDot
// 0x0001 (0x0001 - 0x0000)
struct UI_MasterMissionBrief_ShowRedDot final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterMissionBrief_ShowRedDot) == 0x000001, "Wrong alignment on UI_MasterMissionBrief_ShowRedDot");
static_assert(sizeof(UI_MasterMissionBrief_ShowRedDot) == 0x000001, "Wrong size on UI_MasterMissionBrief_ShowRedDot");
static_assert(offsetof(UI_MasterMissionBrief_ShowRedDot, _show) == 0x000000, "Member 'UI_MasterMissionBrief_ShowRedDot::_show' has a wrong offset!");

// Function Stigma.UI_MasterMissionBrief.UserLevelLocked
// 0x0004 (0x0004 - 0x0000)
struct UI_MasterMissionBrief_UserLevelLocked final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterMissionBrief_UserLevelLocked) == 0x000004, "Wrong alignment on UI_MasterMissionBrief_UserLevelLocked");
static_assert(sizeof(UI_MasterMissionBrief_UserLevelLocked) == 0x000004, "Wrong size on UI_MasterMissionBrief_UserLevelLocked");
static_assert(offsetof(UI_MasterMissionBrief_UserLevelLocked, _level) == 0x000000, "Member 'UI_MasterMissionBrief_UserLevelLocked::_level' has a wrong offset!");

// Function Stigma.UI_MasterMissionRewardPopup.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_MasterMissionRewardPopup_InitWidget final
{
public:
	struct FItemID_EventPage                      _master_event_id;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterMissionRewardPopup_InitWidget) == 0x000008, "Wrong alignment on UI_MasterMissionRewardPopup_InitWidget");
static_assert(sizeof(UI_MasterMissionRewardPopup_InitWidget) == 0x000010, "Wrong size on UI_MasterMissionRewardPopup_InitWidget");
static_assert(offsetof(UI_MasterMissionRewardPopup_InitWidget, _master_event_id) == 0x000000, "Member 'UI_MasterMissionRewardPopup_InitWidget::_master_event_id' has a wrong offset!");

// Function Stigma.UI_MasterMissionRewardPopup.OnClickItem
// 0x0010 (0x0010 - 0x0000)
struct UI_MasterMissionRewardPopup_OnClickItem final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2600[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_MasterMissionRewardPopup_OnClickItem) == 0x000008, "Wrong alignment on UI_MasterMissionRewardPopup_OnClickItem");
static_assert(sizeof(UI_MasterMissionRewardPopup_OnClickItem) == 0x000010, "Wrong size on UI_MasterMissionRewardPopup_OnClickItem");
static_assert(offsetof(UI_MasterMissionRewardPopup_OnClickItem, _widget) == 0x000000, "Member 'UI_MasterMissionRewardPopup_OnClickItem::_widget' has a wrong offset!");
static_assert(offsetof(UI_MasterMissionRewardPopup_OnClickItem, _selected) == 0x000008, "Member 'UI_MasterMissionRewardPopup_OnClickItem::_selected' has a wrong offset!");

// Function Stigma.UI_MasterMissionRewardPopup.SetTitle
// 0x0008 (0x0008 - 0x0000)
struct UI_MasterMissionRewardPopup_SetTitle final
{
public:
	ECharaType                                    _chara_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2601[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _max_level;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MasterMissionRewardPopup_SetTitle) == 0x000004, "Wrong alignment on UI_MasterMissionRewardPopup_SetTitle");
static_assert(sizeof(UI_MasterMissionRewardPopup_SetTitle) == 0x000008, "Wrong size on UI_MasterMissionRewardPopup_SetTitle");
static_assert(offsetof(UI_MasterMissionRewardPopup_SetTitle, _chara_type) == 0x000000, "Member 'UI_MasterMissionRewardPopup_SetTitle::_chara_type' has a wrong offset!");
static_assert(offsetof(UI_MasterMissionRewardPopup_SetTitle, _max_level) == 0x000004, "Member 'UI_MasterMissionRewardPopup_SetTitle::_max_level' has a wrong offset!");

// Function Stigma.UI_MissionBrief.OnShowTask
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionBrief_OnShowTask final
{
public:
	struct FItemID                                _task_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBrief_OnShowTask) == 0x000008, "Wrong alignment on UI_MissionBrief_OnShowTask");
static_assert(sizeof(UI_MissionBrief_OnShowTask) == 0x000010, "Wrong size on UI_MissionBrief_OnShowTask");
static_assert(offsetof(UI_MissionBrief_OnShowTask, _task_id) == 0x000000, "Member 'UI_MissionBrief_OnShowTask::_task_id' has a wrong offset!");

// Function Stigma.UI_MissionBrief.ShowNextTask
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionBrief_ShowNextTask final
{
public:
	ESideViewSide                                 _side;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBrief_ShowNextTask) == 0x000001, "Wrong alignment on UI_MissionBrief_ShowNextTask");
static_assert(sizeof(UI_MissionBrief_ShowNextTask) == 0x000001, "Wrong size on UI_MissionBrief_ShowNextTask");
static_assert(offsetof(UI_MissionBrief_ShowNextTask, _side) == 0x000000, "Member 'UI_MissionBrief_ShowNextTask::_side' has a wrong offset!");

// Function Stigma.UI_MissionBrief.GetCurrentTaskID
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionBrief_GetCurrentTaskID final
{
public:
	struct FItemID                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBrief_GetCurrentTaskID) == 0x000008, "Wrong alignment on UI_MissionBrief_GetCurrentTaskID");
static_assert(sizeof(UI_MissionBrief_GetCurrentTaskID) == 0x000010, "Wrong size on UI_MissionBrief_GetCurrentTaskID");
static_assert(offsetof(UI_MissionBrief_GetCurrentTaskID, ReturnValue) == 0x000000, "Member 'UI_MissionBrief_GetCurrentTaskID::ReturnValue' has a wrong offset!");

// Function Stigma.UI_MissionBriefSlot.InitWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionBriefSlot_InitWidget final
{
public:
	class UMission*                               _new_mission;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefSlot_InitWidget) == 0x000008, "Wrong alignment on UI_MissionBriefSlot_InitWidget");
static_assert(sizeof(UI_MissionBriefSlot_InitWidget) == 0x000008, "Wrong size on UI_MissionBriefSlot_InitWidget");
static_assert(offsetof(UI_MissionBriefSlot_InitWidget, _new_mission) == 0x000000, "Member 'UI_MissionBriefSlot_InitWidget::_new_mission' has a wrong offset!");

// Function Stigma.UI_MissionBriefSlot.OnUpdateMission
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionBriefSlot_OnUpdateMission final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2603[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefSlot_OnUpdateMission) == 0x000008, "Wrong alignment on UI_MissionBriefSlot_OnUpdateMission");
static_assert(sizeof(UI_MissionBriefSlot_OnUpdateMission) == 0x000010, "Wrong size on UI_MissionBriefSlot_OnUpdateMission");
static_assert(offsetof(UI_MissionBriefSlot_OnUpdateMission, _type) == 0x000000, "Member 'UI_MissionBriefSlot_OnUpdateMission::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionBriefSlot_OnUpdateMission, _updated_mission) == 0x000008, "Member 'UI_MissionBriefSlot_OnUpdateMission::_updated_mission' has a wrong offset!");

// Function Stigma.UI_MissionBriefSlot.SetCanReward
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionBriefSlot_SetCanReward final
{
public:
	bool                                          _can_reward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefSlot_SetCanReward) == 0x000001, "Wrong alignment on UI_MissionBriefSlot_SetCanReward");
static_assert(sizeof(UI_MissionBriefSlot_SetCanReward) == 0x000001, "Wrong size on UI_MissionBriefSlot_SetCanReward");
static_assert(offsetof(UI_MissionBriefSlot_SetCanReward, _can_reward) == 0x000000, "Member 'UI_MissionBriefSlot_SetCanReward::_can_reward' has a wrong offset!");

// Function Stigma.UI_MissionBriefSlot.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionBriefSlot_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefSlot_SetDesc) == 0x000008, "Wrong alignment on UI_MissionBriefSlot_SetDesc");
static_assert(sizeof(UI_MissionBriefSlot_SetDesc) == 0x000018, "Wrong size on UI_MissionBriefSlot_SetDesc");
static_assert(offsetof(UI_MissionBriefSlot_SetDesc, _text) == 0x000000, "Member 'UI_MissionBriefSlot_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_MissionBriefSlot.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionBriefSlot_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefSlot_SetTitle) == 0x000008, "Wrong alignment on UI_MissionBriefSlot_SetTitle");
static_assert(sizeof(UI_MissionBriefSlot_SetTitle) == 0x000018, "Wrong size on UI_MissionBriefSlot_SetTitle");
static_assert(offsetof(UI_MissionBriefSlot_SetTitle, _text) == 0x000000, "Member 'UI_MissionBriefSlot_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionBriefSlot.ShowGoToButton
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionBriefSlot_ShowGoToButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefSlot_ShowGoToButton) == 0x000001, "Wrong alignment on UI_MissionBriefSlot_ShowGoToButton");
static_assert(sizeof(UI_MissionBriefSlot_ShowGoToButton) == 0x000001, "Wrong size on UI_MissionBriefSlot_ShowGoToButton");
static_assert(offsetof(UI_MissionBriefSlot_ShowGoToButton, _show) == 0x000000, "Member 'UI_MissionBriefSlot_ShowGoToButton::_show' has a wrong offset!");

// Function Stigma.UI_MissionBriefTab.OnButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionBriefTab_OnButtonClicked final
{
public:
	ESideViewSide                                 _side;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefTab_OnButtonClicked) == 0x000001, "Wrong alignment on UI_MissionBriefTab_OnButtonClicked");
static_assert(sizeof(UI_MissionBriefTab_OnButtonClicked) == 0x000001, "Wrong size on UI_MissionBriefTab_OnButtonClicked");
static_assert(offsetof(UI_MissionBriefTab_OnButtonClicked, _side) == 0x000000, "Member 'UI_MissionBriefTab_OnButtonClicked::_side' has a wrong offset!");

// Function Stigma.UI_MissionBriefTab.SetIcon
// 0x0028 (0x0028 - 0x0000)
struct UI_MissionBriefTab_SetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefTab_SetIcon) == 0x000008, "Wrong alignment on UI_MissionBriefTab_SetIcon");
static_assert(sizeof(UI_MissionBriefTab_SetIcon) == 0x000028, "Wrong size on UI_MissionBriefTab_SetIcon");
static_assert(offsetof(UI_MissionBriefTab_SetIcon, _Icon) == 0x000000, "Member 'UI_MissionBriefTab_SetIcon::_Icon' has a wrong offset!");

// Function Stigma.UI_MissionBriefTab.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionBriefTab_SetTitleText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefTab_SetTitleText) == 0x000008, "Wrong alignment on UI_MissionBriefTab_SetTitleText");
static_assert(sizeof(UI_MissionBriefTab_SetTitleText) == 0x000018, "Wrong size on UI_MissionBriefTab_SetTitleText");
static_assert(offsetof(UI_MissionBriefTab_SetTitleText, _text) == 0x000000, "Member 'UI_MissionBriefTab_SetTitleText::_text' has a wrong offset!");

// Function Stigma.UI_MissionBriefTab.ShowButtons
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionBriefTab_ShowButtons final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionBriefTab_ShowButtons) == 0x000001, "Wrong alignment on UI_MissionBriefTab_ShowButtons");
static_assert(sizeof(UI_MissionBriefTab_ShowButtons) == 0x000001, "Wrong size on UI_MissionBriefTab_ShowButtons");
static_assert(offsetof(UI_MissionBriefTab_ShowButtons, _show) == 0x000000, "Member 'UI_MissionBriefTab_ShowButtons::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopup.InitWidget
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopup_InitWidget final
{
public:
	struct FItemID                                _to_show_task_id;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopup_InitWidget) == 0x000008, "Wrong alignment on UI_MissionPopup_InitWidget");
static_assert(sizeof(UI_MissionPopup_InitWidget) == 0x000010, "Wrong size on UI_MissionPopup_InitWidget");
static_assert(offsetof(UI_MissionPopup_InitWidget, _to_show_task_id) == 0x000000, "Member 'UI_MissionPopup_InitWidget::_to_show_task_id' has a wrong offset!");

// Function Stigma.UI_MissionPopup.OnTabSelected
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopup_OnTabSelected final
{
public:
	class UAnimatableWidget*                      _tab_widget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2606[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_MissionPopup_OnTabSelected) == 0x000008, "Wrong alignment on UI_MissionPopup_OnTabSelected");
static_assert(sizeof(UI_MissionPopup_OnTabSelected) == 0x000010, "Wrong size on UI_MissionPopup_OnTabSelected");
static_assert(offsetof(UI_MissionPopup_OnTabSelected, _tab_widget) == 0x000000, "Member 'UI_MissionPopup_OnTabSelected::_tab_widget' has a wrong offset!");
static_assert(offsetof(UI_MissionPopup_OnTabSelected, _selected) == 0x000008, "Member 'UI_MissionPopup_OnTabSelected::_selected' has a wrong offset!");

// Function Stigma.UI_MissionPopup.GetCurrentContainerWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionPopup_GetCurrentContainerWidget final
{
public:
	class UPreviewableWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopup_GetCurrentContainerWidget) == 0x000008, "Wrong alignment on UI_MissionPopup_GetCurrentContainerWidget");
static_assert(sizeof(UI_MissionPopup_GetCurrentContainerWidget) == 0x000008, "Wrong size on UI_MissionPopup_GetCurrentContainerWidget");
static_assert(offsetof(UI_MissionPopup_GetCurrentContainerWidget, ReturnValue) == 0x000000, "Member 'UI_MissionPopup_GetCurrentContainerWidget::ReturnValue' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerBattlePass.SetIsActivated
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerBattlePass_SetIsActivated final
{
public:
	bool                                          _is_activated;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerBattlePass_SetIsActivated) == 0x000001, "Wrong alignment on UI_MissionPopupContainerBattlePass_SetIsActivated");
static_assert(sizeof(UI_MissionPopupContainerBattlePass_SetIsActivated) == 0x000001, "Wrong size on UI_MissionPopupContainerBattlePass_SetIsActivated");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_SetIsActivated, _is_activated) == 0x000000, "Member 'UI_MissionPopupContainerBattlePass_SetIsActivated::_is_activated' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerBattlePass.SetNextReward
// 0x0028 (0x0028 - 0x0000)
struct UI_MissionPopupContainerBattlePass_SetNextReward final
{
public:
	struct FReward                                _free_reward;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FReward                                _premium_reward;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _is_max_level;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2608[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_MissionPopupContainerBattlePass_SetNextReward) == 0x000008, "Wrong alignment on UI_MissionPopupContainerBattlePass_SetNextReward");
static_assert(sizeof(UI_MissionPopupContainerBattlePass_SetNextReward) == 0x000028, "Wrong size on UI_MissionPopupContainerBattlePass_SetNextReward");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_SetNextReward, _free_reward) == 0x000000, "Member 'UI_MissionPopupContainerBattlePass_SetNextReward::_free_reward' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_SetNextReward, _premium_reward) == 0x000010, "Member 'UI_MissionPopupContainerBattlePass_SetNextReward::_premium_reward' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_SetNextReward, _is_max_level) == 0x000020, "Member 'UI_MissionPopupContainerBattlePass_SetNextReward::_is_max_level' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerBattlePass.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupContainerBattlePass_SetTitleText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerBattlePass_SetTitleText) == 0x000008, "Wrong alignment on UI_MissionPopupContainerBattlePass_SetTitleText");
static_assert(sizeof(UI_MissionPopupContainerBattlePass_SetTitleText) == 0x000018, "Wrong size on UI_MissionPopupContainerBattlePass_SetTitleText");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_SetTitleText, _text) == 0x000000, "Member 'UI_MissionPopupContainerBattlePass_SetTitleText::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerBattlePass.ShowBuyPremiumBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn) == 0x000001, "Wrong alignment on UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn");
static_assert(sizeof(UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn) == 0x000001, "Wrong size on UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn, _show) == 0x000000, "Member 'UI_MissionPopupContainerBattlePass_ShowBuyPremiumBtn::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerBattlePass.ShowWeekMission
// 0x0004 (0x0004 - 0x0000)
struct UI_MissionPopupContainerBattlePass_ShowWeekMission final
{
public:
	int32                                         _new_week;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerBattlePass_ShowWeekMission) == 0x000004, "Wrong alignment on UI_MissionPopupContainerBattlePass_ShowWeekMission");
static_assert(sizeof(UI_MissionPopupContainerBattlePass_ShowWeekMission) == 0x000004, "Wrong size on UI_MissionPopupContainerBattlePass_ShowWeekMission");
static_assert(offsetof(UI_MissionPopupContainerBattlePass_ShowWeekMission, _new_week) == 0x000000, "Member 'UI_MissionPopupContainerBattlePass_ShowWeekMission::_new_week' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.OnMissionUpdated
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupContainerDaily_OnMissionUpdated final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_OnMissionUpdated) == 0x000008, "Wrong alignment on UI_MissionPopupContainerDaily_OnMissionUpdated");
static_assert(sizeof(UI_MissionPopupContainerDaily_OnMissionUpdated) == 0x000010, "Wrong size on UI_MissionPopupContainerDaily_OnMissionUpdated");
static_assert(offsetof(UI_MissionPopupContainerDaily_OnMissionUpdated, _type) == 0x000000, "Member 'UI_MissionPopupContainerDaily_OnMissionUpdated::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerDaily_OnMissionUpdated, _updated_mission) == 0x000008, "Member 'UI_MissionPopupContainerDaily_OnMissionUpdated::_updated_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.ReadNewMission
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupContainerDaily_ReadNewMission final
{
public:
	TDelegate<void(EResultCode _rcode, struct FACK_MissionRead& _ack)> _proc;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_ReadNewMission) == 0x000004, "Wrong alignment on UI_MissionPopupContainerDaily_ReadNewMission");
static_assert(sizeof(UI_MissionPopupContainerDaily_ReadNewMission) == 0x000010, "Wrong size on UI_MissionPopupContainerDaily_ReadNewMission");
static_assert(offsetof(UI_MissionPopupContainerDaily_ReadNewMission, _proc) == 0x000000, "Member 'UI_MissionPopupContainerDaily_ReadNewMission::_proc' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.RequestFinalReward
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupContainerDaily_RequestFinalReward final
{
public:
	TDelegate<void(EResultCode _rcode, struct FACK_MissionReward& _ack)> _proc;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_RequestFinalReward) == 0x000004, "Wrong alignment on UI_MissionPopupContainerDaily_RequestFinalReward");
static_assert(sizeof(UI_MissionPopupContainerDaily_RequestFinalReward) == 0x000010, "Wrong size on UI_MissionPopupContainerDaily_RequestFinalReward");
static_assert(offsetof(UI_MissionPopupContainerDaily_RequestFinalReward, _proc) == 0x000000, "Member 'UI_MissionPopupContainerDaily_RequestFinalReward::_proc' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.SetFinalMissionProgress
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionPopupContainerDaily_SetFinalMissionProgress final
{
public:
	int32                                         _current_count;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _target_count;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_SetFinalMissionProgress) == 0x000004, "Wrong alignment on UI_MissionPopupContainerDaily_SetFinalMissionProgress");
static_assert(sizeof(UI_MissionPopupContainerDaily_SetFinalMissionProgress) == 0x000008, "Wrong size on UI_MissionPopupContainerDaily_SetFinalMissionProgress");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetFinalMissionProgress, _current_count) == 0x000000, "Member 'UI_MissionPopupContainerDaily_SetFinalMissionProgress::_current_count' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetFinalMissionProgress, _target_count) == 0x000004, "Member 'UI_MissionPopupContainerDaily_SetFinalMissionProgress::_target_count' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.SetFinalMissionProgressType
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerDaily_SetFinalMissionProgressType final
{
public:
	EMissionProgressType                          _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_SetFinalMissionProgressType) == 0x000001, "Wrong alignment on UI_MissionPopupContainerDaily_SetFinalMissionProgressType");
static_assert(sizeof(UI_MissionPopupContainerDaily_SetFinalMissionProgressType) == 0x000001, "Wrong size on UI_MissionPopupContainerDaily_SetFinalMissionProgressType");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetFinalMissionProgressType, _type) == 0x000000, "Member 'UI_MissionPopupContainerDaily_SetFinalMissionProgressType::_type' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.SetFinalMissionRewardText
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupContainerDaily_SetFinalMissionRewardText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_SetFinalMissionRewardText) == 0x000008, "Wrong alignment on UI_MissionPopupContainerDaily_SetFinalMissionRewardText");
static_assert(sizeof(UI_MissionPopupContainerDaily_SetFinalMissionRewardText) == 0x000018, "Wrong size on UI_MissionPopupContainerDaily_SetFinalMissionRewardText");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetFinalMissionRewardText, _text) == 0x000000, "Member 'UI_MissionPopupContainerDaily_SetFinalMissionRewardText::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.SetLocked
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionPopupContainerDaily_SetLocked final
{
public:
	bool                                          _locked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _limited_level;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_SetLocked) == 0x000004, "Wrong alignment on UI_MissionPopupContainerDaily_SetLocked");
static_assert(sizeof(UI_MissionPopupContainerDaily_SetLocked) == 0x000008, "Wrong size on UI_MissionPopupContainerDaily_SetLocked");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetLocked, _locked) == 0x000000, "Member 'UI_MissionPopupContainerDaily_SetLocked::_locked' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetLocked, _limited_level) == 0x000004, "Member 'UI_MissionPopupContainerDaily_SetLocked::_limited_level' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.SetMissionChangeCount
// 0x0004 (0x0004 - 0x0000)
struct UI_MissionPopupContainerDaily_SetMissionChangeCount final
{
public:
	int32                                         _current_count;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_SetMissionChangeCount) == 0x000004, "Wrong alignment on UI_MissionPopupContainerDaily_SetMissionChangeCount");
static_assert(sizeof(UI_MissionPopupContainerDaily_SetMissionChangeCount) == 0x000004, "Wrong size on UI_MissionPopupContainerDaily_SetMissionChangeCount");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetMissionChangeCount, _current_count) == 0x000000, "Member 'UI_MissionPopupContainerDaily_SetMissionChangeCount::_current_count' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.SetUserLevelExp
// 0x000C (0x000C - 0x0000)
struct UI_MissionPopupContainerDaily_SetUserLevelExp final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cur_exp;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _tar_exp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_SetUserLevelExp) == 0x000004, "Wrong alignment on UI_MissionPopupContainerDaily_SetUserLevelExp");
static_assert(sizeof(UI_MissionPopupContainerDaily_SetUserLevelExp) == 0x00000C, "Wrong size on UI_MissionPopupContainerDaily_SetUserLevelExp");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetUserLevelExp, _level) == 0x000000, "Member 'UI_MissionPopupContainerDaily_SetUserLevelExp::_level' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetUserLevelExp, _cur_exp) == 0x000004, "Member 'UI_MissionPopupContainerDaily_SetUserLevelExp::_cur_exp' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupContainerDaily_SetUserLevelExp, _tar_exp) == 0x000008, "Member 'UI_MissionPopupContainerDaily_SetUserLevelExp::_tar_exp' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.ShowChangeInfoText
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerDaily_ShowChangeInfoText final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_ShowChangeInfoText) == 0x000001, "Wrong alignment on UI_MissionPopupContainerDaily_ShowChangeInfoText");
static_assert(sizeof(UI_MissionPopupContainerDaily_ShowChangeInfoText) == 0x000001, "Wrong size on UI_MissionPopupContainerDaily_ShowChangeInfoText");
static_assert(offsetof(UI_MissionPopupContainerDaily_ShowChangeInfoText, _show) == 0x000000, "Member 'UI_MissionPopupContainerDaily_ShowChangeInfoText::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopupContainerDaily.ShowFinalMissionRewardBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn) == 0x000001, "Wrong alignment on UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn");
static_assert(sizeof(UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn) == 0x000001, "Wrong size on UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn");
static_assert(offsetof(UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn, _show) == 0x000000, "Member 'UI_MissionPopupContainerDaily_ShowFinalMissionRewardBtn::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.OnUpdateMission
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupSlotBattlePass_OnUpdateMission final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_OnUpdateMission) == 0x000008, "Wrong alignment on UI_MissionPopupSlotBattlePass_OnUpdateMission");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_OnUpdateMission) == 0x000010, "Wrong size on UI_MissionPopupSlotBattlePass_OnUpdateMission");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_OnUpdateMission, _type) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_OnUpdateMission::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_OnUpdateMission, _updated_mission) == 0x000008, "Member 'UI_MissionPopupSlotBattlePass_OnUpdateMission::_updated_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.SetBookmark
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotBattlePass_SetBookmark final
{
public:
	bool                                          _bookmark;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_SetBookmark) == 0x000001, "Wrong alignment on UI_MissionPopupSlotBattlePass_SetBookmark");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_SetBookmark) == 0x000001, "Wrong size on UI_MissionPopupSlotBattlePass_SetBookmark");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetBookmark, _bookmark) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_SetBookmark::_bookmark' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.SetCanReward
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotBattlePass_SetCanReward final
{
public:
	bool                                          _can_reward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_SetCanReward) == 0x000001, "Wrong alignment on UI_MissionPopupSlotBattlePass_SetCanReward");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_SetCanReward) == 0x000001, "Wrong size on UI_MissionPopupSlotBattlePass_SetCanReward");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetCanReward, _can_reward) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_SetCanReward::_can_reward' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupSlotBattlePass_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_SetDesc) == 0x000008, "Wrong alignment on UI_MissionPopupSlotBattlePass_SetDesc");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_SetDesc) == 0x000018, "Wrong size on UI_MissionPopupSlotBattlePass_SetDesc");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetDesc, _text) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotBattlePass_SetLocked final
{
public:
	bool                                          _locked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_SetLocked) == 0x000001, "Wrong alignment on UI_MissionPopupSlotBattlePass_SetLocked");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_SetLocked) == 0x000001, "Wrong size on UI_MissionPopupSlotBattlePass_SetLocked");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetLocked, _locked) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_SetLocked::_locked' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.SetProgress
// 0x000C (0x000C - 0x0000)
struct UI_MissionPopupSlotBattlePass_SetProgress final
{
public:
	EMissionProgressType                          _progress_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_260F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _count;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _target_count;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_SetProgress) == 0x000004, "Wrong alignment on UI_MissionPopupSlotBattlePass_SetProgress");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_SetProgress) == 0x00000C, "Wrong size on UI_MissionPopupSlotBattlePass_SetProgress");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetProgress, _progress_type) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_SetProgress::_progress_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetProgress, _count) == 0x000004, "Member 'UI_MissionPopupSlotBattlePass_SetProgress::_count' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetProgress, _target_count) == 0x000008, "Member 'UI_MissionPopupSlotBattlePass_SetProgress::_target_count' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupSlotBattlePass_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_SetTitle) == 0x000008, "Wrong alignment on UI_MissionPopupSlotBattlePass_SetTitle");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_SetTitle) == 0x000018, "Wrong size on UI_MissionPopupSlotBattlePass_SetTitle");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_SetTitle, _text) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotBattlePass.ShowBookmarkBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotBattlePass_ShowBookmarkBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotBattlePass_ShowBookmarkBtn) == 0x000001, "Wrong alignment on UI_MissionPopupSlotBattlePass_ShowBookmarkBtn");
static_assert(sizeof(UI_MissionPopupSlotBattlePass_ShowBookmarkBtn) == 0x000001, "Wrong size on UI_MissionPopupSlotBattlePass_ShowBookmarkBtn");
static_assert(offsetof(UI_MissionPopupSlotBattlePass_ShowBookmarkBtn, _show) == 0x000000, "Member 'UI_MissionPopupSlotBattlePass_ShowBookmarkBtn::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.OnUpdateMission
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupSlotDaily_OnUpdateMission final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2611[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_OnUpdateMission) == 0x000008, "Wrong alignment on UI_MissionPopupSlotDaily_OnUpdateMission");
static_assert(sizeof(UI_MissionPopupSlotDaily_OnUpdateMission) == 0x000010, "Wrong size on UI_MissionPopupSlotDaily_OnUpdateMission");
static_assert(offsetof(UI_MissionPopupSlotDaily_OnUpdateMission, _type) == 0x000000, "Member 'UI_MissionPopupSlotDaily_OnUpdateMission::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotDaily_OnUpdateMission, _updated_mission) == 0x000008, "Member 'UI_MissionPopupSlotDaily_OnUpdateMission::_updated_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.SetCanReward
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotDaily_SetCanReward final
{
public:
	bool                                          _can_reward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_SetCanReward) == 0x000001, "Wrong alignment on UI_MissionPopupSlotDaily_SetCanReward");
static_assert(sizeof(UI_MissionPopupSlotDaily_SetCanReward) == 0x000001, "Wrong size on UI_MissionPopupSlotDaily_SetCanReward");
static_assert(offsetof(UI_MissionPopupSlotDaily_SetCanReward, _can_reward) == 0x000000, "Member 'UI_MissionPopupSlotDaily_SetCanReward::_can_reward' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupSlotDaily_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_SetDesc) == 0x000008, "Wrong alignment on UI_MissionPopupSlotDaily_SetDesc");
static_assert(sizeof(UI_MissionPopupSlotDaily_SetDesc) == 0x000018, "Wrong size on UI_MissionPopupSlotDaily_SetDesc");
static_assert(offsetof(UI_MissionPopupSlotDaily_SetDesc, _text) == 0x000000, "Member 'UI_MissionPopupSlotDaily_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.SetProgress
// 0x000C (0x000C - 0x0000)
struct UI_MissionPopupSlotDaily_SetProgress final
{
public:
	EMissionProgressType                          _progress_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2612[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _count;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _target_count;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_SetProgress) == 0x000004, "Wrong alignment on UI_MissionPopupSlotDaily_SetProgress");
static_assert(sizeof(UI_MissionPopupSlotDaily_SetProgress) == 0x00000C, "Wrong size on UI_MissionPopupSlotDaily_SetProgress");
static_assert(offsetof(UI_MissionPopupSlotDaily_SetProgress, _progress_type) == 0x000000, "Member 'UI_MissionPopupSlotDaily_SetProgress::_progress_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotDaily_SetProgress, _count) == 0x000004, "Member 'UI_MissionPopupSlotDaily_SetProgress::_count' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotDaily_SetProgress, _target_count) == 0x000008, "Member 'UI_MissionPopupSlotDaily_SetProgress::_target_count' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupSlotDaily_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_SetTitle) == 0x000008, "Wrong alignment on UI_MissionPopupSlotDaily_SetTitle");
static_assert(sizeof(UI_MissionPopupSlotDaily_SetTitle) == 0x000018, "Wrong size on UI_MissionPopupSlotDaily_SetTitle");
static_assert(offsetof(UI_MissionPopupSlotDaily_SetTitle, _text) == 0x000000, "Member 'UI_MissionPopupSlotDaily_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.ShowChangeBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotDaily_ShowChangeBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_ShowChangeBtn) == 0x000001, "Wrong alignment on UI_MissionPopupSlotDaily_ShowChangeBtn");
static_assert(sizeof(UI_MissionPopupSlotDaily_ShowChangeBtn) == 0x000001, "Wrong size on UI_MissionPopupSlotDaily_ShowChangeBtn");
static_assert(offsetof(UI_MissionPopupSlotDaily_ShowChangeBtn, _show) == 0x000000, "Member 'UI_MissionPopupSlotDaily_ShowChangeBtn::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotDaily.UpdateDailyInfo
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionPopupSlotDaily_UpdateDailyInfo final
{
public:
	class UMission*                               _mission;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotDaily_UpdateDailyInfo) == 0x000008, "Wrong alignment on UI_MissionPopupSlotDaily_UpdateDailyInfo");
static_assert(sizeof(UI_MissionPopupSlotDaily_UpdateDailyInfo) == 0x000008, "Wrong size on UI_MissionPopupSlotDaily_UpdateDailyInfo");
static_assert(offsetof(UI_MissionPopupSlotDaily_UpdateDailyInfo, _mission) == 0x000000, "Member 'UI_MissionPopupSlotDaily_UpdateDailyInfo::_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.OnUpdateMission
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupSlotMaster_OnUpdateMission final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2614[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_OnUpdateMission) == 0x000008, "Wrong alignment on UI_MissionPopupSlotMaster_OnUpdateMission");
static_assert(sizeof(UI_MissionPopupSlotMaster_OnUpdateMission) == 0x000010, "Wrong size on UI_MissionPopupSlotMaster_OnUpdateMission");
static_assert(offsetof(UI_MissionPopupSlotMaster_OnUpdateMission, _type) == 0x000000, "Member 'UI_MissionPopupSlotMaster_OnUpdateMission::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotMaster_OnUpdateMission, _updated_mission) == 0x000008, "Member 'UI_MissionPopupSlotMaster_OnUpdateMission::_updated_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.SetCanReward
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotMaster_SetCanReward final
{
public:
	bool                                          _can_reward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_SetCanReward) == 0x000001, "Wrong alignment on UI_MissionPopupSlotMaster_SetCanReward");
static_assert(sizeof(UI_MissionPopupSlotMaster_SetCanReward) == 0x000001, "Wrong size on UI_MissionPopupSlotMaster_SetCanReward");
static_assert(offsetof(UI_MissionPopupSlotMaster_SetCanReward, _can_reward) == 0x000000, "Member 'UI_MissionPopupSlotMaster_SetCanReward::_can_reward' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupSlotMaster_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_SetDesc) == 0x000008, "Wrong alignment on UI_MissionPopupSlotMaster_SetDesc");
static_assert(sizeof(UI_MissionPopupSlotMaster_SetDesc) == 0x000018, "Wrong size on UI_MissionPopupSlotMaster_SetDesc");
static_assert(offsetof(UI_MissionPopupSlotMaster_SetDesc, _text) == 0x000000, "Member 'UI_MissionPopupSlotMaster_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.SetProgress
// 0x000C (0x000C - 0x0000)
struct UI_MissionPopupSlotMaster_SetProgress final
{
public:
	EMissionProgressType                          _progress_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2615[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _count;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _target_count;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_SetProgress) == 0x000004, "Wrong alignment on UI_MissionPopupSlotMaster_SetProgress");
static_assert(sizeof(UI_MissionPopupSlotMaster_SetProgress) == 0x00000C, "Wrong size on UI_MissionPopupSlotMaster_SetProgress");
static_assert(offsetof(UI_MissionPopupSlotMaster_SetProgress, _progress_type) == 0x000000, "Member 'UI_MissionPopupSlotMaster_SetProgress::_progress_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotMaster_SetProgress, _count) == 0x000004, "Member 'UI_MissionPopupSlotMaster_SetProgress::_count' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupSlotMaster_SetProgress, _target_count) == 0x000008, "Member 'UI_MissionPopupSlotMaster_SetProgress::_target_count' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupSlotMaster_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_SetTitle) == 0x000008, "Wrong alignment on UI_MissionPopupSlotMaster_SetTitle");
static_assert(sizeof(UI_MissionPopupSlotMaster_SetTitle) == 0x000018, "Wrong size on UI_MissionPopupSlotMaster_SetTitle");
static_assert(offsetof(UI_MissionPopupSlotMaster_SetTitle, _text) == 0x000000, "Member 'UI_MissionPopupSlotMaster_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.ShowChangeBtn
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupSlotMaster_ShowChangeBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_ShowChangeBtn) == 0x000001, "Wrong alignment on UI_MissionPopupSlotMaster_ShowChangeBtn");
static_assert(sizeof(UI_MissionPopupSlotMaster_ShowChangeBtn) == 0x000001, "Wrong size on UI_MissionPopupSlotMaster_ShowChangeBtn");
static_assert(offsetof(UI_MissionPopupSlotMaster_ShowChangeBtn, _show) == 0x000000, "Member 'UI_MissionPopupSlotMaster_ShowChangeBtn::_show' has a wrong offset!");

// Function Stigma.UI_MissionPopupSlotMaster.UpdateMasterInfo
// 0x0008 (0x0008 - 0x0000)
struct UI_MissionPopupSlotMaster_UpdateMasterInfo final
{
public:
	class UMission*                               _mission;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupSlotMaster_UpdateMasterInfo) == 0x000008, "Wrong alignment on UI_MissionPopupSlotMaster_UpdateMasterInfo");
static_assert(sizeof(UI_MissionPopupSlotMaster_UpdateMasterInfo) == 0x000008, "Wrong size on UI_MissionPopupSlotMaster_UpdateMasterInfo");
static_assert(offsetof(UI_MissionPopupSlotMaster_UpdateMasterInfo, _mission) == 0x000000, "Member 'UI_MissionPopupSlotMaster_UpdateMasterInfo::_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.OnUpdateMission
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupTab_OnUpdateMission final
{
public:
	EMissionUpdateType                            _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2617[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               _updated_mission;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_OnUpdateMission) == 0x000008, "Wrong alignment on UI_MissionPopupTab_OnUpdateMission");
static_assert(sizeof(UI_MissionPopupTab_OnUpdateMission) == 0x000010, "Wrong size on UI_MissionPopupTab_OnUpdateMission");
static_assert(offsetof(UI_MissionPopupTab_OnUpdateMission, _type) == 0x000000, "Member 'UI_MissionPopupTab_OnUpdateMission::_type' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupTab_OnUpdateMission, _updated_mission) == 0x000008, "Member 'UI_MissionPopupTab_OnUpdateMission::_updated_mission' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.SetCompleted
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupTab_SetCompleted final
{
public:
	bool                                          _completed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_SetCompleted) == 0x000001, "Wrong alignment on UI_MissionPopupTab_SetCompleted");
static_assert(sizeof(UI_MissionPopupTab_SetCompleted) == 0x000001, "Wrong size on UI_MissionPopupTab_SetCompleted");
static_assert(offsetof(UI_MissionPopupTab_SetCompleted, _completed) == 0x000000, "Member 'UI_MissionPopupTab_SetCompleted::_completed' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.SetImminent
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionPopupTab_SetImminent final
{
public:
	bool                                          _imminent;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2618[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTimespan                              _remain_time_span;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_SetImminent) == 0x000008, "Wrong alignment on UI_MissionPopupTab_SetImminent");
static_assert(sizeof(UI_MissionPopupTab_SetImminent) == 0x000010, "Wrong size on UI_MissionPopupTab_SetImminent");
static_assert(offsetof(UI_MissionPopupTab_SetImminent, _imminent) == 0x000000, "Member 'UI_MissionPopupTab_SetImminent::_imminent' has a wrong offset!");
static_assert(offsetof(UI_MissionPopupTab_SetImminent, _remain_time_span) == 0x000008, "Member 'UI_MissionPopupTab_SetImminent::_remain_time_span' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupTab_SetLocked final
{
public:
	bool                                          _locked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_SetLocked) == 0x000001, "Wrong alignment on UI_MissionPopupTab_SetLocked");
static_assert(sizeof(UI_MissionPopupTab_SetLocked) == 0x000001, "Wrong size on UI_MissionPopupTab_SetLocked");
static_assert(offsetof(UI_MissionPopupTab_SetLocked, _locked) == 0x000000, "Member 'UI_MissionPopupTab_SetLocked::_locked' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.SetPassActivate
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupTab_SetPassActivate final
{
public:
	bool                                          _activate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_SetPassActivate) == 0x000001, "Wrong alignment on UI_MissionPopupTab_SetPassActivate");
static_assert(sizeof(UI_MissionPopupTab_SetPassActivate) == 0x000001, "Wrong size on UI_MissionPopupTab_SetPassActivate");
static_assert(offsetof(UI_MissionPopupTab_SetPassActivate, _activate) == 0x000000, "Member 'UI_MissionPopupTab_SetPassActivate::_activate' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.SetRedDot
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionPopupTab_SetRedDot final
{
public:
	bool                                          _red_dot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_SetRedDot) == 0x000001, "Wrong alignment on UI_MissionPopupTab_SetRedDot");
static_assert(sizeof(UI_MissionPopupTab_SetRedDot) == 0x000001, "Wrong size on UI_MissionPopupTab_SetRedDot");
static_assert(offsetof(UI_MissionPopupTab_SetRedDot, _red_dot) == 0x000000, "Member 'UI_MissionPopupTab_SetRedDot::_red_dot' has a wrong offset!");

// Function Stigma.UI_MissionPopupTab.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionPopupTab_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionPopupTab_SetTitle) == 0x000008, "Wrong alignment on UI_MissionPopupTab_SetTitle");
static_assert(sizeof(UI_MissionPopupTab_SetTitle) == 0x000018, "Wrong size on UI_MissionPopupTab_SetTitle");
static_assert(offsetof(UI_MissionPopupTab_SetTitle, _text) == 0x000000, "Member 'UI_MissionPopupTab_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionSuccessSlot.SetColor
// 0x0010 (0x0010 - 0x0000)
struct UI_MissionSuccessSlot_SetColor final
{
public:
	struct FLinearColor                           _color;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionSuccessSlot_SetColor) == 0x000004, "Wrong alignment on UI_MissionSuccessSlot_SetColor");
static_assert(sizeof(UI_MissionSuccessSlot_SetColor) == 0x000010, "Wrong size on UI_MissionSuccessSlot_SetColor");
static_assert(offsetof(UI_MissionSuccessSlot_SetColor, _color) == 0x000000, "Member 'UI_MissionSuccessSlot_SetColor::_color' has a wrong offset!");

// Function Stigma.UI_MissionSuccessSlot.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_MissionSuccessSlot_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionSuccessSlot_SetTitle) == 0x000008, "Wrong alignment on UI_MissionSuccessSlot_SetTitle");
static_assert(sizeof(UI_MissionSuccessSlot_SetTitle) == 0x000018, "Wrong size on UI_MissionSuccessSlot_SetTitle");
static_assert(offsetof(UI_MissionSuccessSlot_SetTitle, _text) == 0x000000, "Member 'UI_MissionSuccessSlot_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_MissionSuccessSlot.SetType
// 0x0001 (0x0001 - 0x0000)
struct UI_MissionSuccessSlot_SetType final
{
public:
	EMissionType                                  _mission_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_MissionSuccessSlot_SetType) == 0x000001, "Wrong alignment on UI_MissionSuccessSlot_SetType");
static_assert(sizeof(UI_MissionSuccessSlot_SetType) == 0x000001, "Wrong size on UI_MissionSuccessSlot_SetType");
static_assert(offsetof(UI_MissionSuccessSlot_SetType, _mission_type) == 0x000000, "Member 'UI_MissionSuccessSlot_SetType::_mission_type' has a wrong offset!");

// Function Stigma.UI_ModeRecordItem.SetValues
// 0x0028 (0x0028 - 0x0000)
struct UI_ModeRecordItem_SetValues final
{
public:
	struct FModeRecord                            _records;                                          // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ModeRecordItem_SetValues) == 0x000008, "Wrong alignment on UI_ModeRecordItem_SetValues");
static_assert(sizeof(UI_ModeRecordItem_SetValues) == 0x000028, "Wrong size on UI_ModeRecordItem_SetValues");
static_assert(offsetof(UI_ModeRecordItem_SetValues, _records) == 0x000000, "Member 'UI_ModeRecordItem_SetValues::_records' has a wrong offset!");

// Function Stigma.UI_Nickname.SetNickname
// 0x0020 (0x0020 - 0x0000)
struct UI_Nickname_SetNickname final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2619[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_Nickname_SetNickname) == 0x000008, "Wrong alignment on UI_Nickname_SetNickname");
static_assert(sizeof(UI_Nickname_SetNickname) == 0x000020, "Wrong size on UI_Nickname_SetNickname");
static_assert(offsetof(UI_Nickname_SetNickname, _text) == 0x000000, "Member 'UI_Nickname_SetNickname::_text' has a wrong offset!");
static_assert(offsetof(UI_Nickname_SetNickname, ReturnValue) == 0x000018, "Member 'UI_Nickname_SetNickname::ReturnValue' has a wrong offset!");

// Function Stigma.UI_Nickname.SetPlayerSide
// 0x0002 (0x0002 - 0x0000)
struct UI_Nickname_SetPlayerSide final
{
public:
	EPlayerSide                                   _side;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Nickname_SetPlayerSide) == 0x000001, "Wrong alignment on UI_Nickname_SetPlayerSide");
static_assert(sizeof(UI_Nickname_SetPlayerSide) == 0x000002, "Wrong size on UI_Nickname_SetPlayerSide");
static_assert(offsetof(UI_Nickname_SetPlayerSide, _side) == 0x000000, "Member 'UI_Nickname_SetPlayerSide::_side' has a wrong offset!");
static_assert(offsetof(UI_Nickname_SetPlayerSide, ReturnValue) == 0x000001, "Member 'UI_Nickname_SetPlayerSide::ReturnValue' has a wrong offset!");

// Function Stigma.UI_NoticePopup.CheckDoNotOpen
// 0x0001 (0x0001 - 0x0000)
struct UI_NoticePopup_CheckDoNotOpen final
{
public:
	bool                                          _is_checked;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_NoticePopup_CheckDoNotOpen) == 0x000001, "Wrong alignment on UI_NoticePopup_CheckDoNotOpen");
static_assert(sizeof(UI_NoticePopup_CheckDoNotOpen) == 0x000001, "Wrong size on UI_NoticePopup_CheckDoNotOpen");
static_assert(offsetof(UI_NoticePopup_CheckDoNotOpen, _is_checked) == 0x000000, "Member 'UI_NoticePopup_CheckDoNotOpen::_is_checked' has a wrong offset!");

// Function Stigma.UI_NoticePopup.InitWidget
// 0x0020 (0x0020 - 0x0000)
struct UI_NoticePopup_InitWidget final
{
public:
	struct FLoginNotice                           _packet;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _is_auto_open;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_NoticePopup_InitWidget) == 0x000008, "Wrong alignment on UI_NoticePopup_InitWidget");
static_assert(sizeof(UI_NoticePopup_InitWidget) == 0x000020, "Wrong size on UI_NoticePopup_InitWidget");
static_assert(offsetof(UI_NoticePopup_InitWidget, _packet) == 0x000000, "Member 'UI_NoticePopup_InitWidget::_packet' has a wrong offset!");
static_assert(offsetof(UI_NoticePopup_InitWidget, _is_auto_open) == 0x000018, "Member 'UI_NoticePopup_InitWidget::_is_auto_open' has a wrong offset!");

// Function Stigma.UI_OptionPageBase.GetPageType
// 0x0001 (0x0001 - 0x0000)
struct UI_OptionPageBase_GetPageType final
{
public:
	EOptionCategoryType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionPageBase_GetPageType) == 0x000001, "Wrong alignment on UI_OptionPageBase_GetPageType");
static_assert(sizeof(UI_OptionPageBase_GetPageType) == 0x000001, "Wrong size on UI_OptionPageBase_GetPageType");
static_assert(offsetof(UI_OptionPageBase_GetPageType, ReturnValue) == 0x000000, "Member 'UI_OptionPageBase_GetPageType::ReturnValue' has a wrong offset!");

// Function Stigma.UI_OptionPageBase.InvokeOnPageContextChanged
// 0x0001 (0x0001 - 0x0000)
struct UI_OptionPageBase_InvokeOnPageContextChanged final
{
public:
	bool                                          _apply_real_time;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionPageBase_InvokeOnPageContextChanged) == 0x000001, "Wrong alignment on UI_OptionPageBase_InvokeOnPageContextChanged");
static_assert(sizeof(UI_OptionPageBase_InvokeOnPageContextChanged) == 0x000001, "Wrong size on UI_OptionPageBase_InvokeOnPageContextChanged");
static_assert(offsetof(UI_OptionPageBase_InvokeOnPageContextChanged, _apply_real_time) == 0x000000, "Member 'UI_OptionPageBase_InvokeOnPageContextChanged::_apply_real_time' has a wrong offset!");

// Function Stigma.UI_OptionPageBase.OnPanelHoverChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_OptionPageBase_OnPanelHoverChanged final
{
public:
	const class UCtrl_OptionItemEntry*            _panel;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_hover;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_OptionPageBase_OnPanelHoverChanged) == 0x000008, "Wrong alignment on UI_OptionPageBase_OnPanelHoverChanged");
static_assert(sizeof(UI_OptionPageBase_OnPanelHoverChanged) == 0x000010, "Wrong size on UI_OptionPageBase_OnPanelHoverChanged");
static_assert(offsetof(UI_OptionPageBase_OnPanelHoverChanged, _panel) == 0x000000, "Member 'UI_OptionPageBase_OnPanelHoverChanged::_panel' has a wrong offset!");
static_assert(offsetof(UI_OptionPageBase_OnPanelHoverChanged, _is_hover) == 0x000008, "Member 'UI_OptionPageBase_OnPanelHoverChanged::_is_hover' has a wrong offset!");

// Function Stigma.UI_OptionPageBase.RegisterOnPageDataChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_OptionPageBase_RegisterOnPageDataChanged final
{
public:
	TDelegate<void(class UUI_OptionPageBase* _page)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionPageBase_RegisterOnPageDataChanged) == 0x000004, "Wrong alignment on UI_OptionPageBase_RegisterOnPageDataChanged");
static_assert(sizeof(UI_OptionPageBase_RegisterOnPageDataChanged) == 0x000010, "Wrong size on UI_OptionPageBase_RegisterOnPageDataChanged");
static_assert(offsetof(UI_OptionPageBase_RegisterOnPageDataChanged, _callback) == 0x000000, "Member 'UI_OptionPageBase_RegisterOnPageDataChanged::_callback' has a wrong offset!");

// Function Stigma.UI_OptionPopupBase.OnProcReset
// 0x0001 (0x0001 - 0x0000)
struct UI_OptionPopupBase_OnProcReset final
{
public:
	EOptionPopupResetType                         _reset_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionPopupBase_OnProcReset) == 0x000001, "Wrong alignment on UI_OptionPopupBase_OnProcReset");
static_assert(sizeof(UI_OptionPopupBase_OnProcReset) == 0x000001, "Wrong size on UI_OptionPopupBase_OnProcReset");
static_assert(offsetof(UI_OptionPopupBase_OnProcReset, _reset_type) == 0x000000, "Member 'UI_OptionPopupBase_OnProcReset::_reset_type' has a wrong offset!");

// Function Stigma.UI_OptionPopupBase.ProcUpdateOptionContext
// 0x0004 (0x0004 - 0x0000)
struct UI_OptionPopupBase_ProcUpdateOptionContext final
{
public:
	int32                                         _page_idx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionPopupBase_ProcUpdateOptionContext) == 0x000004, "Wrong alignment on UI_OptionPopupBase_ProcUpdateOptionContext");
static_assert(sizeof(UI_OptionPopupBase_ProcUpdateOptionContext) == 0x000004, "Wrong size on UI_OptionPopupBase_ProcUpdateOptionContext");
static_assert(offsetof(UI_OptionPopupBase_ProcUpdateOptionContext, _page_idx) == 0x000000, "Member 'UI_OptionPopupBase_ProcUpdateOptionContext::_page_idx' has a wrong offset!");

// Function Stigma.UI_OptionResetMessageBoxBase.GetSelectedResetType
// 0x0001 (0x0001 - 0x0000)
struct UI_OptionResetMessageBoxBase_GetSelectedResetType final
{
public:
	EOptionPopupResetType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionResetMessageBoxBase_GetSelectedResetType) == 0x000001, "Wrong alignment on UI_OptionResetMessageBoxBase_GetSelectedResetType");
static_assert(sizeof(UI_OptionResetMessageBoxBase_GetSelectedResetType) == 0x000001, "Wrong size on UI_OptionResetMessageBoxBase_GetSelectedResetType");
static_assert(offsetof(UI_OptionResetMessageBoxBase_GetSelectedResetType, ReturnValue) == 0x000000, "Member 'UI_OptionResetMessageBoxBase_GetSelectedResetType::ReturnValue' has a wrong offset!");

// Function Stigma.UI_OptionResetMessageBoxBase.SetActiveAdditionalAlertText
// 0x0001 (0x0001 - 0x0000)
struct UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText) == 0x000001, "Wrong alignment on UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText");
static_assert(sizeof(UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText) == 0x000001, "Wrong size on UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText");
static_assert(offsetof(UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText, _flag) == 0x000000, "Member 'UI_OptionResetMessageBoxBase_SetActiveAdditionalAlertText::_flag' has a wrong offset!");

// Function Stigma.UI_OptionResetMessageBoxBase.SetCurrentTab
// 0x0001 (0x0001 - 0x0000)
struct UI_OptionResetMessageBoxBase_SetCurrentTab final
{
public:
	EOptionCategoryType                           _tab_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_OptionResetMessageBoxBase_SetCurrentTab) == 0x000001, "Wrong alignment on UI_OptionResetMessageBoxBase_SetCurrentTab");
static_assert(sizeof(UI_OptionResetMessageBoxBase_SetCurrentTab) == 0x000001, "Wrong size on UI_OptionResetMessageBoxBase_SetCurrentTab");
static_assert(offsetof(UI_OptionResetMessageBoxBase_SetCurrentTab, _tab_type) == 0x000000, "Member 'UI_OptionResetMessageBoxBase_SetCurrentTab::_tab_type' has a wrong offset!");

// Function Stigma.UI_Option_Control.RegisterOnKeyMappingChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_Option_Control_RegisterOnKeyMappingChanged final
{
public:
	TDelegate<void()>                             _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Option_Control_RegisterOnKeyMappingChanged) == 0x000004, "Wrong alignment on UI_Option_Control_RegisterOnKeyMappingChanged");
static_assert(sizeof(UI_Option_Control_RegisterOnKeyMappingChanged) == 0x000010, "Wrong size on UI_Option_Control_RegisterOnKeyMappingChanged");
static_assert(offsetof(UI_Option_Control_RegisterOnKeyMappingChanged, _callback) == 0x000000, "Member 'UI_Option_Control_RegisterOnKeyMappingChanged::_callback' has a wrong offset!");

// Function Stigma.UI_Option_Control.UnRegisterOnKeyMappingChanged
// 0x0008 (0x0008 - 0x0000)
struct UI_Option_Control_UnRegisterOnKeyMappingChanged final
{
public:
	class UObject*                                _binder;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Option_Control_UnRegisterOnKeyMappingChanged) == 0x000008, "Wrong alignment on UI_Option_Control_UnRegisterOnKeyMappingChanged");
static_assert(sizeof(UI_Option_Control_UnRegisterOnKeyMappingChanged) == 0x000008, "Wrong size on UI_Option_Control_UnRegisterOnKeyMappingChanged");
static_assert(offsetof(UI_Option_Control_UnRegisterOnKeyMappingChanged, _binder) == 0x000000, "Member 'UI_Option_Control_UnRegisterOnKeyMappingChanged::_binder' has a wrong offset!");

// Function Stigma.UI_PanelPlayerBase.SetActiveInviteButton
// 0x0001 (0x0001 - 0x0000)
struct UI_PanelPlayerBase_SetActiveInviteButton final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PanelPlayerBase_SetActiveInviteButton) == 0x000001, "Wrong alignment on UI_PanelPlayerBase_SetActiveInviteButton");
static_assert(sizeof(UI_PanelPlayerBase_SetActiveInviteButton) == 0x000001, "Wrong size on UI_PanelPlayerBase_SetActiveInviteButton");
static_assert(offsetof(UI_PanelPlayerBase_SetActiveInviteButton, _flag) == 0x000000, "Member 'UI_PanelPlayerBase_SetActiveInviteButton::_flag' has a wrong offset!");

// Function Stigma.UI_PanelPlayerBase.SetActiveTooltip
// 0x0001 (0x0001 - 0x0000)
struct UI_PanelPlayerBase_SetActiveTooltip final
{
public:
	bool                                          _flag;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PanelPlayerBase_SetActiveTooltip) == 0x000001, "Wrong alignment on UI_PanelPlayerBase_SetActiveTooltip");
static_assert(sizeof(UI_PanelPlayerBase_SetActiveTooltip) == 0x000001, "Wrong size on UI_PanelPlayerBase_SetActiveTooltip");
static_assert(offsetof(UI_PanelPlayerBase_SetActiveTooltip, _flag) == 0x000000, "Member 'UI_PanelPlayerBase_SetActiveTooltip::_flag' has a wrong offset!");

// Function Stigma.UI_PanelPlayerBase.ShowNameTagByPartyMember
// 0x0010 (0x0010 - 0x0000)
struct UI_PanelPlayerBase_ShowNameTagByPartyMember final
{
public:
	class UUserProfile*                           _member;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_leader;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2624[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PanelPlayerBase_ShowNameTagByPartyMember) == 0x000008, "Wrong alignment on UI_PanelPlayerBase_ShowNameTagByPartyMember");
static_assert(sizeof(UI_PanelPlayerBase_ShowNameTagByPartyMember) == 0x000010, "Wrong size on UI_PanelPlayerBase_ShowNameTagByPartyMember");
static_assert(offsetof(UI_PanelPlayerBase_ShowNameTagByPartyMember, _member) == 0x000000, "Member 'UI_PanelPlayerBase_ShowNameTagByPartyMember::_member' has a wrong offset!");
static_assert(offsetof(UI_PanelPlayerBase_ShowNameTagByPartyMember, _is_leader) == 0x000008, "Member 'UI_PanelPlayerBase_ShowNameTagByPartyMember::_is_leader' has a wrong offset!");

// Function Stigma.UI_PanelPlayerBase.IsBoundMember
// 0x0001 (0x0001 - 0x0000)
struct UI_PanelPlayerBase_IsBoundMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PanelPlayerBase_IsBoundMember) == 0x000001, "Wrong alignment on UI_PanelPlayerBase_IsBoundMember");
static_assert(sizeof(UI_PanelPlayerBase_IsBoundMember) == 0x000001, "Wrong size on UI_PanelPlayerBase_IsBoundMember");
static_assert(offsetof(UI_PanelPlayerBase_IsBoundMember, ReturnValue) == 0x000000, "Member 'UI_PanelPlayerBase_IsBoundMember::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PartyMemberNameTag.GetHoverToolTipEntries
// 0x0010 (0x0010 - 0x0000)
struct UI_PartyMemberNameTag_GetHoverToolTipEntries final
{
public:
	TArray<struct FHoverMenuEntry>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyMemberNameTag_GetHoverToolTipEntries) == 0x000008, "Wrong alignment on UI_PartyMemberNameTag_GetHoverToolTipEntries");
static_assert(sizeof(UI_PartyMemberNameTag_GetHoverToolTipEntries) == 0x000010, "Wrong size on UI_PartyMemberNameTag_GetHoverToolTipEntries");
static_assert(offsetof(UI_PartyMemberNameTag_GetHoverToolTipEntries, ReturnValue) == 0x000000, "Member 'UI_PartyMemberNameTag_GetHoverToolTipEntries::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PartyMemberNameTag.InitNameTag
// 0x0010 (0x0010 - 0x0000)
struct UI_PartyMemberNameTag_InitNameTag final
{
public:
	class UUserProfile*                           _party_member;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_leader;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2626[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PartyMemberNameTag_InitNameTag) == 0x000008, "Wrong alignment on UI_PartyMemberNameTag_InitNameTag");
static_assert(sizeof(UI_PartyMemberNameTag_InitNameTag) == 0x000010, "Wrong size on UI_PartyMemberNameTag_InitNameTag");
static_assert(offsetof(UI_PartyMemberNameTag_InitNameTag, _party_member) == 0x000000, "Member 'UI_PartyMemberNameTag_InitNameTag::_party_member' has a wrong offset!");
static_assert(offsetof(UI_PartyMemberNameTag_InitNameTag, _is_leader) == 0x000008, "Member 'UI_PartyMemberNameTag_InitNameTag::_is_leader' has a wrong offset!");

// Function Stigma.UI_PartyMemberNameTag.OnAck_AcceptAskFriend
// 0x0058 (0x0058 - 0x0000)
struct UI_PartyMemberNameTag_OnAck_AcceptAskFriend final
{
public:
	EResultCode                                   _net_result_code;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2627[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_FriendUpdate                      _response;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyMemberNameTag_OnAck_AcceptAskFriend) == 0x000008, "Wrong alignment on UI_PartyMemberNameTag_OnAck_AcceptAskFriend");
static_assert(sizeof(UI_PartyMemberNameTag_OnAck_AcceptAskFriend) == 0x000058, "Wrong size on UI_PartyMemberNameTag_OnAck_AcceptAskFriend");
static_assert(offsetof(UI_PartyMemberNameTag_OnAck_AcceptAskFriend, _net_result_code) == 0x000000, "Member 'UI_PartyMemberNameTag_OnAck_AcceptAskFriend::_net_result_code' has a wrong offset!");
static_assert(offsetof(UI_PartyMemberNameTag_OnAck_AcceptAskFriend, _response) == 0x000008, "Member 'UI_PartyMemberNameTag_OnAck_AcceptAskFriend::_response' has a wrong offset!");
static_assert(offsetof(UI_PartyMemberNameTag_OnAck_AcceptAskFriend, ReturnValue) == 0x000038, "Member 'UI_PartyMemberNameTag_OnAck_AcceptAskFriend::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PartyMemberNameTag.OnAck_AskFriend
// 0x0038 (0x0038 - 0x0000)
struct UI_PartyMemberNameTag_OnAck_AskFriend final
{
public:
	EResultCode                                   _net_result_code;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2628[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_Friend                            _response;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyMemberNameTag_OnAck_AskFriend) == 0x000008, "Wrong alignment on UI_PartyMemberNameTag_OnAck_AskFriend");
static_assert(sizeof(UI_PartyMemberNameTag_OnAck_AskFriend) == 0x000038, "Wrong size on UI_PartyMemberNameTag_OnAck_AskFriend");
static_assert(offsetof(UI_PartyMemberNameTag_OnAck_AskFriend, _net_result_code) == 0x000000, "Member 'UI_PartyMemberNameTag_OnAck_AskFriend::_net_result_code' has a wrong offset!");
static_assert(offsetof(UI_PartyMemberNameTag_OnAck_AskFriend, _response) == 0x000008, "Member 'UI_PartyMemberNameTag_OnAck_AskFriend::_response' has a wrong offset!");
static_assert(offsetof(UI_PartyMemberNameTag_OnAck_AskFriend, ReturnValue) == 0x000018, "Member 'UI_PartyMemberNameTag_OnAck_AskFriend::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PartyMemberNameTag.GetPartyMember
// 0x0008 (0x0008 - 0x0000)
struct UI_PartyMemberNameTag_GetPartyMember final
{
public:
	class UUserProfile*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyMemberNameTag_GetPartyMember) == 0x000008, "Wrong alignment on UI_PartyMemberNameTag_GetPartyMember");
static_assert(sizeof(UI_PartyMemberNameTag_GetPartyMember) == 0x000008, "Wrong size on UI_PartyMemberNameTag_GetPartyMember");
static_assert(offsetof(UI_PartyMemberNameTag_GetPartyMember, ReturnValue) == 0x000000, "Member 'UI_PartyMemberNameTag_GetPartyMember::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PartyNotifySlot.OnProcMsgBoxClick
// 0x0010 (0x0010 - 0x0000)
struct UI_PartyNotifySlot_OnProcMsgBoxClick final
{
public:
	const class UPopupBase*                       _popup;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ctrl_id;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyNotifySlot_OnProcMsgBoxClick) == 0x000008, "Wrong alignment on UI_PartyNotifySlot_OnProcMsgBoxClick");
static_assert(sizeof(UI_PartyNotifySlot_OnProcMsgBoxClick) == 0x000010, "Wrong size on UI_PartyNotifySlot_OnProcMsgBoxClick");
static_assert(offsetof(UI_PartyNotifySlot_OnProcMsgBoxClick, _popup) == 0x000000, "Member 'UI_PartyNotifySlot_OnProcMsgBoxClick::_popup' has a wrong offset!");
static_assert(offsetof(UI_PartyNotifySlot_OnProcMsgBoxClick, _ctrl_id) == 0x000008, "Member 'UI_PartyNotifySlot_OnProcMsgBoxClick::_ctrl_id' has a wrong offset!");

// Function Stigma.UI_PartyNotifySlot.SetBackground
// 0x0028 (0x0028 - 0x0000)
struct UI_PartyNotifySlot_SetBackground final
{
public:
	TSoftObjectPtr<class UTexture2D>              _texture;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyNotifySlot_SetBackground) == 0x000008, "Wrong alignment on UI_PartyNotifySlot_SetBackground");
static_assert(sizeof(UI_PartyNotifySlot_SetBackground) == 0x000028, "Wrong size on UI_PartyNotifySlot_SetBackground");
static_assert(offsetof(UI_PartyNotifySlot_SetBackground, _texture) == 0x000000, "Member 'UI_PartyNotifySlot_SetBackground::_texture' has a wrong offset!");

// Function Stigma.UI_PartyNotifySlot.SetText
// 0x0018 (0x0018 - 0x0000)
struct UI_PartyNotifySlot_SetText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PartyNotifySlot_SetText) == 0x000008, "Wrong alignment on UI_PartyNotifySlot_SetText");
static_assert(sizeof(UI_PartyNotifySlot_SetText) == 0x000018, "Wrong size on UI_PartyNotifySlot_SetText");
static_assert(offsetof(UI_PartyNotifySlot_SetText, _text) == 0x000000, "Member 'UI_PartyNotifySlot_SetText::_text' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_PassiveSettingDetail_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_SetDesc) == 0x000008, "Wrong alignment on UI_PassiveSettingDetail_SetDesc");
static_assert(sizeof(UI_PassiveSettingDetail_SetDesc) == 0x000018, "Wrong size on UI_PassiveSettingDetail_SetDesc");
static_assert(offsetof(UI_PassiveSettingDetail_SetDesc, _text) == 0x000000, "Member 'UI_PassiveSettingDetail_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.SetIsBuffed
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingDetail_SetIsBuffed final
{
public:
	bool                                          _is_buffed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_SetIsBuffed) == 0x000001, "Wrong alignment on UI_PassiveSettingDetail_SetIsBuffed");
static_assert(sizeof(UI_PassiveSettingDetail_SetIsBuffed) == 0x000001, "Wrong size on UI_PassiveSettingDetail_SetIsBuffed");
static_assert(offsetof(UI_PassiveSettingDetail_SetIsBuffed, _is_buffed) == 0x000000, "Member 'UI_PassiveSettingDetail_SetIsBuffed::_is_buffed' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.SetIsCurrent
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingDetail_SetIsCurrent final
{
public:
	bool                                          _is_current;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_SetIsCurrent) == 0x000001, "Wrong alignment on UI_PassiveSettingDetail_SetIsCurrent");
static_assert(sizeof(UI_PassiveSettingDetail_SetIsCurrent) == 0x000001, "Wrong size on UI_PassiveSettingDetail_SetIsCurrent");
static_assert(offsetof(UI_PassiveSettingDetail_SetIsCurrent, _is_current) == 0x000000, "Member 'UI_PassiveSettingDetail_SetIsCurrent::_is_current' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.SetIsMaxCanLevelUp
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingDetail_SetIsMaxCanLevelUp final
{
public:
	bool                                          _is_max;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_SetIsMaxCanLevelUp) == 0x000001, "Wrong alignment on UI_PassiveSettingDetail_SetIsMaxCanLevelUp");
static_assert(sizeof(UI_PassiveSettingDetail_SetIsMaxCanLevelUp) == 0x000001, "Wrong size on UI_PassiveSettingDetail_SetIsMaxCanLevelUp");
static_assert(offsetof(UI_PassiveSettingDetail_SetIsMaxCanLevelUp, _is_max) == 0x000000, "Member 'UI_PassiveSettingDetail_SetIsMaxCanLevelUp::_is_max' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.SetLearned
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingDetail_SetLearned final
{
public:
	bool                                          _learned;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_SetLearned) == 0x000001, "Wrong alignment on UI_PassiveSettingDetail_SetLearned");
static_assert(sizeof(UI_PassiveSettingDetail_SetLearned) == 0x000001, "Wrong size on UI_PassiveSettingDetail_SetLearned");
static_assert(offsetof(UI_PassiveSettingDetail_SetLearned, _learned) == 0x000000, "Member 'UI_PassiveSettingDetail_SetLearned::_learned' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.SetLevelLockText
// 0x0004 (0x0004 - 0x0000)
struct UI_PassiveSettingDetail_SetLevelLockText final
{
public:
	int32                                         _lock_level;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_SetLevelLockText) == 0x000004, "Wrong alignment on UI_PassiveSettingDetail_SetLevelLockText");
static_assert(sizeof(UI_PassiveSettingDetail_SetLevelLockText) == 0x000004, "Wrong size on UI_PassiveSettingDetail_SetLevelLockText");
static_assert(offsetof(UI_PassiveSettingDetail_SetLevelLockText, _lock_level) == 0x000000, "Member 'UI_PassiveSettingDetail_SetLevelLockText::_lock_level' has a wrong offset!");

// Function Stigma.UI_PassiveSettingDetail.ShowLevelLock
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingDetail_ShowLevelLock final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingDetail_ShowLevelLock) == 0x000001, "Wrong alignment on UI_PassiveSettingDetail_ShowLevelLock");
static_assert(sizeof(UI_PassiveSettingDetail_ShowLevelLock) == 0x000001, "Wrong size on UI_PassiveSettingDetail_ShowLevelLock");
static_assert(offsetof(UI_PassiveSettingDetail_ShowLevelLock, _show) == 0x000000, "Member 'UI_PassiveSettingDetail_ShowLevelLock::_show' has a wrong offset!");

// Function Stigma.UI_PassiveSettingPage.OnSelectSlot
// 0x0010 (0x0010 - 0x0000)
struct UI_PassiveSettingPage_OnSelectSlot final
{
public:
	struct FPassiveSkillID                        _skill_id;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingPage_OnSelectSlot) == 0x000008, "Wrong alignment on UI_PassiveSettingPage_OnSelectSlot");
static_assert(sizeof(UI_PassiveSettingPage_OnSelectSlot) == 0x000010, "Wrong size on UI_PassiveSettingPage_OnSelectSlot");
static_assert(offsetof(UI_PassiveSettingPage_OnSelectSlot, _skill_id) == 0x000000, "Member 'UI_PassiveSettingPage_OnSelectSlot::_skill_id' has a wrong offset!");

// Function Stigma.UI_PassiveSettingPage.OnUpdateUserEvent
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingPage_OnUpdateUserEvent final
{
public:
	EUserEvent                                    _event;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingPage_OnUpdateUserEvent) == 0x000001, "Wrong alignment on UI_PassiveSettingPage_OnUpdateUserEvent");
static_assert(sizeof(UI_PassiveSettingPage_OnUpdateUserEvent) == 0x000001, "Wrong size on UI_PassiveSettingPage_OnUpdateUserEvent");
static_assert(offsetof(UI_PassiveSettingPage_OnUpdateUserEvent, _event) == 0x000000, "Member 'UI_PassiveSettingPage_OnUpdateUserEvent::_event' has a wrong offset!");

// Function Stigma.UI_PassiveSettingPage.SetCurrentPassiveSkillPoint
// 0x0004 (0x0004 - 0x0000)
struct UI_PassiveSettingPage_SetCurrentPassiveSkillPoint final
{
public:
	int32                                         _point;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingPage_SetCurrentPassiveSkillPoint) == 0x000004, "Wrong alignment on UI_PassiveSettingPage_SetCurrentPassiveSkillPoint");
static_assert(sizeof(UI_PassiveSettingPage_SetCurrentPassiveSkillPoint) == 0x000004, "Wrong size on UI_PassiveSettingPage_SetCurrentPassiveSkillPoint");
static_assert(offsetof(UI_PassiveSettingPage_SetCurrentPassiveSkillPoint, _point) == 0x000000, "Member 'UI_PassiveSettingPage_SetCurrentPassiveSkillPoint::_point' has a wrong offset!");

// Function Stigma.UI_PassiveSettingPage.SetTotalPassiveSkillPoint
// 0x0004 (0x0004 - 0x0000)
struct UI_PassiveSettingPage_SetTotalPassiveSkillPoint final
{
public:
	int32                                         _point;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingPage_SetTotalPassiveSkillPoint) == 0x000004, "Wrong alignment on UI_PassiveSettingPage_SetTotalPassiveSkillPoint");
static_assert(sizeof(UI_PassiveSettingPage_SetTotalPassiveSkillPoint) == 0x000004, "Wrong size on UI_PassiveSettingPage_SetTotalPassiveSkillPoint");
static_assert(offsetof(UI_PassiveSettingPage_SetTotalPassiveSkillPoint, _point) == 0x000000, "Member 'UI_PassiveSettingPage_SetTotalPassiveSkillPoint::_point' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.OnClickButton
// 0x0004 (0x0004 - 0x0000)
struct UI_PassiveSettingSlot_OnClickButton final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_OnClickButton) == 0x000004, "Wrong alignment on UI_PassiveSettingSlot_OnClickButton");
static_assert(sizeof(UI_PassiveSettingSlot_OnClickButton) == 0x000004, "Wrong size on UI_PassiveSettingSlot_OnClickButton");
static_assert(offsetof(UI_PassiveSettingSlot_OnClickButton, _level) == 0x000000, "Member 'UI_PassiveSettingSlot_OnClickButton::_level' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_PassiveSettingSlot_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_SetDesc) == 0x000008, "Wrong alignment on UI_PassiveSettingSlot_SetDesc");
static_assert(sizeof(UI_PassiveSettingSlot_SetDesc) == 0x000018, "Wrong size on UI_PassiveSettingSlot_SetDesc");
static_assert(offsetof(UI_PassiveSettingSlot_SetDesc, _text) == 0x000000, "Member 'UI_PassiveSettingSlot_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.SetIcon
// 0x0028 (0x0028 - 0x0000)
struct UI_PassiveSettingSlot_SetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_SetIcon) == 0x000008, "Wrong alignment on UI_PassiveSettingSlot_SetIcon");
static_assert(sizeof(UI_PassiveSettingSlot_SetIcon) == 0x000028, "Wrong size on UI_PassiveSettingSlot_SetIcon");
static_assert(offsetof(UI_PassiveSettingSlot_SetIcon, _Icon) == 0x000000, "Member 'UI_PassiveSettingSlot_SetIcon::_Icon' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.SetIsBoosted
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingSlot_SetIsBoosted final
{
public:
	bool                                          _is_boosted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_SetIsBoosted) == 0x000001, "Wrong alignment on UI_PassiveSettingSlot_SetIsBoosted");
static_assert(sizeof(UI_PassiveSettingSlot_SetIsBoosted) == 0x000001, "Wrong size on UI_PassiveSettingSlot_SetIsBoosted");
static_assert(offsetof(UI_PassiveSettingSlot_SetIsBoosted, _is_boosted) == 0x000000, "Member 'UI_PassiveSettingSlot_SetIsBoosted::_is_boosted' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.SetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingSlot_SetIsLocked final
{
public:
	bool                                          _is_locked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_SetIsLocked) == 0x000001, "Wrong alignment on UI_PassiveSettingSlot_SetIsLocked");
static_assert(sizeof(UI_PassiveSettingSlot_SetIsLocked) == 0x000001, "Wrong size on UI_PassiveSettingSlot_SetIsLocked");
static_assert(offsetof(UI_PassiveSettingSlot_SetIsLocked, _is_locked) == 0x000000, "Member 'UI_PassiveSettingSlot_SetIsLocked::_is_locked' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.SetLevelText
// 0x0018 (0x0018 - 0x0000)
struct UI_PassiveSettingSlot_SetLevelText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_SetLevelText) == 0x000008, "Wrong alignment on UI_PassiveSettingSlot_SetLevelText");
static_assert(sizeof(UI_PassiveSettingSlot_SetLevelText) == 0x000018, "Wrong size on UI_PassiveSettingSlot_SetLevelText");
static_assert(offsetof(UI_PassiveSettingSlot_SetLevelText, _text) == 0x000000, "Member 'UI_PassiveSettingSlot_SetLevelText::_text' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_PassiveSettingSlot_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_SetTitle) == 0x000008, "Wrong alignment on UI_PassiveSettingSlot_SetTitle");
static_assert(sizeof(UI_PassiveSettingSlot_SetTitle) == 0x000018, "Wrong size on UI_PassiveSettingSlot_SetTitle");
static_assert(offsetof(UI_PassiveSettingSlot_SetTitle, _text) == 0x000000, "Member 'UI_PassiveSettingSlot_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.ShowMinusButton
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingSlot_ShowMinusButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_ShowMinusButton) == 0x000001, "Wrong alignment on UI_PassiveSettingSlot_ShowMinusButton");
static_assert(sizeof(UI_PassiveSettingSlot_ShowMinusButton) == 0x000001, "Wrong size on UI_PassiveSettingSlot_ShowMinusButton");
static_assert(offsetof(UI_PassiveSettingSlot_ShowMinusButton, _show) == 0x000000, "Member 'UI_PassiveSettingSlot_ShowMinusButton::_show' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.ShowPlusButton
// 0x0001 (0x0001 - 0x0000)
struct UI_PassiveSettingSlot_ShowPlusButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_ShowPlusButton) == 0x000001, "Wrong alignment on UI_PassiveSettingSlot_ShowPlusButton");
static_assert(sizeof(UI_PassiveSettingSlot_ShowPlusButton) == 0x000001, "Wrong size on UI_PassiveSettingSlot_ShowPlusButton");
static_assert(offsetof(UI_PassiveSettingSlot_ShowPlusButton, _show) == 0x000000, "Member 'UI_PassiveSettingSlot_ShowPlusButton::_show' has a wrong offset!");

// Function Stigma.UI_PassiveSettingSlot.UpdateTooltip
// 0x0004 (0x0004 - 0x0000)
struct UI_PassiveSettingSlot_UpdateTooltip final
{
public:
	int32                                         _level;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassiveSettingSlot_UpdateTooltip) == 0x000004, "Wrong alignment on UI_PassiveSettingSlot_UpdateTooltip");
static_assert(sizeof(UI_PassiveSettingSlot_UpdateTooltip) == 0x000004, "Wrong size on UI_PassiveSettingSlot_UpdateTooltip");
static_assert(offsetof(UI_PassiveSettingSlot_UpdateTooltip, _level) == 0x000000, "Member 'UI_PassiveSettingSlot_UpdateTooltip::_level' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.GetCam
// 0x0008 (0x0008 - 0x0000)
struct UI_WaitingRoom_CharacterPick_GetCam final
{
public:
	class AFollowCameraActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_GetCam) == 0x000008, "Wrong alignment on UI_WaitingRoom_CharacterPick_GetCam");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_GetCam) == 0x000008, "Wrong size on UI_WaitingRoom_CharacterPick_GetCam");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_GetCam, ReturnValue) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_GetCam::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.MovePickedCharacter
// 0x0008 (0x0008 - 0x0000)
struct UI_WaitingRoom_CharacterPick_MovePickedCharacter final
{
public:
	int32                                         _idx_move;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _offset;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_MovePickedCharacter) == 0x000004, "Wrong alignment on UI_WaitingRoom_CharacterPick_MovePickedCharacter");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_MovePickedCharacter) == 0x000008, "Wrong size on UI_WaitingRoom_CharacterPick_MovePickedCharacter");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_MovePickedCharacter, _idx_move) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_MovePickedCharacter::_idx_move' has a wrong offset!");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_MovePickedCharacter, _offset) == 0x000004, "Member 'UI_WaitingRoom_CharacterPick_MovePickedCharacter::_offset' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.OnChange_CanReady
// 0x0002 (0x0002 - 0x0000)
struct UI_WaitingRoom_CharacterPick_OnChange_CanReady final
{
public:
	bool                                          _can_ready;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_OnChange_CanReady) == 0x000001, "Wrong alignment on UI_WaitingRoom_CharacterPick_OnChange_CanReady");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_OnChange_CanReady) == 0x000002, "Wrong size on UI_WaitingRoom_CharacterPick_OnChange_CanReady");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_OnChange_CanReady, _can_ready) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_OnChange_CanReady::_can_ready' has a wrong offset!");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_OnChange_CanReady, ReturnValue) == 0x000001, "Member 'UI_WaitingRoom_CharacterPick_OnChange_CanReady::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.OnChange_PickedCharacter
// 0x0001 (0x0001 - 0x0000)
struct UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter) == 0x000001, "Wrong alignment on UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter) == 0x000001, "Wrong size on UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter, ReturnValue) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_OnChange_PickedCharacter::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.OnLOCAL_ChangeCharacterSetting
// 0x0010 (0x0010 - 0x0000)
struct UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2630[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting) == 0x000008, "Wrong alignment on UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting) == 0x000010, "Wrong size on UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting, _ps) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting::_ps' has a wrong offset!");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting, ReturnValue) == 0x000008, "Member 'UI_WaitingRoom_CharacterPick_OnLOCAL_ChangeCharacterSetting::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.OnNotify_LoadCharacters
// 0x0001 (0x0001 - 0x0000)
struct UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters) == 0x000001, "Wrong alignment on UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters) == 0x000001, "Wrong size on UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters, ReturnValue) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_OnNotify_LoadCharacters::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.SetCam
// 0x0008 (0x0008 - 0x0000)
struct UI_WaitingRoom_CharacterPick_SetCam final
{
public:
	class AFollowCameraActor*                     _follow_cam;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_SetCam) == 0x000008, "Wrong alignment on UI_WaitingRoom_CharacterPick_SetCam");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_SetCam) == 0x000008, "Wrong size on UI_WaitingRoom_CharacterPick_SetCam");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_SetCam, _follow_cam) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_SetCam::_follow_cam' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.SetCurrentPickedCharacter
// 0x0004 (0x0004 - 0x0000)
struct UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter) == 0x000004, "Wrong alignment on UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter) == 0x000004, "Wrong size on UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter, _idx) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_SetCurrentPickedCharacter::_idx' has a wrong offset!");

// Function Stigma.UI_WaitingRoom_CharacterPick.GetChatBox
// 0x0008 (0x0008 - 0x0000)
struct UI_WaitingRoom_CharacterPick_GetChatBox final
{
public:
	class UUI_ChatBox*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_CharacterPick_GetChatBox) == 0x000008, "Wrong alignment on UI_WaitingRoom_CharacterPick_GetChatBox");
static_assert(sizeof(UI_WaitingRoom_CharacterPick_GetChatBox) == 0x000008, "Wrong size on UI_WaitingRoom_CharacterPick_GetChatBox");
static_assert(offsetof(UI_WaitingRoom_CharacterPick_GetChatBox, ReturnValue) == 0x000000, "Member 'UI_WaitingRoom_CharacterPick_GetChatBox::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PassMissionWeekTab.SetLocked
// 0x0001 (0x0001 - 0x0000)
struct UI_PassMissionWeekTab_SetLocked final
{
public:
	bool                                          _locked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassMissionWeekTab_SetLocked) == 0x000001, "Wrong alignment on UI_PassMissionWeekTab_SetLocked");
static_assert(sizeof(UI_PassMissionWeekTab_SetLocked) == 0x000001, "Wrong size on UI_PassMissionWeekTab_SetLocked");
static_assert(offsetof(UI_PassMissionWeekTab_SetLocked, _locked) == 0x000000, "Member 'UI_PassMissionWeekTab_SetLocked::_locked' has a wrong offset!");

// Function Stigma.UI_PassMissionWeekTab.SetProgress
// 0x0008 (0x0008 - 0x0000)
struct UI_PassMissionWeekTab_SetProgress final
{
public:
	int32                                         _current_count;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _target_count;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassMissionWeekTab_SetProgress) == 0x000004, "Wrong alignment on UI_PassMissionWeekTab_SetProgress");
static_assert(sizeof(UI_PassMissionWeekTab_SetProgress) == 0x000008, "Wrong size on UI_PassMissionWeekTab_SetProgress");
static_assert(offsetof(UI_PassMissionWeekTab_SetProgress, _current_count) == 0x000000, "Member 'UI_PassMissionWeekTab_SetProgress::_current_count' has a wrong offset!");
static_assert(offsetof(UI_PassMissionWeekTab_SetProgress, _target_count) == 0x000004, "Member 'UI_PassMissionWeekTab_SetProgress::_target_count' has a wrong offset!");

// Function Stigma.UI_PassMissionWeekTab.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct UI_PassMissionWeekTab_SetSelected final
{
public:
	bool                                          _selected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassMissionWeekTab_SetSelected) == 0x000001, "Wrong alignment on UI_PassMissionWeekTab_SetSelected");
static_assert(sizeof(UI_PassMissionWeekTab_SetSelected) == 0x000001, "Wrong size on UI_PassMissionWeekTab_SetSelected");
static_assert(offsetof(UI_PassMissionWeekTab_SetSelected, _selected) == 0x000000, "Member 'UI_PassMissionWeekTab_SetSelected::_selected' has a wrong offset!");

// Function Stigma.UI_PassMissionWeekTab.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_PassMissionWeekTab_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PassMissionWeekTab_SetTitle) == 0x000008, "Wrong alignment on UI_PassMissionWeekTab_SetTitle");
static_assert(sizeof(UI_PassMissionWeekTab_SetTitle) == 0x000018, "Wrong size on UI_PassMissionWeekTab_SetTitle");
static_assert(offsetof(UI_PassMissionWeekTab_SetTitle, _text) == 0x000000, "Member 'UI_PassMissionWeekTab_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_PingMenu.ScrollPingType
// 0x0008 (0x0008 - 0x0000)
struct UI_PingMenu_ScrollPingType final
{
public:
	float                                         _delta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2633[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PingMenu_ScrollPingType) == 0x000004, "Wrong alignment on UI_PingMenu_ScrollPingType");
static_assert(sizeof(UI_PingMenu_ScrollPingType) == 0x000008, "Wrong size on UI_PingMenu_ScrollPingType");
static_assert(offsetof(UI_PingMenu_ScrollPingType, _delta) == 0x000000, "Member 'UI_PingMenu_ScrollPingType::_delta' has a wrong offset!");
static_assert(offsetof(UI_PingMenu_ScrollPingType, ReturnValue) == 0x000004, "Member 'UI_PingMenu_ScrollPingType::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PingMenu.SetPingType
// 0x0001 (0x0001 - 0x0000)
struct UI_PingMenu_SetPingType final
{
public:
	EBattlePingType                               _ping_type;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PingMenu_SetPingType) == 0x000001, "Wrong alignment on UI_PingMenu_SetPingType");
static_assert(sizeof(UI_PingMenu_SetPingType) == 0x000001, "Wrong size on UI_PingMenu_SetPingType");
static_assert(offsetof(UI_PingMenu_SetPingType, _ping_type) == 0x000000, "Member 'UI_PingMenu_SetPingType::_ping_type' has a wrong offset!");

// Function Stigma.UI_PingMenu.UpdatEBattlePingType
// 0x0001 (0x0001 - 0x0000)
struct UI_PingMenu_UpdatEBattlePingType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PingMenu_UpdatEBattlePingType) == 0x000001, "Wrong alignment on UI_PingMenu_UpdatEBattlePingType");
static_assert(sizeof(UI_PingMenu_UpdatEBattlePingType) == 0x000001, "Wrong size on UI_PingMenu_UpdatEBattlePingType");
static_assert(offsetof(UI_PingMenu_UpdatEBattlePingType, ReturnValue) == 0x000000, "Member 'UI_PingMenu_UpdatEBattlePingType::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PingMenu.GetPingType
// 0x0001 (0x0001 - 0x0000)
struct UI_PingMenu_GetPingType final
{
public:
	EBattlePingType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PingMenu_GetPingType) == 0x000001, "Wrong alignment on UI_PingMenu_GetPingType");
static_assert(sizeof(UI_PingMenu_GetPingType) == 0x000001, "Wrong size on UI_PingMenu_GetPingType");
static_assert(offsetof(UI_PingMenu_GetPingType, ReturnValue) == 0x000000, "Member 'UI_PingMenu_GetPingType::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PlayerProfilePopup.Init
// 0x0050 (0x0050 - 0x0000)
struct UI_PlayerProfilePopup_Init final
{
public:
	struct FUserID                                _in_user_id;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _in_emblem_id;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                _in_profilecard_id;                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         _in_tier;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2636[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserName                              _in_nickname;                                      // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _in_level;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2637[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PlayerProfilePopup_Init) == 0x000008, "Wrong alignment on UI_PlayerProfilePopup_Init");
static_assert(sizeof(UI_PlayerProfilePopup_Init) == 0x000050, "Wrong size on UI_PlayerProfilePopup_Init");
static_assert(offsetof(UI_PlayerProfilePopup_Init, _in_user_id) == 0x000000, "Member 'UI_PlayerProfilePopup_Init::_in_user_id' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_Init, _in_emblem_id) == 0x000008, "Member 'UI_PlayerProfilePopup_Init::_in_emblem_id' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_Init, _in_profilecard_id) == 0x000018, "Member 'UI_PlayerProfilePopup_Init::_in_profilecard_id' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_Init, _in_tier) == 0x000028, "Member 'UI_PlayerProfilePopup_Init::_in_tier' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_Init, _in_nickname) == 0x000030, "Member 'UI_PlayerProfilePopup_Init::_in_nickname' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_Init, _in_level) == 0x000048, "Member 'UI_PlayerProfilePopup_Init::_in_level' has a wrong offset!");

// Function Stigma.UI_PlayerProfilePopup.OnACK_ReadStatistic
// 0x00A0 (0x00A0 - 0x0000)
struct UI_PlayerProfilePopup_OnACK_ReadStatistic final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2638[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ProfileStatisticRead              _ack;                                              // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0080(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerProfilePopup_OnACK_ReadStatistic) == 0x000008, "Wrong alignment on UI_PlayerProfilePopup_OnACK_ReadStatistic");
static_assert(sizeof(UI_PlayerProfilePopup_OnACK_ReadStatistic) == 0x0000A0, "Wrong size on UI_PlayerProfilePopup_OnACK_ReadStatistic");
static_assert(offsetof(UI_PlayerProfilePopup_OnACK_ReadStatistic, _rcode) == 0x000000, "Member 'UI_PlayerProfilePopup_OnACK_ReadStatistic::_rcode' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_OnACK_ReadStatistic, _ack) == 0x000008, "Member 'UI_PlayerProfilePopup_OnACK_ReadStatistic::_ack' has a wrong offset!");
static_assert(offsetof(UI_PlayerProfilePopup_OnACK_ReadStatistic, ReturnValue) == 0x000080, "Member 'UI_PlayerProfilePopup_OnACK_ReadStatistic::ReturnValue' has a wrong offset!");

// Function Stigma.UI_PlayerReadyState.OnPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct UI_PlayerReadyState_OnPlayerStateChanged final
{
public:
	EChangedPlayerState                           _reason;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AMatchServicedPlayerState*              _ps;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerReadyState_OnPlayerStateChanged) == 0x000008, "Wrong alignment on UI_PlayerReadyState_OnPlayerStateChanged");
static_assert(sizeof(UI_PlayerReadyState_OnPlayerStateChanged) == 0x000010, "Wrong size on UI_PlayerReadyState_OnPlayerStateChanged");
static_assert(offsetof(UI_PlayerReadyState_OnPlayerStateChanged, _reason) == 0x000000, "Member 'UI_PlayerReadyState_OnPlayerStateChanged::_reason' has a wrong offset!");
static_assert(offsetof(UI_PlayerReadyState_OnPlayerStateChanged, _ps) == 0x000008, "Member 'UI_PlayerReadyState_OnPlayerStateChanged::_ps' has a wrong offset!");

// Function Stigma.UI_PlayerReadyState.SetPlayerReadyState
// 0x0001 (0x0001 - 0x0000)
struct UI_PlayerReadyState_SetPlayerReadyState final
{
public:
	EPlayerReadyState                             _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerReadyState_SetPlayerReadyState) == 0x000001, "Wrong alignment on UI_PlayerReadyState_SetPlayerReadyState");
static_assert(sizeof(UI_PlayerReadyState_SetPlayerReadyState) == 0x000001, "Wrong size on UI_PlayerReadyState_SetPlayerReadyState");
static_assert(offsetof(UI_PlayerReadyState_SetPlayerReadyState, _state) == 0x000000, "Member 'UI_PlayerReadyState_SetPlayerReadyState::_state' has a wrong offset!");

// Function Stigma.UI_WeeklyBestRecord.AddList
// 0x0010 (0x0010 - 0x0000)
struct UI_WeeklyBestRecord_AddList final
{
public:
	ERankingType                                  _ranking_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeeklyBestRecordType                         _record_type;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_263D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _week;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _value;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _score;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WeeklyBestRecord_AddList) == 0x000004, "Wrong alignment on UI_WeeklyBestRecord_AddList");
static_assert(sizeof(UI_WeeklyBestRecord_AddList) == 0x000010, "Wrong size on UI_WeeklyBestRecord_AddList");
static_assert(offsetof(UI_WeeklyBestRecord_AddList, _ranking_type) == 0x000000, "Member 'UI_WeeklyBestRecord_AddList::_ranking_type' has a wrong offset!");
static_assert(offsetof(UI_WeeklyBestRecord_AddList, _record_type) == 0x000001, "Member 'UI_WeeklyBestRecord_AddList::_record_type' has a wrong offset!");
static_assert(offsetof(UI_WeeklyBestRecord_AddList, _week) == 0x000004, "Member 'UI_WeeklyBestRecord_AddList::_week' has a wrong offset!");
static_assert(offsetof(UI_WeeklyBestRecord_AddList, _value) == 0x000008, "Member 'UI_WeeklyBestRecord_AddList::_value' has a wrong offset!");
static_assert(offsetof(UI_WeeklyBestRecord_AddList, _score) == 0x00000C, "Member 'UI_WeeklyBestRecord_AddList::_score' has a wrong offset!");

// Function Stigma.UI_PlayerReadyStateContainer.AddPlayer
// 0x0008 (0x0008 - 0x0000)
struct UI_PlayerReadyStateContainer_AddPlayer final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerReadyStateContainer_AddPlayer) == 0x000008, "Wrong alignment on UI_PlayerReadyStateContainer_AddPlayer");
static_assert(sizeof(UI_PlayerReadyStateContainer_AddPlayer) == 0x000008, "Wrong size on UI_PlayerReadyStateContainer_AddPlayer");
static_assert(offsetof(UI_PlayerReadyStateContainer_AddPlayer, _ps) == 0x000000, "Member 'UI_PlayerReadyStateContainer_AddPlayer::_ps' has a wrong offset!");

// Function Stigma.UI_PlayerReadyStateContainer.InitWidget
// 0x0001 (0x0001 - 0x0000)
struct UI_PlayerReadyStateContainer_InitWidget final
{
public:
	EGameMode                                     _mode_type;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerReadyStateContainer_InitWidget) == 0x000001, "Wrong alignment on UI_PlayerReadyStateContainer_InitWidget");
static_assert(sizeof(UI_PlayerReadyStateContainer_InitWidget) == 0x000001, "Wrong size on UI_PlayerReadyStateContainer_InitWidget");
static_assert(offsetof(UI_PlayerReadyStateContainer_InitWidget, _mode_type) == 0x000000, "Member 'UI_PlayerReadyStateContainer_InitWidget::_mode_type' has a wrong offset!");

// Function Stigma.UI_PlayerReadyStateContainer.RemovePlayer
// 0x0008 (0x0008 - 0x0000)
struct UI_PlayerReadyStateContainer_RemovePlayer final
{
public:
	class AMatchServicedPlayerState*              _ps;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PlayerReadyStateContainer_RemovePlayer) == 0x000008, "Wrong alignment on UI_PlayerReadyStateContainer_RemovePlayer");
static_assert(sizeof(UI_PlayerReadyStateContainer_RemovePlayer) == 0x000008, "Wrong size on UI_PlayerReadyStateContainer_RemovePlayer");
static_assert(offsetof(UI_PlayerReadyStateContainer_RemovePlayer, _ps) == 0x000000, "Member 'UI_PlayerReadyStateContainer_RemovePlayer::_ps' has a wrong offset!");

// Function Stigma.UI_Preview.InitDefaultItems
// 0x0010 (0x0010 - 0x0000)
struct UI_Preview_InitDefaultItems final
{
public:
	TArray<struct FRewardItem>                    _default_items;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_InitDefaultItems) == 0x000008, "Wrong alignment on UI_Preview_InitDefaultItems");
static_assert(sizeof(UI_Preview_InitDefaultItems) == 0x000010, "Wrong size on UI_Preview_InitDefaultItems");
static_assert(offsetof(UI_Preview_InitDefaultItems, _default_items) == 0x000000, "Member 'UI_Preview_InitDefaultItems::_default_items' has a wrong offset!");

// Function Stigma.UI_Preview.OnShowPreviewType
// 0x0001 (0x0001 - 0x0000)
struct UI_Preview_OnShowPreviewType final
{
public:
	EPreviewType                                  _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_OnShowPreviewType) == 0x000001, "Wrong alignment on UI_Preview_OnShowPreviewType");
static_assert(sizeof(UI_Preview_OnShowPreviewType) == 0x000001, "Wrong size on UI_Preview_OnShowPreviewType");
static_assert(offsetof(UI_Preview_OnShowPreviewType, _type) == 0x000000, "Member 'UI_Preview_OnShowPreviewType::_type' has a wrong offset!");

// Function Stigma.UI_Preview.ResetPreview
// 0x0001 (0x0001 - 0x0000)
struct UI_Preview_ResetPreview final
{
public:
	bool                                          _include_default_items;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_ResetPreview) == 0x000001, "Wrong alignment on UI_Preview_ResetPreview");
static_assert(sizeof(UI_Preview_ResetPreview) == 0x000001, "Wrong size on UI_Preview_ResetPreview");
static_assert(offsetof(UI_Preview_ResetPreview, _include_default_items) == 0x000000, "Member 'UI_Preview_ResetPreview::_include_default_items' has a wrong offset!");

// Function Stigma.UI_Preview.SetCharmPreviewer
// 0x0018 (0x0018 - 0x0000)
struct UI_Preview_SetCharmPreviewer final
{
public:
	class APreviewActor*                          _previewer;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Charm                      _charm_id;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_SetCharmPreviewer) == 0x000008, "Wrong alignment on UI_Preview_SetCharmPreviewer");
static_assert(sizeof(UI_Preview_SetCharmPreviewer) == 0x000018, "Wrong size on UI_Preview_SetCharmPreviewer");
static_assert(offsetof(UI_Preview_SetCharmPreviewer, _previewer) == 0x000000, "Member 'UI_Preview_SetCharmPreviewer::_previewer' has a wrong offset!");
static_assert(offsetof(UI_Preview_SetCharmPreviewer, _charm_id) == 0x000008, "Member 'UI_Preview_SetCharmPreviewer::_charm_id' has a wrong offset!");

// Function Stigma.UI_Preview.SetGunPreviewer
// 0x0010 (0x0010 - 0x0000)
struct UI_Preview_SetGunPreviewer final
{
public:
	class APreviewActor*                          _previewer;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGunObject*                             _gun_obj;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_SetGunPreviewer) == 0x000008, "Wrong alignment on UI_Preview_SetGunPreviewer");
static_assert(sizeof(UI_Preview_SetGunPreviewer) == 0x000010, "Wrong size on UI_Preview_SetGunPreviewer");
static_assert(offsetof(UI_Preview_SetGunPreviewer, _previewer) == 0x000000, "Member 'UI_Preview_SetGunPreviewer::_previewer' has a wrong offset!");
static_assert(offsetof(UI_Preview_SetGunPreviewer, _gun_obj) == 0x000008, "Member 'UI_Preview_SetGunPreviewer::_gun_obj' has a wrong offset!");

// Function Stigma.UI_Preview.SetPreviewImage
// 0x0018 (0x0018 - 0x0000)
struct UI_Preview_SetPreviewImage final
{
public:
	struct FRewardItem                            _item;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_SetPreviewImage) == 0x000008, "Wrong alignment on UI_Preview_SetPreviewImage");
static_assert(sizeof(UI_Preview_SetPreviewImage) == 0x000018, "Wrong size on UI_Preview_SetPreviewImage");
static_assert(offsetof(UI_Preview_SetPreviewImage, _item) == 0x000000, "Member 'UI_Preview_SetPreviewImage::_item' has a wrong offset!");

// Function Stigma.UI_Preview.ShowPreview
// 0x0018 (0x0018 - 0x0000)
struct UI_Preview_ShowPreview final
{
public:
	struct FRewardItem                            _preview_item;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_ShowPreview) == 0x000008, "Wrong alignment on UI_Preview_ShowPreview");
static_assert(sizeof(UI_Preview_ShowPreview) == 0x000018, "Wrong size on UI_Preview_ShowPreview");
static_assert(offsetof(UI_Preview_ShowPreview, _preview_item) == 0x000000, "Member 'UI_Preview_ShowPreview::_preview_item' has a wrong offset!");

// Function Stigma.UI_Preview.ShowPreviewButtons
// 0x0050 (0x0050 - 0x0000)
struct UI_Preview_ShowPreviewButtons final
{
public:
	TSet<EPreviewType>                            _preview_types;                                    // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_ShowPreviewButtons) == 0x000008, "Wrong alignment on UI_Preview_ShowPreviewButtons");
static_assert(sizeof(UI_Preview_ShowPreviewButtons) == 0x000050, "Wrong size on UI_Preview_ShowPreviewButtons");
static_assert(offsetof(UI_Preview_ShowPreviewButtons, _preview_types) == 0x000000, "Member 'UI_Preview_ShowPreviewButtons::_preview_types' has a wrong offset!");

// Function Stigma.UI_Preview.ShowPreviewType
// 0x0001 (0x0001 - 0x0000)
struct UI_Preview_ShowPreviewType final
{
public:
	EPreviewType                                  _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Preview_ShowPreviewType) == 0x000001, "Wrong alignment on UI_Preview_ShowPreviewType");
static_assert(sizeof(UI_Preview_ShowPreviewType) == 0x000001, "Wrong size on UI_Preview_ShowPreviewType");
static_assert(offsetof(UI_Preview_ShowPreviewType, _type) == 0x000000, "Member 'UI_Preview_ShowPreviewType::_type' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.AddPreviewItem
// 0x0018 (0x0018 - 0x0000)
struct UI_PreviewPopupBase_AddPreviewItem final
{
public:
	struct FRewardItem                            _item;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_AddPreviewItem) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_AddPreviewItem");
static_assert(sizeof(UI_PreviewPopupBase_AddPreviewItem) == 0x000018, "Wrong size on UI_PreviewPopupBase_AddPreviewItem");
static_assert(offsetof(UI_PreviewPopupBase_AddPreviewItem, _item) == 0x000000, "Member 'UI_PreviewPopupBase_AddPreviewItem::_item' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.AddUserCurrency
// 0x0010 (0x0010 - 0x0000)
struct UI_PreviewPopupBase_AddUserCurrency final
{
public:
	struct FItemID_Currency                       _currency_id;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_AddUserCurrency) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_AddUserCurrency");
static_assert(sizeof(UI_PreviewPopupBase_AddUserCurrency) == 0x000010, "Wrong size on UI_PreviewPopupBase_AddUserCurrency");
static_assert(offsetof(UI_PreviewPopupBase_AddUserCurrency, _currency_id) == 0x000000, "Member 'UI_PreviewPopupBase_AddUserCurrency::_currency_id' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.InitPreview
// 0x0010 (0x0010 - 0x0000)
struct UI_PreviewPopupBase_InitPreview final
{
public:
	TArray<struct FRewardItem>                    _default_items;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_InitPreview) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_InitPreview");
static_assert(sizeof(UI_PreviewPopupBase_InitPreview) == 0x000010, "Wrong size on UI_PreviewPopupBase_InitPreview");
static_assert(offsetof(UI_PreviewPopupBase_InitPreview, _default_items) == 0x000000, "Member 'UI_PreviewPopupBase_InitPreview::_default_items' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.SetDate
// 0x0020 (0x0020 - 0x0000)
struct UI_PreviewPopupBase_SetDate final
{
public:
	class FString                                 _start_at_str;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _end_at_str;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_SetDate) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_SetDate");
static_assert(sizeof(UI_PreviewPopupBase_SetDate) == 0x000020, "Wrong size on UI_PreviewPopupBase_SetDate");
static_assert(offsetof(UI_PreviewPopupBase_SetDate, _start_at_str) == 0x000000, "Member 'UI_PreviewPopupBase_SetDate::_start_at_str' has a wrong offset!");
static_assert(offsetof(UI_PreviewPopupBase_SetDate, _end_at_str) == 0x000010, "Member 'UI_PreviewPopupBase_SetDate::_end_at_str' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_PreviewPopupBase_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_SetDesc) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_SetDesc");
static_assert(sizeof(UI_PreviewPopupBase_SetDesc) == 0x000018, "Wrong size on UI_PreviewPopupBase_SetDesc");
static_assert(offsetof(UI_PreviewPopupBase_SetDesc, _text) == 0x000000, "Member 'UI_PreviewPopupBase_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.SetPreviewResetMannequinOnClose
// 0x0001 (0x0001 - 0x0000)
struct UI_PreviewPopupBase_SetPreviewResetMannequinOnClose final
{
public:
	bool                                          _reset;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_SetPreviewResetMannequinOnClose) == 0x000001, "Wrong alignment on UI_PreviewPopupBase_SetPreviewResetMannequinOnClose");
static_assert(sizeof(UI_PreviewPopupBase_SetPreviewResetMannequinOnClose) == 0x000001, "Wrong size on UI_PreviewPopupBase_SetPreviewResetMannequinOnClose");
static_assert(offsetof(UI_PreviewPopupBase_SetPreviewResetMannequinOnClose, _reset) == 0x000000, "Member 'UI_PreviewPopupBase_SetPreviewResetMannequinOnClose::_reset' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.SetRemainTimer
// 0x0010 (0x0010 - 0x0000)
struct UI_PreviewPopupBase_SetRemainTimer final
{
public:
	struct FDateTime                              _end_at;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _alert_hour;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2644[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_PreviewPopupBase_SetRemainTimer) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_SetRemainTimer");
static_assert(sizeof(UI_PreviewPopupBase_SetRemainTimer) == 0x000010, "Wrong size on UI_PreviewPopupBase_SetRemainTimer");
static_assert(offsetof(UI_PreviewPopupBase_SetRemainTimer, _end_at) == 0x000000, "Member 'UI_PreviewPopupBase_SetRemainTimer::_end_at' has a wrong offset!");
static_assert(offsetof(UI_PreviewPopupBase_SetRemainTimer, _alert_hour) == 0x000008, "Member 'UI_PreviewPopupBase_SetRemainTimer::_alert_hour' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.SetTags
// 0x0010 (0x0010 - 0x0000)
struct UI_PreviewPopupBase_SetTags final
{
public:
	TArray<EItemUITag>                            _tags;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_SetTags) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_SetTags");
static_assert(sizeof(UI_PreviewPopupBase_SetTags) == 0x000010, "Wrong size on UI_PreviewPopupBase_SetTags");
static_assert(offsetof(UI_PreviewPopupBase_SetTags, _tags) == 0x000000, "Member 'UI_PreviewPopupBase_SetTags::_tags' has a wrong offset!");

// Function Stigma.UI_PreviewPopupBase.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_PreviewPopupBase_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_PreviewPopupBase_SetTitle) == 0x000008, "Wrong alignment on UI_PreviewPopupBase_SetTitle");
static_assert(sizeof(UI_PreviewPopupBase_SetTitle) == 0x000018, "Wrong size on UI_PreviewPopupBase_SetTitle");
static_assert(offsetof(UI_PreviewPopupBase_SetTitle, _text) == 0x000000, "Member 'UI_PreviewPopupBase_SetTitle::_text' has a wrong offset!");

// Function Stigma.UserNameBlueprintLibrary.GetName
// 0x0028 (0x0028 - 0x0000)
struct UserNameBlueprintLibrary_GetName final
{
public:
	struct FUserName                              _Name;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserNameBlueprintLibrary_GetName) == 0x000008, "Wrong alignment on UserNameBlueprintLibrary_GetName");
static_assert(sizeof(UserNameBlueprintLibrary_GetName) == 0x000028, "Wrong size on UserNameBlueprintLibrary_GetName");
static_assert(offsetof(UserNameBlueprintLibrary_GetName, _Name) == 0x000000, "Member 'UserNameBlueprintLibrary_GetName::_Name' has a wrong offset!");
static_assert(offsetof(UserNameBlueprintLibrary_GetName, ReturnValue) == 0x000018, "Member 'UserNameBlueprintLibrary_GetName::ReturnValue' has a wrong offset!");

// Function Stigma.UserNameBlueprintLibrary.GetTag
// 0x0020 (0x0020 - 0x0000)
struct UserNameBlueprintLibrary_GetTag final
{
public:
	struct FUserName                              _Name;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2645[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserNameBlueprintLibrary_GetTag) == 0x000008, "Wrong alignment on UserNameBlueprintLibrary_GetTag");
static_assert(sizeof(UserNameBlueprintLibrary_GetTag) == 0x000020, "Wrong size on UserNameBlueprintLibrary_GetTag");
static_assert(offsetof(UserNameBlueprintLibrary_GetTag, _Name) == 0x000000, "Member 'UserNameBlueprintLibrary_GetTag::_Name' has a wrong offset!");
static_assert(offsetof(UserNameBlueprintLibrary_GetTag, ReturnValue) == 0x000018, "Member 'UserNameBlueprintLibrary_GetTag::ReturnValue' has a wrong offset!");

// Function Stigma.UserNameBlueprintLibrary.ToString
// 0x0030 (0x0030 - 0x0000)
struct UserNameBlueprintLibrary_ToString final
{
public:
	struct FUserName                              _Name;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _with_tag;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2646[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserNameBlueprintLibrary_ToString) == 0x000008, "Wrong alignment on UserNameBlueprintLibrary_ToString");
static_assert(sizeof(UserNameBlueprintLibrary_ToString) == 0x000030, "Wrong size on UserNameBlueprintLibrary_ToString");
static_assert(offsetof(UserNameBlueprintLibrary_ToString, _Name) == 0x000000, "Member 'UserNameBlueprintLibrary_ToString::_Name' has a wrong offset!");
static_assert(offsetof(UserNameBlueprintLibrary_ToString, _with_tag) == 0x000018, "Member 'UserNameBlueprintLibrary_ToString::_with_tag' has a wrong offset!");
static_assert(offsetof(UserNameBlueprintLibrary_ToString, ReturnValue) == 0x000020, "Member 'UserNameBlueprintLibrary_ToString::ReturnValue' has a wrong offset!");

// Function Stigma.UserNameBlueprintLibrary.ToText
// 0x0038 (0x0038 - 0x0000)
struct UserNameBlueprintLibrary_ToText final
{
public:
	struct FUserName                              _Name;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _with_tag;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2647[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserNameBlueprintLibrary_ToText) == 0x000008, "Wrong alignment on UserNameBlueprintLibrary_ToText");
static_assert(sizeof(UserNameBlueprintLibrary_ToText) == 0x000038, "Wrong size on UserNameBlueprintLibrary_ToText");
static_assert(offsetof(UserNameBlueprintLibrary_ToText, _Name) == 0x000000, "Member 'UserNameBlueprintLibrary_ToText::_Name' has a wrong offset!");
static_assert(offsetof(UserNameBlueprintLibrary_ToText, _with_tag) == 0x000018, "Member 'UserNameBlueprintLibrary_ToText::_with_tag' has a wrong offset!");
static_assert(offsetof(UserNameBlueprintLibrary_ToText, ReturnValue) == 0x000020, "Member 'UserNameBlueprintLibrary_ToText::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ProfileCard.Bind
// 0x0008 (0x0008 - 0x0000)
struct UI_ProfileCard_Bind final
{
public:
	class ULocalUserProfile*                      _user_obj;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_Bind) == 0x000008, "Wrong alignment on UI_ProfileCard_Bind");
static_assert(sizeof(UI_ProfileCard_Bind) == 0x000008, "Wrong size on UI_ProfileCard_Bind");
static_assert(offsetof(UI_ProfileCard_Bind, _user_obj) == 0x000000, "Member 'UI_ProfileCard_Bind::_user_obj' has a wrong offset!");

// Function Stigma.UI_ProfileCard.GetBriefToolTipEntries
// 0x0018 (0x0018 - 0x0000)
struct UI_ProfileCard_GetBriefToolTipEntries final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHoverMenuEntry>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_GetBriefToolTipEntries) == 0x000008, "Wrong alignment on UI_ProfileCard_GetBriefToolTipEntries");
static_assert(sizeof(UI_ProfileCard_GetBriefToolTipEntries) == 0x000018, "Wrong size on UI_ProfileCard_GetBriefToolTipEntries");
static_assert(offsetof(UI_ProfileCard_GetBriefToolTipEntries, _user_id) == 0x000000, "Member 'UI_ProfileCard_GetBriefToolTipEntries::_user_id' has a wrong offset!");
static_assert(offsetof(UI_ProfileCard_GetBriefToolTipEntries, ReturnValue) == 0x000008, "Member 'UI_ProfileCard_GetBriefToolTipEntries::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ProfileCard.OnUpdateNicknameFX
// 0x0010 (0x0010 - 0x0000)
struct UI_ProfileCard_OnUpdateNicknameFX final
{
public:
	struct FItemID                                _nickfx_id;                                        // 0x0000(0x0010)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_OnUpdateNicknameFX) == 0x000008, "Wrong alignment on UI_ProfileCard_OnUpdateNicknameFX");
static_assert(sizeof(UI_ProfileCard_OnUpdateNicknameFX) == 0x000010, "Wrong size on UI_ProfileCard_OnUpdateNicknameFX");
static_assert(offsetof(UI_ProfileCard_OnUpdateNicknameFX, _nickfx_id) == 0x000000, "Member 'UI_ProfileCard_OnUpdateNicknameFX::_nickfx_id' has a wrong offset!");

// Function Stigma.UI_ProfileCard.SetEmblemIcon
// 0x0028 (0x0028 - 0x0000)
struct UI_ProfileCard_SetEmblemIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_SetEmblemIcon) == 0x000008, "Wrong alignment on UI_ProfileCard_SetEmblemIcon");
static_assert(sizeof(UI_ProfileCard_SetEmblemIcon) == 0x000028, "Wrong size on UI_ProfileCard_SetEmblemIcon");
static_assert(offsetof(UI_ProfileCard_SetEmblemIcon, _Icon) == 0x000000, "Member 'UI_ProfileCard_SetEmblemIcon::_Icon' has a wrong offset!");

// Function Stigma.UI_ProfileCard.SetEmblemID
// 0x0010 (0x0010 - 0x0000)
struct UI_ProfileCard_SetEmblemID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_SetEmblemID) == 0x000008, "Wrong alignment on UI_ProfileCard_SetEmblemID");
static_assert(sizeof(UI_ProfileCard_SetEmblemID) == 0x000010, "Wrong size on UI_ProfileCard_SetEmblemID");
static_assert(offsetof(UI_ProfileCard_SetEmblemID, _item_id) == 0x000000, "Member 'UI_ProfileCard_SetEmblemID::_item_id' has a wrong offset!");

// Function Stigma.UI_ProfileCard.SetNicknameFXID
// 0x0010 (0x0010 - 0x0000)
struct UI_ProfileCard_SetNicknameFXID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_SetNicknameFXID) == 0x000008, "Wrong alignment on UI_ProfileCard_SetNicknameFXID");
static_assert(sizeof(UI_ProfileCard_SetNicknameFXID) == 0x000010, "Wrong size on UI_ProfileCard_SetNicknameFXID");
static_assert(offsetof(UI_ProfileCard_SetNicknameFXID, _item_id) == 0x000000, "Member 'UI_ProfileCard_SetNicknameFXID::_item_id' has a wrong offset!");

// Function Stigma.UI_ProfileCard.SetProfileCardID
// 0x0010 (0x0010 - 0x0000)
struct UI_ProfileCard_SetProfileCardID final
{
public:
	struct FItemID                                _item_id;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_SetProfileCardID) == 0x000008, "Wrong alignment on UI_ProfileCard_SetProfileCardID");
static_assert(sizeof(UI_ProfileCard_SetProfileCardID) == 0x000010, "Wrong size on UI_ProfileCard_SetProfileCardID");
static_assert(offsetof(UI_ProfileCard_SetProfileCardID, _item_id) == 0x000000, "Member 'UI_ProfileCard_SetProfileCardID::_item_id' has a wrong offset!");

// Function Stigma.UI_ProfileCard.Update
// 0x0001 (0x0001 - 0x0000)
struct UI_ProfileCard_Update final
{
public:
	bool                                          _is_set_master_icon;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_Update) == 0x000001, "Wrong alignment on UI_ProfileCard_Update");
static_assert(sizeof(UI_ProfileCard_Update) == 0x000001, "Wrong size on UI_ProfileCard_Update");
static_assert(offsetof(UI_ProfileCard_Update, _is_set_master_icon) == 0x000000, "Member 'UI_ProfileCard_Update::_is_set_master_icon' has a wrong offset!");

// Function Stigma.UI_ProfileCard.GetUserObj
// 0x0008 (0x0008 - 0x0000)
struct UI_ProfileCard_GetUserObj final
{
public:
	class ULocalUserProfile*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ProfileCard_GetUserObj) == 0x000008, "Wrong alignment on UI_ProfileCard_GetUserObj");
static_assert(sizeof(UI_ProfileCard_GetUserObj) == 0x000008, "Wrong size on UI_ProfileCard_GetUserObj");
static_assert(offsetof(UI_ProfileCard_GetUserObj, ReturnValue) == 0x000000, "Member 'UI_ProfileCard_GetUserObj::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RadioChatBox.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct UI_RadioChatBox_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RadioChatBox_IsOpen) == 0x000001, "Wrong alignment on UI_RadioChatBox_IsOpen");
static_assert(sizeof(UI_RadioChatBox_IsOpen) == 0x000001, "Wrong size on UI_RadioChatBox_IsOpen");
static_assert(offsetof(UI_RadioChatBox_IsOpen, ReturnValue) == 0x000000, "Member 'UI_RadioChatBox_IsOpen::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RadioChatBox.SelectRadioChatCategory
// 0x0004 (0x0004 - 0x0000)
struct UI_RadioChatBox_SelectRadioChatCategory final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RadioChatBox_SelectRadioChatCategory) == 0x000004, "Wrong alignment on UI_RadioChatBox_SelectRadioChatCategory");
static_assert(sizeof(UI_RadioChatBox_SelectRadioChatCategory) == 0x000004, "Wrong size on UI_RadioChatBox_SelectRadioChatCategory");
static_assert(offsetof(UI_RadioChatBox_SelectRadioChatCategory, _idx) == 0x000000, "Member 'UI_RadioChatBox_SelectRadioChatCategory::_idx' has a wrong offset!");

// Function Stigma.UI_RadioChatBox.SelectRadioChatList
// 0x0008 (0x0008 - 0x0000)
struct UI_RadioChatBox_SelectRadioChatList final
{
public:
	ERadioChatPhase                               _phase;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _idx;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RadioChatBox_SelectRadioChatList) == 0x000004, "Wrong alignment on UI_RadioChatBox_SelectRadioChatList");
static_assert(sizeof(UI_RadioChatBox_SelectRadioChatList) == 0x000008, "Wrong size on UI_RadioChatBox_SelectRadioChatList");
static_assert(offsetof(UI_RadioChatBox_SelectRadioChatList, _phase) == 0x000000, "Member 'UI_RadioChatBox_SelectRadioChatList::_phase' has a wrong offset!");
static_assert(offsetof(UI_RadioChatBox_SelectRadioChatList, _idx) == 0x000004, "Member 'UI_RadioChatBox_SelectRadioChatList::_idx' has a wrong offset!");

// Function Stigma.UI_RadioChatBox.SelectRadioChatMsg
// 0x0004 (0x0004 - 0x0000)
struct UI_RadioChatBox_SelectRadioChatMsg final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RadioChatBox_SelectRadioChatMsg) == 0x000004, "Wrong alignment on UI_RadioChatBox_SelectRadioChatMsg");
static_assert(sizeof(UI_RadioChatBox_SelectRadioChatMsg) == 0x000004, "Wrong size on UI_RadioChatBox_SelectRadioChatMsg");
static_assert(offsetof(UI_RadioChatBox_SelectRadioChatMsg, _idx) == 0x000000, "Member 'UI_RadioChatBox_SelectRadioChatMsg::_idx' has a wrong offset!");

// Function Stigma.UI_RankingListItem.SetUISize
// 0x0008 (0x0008 - 0x0000)
struct UI_RankingListItem_SetUISize final
{
public:
	float                                         _size_x;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _size_y;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RankingListItem_SetUISize) == 0x000004, "Wrong alignment on UI_RankingListItem_SetUISize");
static_assert(sizeof(UI_RankingListItem_SetUISize) == 0x000008, "Wrong size on UI_RankingListItem_SetUISize");
static_assert(offsetof(UI_RankingListItem_SetUISize, _size_x) == 0x000000, "Member 'UI_RankingListItem_SetUISize::_size_x' has a wrong offset!");
static_assert(offsetof(UI_RankingListItem_SetUISize, _size_y) == 0x000004, "Member 'UI_RankingListItem_SetUISize::_size_y' has a wrong offset!");

// Function Stigma.UI_RankingListItem.UpdateUI_RankDiff
// 0x0008 (0x0008 - 0x0000)
struct UI_RankingListItem_UpdateUI_RankDiff final
{
public:
	bool                                          _is_new_rank;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _diff;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RankingListItem_UpdateUI_RankDiff) == 0x000004, "Wrong alignment on UI_RankingListItem_UpdateUI_RankDiff");
static_assert(sizeof(UI_RankingListItem_UpdateUI_RankDiff) == 0x000008, "Wrong size on UI_RankingListItem_UpdateUI_RankDiff");
static_assert(offsetof(UI_RankingListItem_UpdateUI_RankDiff, _is_new_rank) == 0x000000, "Member 'UI_RankingListItem_UpdateUI_RankDiff::_is_new_rank' has a wrong offset!");
static_assert(offsetof(UI_RankingListItem_UpdateUI_RankDiff, _diff) == 0x000004, "Member 'UI_RankingListItem_UpdateUI_RankDiff::_diff' has a wrong offset!");

// Function Stigma.UI_RankingListView.AddRankingItem
// 0x0008 (0x0008 - 0x0000)
struct UI_RankingListView_AddRankingItem final
{
public:
	class ULVData_RankingItem*                    _item;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RankingListView_AddRankingItem) == 0x000008, "Wrong alignment on UI_RankingListView_AddRankingItem");
static_assert(sizeof(UI_RankingListView_AddRankingItem) == 0x000008, "Wrong size on UI_RankingListView_AddRankingItem");
static_assert(offsetof(UI_RankingListView_AddRankingItem, _item) == 0x000000, "Member 'UI_RankingListView_AddRankingItem::_item' has a wrong offset!");

// Function Stigma.UserProfiles.ReadRegistryINT32
// 0x0028 (0x0028 - 0x0000)
struct UserProfiles_ReadRegistryINT32 final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Entry;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Default_value;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfiles_ReadRegistryINT32) == 0x000008, "Wrong alignment on UserProfiles_ReadRegistryINT32");
static_assert(sizeof(UserProfiles_ReadRegistryINT32) == 0x000028, "Wrong size on UserProfiles_ReadRegistryINT32");
static_assert(offsetof(UserProfiles_ReadRegistryINT32, Section) == 0x000000, "Member 'UserProfiles_ReadRegistryINT32::Section' has a wrong offset!");
static_assert(offsetof(UserProfiles_ReadRegistryINT32, Entry) == 0x000010, "Member 'UserProfiles_ReadRegistryINT32::Entry' has a wrong offset!");
static_assert(offsetof(UserProfiles_ReadRegistryINT32, Default_value) == 0x000020, "Member 'UserProfiles_ReadRegistryINT32::Default_value' has a wrong offset!");
static_assert(offsetof(UserProfiles_ReadRegistryINT32, ReturnValue) == 0x000024, "Member 'UserProfiles_ReadRegistryINT32::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfiles.ReadRegistryString
// 0x0040 (0x0040 - 0x0000)
struct UserProfiles_ReadRegistryString final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Entry;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Default_value;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfiles_ReadRegistryString) == 0x000008, "Wrong alignment on UserProfiles_ReadRegistryString");
static_assert(sizeof(UserProfiles_ReadRegistryString) == 0x000040, "Wrong size on UserProfiles_ReadRegistryString");
static_assert(offsetof(UserProfiles_ReadRegistryString, Section) == 0x000000, "Member 'UserProfiles_ReadRegistryString::Section' has a wrong offset!");
static_assert(offsetof(UserProfiles_ReadRegistryString, Entry) == 0x000010, "Member 'UserProfiles_ReadRegistryString::Entry' has a wrong offset!");
static_assert(offsetof(UserProfiles_ReadRegistryString, Default_value) == 0x000020, "Member 'UserProfiles_ReadRegistryString::Default_value' has a wrong offset!");
static_assert(offsetof(UserProfiles_ReadRegistryString, ReturnValue) == 0x000030, "Member 'UserProfiles_ReadRegistryString::ReturnValue' has a wrong offset!");

// Function Stigma.UserProfiles.WriteRegistryINT32
// 0x0028 (0x0028 - 0x0000)
struct UserProfiles_WriteRegistryINT32 final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Entry;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264F[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserProfiles_WriteRegistryINT32) == 0x000008, "Wrong alignment on UserProfiles_WriteRegistryINT32");
static_assert(sizeof(UserProfiles_WriteRegistryINT32) == 0x000028, "Wrong size on UserProfiles_WriteRegistryINT32");
static_assert(offsetof(UserProfiles_WriteRegistryINT32, Section) == 0x000000, "Member 'UserProfiles_WriteRegistryINT32::Section' has a wrong offset!");
static_assert(offsetof(UserProfiles_WriteRegistryINT32, Entry) == 0x000010, "Member 'UserProfiles_WriteRegistryINT32::Entry' has a wrong offset!");
static_assert(offsetof(UserProfiles_WriteRegistryINT32, Value) == 0x000020, "Member 'UserProfiles_WriteRegistryINT32::Value' has a wrong offset!");

// Function Stigma.UserProfiles.WriteRegistryString
// 0x0030 (0x0030 - 0x0000)
struct UserProfiles_WriteRegistryString final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Entry;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserProfiles_WriteRegistryString) == 0x000008, "Wrong alignment on UserProfiles_WriteRegistryString");
static_assert(sizeof(UserProfiles_WriteRegistryString) == 0x000030, "Wrong size on UserProfiles_WriteRegistryString");
static_assert(offsetof(UserProfiles_WriteRegistryString, Section) == 0x000000, "Member 'UserProfiles_WriteRegistryString::Section' has a wrong offset!");
static_assert(offsetof(UserProfiles_WriteRegistryString, Entry) == 0x000010, "Member 'UserProfiles_WriteRegistryString::Entry' has a wrong offset!");
static_assert(offsetof(UserProfiles_WriteRegistryString, Value) == 0x000020, "Member 'UserProfiles_WriteRegistryString::Value' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.OnACK_GetChallengeRankingList
// 0x0058 (0x0058 - 0x0000)
struct UI_RecordPage_Ranking_OnACK_GetChallengeRankingList final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2652[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadChallengeRanking              _ack;                                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_OnACK_GetChallengeRankingList) == 0x000008, "Wrong alignment on UI_RecordPage_Ranking_OnACK_GetChallengeRankingList");
static_assert(sizeof(UI_RecordPage_Ranking_OnACK_GetChallengeRankingList) == 0x000058, "Wrong size on UI_RecordPage_Ranking_OnACK_GetChallengeRankingList");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetChallengeRankingList, _rcode) == 0x000000, "Member 'UI_RecordPage_Ranking_OnACK_GetChallengeRankingList::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetChallengeRankingList, _ack) == 0x000008, "Member 'UI_RecordPage_Ranking_OnACK_GetChallengeRankingList::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetChallengeRankingList, ReturnValue) == 0x000038, "Member 'UI_RecordPage_Ranking_OnACK_GetChallengeRankingList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.OnACK_GetFriendRankingList
// 0x0048 (0x0048 - 0x0000)
struct UI_RecordPage_Ranking_OnACK_GetFriendRankingList final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2653[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadFriendRanking                 _ack;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0028(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_OnACK_GetFriendRankingList) == 0x000008, "Wrong alignment on UI_RecordPage_Ranking_OnACK_GetFriendRankingList");
static_assert(sizeof(UI_RecordPage_Ranking_OnACK_GetFriendRankingList) == 0x000048, "Wrong size on UI_RecordPage_Ranking_OnACK_GetFriendRankingList");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetFriendRankingList, _rcode) == 0x000000, "Member 'UI_RecordPage_Ranking_OnACK_GetFriendRankingList::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetFriendRankingList, _ack) == 0x000008, "Member 'UI_RecordPage_Ranking_OnACK_GetFriendRankingList::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetFriendRankingList, ReturnValue) == 0x000028, "Member 'UI_RecordPage_Ranking_OnACK_GetFriendRankingList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.OnACK_GetRankingList
// 0x0048 (0x0048 - 0x0000)
struct UI_RecordPage_Ranking_OnACK_GetRankingList final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2654[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadRanking                       _ack;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0028(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_OnACK_GetRankingList) == 0x000008, "Wrong alignment on UI_RecordPage_Ranking_OnACK_GetRankingList");
static_assert(sizeof(UI_RecordPage_Ranking_OnACK_GetRankingList) == 0x000048, "Wrong size on UI_RecordPage_Ranking_OnACK_GetRankingList");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetRankingList, _rcode) == 0x000000, "Member 'UI_RecordPage_Ranking_OnACK_GetRankingList::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetRankingList, _ack) == 0x000008, "Member 'UI_RecordPage_Ranking_OnACK_GetRankingList::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetRankingList, ReturnValue) == 0x000028, "Member 'UI_RecordPage_Ranking_OnACK_GetRankingList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.OnACK_GetSearchedUserRankingList
// 0x0048 (0x0048 - 0x0000)
struct UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2655[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadSearchedUserRanking           _ack;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0028(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList) == 0x000008, "Wrong alignment on UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList");
static_assert(sizeof(UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList) == 0x000048, "Wrong size on UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList, _rcode) == 0x000000, "Member 'UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList, _ack) == 0x000008, "Member 'UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList, ReturnValue) == 0x000028, "Member 'UI_RecordPage_Ranking_OnACK_GetSearchedUserRankingList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.OnACK_GetWeeklyBestRank
// 0x0038 (0x0038 - 0x0000)
struct UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2656[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadWeeklyBestRank                _ack;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank) == 0x000008, "Wrong alignment on UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank");
static_assert(sizeof(UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank) == 0x000038, "Wrong size on UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank, _rcode) == 0x000000, "Member 'UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank, _ack) == 0x000008, "Member 'UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank, ReturnValue) == 0x000018, "Member 'UI_RecordPage_Ranking_OnACK_GetWeeklyBestRank::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.OnModeTabChanged
// 0x000C (0x000C - 0x0000)
struct UI_RecordPage_Ranking_OnModeTabChanged final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_OnModeTabChanged) == 0x000004, "Wrong alignment on UI_RecordPage_Ranking_OnModeTabChanged");
static_assert(sizeof(UI_RecordPage_Ranking_OnModeTabChanged) == 0x00000C, "Wrong size on UI_RecordPage_Ranking_OnModeTabChanged");
static_assert(offsetof(UI_RecordPage_Ranking_OnModeTabChanged, _id) == 0x000000, "Member 'UI_RecordPage_Ranking_OnModeTabChanged::_id' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_OnModeTabChanged, _idx) == 0x000008, "Member 'UI_RecordPage_Ranking_OnModeTabChanged::_idx' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.SetShowOnlyFriendRanking
// 0x0002 (0x0002 - 0x0000)
struct UI_RecordPage_Ranking_SetShowOnlyFriendRanking final
{
public:
	bool                                          _is_shown_only_friend_ranking;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _update_ranking_context;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_SetShowOnlyFriendRanking) == 0x000001, "Wrong alignment on UI_RecordPage_Ranking_SetShowOnlyFriendRanking");
static_assert(sizeof(UI_RecordPage_Ranking_SetShowOnlyFriendRanking) == 0x000002, "Wrong size on UI_RecordPage_Ranking_SetShowOnlyFriendRanking");
static_assert(offsetof(UI_RecordPage_Ranking_SetShowOnlyFriendRanking, _is_shown_only_friend_ranking) == 0x000000, "Member 'UI_RecordPage_Ranking_SetShowOnlyFriendRanking::_is_shown_only_friend_ranking' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_SetShowOnlyFriendRanking, _update_ranking_context) == 0x000001, "Member 'UI_RecordPage_Ranking_SetShowOnlyFriendRanking::_update_ranking_context' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.Setter_CurRankingType
// 0x0001 (0x0001 - 0x0000)
struct UI_RecordPage_Ranking_Setter_CurRankingType final
{
public:
	ERankingType                                  _ranking_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_Setter_CurRankingType) == 0x000001, "Wrong alignment on UI_RecordPage_Ranking_Setter_CurRankingType");
static_assert(sizeof(UI_RecordPage_Ranking_Setter_CurRankingType) == 0x000001, "Wrong size on UI_RecordPage_Ranking_Setter_CurRankingType");
static_assert(offsetof(UI_RecordPage_Ranking_Setter_CurRankingType, _ranking_type) == 0x000000, "Member 'UI_RecordPage_Ranking_Setter_CurRankingType::_ranking_type' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.Setter_SeasonID
// 0x0004 (0x0004 - 0x0000)
struct UI_RecordPage_Ranking_Setter_SeasonID final
{
public:
	struct FSeasonID                              _selected_season_id;                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_Setter_SeasonID) == 0x000004, "Wrong alignment on UI_RecordPage_Ranking_Setter_SeasonID");
static_assert(sizeof(UI_RecordPage_Ranking_Setter_SeasonID) == 0x000004, "Wrong size on UI_RecordPage_Ranking_Setter_SeasonID");
static_assert(offsetof(UI_RecordPage_Ranking_Setter_SeasonID, _selected_season_id) == 0x000000, "Member 'UI_RecordPage_Ranking_Setter_SeasonID::_selected_season_id' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.UpdateFriendRankingContext
// 0x0004 (0x0004 - 0x0000)
struct UI_RecordPage_Ranking_UpdateFriendRankingContext final
{
public:
	int32                                         _page_offset;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_UpdateFriendRankingContext) == 0x000004, "Wrong alignment on UI_RecordPage_Ranking_UpdateFriendRankingContext");
static_assert(sizeof(UI_RecordPage_Ranking_UpdateFriendRankingContext) == 0x000004, "Wrong size on UI_RecordPage_Ranking_UpdateFriendRankingContext");
static_assert(offsetof(UI_RecordPage_Ranking_UpdateFriendRankingContext, _page_offset) == 0x000000, "Member 'UI_RecordPage_Ranking_UpdateFriendRankingContext::_page_offset' has a wrong offset!");

// Function Stigma.UI_RecordPage_Ranking.UpdateRankingContext
// 0x0010 (0x0010 - 0x0000)
struct UI_RecordPage_Ranking_UpdateRankingContext final
{
public:
	ERankingType                                  _ranking_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2657[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _page_offset;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           _search_user;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Ranking_UpdateRankingContext) == 0x000008, "Wrong alignment on UI_RecordPage_Ranking_UpdateRankingContext");
static_assert(sizeof(UI_RecordPage_Ranking_UpdateRankingContext) == 0x000010, "Wrong size on UI_RecordPage_Ranking_UpdateRankingContext");
static_assert(offsetof(UI_RecordPage_Ranking_UpdateRankingContext, _ranking_type) == 0x000000, "Member 'UI_RecordPage_Ranking_UpdateRankingContext::_ranking_type' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_UpdateRankingContext, _page_offset) == 0x000004, "Member 'UI_RecordPage_Ranking_UpdateRankingContext::_page_offset' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Ranking_UpdateRankingContext, _search_user) == 0x000008, "Member 'UI_RecordPage_Ranking_UpdateRankingContext::_search_user' has a wrong offset!");

// Function Stigma.UI_RecordPage_Tier.OnACK_GetSearchedUserRankingList
// 0x0048 (0x0048 - 0x0000)
struct UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2659[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadSearchedUserRanking           _ack;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0028(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList) == 0x000008, "Wrong alignment on UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList");
static_assert(sizeof(UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList) == 0x000048, "Wrong size on UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList");
static_assert(offsetof(UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList, _rcode) == 0x000000, "Member 'UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList, _ack) == 0x000008, "Member 'UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList, ReturnValue) == 0x000028, "Member 'UI_RecordPage_Tier_OnACK_GetSearchedUserRankingList::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Tier.OnACK_GetUserTierInfo
// 0x0078 (0x0078 - 0x0000)
struct UI_RecordPage_Tier_OnACK_GetUserTierInfo final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ReadUserTierInfo                  _ack;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0058(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Tier_OnACK_GetUserTierInfo) == 0x000008, "Wrong alignment on UI_RecordPage_Tier_OnACK_GetUserTierInfo");
static_assert(sizeof(UI_RecordPage_Tier_OnACK_GetUserTierInfo) == 0x000078, "Wrong size on UI_RecordPage_Tier_OnACK_GetUserTierInfo");
static_assert(offsetof(UI_RecordPage_Tier_OnACK_GetUserTierInfo, _rcode) == 0x000000, "Member 'UI_RecordPage_Tier_OnACK_GetUserTierInfo::_rcode' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Tier_OnACK_GetUserTierInfo, _ack) == 0x000008, "Member 'UI_RecordPage_Tier_OnACK_GetUserTierInfo::_ack' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Tier_OnACK_GetUserTierInfo, ReturnValue) == 0x000058, "Member 'UI_RecordPage_Tier_OnACK_GetUserTierInfo::ReturnValue' has a wrong offset!");

// Function Stigma.UI_RecordPage_Tier.ScrollToItem
// 0x0010 (0x0010 - 0x0000)
struct UI_RecordPage_Tier_ScrollToItem final
{
public:
	class UListView*                              _list_view;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _item;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Tier_ScrollToItem) == 0x000008, "Wrong alignment on UI_RecordPage_Tier_ScrollToItem");
static_assert(sizeof(UI_RecordPage_Tier_ScrollToItem) == 0x000010, "Wrong size on UI_RecordPage_Tier_ScrollToItem");
static_assert(offsetof(UI_RecordPage_Tier_ScrollToItem, _list_view) == 0x000000, "Member 'UI_RecordPage_Tier_ScrollToItem::_list_view' has a wrong offset!");
static_assert(offsetof(UI_RecordPage_Tier_ScrollToItem, _item) == 0x000008, "Member 'UI_RecordPage_Tier_ScrollToItem::_item' has a wrong offset!");

// Function Stigma.UI_RecordPage_Tier.Setter_SeasonID
// 0x0004 (0x0004 - 0x0000)
struct UI_RecordPage_Tier_Setter_SeasonID final
{
public:
	struct FSeasonID                              _selected_season_id;                               // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Tier_Setter_SeasonID) == 0x000004, "Wrong alignment on UI_RecordPage_Tier_Setter_SeasonID");
static_assert(sizeof(UI_RecordPage_Tier_Setter_SeasonID) == 0x000004, "Wrong size on UI_RecordPage_Tier_Setter_SeasonID");
static_assert(offsetof(UI_RecordPage_Tier_Setter_SeasonID, _selected_season_id) == 0x000000, "Member 'UI_RecordPage_Tier_Setter_SeasonID::_selected_season_id' has a wrong offset!");

// Function Stigma.UI_RecordPage_Tier.Setter_TierContextIdx
// 0x0004 (0x0004 - 0x0000)
struct UI_RecordPage_Tier_Setter_TierContextIdx final
{
public:
	int32                                         _tier_ctx_idx;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_RecordPage_Tier_Setter_TierContextIdx) == 0x000004, "Wrong alignment on UI_RecordPage_Tier_Setter_TierContextIdx");
static_assert(sizeof(UI_RecordPage_Tier_Setter_TierContextIdx) == 0x000004, "Wrong size on UI_RecordPage_Tier_Setter_TierContextIdx");
static_assert(offsetof(UI_RecordPage_Tier_Setter_TierContextIdx, _tier_ctx_idx) == 0x000000, "Member 'UI_RecordPage_Tier_Setter_TierContextIdx::_tier_ctx_idx' has a wrong offset!");

// Function Stigma.UI_Result_Mission.SetDesc
// 0x0018 (0x0018 - 0x0000)
struct UI_Result_Mission_SetDesc final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Result_Mission_SetDesc) == 0x000008, "Wrong alignment on UI_Result_Mission_SetDesc");
static_assert(sizeof(UI_Result_Mission_SetDesc) == 0x000018, "Wrong size on UI_Result_Mission_SetDesc");
static_assert(offsetof(UI_Result_Mission_SetDesc, _text) == 0x000000, "Member 'UI_Result_Mission_SetDesc::_text' has a wrong offset!");

// Function Stigma.UI_Result_Mission.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct UI_Result_Mission_SetTitle final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_Result_Mission_SetTitle) == 0x000008, "Wrong alignment on UI_Result_Mission_SetTitle");
static_assert(sizeof(UI_Result_Mission_SetTitle) == 0x000018, "Wrong size on UI_Result_Mission_SetTitle");
static_assert(offsetof(UI_Result_Mission_SetTitle, _text) == 0x000000, "Member 'UI_Result_Mission_SetTitle::_text' has a wrong offset!");

// Function Stigma.UI_SearchUserPopup.IsFriendAskableUser
// 0x0020 (0x0020 - 0x0000)
struct UI_SearchUserPopup_IsFriendAskableUser final
{
public:
	struct FUserName                              _nickname;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2661[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_SearchUserPopup_IsFriendAskableUser) == 0x000008, "Wrong alignment on UI_SearchUserPopup_IsFriendAskableUser");
static_assert(sizeof(UI_SearchUserPopup_IsFriendAskableUser) == 0x000020, "Wrong size on UI_SearchUserPopup_IsFriendAskableUser");
static_assert(offsetof(UI_SearchUserPopup_IsFriendAskableUser, _nickname) == 0x000000, "Member 'UI_SearchUserPopup_IsFriendAskableUser::_nickname' has a wrong offset!");
static_assert(offsetof(UI_SearchUserPopup_IsFriendAskableUser, ReturnValue) == 0x000018, "Member 'UI_SearchUserPopup_IsFriendAskableUser::ReturnValue' has a wrong offset!");

// Function Stigma.UI_SearchUserPopup.SetPopupMode
// 0x0001 (0x0001 - 0x0000)
struct UI_SearchUserPopup_SetPopupMode final
{
public:
	ESearchUserPopupMode                          _popup_mode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SearchUserPopup_SetPopupMode) == 0x000001, "Wrong alignment on UI_SearchUserPopup_SetPopupMode");
static_assert(sizeof(UI_SearchUserPopup_SetPopupMode) == 0x000001, "Wrong size on UI_SearchUserPopup_SetPopupMode");
static_assert(offsetof(UI_SearchUserPopup_SetPopupMode, _popup_mode) == 0x000000, "Member 'UI_SearchUserPopup_SetPopupMode::_popup_mode' has a wrong offset!");

// Function Stigma.UI_SearchUserPopup.ShowSearchFailedText
// 0x0010 (0x0010 - 0x0000)
struct UI_SearchUserPopup_ShowSearchFailedText final
{
public:
	class FString                                 _nickname;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SearchUserPopup_ShowSearchFailedText) == 0x000008, "Wrong alignment on UI_SearchUserPopup_ShowSearchFailedText");
static_assert(sizeof(UI_SearchUserPopup_ShowSearchFailedText) == 0x000010, "Wrong size on UI_SearchUserPopup_ShowSearchFailedText");
static_assert(offsetof(UI_SearchUserPopup_ShowSearchFailedText, _nickname) == 0x000000, "Member 'UI_SearchUserPopup_ShowSearchFailedText::_nickname' has a wrong offset!");

// Function Stigma.UI_SearchUserPopup.CheckIsInAskFriendCoolTime
// 0x0028 (0x0028 - 0x0000)
struct UI_SearchUserPopup_CheckIsInAskFriendCoolTime final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              _nickname;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2662[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_SearchUserPopup_CheckIsInAskFriendCoolTime) == 0x000008, "Wrong alignment on UI_SearchUserPopup_CheckIsInAskFriendCoolTime");
static_assert(sizeof(UI_SearchUserPopup_CheckIsInAskFriendCoolTime) == 0x000028, "Wrong size on UI_SearchUserPopup_CheckIsInAskFriendCoolTime");
static_assert(offsetof(UI_SearchUserPopup_CheckIsInAskFriendCoolTime, _user_id) == 0x000000, "Member 'UI_SearchUserPopup_CheckIsInAskFriendCoolTime::_user_id' has a wrong offset!");
static_assert(offsetof(UI_SearchUserPopup_CheckIsInAskFriendCoolTime, _nickname) == 0x000008, "Member 'UI_SearchUserPopup_CheckIsInAskFriendCoolTime::_nickname' has a wrong offset!");
static_assert(offsetof(UI_SearchUserPopup_CheckIsInAskFriendCoolTime, ReturnValue) == 0x000020, "Member 'UI_SearchUserPopup_CheckIsInAskFriendCoolTime::ReturnValue' has a wrong offset!");

// Function Stigma.UI_ShopBundlePopup.InitBuySlider
// 0x0004 (0x0004 - 0x0000)
struct UI_ShopBundlePopup_InitBuySlider final
{
public:
	int32                                         _slider_max_value;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopBundlePopup_InitBuySlider) == 0x000004, "Wrong alignment on UI_ShopBundlePopup_InitBuySlider");
static_assert(sizeof(UI_ShopBundlePopup_InitBuySlider) == 0x000004, "Wrong size on UI_ShopBundlePopup_InitBuySlider");
static_assert(offsetof(UI_ShopBundlePopup_InitBuySlider, _slider_max_value) == 0x000000, "Member 'UI_ShopBundlePopup_InitBuySlider::_slider_max_value' has a wrong offset!");

// Function Stigma.UI_ShopBundlePopup.InitPriceBtn
// 0x0200 (0x0200 - 0x0000)
struct UI_ShopBundlePopup_InitPriceBtn final
{
public:
	class UGoodsObject*                           _goods_obj;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConfig_Goods                          _goods_def;                                        // 0x0008(0x01F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _set_enabled;                                      // 0x01F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2663[0x7];                                     // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ShopBundlePopup_InitPriceBtn) == 0x000008, "Wrong alignment on UI_ShopBundlePopup_InitPriceBtn");
static_assert(sizeof(UI_ShopBundlePopup_InitPriceBtn) == 0x000200, "Wrong size on UI_ShopBundlePopup_InitPriceBtn");
static_assert(offsetof(UI_ShopBundlePopup_InitPriceBtn, _goods_obj) == 0x000000, "Member 'UI_ShopBundlePopup_InitPriceBtn::_goods_obj' has a wrong offset!");
static_assert(offsetof(UI_ShopBundlePopup_InitPriceBtn, _goods_def) == 0x000008, "Member 'UI_ShopBundlePopup_InitPriceBtn::_goods_def' has a wrong offset!");
static_assert(offsetof(UI_ShopBundlePopup_InitPriceBtn, _set_enabled) == 0x0001F8, "Member 'UI_ShopBundlePopup_InitPriceBtn::_set_enabled' has a wrong offset!");

// Function Stigma.UI_ShopBundlePopup.InitWidget
// 0x0008 (0x0008 - 0x0000)
struct UI_ShopBundlePopup_InitWidget final
{
public:
	class UGoodsObject*                           _goods_obj;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopBundlePopup_InitWidget) == 0x000008, "Wrong alignment on UI_ShopBundlePopup_InitWidget");
static_assert(sizeof(UI_ShopBundlePopup_InitWidget) == 0x000008, "Wrong size on UI_ShopBundlePopup_InitWidget");
static_assert(offsetof(UI_ShopBundlePopup_InitWidget, _goods_obj) == 0x000000, "Member 'UI_ShopBundlePopup_InitWidget::_goods_obj' has a wrong offset!");

// Function Stigma.UI_ShopBundlePopup.OnClickItem
// 0x0010 (0x0010 - 0x0000)
struct UI_ShopBundlePopup_OnClickItem final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _selected;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2664[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UI_ShopBundlePopup_OnClickItem) == 0x000008, "Wrong alignment on UI_ShopBundlePopup_OnClickItem");
static_assert(sizeof(UI_ShopBundlePopup_OnClickItem) == 0x000010, "Wrong size on UI_ShopBundlePopup_OnClickItem");
static_assert(offsetof(UI_ShopBundlePopup_OnClickItem, _widget) == 0x000000, "Member 'UI_ShopBundlePopup_OnClickItem::_widget' has a wrong offset!");
static_assert(offsetof(UI_ShopBundlePopup_OnClickItem, _selected) == 0x000008, "Member 'UI_ShopBundlePopup_OnClickItem::_selected' has a wrong offset!");

// Function Stigma.UI_ShopBundlePopup.SetBuyLimitText
// 0x000C (0x000C - 0x0000)
struct UI_ShopBundlePopup_SetBuyLimitText final
{
public:
	EBuyLimitType                                 _limit_type;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2665[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _current_count;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_count;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopBundlePopup_SetBuyLimitText) == 0x000004, "Wrong alignment on UI_ShopBundlePopup_SetBuyLimitText");
static_assert(sizeof(UI_ShopBundlePopup_SetBuyLimitText) == 0x00000C, "Wrong size on UI_ShopBundlePopup_SetBuyLimitText");
static_assert(offsetof(UI_ShopBundlePopup_SetBuyLimitText, _limit_type) == 0x000000, "Member 'UI_ShopBundlePopup_SetBuyLimitText::_limit_type' has a wrong offset!");
static_assert(offsetof(UI_ShopBundlePopup_SetBuyLimitText, _current_count) == 0x000004, "Member 'UI_ShopBundlePopup_SetBuyLimitText::_current_count' has a wrong offset!");
static_assert(offsetof(UI_ShopBundlePopup_SetBuyLimitText, _max_count) == 0x000008, "Member 'UI_ShopBundlePopup_SetBuyLimitText::_max_count' has a wrong offset!");

// Function Stigma.UI_ShopBundlePopup.UpdatePriceBtnByCount
// 0x0004 (0x0004 - 0x0000)
struct UI_ShopBundlePopup_UpdatePriceBtnByCount final
{
public:
	int32                                         _buy_count;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopBundlePopup_UpdatePriceBtnByCount) == 0x000004, "Wrong alignment on UI_ShopBundlePopup_UpdatePriceBtnByCount");
static_assert(sizeof(UI_ShopBundlePopup_UpdatePriceBtnByCount) == 0x000004, "Wrong size on UI_ShopBundlePopup_UpdatePriceBtnByCount");
static_assert(offsetof(UI_ShopBundlePopup_UpdatePriceBtnByCount, _buy_count) == 0x000000, "Member 'UI_ShopBundlePopup_UpdatePriceBtnByCount::_buy_count' has a wrong offset!");

// Function Stigma.UI_ShopMasterFilter.OnSelectedMasterFilter
// 0x0004 (0x0004 - 0x0000)
struct UI_ShopMasterFilter_OnSelectedMasterFilter final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_ShopMasterFilter_OnSelectedMasterFilter) == 0x000004, "Wrong alignment on UI_ShopMasterFilter_OnSelectedMasterFilter");
static_assert(sizeof(UI_ShopMasterFilter_OnSelectedMasterFilter) == 0x000004, "Wrong size on UI_ShopMasterFilter_OnSelectedMasterFilter");
static_assert(offsetof(UI_ShopMasterFilter_OnSelectedMasterFilter, _idx) == 0x000000, "Member 'UI_ShopMasterFilter_OnSelectedMasterFilter::_idx' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnAck_AskFriend
// 0x0038 (0x0038 - 0x0000)
struct UI_SocialPopup_OnAck_AskFriend final
{
public:
	EResultCode                                   _net_result_code;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2668[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_Friend                            _response;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnAck_AskFriend) == 0x000008, "Wrong alignment on UI_SocialPopup_OnAck_AskFriend");
static_assert(sizeof(UI_SocialPopup_OnAck_AskFriend) == 0x000038, "Wrong size on UI_SocialPopup_OnAck_AskFriend");
static_assert(offsetof(UI_SocialPopup_OnAck_AskFriend, _net_result_code) == 0x000000, "Member 'UI_SocialPopup_OnAck_AskFriend::_net_result_code' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_OnAck_AskFriend, _response) == 0x000008, "Member 'UI_SocialPopup_OnAck_AskFriend::_response' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_OnAck_AskFriend, ReturnValue) == 0x000018, "Member 'UI_SocialPopup_OnAck_AskFriend::ReturnValue' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnAck_FriendAccept
// 0x0058 (0x0058 - 0x0000)
struct UI_SocialPopup_OnAck_FriendAccept final
{
public:
	EResultCode                                   _net_result_code;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2669[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_FriendUpdate                      _response;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnAck_FriendAccept) == 0x000008, "Wrong alignment on UI_SocialPopup_OnAck_FriendAccept");
static_assert(sizeof(UI_SocialPopup_OnAck_FriendAccept) == 0x000058, "Wrong size on UI_SocialPopup_OnAck_FriendAccept");
static_assert(offsetof(UI_SocialPopup_OnAck_FriendAccept, _net_result_code) == 0x000000, "Member 'UI_SocialPopup_OnAck_FriendAccept::_net_result_code' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_OnAck_FriendAccept, _response) == 0x000008, "Member 'UI_SocialPopup_OnAck_FriendAccept::_response' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_OnAck_FriendAccept, ReturnValue) == 0x000038, "Member 'UI_SocialPopup_OnAck_FriendAccept::ReturnValue' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnAck_FriendRefuse
// 0x0058 (0x0058 - 0x0000)
struct UI_SocialPopup_OnAck_FriendRefuse final
{
public:
	EResultCode                                   _net_result_code;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_266A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_FriendUpdate                      _response;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0038(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnAck_FriendRefuse) == 0x000008, "Wrong alignment on UI_SocialPopup_OnAck_FriendRefuse");
static_assert(sizeof(UI_SocialPopup_OnAck_FriendRefuse) == 0x000058, "Wrong size on UI_SocialPopup_OnAck_FriendRefuse");
static_assert(offsetof(UI_SocialPopup_OnAck_FriendRefuse, _net_result_code) == 0x000000, "Member 'UI_SocialPopup_OnAck_FriendRefuse::_net_result_code' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_OnAck_FriendRefuse, _response) == 0x000008, "Member 'UI_SocialPopup_OnAck_FriendRefuse::_response' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_OnAck_FriendRefuse, ReturnValue) == 0x000038, "Member 'UI_SocialPopup_OnAck_FriendRefuse::ReturnValue' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnBriefSlotFriendDeleteRequested
// 0x0008 (0x0008 - 0x0000)
struct UI_SocialPopup_OnBriefSlotFriendDeleteRequested final
{
public:
	const class UUserProfile*                     _target_user;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnBriefSlotFriendDeleteRequested) == 0x000008, "Wrong alignment on UI_SocialPopup_OnBriefSlotFriendDeleteRequested");
static_assert(sizeof(UI_SocialPopup_OnBriefSlotFriendDeleteRequested) == 0x000008, "Wrong size on UI_SocialPopup_OnBriefSlotFriendDeleteRequested");
static_assert(offsetof(UI_SocialPopup_OnBriefSlotFriendDeleteRequested, _target_user) == 0x000000, "Member 'UI_SocialPopup_OnBriefSlotFriendDeleteRequested::_target_user' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnSlotFriendAcceptClicked
// 0x0008 (0x0008 - 0x0000)
struct UI_SocialPopup_OnSlotFriendAcceptClicked final
{
public:
	const class UUserProfile*                     _slot;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnSlotFriendAcceptClicked) == 0x000008, "Wrong alignment on UI_SocialPopup_OnSlotFriendAcceptClicked");
static_assert(sizeof(UI_SocialPopup_OnSlotFriendAcceptClicked) == 0x000008, "Wrong size on UI_SocialPopup_OnSlotFriendAcceptClicked");
static_assert(offsetof(UI_SocialPopup_OnSlotFriendAcceptClicked, _slot) == 0x000000, "Member 'UI_SocialPopup_OnSlotFriendAcceptClicked::_slot' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnSlotFriendLeftClicked
// 0x0008 (0x0008 - 0x0000)
struct UI_SocialPopup_OnSlotFriendLeftClicked final
{
public:
	const class UUserProfile*                     _slot;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnSlotFriendLeftClicked) == 0x000008, "Wrong alignment on UI_SocialPopup_OnSlotFriendLeftClicked");
static_assert(sizeof(UI_SocialPopup_OnSlotFriendLeftClicked) == 0x000008, "Wrong size on UI_SocialPopup_OnSlotFriendLeftClicked");
static_assert(offsetof(UI_SocialPopup_OnSlotFriendLeftClicked, _slot) == 0x000000, "Member 'UI_SocialPopup_OnSlotFriendLeftClicked::_slot' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnSlotFriendRefuseClicked
// 0x0008 (0x0008 - 0x0000)
struct UI_SocialPopup_OnSlotFriendRefuseClicked final
{
public:
	const class UUserProfile*                     _slot;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnSlotFriendRefuseClicked) == 0x000008, "Wrong alignment on UI_SocialPopup_OnSlotFriendRefuseClicked");
static_assert(sizeof(UI_SocialPopup_OnSlotFriendRefuseClicked) == 0x000008, "Wrong size on UI_SocialPopup_OnSlotFriendRefuseClicked");
static_assert(offsetof(UI_SocialPopup_OnSlotFriendRefuseClicked, _slot) == 0x000000, "Member 'UI_SocialPopup_OnSlotFriendRefuseClicked::_slot' has a wrong offset!");

// Function Stigma.UI_SocialPopup.OnSlotFriendRightClicked
// 0x0008 (0x0008 - 0x0000)
struct UI_SocialPopup_OnSlotFriendRightClicked final
{
public:
	const class UUserProfile*                     _slot;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_OnSlotFriendRightClicked) == 0x000008, "Wrong alignment on UI_SocialPopup_OnSlotFriendRightClicked");
static_assert(sizeof(UI_SocialPopup_OnSlotFriendRightClicked) == 0x000008, "Wrong size on UI_SocialPopup_OnSlotFriendRightClicked");
static_assert(offsetof(UI_SocialPopup_OnSlotFriendRightClicked, _slot) == 0x000000, "Member 'UI_SocialPopup_OnSlotFriendRightClicked::_slot' has a wrong offset!");

// Function Stigma.UI_SocialPopup.SelectTab
// 0x0001 (0x0001 - 0x0000)
struct UI_SocialPopup_SelectTab final
{
public:
	ESocialPopupTabType                           _tab_type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_SelectTab) == 0x000001, "Wrong alignment on UI_SocialPopup_SelectTab");
static_assert(sizeof(UI_SocialPopup_SelectTab) == 0x000001, "Wrong size on UI_SocialPopup_SelectTab");
static_assert(offsetof(UI_SocialPopup_SelectTab, _tab_type) == 0x000000, "Member 'UI_SocialPopup_SelectTab::_tab_type' has a wrong offset!");

// Function Stigma.UI_SocialPopup.FindCurDisplayedUserSlot
// 0x0010 (0x0010 - 0x0000)
struct UI_SocialPopup_FindCurDisplayedUserSlot final
{
public:
	const class UUserProfile*                     _user;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UUI_BriefUserSlot*                ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_SocialPopup_FindCurDisplayedUserSlot) == 0x000008, "Wrong alignment on UI_SocialPopup_FindCurDisplayedUserSlot");
static_assert(sizeof(UI_SocialPopup_FindCurDisplayedUserSlot) == 0x000010, "Wrong size on UI_SocialPopup_FindCurDisplayedUserSlot");
static_assert(offsetof(UI_SocialPopup_FindCurDisplayedUserSlot, _user) == 0x000000, "Member 'UI_SocialPopup_FindCurDisplayedUserSlot::_user' has a wrong offset!");
static_assert(offsetof(UI_SocialPopup_FindCurDisplayedUserSlot, ReturnValue) == 0x000008, "Member 'UI_SocialPopup_FindCurDisplayedUserSlot::ReturnValue' has a wrong offset!");

// Function Stigma.UI_TabInspector.ActivateSlot
// 0x0004 (0x0004 - 0x0000)
struct UI_TabInspector_ActivateSlot final
{
public:
	int32                                         _idx;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TabInspector_ActivateSlot) == 0x000004, "Wrong alignment on UI_TabInspector_ActivateSlot");
static_assert(sizeof(UI_TabInspector_ActivateSlot) == 0x000004, "Wrong size on UI_TabInspector_ActivateSlot");
static_assert(offsetof(UI_TabInspector_ActivateSlot, _idx) == 0x000000, "Member 'UI_TabInspector_ActivateSlot::_idx' has a wrong offset!");

// Function Stigma.UI_TabInspector.InitWidget
// 0x0004 (0x0004 - 0x0000)
struct UI_TabInspector_InitWidget final
{
public:
	int32                                         _size;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TabInspector_InitWidget) == 0x000004, "Wrong alignment on UI_TabInspector_InitWidget");
static_assert(sizeof(UI_TabInspector_InitWidget) == 0x000004, "Wrong size on UI_TabInspector_InitWidget");
static_assert(offsetof(UI_TabInspector_InitWidget, _size) == 0x000000, "Member 'UI_TabInspector_InitWidget::_size' has a wrong offset!");

// Function Stigma.UI_TDM_SubScoreSlot.SetTeamBrush
// 0x00D0 (0x00D0 - 0x0000)
struct UI_TDM_SubScoreSlot_SetTeamBrush final
{
public:
	struct FSlateBrush                            _brush;                                            // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TDM_SubScoreSlot_SetTeamBrush) == 0x000010, "Wrong alignment on UI_TDM_SubScoreSlot_SetTeamBrush");
static_assert(sizeof(UI_TDM_SubScoreSlot_SetTeamBrush) == 0x0000D0, "Wrong size on UI_TDM_SubScoreSlot_SetTeamBrush");
static_assert(offsetof(UI_TDM_SubScoreSlot_SetTeamBrush, _brush) == 0x000000, "Member 'UI_TDM_SubScoreSlot_SetTeamBrush::_brush' has a wrong offset!");

// Function Stigma.UI_TierPromotionPopup.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UI_TierPromotionPopup_SetValue final
{
public:
	struct FBC_TierUpdate                         _packet;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TierPromotionPopup_SetValue) == 0x000004, "Wrong alignment on UI_TierPromotionPopup_SetValue");
static_assert(sizeof(UI_TierPromotionPopup_SetValue) == 0x000008, "Wrong size on UI_TierPromotionPopup_SetValue");
static_assert(offsetof(UI_TierPromotionPopup_SetValue, _packet) == 0x000000, "Member 'UI_TierPromotionPopup_SetValue::_packet' has a wrong offset!");

// Function Stigma.UI_TooltipKey.SetInfoText
// 0x0018 (0x0018 - 0x0000)
struct UI_TooltipKey_SetInfoText final
{
public:
	class FText                                   _info_text;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TooltipKey_SetInfoText) == 0x000008, "Wrong alignment on UI_TooltipKey_SetInfoText");
static_assert(sizeof(UI_TooltipKey_SetInfoText) == 0x000018, "Wrong size on UI_TooltipKey_SetInfoText");
static_assert(offsetof(UI_TooltipKey_SetInfoText, _info_text) == 0x000000, "Member 'UI_TooltipKey_SetInfoText::_info_text' has a wrong offset!");

// Function Stigma.UI_TooltipKey.SetKey
// 0x0018 (0x0018 - 0x0000)
struct UI_TooltipKey_SetKey final
{
public:
	struct FKey                                   _Key;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_TooltipKey_SetKey) == 0x000008, "Wrong alignment on UI_TooltipKey_SetKey");
static_assert(sizeof(UI_TooltipKey_SetKey) == 0x000018, "Wrong size on UI_TooltipKey_SetKey");
static_assert(offsetof(UI_TooltipKey_SetKey, _Key) == 0x000000, "Member 'UI_TooltipKey_SetKey::_Key' has a wrong offset!");

// Function Stigma.UI_WaitingRoom.AddChat
// 0x0058 (0x0058 - 0x0000)
struct UI_WaitingRoom_AddChat final
{
public:
	struct FChatMsg                               _chat_msg;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_AddChat) == 0x000008, "Wrong alignment on UI_WaitingRoom_AddChat");
static_assert(sizeof(UI_WaitingRoom_AddChat) == 0x000058, "Wrong size on UI_WaitingRoom_AddChat");
static_assert(offsetof(UI_WaitingRoom_AddChat, _chat_msg) == 0x000000, "Member 'UI_WaitingRoom_AddChat::_chat_msg' has a wrong offset!");

// Function Stigma.UI_WaitingRoom.GetRootCanvasPanel
// 0x0008 (0x0008 - 0x0000)
struct UI_WaitingRoom_GetRootCanvasPanel final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_GetRootCanvasPanel) == 0x000008, "Wrong alignment on UI_WaitingRoom_GetRootCanvasPanel");
static_assert(sizeof(UI_WaitingRoom_GetRootCanvasPanel) == 0x000008, "Wrong size on UI_WaitingRoom_GetRootCanvasPanel");
static_assert(offsetof(UI_WaitingRoom_GetRootCanvasPanel, ReturnValue) == 0x000000, "Member 'UI_WaitingRoom_GetRootCanvasPanel::ReturnValue' has a wrong offset!");

// Function Stigma.UI_WaitingRoom.OnChangeWaitingRoomState
// 0x0001 (0x0001 - 0x0000)
struct UI_WaitingRoom_OnChangeWaitingRoomState final
{
public:
	EWaitingRoomState                             _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI_WaitingRoom_OnChangeWaitingRoomState) == 0x000001, "Wrong alignment on UI_WaitingRoom_OnChangeWaitingRoomState");
static_assert(sizeof(UI_WaitingRoom_OnChangeWaitingRoomState) == 0x000001, "Wrong size on UI_WaitingRoom_OnChangeWaitingRoomState");
static_assert(offsetof(UI_WaitingRoom_OnChangeWaitingRoomState, _state) == 0x000000, "Member 'UI_WaitingRoom_OnChangeWaitingRoomState::_state' has a wrong offset!");

// Function Stigma.UserIDBlueprintLibrary.IsEqualUserID
// 0x0018 (0x0018 - 0x0000)
struct UserIDBlueprintLibrary_IsEqualUserID final
{
public:
	struct FUserID                                _id1;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                _id2;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2670[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserIDBlueprintLibrary_IsEqualUserID) == 0x000008, "Wrong alignment on UserIDBlueprintLibrary_IsEqualUserID");
static_assert(sizeof(UserIDBlueprintLibrary_IsEqualUserID) == 0x000018, "Wrong size on UserIDBlueprintLibrary_IsEqualUserID");
static_assert(offsetof(UserIDBlueprintLibrary_IsEqualUserID, _id1) == 0x000000, "Member 'UserIDBlueprintLibrary_IsEqualUserID::_id1' has a wrong offset!");
static_assert(offsetof(UserIDBlueprintLibrary_IsEqualUserID, _id2) == 0x000008, "Member 'UserIDBlueprintLibrary_IsEqualUserID::_id2' has a wrong offset!");
static_assert(offsetof(UserIDBlueprintLibrary_IsEqualUserID, ReturnValue) == 0x000010, "Member 'UserIDBlueprintLibrary_IsEqualUserID::ReturnValue' has a wrong offset!");

// Function Stigma.UserIDBlueprintLibrary.MakeUserID
// 0x0010 (0x0010 - 0x0000)
struct UserIDBlueprintLibrary_MakeUserID final
{
public:
	int32                                         _id;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2671[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserID                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserIDBlueprintLibrary_MakeUserID) == 0x000008, "Wrong alignment on UserIDBlueprintLibrary_MakeUserID");
static_assert(sizeof(UserIDBlueprintLibrary_MakeUserID) == 0x000010, "Wrong size on UserIDBlueprintLibrary_MakeUserID");
static_assert(offsetof(UserIDBlueprintLibrary_MakeUserID, _id) == 0x000000, "Member 'UserIDBlueprintLibrary_MakeUserID::_id' has a wrong offset!");
static_assert(offsetof(UserIDBlueprintLibrary_MakeUserID, ReturnValue) == 0x000008, "Member 'UserIDBlueprintLibrary_MakeUserID::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.AddControlOptionForMaster
// 0x23C0 (0x23C0 - 0x0000)
struct UserOption_AddControlOptionForMaster final
{
public:
	struct FControlOption                         _option;                                           // 0x0000(0x23C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_AddControlOptionForMaster) == 0x000008, "Wrong alignment on UserOption_AddControlOptionForMaster");
static_assert(sizeof(UserOption_AddControlOptionForMaster) == 0x0023C0, "Wrong size on UserOption_AddControlOptionForMaster");
static_assert(offsetof(UserOption_AddControlOptionForMaster, _option) == 0x000000, "Member 'UserOption_AddControlOptionForMaster::_option' has a wrong offset!");

// Function Stigma.UserOption.GetAnnouncerType
// 0x0001 (0x0001 - 0x0000)
struct UserOption_GetAnnouncerType final
{
public:
	EAnnouncerType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetAnnouncerType) == 0x000001, "Wrong alignment on UserOption_GetAnnouncerType");
static_assert(sizeof(UserOption_GetAnnouncerType) == 0x000001, "Wrong size on UserOption_GetAnnouncerType");
static_assert(offsetof(UserOption_GetAnnouncerType, ReturnValue) == 0x000000, "Member 'UserOption_GetAnnouncerType::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetBgmVolume
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetBgmVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetBgmVolume) == 0x000004, "Wrong alignment on UserOption_GetBgmVolume");
static_assert(sizeof(UserOption_GetBgmVolume) == 0x000004, "Wrong size on UserOption_GetBgmVolume");
static_assert(offsetof(UserOption_GetBgmVolume, ReturnValue) == 0x000000, "Member 'UserOption_GetBgmVolume::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetBrightness
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetBrightness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetBrightness) == 0x000004, "Wrong alignment on UserOption_GetBrightness");
static_assert(sizeof(UserOption_GetBrightness) == 0x000004, "Wrong size on UserOption_GetBrightness");
static_assert(offsetof(UserOption_GetBrightness, ReturnValue) == 0x000000, "Member 'UserOption_GetBrightness::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetControlOptionForMaster
// 0x23C8 (0x23C8 - 0x0000)
struct UserOption_GetControlOptionForMaster final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2675[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FControlOption                         ReturnValue;                                       // 0x0008(0x23C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetControlOptionForMaster) == 0x000008, "Wrong alignment on UserOption_GetControlOptionForMaster");
static_assert(sizeof(UserOption_GetControlOptionForMaster) == 0x0023C8, "Wrong size on UserOption_GetControlOptionForMaster");
static_assert(offsetof(UserOption_GetControlOptionForMaster, _type) == 0x000000, "Member 'UserOption_GetControlOptionForMaster::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetControlOptionForMaster, ReturnValue) == 0x000008, "Member 'UserOption_GetControlOptionForMaster::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetControlOptionForMasters
// 0x0010 (0x0010 - 0x0000)
struct UserOption_GetControlOptionForMasters final
{
public:
	TArray<struct FControlOption>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetControlOptionForMasters) == 0x000008, "Wrong alignment on UserOption_GetControlOptionForMasters");
static_assert(sizeof(UserOption_GetControlOptionForMasters) == 0x000010, "Wrong size on UserOption_GetControlOptionForMasters");
static_assert(offsetof(UserOption_GetControlOptionForMasters, ReturnValue) == 0x000000, "Member 'UserOption_GetControlOptionForMasters::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetControlOptionMasterCount
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetControlOptionMasterCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetControlOptionMasterCount) == 0x000004, "Wrong alignment on UserOption_GetControlOptionMasterCount");
static_assert(sizeof(UserOption_GetControlOptionMasterCount) == 0x000004, "Wrong size on UserOption_GetControlOptionMasterCount");
static_assert(offsetof(UserOption_GetControlOptionMasterCount, ReturnValue) == 0x000000, "Member 'UserOption_GetControlOptionMasterCount::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetControlOptionRefForMaster
// 0x23D0 (0x23D0 - 0x0000)
struct UserOption_GetControlOptionRefForMaster final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2676[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FControlOption                         _result_opt;                                       // 0x0008(0x23C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x23C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2677[0x7];                                     // 0x23C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_GetControlOptionRefForMaster) == 0x000008, "Wrong alignment on UserOption_GetControlOptionRefForMaster");
static_assert(sizeof(UserOption_GetControlOptionRefForMaster) == 0x0023D0, "Wrong size on UserOption_GetControlOptionRefForMaster");
static_assert(offsetof(UserOption_GetControlOptionRefForMaster, _type) == 0x000000, "Member 'UserOption_GetControlOptionRefForMaster::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetControlOptionRefForMaster, _result_opt) == 0x000008, "Member 'UserOption_GetControlOptionRefForMaster::_result_opt' has a wrong offset!");
static_assert(offsetof(UserOption_GetControlOptionRefForMaster, ReturnValue) == 0x0023C8, "Member 'UserOption_GetControlOptionRefForMaster::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetCurrentLanguage
// 0x0001 (0x0001 - 0x0000)
struct UserOption_GetCurrentLanguage final
{
public:
	EOptionLanguage                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetCurrentLanguage) == 0x000001, "Wrong alignment on UserOption_GetCurrentLanguage");
static_assert(sizeof(UserOption_GetCurrentLanguage) == 0x000001, "Wrong size on UserOption_GetCurrentLanguage");
static_assert(offsetof(UserOption_GetCurrentLanguage, ReturnValue) == 0x000000, "Member 'UserOption_GetCurrentLanguage::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetCurrentVoiceLanguage
// 0x0001 (0x0001 - 0x0000)
struct UserOption_GetCurrentVoiceLanguage final
{
public:
	EOptionLanguage                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetCurrentVoiceLanguage) == 0x000001, "Wrong alignment on UserOption_GetCurrentVoiceLanguage");
static_assert(sizeof(UserOption_GetCurrentVoiceLanguage) == 0x000001, "Wrong size on UserOption_GetCurrentVoiceLanguage");
static_assert(offsetof(UserOption_GetCurrentVoiceLanguage, ReturnValue) == 0x000000, "Member 'UserOption_GetCurrentVoiceLanguage::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetEffectVolume
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetEffectVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetEffectVolume) == 0x000004, "Wrong alignment on UserOption_GetEffectVolume");
static_assert(sizeof(UserOption_GetEffectVolume) == 0x000004, "Wrong size on UserOption_GetEffectVolume");
static_assert(offsetof(UserOption_GetEffectVolume, ReturnValue) == 0x000000, "Member 'UserOption_GetEffectVolume::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetFOV
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetFOV) == 0x000004, "Wrong alignment on UserOption_GetFOV");
static_assert(sizeof(UserOption_GetFOV) == 0x000004, "Wrong size on UserOption_GetFOV");
static_assert(offsetof(UserOption_GetFOV, ReturnValue) == 0x000000, "Member 'UserOption_GetFOV::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetGraphicQuality
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetGraphicQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetGraphicQuality) == 0x000004, "Wrong alignment on UserOption_GetGraphicQuality");
static_assert(sizeof(UserOption_GetGraphicQuality) == 0x000004, "Wrong size on UserOption_GetGraphicQuality");
static_assert(offsetof(UserOption_GetGraphicQuality, ReturnValue) == 0x000000, "Member 'UserOption_GetGraphicQuality::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMasterVolume) == 0x000004, "Wrong alignment on UserOption_GetMasterVolume");
static_assert(sizeof(UserOption_GetMasterVolume) == 0x000004, "Wrong size on UserOption_GetMasterVolume");
static_assert(offsetof(UserOption_GetMasterVolume, ReturnValue) == 0x000000, "Member 'UserOption_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseAimingSensitive
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseAimingSensitive final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2678[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseAimingSensitive) == 0x000004, "Wrong alignment on UserOption_GetMouseAimingSensitive");
static_assert(sizeof(UserOption_GetMouseAimingSensitive) == 0x000008, "Wrong size on UserOption_GetMouseAimingSensitive");
static_assert(offsetof(UserOption_GetMouseAimingSensitive, _type) == 0x000000, "Member 'UserOption_GetMouseAimingSensitive::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseAimingSensitive, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseAimingSensitive::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseAimingSensitiveX
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseAimingSensitiveX final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2679[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseAimingSensitiveX) == 0x000004, "Wrong alignment on UserOption_GetMouseAimingSensitiveX");
static_assert(sizeof(UserOption_GetMouseAimingSensitiveX) == 0x000008, "Wrong size on UserOption_GetMouseAimingSensitiveX");
static_assert(offsetof(UserOption_GetMouseAimingSensitiveX, _type) == 0x000000, "Member 'UserOption_GetMouseAimingSensitiveX::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseAimingSensitiveX, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseAimingSensitiveX::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseAimingSensitiveY
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseAimingSensitiveY final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseAimingSensitiveY) == 0x000004, "Wrong alignment on UserOption_GetMouseAimingSensitiveY");
static_assert(sizeof(UserOption_GetMouseAimingSensitiveY) == 0x000008, "Wrong size on UserOption_GetMouseAimingSensitiveY");
static_assert(offsetof(UserOption_GetMouseAimingSensitiveY, _type) == 0x000000, "Member 'UserOption_GetMouseAimingSensitiveY::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseAimingSensitiveY, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseAimingSensitiveY::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseNomalSensitive
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseNomalSensitive final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseNomalSensitive) == 0x000004, "Wrong alignment on UserOption_GetMouseNomalSensitive");
static_assert(sizeof(UserOption_GetMouseNomalSensitive) == 0x000008, "Wrong size on UserOption_GetMouseNomalSensitive");
static_assert(offsetof(UserOption_GetMouseNomalSensitive, _type) == 0x000000, "Member 'UserOption_GetMouseNomalSensitive::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseNomalSensitive, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseNomalSensitive::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseNomalSensitiveX
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseNomalSensitiveX final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseNomalSensitiveX) == 0x000004, "Wrong alignment on UserOption_GetMouseNomalSensitiveX");
static_assert(sizeof(UserOption_GetMouseNomalSensitiveX) == 0x000008, "Wrong size on UserOption_GetMouseNomalSensitiveX");
static_assert(offsetof(UserOption_GetMouseNomalSensitiveX, _type) == 0x000000, "Member 'UserOption_GetMouseNomalSensitiveX::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseNomalSensitiveX, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseNomalSensitiveX::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseNomalSensitiveY
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseNomalSensitiveY final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseNomalSensitiveY) == 0x000004, "Wrong alignment on UserOption_GetMouseNomalSensitiveY");
static_assert(sizeof(UserOption_GetMouseNomalSensitiveY) == 0x000008, "Wrong size on UserOption_GetMouseNomalSensitiveY");
static_assert(offsetof(UserOption_GetMouseNomalSensitiveY, _type) == 0x000000, "Member 'UserOption_GetMouseNomalSensitiveY::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseNomalSensitiveY, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseNomalSensitiveY::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseSnipeAimingSensitive
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseSnipeAimingSensitive final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseSnipeAimingSensitive) == 0x000004, "Wrong alignment on UserOption_GetMouseSnipeAimingSensitive");
static_assert(sizeof(UserOption_GetMouseSnipeAimingSensitive) == 0x000008, "Wrong size on UserOption_GetMouseSnipeAimingSensitive");
static_assert(offsetof(UserOption_GetMouseSnipeAimingSensitive, _type) == 0x000000, "Member 'UserOption_GetMouseSnipeAimingSensitive::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseSnipeAimingSensitive, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseSnipeAimingSensitive::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseSnipeAimingSensitiveX
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseSnipeAimingSensitiveX final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_267F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseSnipeAimingSensitiveX) == 0x000004, "Wrong alignment on UserOption_GetMouseSnipeAimingSensitiveX");
static_assert(sizeof(UserOption_GetMouseSnipeAimingSensitiveX) == 0x000008, "Wrong size on UserOption_GetMouseSnipeAimingSensitiveX");
static_assert(offsetof(UserOption_GetMouseSnipeAimingSensitiveX, _type) == 0x000000, "Member 'UserOption_GetMouseSnipeAimingSensitiveX::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseSnipeAimingSensitiveX, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseSnipeAimingSensitiveX::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetMouseSnipeAimingSensitiveY
// 0x0008 (0x0008 - 0x0000)
struct UserOption_GetMouseSnipeAimingSensitiveY final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2680[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetMouseSnipeAimingSensitiveY) == 0x000004, "Wrong alignment on UserOption_GetMouseSnipeAimingSensitiveY");
static_assert(sizeof(UserOption_GetMouseSnipeAimingSensitiveY) == 0x000008, "Wrong size on UserOption_GetMouseSnipeAimingSensitiveY");
static_assert(offsetof(UserOption_GetMouseSnipeAimingSensitiveY, _type) == 0x000000, "Member 'UserOption_GetMouseSnipeAimingSensitiveY::_type' has a wrong offset!");
static_assert(offsetof(UserOption_GetMouseSnipeAimingSensitiveY, ReturnValue) == 0x000004, "Member 'UserOption_GetMouseSnipeAimingSensitiveY::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetRadarMapScale
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetRadarMapScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetRadarMapScale) == 0x000004, "Wrong alignment on UserOption_GetRadarMapScale");
static_assert(sizeof(UserOption_GetRadarMapScale) == 0x000004, "Wrong size on UserOption_GetRadarMapScale");
static_assert(offsetof(UserOption_GetRadarMapScale, ReturnValue) == 0x000000, "Member 'UserOption_GetRadarMapScale::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetResolutionHeight
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetResolutionHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetResolutionHeight) == 0x000004, "Wrong alignment on UserOption_GetResolutionHeight");
static_assert(sizeof(UserOption_GetResolutionHeight) == 0x000004, "Wrong size on UserOption_GetResolutionHeight");
static_assert(offsetof(UserOption_GetResolutionHeight, ReturnValue) == 0x000000, "Member 'UserOption_GetResolutionHeight::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetResolutionWidth
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetResolutionWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetResolutionWidth) == 0x000004, "Wrong alignment on UserOption_GetResolutionWidth");
static_assert(sizeof(UserOption_GetResolutionWidth) == 0x000004, "Wrong size on UserOption_GetResolutionWidth");
static_assert(offsetof(UserOption_GetResolutionWidth, ReturnValue) == 0x000000, "Member 'UserOption_GetResolutionWidth::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetTotalOption
// 0x0130 (0x0130 - 0x0000)
struct UserOption_GetTotalOption final
{
public:
	struct FGameOption                            ReturnValue;                                       // 0x0000(0x0130)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetTotalOption) == 0x000008, "Wrong alignment on UserOption_GetTotalOption");
static_assert(sizeof(UserOption_GetTotalOption) == 0x000130, "Wrong size on UserOption_GetTotalOption");
static_assert(offsetof(UserOption_GetTotalOption, ReturnValue) == 0x000000, "Member 'UserOption_GetTotalOption::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetVoiceVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetVoiceVolume) == 0x000004, "Wrong alignment on UserOption_GetVoiceVolume");
static_assert(sizeof(UserOption_GetVoiceVolume) == 0x000004, "Wrong size on UserOption_GetVoiceVolume");
static_assert(offsetof(UserOption_GetVoiceVolume, ReturnValue) == 0x000000, "Member 'UserOption_GetVoiceVolume::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.GetWindowMode
// 0x0001 (0x0001 - 0x0000)
struct UserOption_GetWindowMode final
{
public:
	EWindowMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetWindowMode) == 0x000001, "Wrong alignment on UserOption_GetWindowMode");
static_assert(sizeof(UserOption_GetWindowMode) == 0x000001, "Wrong size on UserOption_GetWindowMode");
static_assert(offsetof(UserOption_GetWindowMode, ReturnValue) == 0x000000, "Member 'UserOption_GetWindowMode::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.HasAnythingChangedExists
// 0x0001 (0x0001 - 0x0000)
struct UserOption_HasAnythingChangedExists final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_HasAnythingChangedExists) == 0x000001, "Wrong alignment on UserOption_HasAnythingChangedExists");
static_assert(sizeof(UserOption_HasAnythingChangedExists) == 0x000001, "Wrong size on UserOption_HasAnythingChangedExists");
static_assert(offsetof(UserOption_HasAnythingChangedExists, ReturnValue) == 0x000000, "Member 'UserOption_HasAnythingChangedExists::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.HasChangedExistInPage
// 0x0002 (0x0002 - 0x0000)
struct UserOption_HasChangedExistInPage final
{
public:
	EOptionCategoryType                           _page;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_HasChangedExistInPage) == 0x000001, "Wrong alignment on UserOption_HasChangedExistInPage");
static_assert(sizeof(UserOption_HasChangedExistInPage) == 0x000002, "Wrong size on UserOption_HasChangedExistInPage");
static_assert(offsetof(UserOption_HasChangedExistInPage, _page) == 0x000000, "Member 'UserOption_HasChangedExistInPage::_page' has a wrong offset!");
static_assert(offsetof(UserOption_HasChangedExistInPage, ReturnValue) == 0x000001, "Member 'UserOption_HasChangedExistInPage::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsAddedControlOption
// 0x0002 (0x0002 - 0x0000)
struct UserOption_IsAddedControlOption final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsAddedControlOption) == 0x000001, "Wrong alignment on UserOption_IsAddedControlOption");
static_assert(sizeof(UserOption_IsAddedControlOption) == 0x000002, "Wrong size on UserOption_IsAddedControlOption");
static_assert(offsetof(UserOption_IsAddedControlOption, _type) == 0x000000, "Member 'UserOption_IsAddedControlOption::_type' has a wrong offset!");
static_assert(offsetof(UserOption_IsAddedControlOption, ReturnValue) == 0x000001, "Member 'UserOption_IsAddedControlOption::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsShowAlliesNameTag
// 0x0001 (0x0001 - 0x0000)
struct UserOption_IsShowAlliesNameTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsShowAlliesNameTag) == 0x000001, "Wrong alignment on UserOption_IsShowAlliesNameTag");
static_assert(sizeof(UserOption_IsShowAlliesNameTag) == 0x000001, "Wrong size on UserOption_IsShowAlliesNameTag");
static_assert(offsetof(UserOption_IsShowAlliesNameTag, ReturnValue) == 0x000000, "Member 'UserOption_IsShowAlliesNameTag::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsShowEnemyDamage
// 0x0001 (0x0001 - 0x0000)
struct UserOption_IsShowEnemyDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsShowEnemyDamage) == 0x000001, "Wrong alignment on UserOption_IsShowEnemyDamage");
static_assert(sizeof(UserOption_IsShowEnemyDamage) == 0x000001, "Wrong size on UserOption_IsShowEnemyDamage");
static_assert(offsetof(UserOption_IsShowEnemyDamage, ReturnValue) == 0x000000, "Member 'UserOption_IsShowEnemyDamage::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsShowFPS
// 0x0001 (0x0001 - 0x0000)
struct UserOption_IsShowFPS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsShowFPS) == 0x000001, "Wrong alignment on UserOption_IsShowFPS");
static_assert(sizeof(UserOption_IsShowFPS) == 0x000001, "Wrong size on UserOption_IsShowFPS");
static_assert(offsetof(UserOption_IsShowFPS, ReturnValue) == 0x000000, "Member 'UserOption_IsShowFPS::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsShowHitFloating
// 0x0001 (0x0001 - 0x0000)
struct UserOption_IsShowHitFloating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsShowHitFloating) == 0x000001, "Wrong alignment on UserOption_IsShowHitFloating");
static_assert(sizeof(UserOption_IsShowHitFloating) == 0x000001, "Wrong size on UserOption_IsShowHitFloating");
static_assert(offsetof(UserOption_IsShowHitFloating, ReturnValue) == 0x000000, "Member 'UserOption_IsShowHitFloating::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsUsedAutoBoosters
// 0x0002 (0x0002 - 0x0000)
struct UserOption_IsUsedAutoBoosters final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsUsedAutoBoosters) == 0x000001, "Wrong alignment on UserOption_IsUsedAutoBoosters");
static_assert(sizeof(UserOption_IsUsedAutoBoosters) == 0x000002, "Wrong size on UserOption_IsUsedAutoBoosters");
static_assert(offsetof(UserOption_IsUsedAutoBoosters, _type) == 0x000000, "Member 'UserOption_IsUsedAutoBoosters::_type' has a wrong offset!");
static_assert(offsetof(UserOption_IsUsedAutoBoosters, ReturnValue) == 0x000001, "Member 'UserOption_IsUsedAutoBoosters::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsUsedHoldAiming
// 0x0002 (0x0002 - 0x0000)
struct UserOption_IsUsedHoldAiming final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsUsedHoldAiming) == 0x000001, "Wrong alignment on UserOption_IsUsedHoldAiming");
static_assert(sizeof(UserOption_IsUsedHoldAiming) == 0x000002, "Wrong size on UserOption_IsUsedHoldAiming");
static_assert(offsetof(UserOption_IsUsedHoldAiming, _type) == 0x000000, "Member 'UserOption_IsUsedHoldAiming::_type' has a wrong offset!");
static_assert(offsetof(UserOption_IsUsedHoldAiming, ReturnValue) == 0x000001, "Member 'UserOption_IsUsedHoldAiming::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsUsedHoldCrouch
// 0x0002 (0x0002 - 0x0000)
struct UserOption_IsUsedHoldCrouch final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsUsedHoldCrouch) == 0x000001, "Wrong alignment on UserOption_IsUsedHoldCrouch");
static_assert(sizeof(UserOption_IsUsedHoldCrouch) == 0x000002, "Wrong size on UserOption_IsUsedHoldCrouch");
static_assert(offsetof(UserOption_IsUsedHoldCrouch, _type) == 0x000000, "Member 'UserOption_IsUsedHoldCrouch::_type' has a wrong offset!");
static_assert(offsetof(UserOption_IsUsedHoldCrouch, ReturnValue) == 0x000001, "Member 'UserOption_IsUsedHoldCrouch::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsUsedHoldShowStatusBoard
// 0x0002 (0x0002 - 0x0000)
struct UserOption_IsUsedHoldShowStatusBoard final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsUsedHoldShowStatusBoard) == 0x000001, "Wrong alignment on UserOption_IsUsedHoldShowStatusBoard");
static_assert(sizeof(UserOption_IsUsedHoldShowStatusBoard) == 0x000002, "Wrong size on UserOption_IsUsedHoldShowStatusBoard");
static_assert(offsetof(UserOption_IsUsedHoldShowStatusBoard, _type) == 0x000000, "Member 'UserOption_IsUsedHoldShowStatusBoard::_type' has a wrong offset!");
static_assert(offsetof(UserOption_IsUsedHoldShowStatusBoard, ReturnValue) == 0x000001, "Member 'UserOption_IsUsedHoldShowStatusBoard::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.IsUsedNoticeActiveSkillCombo
// 0x0002 (0x0002 - 0x0000)
struct UserOption_IsUsedNoticeActiveSkillCombo final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_IsUsedNoticeActiveSkillCombo) == 0x000001, "Wrong alignment on UserOption_IsUsedNoticeActiveSkillCombo");
static_assert(sizeof(UserOption_IsUsedNoticeActiveSkillCombo) == 0x000002, "Wrong size on UserOption_IsUsedNoticeActiveSkillCombo");
static_assert(offsetof(UserOption_IsUsedNoticeActiveSkillCombo, _type) == 0x000000, "Member 'UserOption_IsUsedNoticeActiveSkillCombo::_type' has a wrong offset!");
static_assert(offsetof(UserOption_IsUsedNoticeActiveSkillCombo, ReturnValue) == 0x000001, "Member 'UserOption_IsUsedNoticeActiveSkillCombo::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.RegisterOnUserOptionApplied
// 0x0010 (0x0010 - 0x0000)
struct UserOption_RegisterOnUserOptionApplied final
{
public:
	TDelegate<void(EOptionCategoryType _category)> _callback;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_RegisterOnUserOptionApplied) == 0x000004, "Wrong alignment on UserOption_RegisterOnUserOptionApplied");
static_assert(sizeof(UserOption_RegisterOnUserOptionApplied) == 0x000010, "Wrong size on UserOption_RegisterOnUserOptionApplied");
static_assert(offsetof(UserOption_RegisterOnUserOptionApplied, _callback) == 0x000000, "Member 'UserOption_RegisterOnUserOptionApplied::_callback' has a wrong offset!");

// Function Stigma.UserOption.RemoveControlOptionForMaster
// 0x0001 (0x0001 - 0x0000)
struct UserOption_RemoveControlOptionForMaster final
{
public:
	ECharaType                                    _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_RemoveControlOptionForMaster) == 0x000001, "Wrong alignment on UserOption_RemoveControlOptionForMaster");
static_assert(sizeof(UserOption_RemoveControlOptionForMaster) == 0x000001, "Wrong size on UserOption_RemoveControlOptionForMaster");
static_assert(offsetof(UserOption_RemoveControlOptionForMaster, _type) == 0x000000, "Member 'UserOption_RemoveControlOptionForMaster::_type' has a wrong offset!");

// Function Stigma.UserOption.SaveGameOption
// 0x0001 (0x0001 - 0x0000)
struct UserOption_SaveGameOption final
{
public:
	bool                                          _need_to_update;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_SaveGameOption) == 0x000001, "Wrong alignment on UserOption_SaveGameOption");
static_assert(sizeof(UserOption_SaveGameOption) == 0x000001, "Wrong size on UserOption_SaveGameOption");
static_assert(offsetof(UserOption_SaveGameOption, _need_to_update) == 0x000000, "Member 'UserOption_SaveGameOption::_need_to_update' has a wrong offset!");

// Function Stigma.UserOption.SetBrightness
// 0x0008 (0x0008 - 0x0000)
struct UserOption_SetBrightness final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2681[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_SetBrightness) == 0x000004, "Wrong alignment on UserOption_SetBrightness");
static_assert(sizeof(UserOption_SetBrightness) == 0x000008, "Wrong size on UserOption_SetBrightness");
static_assert(offsetof(UserOption_SetBrightness, _value) == 0x000000, "Member 'UserOption_SetBrightness::_value' has a wrong offset!");
static_assert(offsetof(UserOption_SetBrightness, ReturnValue) == 0x000004, "Member 'UserOption_SetBrightness::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.SetContrast
// 0x0008 (0x0008 - 0x0000)
struct UserOption_SetContrast final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2682[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_SetContrast) == 0x000004, "Wrong alignment on UserOption_SetContrast");
static_assert(sizeof(UserOption_SetContrast) == 0x000008, "Wrong size on UserOption_SetContrast");
static_assert(offsetof(UserOption_SetContrast, _value) == 0x000000, "Member 'UserOption_SetContrast::_value' has a wrong offset!");
static_assert(offsetof(UserOption_SetContrast, ReturnValue) == 0x000004, "Member 'UserOption_SetContrast::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.SetGamma
// 0x0008 (0x0008 - 0x0000)
struct UserOption_SetGamma final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2683[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_SetGamma) == 0x000004, "Wrong alignment on UserOption_SetGamma");
static_assert(sizeof(UserOption_SetGamma) == 0x000008, "Wrong size on UserOption_SetGamma");
static_assert(offsetof(UserOption_SetGamma, _value) == 0x000000, "Member 'UserOption_SetGamma::_value' has a wrong offset!");
static_assert(offsetof(UserOption_SetGamma, ReturnValue) == 0x000004, "Member 'UserOption_SetGamma::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.SetGraphicQuality
// 0x000C (0x000C - 0x0000)
struct UserOption_SetGraphicQuality final
{
public:
	bool                                          _is_auto;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2684[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Scalability_level;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2685[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_SetGraphicQuality) == 0x000004, "Wrong alignment on UserOption_SetGraphicQuality");
static_assert(sizeof(UserOption_SetGraphicQuality) == 0x00000C, "Wrong size on UserOption_SetGraphicQuality");
static_assert(offsetof(UserOption_SetGraphicQuality, _is_auto) == 0x000000, "Member 'UserOption_SetGraphicQuality::_is_auto' has a wrong offset!");
static_assert(offsetof(UserOption_SetGraphicQuality, Scalability_level) == 0x000004, "Member 'UserOption_SetGraphicQuality::Scalability_level' has a wrong offset!");
static_assert(offsetof(UserOption_SetGraphicQuality, ReturnValue) == 0x000008, "Member 'UserOption_SetGraphicQuality::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.SetScreenResoultion
// 0x000C (0x000C - 0x0000)
struct UserOption_SetScreenResoultion final
{
public:
	int32                                         _width;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _height;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2686[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_SetScreenResoultion) == 0x000004, "Wrong alignment on UserOption_SetScreenResoultion");
static_assert(sizeof(UserOption_SetScreenResoultion) == 0x00000C, "Wrong size on UserOption_SetScreenResoultion");
static_assert(offsetof(UserOption_SetScreenResoultion, _width) == 0x000000, "Member 'UserOption_SetScreenResoultion::_width' has a wrong offset!");
static_assert(offsetof(UserOption_SetScreenResoultion, _height) == 0x000004, "Member 'UserOption_SetScreenResoultion::_height' has a wrong offset!");
static_assert(offsetof(UserOption_SetScreenResoultion, ReturnValue) == 0x000008, "Member 'UserOption_SetScreenResoultion::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.SetShowEnemyDamage
// 0x0001 (0x0001 - 0x0000)
struct UserOption_SetShowEnemyDamage final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_SetShowEnemyDamage) == 0x000001, "Wrong alignment on UserOption_SetShowEnemyDamage");
static_assert(sizeof(UserOption_SetShowEnemyDamage) == 0x000001, "Wrong size on UserOption_SetShowEnemyDamage");
static_assert(offsetof(UserOption_SetShowEnemyDamage, _enable) == 0x000000, "Member 'UserOption_SetShowEnemyDamage::_enable' has a wrong offset!");

// Function Stigma.UserOption.SetSoundVolume
// 0x0020 (0x0020 - 0x0000)
struct UserOption_SetSoundVolume final
{
public:
	class USoundMix*                              Sound_mix;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            Sound_class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fade_in_time;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2687[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UserOption_SetSoundVolume) == 0x000008, "Wrong alignment on UserOption_SetSoundVolume");
static_assert(sizeof(UserOption_SetSoundVolume) == 0x000020, "Wrong size on UserOption_SetSoundVolume");
static_assert(offsetof(UserOption_SetSoundVolume, Sound_mix) == 0x000000, "Member 'UserOption_SetSoundVolume::Sound_mix' has a wrong offset!");
static_assert(offsetof(UserOption_SetSoundVolume, Sound_class) == 0x000008, "Member 'UserOption_SetSoundVolume::Sound_class' has a wrong offset!");
static_assert(offsetof(UserOption_SetSoundVolume, Volume) == 0x000010, "Member 'UserOption_SetSoundVolume::Volume' has a wrong offset!");
static_assert(offsetof(UserOption_SetSoundVolume, Pitch) == 0x000014, "Member 'UserOption_SetSoundVolume::Pitch' has a wrong offset!");
static_assert(offsetof(UserOption_SetSoundVolume, Fade_in_time) == 0x000018, "Member 'UserOption_SetSoundVolume::Fade_in_time' has a wrong offset!");
static_assert(offsetof(UserOption_SetSoundVolume, ReturnValue) == 0x00001C, "Member 'UserOption_SetSoundVolume::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.SetWindowMode
// 0x0002 (0x0002 - 0x0000)
struct UserOption_SetWindowMode final
{
public:
	EWindowMode                                   _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_SetWindowMode) == 0x000001, "Wrong alignment on UserOption_SetWindowMode");
static_assert(sizeof(UserOption_SetWindowMode) == 0x000002, "Wrong size on UserOption_SetWindowMode");
static_assert(offsetof(UserOption_SetWindowMode, _type) == 0x000000, "Member 'UserOption_SetWindowMode::_type' has a wrong offset!");
static_assert(offsetof(UserOption_SetWindowMode, ReturnValue) == 0x000001, "Member 'UserOption_SetWindowMode::ReturnValue' has a wrong offset!");

// Function Stigma.UserOption.UpdateOptionForAudio
// 0x0001 (0x0001 - 0x0000)
struct UserOption_UpdateOptionForAudio final
{
public:
	bool                                          _is_user_setting_apply;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_UpdateOptionForAudio) == 0x000001, "Wrong alignment on UserOption_UpdateOptionForAudio");
static_assert(sizeof(UserOption_UpdateOptionForAudio) == 0x000001, "Wrong size on UserOption_UpdateOptionForAudio");
static_assert(offsetof(UserOption_UpdateOptionForAudio, _is_user_setting_apply) == 0x000000, "Member 'UserOption_UpdateOptionForAudio::_is_user_setting_apply' has a wrong offset!");

// Function Stigma.UserOption.UpdateOptionForControl
// 0x0001 (0x0001 - 0x0000)
struct UserOption_UpdateOptionForControl final
{
public:
	bool                                          _is_user_setting_apply;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_UpdateOptionForControl) == 0x000001, "Wrong alignment on UserOption_UpdateOptionForControl");
static_assert(sizeof(UserOption_UpdateOptionForControl) == 0x000001, "Wrong size on UserOption_UpdateOptionForControl");
static_assert(offsetof(UserOption_UpdateOptionForControl, _is_user_setting_apply) == 0x000000, "Member 'UserOption_UpdateOptionForControl::_is_user_setting_apply' has a wrong offset!");

// Function Stigma.UserOption.UpdateOptionForGeneral
// 0x0001 (0x0001 - 0x0000)
struct UserOption_UpdateOptionForGeneral final
{
public:
	bool                                          _is_user_setting_apply;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_UpdateOptionForGeneral) == 0x000001, "Wrong alignment on UserOption_UpdateOptionForGeneral");
static_assert(sizeof(UserOption_UpdateOptionForGeneral) == 0x000001, "Wrong size on UserOption_UpdateOptionForGeneral");
static_assert(offsetof(UserOption_UpdateOptionForGeneral, _is_user_setting_apply) == 0x000000, "Member 'UserOption_UpdateOptionForGeneral::_is_user_setting_apply' has a wrong offset!");

// Function Stigma.UserOption.UpdateOptionForGraphic
// 0x0001 (0x0001 - 0x0000)
struct UserOption_UpdateOptionForGraphic final
{
public:
	bool                                          _is_user_setting_apply;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_UpdateOptionForGraphic) == 0x000001, "Wrong alignment on UserOption_UpdateOptionForGraphic");
static_assert(sizeof(UserOption_UpdateOptionForGraphic) == 0x000001, "Wrong size on UserOption_UpdateOptionForGraphic");
static_assert(offsetof(UserOption_UpdateOptionForGraphic, _is_user_setting_apply) == 0x000000, "Member 'UserOption_UpdateOptionForGraphic::_is_user_setting_apply' has a wrong offset!");

// Function Stigma.UserOption.GetWishedRegionCount
// 0x0004 (0x0004 - 0x0000)
struct UserOption_GetWishedRegionCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserOption_GetWishedRegionCount) == 0x000004, "Wrong alignment on UserOption_GetWishedRegionCount");
static_assert(sizeof(UserOption_GetWishedRegionCount) == 0x000004, "Wrong size on UserOption_GetWishedRegionCount");
static_assert(offsetof(UserOption_GetWishedRegionCount, ReturnValue) == 0x000000, "Member 'UserOption_GetWishedRegionCount::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.ConvertContractionNumber
// 0x0020 (0x0020 - 0x0000)
struct UtilText_ConvertContractionNumber final
{
public:
	int32                                         _number;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2688[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_ConvertContractionNumber) == 0x000008, "Wrong alignment on UtilText_ConvertContractionNumber");
static_assert(sizeof(UtilText_ConvertContractionNumber) == 0x000020, "Wrong size on UtilText_ConvertContractionNumber");
static_assert(offsetof(UtilText_ConvertContractionNumber, _number) == 0x000000, "Member 'UtilText_ConvertContractionNumber::_number' has a wrong offset!");
static_assert(offsetof(UtilText_ConvertContractionNumber, ReturnValue) == 0x000008, "Member 'UtilText_ConvertContractionNumber::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetCurrencyRichText
// 0x0020 (0x0020 - 0x0000)
struct UtilText_GetCurrencyRichText final
{
public:
	ECurrencyTypes                                _currency_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2689[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _Amount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetCurrencyRichText) == 0x000008, "Wrong alignment on UtilText_GetCurrencyRichText");
static_assert(sizeof(UtilText_GetCurrencyRichText) == 0x000020, "Wrong size on UtilText_GetCurrencyRichText");
static_assert(offsetof(UtilText_GetCurrencyRichText, _currency_type) == 0x000000, "Member 'UtilText_GetCurrencyRichText::_currency_type' has a wrong offset!");
static_assert(offsetof(UtilText_GetCurrencyRichText, _Amount) == 0x000004, "Member 'UtilText_GetCurrencyRichText::_Amount' has a wrong offset!");
static_assert(offsetof(UtilText_GetCurrencyRichText, ReturnValue) == 0x000008, "Member 'UtilText_GetCurrencyRichText::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetKeyDisplayText
// 0x0038 (0x0038 - 0x0000)
struct UtilText_GetKeyDisplayText final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   _Key;                                              // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetKeyDisplayText) == 0x000008, "Wrong alignment on UtilText_GetKeyDisplayText");
static_assert(sizeof(UtilText_GetKeyDisplayText) == 0x000038, "Wrong size on UtilText_GetKeyDisplayText");
static_assert(offsetof(UtilText_GetKeyDisplayText, _world_ctx) == 0x000000, "Member 'UtilText_GetKeyDisplayText::_world_ctx' has a wrong offset!");
static_assert(offsetof(UtilText_GetKeyDisplayText, _Key) == 0x000008, "Member 'UtilText_GetKeyDisplayText::_Key' has a wrong offset!");
static_assert(offsetof(UtilText_GetKeyDisplayText, ReturnValue) == 0x000020, "Member 'UtilText_GetKeyDisplayText::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetLevelConditionText
// 0x0020 (0x0020 - 0x0000)
struct UtilText_GetLevelConditionText final
{
public:
	int32                                         _start_level;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _end_level;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetLevelConditionText) == 0x000008, "Wrong alignment on UtilText_GetLevelConditionText");
static_assert(sizeof(UtilText_GetLevelConditionText) == 0x000020, "Wrong size on UtilText_GetLevelConditionText");
static_assert(offsetof(UtilText_GetLevelConditionText, _start_level) == 0x000000, "Member 'UtilText_GetLevelConditionText::_start_level' has a wrong offset!");
static_assert(offsetof(UtilText_GetLevelConditionText, _end_level) == 0x000004, "Member 'UtilText_GetLevelConditionText::_end_level' has a wrong offset!");
static_assert(offsetof(UtilText_GetLevelConditionText, ReturnValue) == 0x000008, "Member 'UtilText_GetLevelConditionText::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetPurchaseText
// 0x0020 (0x0020 - 0x0000)
struct UtilText_GetPurchaseText final
{
public:
	ECurrencyTypes                                _currency_type;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _Amount;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetPurchaseText) == 0x000008, "Wrong alignment on UtilText_GetPurchaseText");
static_assert(sizeof(UtilText_GetPurchaseText) == 0x000020, "Wrong size on UtilText_GetPurchaseText");
static_assert(offsetof(UtilText_GetPurchaseText, _currency_type) == 0x000000, "Member 'UtilText_GetPurchaseText::_currency_type' has a wrong offset!");
static_assert(offsetof(UtilText_GetPurchaseText, _Amount) == 0x000004, "Member 'UtilText_GetPurchaseText::_Amount' has a wrong offset!");
static_assert(offsetof(UtilText_GetPurchaseText, ReturnValue) == 0x000008, "Member 'UtilText_GetPurchaseText::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetRemainTimeText
// 0x0030 (0x0030 - 0x0000)
struct UtilText_GetRemainTimeText final
{
public:
	struct FTimespan                              _span;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _time_digits;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_zero_value;                                  // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268B[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Max_time_units_to_show;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetRemainTimeText) == 0x000008, "Wrong alignment on UtilText_GetRemainTimeText");
static_assert(sizeof(UtilText_GetRemainTimeText) == 0x000030, "Wrong size on UtilText_GetRemainTimeText");
static_assert(offsetof(UtilText_GetRemainTimeText, _span) == 0x000000, "Member 'UtilText_GetRemainTimeText::_span' has a wrong offset!");
static_assert(offsetof(UtilText_GetRemainTimeText, _time_digits) == 0x000008, "Member 'UtilText_GetRemainTimeText::_time_digits' has a wrong offset!");
static_assert(offsetof(UtilText_GetRemainTimeText, _show_zero_value) == 0x00000C, "Member 'UtilText_GetRemainTimeText::_show_zero_value' has a wrong offset!");
static_assert(offsetof(UtilText_GetRemainTimeText, Max_time_units_to_show) == 0x000010, "Member 'UtilText_GetRemainTimeText::Max_time_units_to_show' has a wrong offset!");
static_assert(offsetof(UtilText_GetRemainTimeText, ReturnValue) == 0x000018, "Member 'UtilText_GetRemainTimeText::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetStringTableText
// 0x0038 (0x0038 - 0x0000)
struct UtilText_GetStringTableText final
{
public:
	class FString                                 _id;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetStringTableText) == 0x000008, "Wrong alignment on UtilText_GetStringTableText");
static_assert(sizeof(UtilText_GetStringTableText) == 0x000038, "Wrong size on UtilText_GetStringTableText");
static_assert(offsetof(UtilText_GetStringTableText, _id) == 0x000000, "Member 'UtilText_GetStringTableText::_id' has a wrong offset!");
static_assert(offsetof(UtilText_GetStringTableText, _Key) == 0x000010, "Member 'UtilText_GetStringTableText::_Key' has a wrong offset!");
static_assert(offsetof(UtilText_GetStringTableText, ReturnValue) == 0x000020, "Member 'UtilText_GetStringTableText::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetStringTableTextWithArguments
// 0x0080 (0x0080 - 0x0000)
struct UtilText_GetStringTableTextWithArguments final
{
public:
	class FString                                 _id;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _Key;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            _arguments;                                        // 0x0020(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetStringTableTextWithArguments) == 0x000008, "Wrong alignment on UtilText_GetStringTableTextWithArguments");
static_assert(sizeof(UtilText_GetStringTableTextWithArguments) == 0x000080, "Wrong size on UtilText_GetStringTableTextWithArguments");
static_assert(offsetof(UtilText_GetStringTableTextWithArguments, _id) == 0x000000, "Member 'UtilText_GetStringTableTextWithArguments::_id' has a wrong offset!");
static_assert(offsetof(UtilText_GetStringTableTextWithArguments, _Key) == 0x000010, "Member 'UtilText_GetStringTableTextWithArguments::_Key' has a wrong offset!");
static_assert(offsetof(UtilText_GetStringTableTextWithArguments, _arguments) == 0x000020, "Member 'UtilText_GetStringTableTextWithArguments::_arguments' has a wrong offset!");
static_assert(offsetof(UtilText_GetStringTableTextWithArguments, ReturnValue) == 0x000070, "Member 'UtilText_GetStringTableTextWithArguments::ReturnValue' has a wrong offset!");

// Function Stigma.UtilText.GetTimeText_HMS
// 0x0028 (0x0028 - 0x0000)
struct UtilText_GetTimeText_HMS final
{
public:
	int32                                         _total_seconds;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _max_time_units_to_show;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_zero_value;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_268D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilText_GetTimeText_HMS) == 0x000008, "Wrong alignment on UtilText_GetTimeText_HMS");
static_assert(sizeof(UtilText_GetTimeText_HMS) == 0x000028, "Wrong size on UtilText_GetTimeText_HMS");
static_assert(offsetof(UtilText_GetTimeText_HMS, _total_seconds) == 0x000000, "Member 'UtilText_GetTimeText_HMS::_total_seconds' has a wrong offset!");
static_assert(offsetof(UtilText_GetTimeText_HMS, _max_time_units_to_show) == 0x000004, "Member 'UtilText_GetTimeText_HMS::_max_time_units_to_show' has a wrong offset!");
static_assert(offsetof(UtilText_GetTimeText_HMS, _show_zero_value) == 0x000008, "Member 'UtilText_GetTimeText_HMS::_show_zero_value' has a wrong offset!");
static_assert(offsetof(UtilText_GetTimeText_HMS, ReturnValue) == 0x000010, "Member 'UtilText_GetTimeText_HMS::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.SERVER_CustomGame_CloseSlot
// 0x0018 (0x0018 - 0x0000)
struct WaitingRoomGameState_SERVER_CustomGame_CloseSlot final
{
public:
	class AWaitingRoomPlayerController*           _asker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _close;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2690[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(WaitingRoomGameState_SERVER_CustomGame_CloseSlot) == 0x000008, "Wrong alignment on WaitingRoomGameState_SERVER_CustomGame_CloseSlot");
static_assert(sizeof(WaitingRoomGameState_SERVER_CustomGame_CloseSlot) == 0x000018, "Wrong size on WaitingRoomGameState_SERVER_CustomGame_CloseSlot");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_CloseSlot, _asker) == 0x000000, "Member 'WaitingRoomGameState_SERVER_CustomGame_CloseSlot::_asker' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_CloseSlot, _idx) == 0x000008, "Member 'WaitingRoomGameState_SERVER_CustomGame_CloseSlot::_idx' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_CloseSlot, _close) == 0x000010, "Member 'WaitingRoomGameState_SERVER_CustomGame_CloseSlot::_close' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.SERVER_CustomGame_MoveTo
// 0x0018 (0x0018 - 0x0000)
struct WaitingRoomGameState_SERVER_CustomGame_MoveTo final
{
public:
	class AWaitingRoomPlayerController*           _asker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomGameSlotIndex                   _idx_from;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomGameSlotIndex                   _idx_to;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameState_SERVER_CustomGame_MoveTo) == 0x000008, "Wrong alignment on WaitingRoomGameState_SERVER_CustomGame_MoveTo");
static_assert(sizeof(WaitingRoomGameState_SERVER_CustomGame_MoveTo) == 0x000018, "Wrong size on WaitingRoomGameState_SERVER_CustomGame_MoveTo");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_MoveTo, _asker) == 0x000000, "Member 'WaitingRoomGameState_SERVER_CustomGame_MoveTo::_asker' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_MoveTo, _idx_from) == 0x000008, "Member 'WaitingRoomGameState_SERVER_CustomGame_MoveTo::_idx_from' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_MoveTo, _idx_to) == 0x000010, "Member 'WaitingRoomGameState_SERVER_CustomGame_MoveTo::_idx_to' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.SERVER_CustomGame_SetIsClosed
// 0x000C (0x000C - 0x0000)
struct WaitingRoomGameState_SERVER_CustomGame_SetIsClosed final
{
public:
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_closed;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2691[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(WaitingRoomGameState_SERVER_CustomGame_SetIsClosed) == 0x000004, "Wrong alignment on WaitingRoomGameState_SERVER_CustomGame_SetIsClosed");
static_assert(sizeof(WaitingRoomGameState_SERVER_CustomGame_SetIsClosed) == 0x00000C, "Wrong size on WaitingRoomGameState_SERVER_CustomGame_SetIsClosed");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_SetIsClosed, _idx) == 0x000000, "Member 'WaitingRoomGameState_SERVER_CustomGame_SetIsClosed::_idx' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_SERVER_CustomGame_SetIsClosed, _is_closed) == 0x000008, "Member 'WaitingRoomGameState_SERVER_CustomGame_SetIsClosed::_is_closed' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.Setter_State
// 0x0001 (0x0001 - 0x0000)
struct WaitingRoomGameState_Setter_State final
{
public:
	EWaitingRoomState                             _new_state;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameState_Setter_State) == 0x000001, "Wrong alignment on WaitingRoomGameState_Setter_State");
static_assert(sizeof(WaitingRoomGameState_Setter_State) == 0x000001, "Wrong size on WaitingRoomGameState_Setter_State");
static_assert(offsetof(WaitingRoomGameState_Setter_State, _new_state) == 0x000000, "Member 'WaitingRoomGameState_Setter_State::_new_state' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.TakeCustomGameSlotChangedState
// 0x000C (0x000C - 0x0000)
struct WaitingRoomGameState_TakeCustomGameSlotChangedState final
{
public:
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2692[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(WaitingRoomGameState_TakeCustomGameSlotChangedState) == 0x000004, "Wrong alignment on WaitingRoomGameState_TakeCustomGameSlotChangedState");
static_assert(sizeof(WaitingRoomGameState_TakeCustomGameSlotChangedState) == 0x00000C, "Wrong size on WaitingRoomGameState_TakeCustomGameSlotChangedState");
static_assert(offsetof(WaitingRoomGameState_TakeCustomGameSlotChangedState, _idx) == 0x000000, "Member 'WaitingRoomGameState_TakeCustomGameSlotChangedState::_idx' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_TakeCustomGameSlotChangedState, ReturnValue) == 0x000008, "Member 'WaitingRoomGameState_TakeCustomGameSlotChangedState::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.CanStartCustomGame
// 0x0001 (0x0001 - 0x0000)
struct WaitingRoomGameState_CanStartCustomGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameState_CanStartCustomGame) == 0x000001, "Wrong alignment on WaitingRoomGameState_CanStartCustomGame");
static_assert(sizeof(WaitingRoomGameState_CanStartCustomGame) == 0x000001, "Wrong size on WaitingRoomGameState_CanStartCustomGame");
static_assert(offsetof(WaitingRoomGameState_CanStartCustomGame, ReturnValue) == 0x000000, "Member 'WaitingRoomGameState_CanStartCustomGame::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.GetCustomGameSlot
// 0x0028 (0x0028 - 0x0000)
struct WaitingRoomGameState_GetCustomGameSlot final
{
public:
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomGameSlot                        ReturnValue;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameState_GetCustomGameSlot) == 0x000008, "Wrong alignment on WaitingRoomGameState_GetCustomGameSlot");
static_assert(sizeof(WaitingRoomGameState_GetCustomGameSlot) == 0x000028, "Wrong size on WaitingRoomGameState_GetCustomGameSlot");
static_assert(offsetof(WaitingRoomGameState_GetCustomGameSlot, _idx) == 0x000000, "Member 'WaitingRoomGameState_GetCustomGameSlot::_idx' has a wrong offset!");
static_assert(offsetof(WaitingRoomGameState_GetCustomGameSlot, ReturnValue) == 0x000008, "Member 'WaitingRoomGameState_GetCustomGameSlot::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.GetLeftSeconds
// 0x0004 (0x0004 - 0x0000)
struct WaitingRoomGameState_GetLeftSeconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameState_GetLeftSeconds) == 0x000004, "Wrong alignment on WaitingRoomGameState_GetLeftSeconds");
static_assert(sizeof(WaitingRoomGameState_GetLeftSeconds) == 0x000004, "Wrong size on WaitingRoomGameState_GetLeftSeconds");
static_assert(offsetof(WaitingRoomGameState_GetLeftSeconds, ReturnValue) == 0x000000, "Member 'WaitingRoomGameState_GetLeftSeconds::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomGameState.GetMaxObserverCount
// 0x0004 (0x0004 - 0x0000)
struct WaitingRoomGameState_GetMaxObserverCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomGameState_GetMaxObserverCount) == 0x000004, "Wrong alignment on WaitingRoomGameState_GetMaxObserverCount");
static_assert(sizeof(WaitingRoomGameState_GetMaxObserverCount) == 0x000004, "Wrong size on WaitingRoomGameState_GetMaxObserverCount");
static_assert(offsetof(WaitingRoomGameState_GetMaxObserverCount, ReturnValue) == 0x000000, "Member 'WaitingRoomGameState_GetMaxObserverCount::ReturnValue' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.PlayCharaIntroVoice
// 0x0008 (0x0008 - 0x0000)
struct WaitingRoomPlayerController_PlayCharaIntroVoice final
{
public:
	class ACharaBase*                             _chara;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_PlayCharaIntroVoice) == 0x000008, "Wrong alignment on WaitingRoomPlayerController_PlayCharaIntroVoice");
static_assert(sizeof(WaitingRoomPlayerController_PlayCharaIntroVoice) == 0x000008, "Wrong size on WaitingRoomPlayerController_PlayCharaIntroVoice");
static_assert(offsetof(WaitingRoomPlayerController_PlayCharaIntroVoice, _chara) == 0x000000, "Member 'WaitingRoomPlayerController_PlayCharaIntroVoice::_chara' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_CLIENT_DelegateRoomLeader
// 0x0018 (0x0018 - 0x0000)
struct WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader final
{
public:
	struct FUserName                              _nickname;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader) == 0x000008, "Wrong alignment on WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader");
static_assert(sizeof(WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader) == 0x000018, "Wrong size on WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader");
static_assert(offsetof(WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader, _nickname) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_CLIENT_DelegateRoomLeader::_nickname' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_DEBUG_SetGameSetting
// 0x0018 (0x0018 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting final
{
public:
	bool                                          _is_custom_game;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     _game_mode;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2695[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _map_name;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting) == 0x000008, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting) == 0x000018, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting, _is_custom_game) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting::_is_custom_game' has a wrong offset!");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting, _game_mode) == 0x000001, "Member 'WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting::_game_mode' has a wrong offset!");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting, _map_name) == 0x000008, "Member 'WaitingRoomPlayerController_RPC_SERVER_DEBUG_SetGameSetting::_map_name' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_DelegateRoomLeader
// 0x0008 (0x0008 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader) == 0x000008, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader) == 0x000008, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader, _user_id) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_DelegateRoomLeader::_user_id' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_RequestBan
// 0x0008 (0x0008 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_RequestBan final
{
public:
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_RequestBan) == 0x000004, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_RequestBan");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_RequestBan) == 0x000008, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_RequestBan");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_RequestBan, _idx) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_RequestBan::_idx' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_RequestCloseSlot
// 0x000C (0x000C - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot final
{
public:
	struct FCustomGameSlotIndex                   _idx;                                              // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _close;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2696[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot) == 0x000004, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot) == 0x00000C, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot, _idx) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot::_idx' has a wrong offset!");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot, _close) == 0x000008, "Member 'WaitingRoomPlayerController_RPC_SERVER_RequestCloseSlot::_close' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_RequestMoveSlot
// 0x0010 (0x0010 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot final
{
public:
	struct FCustomGameSlotIndex                   _from;                                             // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomGameSlotIndex                   _to;                                               // 0x0008(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot) == 0x000004, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot) == 0x000010, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot, _from) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot::_from' has a wrong offset!");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot, _to) == 0x000008, "Member 'WaitingRoomPlayerController_RPC_SERVER_RequestMoveSlot::_to' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_SetGameMode
// 0x0001 (0x0001 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_SetGameMode final
{
public:
	EGameMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_SetGameMode) == 0x000001, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_SetGameMode");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_SetGameMode) == 0x000001, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_SetGameMode");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_SetGameMode, _mode) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_SetGameMode::_mode' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_SetMap
// 0x0010 (0x0010 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_SetMap final
{
public:
	class FString                                 _map_name;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_SetMap) == 0x000008, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_SetMap");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_SetMap) == 0x000010, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_SetMap");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_SetMap, _map_name) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_SetMap::_map_name' has a wrong offset!");

// Function Stigma.WaitingRoomPlayerController.RPC_SERVER_SetRoomManager
// 0x0010 (0x0010 - 0x0000)
struct WaitingRoomPlayerController_RPC_SERVER_SetRoomManager final
{
public:
	struct FUserID                                _user_id;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_manager;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2697[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(WaitingRoomPlayerController_RPC_SERVER_SetRoomManager) == 0x000008, "Wrong alignment on WaitingRoomPlayerController_RPC_SERVER_SetRoomManager");
static_assert(sizeof(WaitingRoomPlayerController_RPC_SERVER_SetRoomManager) == 0x000010, "Wrong size on WaitingRoomPlayerController_RPC_SERVER_SetRoomManager");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_SetRoomManager, _user_id) == 0x000000, "Member 'WaitingRoomPlayerController_RPC_SERVER_SetRoomManager::_user_id' has a wrong offset!");
static_assert(offsetof(WaitingRoomPlayerController_RPC_SERVER_SetRoomManager, _is_manager) == 0x000008, "Member 'WaitingRoomPlayerController_RPC_SERVER_SetRoomManager::_is_manager' has a wrong offset!");

}

