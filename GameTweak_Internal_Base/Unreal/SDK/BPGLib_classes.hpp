#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: BPGLib

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "BPGLib_structs.hpp"


namespace SDK
{

// Class BPGLib.3DViewScene
// 0x0020 (0x0048 - 0x0028)
class UThreeDViewScene final : public UObject
{
public:
	TArray<class UActorComponent*>                Components;                                        // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UWorld*                                 PreviewWorld;                                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B63[0x8];                                     // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"3DViewScene">();
	}
	static class UThreeDViewScene* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThreeDViewScene>();
	}
};
static_assert(alignof(UThreeDViewScene) == 0x000008, "Wrong alignment on UThreeDViewScene");
static_assert(sizeof(UThreeDViewScene) == 0x000048, "Wrong size on UThreeDViewScene");
static_assert(offsetof(UThreeDViewScene, Components) == 0x000028, "Member 'UThreeDViewScene::Components' has a wrong offset!");
static_assert(offsetof(UThreeDViewScene, PreviewWorld) == 0x000038, "Member 'UThreeDViewScene::PreviewWorld' has a wrong offset!");

// Class BPGLib.3DViewWidget
// 0x0770 (0x08F0 - 0x0180)
class UThreeDViewWidget final : public UWidget
{
public:
	uint8                                         Pad_1B64[0x10];                                    // 0x0180(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class AActor>                     _ActorType;                                        // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RenderTargetWidth;                                 // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RenderTargetHeight;                                // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextureRenderTargetFormat                    RenderTargetFormat;                                // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B65[0x3];                                     // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLinearColor                           ClearColor;                                        // 0x01A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESceneCaptureSource                           CaptureSource;                                     // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B66[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                CameraLocation;                                    // 0x01B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CameraRotation;                                    // 0x01D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	ECameraProjectionMode                         ProjectionMode;                                    // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B67[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         FOV;                                               // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OrthoWidth;                                        // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinDepth;                                          // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDepth;                                          // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B68[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0200(0x06E0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 _Actor;                                            // 0x08E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UThreeDViewScene*                       _Scene;                                            // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class AActor* GetActor() const;
	struct FVector GetCameraLocation() const;
	struct FRotator GetCameraRotation() const;
	ESceneCaptureSource GetCaptureSource() const;
	struct FLinearColor GetClearColor() const;
	float GetFOV() const;
	float GetMaxDepth() const;
	float GetMinDepth() const;
	float GetOrthoWidth() const;
	struct FPostProcessSettings GetPostProcessSettings() const;
	ECameraProjectionMode GetProjectionMode() const;
	ETextureRenderTargetFormat GetRenderTargetFormat() const;
	int32 GetRenderTargetHeight() const;
	int32 GetRenderTargetWidth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"3DViewWidget">();
	}
	static class UThreeDViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThreeDViewWidget>();
	}
};
static_assert(alignof(UThreeDViewWidget) == 0x000010, "Wrong alignment on UThreeDViewWidget");
static_assert(sizeof(UThreeDViewWidget) == 0x0008F0, "Wrong size on UThreeDViewWidget");
static_assert(offsetof(UThreeDViewWidget, _ActorType) == 0x000190, "Member 'UThreeDViewWidget::_ActorType' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, RenderTargetWidth) == 0x000198, "Member 'UThreeDViewWidget::RenderTargetWidth' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, RenderTargetHeight) == 0x00019C, "Member 'UThreeDViewWidget::RenderTargetHeight' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, RenderTargetFormat) == 0x0001A0, "Member 'UThreeDViewWidget::RenderTargetFormat' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, ClearColor) == 0x0001A4, "Member 'UThreeDViewWidget::ClearColor' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, CaptureSource) == 0x0001B4, "Member 'UThreeDViewWidget::CaptureSource' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, CameraLocation) == 0x0001B8, "Member 'UThreeDViewWidget::CameraLocation' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, CameraRotation) == 0x0001D0, "Member 'UThreeDViewWidget::CameraRotation' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, ProjectionMode) == 0x0001E8, "Member 'UThreeDViewWidget::ProjectionMode' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, FOV) == 0x0001EC, "Member 'UThreeDViewWidget::FOV' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, OrthoWidth) == 0x0001F0, "Member 'UThreeDViewWidget::OrthoWidth' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, MinDepth) == 0x0001F4, "Member 'UThreeDViewWidget::MinDepth' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, MaxDepth) == 0x0001F8, "Member 'UThreeDViewWidget::MaxDepth' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, PostProcessSettings) == 0x000200, "Member 'UThreeDViewWidget::PostProcessSettings' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, _Actor) == 0x0008E0, "Member 'UThreeDViewWidget::_Actor' has a wrong offset!");
static_assert(offsetof(UThreeDViewWidget, _Scene) == 0x0008E8, "Member 'UThreeDViewWidget::_Scene' has a wrong offset!");

// Class BPGLib.AnimatableWidget
// 0x0220 (0x04E0 - 0x02C0)
class UAnimatableWidget : public UUserWidget
{
public:
	bool                                          _ToggleSelected;                                   // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B69[0x3];                                     // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FWidgetAnimOption                      OnShow_Option;                                     // 0x02C4(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWidgetAnimOption                      OnIdle_Default_Option;                             // 0x02E4(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWidgetAnimOption                      OnHide_Option;                                     // 0x0304(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWidgetAnimOption                      OnIdle_Focused_Option;                             // 0x0324(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWidgetAnimOption                      OnSelected_Option;                                 // 0x0344(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWidgetAnimOption                      OnIdle_Selected_Option;                            // 0x0364(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FWidgetAnimOption                      OnSpotlight_Option;                                // 0x0384(0x0020)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B6A[0x4];                                     // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<class FName, class UWidgetAnimation*>    _AnimMap;                                          // 0x03A8(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<class FName, struct FWidgetAnimOption>   _AnimSettingMap;                                   // 0x03F8(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       _CurrentAnimation;                                 // 0x0448(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       _FocusAnimation;                                   // 0x0450(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B6B[0x4];                                     // 0x0458(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	EWidgetState                                  _WidgetState;                                      // 0x045C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B6C[0x3];                                     // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	FMulticastInlineDelegateProperty_             OnShowStartEvent;                                  // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnShowEndEvent;                                    // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFocusEvent;                                      // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSelectStartEvent;                                // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSelectEndEvent;                                  // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSpotlightEvent;                                  // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHideStartEvent;                                  // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHideEndEvent;                                    // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void CloseWithAnim(bool _force_immediately);
	void OnEVENT_Focus(bool _focus);
	void OnEVENT_Focus_Internal(class UAnimatableWidget* _self, bool _focus);
	void OnEVENT_Hide_End();
	void OnEVENT_Hide_End_Internal(class UAnimatableWidget* _self);
	void OnEVENT_Hide_Start();
	void OnEVENT_Hide_Start_Internal(class UAnimatableWidget* _self);
	void OnEVENT_Select_End(bool _selected);
	void OnEVENT_Select_End_Internal(class UAnimatableWidget* _self, bool _select);
	void OnEVENT_Select_Start(bool _select);
	void OnEVENT_Select_Start_Internal(class UAnimatableWidget* _self, bool _select);
	void OnEVENT_Show_End();
	void OnEVENT_Show_End_Internal(class UAnimatableWidget* _self);
	void OnEVENT_Show_Start();
	void OnEVENT_Show_Start_Internal(class UAnimatableWidget* _self);
	void OnEVENT_Spotlight();
	void OnEVENT_Spotlight_Internal(class UAnimatableWidget* _self);
	void OnFocusableChanged();
	void OnResetAnim();
	void ResetAnim();
	void Select(bool _select);
	void SetVisibilityWithAnim(ESlateVisibility _visibility, bool _force_immediately);
	void SkipPlayAnimation(class FName _anim_name);
	void SpotLight();

	bool IsFocused() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimatableWidget">();
	}
	static class UAnimatableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimatableWidget>();
	}
};
static_assert(alignof(UAnimatableWidget) == 0x000008, "Wrong alignment on UAnimatableWidget");
static_assert(sizeof(UAnimatableWidget) == 0x0004E0, "Wrong size on UAnimatableWidget");
static_assert(offsetof(UAnimatableWidget, _ToggleSelected) == 0x0002C0, "Member 'UAnimatableWidget::_ToggleSelected' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnShow_Option) == 0x0002C4, "Member 'UAnimatableWidget::OnShow_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnIdle_Default_Option) == 0x0002E4, "Member 'UAnimatableWidget::OnIdle_Default_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnHide_Option) == 0x000304, "Member 'UAnimatableWidget::OnHide_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnIdle_Focused_Option) == 0x000324, "Member 'UAnimatableWidget::OnIdle_Focused_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnSelected_Option) == 0x000344, "Member 'UAnimatableWidget::OnSelected_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnIdle_Selected_Option) == 0x000364, "Member 'UAnimatableWidget::OnIdle_Selected_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnSpotlight_Option) == 0x000384, "Member 'UAnimatableWidget::OnSpotlight_Option' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, _AnimMap) == 0x0003A8, "Member 'UAnimatableWidget::_AnimMap' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, _AnimSettingMap) == 0x0003F8, "Member 'UAnimatableWidget::_AnimSettingMap' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, _CurrentAnimation) == 0x000448, "Member 'UAnimatableWidget::_CurrentAnimation' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, _FocusAnimation) == 0x000450, "Member 'UAnimatableWidget::_FocusAnimation' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, _WidgetState) == 0x00045C, "Member 'UAnimatableWidget::_WidgetState' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnShowStartEvent) == 0x000460, "Member 'UAnimatableWidget::OnShowStartEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnShowEndEvent) == 0x000470, "Member 'UAnimatableWidget::OnShowEndEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnFocusEvent) == 0x000480, "Member 'UAnimatableWidget::OnFocusEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnSelectStartEvent) == 0x000490, "Member 'UAnimatableWidget::OnSelectStartEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnSelectEndEvent) == 0x0004A0, "Member 'UAnimatableWidget::OnSelectEndEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnSpotlightEvent) == 0x0004B0, "Member 'UAnimatableWidget::OnSpotlightEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnHideStartEvent) == 0x0004C0, "Member 'UAnimatableWidget::OnHideStartEvent' has a wrong offset!");
static_assert(offsetof(UAnimatableWidget, OnHideEndEvent) == 0x0004D0, "Member 'UAnimatableWidget::OnHideEndEvent' has a wrong offset!");

// Class BPGLib.AssetLoader
// 0x0058 (0x0088 - 0x0030)
class UAssetLoader final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_1B70[0x58];                                    // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetLoader">();
	}
	static class UAssetLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetLoader>();
	}
};
static_assert(alignof(UAssetLoader) == 0x000008, "Wrong alignment on UAssetLoader");
static_assert(sizeof(UAssetLoader) == 0x000088, "Wrong size on UAssetLoader");

// Class BPGLib.BPGCharacter
// 0x0F60 (0x15E0 - 0x0680)
class ABPGCharacter : public ACharacter
{
public:
	struct FLocomotiveProfile                     _StandingProfile;                                  // 0x0678(0x0060)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLocomotiveProfile                     _CrouchingProfile;                                 // 0x06D8(0x0060)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _IsPlayingLocoMotion;                              // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B71[0x7];                                     // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMoveStamp                             _MoveStamp;                                        // 0x0740(0x00A8)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FStartingRootMotion                    _StartingRootMotion;                               // 0x07E8(0x0028)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B72[0x48];                                    // 0x0810(0x0048)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSprintParams                          _SprintParams;                                     // 0x0858(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _SprintRemainTime;                                 // 0x085C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B73[0xD80];                                   // 0x0860(0x0D80)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	class UObject* GetCurrentMovementSource();
	void OnRep_MoveStamp();
	void OnRep_StartingRootMotion();
	void RPC_C2S_Moves(const struct FC2SMoves& _moves);
	void RPC_S2C_ForcedMoveAck(const struct FS2CMoveAck& _ack);
	void RPC_S2C_MoveAck(const struct FS2CMoveAck& _ack);
	void RPC_SERVER_MoveStamp(const struct FMoveStampC2S& _move);
	void RPC_SERVER_Request_ChangeSprintState(ESprintState _state);
	void SetMovementScaler(const struct FVector& _scaler);
	void SetMovementSource(class UObject* _source);
	void SetMoveMode(EMoveMode _mode);
	void SetPlayingLocoMotionNode(bool _is_playing);
	void SetRotationScaler(const struct FRotator& _scaler);

	const struct FVector GetMovementScaler() const;
	EMoveMode GetMoveMode() const;
	const struct FRotator GetRotationScaler() const;
	bool IsLocal() const;
	bool IsPlayingLocoMotionNode() const;
	bool IsRemote() const;
	bool IsSpectated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPGCharacter">();
	}
	static class ABPGCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPGCharacter>();
	}
};
static_assert(alignof(ABPGCharacter) == 0x000010, "Wrong alignment on ABPGCharacter");
static_assert(sizeof(ABPGCharacter) == 0x0015E0, "Wrong size on ABPGCharacter");
static_assert(offsetof(ABPGCharacter, _StandingProfile) == 0x000678, "Member 'ABPGCharacter::_StandingProfile' has a wrong offset!");
static_assert(offsetof(ABPGCharacter, _CrouchingProfile) == 0x0006D8, "Member 'ABPGCharacter::_CrouchingProfile' has a wrong offset!");
static_assert(offsetof(ABPGCharacter, _IsPlayingLocoMotion) == 0x000738, "Member 'ABPGCharacter::_IsPlayingLocoMotion' has a wrong offset!");
static_assert(offsetof(ABPGCharacter, _MoveStamp) == 0x000740, "Member 'ABPGCharacter::_MoveStamp' has a wrong offset!");
static_assert(offsetof(ABPGCharacter, _StartingRootMotion) == 0x0007E8, "Member 'ABPGCharacter::_StartingRootMotion' has a wrong offset!");
static_assert(offsetof(ABPGCharacter, _SprintParams) == 0x000858, "Member 'ABPGCharacter::_SprintParams' has a wrong offset!");
static_assert(offsetof(ABPGCharacter, _SprintRemainTime) == 0x00085C, "Member 'ABPGCharacter::_SprintRemainTime' has a wrong offset!");

// Class BPGLib.BPGGameInstance
// 0x00B0 (0x0270 - 0x01C0)
class UBPGGameInstance : public UGameInstance
{
public:
	uint8                                         Pad_1B74[0xB0];                                    // 0x01C0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	class FString GetVersion() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPGGameInstance">();
	}
	static class UBPGGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPGGameInstance>();
	}
};
static_assert(alignof(UBPGGameInstance) == 0x000008, "Wrong alignment on UBPGGameInstance");
static_assert(sizeof(UBPGGameInstance) == 0x000270, "Wrong size on UBPGGameInstance");

// Class BPGLib.GamepadInputReceiver
// 0x0000 (0x0028 - 0x0028)
class IGamepadInputReceiver final : public IInterface
{
public:
	bool OnGamepadInput(const struct FKeyEvent& _in_key_event);

	bool IsReadyGamepadFocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GamepadInputReceiver">();
	}
	static class IGamepadInputReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGamepadInputReceiver>();
	}
};
static_assert(alignof(IGamepadInputReceiver) == 0x000008, "Wrong alignment on IGamepadInputReceiver");
static_assert(sizeof(IGamepadInputReceiver) == 0x000028, "Wrong size on IGamepadInputReceiver");

// Class BPGLib.BPGInputSubsystem
// 0x0050 (0x0080 - 0x0030)
class UBPGInputSubsystem final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_1B76[0x28];                                    // 0x0030(0x0028)(Fixing Size After Last Property [ Dumper-69 ])
	FMulticastInlineDelegateProperty_             OnInputMethodChanged;                              // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	EInputMethodType                              _LastInputType;                                    // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EInputMethodType                              _CurrentInputType;                                 // 0x0069(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B77[0x16];                                    // 0x006A(0x0016)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	void BroadcastInputMethodChanged();
	void SetCurrentInputType(EInputMethodType _new_input_type);

	EInputMethodType GetCurrentInputType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPGInputSubsystem">();
	}
	static class UBPGInputSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPGInputSubsystem>();
	}
};
static_assert(alignof(UBPGInputSubsystem) == 0x000008, "Wrong alignment on UBPGInputSubsystem");
static_assert(sizeof(UBPGInputSubsystem) == 0x000080, "Wrong size on UBPGInputSubsystem");
static_assert(offsetof(UBPGInputSubsystem, OnInputMethodChanged) == 0x000058, "Member 'UBPGInputSubsystem::OnInputMethodChanged' has a wrong offset!");
static_assert(offsetof(UBPGInputSubsystem, _LastInputType) == 0x000068, "Member 'UBPGInputSubsystem::_LastInputType' has a wrong offset!");
static_assert(offsetof(UBPGInputSubsystem, _CurrentInputType) == 0x000069, "Member 'UBPGInputSubsystem::_CurrentInputType' has a wrong offset!");

// Class BPGLib.BPGMovementComponent
// 0x0E90 (0x1DE0 - 0x0F50)
class UBPGMovementComponent : public UCharacterMovementComponent
{
public:
	bool                                          _EnableBPMovement;                                 // 0x0F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B78[0x7];                                     // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UCharaMoveDriver*                       _Driver;                                           // 0x0F50(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _SyncPerSec_Client_Min;                            // 0x0F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _SyncPerSec_Client_Max;                            // 0x0F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _SyncPerSec_Remote;                                // 0x0F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _MaxErrorCorrectionSpeedRate;                      // 0x0F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _MaxClientErrorDistance;                           // 0x0F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _MaxServerDelayedTime;                             // 0x0F6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _MinSmoothingDistance;                             // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _MaxSmoothingDistance;                             // 0x0F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _MaxSmoothingDelay;                                // 0x0F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMoveMode                                     _InitialMoveMode;                                  // 0x0F7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _ApplyGravity;                                     // 0x0F7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B79[0xD22];                                   // 0x0F7E(0x0D22)(Fixing Size After Last Property [ Dumper-69 ])
	struct FErrorCorrector                        _ErrorCorrector;                                   // 0x1CA0(0x0050)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UObject*                                _MovementSource;                                   // 0x1CF0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovingFloorSource*                     _MovingFloor;                                      // 0x1CF8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    _LastFloorComponent;                               // 0x1D00(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B7A[0xD8];                                    // 0x1D08(0x00D8)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static bool GetShowSyncError();
	static void SetShowSyncError(bool _show);

	class FString GetDebugInfoString();
	void OnMontageEnded(class UAnimMontage* _montage, bool _interrupted);
	void OnMontageStarted(class UAnimMontage* _montage);
	void SetInitialMoveMode(EMoveMode _mode);
	void SetMoveMode(EMoveMode _mode);

	EMoveMode GetInitialMoveMode() const;
	EMoveMode GetMoveMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPGMovementComponent">();
	}
	static class UBPGMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPGMovementComponent>();
	}
};
static_assert(alignof(UBPGMovementComponent) == 0x000010, "Wrong alignment on UBPGMovementComponent");
static_assert(sizeof(UBPGMovementComponent) == 0x001DE0, "Wrong size on UBPGMovementComponent");
static_assert(offsetof(UBPGMovementComponent, _EnableBPMovement) == 0x000F48, "Member 'UBPGMovementComponent::_EnableBPMovement' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _Driver) == 0x000F50, "Member 'UBPGMovementComponent::_Driver' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _SyncPerSec_Client_Min) == 0x000F58, "Member 'UBPGMovementComponent::_SyncPerSec_Client_Min' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _SyncPerSec_Client_Max) == 0x000F5C, "Member 'UBPGMovementComponent::_SyncPerSec_Client_Max' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _SyncPerSec_Remote) == 0x000F60, "Member 'UBPGMovementComponent::_SyncPerSec_Remote' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MaxErrorCorrectionSpeedRate) == 0x000F64, "Member 'UBPGMovementComponent::_MaxErrorCorrectionSpeedRate' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MaxClientErrorDistance) == 0x000F68, "Member 'UBPGMovementComponent::_MaxClientErrorDistance' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MaxServerDelayedTime) == 0x000F6C, "Member 'UBPGMovementComponent::_MaxServerDelayedTime' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MinSmoothingDistance) == 0x000F70, "Member 'UBPGMovementComponent::_MinSmoothingDistance' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MaxSmoothingDistance) == 0x000F74, "Member 'UBPGMovementComponent::_MaxSmoothingDistance' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MaxSmoothingDelay) == 0x000F78, "Member 'UBPGMovementComponent::_MaxSmoothingDelay' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _InitialMoveMode) == 0x000F7C, "Member 'UBPGMovementComponent::_InitialMoveMode' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _ApplyGravity) == 0x000F7D, "Member 'UBPGMovementComponent::_ApplyGravity' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _ErrorCorrector) == 0x001CA0, "Member 'UBPGMovementComponent::_ErrorCorrector' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MovementSource) == 0x001CF0, "Member 'UBPGMovementComponent::_MovementSource' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _MovingFloor) == 0x001CF8, "Member 'UBPGMovementComponent::_MovingFloor' has a wrong offset!");
static_assert(offsetof(UBPGMovementComponent, _LastFloorComponent) == 0x001D00, "Member 'UBPGMovementComponent::_LastFloorComponent' has a wrong offset!");

// Class BPGLib.BPGPlayerController
// 0x0060 (0x08B8 - 0x0858)
class ABPGPlayerController : public APlayerController
{
public:
	TSubclassOf<class UMessageBox>                MessageBoxClass;                                   // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EInputMode                                    BaseInputMode;                                     // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _UseStartFadeIn;                                   // 0x0861(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B7C[0xE];                                     // 0x0862(0x000E)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupStack*                            _DialogStack;                                      // 0x0870(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B7D[0x20];                                    // 0x0878(0x0020)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FIndicatorData>                 _IndicatorDatas;                                   // 0x0898(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B7E[0x10];                                    // 0x08A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	class AActor* ActivateCameraByTag(const class FName& _Name, float _blending, EViewTargetBlendFunction _blend_func);
	void CloseAllModals();
	void CloseModalWithType(TSubclassOf<class UPopupBase> _class_type);
	class UPopupBase* DoModal(class UPopupBase* _dlg, TSubclassOf<class UPopupBase> _dlg_type, bool _open_even_if_same_class, bool _hide_registered_background_widgets);
	class UPopupBase* DoModalEx(class UPopupBase* _dlg, TSubclassOf<class UPopupBase> _dlg_type, bool _open_even_if_same_class, bool _hide_registered_background_widgets, const TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)>& _proc);
	EInputMode GetInputModeEx();
	void MakeFadedOut();
	bool OnChangeWaiting(EWaitingType _waiting_type);
	bool OnCloseWindow();
	bool OnDEBUG_ToggleUI();
	void RegisterBackgroundWidget(class UWidget* _widget);
	void RPC_CLIENT_ExecCommand(const class FString& _command);
	void RPC_SERVER_RequestCommand(const class FString& _command);
	void SetInputModeEx(EInputMode _mode, class UWidget* Focus_widget);
	void SetUseStartFadeIn(bool _use_start_fade_in);
	void SetWaiting(EWaitingType _waiting_type);
	void StartFadeIn(float _duration);
	void StartFadeOut(float _duration);
	void UnregisterBackgroundWidget(class UWidget* _widget);

	EFadeStatus GetFadeStatus() const;
	float GetFPS() const;
	class UPopupBase* GetTopPopup() const;
	bool IsAnyPopupOpened() const;
	bool IsPopupOpened(class FName _popup_id) const;
	bool IsSpectating() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPGPlayerController">();
	}
	static class ABPGPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPGPlayerController>();
	}
};
static_assert(alignof(ABPGPlayerController) == 0x000008, "Wrong alignment on ABPGPlayerController");
static_assert(sizeof(ABPGPlayerController) == 0x0008B8, "Wrong size on ABPGPlayerController");
static_assert(offsetof(ABPGPlayerController, MessageBoxClass) == 0x000858, "Member 'ABPGPlayerController::MessageBoxClass' has a wrong offset!");
static_assert(offsetof(ABPGPlayerController, BaseInputMode) == 0x000860, "Member 'ABPGPlayerController::BaseInputMode' has a wrong offset!");
static_assert(offsetof(ABPGPlayerController, _UseStartFadeIn) == 0x000861, "Member 'ABPGPlayerController::_UseStartFadeIn' has a wrong offset!");
static_assert(offsetof(ABPGPlayerController, _DialogStack) == 0x000870, "Member 'ABPGPlayerController::_DialogStack' has a wrong offset!");
static_assert(offsetof(ABPGPlayerController, _IndicatorDatas) == 0x000898, "Member 'ABPGPlayerController::_IndicatorDatas' has a wrong offset!");

// Class BPGLib.BPGViewportClient
// 0x0010 (0x03C0 - 0x03B0)
class UBPGViewportClient final : public UGameViewportClient
{
public:
	uint8                                         Pad_1B85[0x10];                                    // 0x03B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPGViewportClient">();
	}
	static class UBPGViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPGViewportClient>();
	}
};
static_assert(alignof(UBPGViewportClient) == 0x000008, "Wrong alignment on UBPGViewportClient");
static_assert(sizeof(UBPGViewportClient) == 0x0003C0, "Wrong size on UBPGViewportClient");

// Class BPGLib.CharaMoveDriver
// 0x0030 (0x0058 - 0x0028)
class UCharaMoveDriver : public UObject
{
public:
	struct FVector                                Gravity;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B86[0x14];                                    // 0x0044(0x0014)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMoveDriver">();
	}
	static class UCharaMoveDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMoveDriver>();
	}
};
static_assert(alignof(UCharaMoveDriver) == 0x000008, "Wrong alignment on UCharaMoveDriver");
static_assert(sizeof(UCharaMoveDriver) == 0x000058, "Wrong size on UCharaMoveDriver");
static_assert(offsetof(UCharaMoveDriver, Gravity) == 0x000028, "Member 'UCharaMoveDriver::Gravity' has a wrong offset!");
static_assert(offsetof(UCharaMoveDriver, GravityScale) == 0x000040, "Member 'UCharaMoveDriver::GravityScale' has a wrong offset!");

// Class BPGLib.CharaMoveDriver_Normal
// 0x0028 (0x0080 - 0x0058)
class UCharaMoveDriver_Normal final : public UCharaMoveDriver
{
public:
	float                                         MaxStepHeight;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkableFloorAngle;                                // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B87[0x20];                                    // 0x0060(0x0020)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharaMoveDriver_Normal">();
	}
	static class UCharaMoveDriver_Normal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharaMoveDriver_Normal>();
	}
};
static_assert(alignof(UCharaMoveDriver_Normal) == 0x000008, "Wrong alignment on UCharaMoveDriver_Normal");
static_assert(sizeof(UCharaMoveDriver_Normal) == 0x000080, "Wrong size on UCharaMoveDriver_Normal");
static_assert(offsetof(UCharaMoveDriver_Normal, MaxStepHeight) == 0x000058, "Member 'UCharaMoveDriver_Normal::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(UCharaMoveDriver_Normal, WalkableFloorAngle) == 0x00005C, "Member 'UCharaMoveDriver_Normal::WalkableFloorAngle' has a wrong offset!");

// Class BPGLib.EnumComboButton
// 0x14D0 (0x1650 - 0x0180)
class UEnumComboButton final : public UWidget
{
public:
	uint8                                         Pad_1B88[0x10];                                    // 0x0180(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _EnumClassName;                                    // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _Title;                                            // 0x01A0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         _TitleFont;                                        // 0x01B8(0x0058)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         _ValueFont;                                        // 0x0210(0x0058)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B89[0x8];                                     // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FComboBoxStyle                         _ComboBoxStyle;                                    // 0x0270(0x0660)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FTableRowStyle                         _ItemStyle;                                        // 0x08D0(0x0D50)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            _ForegroundColor;                                  // 0x1620(0x0014)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         _MinimumWidth;                                     // 0x1634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8A[0x8];                                     // 0x1638(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	FMulticastInlineDelegateProperty_             OnSelectEnumValue;                                 // 0x1640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	void SelectEnumValue(int32 _value);

	const class UEnum* GetEnumClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnumComboButton">();
	}
	static class UEnumComboButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnumComboButton>();
	}
};
static_assert(alignof(UEnumComboButton) == 0x000010, "Wrong alignment on UEnumComboButton");
static_assert(sizeof(UEnumComboButton) == 0x001650, "Wrong size on UEnumComboButton");
static_assert(offsetof(UEnumComboButton, _EnumClassName) == 0x000190, "Member 'UEnumComboButton::_EnumClassName' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _Title) == 0x0001A0, "Member 'UEnumComboButton::_Title' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _TitleFont) == 0x0001B8, "Member 'UEnumComboButton::_TitleFont' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _ValueFont) == 0x000210, "Member 'UEnumComboButton::_ValueFont' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _ComboBoxStyle) == 0x000270, "Member 'UEnumComboButton::_ComboBoxStyle' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _ItemStyle) == 0x0008D0, "Member 'UEnumComboButton::_ItemStyle' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _ForegroundColor) == 0x001620, "Member 'UEnumComboButton::_ForegroundColor' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, _MinimumWidth) == 0x001634, "Member 'UEnumComboButton::_MinimumWidth' has a wrong offset!");
static_assert(offsetof(UEnumComboButton, OnSelectEnumValue) == 0x001640, "Member 'UEnumComboButton::OnSelectEnumValue' has a wrong offset!");

// Class BPGLib.FocusableWidget
// 0x0000 (0x02C0 - 0x02C0)
class UFocusableWidget final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusableWidget">();
	}
	static class UFocusableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusableWidget>();
	}
};
static_assert(alignof(UFocusableWidget) == 0x000008, "Wrong alignment on UFocusableWidget");
static_assert(sizeof(UFocusableWidget) == 0x0002C0, "Wrong size on UFocusableWidget");

// Class BPGLib.FollowCameraActor
// 0x0150 (0x0AF0 - 0x09A0)
class AFollowCameraActor : public ACameraActor
{
public:
	EFollowCamTarget                              TargetPositionType;                                // 0x09A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8B[0x7];                                     // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                TargetOffset;                                      // 0x09A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetSocket;                                      // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFollowCamMovementStyle                       MovementStyle;                                     // 0x09C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8C[0x3];                                     // 0x09C9(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         MinDistance;                                       // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistance;                                       // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFollowCamInitialDistance                     InitialDistanceMode;                               // 0x09D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8D[0x3];                                     // 0x09D5(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                BoundScale;                                        // 0x09D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ScreenSpaceCenterOffset;                           // 0x09F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          KeepTracking;                                      // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8E[0x3];                                     // 0x0A01(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         InterpolationSpeed;                                // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ToleranceLocationError;                            // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ToleranceRotationError;                            // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 _TargetActor;                                      // 0x0A10(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8F[0xD8];                                    // 0x0A18(0x00D8)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	void AddDistance(float _dist);
	bool HasTargetActor();
	void ResetTargetActor();
	void SetOriginRotator(const struct FRotator& _rotator);
	void SetTargetActor(class AActor* _target);

	float GetTargetDistance() const;
	struct FTransform GetTargetTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FollowCameraActor">();
	}
	static class AFollowCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFollowCameraActor>();
	}
};
static_assert(alignof(AFollowCameraActor) == 0x000010, "Wrong alignment on AFollowCameraActor");
static_assert(sizeof(AFollowCameraActor) == 0x000AF0, "Wrong size on AFollowCameraActor");
static_assert(offsetof(AFollowCameraActor, TargetPositionType) == 0x0009A0, "Member 'AFollowCameraActor::TargetPositionType' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, TargetOffset) == 0x0009A8, "Member 'AFollowCameraActor::TargetOffset' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, TargetSocket) == 0x0009C0, "Member 'AFollowCameraActor::TargetSocket' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, MovementStyle) == 0x0009C8, "Member 'AFollowCameraActor::MovementStyle' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, MinDistance) == 0x0009CC, "Member 'AFollowCameraActor::MinDistance' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, MaxDistance) == 0x0009D0, "Member 'AFollowCameraActor::MaxDistance' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, InitialDistanceMode) == 0x0009D4, "Member 'AFollowCameraActor::InitialDistanceMode' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, BoundScale) == 0x0009D8, "Member 'AFollowCameraActor::BoundScale' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, ScreenSpaceCenterOffset) == 0x0009F0, "Member 'AFollowCameraActor::ScreenSpaceCenterOffset' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, KeepTracking) == 0x000A00, "Member 'AFollowCameraActor::KeepTracking' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, InterpolationSpeed) == 0x000A04, "Member 'AFollowCameraActor::InterpolationSpeed' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, ToleranceLocationError) == 0x000A08, "Member 'AFollowCameraActor::ToleranceLocationError' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, ToleranceRotationError) == 0x000A0C, "Member 'AFollowCameraActor::ToleranceRotationError' has a wrong offset!");
static_assert(offsetof(AFollowCameraActor, _TargetActor) == 0x000A10, "Member 'AFollowCameraActor::_TargetActor' has a wrong offset!");

// Class BPGLib.GfxOption
// 0x0000 (0x0028 - 0x0028)
class UGfxOption final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FMonitor> GetAllMonitors();
	static TArray<struct FVideoMode> GetAllResolutions(const class UObject* _world_ctx, EWindowMode _window_type);
	static struct FMonitor GetCurrentMonitor(const class UObject* _world_ctx);
	static int32 GetCurrentMonitorIndex(const class UObject* _world_ctx);
	static TArray<struct FVideoMode> GetFullscreenResolutions(const class UObject* _world_ctx);
	static struct FIntPoint GetGameResolution(const class UObject* _world_ctx);
	static struct FIntPoint GetGameViewportSize(const class UObject* _world_ctx);
	static class UGameUserSettings* GetUserSettings(const class UObject* _world_ctx);
	static TArray<struct FVideoMode> GetWindowedResolutions(const class UObject* _world_ctx);
	static struct FIntPoint ResolveSupportedResolution(const class UObject* _world_ctx, int32 _width, int32 _height);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GfxOption">();
	}
	static class UGfxOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGfxOption>();
	}
};
static_assert(alignof(UGfxOption) == 0x000008, "Wrong alignment on UGfxOption");
static_assert(sizeof(UGfxOption) == 0x000028, "Wrong size on UGfxOption");

// Class BPGLib.Indicateable
// 0x0000 (0x0028 - 0x0028)
class IIndicateable final : public IInterface
{
public:
	class UIndicatorPosComponent* GetIndicatorPosComponent();
	void OnQueryAddEvent(EIndicatorType _type, bool _param);
	bool OnQueryAddIndiactor(class ABPGPlayerController* Controller, EIndicatorType _type, struct FIndicatorData* _out_detail);
	class FText OnQueryGetDisplayName(EIndicatorType _type);
	bool OnQueryVisibility(EIndicatorType _type);
	struct FTransform OnQueryWorldTransform(EIndicatorType _type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Indicateable">();
	}
	static class IIndicateable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IIndicateable>();
	}
};
static_assert(alignof(IIndicateable) == 0x000008, "Wrong alignment on IIndicateable");
static_assert(sizeof(IIndicateable) == 0x000028, "Wrong size on IIndicateable");

// Class BPGLib.PreviewableWidget
// 0x0010 (0x04F0 - 0x04E0)
class UPreviewableWidget : public UAnimatableWidget
{
public:
	class FName                                   UI_ID;                                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OpenSound;                                         // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UPreviewableWidget* FindWidgetByUIID(const class FName& _id);
	bool OnSynchronizeProperties();
	void SetUIID(class FName _id);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreviewableWidget">();
	}
	static class UPreviewableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPreviewableWidget>();
	}
};
static_assert(alignof(UPreviewableWidget) == 0x000008, "Wrong alignment on UPreviewableWidget");
static_assert(sizeof(UPreviewableWidget) == 0x0004F0, "Wrong size on UPreviewableWidget");
static_assert(offsetof(UPreviewableWidget, UI_ID) == 0x0004E0, "Member 'UPreviewableWidget::UI_ID' has a wrong offset!");
static_assert(offsetof(UPreviewableWidget, OpenSound) == 0x0004E8, "Member 'UPreviewableWidget::OpenSound' has a wrong offset!");

// Class BPGLib.IndicatorBaseWidget
// 0x00A8 (0x0598 - 0x04F0)
class UIndicatorBaseWidget : public UPreviewableWidget
{
public:
	uint8                                         Pad_1B97[0x10];                                    // 0x04F0(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                LocalSpaceOffset;                                  // 0x0500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldSpaceOffset;                                  // 0x0518(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetOffset;                                      // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClipPointOnEllipse;                                // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideIfOutOfViewport;                               // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B98[0x6];                                     // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FPerspectiveScale                      PerspectiveScale;                                  // 0x0548(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          HideIfOutOfRange;                                  // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorVisibleCondition                    VisibleCondition;                                  // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B99[0x6];                                     // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              ShowDistanceRange;                                 // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorType                                _IndicatorType;                                    // 0x0588(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9A[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         DistanceFromPlayer;                                // 0x058C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsInViewport;                                     // 0x0590(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9B[0x7];                                     // 0x0591(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	void OnInitIndicator();
	void OnShow(bool _show);
	void OnUpdateIndicator();
	void OnUpdateLocation(bool _is_clipped, float _angle);

	EIndicatorType GetIndicatorType() const;
	bool GetIsInViewport() const;
	class AActor* GetTargetActor() const;
	bool IsFallFromPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IndicatorBaseWidget">();
	}
	static class UIndicatorBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIndicatorBaseWidget>();
	}
};
static_assert(alignof(UIndicatorBaseWidget) == 0x000008, "Wrong alignment on UIndicatorBaseWidget");
static_assert(sizeof(UIndicatorBaseWidget) == 0x000598, "Wrong size on UIndicatorBaseWidget");
static_assert(offsetof(UIndicatorBaseWidget, LocalSpaceOffset) == 0x000500, "Member 'UIndicatorBaseWidget::LocalSpaceOffset' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, WorldSpaceOffset) == 0x000518, "Member 'UIndicatorBaseWidget::WorldSpaceOffset' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, WidgetOffset) == 0x000530, "Member 'UIndicatorBaseWidget::WidgetOffset' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, ClipPointOnEllipse) == 0x000540, "Member 'UIndicatorBaseWidget::ClipPointOnEllipse' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, HideIfOutOfViewport) == 0x000541, "Member 'UIndicatorBaseWidget::HideIfOutOfViewport' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, PerspectiveScale) == 0x000548, "Member 'UIndicatorBaseWidget::PerspectiveScale' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, HideIfOutOfRange) == 0x000568, "Member 'UIndicatorBaseWidget::HideIfOutOfRange' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, VisibleCondition) == 0x000569, "Member 'UIndicatorBaseWidget::VisibleCondition' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, ShowDistanceRange) == 0x000570, "Member 'UIndicatorBaseWidget::ShowDistanceRange' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, TargetActor) == 0x000580, "Member 'UIndicatorBaseWidget::TargetActor' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, _IndicatorType) == 0x000588, "Member 'UIndicatorBaseWidget::_IndicatorType' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, DistanceFromPlayer) == 0x00058C, "Member 'UIndicatorBaseWidget::DistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(UIndicatorBaseWidget, _IsInViewport) == 0x000590, "Member 'UIndicatorBaseWidget::_IsInViewport' has a wrong offset!");

// Class BPGLib.IndicatorPosComponent
// 0x0010 (0x02B0 - 0x02A0)
class UIndicatorPosComponent final : public USceneComponent
{
public:
	bool                                          _UseForAngle;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9D[0xF];                                     // 0x02A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IndicatorPosComponent">();
	}
	static class UIndicatorPosComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIndicatorPosComponent>();
	}
};
static_assert(alignof(UIndicatorPosComponent) == 0x000010, "Wrong alignment on UIndicatorPosComponent");
static_assert(sizeof(UIndicatorPosComponent) == 0x0002B0, "Wrong size on UIndicatorPosComponent");
static_assert(offsetof(UIndicatorPosComponent, _UseForAngle) == 0x0002A0, "Member 'UIndicatorPosComponent::_UseForAngle' has a wrong offset!");

// Class BPGLib.LoadedLogPack
// 0x0028 (0x0050 - 0x0028)
class ULoadedLogPack : public UObject
{
public:
	uint8                                         Pad_1B9E[0x28];                                    // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadedLogPack">();
	}
	static class ULoadedLogPack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadedLogPack>();
	}
};
static_assert(alignof(ULoadedLogPack) == 0x000008, "Wrong alignment on ULoadedLogPack");
static_assert(sizeof(ULoadedLogPack) == 0x000050, "Wrong size on ULoadedLogPack");

// Class BPGLib.LoadedLogPack_Group
// 0x0038 (0x0088 - 0x0050)
class ULoadedLogPack_Group : public ULoadedLogPack
{
public:
	class FString                                 Name_LoadedLogPack_Group;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULoadedLogPack*>                 Logs;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9F[0x18];                                    // 0x0070(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadedLogPack_Group">();
	}
	static class ULoadedLogPack_Group* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadedLogPack_Group>();
	}
};
static_assert(alignof(ULoadedLogPack_Group) == 0x000008, "Wrong alignment on ULoadedLogPack_Group");
static_assert(sizeof(ULoadedLogPack_Group) == 0x000088, "Wrong size on ULoadedLogPack_Group");
static_assert(offsetof(ULoadedLogPack_Group, Name_LoadedLogPack_Group) == 0x000050, "Member 'ULoadedLogPack_Group::Name_LoadedLogPack_Group' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Group, Logs) == 0x000060, "Member 'ULoadedLogPack_Group::Logs' has a wrong offset!");

// Class BPGLib.LoadedLogPack_Actor
// 0x0038 (0x00C0 - 0x0088)
class ULoadedLogPack_Actor final : public ULoadedLogPack_Group
{
public:
	int32                                         ObjectID;                                          // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldNetType                                 WorldType;                                         // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA0[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         WorldID;                                           // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorSize;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocal;                                           // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA1[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              StartTime;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA2[0x10];                                    // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadedLogPack_Actor">();
	}
	static class ULoadedLogPack_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadedLogPack_Actor>();
	}
};
static_assert(alignof(ULoadedLogPack_Actor) == 0x000008, "Wrong alignment on ULoadedLogPack_Actor");
static_assert(sizeof(ULoadedLogPack_Actor) == 0x0000C0, "Wrong size on ULoadedLogPack_Actor");
static_assert(offsetof(ULoadedLogPack_Actor, ObjectID) == 0x000088, "Member 'ULoadedLogPack_Actor::ObjectID' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Actor, WorldType) == 0x00008C, "Member 'ULoadedLogPack_Actor::WorldType' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Actor, WorldID) == 0x000090, "Member 'ULoadedLogPack_Actor::WorldID' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Actor, ActorSize) == 0x000094, "Member 'ULoadedLogPack_Actor::ActorSize' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Actor, IsLocal) == 0x000098, "Member 'ULoadedLogPack_Actor::IsLocal' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Actor, StartTime) == 0x0000A0, "Member 'ULoadedLogPack_Actor::StartTime' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_Actor, EndTime) == 0x0000A8, "Member 'ULoadedLogPack_Actor::EndTime' has a wrong offset!");

// Class BPGLib.LoadedLogPack_File
// 0x0058 (0x00E0 - 0x0088)
class ULoadedLogPack_File final : public ULoadedLogPack_Group
{
public:
	EWorldNetType                                 WorldType;                                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA3[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         WorldID;                                           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA4[0x50];                                    // 0x0090(0x0050)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadedLogPack_File">();
	}
	static class ULoadedLogPack_File* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadedLogPack_File>();
	}
};
static_assert(alignof(ULoadedLogPack_File) == 0x000008, "Wrong alignment on ULoadedLogPack_File");
static_assert(sizeof(ULoadedLogPack_File) == 0x0000E0, "Wrong size on ULoadedLogPack_File");
static_assert(offsetof(ULoadedLogPack_File, WorldType) == 0x000088, "Member 'ULoadedLogPack_File::WorldType' has a wrong offset!");
static_assert(offsetof(ULoadedLogPack_File, WorldID) == 0x00008C, "Member 'ULoadedLogPack_File::WorldID' has a wrong offset!");

// Class BPGLib.PopupBase
// 0x0080 (0x0570 - 0x04F0)
class UPopupBase : public UPreviewableWidget
{
public:
	EInputMode                                    InputMode;                                         // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA5[0x3];                                     // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   PopupID;                                           // 0x04F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIOrder                                      UIOrder;                                           // 0x04FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPopupType                                    PopupType;                                         // 0x04FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA6[0x2];                                     // 0x04FE(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	FMulticastInlineDelegateProperty_             OnShow;                                            // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClose;                                           // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA7[0x40];                                    // 0x0520(0x0040)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupStack*                            _Container;                                        // 0x0560(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BA8[0x8];                                     // 0x0568(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	bool ClickButton(class FName _ctrl_id, bool _close);
	void Close(bool _force_close);
	class UWidget* GetFocusWidget();
	bool OnBeforeClose();
	bool OnChangeWaiting(EWaitingType _waiting_type);
	bool OnHidePopup();
	bool OnShowPopup();

	struct FKey GetCloseKey() const;
	const class FName GetPopupID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PopupBase">();
	}
	static class UPopupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPopupBase>();
	}
};
static_assert(alignof(UPopupBase) == 0x000008, "Wrong alignment on UPopupBase");
static_assert(sizeof(UPopupBase) == 0x000570, "Wrong size on UPopupBase");
static_assert(offsetof(UPopupBase, InputMode) == 0x0004F0, "Member 'UPopupBase::InputMode' has a wrong offset!");
static_assert(offsetof(UPopupBase, PopupID) == 0x0004F4, "Member 'UPopupBase::PopupID' has a wrong offset!");
static_assert(offsetof(UPopupBase, UIOrder) == 0x0004FC, "Member 'UPopupBase::UIOrder' has a wrong offset!");
static_assert(offsetof(UPopupBase, PopupType) == 0x0004FD, "Member 'UPopupBase::PopupType' has a wrong offset!");
static_assert(offsetof(UPopupBase, OnShow) == 0x000500, "Member 'UPopupBase::OnShow' has a wrong offset!");
static_assert(offsetof(UPopupBase, OnClose) == 0x000510, "Member 'UPopupBase::OnClose' has a wrong offset!");
static_assert(offsetof(UPopupBase, _Container) == 0x000560, "Member 'UPopupBase::_Container' has a wrong offset!");

// Class BPGLib.MessageBox
// 0x0058 (0x05C8 - 0x0570)
class UMessageBox : public UPopupBase
{
public:
	struct FMessageBoxSetting                     BoxSetting;                                        // 0x0570(0x0048)(Edit, BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnClick;                                           // 0x05B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	void Create(const struct FMessageBoxSetting& _box_setting);
	bool OnCreate(const struct FMessageBoxSetting& _box_setting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MessageBox">();
	}
	static class UMessageBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMessageBox>();
	}
};
static_assert(alignof(UMessageBox) == 0x000008, "Wrong alignment on UMessageBox");
static_assert(sizeof(UMessageBox) == 0x0005C8, "Wrong size on UMessageBox");
static_assert(offsetof(UMessageBox, BoxSetting) == 0x000570, "Member 'UMessageBox::BoxSetting' has a wrong offset!");
static_assert(offsetof(UMessageBox, OnClick) == 0x0005B8, "Member 'UMessageBox::OnClick' has a wrong offset!");

// Class BPGLib.MovementSource
// 0x0000 (0x0028 - 0x0028)
class IMovementSource final : public IInterface
{
public:
	bool BeginRide(class AActor* _Actor);
	bool EndRide(class AActor* _Actor);
	struct FTransform GetBaseTransform(class AActor* _Actor);
	struct FMovementSourceData GetMovementSourceData(class AActor* _Actor);
	struct FMovementQueryResult HandleMovement(const struct FMovementQuery& _query);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementSource">();
	}
	static class IMovementSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovementSource>();
	}
};
static_assert(alignof(IMovementSource) == 0x000008, "Wrong alignment on IMovementSource");
static_assert(sizeof(IMovementSource) == 0x000028, "Wrong size on IMovementSource");

// Class BPGLib.MovingFloorSource
// 0x0078 (0x00A0 - 0x0028)
class alignas(0x10) UMovingFloorSource final : public UObject
{
public:
	uint8                                         Pad_1BAF[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	class USceneComponent*                        _Floor;                                            // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BB0[0x68];                                    // 0x0038(0x0068)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovingFloorSource">();
	}
	static class UMovingFloorSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovingFloorSource>();
	}
};
static_assert(alignof(UMovingFloorSource) == 0x000010, "Wrong alignment on UMovingFloorSource");
static_assert(sizeof(UMovingFloorSource) == 0x0000A0, "Wrong size on UMovingFloorSource");
static_assert(offsetof(UMovingFloorSource, _Floor) == 0x000030, "Member 'UMovingFloorSource::_Floor' has a wrong offset!");

// Class BPGLib.NetUtil
// 0x0000 (0x0028 - 0x0028)
class UNetUtil final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetLocalHostURL(const class UObject* _world_ctx, int32 _port_offset);
	static int32 GetPort(const class UObject* _world_ctx);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetUtil">();
	}
	static class UNetUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetUtil>();
	}
};
static_assert(alignof(UNetUtil) == 0x000008, "Wrong alignment on UNetUtil");
static_assert(sizeof(UNetUtil) == 0x000028, "Wrong size on UNetUtil");

// Class BPGLib.PolyGraph
// 0x00C8 (0x0248 - 0x0180)
class UPolyGraph final : public UWidget
{
public:
	uint8                                         Pad_1BB3[0x10];                                    // 0x0180(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FPolyGraphLayer>                Layers;                                            // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPolyGraphAxisData>             Axes;                                              // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          ShowAxisLabel;                                     // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BB4[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FColor                                 BackgroundColor;                                   // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 TextColor;                                         // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 AxisLineColor;                                     // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 StepLineColor;                                     // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StepCount;                                         // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Space;                                             // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BB5[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateFontInfo                         Font;                                              // 0x01D0(0x0058)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                CustomToolTipWidget;                               // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(EHoverGraphArea _area, int32 _idx_axis)> CustomToolTipWidgetDelegate;                       // 0x0230(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BB6[0x8];                                     // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	float GetValue(int32 _idx_axis, int32 _layer);
	class FText GetValueText(int32 _idx_axis, int32 _layer);
	void SetAxisMinMax(int32 _idx_axis, float _min, float _max);
	void SetAxisValue(int32 _idx_axis, int32 _idx_layer, float _value);

	struct FPolyGraphSetting GetSetting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PolyGraph">();
	}
	static class UPolyGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPolyGraph>();
	}
};
static_assert(alignof(UPolyGraph) == 0x000008, "Wrong alignment on UPolyGraph");
static_assert(sizeof(UPolyGraph) == 0x000248, "Wrong size on UPolyGraph");
static_assert(offsetof(UPolyGraph, Layers) == 0x000190, "Member 'UPolyGraph::Layers' has a wrong offset!");
static_assert(offsetof(UPolyGraph, Axes) == 0x0001A0, "Member 'UPolyGraph::Axes' has a wrong offset!");
static_assert(offsetof(UPolyGraph, ShowAxisLabel) == 0x0001B0, "Member 'UPolyGraph::ShowAxisLabel' has a wrong offset!");
static_assert(offsetof(UPolyGraph, BackgroundColor) == 0x0001B4, "Member 'UPolyGraph::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UPolyGraph, TextColor) == 0x0001B8, "Member 'UPolyGraph::TextColor' has a wrong offset!");
static_assert(offsetof(UPolyGraph, AxisLineColor) == 0x0001BC, "Member 'UPolyGraph::AxisLineColor' has a wrong offset!");
static_assert(offsetof(UPolyGraph, StepLineColor) == 0x0001C0, "Member 'UPolyGraph::StepLineColor' has a wrong offset!");
static_assert(offsetof(UPolyGraph, StepCount) == 0x0001C4, "Member 'UPolyGraph::StepCount' has a wrong offset!");
static_assert(offsetof(UPolyGraph, Space) == 0x0001C8, "Member 'UPolyGraph::Space' has a wrong offset!");
static_assert(offsetof(UPolyGraph, Font) == 0x0001D0, "Member 'UPolyGraph::Font' has a wrong offset!");
static_assert(offsetof(UPolyGraph, CustomToolTipWidget) == 0x000228, "Member 'UPolyGraph::CustomToolTipWidget' has a wrong offset!");
static_assert(offsetof(UPolyGraph, CustomToolTipWidgetDelegate) == 0x000230, "Member 'UPolyGraph::CustomToolTipWidgetDelegate' has a wrong offset!");

// Class BPGLib.PopupStack
// 0x0030 (0x0058 - 0x0028)
class UPopupStack final : public UObject
{
public:
	TArray<class UPopupBase*>                     _Stack;                                            // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UGameInstance*                          _GameInst;                                         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FBackgroundWidget>              _BackgroundWidgets;                                // 0x0040(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BB7[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PopupStack">();
	}
	static class UPopupStack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPopupStack>();
	}
};
static_assert(alignof(UPopupStack) == 0x000008, "Wrong alignment on UPopupStack");
static_assert(sizeof(UPopupStack) == 0x000058, "Wrong size on UPopupStack");
static_assert(offsetof(UPopupStack, _Stack) == 0x000028, "Member 'UPopupStack::_Stack' has a wrong offset!");
static_assert(offsetof(UPopupStack, _GameInst) == 0x000038, "Member 'UPopupStack::_GameInst' has a wrong offset!");
static_assert(offsetof(UPopupStack, _BackgroundWidgets) == 0x000040, "Member 'UPopupStack::_BackgroundWidgets' has a wrong offset!");

// Class BPGLib.Previewable
// 0x0000 (0x0028 - 0x0028)
class IPreviewable final : public IInterface
{
public:
	EHandleReply OnMouseDown(const struct FGeometry& _geo, const struct FPointerEvent& _event);
	EHandleReply OnMouseMove(const struct FGeometry& _geo, const struct FPointerEvent& _event);
	EHandleReply OnMouseUp(const struct FGeometry& _geo, const struct FPointerEvent& _event);
	EHandleReply OnMouseWheel(const struct FGeometry& _geo, const struct FPointerEvent& _event);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Previewable">();
	}
	static class IPreviewable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPreviewable>();
	}
};
static_assert(alignof(IPreviewable) == 0x000008, "Wrong alignment on IPreviewable");
static_assert(sizeof(IPreviewable) == 0x000028, "Wrong size on IPreviewable");

// Class BPGLib.Profiler
// 0x0008 (0x0030 - 0x0028)
class UProfiler final : public UBlueprintFunctionLibrary
{
public:
	uint8                                         Pad_1BBC[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class FString GetAllProfileRecordsString();
	static struct FProfileRecord GetProfileRecord(const class FName _Name);
	static class FString GetProfileRecordString(const class FName _Name);
	static void ProfileEnd(const class FName& _Name);
	static void ProfileStart(const class FName& _Name);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Profiler">();
	}
	static class UProfiler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfiler>();
	}
};
static_assert(alignof(UProfiler) == 0x000008, "Wrong alignment on UProfiler");
static_assert(sizeof(UProfiler) == 0x000030, "Wrong size on UProfiler");

// Class BPGLib.RadioButton
// 0x0498 (0x0630 - 0x0198)
class URadioButton final : public UContentWidget
{
public:
	class USlateWidgetStyleAsset*                 Style;                                             // 0x0198(0x0008)(ZeroConstructor, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FButtonStyle                           WidgetStyle;                                       // 0x01A0(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0590(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x05A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x05B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x05B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x05B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x05B3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBD[0x4];                                     // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRightClicked;                                    // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPressed;                                         // 0x05D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x05E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBE[0x18];                                    // 0x0618(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetPressMethod(EButtonPressMethod InPressMethod);
	void SetSelectable(bool _enable);
	void SetSelected(bool _selected);
	void SetStyle(const struct FButtonStyle& InStyle);
	void SetTouchMethod(EButtonTouchMethod InTouchMethod);

	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RadioButton">();
	}
	static class URadioButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<URadioButton>();
	}
};
static_assert(alignof(URadioButton) == 0x000010, "Wrong alignment on URadioButton");
static_assert(sizeof(URadioButton) == 0x000630, "Wrong size on URadioButton");
static_assert(offsetof(URadioButton, Style) == 0x000198, "Member 'URadioButton::Style' has a wrong offset!");
static_assert(offsetof(URadioButton, WidgetStyle) == 0x0001A0, "Member 'URadioButton::WidgetStyle' has a wrong offset!");
static_assert(offsetof(URadioButton, ColorAndOpacity) == 0x000590, "Member 'URadioButton::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(URadioButton, BackgroundColor) == 0x0005A0, "Member 'URadioButton::BackgroundColor' has a wrong offset!");
static_assert(offsetof(URadioButton, ClickMethod) == 0x0005B0, "Member 'URadioButton::ClickMethod' has a wrong offset!");
static_assert(offsetof(URadioButton, TouchMethod) == 0x0005B1, "Member 'URadioButton::TouchMethod' has a wrong offset!");
static_assert(offsetof(URadioButton, PressMethod) == 0x0005B2, "Member 'URadioButton::PressMethod' has a wrong offset!");
static_assert(offsetof(URadioButton, IsFocusable) == 0x0005B3, "Member 'URadioButton::IsFocusable' has a wrong offset!");
static_assert(offsetof(URadioButton, OnClicked) == 0x0005B8, "Member 'URadioButton::OnClicked' has a wrong offset!");
static_assert(offsetof(URadioButton, OnRightClicked) == 0x0005C8, "Member 'URadioButton::OnRightClicked' has a wrong offset!");
static_assert(offsetof(URadioButton, OnPressed) == 0x0005D8, "Member 'URadioButton::OnPressed' has a wrong offset!");
static_assert(offsetof(URadioButton, OnReleased) == 0x0005E8, "Member 'URadioButton::OnReleased' has a wrong offset!");
static_assert(offsetof(URadioButton, OnHovered) == 0x0005F8, "Member 'URadioButton::OnHovered' has a wrong offset!");
static_assert(offsetof(URadioButton, OnUnhovered) == 0x000608, "Member 'URadioButton::OnUnhovered' has a wrong offset!");

// Class BPGLib.SplineShapedActor
// 0x0030 (0x02C8 - 0x0298)
class ASplineShapedActor : public AActor
{
public:
	class USceneComponent*                        _Root;                                             // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USplineComponent*                       _Spline;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USplineMeshComponent*>           _Meshes;                                           // 0x02A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UStaticMesh*                            _Mesh;                                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESplineMeshAxis                               _ForwardAxis;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionEnabled                             _CollisionType;                                    // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESplineMeshLength                             _LengthType;                                       // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BBF[0x1];                                     // 0x02C3(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _MeshLength;                                       // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineShapedActor">();
	}
	static class ASplineShapedActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineShapedActor>();
	}
};
static_assert(alignof(ASplineShapedActor) == 0x000008, "Wrong alignment on ASplineShapedActor");
static_assert(sizeof(ASplineShapedActor) == 0x0002C8, "Wrong size on ASplineShapedActor");
static_assert(offsetof(ASplineShapedActor, _Root) == 0x000298, "Member 'ASplineShapedActor::_Root' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _Spline) == 0x0002A0, "Member 'ASplineShapedActor::_Spline' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _Meshes) == 0x0002A8, "Member 'ASplineShapedActor::_Meshes' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _Mesh) == 0x0002B8, "Member 'ASplineShapedActor::_Mesh' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _ForwardAxis) == 0x0002C0, "Member 'ASplineShapedActor::_ForwardAxis' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _CollisionType) == 0x0002C1, "Member 'ASplineShapedActor::_CollisionType' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _LengthType) == 0x0002C2, "Member 'ASplineShapedActor::_LengthType' has a wrong offset!");
static_assert(offsetof(ASplineShapedActor, _MeshLength) == 0x0002C4, "Member 'ASplineShapedActor::_MeshLength' has a wrong offset!");

// Class BPGLib.TransformTrack
// 0x0030 (0x0058 - 0x0028)
class UTransformTrack final : public UObject
{
public:
	struct FTransformSequence                     _Sequence;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         _StartTimeOffset;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BC0[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransformTrack">();
	}
	static class UTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransformTrack>();
	}
};
static_assert(alignof(UTransformTrack) == 0x000008, "Wrong alignment on UTransformTrack");
static_assert(sizeof(UTransformTrack) == 0x000058, "Wrong size on UTransformTrack");
static_assert(offsetof(UTransformTrack, _Sequence) == 0x000028, "Member 'UTransformTrack::_Sequence' has a wrong offset!");
static_assert(offsetof(UTransformTrack, _StartTimeOffset) == 0x000050, "Member 'UTransformTrack::_StartTimeOffset' has a wrong offset!");

// Class BPGLib.TransformSource
// 0x0000 (0x0028 - 0x0028)
class UTransformSource : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransformSource">();
	}
	static class UTransformSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransformSource>();
	}
};
static_assert(alignof(UTransformSource) == 0x000008, "Wrong alignment on UTransformSource");
static_assert(sizeof(UTransformSource) == 0x000028, "Wrong size on UTransformSource");

// Class BPGLib.TransformSource_Copy
// 0x0068 (0x0090 - 0x0028)
class UTransformSource_Copy final : public UTransformSource
{
public:
	uint8                                         Pad_1BC1[0x68];                                    // 0x0028(0x0068)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransformSource_Copy">();
	}
	static class UTransformSource_Copy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransformSource_Copy>();
	}
};
static_assert(alignof(UTransformSource_Copy) == 0x000008, "Wrong alignment on UTransformSource_Copy");
static_assert(sizeof(UTransformSource_Copy) == 0x000090, "Wrong size on UTransformSource_Copy");

// Class BPGLib.UIHelper
// 0x0000 (0x0028 - 0x0028)
class UUIHelper final : public UBlueprintFunctionLibrary
{
public:
	static bool AddIndicator(const class UObject* _world_ctx, class AActor* _indicate_actor, EIndicatorType _type);
	static void AdjustGridLayout(class UGridPanel* _grid, int32 _cx, int32 _cy, const TArray<class UWidget*>& _children, EHorizontalAlignment _horz_align, EVerticalAlignment _vert_align, const struct FMargin& _margin);
	static struct FVector2D CalcTextSize(class UTextBlock* _widget, const class FText& _text);
	static void CloseAllModals(const class UObject* _world_ctx);
	static class FText DateTimeToString(const struct FDateTime& _date);
	static class UPopupBase* DoModal(const class UObject* _world_ctx, class UPopupBase* _dlg, TSubclassOf<class UPopupBase> _dlg_type, bool _open_even_if_same_class, bool _hide_registered_background_widgets);
	static class UPopupBase* DoModalEx(const class UObject* _world_ctx, class UPopupBase* _dlg, TSubclassOf<class UPopupBase> _dlg_type, bool _open_even_if_same_class, bool _hide_registered_background_widgets, const TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)>& _proc);
	static class UPreviewableWidget* FindUMGWidgetByID(class UObject* _world_ctx, class FName _id);
	static class UWidgetAnimation* FindWidgetAnimation(class UUserWidget* _widget, class FName _animation_name);
	static class UUserWidget* GetEntryWidgetFromItem(class UListView* _list_view, const class UObject* _item);
	static EInputMode GetInputMode(const class UObject* WorldContextObject);
	static struct FVector2D GetUMGViewportSize(const class UObject* _world_ctx);
	static bool IsAltKeyPressed(const struct FKeyEvent& _event, EKeyModifierSide _side);
	static bool IsAnyPopupOpened(const class UObject* _world_ctx);
	static bool IsControlKeyPressed(const struct FKeyEvent& _event, EKeyModifierSide _side);
	static bool IsKeyPressed(const struct FKeyEvent& _event, const struct FKey& _Key, bool _with_ctrl, bool _with_shift, bool _with_alt);
	static bool IsPopupOpened(const class UObject* _world_ctx, class FName _popup_id);
	static bool IsShiftKeyPressed(const struct FKeyEvent& _event, EKeyModifierSide _side);
	static void MessageBoxOK(const class UObject* _world_ctx, EUIOrder _ui_order, const class FText& _Title, const class FText& _message, const class FText& _override_ok_text, const TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)>& _on_clicked, TSubclassOf<class UMessageBox> _class_type);
	static void MessageBoxWithCustomButtons(const class UObject* _world_ctx, EUIOrder _ui_order, const class FText& _Title, const class FText& _message, const TArray<struct FMessageBoxButton>& _button_defs, const TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)>& _on_clicked, TSubclassOf<class UMessageBox> _class_type);
	static void MessageBoxYesNo(const class UObject* _world_ctx, EUIOrder _ui_order, const class FText& _Title, const class FText& _message, const class FText& _override_yes_text, const class FText& _override_no_text, const TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)>& _on_clicked, TSubclassOf<class UMessageBox> _class_type);
	static void PlayWidgetAnimation(class UUserWidget* _widget, class FName _animation_name, float _start_time, int32 _loop_count, float _play_rate, bool _restore_state);
	static void RegisterBackgroundWidget(const class UObject* _world_ctx, class UWidget* _widget);
	static void RemoveIndicator(const class UObject* _world_ctx, class AActor* _indicate_actor, EIndicatorType _type);
	static void SetInputMode(const class UObject* WorldContextObject, EInputMode _mode, class UWidget* Focus_widget);
	static void SetProgressFillBrush(class UProgressBar* _widget, const struct FSlateBrush& _brush);
	static void SetShow(class UWidget* _widget, bool _show, ESlateVisibility _show_visibility, ESlateVisibility _hide_visibility);
	static void SetTexture2DIfValid(class UImage* _widget, const TSoftObjectPtr<class UTexture2D>& _obj_ref, bool _adjust_size, const TSoftObjectPtr<class UTexture2D> _default_obj_ref);
	static void SetVisibilityIfNot(class UWidget* _widget, ESlateVisibility _visibility);
	static void SetWaiting(const class UObject* _world_ctx, EWaitingType _waiting_type);
	static void ShowTooltip(class UWidget* _widget);
	static struct FDateTime StringToDateTime(const class FString& _date_time_string);
	static void UnregisterBackgroundWidget(const class UObject* _world_ctx, class UWidget* _widget);
	static void UpdateIndicator(const class UObject* _world_ctx, class AActor* _indicate_actor, EIndicatorType _type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIHelper">();
	}
	static class UUIHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIHelper>();
	}
};
static_assert(alignof(UUIHelper) == 0x000008, "Wrong alignment on UUIHelper");
static_assert(sizeof(UUIHelper) == 0x000028, "Wrong size on UUIHelper");

// Class BPGLib.Util
// 0x0000 (0x0028 - 0x0028)
class UUtil final : public UBlueprintFunctionLibrary
{
public:
	static class AActor* ActivateCameraByTag(const class UObject* _world_ctx, class FName _Name, float _blending, EViewTargetBlendFunction _blend_func);
	static void AddImpulse(class UPrimitiveComponent* _comp, const struct FVector& _Pos, const struct FVector& _impulse);
	static struct FRotator AddRotator(const struct FRotator& _r1, const struct FRotator& _r2);
	static class FText AppendText(const class FText& _t1, const class FText& _t2, const class FText& _seperator);
	static void BuildTrajectorySpline(class USplineComponent* _Spline, const struct FSplineSetup& _settings);
	static int32 CalcCurrentWeek(const struct FDateTime& _start_date);
	static float CalcPlayRate(class UAnimSequenceBase* _anim, float _target_duration);
	static float CalcRotationalDeviation(float _yaw, float _pitch, float _base);
	static float CalcWorldDirectionToUIAngle(class APlayerController* _my_pc, class AActor* _target_actor, const struct FVector& _basis);
	static void CopyTextToClipboard(const class FString& _text);
	static float DecFloat(float& _time, float _delta);
	static float DecFloatClamp(float& _time, float _delta, float _min);
	static bool DeprojectScreenToWorld(const class UObject* _world_ctx, const struct FVector2D& _ss_pos, float _depth, struct FVector* _out_ws_pos, struct FVector* _out_ws_dir);
	static void ExitGame(const class UObject* WorldContextObject);
	static void ForceLoadAllMipmaps(class AActor* _Actor);
	static struct FBox GetActorBound(class AActor* _Actor);
	static float GetAngleBetweenDirections(const struct FVector& V1, const struct FVector& V2);
	static struct FBox GetBoxBound(class UPrimitiveComponent* _component);
	static class UBPGInputSubsystem* GetBPGInputSubsystem(const class UObject* _world_ctx);
	static class FName GetClassFName(class UClass* _Class);
	static EOptionLanguage GetDefaultLanguage();
	static class FText GetDisplayDateTime(const struct FDateTime& _date_time, const class FText& _time_format, const class FText& _years_format, const class FText& _months_format, const class FText& _days_format, const class FText& _hours_format, const class FText& _minutes_format, const class FText& _seconds_format);
	static class FText GetDisplayTimespan(const struct FTimespan& _time_span, const class FText& _time_format, const class FText& _days_format, const class FText& _hours_format, const class FText& _minutes_format, const class FText& _seconds_format, int32 _time_digits, bool _show_zero_value, int32 Max_time_units_to_show);
	static ENetRoles GetNetRole(class AActor* _Actor);
	static struct FDateTime GetNextDayZeroUTC();
	static int32 GetNicknameLength(const class FString& Str);
	static struct FMatrix GetProjectionMatrix(const class UObject* _world_ctx);
	static struct FVector GetRandomVector(const struct FVector& Start, const struct FVector& End, float Random_angle_range);
	static struct FTimespan GetRemainTimespan(const struct FDateTime& _target_date_time);
	static struct FWidgetTransform GetRotatedWidgetTransform(const struct FVector2D& _offset, float _angle_in_deg, const struct FVector2D& _aspect_scaler, float _local_rotation_offset);
	static struct FRotator GetRotatorFromTwoDirections(const struct FVector& _dir1, const struct FVector& _dir2);
	static struct FMatrix GetViewMatrix(const class UObject* _world_ctx);
	static struct FVector2D GetViewportSize(const class UObject* _world_ctx);
	static struct FMatrix GetViewProjectionMatrix(const class UObject* _world_ctx);
	static bool GetWidgetPositionAndSize(class UWidget* _widget, struct FVector2D* _out_pos, struct FVector2D* _out_size);
	static bool HasDisplay(const class UObject* _world_ctx);
	static float IncFloat(float& _time, float _delta);
	static float IncFloatClamp(float& _time, float _delta, float _max);
	static bool IsAI(const class APawn* _pawn);
	static bool IsAnyServer(const class UObject* _world_ctx);
	static bool IsClient(const class UObject* _world_ctx);
	static bool IsDediServer(const class UObject* _world_ctx);
	static bool IsDediServerAndNoPIE(const class UObject* _world_ctx);
	static bool IsGamepadAttached();
	static bool IsInPIE(const class UObject* _world_ctx);
	static bool IsListenServer(const class UObject* _world_ctx);
	static bool IsNetRole(class AActor* _Actor, ENetRoles _role);
	static bool IsOnlineSessionCreated(const class UObject* _world_ctx);
	static bool IsOnListenServer(const class UObject* _world_ctx);
	static bool IsStandalone(const class UObject* _world_ctx);
	static float OneMinus(float _val);
	static bool ProjectWorldToScreen(const class UObject* _world_ctx, const struct FVector& _ws_pos, struct FVector2D* _out_ss_pos);
	static float RemapAngle_180_To_360(float Angle);
	static float RemapAngle_360_To_180(float Angle);
	static struct FRotator RemapRotator_180_To_360(const struct FRotator& Rot);
	static struct FRotator RemapRotator_360_To_180(const struct FRotator& Rot);
	static void SafeSetWidgetVisibility(class UWidget* Widget, ESlateVisibility _visibility);
	static struct FTimespan SecondsToTimespan(int32 _secs);
	static class FString SecondsToTimespanString(int32 _secs);
	static bool SetActivateSubLevel(const class UObject* _world_ctx, class ULevelStreamingDynamic* _level, bool _is_active);
	static void SetRenderToCustomDepth(class USceneComponent* _component, bool _enable, EOutlineColor _color, bool _recursive, bool _using_scene_depth);
	static class AActor* SpawnActor(const class UObject* _world_ctx, class AActor* _owner, class UClass* _Class, const struct FTransform& _tx, class APawn* _instigator, bool _replication, ESpawnActorCollisionHandlingMethod _collision);
	static class UFXSystemComponent* SpawnVFXAtActor(const class UObject* _world_ctx, class UFXSystemAsset* _FX, class AActor* _Actor, const struct FVector& _ws_loc, const struct FRotator& _ws_rot);
	static class UFXSystemComponent* SpawnVFXAtLocation(const class UObject* _world_ctx, class UFXSystemAsset* _FX, const struct FTransform& _tx);
	static class UFXSystemComponent* SpawnVFXAttachBoneName(const class UObject* _world_ctx, class UFXSystemAsset* _FX, class USkeletalMeshComponent* _skelmesh_com, class FName AttachPointName, const struct FVector& _ws_loc, const struct FRotator& _ws_rot, const struct FVector& _scale);
	static bool StringToEnum(const class FString& _enum_type, const class FString& _value, uint8* _enum_value);
	static struct FRotator SubtractRotator(const struct FRotator& _r1, const struct FRotator& _r2);
	static class FString TrimClassPostfix(const class FString& _str);
	static struct FDateTime UTC_To_LocalTime(const struct FDateTime& _utc);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Util">();
	}
	static class UUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUtil>();
	}
};
static_assert(alignof(UUtil) == 0x000008, "Wrong alignment on UUtil");
static_assert(sizeof(UUtil) == 0x000028, "Wrong size on UUtil");

// Class BPGLib.NetReplyBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UNetReplyBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FNetReply Error(ENetError _level, const class FText& _msg);
	static struct FNetReply OK();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetReplyBlueprintLibrary">();
	}
	static class UNetReplyBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetReplyBlueprintLibrary>();
	}
};
static_assert(alignof(UNetReplyBlueprintLibrary) == 0x000008, "Wrong alignment on UNetReplyBlueprintLibrary");
static_assert(sizeof(UNetReplyBlueprintLibrary) == 0x000028, "Wrong size on UNetReplyBlueprintLibrary");

// Class BPGLib.WebHelper
// 0x0000 (0x0028 - 0x0028)
class UWebHelper final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebHelper">();
	}
	static class UWebHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebHelper>();
	}
};
static_assert(alignof(UWebHelper) == 0x000008, "Wrong alignment on UWebHelper");
static_assert(sizeof(UWebHelper) == 0x000028, "Wrong size on UWebHelper");

}

