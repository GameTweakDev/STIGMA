#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_ItemIcon

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_ItemIcon.Ctrl_ItemIcon_C
// 0x00A0 (0x0590 - 0x04F0)
class UCtrl_ItemIcon_C final : public UPreviewableWidget
{
public:
	class UScaleBox*                              IconScaler;                                        // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_Frame;                                         // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Icon;                                          // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_None;                                          // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SZ_Main;                                           // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FItemID                                ItemID;                                            // 0x0518(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateColor                            BorderColor;                                       // 0x0528(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FSlateColor                            IconColor;                                         // 0x053C(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsLocked;                                          // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowBorder;                                        // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FixedSize;                                         // 0x0552(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3A14[0x5];                                     // 0x0553(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              Size;                                              // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   DisplayName;                                       // 0x0568(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDateTime                              Expiry;                                            // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Simple_Icon;                                   // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	class FText OnGetTooltip_nouse();
	bool OnSynchronizeProperties();
	void SetItemID(const struct FItemID& _item_id, const struct FDateTime& _expiry, bool _use_simple_icon);
	void Update();
	void UpdateBorder();
	void UpdateIcon();
	void UpdateSize();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_ItemIcon_C">();
	}
	static class UCtrl_ItemIcon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_ItemIcon_C>();
	}
};
static_assert(alignof(UCtrl_ItemIcon_C) == 0x000008, "Wrong alignment on UCtrl_ItemIcon_C");
static_assert(sizeof(UCtrl_ItemIcon_C) == 0x000590, "Wrong size on UCtrl_ItemIcon_C");
static_assert(offsetof(UCtrl_ItemIcon_C, IconScaler) == 0x0004F0, "Member 'UCtrl_ItemIcon_C::IconScaler' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, IMG_Frame) == 0x0004F8, "Member 'UCtrl_ItemIcon_C::IMG_Frame' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, Img_Icon) == 0x000500, "Member 'UCtrl_ItemIcon_C::Img_Icon' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, IMG_None) == 0x000508, "Member 'UCtrl_ItemIcon_C::IMG_None' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, SZ_Main) == 0x000510, "Member 'UCtrl_ItemIcon_C::SZ_Main' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, ItemID) == 0x000518, "Member 'UCtrl_ItemIcon_C::ItemID' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, BorderColor) == 0x000528, "Member 'UCtrl_ItemIcon_C::BorderColor' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, IconColor) == 0x00053C, "Member 'UCtrl_ItemIcon_C::IconColor' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, IsLocked) == 0x000550, "Member 'UCtrl_ItemIcon_C::IsLocked' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, ShowBorder) == 0x000551, "Member 'UCtrl_ItemIcon_C::ShowBorder' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, FixedSize) == 0x000552, "Member 'UCtrl_ItemIcon_C::FixedSize' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, Size) == 0x000558, "Member 'UCtrl_ItemIcon_C::Size' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, DisplayName) == 0x000568, "Member 'UCtrl_ItemIcon_C::DisplayName' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, Expiry) == 0x000580, "Member 'UCtrl_ItemIcon_C::Expiry' has a wrong offset!");
static_assert(offsetof(UCtrl_ItemIcon_C, Use_Simple_Icon) == 0x000588, "Member 'UCtrl_ItemIcon_C::Use_Simple_Icon' has a wrong offset!");

}

