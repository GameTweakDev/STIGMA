#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: ActionGraph

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BPGLib_structs.hpp"


namespace SDK
{

// Enum ActionGraph.EActionGraphBlackboardOp
// NumValues: 0x0003
enum class EActionGraphBlackboardOp : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	EActionGraphBlackboardOp_MAX             = 2,
};

// Enum ActionGraph.EActionGraphTiming
// NumValues: 0x0003
enum class EActionGraphTiming : uint8
{
	OnStart                                  = 0,
	OnFinish                                 = 1,
	EActionGraphTiming_MAX                   = 2,
};

// Enum ActionGraph.EInputDirectionSpace
// NumValues: 0x0003
enum class EInputDirectionSpace : uint8
{
	LocalSpace                               = 0,
	WorldSpace                               = 1,
	EInputDirectionSpace_MAX                 = 2,
};

// Enum ActionGraph.EDirections
// NumValues: 0x000A
enum class EDirections : uint8
{
	None                                     = 0,
	Forward                                  = 1,
	Backward                                 = 2,
	Left                                     = 3,
	Right                                    = 4,
	Forward_Left                             = 5,
	Forward_Right                            = 6,
	Backward_Left                            = 7,
	Backward_Right                           = 8,
	EDirections_MAX                          = 9,
};

// Enum ActionGraph.ESliceType
// NumValues: 0x0004
enum class ESliceType : uint8
{
	None                                     = 0,
	Four                                     = 1,
	Eight                                    = 2,
	ESliceType_MAX                           = 3,
};

// Enum ActionGraph.EActionPriority
// NumValues: 0x0009
enum class EActionPriority : uint8
{
	UpperOnly                                = 0,
	UpperOnly_Higher                         = 1,
	FullBody_Active                          = 2,
	DuoAction_Active                         = 3,
	FullBody_Passive_Standing                = 4,
	FullBody_Passive                         = 5,
	DuoAction_Passive                        = 6,
	Unavodiable                              = 7,
	EActionPriority_MAX                      = 8,
};

// Enum ActionGraph.EActionRequest
// NumValues: 0x0006
enum class EActionRequest : uint8
{
	Simple                                   = 0,
	InputDirection                           = 1,
	InputDirection_World                     = 2,
	PointingLocation                         = 3,
	FullRequest                              = 4,
	EActionRequest_MAX                       = 5,
};

// Enum ActionGraph.EStockType
// NumValues: 0x0004
enum class EStockType : uint8
{
	Recoverable                              = 0,
	NoLimit                                  = 1,
	Consumable                               = 2,
	EStockType_MAX                           = 3,
};

// Enum ActionGraph.EActionInputType
// NumValues: 0x0003
enum class EActionInputType : uint8
{
	Pressed                                  = 0,
	Released                                 = 1,
	EActionInputType_MAX                     = 2,
};

// Enum ActionGraph.EActionUsage
// NumValues: 0x0009
enum class EActionUsage : uint8
{
	Offensive_Melee                          = 0,
	Offensive_LongRange                      = 1,
	Defensive_Melee                          = 2,
	Defensive_Bullet                         = 3,
	CounterAttack                            = 4,
	ChangeMode                               = 5,
	FastMove                                 = 6,
	Sprint                                   = 7,
	EActionUsage_MAX                         = 8,
};

// Enum ActionGraph.EAIActionUsageDirection
// NumValues: 0x0004
enum class EAIActionUsageDirection : uint8
{
	FrontOnly                                = 0,
	Directional                              = 1,
	Directional_ExceptFront                  = 2,
	EAIActionUsageDirection_MAX              = 3,
};

// Enum ActionGraph.EActionGraphTaskResult
// NumValues: 0x0005
enum class EActionGraphTaskResult : uint8
{
	OK                                       = 0,
	Finish                                   = 1,
	Transit                                  = 2,
	Failed                                   = 3,
	EActionGraphTaskResult_MAX               = 4,
};

// Enum ActionGraph.ETransformType
// NumValues: 0x0005
enum class ETransformType : uint8
{
	NA                                       = 0,
	AdjustByMate                             = 1,
	AttackDirectional                        = 2,
	LookAtMate                               = 3,
	ETransformType_MAX                       = 4,
};

// ScriptStruct ActionGraph.ActionGraphStartReq
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FActionGraphStartReq final
{
public:
	uint8                                         Pad_1C3C[0x38];                                    // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphStartReq) == 0x000008, "Wrong alignment on FActionGraphStartReq");
static_assert(sizeof(FActionGraphStartReq) == 0x000038, "Wrong size on FActionGraphStartReq");

// ScriptStruct ActionGraph.ActionGraphOperatorID
// 0x0006 (0x0006 - 0x0000)
struct alignas(0x02) FActionGraphOperatorID final
{
public:
	uint8                                         Pad_1C3D[0x6];                                     // 0x0000(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphOperatorID) == 0x000002, "Wrong alignment on FActionGraphOperatorID");
static_assert(sizeof(FActionGraphOperatorID) == 0x000006, "Wrong size on FActionGraphOperatorID");

// ScriptStruct ActionGraph.ActionStock
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FActionStock final
{
public:
	EStockType                                    StockType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C3E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _Cooltime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _MaxStock;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _ActivationDelay;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _IsDelayTime;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C3F[0x3F];                                    // 0x0011(0x003F)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionStock) == 0x000008, "Wrong alignment on FActionStock");
static_assert(sizeof(FActionStock) == 0x000050, "Wrong size on FActionStock");
static_assert(offsetof(FActionStock, StockType) == 0x000000, "Member 'FActionStock::StockType' has a wrong offset!");
static_assert(offsetof(FActionStock, _Cooltime) == 0x000004, "Member 'FActionStock::_Cooltime' has a wrong offset!");
static_assert(offsetof(FActionStock, _MaxStock) == 0x000008, "Member 'FActionStock::_MaxStock' has a wrong offset!");
static_assert(offsetof(FActionStock, _ActivationDelay) == 0x00000C, "Member 'FActionStock::_ActivationDelay' has a wrong offset!");
static_assert(offsetof(FActionStock, _IsDelayTime) == 0x000010, "Member 'FActionStock::_IsDelayTime' has a wrong offset!");

// ScriptStruct ActionGraph.ActionGraphParam
// 0x0028 (0x0028 - 0x0000)
struct FActionGraphParam final
{
public:
	uint8                                         Pad_1C40[0x20];                                    // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-69 ])
	class AActionGraphCharacter*                  Mate;                                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGraphParam) == 0x000008, "Wrong alignment on FActionGraphParam");
static_assert(sizeof(FActionGraphParam) == 0x000028, "Wrong size on FActionGraphParam");
static_assert(offsetof(FActionGraphParam, Mate) == 0x000020, "Member 'FActionGraphParam::Mate' has a wrong offset!");

// ScriptStruct ActionGraph.ActionGraphStartReq_Fail_Ack
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FActionGraphStartReq_Fail_Ack final
{
public:
	uint8                                         Pad_1C41[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphStartReq_Fail_Ack) == 0x000004, "Wrong alignment on FActionGraphStartReq_Fail_Ack");
static_assert(sizeof(FActionGraphStartReq_Fail_Ack) == 0x000008, "Wrong size on FActionGraphStartReq_Fail_Ack");

// ScriptStruct ActionGraph.ActionGraphEndReq
// 0x0001 (0x0001 - 0x0000)
struct FActionGraphEndReq final
{
public:
	uint8                                         Pad_1C42[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphEndReq) == 0x000001, "Wrong alignment on FActionGraphEndReq");
static_assert(sizeof(FActionGraphEndReq) == 0x000001, "Wrong size on FActionGraphEndReq");

// ScriptStruct ActionGraph.ActionGraphActivateReq
// 0x0002 (0x0002 - 0x0000)
struct FActionGraphActivateReq final
{
public:
	uint8                                         Pad_1C43[0x2];                                     // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphActivateReq) == 0x000001, "Wrong alignment on FActionGraphActivateReq");
static_assert(sizeof(FActionGraphActivateReq) == 0x000002, "Wrong size on FActionGraphActivateReq");

// ScriptStruct ActionGraph.ActionGraphInput_Req
// 0x0002 (0x0002 - 0x0000)
struct FActionGraphInput_Req final
{
public:
	uint8                                         Pad_1C44[0x2];                                     // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphInput_Req) == 0x000001, "Wrong alignment on FActionGraphInput_Req");
static_assert(sizeof(FActionGraphInput_Req) == 0x000002, "Wrong size on FActionGraphInput_Req");

// ScriptStruct ActionGraph.ActionGraphTransform
// 0x0020 (0x0020 - 0x0000)
struct FActionGraphTransform final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C45[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphTransform) == 0x000008, "Wrong alignment on FActionGraphTransform");
static_assert(sizeof(FActionGraphTransform) == 0x000020, "Wrong size on FActionGraphTransform");
static_assert(offsetof(FActionGraphTransform, Pos) == 0x000000, "Member 'FActionGraphTransform::Pos' has a wrong offset!");
static_assert(offsetof(FActionGraphTransform, Yaw) == 0x000018, "Member 'FActionGraphTransform::Yaw' has a wrong offset!");

// ScriptStruct ActionGraph.ActionGraphFlow_Multicast
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FActionGraphFlow_Multicast final
{
public:
	uint8                                         Pad_1C46[0x90];                                    // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphFlow_Multicast) == 0x000008, "Wrong alignment on FActionGraphFlow_Multicast");
static_assert(sizeof(FActionGraphFlow_Multicast) == 0x000090, "Wrong size on FActionGraphFlow_Multicast");

// ScriptStruct ActionGraph.ActionGraphTransitData
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FActionGraphTransitData final
{
public:
	uint8                                         Pad_1C47[0x48];                                    // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FActionGraphTransitData) == 0x000008, "Wrong alignment on FActionGraphTransitData");
static_assert(sizeof(FActionGraphTransitData) == 0x000048, "Wrong size on FActionGraphTransitData");

// ScriptStruct ActionGraph.LogPack_ActionGraphParam
// 0x0030 (0x0030 - 0x0000)
struct FLogPack_ActionGraphParam final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mate;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C48[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLogPack_ActionGraphParam) == 0x000008, "Wrong alignment on FLogPack_ActionGraphParam");
static_assert(sizeof(FLogPack_ActionGraphParam) == 0x000030, "Wrong size on FLogPack_ActionGraphParam");
static_assert(offsetof(FLogPack_ActionGraphParam, Vector) == 0x000000, "Member 'FLogPack_ActionGraphParam::Vector' has a wrong offset!");
static_assert(offsetof(FLogPack_ActionGraphParam, Mate) == 0x000018, "Member 'FLogPack_ActionGraphParam::Mate' has a wrong offset!");
static_assert(offsetof(FLogPack_ActionGraphParam, PlayRate) == 0x000028, "Member 'FLogPack_ActionGraphParam::PlayRate' has a wrong offset!");

// ScriptStruct ActionGraph.LogPack_ActionGraphFlow
// 0x0098 (0x0098 - 0x0000)
struct alignas(0x08) FLogPack_ActionGraphFlow final
{
public:
	uint8                                         Pad_1C49[0x98];                                    // 0x0000(0x0098)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLogPack_ActionGraphFlow) == 0x000008, "Wrong alignment on FLogPack_ActionGraphFlow");
static_assert(sizeof(FLogPack_ActionGraphFlow) == 0x000098, "Wrong size on FLogPack_ActionGraphFlow");

// ScriptStruct ActionGraph.AGLog_Base
// 0x0000 (0x0020 - 0x0020)
struct FAGLog_Base : public FLogPack
{
};
static_assert(alignof(FAGLog_Base) == 0x000008, "Wrong alignment on FAGLog_Base");
static_assert(sizeof(FAGLog_Base) == 0x000020, "Wrong size on FAGLog_Base");

// ScriptStruct ActionGraph.AGLog_StartRequest
// 0x0038 (0x0058 - 0x0020)
struct FAGLog_StartRequest final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C4A[0x38];                                    // 0x0020(0x0038)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_StartRequest) == 0x000008, "Wrong alignment on FAGLog_StartRequest");
static_assert(sizeof(FAGLog_StartRequest) == 0x000058, "Wrong size on FAGLog_StartRequest");

// ScriptStruct ActionGraph.AGLog_ActionKey
// 0x0008 (0x0028 - 0x0020)
struct FAGLog_ActionKey final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C4B[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_ActionKey) == 0x000008, "Wrong alignment on FAGLog_ActionKey");
static_assert(sizeof(FAGLog_ActionKey) == 0x000028, "Wrong size on FAGLog_ActionKey");

// ScriptStruct ActionGraph.AGLog_StartActionGraph
// 0x0080 (0x00A0 - 0x0020)
struct FAGLog_StartActionGraph final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C4C[0x80];                                    // 0x0020(0x0080)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_StartActionGraph) == 0x000008, "Wrong alignment on FAGLog_StartActionGraph");
static_assert(sizeof(FAGLog_StartActionGraph) == 0x0000A0, "Wrong size on FAGLog_StartActionGraph");

// ScriptStruct ActionGraph.AGLog_StartPassiveAction
// 0x0018 (0x0038 - 0x0020)
struct FAGLog_StartPassiveAction final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C4D[0x18];                                    // 0x0020(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_StartPassiveAction) == 0x000008, "Wrong alignment on FAGLog_StartPassiveAction");
static_assert(sizeof(FAGLog_StartPassiveAction) == 0x000038, "Wrong size on FAGLog_StartPassiveAction");

// ScriptStruct ActionGraph.AGLog_ChangeNode
// 0x0028 (0x0048 - 0x0020)
struct FAGLog_ChangeNode final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C4E[0x28];                                    // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_ChangeNode) == 0x000008, "Wrong alignment on FAGLog_ChangeNode");
static_assert(sizeof(FAGLog_ChangeNode) == 0x000048, "Wrong size on FAGLog_ChangeNode");

// ScriptStruct ActionGraph.AGLog_JumpNode
// 0x0028 (0x0048 - 0x0020)
struct FAGLog_JumpNode final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C4F[0x28];                                    // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_JumpNode) == 0x000008, "Wrong alignment on FAGLog_JumpNode");
static_assert(sizeof(FAGLog_JumpNode) == 0x000048, "Wrong size on FAGLog_JumpNode");

// ScriptStruct ActionGraph.AGLog_Event
// 0x0018 (0x0038 - 0x0020)
struct FAGLog_Event : public FAGLog_Base
{
public:
	uint8                                         Pad_1C50[0x8];                                     // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Error;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGLog_Event) == 0x000008, "Wrong alignment on FAGLog_Event");
static_assert(sizeof(FAGLog_Event) == 0x000038, "Wrong size on FAGLog_Event");
static_assert(offsetof(FAGLog_Event, Error) == 0x000028, "Member 'FAGLog_Event::Error' has a wrong offset!");

// ScriptStruct ActionGraph.AGLog_ActionGraphEvent
// 0x0028 (0x0060 - 0x0038)
struct FAGLog_ActionGraphEvent final : public FAGLog_Event
{
public:
	uint8                                         Pad_1C51[0x28];                                    // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_ActionGraphEvent) == 0x000008, "Wrong alignment on FAGLog_ActionGraphEvent");
static_assert(sizeof(FAGLog_ActionGraphEvent) == 0x000060, "Wrong size on FAGLog_ActionGraphEvent");

// ScriptStruct ActionGraph.AGLog_FlowMulticast
// 0x00A0 (0x00C0 - 0x0020)
struct FAGLog_FlowMulticast final : public FAGLog_Base
{
public:
	bool                                          Send;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C52[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLogPack_ActionGraphFlow               Flow;                                              // 0x0028(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGLog_FlowMulticast) == 0x000008, "Wrong alignment on FAGLog_FlowMulticast");
static_assert(sizeof(FAGLog_FlowMulticast) == 0x0000C0, "Wrong size on FAGLog_FlowMulticast");
static_assert(offsetof(FAGLog_FlowMulticast, Send) == 0x000020, "Member 'FAGLog_FlowMulticast::Send' has a wrong offset!");
static_assert(offsetof(FAGLog_FlowMulticast, Flow) == 0x000028, "Member 'FAGLog_FlowMulticast::Flow' has a wrong offset!");

// ScriptStruct ActionGraph.AGLog_SignalOperator
// 0x0010 (0x0030 - 0x0020)
struct FAGLog_SignalOperator final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C53[0x10];                                    // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_SignalOperator) == 0x000008, "Wrong alignment on FAGLog_SignalOperator");
static_assert(sizeof(FAGLog_SignalOperator) == 0x000030, "Wrong size on FAGLog_SignalOperator");

// ScriptStruct ActionGraph.AGLog_ComponentTick
// 0x0018 (0x0038 - 0x0020)
struct FAGLog_ComponentTick final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C54[0x18];                                    // 0x0020(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_ComponentTick) == 0x000008, "Wrong alignment on FAGLog_ComponentTick");
static_assert(sizeof(FAGLog_ComponentTick) == 0x000038, "Wrong size on FAGLog_ComponentTick");

// ScriptStruct ActionGraph.AGLog_ChangeMate
// 0x0040 (0x0060 - 0x0020)
struct FAGLog_ChangeMate final : public FAGLog_Base
{
public:
	uint8                                         Pad_1C55[0x40];                                    // 0x0020(0x0040)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_ChangeMate) == 0x000008, "Wrong alignment on FAGLog_ChangeMate");
static_assert(sizeof(FAGLog_ChangeMate) == 0x000060, "Wrong size on FAGLog_ChangeMate");

// ScriptStruct ActionGraph.MontageSlot
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMontageSlot final
{
public:
	class FName                                   _SlotName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C56[0x10];                                    // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMontageSlot) == 0x000008, "Wrong alignment on FMontageSlot");
static_assert(sizeof(FMontageSlot) == 0x000018, "Wrong size on FMontageSlot");
static_assert(offsetof(FMontageSlot, _SlotName) == 0x000000, "Member 'FMontageSlot::_SlotName' has a wrong offset!");

// ScriptStruct ActionGraph.ActionGraphOperatorList
// 0x0030 (0x0030 - 0x0000)
struct FActionGraphOperatorList final
{
public:
	uint8                                         Pad_1C57[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UActionGraphOperator*>           _Decorators;                                       // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UActionGraphOperator*>           _ActivatedDecorators;                              // 0x0020(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FActionGraphOperatorList) == 0x000008, "Wrong alignment on FActionGraphOperatorList");
static_assert(sizeof(FActionGraphOperatorList) == 0x000030, "Wrong size on FActionGraphOperatorList");
static_assert(offsetof(FActionGraphOperatorList, _Decorators) == 0x000010, "Member 'FActionGraphOperatorList::_Decorators' has a wrong offset!");
static_assert(offsetof(FActionGraphOperatorList, _ActivatedDecorators) == 0x000020, "Member 'FActionGraphOperatorList::_ActivatedDecorators' has a wrong offset!");

// ScriptStruct ActionGraph.ActionGraphTransitionList
// 0x0030 (0x0030 - 0x0000)
struct FActionGraphTransitionList final
{
public:
	uint8                                         Pad_1C58[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UActionGraphTransition*>         _Decorators;                                       // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UActionGraphTransition*>         _ActivatedDecorators;                              // 0x0020(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FActionGraphTransitionList) == 0x000008, "Wrong alignment on FActionGraphTransitionList");
static_assert(sizeof(FActionGraphTransitionList) == 0x000030, "Wrong size on FActionGraphTransitionList");
static_assert(offsetof(FActionGraphTransitionList, _Decorators) == 0x000010, "Member 'FActionGraphTransitionList::_Decorators' has a wrong offset!");
static_assert(offsetof(FActionGraphTransitionList, _ActivatedDecorators) == 0x000020, "Member 'FActionGraphTransitionList::_ActivatedDecorators' has a wrong offset!");

}

