#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: AIDeco_AbnormalCheck

#include "Basic.hpp"

#include "AIDeco_AbnormalCheck_classes.hpp"
#include "AIDeco_AbnormalCheck_parameters.hpp"


namespace SDK
{

// Function AIDeco_AbnormalCheck.AIDeco_AbnormalCheck_C.IsAbonromalChara
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharaBase*                       Chara                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_abnormal                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIDeco_AbnormalCheck_C::IsAbonromalChara(class ACharaBase* Chara, bool* Is_abnormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIDeco_AbnormalCheck_C", "IsAbonromalChara");

	Params::AIDeco_AbnormalCheck_C_IsAbonromalChara Parms{};

	Parms.Chara = Chara;

	UObject::ProcessEvent(Func, &Parms);

	if (Is_abnormal != nullptr)
		*Is_abnormal = Parms.Is_abnormal;
}


// Function AIDeco_AbnormalCheck.AIDeco_AbnormalCheck_C.PerformConditionCheck
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AActor*                           OwnerActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UAIDeco_AbnormalCheck_C::PerformConditionCheck(class AActor* OwnerActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIDeco_AbnormalCheck_C", "PerformConditionCheck");

	Params::AIDeco_AbnormalCheck_C_PerformConditionCheck Parms{};

	Parms.OwnerActor = OwnerActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

