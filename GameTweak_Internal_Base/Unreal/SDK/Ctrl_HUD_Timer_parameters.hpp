#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_HUD_Timer

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Ctrl_HUD_Timer.Ctrl_HUD_Timer_C.ExecuteUbergraph_Ctrl_HUD_Timer
// 0x0014 (0x0014 - 0x0000)
struct Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName& _event_name, struct FCastedEvent& _event)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer) == 0x000004, "Wrong alignment on Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer");
static_assert(sizeof(Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer) == 0x000014, "Wrong size on Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer");
static_assert(offsetof(Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer, EntryPoint) == 0x000000, "Member 'Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Ctrl_HUD_Timer_C_ExecuteUbergraph_Ctrl_HUD_Timer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function Ctrl_HUD_Timer.Ctrl_HUD_Timer_C.Get_TXT_Time_Text
// 0x0138 (0x0138 - 0x0000)
struct Ctrl_HUD_Timer_C_Get_TXT_Time_Text final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABattleGameStateBase*                   K2Node_DynamicCast_AsBattle_Game_State_Base;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38CF[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_GetRemainTime__out_min;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRemainTime__out_sec;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D0[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0038(0x0018)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D1[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x00A8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0120(0x0018)()
};
static_assert(alignof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text) == 0x000008, "Wrong alignment on Ctrl_HUD_Timer_C_Get_TXT_Time_Text");
static_assert(sizeof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text) == 0x000138, "Wrong size on Ctrl_HUD_Timer_C_Get_TXT_Time_Text");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, ReturnValue) == 0x000000, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, K2Node_DynamicCast_AsBattle_Game_State_Base) == 0x000020, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::K2Node_DynamicCast_AsBattle_Game_State_Base' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, CallFunc_GetRemainTime__out_min) == 0x00002C, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::CallFunc_GetRemainTime__out_min' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, CallFunc_GetRemainTime__out_sec) == 0x000030, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::CallFunc_GetRemainTime__out_sec' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, CallFunc_Conv_IntToText_ReturnValue) == 0x000038, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, K2Node_SwitchEnum_CmpSuccess) == 0x000050, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, CallFunc_Conv_IntToText_ReturnValue_1) == 0x0000A8, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C0, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, K2Node_MakeArray_Array) == 0x000110, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_Get_TXT_Time_Text, CallFunc_Format_ReturnValue) == 0x000120, "Member 'Ctrl_HUD_Timer_C_Get_TXT_Time_Text::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function Ctrl_HUD_Timer.Ctrl_HUD_Timer_C.OnChangedPhase_GTA
// 0x0068 (0x0068 - 0x0000)
struct Ctrl_HUD_Timer_C_OnChangedPhase_GTA final
{
public:
	class ABattleGameStateBase*                   GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABountyTDM_GameState*                   K2Node_DynamicCast_AsBounty_TDM_Game_State;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D2[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBountyPhaseDefine                     CallFunc_GetCurrentBountyPhaseDefine_ReturnValue;  // 0x0018(0x0050)(ConstParm)
};
static_assert(alignof(Ctrl_HUD_Timer_C_OnChangedPhase_GTA) == 0x000008, "Wrong alignment on Ctrl_HUD_Timer_C_OnChangedPhase_GTA");
static_assert(sizeof(Ctrl_HUD_Timer_C_OnChangedPhase_GTA) == 0x000068, "Wrong size on Ctrl_HUD_Timer_C_OnChangedPhase_GTA");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_GTA, GameState) == 0x000000, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_GTA::GameState' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_GTA, K2Node_DynamicCast_AsBounty_TDM_Game_State) == 0x000008, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_GTA::K2Node_DynamicCast_AsBounty_TDM_Game_State' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_GTA, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_GTA::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_GTA, CallFunc_GetCurrentBountyPhaseDefine_ReturnValue) == 0x000018, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_GTA::CallFunc_GetCurrentBountyPhaseDefine_ReturnValue' has a wrong offset!");

// Function Ctrl_HUD_Timer.Ctrl_HUD_Timer_C.OnChangedPhase_TDM
// 0x0058 (0x0058 - 0x0000)
struct Ctrl_HUD_Timer_C_OnChangedPhase_TDM final
{
public:
	class ABattleGameStateBase*                   GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ATDM_GameState*                         K2Node_DynamicCast_AsTDM_Game_State;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D3[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTDMPhaseDefine                        CallFunc_GetCurrentTDMPhaseDefine_ReturnValue;     // 0x0018(0x0040)(ConstParm)
};
static_assert(alignof(Ctrl_HUD_Timer_C_OnChangedPhase_TDM) == 0x000008, "Wrong alignment on Ctrl_HUD_Timer_C_OnChangedPhase_TDM");
static_assert(sizeof(Ctrl_HUD_Timer_C_OnChangedPhase_TDM) == 0x000058, "Wrong size on Ctrl_HUD_Timer_C_OnChangedPhase_TDM");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_TDM, GameState) == 0x000000, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_TDM::GameState' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_TDM, K2Node_DynamicCast_AsTDM_Game_State) == 0x000008, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_TDM::K2Node_DynamicCast_AsTDM_Game_State' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_TDM, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_TDM::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedPhase_TDM, CallFunc_GetCurrentTDMPhaseDefine_ReturnValue) == 0x000018, "Member 'Ctrl_HUD_Timer_C_OnChangedPhase_TDM::CallFunc_GetCurrentTDMPhaseDefine_ReturnValue' has a wrong offset!");

// Function Ctrl_HUD_Timer.Ctrl_HUD_Timer_C.OnChangedRoundPhase
// 0x0070 (0x0070 - 0x0000)
struct Ctrl_HUD_Timer_C_OnChangedRoundPhase final
{
public:
	class FName                                   _event_name;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCastedEvent                           _event;                                            // 0x0008(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	EEventCasterResponse                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D4[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class ABattleGameStateBase*                   GameState;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseIndex;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D5[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class ABattleGameStateBase*                   K2Node_DynamicCast_AsBattle_Game_State_Base;       // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_HUD_Timer_C_OnChangedRoundPhase) == 0x000008, "Wrong alignment on Ctrl_HUD_Timer_C_OnChangedRoundPhase");
static_assert(sizeof(Ctrl_HUD_Timer_C_OnChangedRoundPhase) == 0x000070, "Wrong size on Ctrl_HUD_Timer_C_OnChangedRoundPhase");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, _event_name) == 0x000000, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::_event_name' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, _event) == 0x000008, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::_event' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, ReturnValue) == 0x000048, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, GameState) == 0x000050, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::GameState' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, PhaseIndex) == 0x000058, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::PhaseIndex' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, K2Node_DynamicCast_AsBattle_Game_State_Base) == 0x000060, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::K2Node_DynamicCast_AsBattle_Game_State_Base' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ctrl_HUD_Timer_C_OnChangedRoundPhase, K2Node_SwitchEnum_CmpSuccess) == 0x000069, "Member 'Ctrl_HUD_Timer_C_OnChangedRoundPhase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

