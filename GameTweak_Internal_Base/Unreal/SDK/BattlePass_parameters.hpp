#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: BattlePass

#include "Basic.hpp"

#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function BattlePass.BattlePass_C.ExecuteUbergraph_BattlePass
// 0x0040 (0x0040 - 0x0000)
struct BattlePass_C_ExecuteUbergraph_BattlePass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E5A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UPreviewableWidget*                     K2Node_Event__target_widget;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidItemID_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E5B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UPage_BattlePass_C*                     K2Node_DynamicCast_AsPage_Battle_Pass;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E5C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_BattlePass                     CallFunc_GetPassID_pass_id;                        // 0x0028(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidItemID_ReturnValue_1;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePass_C_ExecuteUbergraph_BattlePass) == 0x000008, "Wrong alignment on BattlePass_C_ExecuteUbergraph_BattlePass");
static_assert(sizeof(BattlePass_C_ExecuteUbergraph_BattlePass) == 0x000040, "Wrong size on BattlePass_C_ExecuteUbergraph_BattlePass");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, EntryPoint) == 0x000000, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::EntryPoint' has a wrong offset!");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, K2Node_Event__target_widget) == 0x000008, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::K2Node_Event__target_widget' has a wrong offset!");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, CallFunc_IsValidItemID_ReturnValue) == 0x000010, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::CallFunc_IsValidItemID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, K2Node_DynamicCast_AsPage_Battle_Pass) == 0x000018, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::K2Node_DynamicCast_AsPage_Battle_Pass' has a wrong offset!");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, CallFunc_GetPassID_pass_id) == 0x000028, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::CallFunc_GetPassID_pass_id' has a wrong offset!");
static_assert(offsetof(BattlePass_C_ExecuteUbergraph_BattlePass, CallFunc_IsValidItemID_ReturnValue_1) == 0x000038, "Member 'BattlePass_C_ExecuteUbergraph_BattlePass::CallFunc_IsValidItemID_ReturnValue_1' has a wrong offset!");

// Function BattlePass.BattlePass_C.GetPassID
// 0x0048 (0x0048 - 0x0000)
struct BattlePass_C_GetPassID final
{
public:
	struct FItemID_BattlePass                     Pass_id;                                           // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E5D[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FItemID                                CallFunc_MakeItemID_ReturnValue;                   // 0x0028(0x0010)(HasGetValueTypeHash)
	struct FItemID_BattlePass                     CallFunc_ToBattlePassID_ReturnValue;               // 0x0038(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(BattlePass_C_GetPassID) == 0x000008, "Wrong alignment on BattlePass_C_GetPassID");
static_assert(sizeof(BattlePass_C_GetPassID) == 0x000048, "Wrong size on BattlePass_C_GetPassID");
static_assert(offsetof(BattlePass_C_GetPassID, Pass_id) == 0x000000, "Member 'BattlePass_C_GetPassID::Pass_id' has a wrong offset!");
static_assert(offsetof(BattlePass_C_GetPassID, CallFunc_Array_Get_Item) == 0x000010, "Member 'BattlePass_C_GetPassID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattlePass_C_GetPassID, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'BattlePass_C_GetPassID::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePass_C_GetPassID, CallFunc_Conv_StringToInt_ReturnValue) == 0x000024, "Member 'BattlePass_C_GetPassID::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePass_C_GetPassID, CallFunc_MakeItemID_ReturnValue) == 0x000028, "Member 'BattlePass_C_GetPassID::CallFunc_MakeItemID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePass_C_GetPassID, CallFunc_ToBattlePassID_ReturnValue) == 0x000038, "Member 'BattlePass_C_GetPassID::CallFunc_ToBattlePassID_ReturnValue' has a wrong offset!");

// Function BattlePass.BattlePass_C.PlayDetailer
// 0x0008 (0x0008 - 0x0000)
struct BattlePass_C_PlayDetailer final
{
public:
	class UPreviewableWidget*                     _target_widget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePass_C_PlayDetailer) == 0x000008, "Wrong alignment on BattlePass_C_PlayDetailer");
static_assert(sizeof(BattlePass_C_PlayDetailer) == 0x000008, "Wrong size on BattlePass_C_PlayDetailer");
static_assert(offsetof(BattlePass_C_PlayDetailer, _target_widget) == 0x000000, "Member 'BattlePass_C_PlayDetailer::_target_widget' has a wrong offset!");

}

