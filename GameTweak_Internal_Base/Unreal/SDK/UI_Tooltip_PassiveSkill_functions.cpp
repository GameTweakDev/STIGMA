#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Tooltip_PassiveSkill

#include "Basic.hpp"

#include "UI_Tooltip_PassiveSkill_classes.hpp"
#include "UI_Tooltip_PassiveSkill_parameters.hpp"


namespace SDK
{

// Function UI_Tooltip_PassiveSkill.UI_Tooltip_PassiveSkill_C.Add Temp Level
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OverwirtedLevel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Tooltip_PassiveSkill_C::Add_Temp_Level(int32 OverwirtedLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_PassiveSkill_C", "Add Temp Level");

	Params::UI_Tooltip_PassiveSkill_C_Add_Temp_Level Parms{};

	Parms.OverwirtedLevel = OverwirtedLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Tooltip_PassiveSkill.UI_Tooltip_PassiveSkill_C.GetEffectText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FPassiveSkillID                  _skill_id                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FText                             _effect_text                                           (Parm, OutParm)

void UUI_Tooltip_PassiveSkill_C::GetEffectText(const struct FPassiveSkillID& _skill_id, class FText* _effect_text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_PassiveSkill_C", "GetEffectText");

	Params::UI_Tooltip_PassiveSkill_C_GetEffectText Parms{};

	Parms._skill_id = std::move(_skill_id);

	UObject::ProcessEvent(Func, &Parms);

	if (_effect_text != nullptr)
		*_effect_text = std::move(Parms._effect_text);
}


// Function UI_Tooltip_PassiveSkill.UI_Tooltip_PassiveSkill_C.GetLevelText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FPassiveSkillID                  _skill_id                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FText                             _level_text                                            (Parm, OutParm)

void UUI_Tooltip_PassiveSkill_C::GetLevelText(const struct FPassiveSkillID& _skill_id, class FText* _level_text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_PassiveSkill_C", "GetLevelText");

	Params::UI_Tooltip_PassiveSkill_C_GetLevelText Parms{};

	Parms._skill_id = std::move(_skill_id);

	UObject::ProcessEvent(Func, &Parms);

	if (_level_text != nullptr)
		*_level_text = std::move(Parms._level_text);
}


// Function UI_Tooltip_PassiveSkill.UI_Tooltip_PassiveSkill_C.OnShowTooltip
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_Tooltip_PassiveSkill_C::OnShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_PassiveSkill_C", "OnShowTooltip");

	UObject::ProcessEvent(Func, nullptr);
}

}

