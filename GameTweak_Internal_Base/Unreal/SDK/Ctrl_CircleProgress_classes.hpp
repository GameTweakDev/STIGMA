#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_CircleProgress

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_CircleProgress.Ctrl_CircleProgress_C
// 0x0088 (0x0348 - 0x02C0)
class UCtrl_CircleProgress_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 CIrcle;                                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Frame;                                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Icon;                                          // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Material;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPositive;                                        // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3733[0x3];                                     // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLinearColor                           Color;                                             // 0x02EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3734[0x4];                                     // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        Progress_Duration;                                 // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PROGRESS_Time;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Target_Offset;                                     // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualDestroy;                                     // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3735[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              LastTime;                                          // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidLastTime;                                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DriveAnim(double _delta);
	void ExecuteUbergraph_Ctrl_CircleProgress(int32 EntryPoint);
	void OnTick(double _delta);
	void SetProgressTime(double _time);
	void SetTargetOffset(const struct FVector2D& _offset);
	void Start(double _duration, bool _manual_destroy);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ValidateMaterial();

	void GetSize(struct FVector2D* _size) const;
	void IsExpired(bool* _expired) const;
	void IsManualDestroy(bool* _yes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_CircleProgress_C">();
	}
	static class UCtrl_CircleProgress_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_CircleProgress_C>();
	}
};
static_assert(alignof(UCtrl_CircleProgress_C) == 0x000008, "Wrong alignment on UCtrl_CircleProgress_C");
static_assert(sizeof(UCtrl_CircleProgress_C) == 0x000348, "Wrong size on UCtrl_CircleProgress_C");
static_assert(offsetof(UCtrl_CircleProgress_C, UberGraphFrame) == 0x0002C0, "Member 'UCtrl_CircleProgress_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, CIrcle) == 0x0002C8, "Member 'UCtrl_CircleProgress_C::CIrcle' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Frame) == 0x0002D0, "Member 'UCtrl_CircleProgress_C::Frame' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Img_Icon) == 0x0002D8, "Member 'UCtrl_CircleProgress_C::Img_Icon' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Material) == 0x0002E0, "Member 'UCtrl_CircleProgress_C::Material' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, IsPositive) == 0x0002E8, "Member 'UCtrl_CircleProgress_C::IsPositive' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Color) == 0x0002EC, "Member 'UCtrl_CircleProgress_C::Color' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Progress_Duration) == 0x000300, "Member 'UCtrl_CircleProgress_C::Progress_Duration' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, PROGRESS_Time) == 0x000308, "Member 'UCtrl_CircleProgress_C::PROGRESS_Time' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Target_Offset) == 0x000310, "Member 'UCtrl_CircleProgress_C::Target_Offset' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, Offset) == 0x000320, "Member 'UCtrl_CircleProgress_C::Offset' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, ManualDestroy) == 0x000330, "Member 'UCtrl_CircleProgress_C::ManualDestroy' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, LastTime) == 0x000338, "Member 'UCtrl_CircleProgress_C::LastTime' has a wrong offset!");
static_assert(offsetof(UCtrl_CircleProgress_C, ValidLastTime) == 0x000340, "Member 'UCtrl_CircleProgress_C::ValidLastTime' has a wrong offset!");

}

