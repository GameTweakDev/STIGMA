#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Challenge_MissionPopup

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function Challenge_MissionPopup.Challenge_MissionPopup_C.CheckCanClose
// 0x0002 (0x0002 - 0x0000)
struct Challenge_MissionPopup_C_CheckCanClose final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_MissionPopup_C_CheckCanClose) == 0x000001, "Wrong alignment on Challenge_MissionPopup_C_CheckCanClose");
static_assert(sizeof(Challenge_MissionPopup_C_CheckCanClose) == 0x000002, "Wrong size on Challenge_MissionPopup_C_CheckCanClose");
static_assert(offsetof(Challenge_MissionPopup_C_CheckCanClose, Force) == 0x000000, "Member 'Challenge_MissionPopup_C_CheckCanClose::Force' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_CheckCanClose, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000001, "Member 'Challenge_MissionPopup_C_CheckCanClose::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function Challenge_MissionPopup.Challenge_MissionPopup_C.ExecuteUbergraph_Challenge_MissionPopup
// 0x0048 (0x0048 - 0x0000)
struct Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3900[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller;  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3901[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller_1; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup) == 0x000008, "Wrong alignment on Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup");
static_assert(sizeof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup) == 0x000048, "Wrong size on Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, EntryPoint) == 0x000000, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, K2Node_DynamicCast_AsChallenge_Player_Controller) == 0x000020, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::K2Node_DynamicCast_AsChallenge_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000030, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, K2Node_DynamicCast_AsChallenge_Player_Controller_1) == 0x000038, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::K2Node_DynamicCast_AsChallenge_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'Challenge_MissionPopup_C_ExecuteUbergraph_Challenge_MissionPopup::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function Challenge_MissionPopup.Challenge_MissionPopup_C.InitializeMissions
// 0x0090 (0x0090 - 0x0000)
struct Challenge_MissionPopup_C_InitializeMissions final
{
public:
	TArray<class UMission*>                       Missions;                                          // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3902[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class UMission*                               CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3903[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                CallFunc_MakeItemIDByCategories_ReturnValue;       // 0x0038(0x0010)(HasGetValueTypeHash)
	TArray<class UMission*>                       CallFunc_GetMissionsByTaskID__out_missions;        // 0x0048(0x0010)(ReferenceParm)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UChallenge_MissionEntry_C*              CallFunc_Create_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       K2Node_DynamicCast_As________;                     // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_MissionPopup_C_InitializeMissions) == 0x000008, "Wrong alignment on Challenge_MissionPopup_C_InitializeMissions");
static_assert(sizeof(Challenge_MissionPopup_C_InitializeMissions) == 0x000090, "Wrong size on Challenge_MissionPopup_C_InitializeMissions");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, Missions) == 0x000000, "Member 'Challenge_MissionPopup_C_InitializeMissions::Missions' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Challenge_MissionPopup_C_InitializeMissions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'Challenge_MissionPopup_C_InitializeMissions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_MakeLiteralByte_ReturnValue) == 0x00001C, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_Array_Get_Item) == 0x000020, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00002C, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_MakeItemIDByCategories_ReturnValue) == 0x000038, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_MakeItemIDByCategories_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_GetMissionsByTaskID__out_missions) == 0x000048, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_GetMissionsByTaskID__out_missions' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, K2Node_MakeStruct_Margin) == 0x000058, "Member 'Challenge_MissionPopup_C_InitializeMissions::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_GetPlayerController_ReturnValue) == 0x000068, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_Create_ReturnValue) == 0x000070, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, CallFunc_AddChild_ReturnValue) == 0x000078, "Member 'Challenge_MissionPopup_C_InitializeMissions::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, K2Node_DynamicCast_As________) == 0x000080, "Member 'Challenge_MissionPopup_C_InitializeMissions::K2Node_DynamicCast_As________' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_InitializeMissions, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'Challenge_MissionPopup_C_InitializeMissions::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Challenge_MissionPopup.Challenge_MissionPopup_C.InitWidget
// 0x0008 (0x0008 - 0x0000)
struct Challenge_MissionPopup_C_InitWidget final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_MissionPopup_C_InitWidget) == 0x000008, "Wrong alignment on Challenge_MissionPopup_C_InitWidget");
static_assert(sizeof(Challenge_MissionPopup_C_InitWidget) == 0x000008, "Wrong size on Challenge_MissionPopup_C_InitWidget");
static_assert(offsetof(Challenge_MissionPopup_C_InitWidget, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'Challenge_MissionPopup_C_InitWidget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function Challenge_MissionPopup.Challenge_MissionPopup_C.OnKeyDown
// 0x02D8 (0x02D8 - 0x0000)
struct Challenge_MissionPopup_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0130(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01E8(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3904[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0208(0x00B8)()
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABattlePlayerControllerBase*            K2Node_DynamicCast_AsBattle_Player_Controller_Base; // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_MissionPopup_C_OnKeyDown) == 0x000008, "Wrong alignment on Challenge_MissionPopup_C_OnKeyDown");
static_assert(sizeof(Challenge_MissionPopup_C_OnKeyDown) == 0x0002D8, "Wrong size on Challenge_MissionPopup_C_OnKeyDown");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'Challenge_MissionPopup_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'Challenge_MissionPopup_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, ReturnValue) == 0x000078, "Member 'Challenge_MissionPopup_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, CallFunc_Handled_ReturnValue) == 0x000130, "Member 'Challenge_MissionPopup_C_OnKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x0001E8, "Member 'Challenge_MissionPopup_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000200, "Member 'Challenge_MissionPopup_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000208, "Member 'Challenge_MissionPopup_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, CallFunc_GetPlayerController_ReturnValue) == 0x0002C0, "Member 'Challenge_MissionPopup_C_OnKeyDown::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, K2Node_DynamicCast_AsBattle_Player_Controller_Base) == 0x0002C8, "Member 'Challenge_MissionPopup_C_OnKeyDown::K2Node_DynamicCast_AsBattle_Player_Controller_Base' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_OnKeyDown, K2Node_DynamicCast_bSuccess) == 0x0002D0, "Member 'Challenge_MissionPopup_C_OnKeyDown::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Challenge_MissionPopup.Challenge_MissionPopup_C.SetTitle
// 0x0098 (0x0098 - 0x0000)
struct Challenge_MissionPopup_C_SetTitle final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_GameState*                   K2Node_DynamicCast_AsChallenge_Game_State;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3905[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_GetCurrentRound_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0080(0x0018)()
};
static_assert(alignof(Challenge_MissionPopup_C_SetTitle) == 0x000008, "Wrong alignment on Challenge_MissionPopup_C_SetTitle");
static_assert(sizeof(Challenge_MissionPopup_C_SetTitle) == 0x000098, "Wrong size on Challenge_MissionPopup_C_SetTitle");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'Challenge_MissionPopup_C_SetTitle::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, K2Node_DynamicCast_AsChallenge_Game_State) == 0x000008, "Member 'Challenge_MissionPopup_C_SetTitle::K2Node_DynamicCast_AsChallenge_Game_State' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Challenge_MissionPopup_C_SetTitle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, CallFunc_GetCurrentRound_ReturnValue) == 0x000014, "Member 'Challenge_MissionPopup_C_SetTitle::CallFunc_GetCurrentRound_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000018, "Member 'Challenge_MissionPopup_C_SetTitle::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'Challenge_MissionPopup_C_SetTitle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, K2Node_MakeArray_Array) == 0x000070, "Member 'Challenge_MissionPopup_C_SetTitle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Challenge_MissionPopup_C_SetTitle, CallFunc_Format_ReturnValue) == 0x000080, "Member 'Challenge_MissionPopup_C_SetTitle::CallFunc_Format_ReturnValue' has a wrong offset!");

}

