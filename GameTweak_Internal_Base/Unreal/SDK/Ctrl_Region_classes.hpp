#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_Region

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BPGLib_classes.hpp"
#include "Stigma_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_Region.Ctrl_Region_C
// 0x0038 (0x0528 - 0x04F0)
class UCtrl_Region_C final : public UPreviewableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 IMG_Ping;                                          // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Name;                                          // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 RegionCode;                                        // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Material_Ping;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Elapsed;                                           // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ValidatePingMaterial();
	void UpdateRegion();
	void UpdatePing();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetRegion(const class FString& _region_code);
	void OnTick(double _delta);
	bool OnSynchronizeProperties();
	void ExecuteUbergraph_Ctrl_Region(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_Region_C">();
	}
	static class UCtrl_Region_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_Region_C>();
	}
};
static_assert(alignof(UCtrl_Region_C) == 0x000008, "Wrong alignment on UCtrl_Region_C");
static_assert(sizeof(UCtrl_Region_C) == 0x000528, "Wrong size on UCtrl_Region_C");
static_assert(offsetof(UCtrl_Region_C, UberGraphFrame) == 0x0004F0, "Member 'UCtrl_Region_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCtrl_Region_C, IMG_Ping) == 0x0004F8, "Member 'UCtrl_Region_C::IMG_Ping' has a wrong offset!");
static_assert(offsetof(UCtrl_Region_C, TXT_Name) == 0x000500, "Member 'UCtrl_Region_C::TXT_Name' has a wrong offset!");
static_assert(offsetof(UCtrl_Region_C, RegionCode) == 0x000508, "Member 'UCtrl_Region_C::RegionCode' has a wrong offset!");
static_assert(offsetof(UCtrl_Region_C, Material_Ping) == 0x000518, "Member 'UCtrl_Region_C::Material_Ping' has a wrong offset!");
static_assert(offsetof(UCtrl_Region_C, Elapsed) == 0x000520, "Member 'UCtrl_Region_C::Elapsed' has a wrong offset!");

}

