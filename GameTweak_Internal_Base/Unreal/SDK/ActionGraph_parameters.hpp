#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: ActionGraph

#include "Basic.hpp"

#include "ActionGraph_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ActionGraph.ActionGraph.GetStockCooltimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetStockCooltimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetStockCooltimeElapsed) == 0x000004, "Wrong alignment on ActionGraph_GetStockCooltimeElapsed");
static_assert(sizeof(ActionGraph_GetStockCooltimeElapsed) == 0x000004, "Wrong size on ActionGraph_GetStockCooltimeElapsed");
static_assert(offsetof(ActionGraph_GetStockCooltimeElapsed, ReturnValue) == 0x000000, "Member 'ActionGraph_GetStockCooltimeElapsed::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetActiveHitRange
// 0x0010 (0x0010 - 0x0000)
struct ActionGraph_GetActiveHitRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetActiveHitRange) == 0x000008, "Wrong alignment on ActionGraph_GetActiveHitRange");
static_assert(sizeof(ActionGraph_GetActiveHitRange) == 0x000010, "Wrong size on ActionGraph_GetActiveHitRange");
static_assert(offsetof(ActionGraph_GetActiveHitRange, ReturnValue) == 0x000000, "Member 'ActionGraph_GetActiveHitRange::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetAttackableRange
// 0x0010 (0x0010 - 0x0000)
struct ActionGraph_GetAttackableRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetAttackableRange) == 0x000008, "Wrong alignment on ActionGraph_GetAttackableRange");
static_assert(sizeof(ActionGraph_GetAttackableRange) == 0x000010, "Wrong size on ActionGraph_GetAttackableRange");
static_assert(offsetof(ActionGraph_GetAttackableRange, ReturnValue) == 0x000000, "Member 'ActionGraph_GetAttackableRange::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetCalculatedFinalStockCooltime
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetCalculatedFinalStockCooltime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetCalculatedFinalStockCooltime) == 0x000004, "Wrong alignment on ActionGraph_GetCalculatedFinalStockCooltime");
static_assert(sizeof(ActionGraph_GetCalculatedFinalStockCooltime) == 0x000004, "Wrong size on ActionGraph_GetCalculatedFinalStockCooltime");
static_assert(offsetof(ActionGraph_GetCalculatedFinalStockCooltime, ReturnValue) == 0x000000, "Member 'ActionGraph_GetCalculatedFinalStockCooltime::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetDefaultMaxStockCount
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetDefaultMaxStockCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetDefaultMaxStockCount) == 0x000004, "Wrong alignment on ActionGraph_GetDefaultMaxStockCount");
static_assert(sizeof(ActionGraph_GetDefaultMaxStockCount) == 0x000004, "Wrong size on ActionGraph_GetDefaultMaxStockCount");
static_assert(offsetof(ActionGraph_GetDefaultMaxStockCount, ReturnValue) == 0x000000, "Member 'ActionGraph_GetDefaultMaxStockCount::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetMaxStockCount
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetMaxStockCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetMaxStockCount) == 0x000004, "Wrong alignment on ActionGraph_GetMaxStockCount");
static_assert(sizeof(ActionGraph_GetMaxStockCount) == 0x000004, "Wrong size on ActionGraph_GetMaxStockCount");
static_assert(offsetof(ActionGraph_GetMaxStockCount, ReturnValue) == 0x000000, "Member 'ActionGraph_GetMaxStockCount::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetStockCooltime
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetStockCooltime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetStockCooltime) == 0x000004, "Wrong alignment on ActionGraph_GetStockCooltime");
static_assert(sizeof(ActionGraph_GetStockCooltime) == 0x000004, "Wrong size on ActionGraph_GetStockCooltime");
static_assert(offsetof(ActionGraph_GetStockCooltime, ReturnValue) == 0x000000, "Member 'ActionGraph_GetStockCooltime::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetStockCooltimeProgress
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetStockCooltimeProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetStockCooltimeProgress) == 0x000004, "Wrong alignment on ActionGraph_GetStockCooltimeProgress");
static_assert(sizeof(ActionGraph_GetStockCooltimeProgress) == 0x000004, "Wrong size on ActionGraph_GetStockCooltimeProgress");
static_assert(offsetof(ActionGraph_GetStockCooltimeProgress, ReturnValue) == 0x000000, "Member 'ActionGraph_GetStockCooltimeProgress::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetStockCount
// 0x0004 (0x0004 - 0x0000)
struct ActionGraph_GetStockCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetStockCount) == 0x000004, "Wrong alignment on ActionGraph_GetStockCount");
static_assert(sizeof(ActionGraph_GetStockCount) == 0x000004, "Wrong size on ActionGraph_GetStockCount");
static_assert(offsetof(ActionGraph_GetStockCount, ReturnValue) == 0x000000, "Member 'ActionGraph_GetStockCount::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetStockType
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_GetStockType final
{
public:
	EStockType                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetStockType) == 0x000001, "Wrong alignment on ActionGraph_GetStockType");
static_assert(sizeof(ActionGraph_GetStockType) == 0x000001, "Wrong size on ActionGraph_GetStockType");
static_assert(offsetof(ActionGraph_GetStockType, ReturnValue) == 0x000000, "Member 'ActionGraph_GetStockType::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.GetUsage
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_GetUsage final
{
public:
	EActionUsage                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_GetUsage) == 0x000001, "Wrong alignment on ActionGraph_GetUsage");
static_assert(sizeof(ActionGraph_GetUsage) == 0x000001, "Wrong size on ActionGraph_GetUsage");
static_assert(offsetof(ActionGraph_GetUsage, ReturnValue) == 0x000000, "Member 'ActionGraph_GetUsage::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.IsBoundStockCoolTimeDelegate
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_IsBoundStockCoolTimeDelegate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_IsBoundStockCoolTimeDelegate) == 0x000001, "Wrong alignment on ActionGraph_IsBoundStockCoolTimeDelegate");
static_assert(sizeof(ActionGraph_IsBoundStockCoolTimeDelegate) == 0x000001, "Wrong size on ActionGraph_IsBoundStockCoolTimeDelegate");
static_assert(offsetof(ActionGraph_IsBoundStockCoolTimeDelegate, ReturnValue) == 0x000000, "Member 'ActionGraph_IsBoundStockCoolTimeDelegate::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.IsChangeStanceAction
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_IsChangeStanceAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_IsChangeStanceAction) == 0x000001, "Wrong alignment on ActionGraph_IsChangeStanceAction");
static_assert(sizeof(ActionGraph_IsChangeStanceAction) == 0x000001, "Wrong size on ActionGraph_IsChangeStanceAction");
static_assert(offsetof(ActionGraph_IsChangeStanceAction, ReturnValue) == 0x000000, "Member 'ActionGraph_IsChangeStanceAction::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.IsDelayTime
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_IsDelayTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_IsDelayTime) == 0x000001, "Wrong alignment on ActionGraph_IsDelayTime");
static_assert(sizeof(ActionGraph_IsDelayTime) == 0x000001, "Wrong size on ActionGraph_IsDelayTime");
static_assert(offsetof(ActionGraph_IsDelayTime, ReturnValue) == 0x000000, "Member 'ActionGraph_IsDelayTime::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_IsRunning) == 0x000001, "Wrong alignment on ActionGraph_IsRunning");
static_assert(sizeof(ActionGraph_IsRunning) == 0x000001, "Wrong size on ActionGraph_IsRunning");
static_assert(offsetof(ActionGraph_IsRunning, ReturnValue) == 0x000000, "Member 'ActionGraph_IsRunning::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraph.IsSupportedAnimRate
// 0x0001 (0x0001 - 0x0000)
struct ActionGraph_IsSupportedAnimRate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraph_IsSupportedAnimRate) == 0x000001, "Wrong alignment on ActionGraph_IsSupportedAnimRate");
static_assert(sizeof(ActionGraph_IsSupportedAnimRate) == 0x000001, "Wrong size on ActionGraph_IsSupportedAnimRate");
static_assert(offsetof(ActionGraph_IsSupportedAnimRate, ReturnValue) == 0x000000, "Member 'ActionGraph_IsSupportedAnimRate::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraphCharacter.IsPlayingPassiveAction
// 0x0002 (0x0002 - 0x0000)
struct ActionGraphCharacter_IsPlayingPassiveAction final
{
public:
	bool                                          _is_check_passive_standing;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphCharacter_IsPlayingPassiveAction) == 0x000001, "Wrong alignment on ActionGraphCharacter_IsPlayingPassiveAction");
static_assert(sizeof(ActionGraphCharacter_IsPlayingPassiveAction) == 0x000002, "Wrong size on ActionGraphCharacter_IsPlayingPassiveAction");
static_assert(offsetof(ActionGraphCharacter_IsPlayingPassiveAction, _is_check_passive_standing) == 0x000000, "Member 'ActionGraphCharacter_IsPlayingPassiveAction::_is_check_passive_standing' has a wrong offset!");
static_assert(offsetof(ActionGraphCharacter_IsPlayingPassiveAction, ReturnValue) == 0x000001, "Member 'ActionGraphCharacter_IsPlayingPassiveAction::ReturnValue' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_ALL_Activated_ActionGraph
// 0x0002 (0x0002 - 0x0000)
struct ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph final
{
public:
	struct FActionGraphActivateReq                _req;                                              // 0x0000(0x0002)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph) == 0x000001, "Wrong alignment on ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph");
static_assert(sizeof(ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph) == 0x000002, "Wrong size on ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph");
static_assert(offsetof(ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph, _req) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph::_req' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_ALL_OperatorSignal
// 0x000C (0x000C - 0x0000)
struct ActionGraphDriverComponent_RPC_ALL_OperatorSignal final
{
public:
	struct FActionGraphOperatorID                 _signal_id;                                        // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C67[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _signal_code;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_ALL_OperatorSignal) == 0x000004, "Wrong alignment on ActionGraphDriverComponent_RPC_ALL_OperatorSignal");
static_assert(sizeof(ActionGraphDriverComponent_RPC_ALL_OperatorSignal) == 0x00000C, "Wrong size on ActionGraphDriverComponent_RPC_ALL_OperatorSignal");
static_assert(offsetof(ActionGraphDriverComponent_RPC_ALL_OperatorSignal, _signal_id) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_ALL_OperatorSignal::_signal_id' has a wrong offset!");
static_assert(offsetof(ActionGraphDriverComponent_RPC_ALL_OperatorSignal, _signal_code) == 0x000008, "Member 'ActionGraphDriverComponent_RPC_ALL_OperatorSignal::_signal_code' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_ALL_UpdateGraphFlow
// 0x0090 (0x0090 - 0x0000)
struct ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow final
{
public:
	struct FActionGraphFlow_Multicast             _graph_flow;                                       // 0x0000(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow) == 0x000008, "Wrong alignment on ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow");
static_assert(sizeof(ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow) == 0x000090, "Wrong size on ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow");
static_assert(offsetof(ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow, _graph_flow) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow::_graph_flow' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_CLIENT_StartRequest_Fail_ACK
// 0x0008 (0x0008 - 0x0000)
struct ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK final
{
public:
	struct FActionGraphStartReq_Fail_Ack          _ack;                                              // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK) == 0x000004, "Wrong alignment on ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK");
static_assert(sizeof(ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK) == 0x000008, "Wrong size on ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK");
static_assert(offsetof(ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK, _ack) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK::_ack' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_NotifyInputEvent
// 0x0002 (0x0002 - 0x0000)
struct ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent final
{
public:
	struct FActionGraphInput_Req                  _req;                                              // 0x0000(0x0002)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent) == 0x000001, "Wrong alignment on ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent");
static_assert(sizeof(ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent) == 0x000002, "Wrong size on ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent");
static_assert(offsetof(ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent, _req) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent::_req' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_OperatorSignal
// 0x000C (0x000C - 0x0000)
struct ActionGraphDriverComponent_RPC_SERVER_OperatorSignal final
{
public:
	struct FActionGraphOperatorID                 _signal_id;                                        // 0x0000(0x0006)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C68[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _signal_code;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_SERVER_OperatorSignal) == 0x000004, "Wrong alignment on ActionGraphDriverComponent_RPC_SERVER_OperatorSignal");
static_assert(sizeof(ActionGraphDriverComponent_RPC_SERVER_OperatorSignal) == 0x00000C, "Wrong size on ActionGraphDriverComponent_RPC_SERVER_OperatorSignal");
static_assert(offsetof(ActionGraphDriverComponent_RPC_SERVER_OperatorSignal, _signal_id) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_SERVER_OperatorSignal::_signal_id' has a wrong offset!");
static_assert(offsetof(ActionGraphDriverComponent_RPC_SERVER_OperatorSignal, _signal_code) == 0x000008, "Member 'ActionGraphDriverComponent_RPC_SERVER_OperatorSignal::_signal_code' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_StartRequest
// 0x0038 (0x0038 - 0x0000)
struct ActionGraphDriverComponent_RPC_SERVER_StartRequest final
{
public:
	struct FActionGraphStartReq                   _req;                                              // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_SERVER_StartRequest) == 0x000008, "Wrong alignment on ActionGraphDriverComponent_RPC_SERVER_StartRequest");
static_assert(sizeof(ActionGraphDriverComponent_RPC_SERVER_StartRequest) == 0x000038, "Wrong size on ActionGraphDriverComponent_RPC_SERVER_StartRequest");
static_assert(offsetof(ActionGraphDriverComponent_RPC_SERVER_StartRequest, _req) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_SERVER_StartRequest::_req' has a wrong offset!");

// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_StopActionGraph
// 0x0001 (0x0001 - 0x0000)
struct ActionGraphDriverComponent_RPC_SERVER_StopActionGraph final
{
public:
	struct FActionGraphEndReq                     _req;                                              // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionGraphDriverComponent_RPC_SERVER_StopActionGraph) == 0x000001, "Wrong alignment on ActionGraphDriverComponent_RPC_SERVER_StopActionGraph");
static_assert(sizeof(ActionGraphDriverComponent_RPC_SERVER_StopActionGraph) == 0x000001, "Wrong size on ActionGraphDriverComponent_RPC_SERVER_StopActionGraph");
static_assert(offsetof(ActionGraphDriverComponent_RPC_SERVER_StopActionGraph, _req) == 0x000000, "Member 'ActionGraphDriverComponent_RPC_SERVER_StopActionGraph::_req' has a wrong offset!");

}

