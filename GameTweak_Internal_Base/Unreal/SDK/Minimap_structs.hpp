#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Minimap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Minimap.EMinimapDirection
// NumValues: 0x0005
enum class EMinimapDirection : uint8
{
	PX                                       = 0,
	NX                                       = 1,
	PY                                       = 2,
	NY                                       = 3,
	EMinimapDirection_MAX                    = 4,
};

// ScriptStruct Minimap.MinimapCapture
// 0x00A0 (0x00A0 - 0x0000)
struct FMinimapCapture final
{
public:
	class UTextureRenderTarget2D*                 Map;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA4[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatrix                                ToMapMatrix;                                       // 0x0010(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FloorHeight;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CeilHeight;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA5[0x8];                                     // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMinimapCapture) == 0x000010, "Wrong alignment on FMinimapCapture");
static_assert(sizeof(FMinimapCapture) == 0x0000A0, "Wrong size on FMinimapCapture");
static_assert(offsetof(FMinimapCapture, Map) == 0x000000, "Member 'FMinimapCapture::Map' has a wrong offset!");
static_assert(offsetof(FMinimapCapture, ToMapMatrix) == 0x000010, "Member 'FMinimapCapture::ToMapMatrix' has a wrong offset!");
static_assert(offsetof(FMinimapCapture, FloorHeight) == 0x000090, "Member 'FMinimapCapture::FloorHeight' has a wrong offset!");
static_assert(offsetof(FMinimapCapture, CeilHeight) == 0x000094, "Member 'FMinimapCapture::CeilHeight' has a wrong offset!");

// ScriptStruct Minimap.MinimapRef
// 0x0008 (0x0008 - 0x0000)
struct FMinimapRef final
{
public:
	class UMinimap*                               _Minimap;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMinimapRef) == 0x000008, "Wrong alignment on FMinimapRef");
static_assert(sizeof(FMinimapRef) == 0x000008, "Wrong size on FMinimapRef");
static_assert(offsetof(FMinimapRef, _Minimap) == 0x000000, "Member 'FMinimapRef::_Minimap' has a wrong offset!");

}

