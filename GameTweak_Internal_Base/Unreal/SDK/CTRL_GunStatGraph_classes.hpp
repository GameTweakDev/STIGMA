#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: CTRL_GunStatGraph

#include "Basic.hpp"

#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CTRL_GunStatGraph.CTRL_GunStatGraph_C
// 0x00A8 (0x0598 - 0x04F0)
class UCTRL_GunStatGraph_C final : public UPreviewableWidget
{
public:
	class UCtrl_StatUpdate_C*                     Ctrl_StatUpdate;                                   // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPolyGraph*                             GRAPH_Current;                                     // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Icon;                                          // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_Title;                                         // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_Value;                                         // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             Icon;                                              // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Title;                                             // 0x0520(0x0018)(Edit, BlueprintVisible)
	double                                        MinValue;                                          // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxValue;                                          // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurValue_Weapon;                                   // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddedValue_Passive;                                // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddedValue_Booster;                                // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseValue;                                         // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResultValue;                                       // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMagazineMode;                                // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_387E[0x3];                                     // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BulletCount;                                       // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Parts_Value;                                       // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Init;                                           // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_387F[0x7];                                     // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        OriginResultValue;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OriginScalerValue;                                 // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool OnSynchronizeProperties();
	void SetMagazineValue(int32 _cur_weapon_value, int32 _add_passive_value, int32 _add_booster_value, int32 _add_pars_value, int32 _bullet_counts, bool _is_init);
	void SetValue(double _cur_weapon_value, double _add_passive_value, double _add_booster_value, double _parts_value, bool _is_init);
	void UpdaetCurrent();
	void UpdateStatics();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CTRL_GunStatGraph_C">();
	}
	static class UCTRL_GunStatGraph_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCTRL_GunStatGraph_C>();
	}
};
static_assert(alignof(UCTRL_GunStatGraph_C) == 0x000008, "Wrong alignment on UCTRL_GunStatGraph_C");
static_assert(sizeof(UCTRL_GunStatGraph_C) == 0x000598, "Wrong size on UCTRL_GunStatGraph_C");
static_assert(offsetof(UCTRL_GunStatGraph_C, Ctrl_StatUpdate) == 0x0004F0, "Member 'UCTRL_GunStatGraph_C::Ctrl_StatUpdate' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, GRAPH_Current) == 0x0004F8, "Member 'UCTRL_GunStatGraph_C::GRAPH_Current' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Img_Icon) == 0x000500, "Member 'UCTRL_GunStatGraph_C::Img_Icon' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Txt_Title) == 0x000508, "Member 'UCTRL_GunStatGraph_C::Txt_Title' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Txt_Value) == 0x000510, "Member 'UCTRL_GunStatGraph_C::Txt_Value' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Icon) == 0x000518, "Member 'UCTRL_GunStatGraph_C::Icon' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Title) == 0x000520, "Member 'UCTRL_GunStatGraph_C::Title' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, MinValue) == 0x000538, "Member 'UCTRL_GunStatGraph_C::MinValue' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, MaxValue) == 0x000540, "Member 'UCTRL_GunStatGraph_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, CurValue_Weapon) == 0x000548, "Member 'UCTRL_GunStatGraph_C::CurValue_Weapon' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, AddedValue_Passive) == 0x000550, "Member 'UCTRL_GunStatGraph_C::AddedValue_Passive' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, AddedValue_Booster) == 0x000558, "Member 'UCTRL_GunStatGraph_C::AddedValue_Booster' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, BaseValue) == 0x000560, "Member 'UCTRL_GunStatGraph_C::BaseValue' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, ResultValue) == 0x000568, "Member 'UCTRL_GunStatGraph_C::ResultValue' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, EnableMagazineMode) == 0x000570, "Member 'UCTRL_GunStatGraph_C::EnableMagazineMode' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, BulletCount) == 0x000574, "Member 'UCTRL_GunStatGraph_C::BulletCount' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Parts_Value) == 0x000578, "Member 'UCTRL_GunStatGraph_C::Parts_Value' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, Is_Init) == 0x000580, "Member 'UCTRL_GunStatGraph_C::Is_Init' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, OriginResultValue) == 0x000588, "Member 'UCTRL_GunStatGraph_C::OriginResultValue' has a wrong offset!");
static_assert(offsetof(UCTRL_GunStatGraph_C, OriginScalerValue) == 0x000590, "Member 'UCTRL_GunStatGraph_C::OriginScalerValue' has a wrong offset!");

}

