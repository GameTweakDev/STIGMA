#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_HUD_FlyBullet

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_HUD_FlyBullet.Ctrl_HUD_FlyBullet_C
// 0x0060 (0x0320 - 0x02C0)
class UCtrl_HUD_FlyBullet_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 IMG_Bullet;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_started;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389D[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        Fly_angle;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fly_power;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation_power;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           bullet_color;                                      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              bullet_move_pos;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Ctrl_HUD_FlyBullet(int32 EntryPoint);
	void StartFly(double _fly_angle, double _fly_power, double _rotation_power);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateFlyBullet(double _delta);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_HUD_FlyBullet_C">();
	}
	static class UCtrl_HUD_FlyBullet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_HUD_FlyBullet_C>();
	}
};
static_assert(alignof(UCtrl_HUD_FlyBullet_C) == 0x000008, "Wrong alignment on UCtrl_HUD_FlyBullet_C");
static_assert(sizeof(UCtrl_HUD_FlyBullet_C) == 0x000320, "Wrong size on UCtrl_HUD_FlyBullet_C");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, UberGraphFrame) == 0x0002C0, "Member 'UCtrl_HUD_FlyBullet_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, IMG_Bullet) == 0x0002C8, "Member 'UCtrl_HUD_FlyBullet_C::IMG_Bullet' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, Angle) == 0x0002D0, "Member 'UCtrl_HUD_FlyBullet_C::Angle' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, Time) == 0x0002D8, "Member 'UCtrl_HUD_FlyBullet_C::Time' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, Is_started) == 0x0002E0, "Member 'UCtrl_HUD_FlyBullet_C::Is_started' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, Fly_angle) == 0x0002E8, "Member 'UCtrl_HUD_FlyBullet_C::Fly_angle' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, Fly_power) == 0x0002F0, "Member 'UCtrl_HUD_FlyBullet_C::Fly_power' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, Rotation_power) == 0x0002F8, "Member 'UCtrl_HUD_FlyBullet_C::Rotation_power' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, bullet_color) == 0x000300, "Member 'UCtrl_HUD_FlyBullet_C::bullet_color' has a wrong offset!");
static_assert(offsetof(UCtrl_HUD_FlyBullet_C, bullet_move_pos) == 0x000310, "Member 'UCtrl_HUD_FlyBullet_C::bullet_move_pos' has a wrong offset!");

}

