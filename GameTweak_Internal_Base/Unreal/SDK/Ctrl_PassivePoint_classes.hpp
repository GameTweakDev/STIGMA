#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_PassivePoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_PassivePoint.Ctrl_PassivePoint_C
// 0x0078 (0x0568 - 0x04F0)
class UCtrl_PassivePoint_C final : public UPreviewableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CP_PassivePoint;                                   // 0x04F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Backgound;                                     // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_PassiveSkillPoint;                             // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_PassiveSkillPointZero;                         // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_TotPassiveSkillPoint;                          // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FItemID                                PassiveSkillPointID;                               // 0x0528(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         TotalSP;                                           // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempSP;                                            // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                UI_Padding;                                        // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              UI_SIze;                                           // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UI_MinDigit;                                       // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_Ctrl_PassivePoint(int32 EntryPoint);
	class UWidget* GetToolTip_PassiveSkillPoint();
	void InitSkillPoint();
	bool OnSynchronizeProperties();
	void OnUpdateUser(EUserEvent _event);
	void UpdateSkillPoint();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_PassivePoint_C">();
	}
	static class UCtrl_PassivePoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_PassivePoint_C>();
	}
};
static_assert(alignof(UCtrl_PassivePoint_C) == 0x000008, "Wrong alignment on UCtrl_PassivePoint_C");
static_assert(sizeof(UCtrl_PassivePoint_C) == 0x000568, "Wrong size on UCtrl_PassivePoint_C");
static_assert(offsetof(UCtrl_PassivePoint_C, UberGraphFrame) == 0x0004F0, "Member 'UCtrl_PassivePoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, CP_PassivePoint) == 0x0004F8, "Member 'UCtrl_PassivePoint_C::CP_PassivePoint' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, Img_Backgound) == 0x000500, "Member 'UCtrl_PassivePoint_C::Img_Backgound' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, SizeBox) == 0x000508, "Member 'UCtrl_PassivePoint_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, Txt_PassiveSkillPoint) == 0x000510, "Member 'UCtrl_PassivePoint_C::Txt_PassiveSkillPoint' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, Txt_PassiveSkillPointZero) == 0x000518, "Member 'UCtrl_PassivePoint_C::Txt_PassiveSkillPointZero' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, Txt_TotPassiveSkillPoint) == 0x000520, "Member 'UCtrl_PassivePoint_C::Txt_TotPassiveSkillPoint' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, PassiveSkillPointID) == 0x000528, "Member 'UCtrl_PassivePoint_C::PassiveSkillPointID' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, TotalSP) == 0x000538, "Member 'UCtrl_PassivePoint_C::TotalSP' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, TempSP) == 0x00053C, "Member 'UCtrl_PassivePoint_C::TempSP' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, UI_Padding) == 0x000540, "Member 'UCtrl_PassivePoint_C::UI_Padding' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, UI_SIze) == 0x000550, "Member 'UCtrl_PassivePoint_C::UI_SIze' has a wrong offset!");
static_assert(offsetof(UCtrl_PassivePoint_C, UI_MinDigit) == 0x000560, "Member 'UCtrl_PassivePoint_C::UI_MinDigit' has a wrong offset!");

}

