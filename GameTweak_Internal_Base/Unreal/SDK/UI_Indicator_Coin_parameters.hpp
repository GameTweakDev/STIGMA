#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Indicator_Coin

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function UI_Indicator_Coin.UI_Indicator_Coin_C.ExecuteUbergraph_UI_Indicator_Coin
// 0x0044 (0x0044 - 0x0000)
struct UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39EB[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin) == 0x000004, "Wrong alignment on UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin");
static_assert(sizeof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin) == 0x000044, "Wrong size on UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin");
static_assert(offsetof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin, EntryPoint) == 0x000000, "Member 'UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin, Temp_bool_IsClosed_Variable) == 0x000006, "Member 'UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin, K2Node_Event_MyGeometry) == 0x000008, "Member 'UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin, K2Node_Event_InDeltaTime) == 0x000040, "Member 'UI_Indicator_Coin_C_ExecuteUbergraph_UI_Indicator_Coin::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function UI_Indicator_Coin.UI_Indicator_Coin_C.GetText
// 0x00A8 (0x00A8 - 0x0000)
struct UI_Indicator_Coin_C_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class ACoinBase*                              K2Node_DynamicCast_AsCoin_Base;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39EC[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
};
static_assert(alignof(UI_Indicator_Coin_C_GetText) == 0x000008, "Wrong alignment on UI_Indicator_Coin_C_GetText");
static_assert(sizeof(UI_Indicator_Coin_C_GetText) == 0x0000A8, "Wrong size on UI_Indicator_Coin_C_GetText");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, ReturnValue) == 0x000000, "Member 'UI_Indicator_Coin_C_GetText::ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, K2Node_DynamicCast_AsCoin_Base) == 0x000018, "Member 'UI_Indicator_Coin_C_GetText::K2Node_DynamicCast_AsCoin_Base' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'UI_Indicator_Coin_C_GetText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000028, "Member 'UI_Indicator_Coin_C_GetText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'UI_Indicator_Coin_C_GetText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, K2Node_MakeArray_Array) == 0x000080, "Member 'UI_Indicator_Coin_C_GetText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_GetText, CallFunc_Format_ReturnValue) == 0x000090, "Member 'UI_Indicator_Coin_C_GetText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function UI_Indicator_Coin.UI_Indicator_Coin_C.Tick
// 0x003C (0x003C - 0x0000)
struct UI_Indicator_Coin_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Indicator_Coin_C_Tick) == 0x000004, "Wrong alignment on UI_Indicator_Coin_C_Tick");
static_assert(sizeof(UI_Indicator_Coin_C_Tick) == 0x00003C, "Wrong size on UI_Indicator_Coin_C_Tick");
static_assert(offsetof(UI_Indicator_Coin_C_Tick, MyGeometry) == 0x000000, "Member 'UI_Indicator_Coin_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_Tick, InDeltaTime) == 0x000038, "Member 'UI_Indicator_Coin_C_Tick::InDeltaTime' has a wrong offset!");

// Function UI_Indicator_Coin.UI_Indicator_Coin_C.UpdateDistance
// 0x0070 (0x0070 - 0x0000)
struct UI_Indicator_Coin_C_UpdateDistance final
{
public:
	float                                         CallFunc_Convert_CM_To_M_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39ED[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39EE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39EF[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39F0[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Round_A_ImplicitCast;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Indicator_Coin_C_UpdateDistance) == 0x000008, "Wrong alignment on UI_Indicator_Coin_C_UpdateDistance");
static_assert(sizeof(UI_Indicator_Coin_C_UpdateDistance) == 0x000070, "Wrong size on UI_Indicator_Coin_C_UpdateDistance");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_Convert_CM_To_M_ReturnValue) == 0x000000, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_Convert_CM_To_M_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_Round_ReturnValue) == 0x000008, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_GetPlayerController_ReturnValue) == 0x000048, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_K2_GetPawn_ReturnValue) == 0x000058, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Indicator_Coin_C_UpdateDistance, CallFunc_Round_A_ImplicitCast) == 0x000068, "Member 'UI_Indicator_Coin_C_UpdateDistance::CallFunc_Round_A_ImplicitCast' has a wrong offset!");

}

