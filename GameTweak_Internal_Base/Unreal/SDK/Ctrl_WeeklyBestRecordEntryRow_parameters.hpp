#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_WeeklyBestRecordEntryRow

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Ctrl_WeeklyBestRecordEntryRow.Ctrl_WeeklyBestRecordEntryRow_C.WeeklyBestRecordTypeToIndex
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex final
{
public:
	EWeeklyBestRecordType                         _type;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Idx;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex) == 0x000004, "Wrong alignment on Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex");
static_assert(sizeof(Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex) == 0x000010, "Wrong size on Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex, _type) == 0x000000, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex::_type' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex, Idx) == 0x000004, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex::Idx' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex, Param_Index) == 0x000008, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_WeeklyBestRecordTypeToIndex::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Ctrl_WeeklyBestRecordEntryRow.Ctrl_WeeklyBestRecordEntryRow_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet");
static_assert(sizeof(Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet) == 0x000008, "Wrong size on Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function Ctrl_WeeklyBestRecordEntryRow.Ctrl_WeeklyBestRecordEntryRow_C.Init
// 0x01C0 (0x01C0 - 0x0000)
struct Ctrl_WeeklyBestRecordEntryRow_C_Init final
{
public:
	EWeeklyBestRecordType                         _weekly_best_record_type;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _week;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _value;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        _score;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERankingType                                  _cur_ranking_type;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Tier                           CallFunc_GetTierDefine_ReturnValue;                // 0x0020(0x00D8)(ConstParm)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C9[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0100(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40CA[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0120(0x0018)()
	int32                                         CallFunc_WeeklyBestRecordTypeToIndex_idx;          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40CB[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0148(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01A8(0x0018)()
};
static_assert(alignof(Ctrl_WeeklyBestRecordEntryRow_C_Init) == 0x000008, "Wrong alignment on Ctrl_WeeklyBestRecordEntryRow_C_Init");
static_assert(sizeof(Ctrl_WeeklyBestRecordEntryRow_C_Init) == 0x0001C0, "Wrong size on Ctrl_WeeklyBestRecordEntryRow_C_Init");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, _weekly_best_record_type) == 0x000000, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::_weekly_best_record_type' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, _week) == 0x000004, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::_week' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, _value) == 0x000008, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::_value' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, _score) == 0x000010, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::_score' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, _cur_ranking_type) == 0x000018, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::_cur_ranking_type' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_Conv_IntToByte_ReturnValue) == 0x000019, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_GetValidValue_ReturnValue) == 0x00001B, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_GetTierDefine_ReturnValue) == 0x000020, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_GetTierDefine_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_FTrunc_ReturnValue) == 0x0000F8, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_Conv_IntToText_ReturnValue) == 0x000100, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000118, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000119, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000120, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_WeeklyBestRecordTypeToIndex_idx) == 0x000138, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_WeeklyBestRecordTypeToIndex_idx' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000140, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, K2Node_MakeStruct_FormatArgumentData) == 0x000148, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, K2Node_MakeArray_Array) == 0x000198, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_Init, CallFunc_Format_ReturnValue) == 0x0001A8, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_Init::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function Ctrl_WeeklyBestRecordEntryRow.Ctrl_WeeklyBestRecordEntryRow_C.ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow
// 0x0020 (0x0020 - 0x0000)
struct Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40CC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULVData_WeeklyBestRecordEntry_C*        K2Node_DynamicCast_AsLVData_Weekly_Best_Record_Entry; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsSelected;                          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow) == 0x000008, "Wrong alignment on Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow");
static_assert(sizeof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow) == 0x000020, "Wrong size on Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow, EntryPoint) == 0x000000, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow, K2Node_Event_ListItemObject) == 0x000008, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow, K2Node_DynamicCast_AsLVData_Weekly_Best_Record_Entry) == 0x000010, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow::K2Node_DynamicCast_AsLVData_Weekly_Best_Record_Entry' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow, K2Node_Event_bIsExpanded) == 0x000019, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow, K2Node_Event_bIsSelected) == 0x00001A, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_ExecuteUbergraph_Ctrl_WeeklyBestRecordEntryRow::K2Node_Event_bIsSelected' has a wrong offset!");

// Function Ctrl_WeeklyBestRecordEntryRow.Ctrl_WeeklyBestRecordEntryRow_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged");
static_assert(sizeof(Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function Ctrl_WeeklyBestRecordEntryRow.Ctrl_WeeklyBestRecordEntryRow_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged");
static_assert(sizeof(Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged");
static_assert(offsetof(Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'Ctrl_WeeklyBestRecordEntryRow_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

}

