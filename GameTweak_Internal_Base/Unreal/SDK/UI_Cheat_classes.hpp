#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Cheat

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "Stigma_classes.hpp"
#include "BPGLib_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Cheat.UI_Cheat_C
// 0x01A8 (0x0720 - 0x0578)
class UUI_Cheat_C final : public UUI_CheatBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0578(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCtrl_CommonButtonBase_C*               btn_close;                                         // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        CB_AutoStandUp;                                    // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_BodyItem;                                       // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_CharaType;                                      // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Body;                                       // 0x05A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Charm_Body;                                 // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Charm_Magazine;                             // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Front;                                      // 0x05B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Magazine;                                   // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Slide;                                      // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Sticker_Body;                               // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Sticker_Grip;                               // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Top;                                        // 0x05E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_GunPartCombo_C*                   CB_Gun_Under;                                      // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_HeadItem;                                       // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_PillItem_0;                                     // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_PillItem_1;                                     // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_PillItem_2;                                     // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_ItemCombo_C*                      CB_PillItem_3;                                     // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        CB_RepeatAction;                                   // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UComboBoxString*                        CB_RepeatMovement;                                 // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_InfBullet;                                     // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_InfStock;                                      // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_Invincible;                                    // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_NO_CP_Penalty;                                 // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_Show_ClientCorrectionError;                    // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_ShowCharaState;                                // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_ShowCollisionTest;                             // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_ShowDamage;                                    // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_ShowHitFX;                                     // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCheckBox*                              CHK_ShowState;                                     // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UEnumComboButton*                       CN_GunType;                                        // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_CommonButton_Intensity_C*         Ctrl_CommonButton;                                 // 0x0680(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               ED_RepeatDuration;                                 // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_0;                                   // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_1;                                   // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_2;                                   // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_3;                                   // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_4;                                   // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_5;                                   // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_6;                                   // 0x06C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_7;                                   // 0x06C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SLIDE_Passive_8;                                   // 0x06D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive0;                                      // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive1;                                      // 0x06E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive2;                                      // 0x06E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive3;                                      // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive4;                                      // 0x06F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive5;                                      // 0x0700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive6;                                      // 0x0708(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive7;                                      // 0x0710(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Passive8;                                      // 0x0718(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	ECheckBoxState BIND_InfBullet();
	ECheckBoxState BIND_InfStock();
	ECheckBoxState BIND_Invincible();
	ECheckBoxState BIND_ShowClientCorrectionError();
	ECheckBoxState BIND_ShowCollisionTest();
	ECheckBoxState BIND_ShowDamage();
	ECheckBoxState Bind_ShowHitFX();
	ECheckBoxState BIND_ShowStateValues();
	void BndEvt__CB_RepeatAction_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__CHK_Invincible_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__CHK_ShowCollisionTest_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__CHK_ShowDamage_K2Node_ComponentBoundEvent_2_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_BTN_Close_K2Node_ComponentBoundEvent_10_DM_OnSelectEnd__DelegateSignature(class UAnimatableWidget* _widget, bool _select);
	void BndEvt__UI_Cheat_CB_AutoStandUp_K2Node_ComponentBoundEvent_19_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__UI_Cheat_CB_BodyItem_K2Node_ComponentBoundEvent_6_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_CharaType_K2Node_ComponentBoundEvent_20_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Body_K2Node_ComponentBoundEvent_8_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Charm_Body_K2Node_ComponentBoundEvent_41_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Charm_Magazine_K2Node_ComponentBoundEvent_42_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Front_K2Node_ComponentBoundEvent_37_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Magazine_K2Node_ComponentBoundEvent_36_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Slide_K2Node_ComponentBoundEvent_35_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Sticker_Body_K2Node_ComponentBoundEvent_44_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Sticker_Grip_K2Node_ComponentBoundEvent_45_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Top_K2Node_ComponentBoundEvent_38_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_Gun_Under_K2Node_ComponentBoundEvent_39_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_HeadItem_K2Node_ComponentBoundEvent_7_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_PillItem_0_K2Node_ComponentBoundEvent_11_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_PillItem_1_K2Node_ComponentBoundEvent_12_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_PillItem_2_K2Node_ComponentBoundEvent_25_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_PillItem_3_K2Node_ComponentBoundEvent_26_OnChangeSelection__DelegateSignature(const struct FItemID& _selected_id, int32 _slot);
	void BndEvt__UI_Cheat_CB_RepeatMovement_K2Node_ComponentBoundEvent_17_OnSelectionChangedEvent__DelegateSignature(const class FString& SelectedItem, ESelectInfo SelectionType);
	void BndEvt__UI_Cheat_CHK_InfBullet_K2Node_ComponentBoundEvent_28_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_CHK_InfStock_K2Node_ComponentBoundEvent_22_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_CHK_NO_CP_Penalty_K2Node_ComponentBoundEvent_46_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_CHK_Show_ClientCorrectionError_K2Node_ComponentBoundEvent_15_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_CHK_ShowCharaState_K2Node_ComponentBoundEvent_16_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_CHK_ShowHitFX_K2Node_ComponentBoundEvent_13_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_CHK_ShowState_K2Node_ComponentBoundEvent_14_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);
	void BndEvt__UI_Cheat_Ctrl_CommonButton_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature(class UAnimatableWidget* _widget, bool _select);
	void BndEvt__UI_Cheat_ED_RepeatDuration_K2Node_ComponentBoundEvent_18_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_EnumComboButton_340_K2Node_ComponentBoundEvent_34_OnSelectEnumValue__DelegateSignature(int32 _enum_value);
	void BndEvt__UI_Cheat_SLIDE_Passive_0_K2Node_ComponentBoundEvent_29_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_1_K2Node_ComponentBoundEvent_30_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_2_K2Node_ComponentBoundEvent_31_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_3_K2Node_ComponentBoundEvent_32_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_4_K2Node_ComponentBoundEvent_33_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_5_K2Node_ComponentBoundEvent_47_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_6_K2Node_ComponentBoundEvent_48_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_7_K2Node_ComponentBoundEvent_49_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__UI_Cheat_SLIDE_Passive_8_K2Node_ComponentBoundEvent_50_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void ChangeGunParts(EGunPartsSlot _slot, const struct FItemID& _item_id);
	void Construct();
	void ExecuteUbergraph_UI_Cheat(int32 EntryPoint);
	void Get_TxtWidget(int32 _idx, class UTextBlock** _text);
	void GetPassiveLevelCtrl(int32 _idx, class USpinBox** _ctrl);
	void Init();
	void InitPassive();
	void On_Change_Passive_Level(int32 _passive_idx, double _level);
	void OnChangeBooster(const struct FItemID& _item_id, int32 _slot);
	void OnChangeItem(const struct FItemID& _item_id, int32 _slot);
	void OnSelectRepeatAction(const class FString& _string);
	void ResetChara();
	void UpdateBooster();
	void UpdateGunParts(class UCtrl_GunPartCombo_C* _widget, EGunType _gun_type, const struct FItemID& _part_id, bool _is_enable);
	void UpdateGuns();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Cheat_C">();
	}
	static class UUI_Cheat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Cheat_C>();
	}
};
static_assert(alignof(UUI_Cheat_C) == 0x000008, "Wrong alignment on UUI_Cheat_C");
static_assert(sizeof(UUI_Cheat_C) == 0x000720, "Wrong size on UUI_Cheat_C");
static_assert(offsetof(UUI_Cheat_C, UberGraphFrame) == 0x000578, "Member 'UUI_Cheat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, btn_close) == 0x000580, "Member 'UUI_Cheat_C::btn_close' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_AutoStandUp) == 0x000588, "Member 'UUI_Cheat_C::CB_AutoStandUp' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_BodyItem) == 0x000590, "Member 'UUI_Cheat_C::CB_BodyItem' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_CharaType) == 0x000598, "Member 'UUI_Cheat_C::CB_CharaType' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Body) == 0x0005A0, "Member 'UUI_Cheat_C::CB_Gun_Body' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Charm_Body) == 0x0005A8, "Member 'UUI_Cheat_C::CB_Gun_Charm_Body' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Charm_Magazine) == 0x0005B0, "Member 'UUI_Cheat_C::CB_Gun_Charm_Magazine' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Front) == 0x0005B8, "Member 'UUI_Cheat_C::CB_Gun_Front' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Magazine) == 0x0005C0, "Member 'UUI_Cheat_C::CB_Gun_Magazine' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Slide) == 0x0005C8, "Member 'UUI_Cheat_C::CB_Gun_Slide' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Sticker_Body) == 0x0005D0, "Member 'UUI_Cheat_C::CB_Gun_Sticker_Body' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Sticker_Grip) == 0x0005D8, "Member 'UUI_Cheat_C::CB_Gun_Sticker_Grip' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Top) == 0x0005E0, "Member 'UUI_Cheat_C::CB_Gun_Top' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_Gun_Under) == 0x0005E8, "Member 'UUI_Cheat_C::CB_Gun_Under' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_HeadItem) == 0x0005F0, "Member 'UUI_Cheat_C::CB_HeadItem' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_PillItem_0) == 0x0005F8, "Member 'UUI_Cheat_C::CB_PillItem_0' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_PillItem_1) == 0x000600, "Member 'UUI_Cheat_C::CB_PillItem_1' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_PillItem_2) == 0x000608, "Member 'UUI_Cheat_C::CB_PillItem_2' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_PillItem_3) == 0x000610, "Member 'UUI_Cheat_C::CB_PillItem_3' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_RepeatAction) == 0x000618, "Member 'UUI_Cheat_C::CB_RepeatAction' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CB_RepeatMovement) == 0x000620, "Member 'UUI_Cheat_C::CB_RepeatMovement' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_InfBullet) == 0x000628, "Member 'UUI_Cheat_C::CHK_InfBullet' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_InfStock) == 0x000630, "Member 'UUI_Cheat_C::CHK_InfStock' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_Invincible) == 0x000638, "Member 'UUI_Cheat_C::CHK_Invincible' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_NO_CP_Penalty) == 0x000640, "Member 'UUI_Cheat_C::CHK_NO_CP_Penalty' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_Show_ClientCorrectionError) == 0x000648, "Member 'UUI_Cheat_C::CHK_Show_ClientCorrectionError' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_ShowCharaState) == 0x000650, "Member 'UUI_Cheat_C::CHK_ShowCharaState' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_ShowCollisionTest) == 0x000658, "Member 'UUI_Cheat_C::CHK_ShowCollisionTest' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_ShowDamage) == 0x000660, "Member 'UUI_Cheat_C::CHK_ShowDamage' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_ShowHitFX) == 0x000668, "Member 'UUI_Cheat_C::CHK_ShowHitFX' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CHK_ShowState) == 0x000670, "Member 'UUI_Cheat_C::CHK_ShowState' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, CN_GunType) == 0x000678, "Member 'UUI_Cheat_C::CN_GunType' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, Ctrl_CommonButton) == 0x000680, "Member 'UUI_Cheat_C::Ctrl_CommonButton' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, ED_RepeatDuration) == 0x000688, "Member 'UUI_Cheat_C::ED_RepeatDuration' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_0) == 0x000690, "Member 'UUI_Cheat_C::SLIDE_Passive_0' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_1) == 0x000698, "Member 'UUI_Cheat_C::SLIDE_Passive_1' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_2) == 0x0006A0, "Member 'UUI_Cheat_C::SLIDE_Passive_2' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_3) == 0x0006A8, "Member 'UUI_Cheat_C::SLIDE_Passive_3' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_4) == 0x0006B0, "Member 'UUI_Cheat_C::SLIDE_Passive_4' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_5) == 0x0006B8, "Member 'UUI_Cheat_C::SLIDE_Passive_5' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_6) == 0x0006C0, "Member 'UUI_Cheat_C::SLIDE_Passive_6' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_7) == 0x0006C8, "Member 'UUI_Cheat_C::SLIDE_Passive_7' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, SLIDE_Passive_8) == 0x0006D0, "Member 'UUI_Cheat_C::SLIDE_Passive_8' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive0) == 0x0006D8, "Member 'UUI_Cheat_C::TXT_Passive0' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive1) == 0x0006E0, "Member 'UUI_Cheat_C::TXT_Passive1' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive2) == 0x0006E8, "Member 'UUI_Cheat_C::TXT_Passive2' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive3) == 0x0006F0, "Member 'UUI_Cheat_C::TXT_Passive3' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive4) == 0x0006F8, "Member 'UUI_Cheat_C::TXT_Passive4' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive5) == 0x000700, "Member 'UUI_Cheat_C::TXT_Passive5' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive6) == 0x000708, "Member 'UUI_Cheat_C::TXT_Passive6' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive7) == 0x000710, "Member 'UUI_Cheat_C::TXT_Passive7' has a wrong offset!");
static_assert(offsetof(UUI_Cheat_C, TXT_Passive8) == 0x000718, "Member 'UUI_Cheat_C::TXT_Passive8' has a wrong offset!");

}

