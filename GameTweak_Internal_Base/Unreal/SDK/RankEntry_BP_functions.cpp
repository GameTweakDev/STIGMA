#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: RankEntry_BP

#include "Basic.hpp"

#include "RankEntry_BP_classes.hpp"
#include "RankEntry_BP_parameters.hpp"


namespace SDK
{

// Function RankEntry_BP.RankEntry_BP_C.Set Ranking Data for Challenge
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FACK_ChallengeRead               _src                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// ERankingType                            _ranking_type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URankEntry_BP_C::Set_Ranking_Data_for_Challenge(const struct FACK_ChallengeRead& _src, ERankingType _ranking_type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RankEntry_BP_C", "Set Ranking Data for Challenge");

	Params::RankEntry_BP_C_Set_Ranking_Data_for_Challenge Parms{};

	Parms._src = std::move(_src);
	Parms._ranking_type = _ranking_type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RankEntry_BP.RankEntry_BP_C.SetRankingData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNetRankingEntry                 _src                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// ERankingType                            _ranking_type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URankEntry_BP_C::SetRankingData(const struct FNetRankingEntry& _src, ERankingType _ranking_type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RankEntry_BP_C", "SetRankingData");

	Params::RankEntry_BP_C_SetRankingData Parms{};

	Parms._src = std::move(_src);
	Parms._ranking_type = _ranking_type;

	UObject::ProcessEvent(Func, &Parms);
}

}

