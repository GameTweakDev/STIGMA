#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Challenge_MissionResult_Entry

#include "Basic.hpp"

#include "Challenge_MissionResult_Entry_classes.hpp"
#include "Challenge_MissionResult_Entry_parameters.hpp"


namespace SDK
{

// Function Challenge_MissionResult_Entry.Challenge_MissionResult_Entry_C.GetCheckedState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECheckBoxState                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

ECheckBoxState UChallenge_MissionResult_Entry_C::GetCheckedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_MissionResult_Entry_C", "GetCheckedState");

	Params::Challenge_MissionResult_Entry_C_GetCheckedState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Challenge_MissionResult_Entry.Challenge_MissionResult_Entry_C.InitWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMission*                         Param_TargetMission                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UChallenge_MissionResult_Entry_C::InitWidget(class UMission* Param_TargetMission)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_MissionResult_Entry_C", "InitWidget");

	Params::Challenge_MissionResult_Entry_C_InitWidget Parms{};

	Parms.Param_TargetMission = Param_TargetMission;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Challenge_MissionResult_Entry.Challenge_MissionResult_Entry_C.ShouldHideDetailValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UMissionCondition*>        NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_MissionResult_Entry_C::ShouldHideDetailValue(TArray<class UMissionCondition*>& NewParam, bool* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_MissionResult_Entry_C", "ShouldHideDetailValue");

	Params::Challenge_MissionResult_Entry_C_ShouldHideDetailValue Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function Challenge_MissionResult_Entry.Challenge_MissionResult_Entry_C.StartAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UChallenge_MissionResult_Entry_C::StartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_MissionResult_Entry_C", "StartAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Challenge_MissionResult_Entry.Challenge_MissionResult_Entry_C.StopAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UChallenge_MissionResult_Entry_C::StopAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_MissionResult_Entry_C", "StopAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Challenge_MissionResult_Entry.Challenge_MissionResult_Entry_C.IsClearMission
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Cleared                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallenge_MissionResult_Entry_C::IsClearMission(bool* Cleared) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Challenge_MissionResult_Entry_C", "IsClearMission");

	Params::Challenge_MissionResult_Entry_C_IsClearMission Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cleared != nullptr)
		*Cleared = Parms.Cleared;
}

}

