#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Challenge_ResultPopup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Challenge_ResultPopup.Challenge_ResultPopup_C
// 0x00E0 (0x0650 - 0x0570)
class UChallenge_ResultPopup_C final : public UPopupBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       StartAnim;                                         // 0x0578(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Bg_Line;                                           // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtr_HUD_Challenge_ScorePanel_Entry_C*  Ctr_HUD_Challenge_ScorePanel_Entry_Armor;          // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtr_HUD_Challenge_ScorePanel_Entry_C*  Ctr_HUD_Challenge_ScorePanel_Entry_BlackCoin;      // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtr_HUD_Challenge_ScorePanel_Entry_C*  Ctr_HUD_Challenge_ScorePanel_Entry_Gold;           // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_KeyIcon_C*                        Ctrl_KeyIcon;                                      // 0x05A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_254;                                         // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_Background;                                    // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Line;                                          // 0x05B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           SkipPanel;                                         // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Point_Inc;                                     // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_PrevBest;                                      // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         TXT_Rich_Title;                                    // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Round;                                         // 0x05E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Score;                                         // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FChallengeResult                       Result;                                            // 0x05F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FChallengeResult                       PrevResult;                                        // 0x0610(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         CurrentScore;                                      // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUpdateNewScore;                                  // 0x0634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C04[0x3];                                     // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         PrevBestScore;                                     // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C05[0x4];                                     // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAudioComponent*                        CoinSound;                                         // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClosing;                                         // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanClose;                                          // 0x0649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckCanClose();
	void ClosePopup();
	void Construct();
	void DelayClose();
	void Destruct();
	void DriveScore(double Delta);
	void ExecuteUbergraph_Challenge_ResultPopup(int32 EntryPoint);
	struct FSlateBrush Get_Bg_Line_Brush_0();
	class FText Get_TXT_Round_Text_0();
	class FText GetResultText();
	void InitWidget(const struct FChallengeResult& Param_Result, const struct FChallengeResult& Param_PrevResult);
	void PlayStartAnim_Score(class UCtr_HUD_Challenge_ScorePanel_Entry_C* Widget);
	void PlayStartAnim_ScoreEntry();
	void PlayStartSound();
	void SequenceEvent__ENTRYPOINTChallenge_ResultPopup();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateResult();

	struct FKey GetCloseKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Challenge_ResultPopup_C">();
	}
	static class UChallenge_ResultPopup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallenge_ResultPopup_C>();
	}
};
static_assert(alignof(UChallenge_ResultPopup_C) == 0x000008, "Wrong alignment on UChallenge_ResultPopup_C");
static_assert(sizeof(UChallenge_ResultPopup_C) == 0x000650, "Wrong size on UChallenge_ResultPopup_C");
static_assert(offsetof(UChallenge_ResultPopup_C, UberGraphFrame) == 0x000570, "Member 'UChallenge_ResultPopup_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, StartAnim) == 0x000578, "Member 'UChallenge_ResultPopup_C::StartAnim' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Bg_Line) == 0x000580, "Member 'UChallenge_ResultPopup_C::Bg_Line' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Ctr_HUD_Challenge_ScorePanel_Entry_Armor) == 0x000588, "Member 'UChallenge_ResultPopup_C::Ctr_HUD_Challenge_ScorePanel_Entry_Armor' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Ctr_HUD_Challenge_ScorePanel_Entry_BlackCoin) == 0x000590, "Member 'UChallenge_ResultPopup_C::Ctr_HUD_Challenge_ScorePanel_Entry_BlackCoin' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Ctr_HUD_Challenge_ScorePanel_Entry_Gold) == 0x000598, "Member 'UChallenge_ResultPopup_C::Ctr_HUD_Challenge_ScorePanel_Entry_Gold' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Ctrl_KeyIcon) == 0x0005A0, "Member 'UChallenge_ResultPopup_C::Ctrl_KeyIcon' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Image_254) == 0x0005A8, "Member 'UChallenge_ResultPopup_C::Image_254' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, IMG_Background) == 0x0005B0, "Member 'UChallenge_ResultPopup_C::IMG_Background' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Img_Line) == 0x0005B8, "Member 'UChallenge_ResultPopup_C::Img_Line' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, SkipPanel) == 0x0005C0, "Member 'UChallenge_ResultPopup_C::SkipPanel' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, TXT_Point_Inc) == 0x0005C8, "Member 'UChallenge_ResultPopup_C::TXT_Point_Inc' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, TXT_PrevBest) == 0x0005D0, "Member 'UChallenge_ResultPopup_C::TXT_PrevBest' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, TXT_Rich_Title) == 0x0005D8, "Member 'UChallenge_ResultPopup_C::TXT_Rich_Title' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, TXT_Round) == 0x0005E0, "Member 'UChallenge_ResultPopup_C::TXT_Round' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, TXT_Score) == 0x0005E8, "Member 'UChallenge_ResultPopup_C::TXT_Score' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, Result) == 0x0005F0, "Member 'UChallenge_ResultPopup_C::Result' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, PrevResult) == 0x000610, "Member 'UChallenge_ResultPopup_C::PrevResult' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, CurrentScore) == 0x000630, "Member 'UChallenge_ResultPopup_C::CurrentScore' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, IsUpdateNewScore) == 0x000634, "Member 'UChallenge_ResultPopup_C::IsUpdateNewScore' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, PrevBestScore) == 0x000638, "Member 'UChallenge_ResultPopup_C::PrevBestScore' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, CoinSound) == 0x000640, "Member 'UChallenge_ResultPopup_C::CoinSound' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, IsClosing) == 0x000648, "Member 'UChallenge_ResultPopup_C::IsClosing' has a wrong offset!");
static_assert(offsetof(UChallenge_ResultPopup_C, CanClose) == 0x000649, "Member 'UChallenge_ResultPopup_C::CanClose' has a wrong offset!");

}

