#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Question_SelectSingle

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "Stigma_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Question_SelectSingle.UI_Question_SelectSingle_C
// 0x00B0 (0x0620 - 0x0570)
class UUI_Question_SelectSingle_C final : public UCtrl_QuestionBase
{
public:
	class UVerticalBox*                           Questions;                                         // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSurveyQuestion                        Question;                                          // 0x0578(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UCtrl_Survey_SelectSingle_C*>    Ctrls;                                             // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         SelectedNumber;                                    // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD2[0x4];                                     // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Opinion;                                           // 0x0608(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SetQuestion(struct FSurveyQuestion& _question);
	void OnSelectNumber(int32 _number, const class FText& _text);
	struct FSurveyAnswer OnGetAnswer();
	void ExclusiveSelectNumber(int32 _number);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Question_SelectSingle_C">();
	}
	static class UUI_Question_SelectSingle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Question_SelectSingle_C>();
	}
};
static_assert(alignof(UUI_Question_SelectSingle_C) == 0x000008, "Wrong alignment on UUI_Question_SelectSingle_C");
static_assert(sizeof(UUI_Question_SelectSingle_C) == 0x000620, "Wrong size on UUI_Question_SelectSingle_C");
static_assert(offsetof(UUI_Question_SelectSingle_C, Questions) == 0x000570, "Member 'UUI_Question_SelectSingle_C::Questions' has a wrong offset!");
static_assert(offsetof(UUI_Question_SelectSingle_C, Question) == 0x000578, "Member 'UUI_Question_SelectSingle_C::Question' has a wrong offset!");
static_assert(offsetof(UUI_Question_SelectSingle_C, Ctrls) == 0x0005F0, "Member 'UUI_Question_SelectSingle_C::Ctrls' has a wrong offset!");
static_assert(offsetof(UUI_Question_SelectSingle_C, SelectedNumber) == 0x000600, "Member 'UUI_Question_SelectSingle_C::SelectedNumber' has a wrong offset!");
static_assert(offsetof(UUI_Question_SelectSingle_C, Opinion) == 0x000608, "Member 'UUI_Question_SelectSingle_C::Opinion' has a wrong offset!");

}

