#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_ModeRecords_BP

#include "Basic.hpp"

#include "Stigma_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_ModeRecords_BP.UI_ModeRecords_BP_C
// 0x00C0 (0x05D0 - 0x0510)
class UUI_ModeRecords_BP_C final : public UUI_ModeRecords
{
public:
	class UImage*                                 Image;                                             // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Bg_01;                                         // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Bg_02;                                         // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Bg_03;                                         // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_ModeRecordItem_BP_C*                ModeRecord1;                                       // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_ModeRecordItem_BP_C*                ModeRecord2;                                       // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_ModeRecordItem_BP_C*                ModeRecord3;                                       // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UListView*                              NoUse_LISTVIEW_Record;                             // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Title;                                             // 0x0558(0x0018)(Edit, BlueprintVisible)
	class FText                                   Desc;                                              // 0x0570(0x0018)(Edit, BlueprintVisible)
	class FText                                   Record1;                                           // 0x0588(0x0018)(Edit, BlueprintVisible)
	class FText                                   Record2;                                           // 0x05A0(0x0018)(Edit, BlueprintVisible)
	class FText                                   Record3;                                           // 0x05B8(0x0018)(Edit, BlueprintVisible)

public:
	void InitText();
	bool OnSynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_ModeRecords_BP_C">();
	}
	static class UUI_ModeRecords_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_ModeRecords_BP_C>();
	}
};
static_assert(alignof(UUI_ModeRecords_BP_C) == 0x000008, "Wrong alignment on UUI_ModeRecords_BP_C");
static_assert(sizeof(UUI_ModeRecords_BP_C) == 0x0005D0, "Wrong size on UUI_ModeRecords_BP_C");
static_assert(offsetof(UUI_ModeRecords_BP_C, Image) == 0x000510, "Member 'UUI_ModeRecords_BP_C::Image' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Image_1) == 0x000518, "Member 'UUI_ModeRecords_BP_C::Image_1' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Img_Bg_01) == 0x000520, "Member 'UUI_ModeRecords_BP_C::Img_Bg_01' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Img_Bg_02) == 0x000528, "Member 'UUI_ModeRecords_BP_C::Img_Bg_02' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Img_Bg_03) == 0x000530, "Member 'UUI_ModeRecords_BP_C::Img_Bg_03' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, ModeRecord1) == 0x000538, "Member 'UUI_ModeRecords_BP_C::ModeRecord1' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, ModeRecord2) == 0x000540, "Member 'UUI_ModeRecords_BP_C::ModeRecord2' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, ModeRecord3) == 0x000548, "Member 'UUI_ModeRecords_BP_C::ModeRecord3' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, NoUse_LISTVIEW_Record) == 0x000550, "Member 'UUI_ModeRecords_BP_C::NoUse_LISTVIEW_Record' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Title) == 0x000558, "Member 'UUI_ModeRecords_BP_C::Title' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Desc) == 0x000570, "Member 'UUI_ModeRecords_BP_C::Desc' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Record1) == 0x000588, "Member 'UUI_ModeRecords_BP_C::Record1' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Record2) == 0x0005A0, "Member 'UUI_ModeRecords_BP_C::Record2' has a wrong offset!");
static_assert(offsetof(UUI_ModeRecords_BP_C, Record3) == 0x0005B8, "Member 'UUI_ModeRecords_BP_C::Record3' has a wrong offset!");

}

