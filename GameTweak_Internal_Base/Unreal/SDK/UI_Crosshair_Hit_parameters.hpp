#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Crosshair_Hit

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function UI_Crosshair_Hit.UI_Crosshair_Hit_C.DriveAnimation
// 0x0080 (0x0080 - 0x0000)
struct UI_Crosshair_Hit_C_DriveAnimation final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Factor;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_393F[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeColor_A_ImplicitCast;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Hit_C_DriveAnimation) == 0x000008, "Wrong alignment on UI_Crosshair_Hit_C_DriveAnimation");
static_assert(sizeof(UI_Crosshair_Hit_C_DriveAnimation) == 0x000080, "Wrong size on UI_Crosshair_Hit_C_DriveAnimation");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, Delta) == 0x000000, "Member 'UI_Crosshair_Hit_C_DriveAnimation::Delta' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, Factor) == 0x000008, "Member 'UI_Crosshair_Hit_C_DriveAnimation::Factor' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_Lerp_ReturnValue) == 0x000010, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_BreakColor_R) == 0x000018, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_BreakColor_G) == 0x00001C, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_BreakColor_B) == 0x000020, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_BreakColor_A) == 0x000024, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_MakeColor_ReturnValue) == 0x000028, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000038, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_Lerp_ReturnValue_1) == 0x000048, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_MakeVector2D_ReturnValue) == 0x000050, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_FClamp_ReturnValue) == 0x000068, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000070, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_DriveAnimation, CallFunc_MakeColor_A_ImplicitCast) == 0x000078, "Member 'UI_Crosshair_Hit_C_DriveAnimation::CallFunc_MakeColor_A_ImplicitCast' has a wrong offset!");

// Function UI_Crosshair_Hit.UI_Crosshair_Hit_C.ExecuteUbergraph_UI_Crosshair_Hit
// 0x0048 (0x0048 - 0x0000)
struct UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DriveAnimation_delta_ImplicitCast;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit) == 0x000008, "Wrong alignment on UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit");
static_assert(sizeof(UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit) == 0x000048, "Wrong size on UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit");
static_assert(offsetof(UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit, EntryPoint) == 0x000000, "Member 'UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit, K2Node_Event_MyGeometry) == 0x000004, "Member 'UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit, CallFunc_DriveAnimation_delta_ImplicitCast) == 0x000040, "Member 'UI_Crosshair_Hit_C_ExecuteUbergraph_UI_Crosshair_Hit::CallFunc_DriveAnimation_delta_ImplicitCast' has a wrong offset!");

// Function UI_Crosshair_Hit.UI_Crosshair_Hit_C.OnHit
// 0x0340 (0x0340 - 0x0000)
struct UI_Crosshair_Hit_C_OnHit final
{
public:
	struct FHitData                               Hit_data;                                          // 0x0000(0x00A8)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class ACharaBase*                             Chara;                                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ACharaBase*                             K2Node_DynamicCast_AsChara_Base;                   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBodyParts                                    CallFunc_GetPartsByBone_ReturnValue;               // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3940[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue;         // 0x00C0(0x00D0)()
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue_1;       // 0x0190(0x00D0)()
	struct FSlateBrush                            CallFunc_MakeBrushFromTexture_ReturnValue_2;       // 0x0260(0x00D0)()
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Hit_C_OnHit) == 0x000010, "Wrong alignment on UI_Crosshair_Hit_C_OnHit");
static_assert(sizeof(UI_Crosshair_Hit_C_OnHit) == 0x000340, "Wrong size on UI_Crosshair_Hit_C_OnHit");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, Hit_data) == 0x000000, "Member 'UI_Crosshair_Hit_C_OnHit::Hit_data' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, Chara) == 0x0000A8, "Member 'UI_Crosshair_Hit_C_OnHit::Chara' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, K2Node_DynamicCast_AsChara_Base) == 0x0000B0, "Member 'UI_Crosshair_Hit_C_OnHit::K2Node_DynamicCast_AsChara_Base' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'UI_Crosshair_Hit_C_OnHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000B9, "Member 'UI_Crosshair_Hit_C_OnHit::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, CallFunc_GetPartsByBone_ReturnValue) == 0x0000BA, "Member 'UI_Crosshair_Hit_C_OnHit::CallFunc_GetPartsByBone_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, K2Node_SwitchEnum_CmpSuccess) == 0x0000BB, "Member 'UI_Crosshair_Hit_C_OnHit::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, CallFunc_MakeBrushFromTexture_ReturnValue) == 0x0000C0, "Member 'UI_Crosshair_Hit_C_OnHit::CallFunc_MakeBrushFromTexture_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, CallFunc_MakeBrushFromTexture_ReturnValue_1) == 0x000190, "Member 'UI_Crosshair_Hit_C_OnHit::CallFunc_MakeBrushFromTexture_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, CallFunc_MakeBrushFromTexture_ReturnValue_2) == 0x000260, "Member 'UI_Crosshair_Hit_C_OnHit::CallFunc_MakeBrushFromTexture_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_OnHit, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000330, "Member 'UI_Crosshair_Hit_C_OnHit::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function UI_Crosshair_Hit.UI_Crosshair_Hit_C.Tick
// 0x003C (0x003C - 0x0000)
struct UI_Crosshair_Hit_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Hit_C_Tick) == 0x000004, "Wrong alignment on UI_Crosshair_Hit_C_Tick");
static_assert(sizeof(UI_Crosshair_Hit_C_Tick) == 0x00003C, "Wrong size on UI_Crosshair_Hit_C_Tick");
static_assert(offsetof(UI_Crosshair_Hit_C_Tick, MyGeometry) == 0x000000, "Member 'UI_Crosshair_Hit_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Hit_C_Tick, InDeltaTime) == 0x000038, "Member 'UI_Crosshair_Hit_C_Tick::InDeltaTime' has a wrong offset!");

}

