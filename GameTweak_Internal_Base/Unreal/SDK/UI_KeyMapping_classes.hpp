#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_KeyMapping

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Stigma_structs.hpp"
#include "Stigma_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_KeyMapping.UI_KeyMapping_C
// 0x0048 (0x0570 - 0x0528)
class UUI_KeyMapping_C final : public UUI_KeyMappingBase
{
public:
	class UCtrl_KeyIcon_C*                        Ctrl_KeyIcon_DefaultKey;                           // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_KeyIcon_C*                        Ctrl_KeyIcon_MultiKey;                             // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         H_MultiKey;                                        // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FKey                                   DefaultKey_Preview_DEV;                            // 0x0540(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FKey                                   MultiKey_Preview_DEV;                              // 0x0558(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	bool OnSynchronizeProperties();
	void UpdateUI();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_KeyMapping_C">();
	}
	static class UUI_KeyMapping_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_KeyMapping_C>();
	}
};
static_assert(alignof(UUI_KeyMapping_C) == 0x000008, "Wrong alignment on UUI_KeyMapping_C");
static_assert(sizeof(UUI_KeyMapping_C) == 0x000570, "Wrong size on UUI_KeyMapping_C");
static_assert(offsetof(UUI_KeyMapping_C, Ctrl_KeyIcon_DefaultKey) == 0x000528, "Member 'UUI_KeyMapping_C::Ctrl_KeyIcon_DefaultKey' has a wrong offset!");
static_assert(offsetof(UUI_KeyMapping_C, Ctrl_KeyIcon_MultiKey) == 0x000530, "Member 'UUI_KeyMapping_C::Ctrl_KeyIcon_MultiKey' has a wrong offset!");
static_assert(offsetof(UUI_KeyMapping_C, H_MultiKey) == 0x000538, "Member 'UUI_KeyMapping_C::H_MultiKey' has a wrong offset!");
static_assert(offsetof(UUI_KeyMapping_C, DefaultKey_Preview_DEV) == 0x000540, "Member 'UUI_KeyMapping_C::DefaultKey_Preview_DEV' has a wrong offset!");
static_assert(offsetof(UUI_KeyMapping_C, MultiKey_Preview_DEV) == 0x000558, "Member 'UUI_KeyMapping_C::MultiKey_Preview_DEV' has a wrong offset!");

}

