#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: WIDGET_ModeAndMap

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_ModeAndMap.WIDGET_ModeAndMap_C
// 0x0050 (0x0530 - 0x04E0)
class UWIDGET_ModeAndMap_C final : public UAnimatableWidget
{
public:
	class UWidgetAnimation*                       UI_OnShow;                                         // 0x04E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button_164;                                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_MapIcon;                                       // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_MiniMap;                                       // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IMG_Mode;                                          // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_MapName;                                       // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Objective;                                     // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EGameMode                                     GameMode;                                          // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D61[0x7];                                     // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 MapName;                                           // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	bool OnSynchronizeProperties();
	void Set(EGameMode _game_mode, const class FString& _map_name);
	void UpdateGameMode();
	void UpdateMap();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_ModeAndMap_C">();
	}
	static class UWIDGET_ModeAndMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_ModeAndMap_C>();
	}
};
static_assert(alignof(UWIDGET_ModeAndMap_C) == 0x000008, "Wrong alignment on UWIDGET_ModeAndMap_C");
static_assert(sizeof(UWIDGET_ModeAndMap_C) == 0x000530, "Wrong size on UWIDGET_ModeAndMap_C");
static_assert(offsetof(UWIDGET_ModeAndMap_C, UI_OnShow) == 0x0004E0, "Member 'UWIDGET_ModeAndMap_C::UI_OnShow' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, Button_164) == 0x0004E8, "Member 'UWIDGET_ModeAndMap_C::Button_164' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, IMG_MapIcon) == 0x0004F0, "Member 'UWIDGET_ModeAndMap_C::IMG_MapIcon' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, IMG_MiniMap) == 0x0004F8, "Member 'UWIDGET_ModeAndMap_C::IMG_MiniMap' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, IMG_Mode) == 0x000500, "Member 'UWIDGET_ModeAndMap_C::IMG_Mode' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, TXT_MapName) == 0x000508, "Member 'UWIDGET_ModeAndMap_C::TXT_MapName' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, TXT_Objective) == 0x000510, "Member 'UWIDGET_ModeAndMap_C::TXT_Objective' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, GameMode) == 0x000518, "Member 'UWIDGET_ModeAndMap_C::GameMode' has a wrong offset!");
static_assert(offsetof(UWIDGET_ModeAndMap_C, MapName) == 0x000520, "Member 'UWIDGET_ModeAndMap_C::MapName' has a wrong offset!");

}

