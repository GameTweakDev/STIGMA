#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Marker_Chara_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "Stigma_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Marker_Chara_BP.Marker_Chara_BP_C
// 0x0058 (0x0580 - 0x0528)
class UMarker_Chara_BP_C final : public UMarker_Chara
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0528(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           AliveMark;                                         // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BountyTargetMark;                                  // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DeadMark;                                          // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainPanel;                                         // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MyArrow;                                           // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MyIcon;                                            // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OthersArrow;                                       // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OthersIcon;                                        // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IconMaterial;                                      // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ECharaMarkerState                             _MarkerState;                                      // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSide                                   _PlayerSide;                                       // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _Is_spectated;                                     // 0x057A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ChangeNewState(ECharaMarkerState _new_state);
	void ChangeState_AliveState();
	void ChangeState_BountyTarget();
	void ChangeState_Dead();
	void ChangeVisibilityWRTState();
	void Construct();
	void DriveState();
	void ExecuteUbergraph_Marker_Chara_BP(int32 EntryPoint);
	void GetTeamColor(EPlayerSide _side, struct FLinearColor* _color);
	void IsSpectatedChara(bool* _is);
	bool OnBindActor(class AActor* _Actor);
	bool OnTick(const struct FGeometry& MyGeometry, float _delta);
	void UpdateSpectating();

	void GetLocalPlayerState(class APlayerState** _player_state) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Marker_Chara_BP_C">();
	}
	static class UMarker_Chara_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarker_Chara_BP_C>();
	}
};
static_assert(alignof(UMarker_Chara_BP_C) == 0x000008, "Wrong alignment on UMarker_Chara_BP_C");
static_assert(sizeof(UMarker_Chara_BP_C) == 0x000580, "Wrong size on UMarker_Chara_BP_C");
static_assert(offsetof(UMarker_Chara_BP_C, UberGraphFrame) == 0x000528, "Member 'UMarker_Chara_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, AliveMark) == 0x000530, "Member 'UMarker_Chara_BP_C::AliveMark' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, BountyTargetMark) == 0x000538, "Member 'UMarker_Chara_BP_C::BountyTargetMark' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, DeadMark) == 0x000540, "Member 'UMarker_Chara_BP_C::DeadMark' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, MainPanel) == 0x000548, "Member 'UMarker_Chara_BP_C::MainPanel' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, MyArrow) == 0x000550, "Member 'UMarker_Chara_BP_C::MyArrow' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, MyIcon) == 0x000558, "Member 'UMarker_Chara_BP_C::MyIcon' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, OthersArrow) == 0x000560, "Member 'UMarker_Chara_BP_C::OthersArrow' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, OthersIcon) == 0x000568, "Member 'UMarker_Chara_BP_C::OthersIcon' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, IconMaterial) == 0x000570, "Member 'UMarker_Chara_BP_C::IconMaterial' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, _MarkerState) == 0x000578, "Member 'UMarker_Chara_BP_C::_MarkerState' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, _PlayerSide) == 0x000579, "Member 'UMarker_Chara_BP_C::_PlayerSide' has a wrong offset!");
static_assert(offsetof(UMarker_Chara_BP_C, _Is_spectated) == 0x00057A, "Member 'UMarker_Chara_BP_C::_Is_spectated' has a wrong offset!");

}

