#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: ActionGraph

#include "Basic.hpp"

#include "ActionGraph_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BPGLib_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// Class ActionGraph.ActionGraph
// 0x0208 (0x0230 - 0x0028)
class UActionGraph final : public UObject
{
public:
	class UActionGraphNode_Entry*                 _EntryNode;                                        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _Name;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 _Description;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeleton*                              _Skeleton;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FActionStock                           _StockCount;                                       // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          _IsSupportedAnimRate;                              // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _EnableAutoAim;                                    // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C59[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              _ActiveHitRange;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _IsChangeStanceAction;                             // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EActionUsage                                  _Usage;                                            // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAIActionUsageDirection                       _UsageDirection;                                   // 0x00BA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _IsMovable;                                        // 0x00BB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C5A[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              _AttackableRange;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _StartingDelay;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _TotalDamage;                                      // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _MaxSummonBotCount;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C5B[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UActionGraphNode*>               _Nodes;                                            // 0x00E0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _IsActivation;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _IsPossibleActionLyingOrProneState;                // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C5C[0x5E];                                    // 0x00F2(0x005E)(Fixing Size After Last Property [ Dumper-69 ])
	class UActionGraph*                           _CloneSource;                                      // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class ACharacter*, class UActionGraph*>  _CloneMap;                                         // 0x0158(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UActionGraph*>                   _UnusedClones;                                     // 0x01A8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C5D[0x78];                                    // 0x01B8(0x0078)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	float GetStockCooltimeElapsed();

	const struct FVector2D GetActiveHitRange() const;
	const struct FVector2D GetAttackableRange() const;
	float GetCalculatedFinalStockCooltime() const;
	int32 GetDefaultMaxStockCount() const;
	int32 GetMaxStockCount() const;
	float GetStockCooltime() const;
	float GetStockCooltimeProgress() const;
	int32 GetStockCount() const;
	EStockType GetStockType() const;
	EActionUsage GetUsage() const;
	bool IsBoundStockCoolTimeDelegate() const;
	bool IsChangeStanceAction() const;
	bool IsDelayTime() const;
	bool IsRunning() const;
	bool IsSupportedAnimRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraph">();
	}
	static class UActionGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraph>();
	}
};
static_assert(alignof(UActionGraph) == 0x000008, "Wrong alignment on UActionGraph");
static_assert(sizeof(UActionGraph) == 0x000230, "Wrong size on UActionGraph");
static_assert(offsetof(UActionGraph, _EntryNode) == 0x000028, "Member 'UActionGraph::_EntryNode' has a wrong offset!");
static_assert(offsetof(UActionGraph, _Name) == 0x000030, "Member 'UActionGraph::_Name' has a wrong offset!");
static_assert(offsetof(UActionGraph, _Description) == 0x000038, "Member 'UActionGraph::_Description' has a wrong offset!");
static_assert(offsetof(UActionGraph, _Skeleton) == 0x000048, "Member 'UActionGraph::_Skeleton' has a wrong offset!");
static_assert(offsetof(UActionGraph, _StockCount) == 0x000050, "Member 'UActionGraph::_StockCount' has a wrong offset!");
static_assert(offsetof(UActionGraph, _IsSupportedAnimRate) == 0x0000A0, "Member 'UActionGraph::_IsSupportedAnimRate' has a wrong offset!");
static_assert(offsetof(UActionGraph, _EnableAutoAim) == 0x0000A1, "Member 'UActionGraph::_EnableAutoAim' has a wrong offset!");
static_assert(offsetof(UActionGraph, _ActiveHitRange) == 0x0000A8, "Member 'UActionGraph::_ActiveHitRange' has a wrong offset!");
static_assert(offsetof(UActionGraph, _IsChangeStanceAction) == 0x0000B8, "Member 'UActionGraph::_IsChangeStanceAction' has a wrong offset!");
static_assert(offsetof(UActionGraph, _Usage) == 0x0000B9, "Member 'UActionGraph::_Usage' has a wrong offset!");
static_assert(offsetof(UActionGraph, _UsageDirection) == 0x0000BA, "Member 'UActionGraph::_UsageDirection' has a wrong offset!");
static_assert(offsetof(UActionGraph, _IsMovable) == 0x0000BB, "Member 'UActionGraph::_IsMovable' has a wrong offset!");
static_assert(offsetof(UActionGraph, _AttackableRange) == 0x0000C0, "Member 'UActionGraph::_AttackableRange' has a wrong offset!");
static_assert(offsetof(UActionGraph, _StartingDelay) == 0x0000D0, "Member 'UActionGraph::_StartingDelay' has a wrong offset!");
static_assert(offsetof(UActionGraph, _TotalDamage) == 0x0000D4, "Member 'UActionGraph::_TotalDamage' has a wrong offset!");
static_assert(offsetof(UActionGraph, _MaxSummonBotCount) == 0x0000D8, "Member 'UActionGraph::_MaxSummonBotCount' has a wrong offset!");
static_assert(offsetof(UActionGraph, _Nodes) == 0x0000E0, "Member 'UActionGraph::_Nodes' has a wrong offset!");
static_assert(offsetof(UActionGraph, _IsActivation) == 0x0000F0, "Member 'UActionGraph::_IsActivation' has a wrong offset!");
static_assert(offsetof(UActionGraph, _IsPossibleActionLyingOrProneState) == 0x0000F1, "Member 'UActionGraph::_IsPossibleActionLyingOrProneState' has a wrong offset!");
static_assert(offsetof(UActionGraph, _CloneSource) == 0x000150, "Member 'UActionGraph::_CloneSource' has a wrong offset!");
static_assert(offsetof(UActionGraph, _CloneMap) == 0x000158, "Member 'UActionGraph::_CloneMap' has a wrong offset!");
static_assert(offsetof(UActionGraph, _UnusedClones) == 0x0001A8, "Member 'UActionGraph::_UnusedClones' has a wrong offset!");

// Class ActionGraph.ActionGraphBaseObject
// 0x0000 (0x0028 - 0x0028)
class UActionGraphBaseObject : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphBaseObject">();
	}
	static class UActionGraphBaseObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphBaseObject>();
	}
};
static_assert(alignof(UActionGraphBaseObject) == 0x000008, "Wrong alignment on UActionGraphBaseObject");
static_assert(sizeof(UActionGraphBaseObject) == 0x000028, "Wrong size on UActionGraphBaseObject");

// Class ActionGraph.ActionGraphCharacter
// 0x0010 (0x15F0 - 0x15E0)
#pragma pack(push, 0x1)
class alignas(0x10) AActionGraphCharacter : public ABPGCharacter
{
public:
	class UActionGraphDriverComponent*            _ActionGraphDriver;                                // 0x15E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool IsPlayingPassiveAction(bool _is_check_passive_standing) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCharacter">();
	}
	static class AActionGraphCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AActionGraphCharacter>();
	}
};
#pragma pack(pop)
static_assert(alignof(AActionGraphCharacter) == 0x000010, "Wrong alignment on AActionGraphCharacter");
static_assert(sizeof(AActionGraphCharacter) == 0x0015F0, "Wrong size on AActionGraphCharacter");
static_assert(offsetof(AActionGraphCharacter, _ActionGraphDriver) == 0x0015E0, "Member 'AActionGraphCharacter::_ActionGraphDriver' has a wrong offset!");

// Class ActionGraph.ActionGraphCondition
// 0x0008 (0x0030 - 0x0028)
class UActionGraphCondition : public UActionGraphBaseObject
{
public:
	bool                                          IsInvertCondition;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5E[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition">();
	}
	static class UActionGraphCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition>();
	}
};
static_assert(alignof(UActionGraphCondition) == 0x000008, "Wrong alignment on UActionGraphCondition");
static_assert(sizeof(UActionGraphCondition) == 0x000030, "Wrong size on UActionGraphCondition");
static_assert(offsetof(UActionGraphCondition, IsInvertCondition) == 0x000028, "Member 'UActionGraphCondition::IsInvertCondition' has a wrong offset!");

// Class ActionGraph.ActionGraphConditionSet
// 0x0010 (0x0040 - 0x0030)
class UActionGraphConditionSet : public UActionGraphCondition
{
public:
	TArray<class UActionGraphCondition*>          _Conditions;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphConditionSet">();
	}
	static class UActionGraphConditionSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphConditionSet>();
	}
};
static_assert(alignof(UActionGraphConditionSet) == 0x000008, "Wrong alignment on UActionGraphConditionSet");
static_assert(sizeof(UActionGraphConditionSet) == 0x000040, "Wrong size on UActionGraphConditionSet");
static_assert(offsetof(UActionGraphConditionSet, _Conditions) == 0x000030, "Member 'UActionGraphConditionSet::_Conditions' has a wrong offset!");

// Class ActionGraph.ActionGraphCondition_OR
// 0x0000 (0x0040 - 0x0040)
class UActionGraphCondition_OR final : public UActionGraphConditionSet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition_OR">();
	}
	static class UActionGraphCondition_OR* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition_OR>();
	}
};
static_assert(alignof(UActionGraphCondition_OR) == 0x000008, "Wrong alignment on UActionGraphCondition_OR");
static_assert(sizeof(UActionGraphCondition_OR) == 0x000040, "Wrong size on UActionGraphCondition_OR");

// Class ActionGraph.ActionGraphCondition_AND
// 0x0000 (0x0040 - 0x0040)
class UActionGraphCondition_AND final : public UActionGraphConditionSet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition_AND">();
	}
	static class UActionGraphCondition_AND* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition_AND>();
	}
};
static_assert(alignof(UActionGraphCondition_AND) == 0x000008, "Wrong alignment on UActionGraphCondition_AND");
static_assert(sizeof(UActionGraphCondition_AND) == 0x000040, "Wrong size on UActionGraphCondition_AND");

// Class ActionGraph.ActionGraphCondition_AnimTime
// 0x0008 (0x0038 - 0x0030)
class UActionGraphCondition_AnimTime final : public UActionGraphCondition
{
public:
	float                                         _RemainTime;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C5F[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition_AnimTime">();
	}
	static class UActionGraphCondition_AnimTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition_AnimTime>();
	}
};
static_assert(alignof(UActionGraphCondition_AnimTime) == 0x000008, "Wrong alignment on UActionGraphCondition_AnimTime");
static_assert(sizeof(UActionGraphCondition_AnimTime) == 0x000038, "Wrong size on UActionGraphCondition_AnimTime");
static_assert(offsetof(UActionGraphCondition_AnimTime, _RemainTime) == 0x000030, "Member 'UActionGraphCondition_AnimTime::_RemainTime' has a wrong offset!");

// Class ActionGraph.ActionGraphCondition_Blackboard
// 0x0018 (0x0048 - 0x0030)
class UActionGraphCondition_Blackboard final : public UActionGraphCondition
{
public:
	ECompare                                      Compare;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C60[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   Key;                                               // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Value;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsComponentBlackboard;                             // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C61[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition_Blackboard">();
	}
	static class UActionGraphCondition_Blackboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition_Blackboard>();
	}
};
static_assert(alignof(UActionGraphCondition_Blackboard) == 0x000008, "Wrong alignment on UActionGraphCondition_Blackboard");
static_assert(sizeof(UActionGraphCondition_Blackboard) == 0x000048, "Wrong size on UActionGraphCondition_Blackboard");
static_assert(offsetof(UActionGraphCondition_Blackboard, Compare) == 0x000030, "Member 'UActionGraphCondition_Blackboard::Compare' has a wrong offset!");
static_assert(offsetof(UActionGraphCondition_Blackboard, Key) == 0x000034, "Member 'UActionGraphCondition_Blackboard::Key' has a wrong offset!");
static_assert(offsetof(UActionGraphCondition_Blackboard, Value) == 0x00003C, "Member 'UActionGraphCondition_Blackboard::Value' has a wrong offset!");
static_assert(offsetof(UActionGraphCondition_Blackboard, IsComponentBlackboard) == 0x000040, "Member 'UActionGraphCondition_Blackboard::IsComponentBlackboard' has a wrong offset!");

// Class ActionGraph.ActionGraphCondition_Directional
// 0x0008 (0x0038 - 0x0030)
class UActionGraphCondition_Directional final : public UActionGraphCondition
{
public:
	EInputDirectionSpace                          _Space;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDirections                                   _direction;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESliceType                                    _SliceType;                                        // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C62[0x5];                                     // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition_Directional">();
	}
	static class UActionGraphCondition_Directional* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition_Directional>();
	}
};
static_assert(alignof(UActionGraphCondition_Directional) == 0x000008, "Wrong alignment on UActionGraphCondition_Directional");
static_assert(sizeof(UActionGraphCondition_Directional) == 0x000038, "Wrong size on UActionGraphCondition_Directional");
static_assert(offsetof(UActionGraphCondition_Directional, _Space) == 0x000030, "Member 'UActionGraphCondition_Directional::_Space' has a wrong offset!");
static_assert(offsetof(UActionGraphCondition_Directional, _direction) == 0x000031, "Member 'UActionGraphCondition_Directional::_direction' has a wrong offset!");
static_assert(offsetof(UActionGraphCondition_Directional, _SliceType) == 0x000032, "Member 'UActionGraphCondition_Directional::_SliceType' has a wrong offset!");

// Class ActionGraph.ActionGraphCondition_StockCount
// 0x0008 (0x0038 - 0x0030)
class UActionGraphCondition_StockCount final : public UActionGraphCondition
{
public:
	int32                                         _StockValue;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECompare                                      _Operator;                                         // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C63[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphCondition_StockCount">();
	}
	static class UActionGraphCondition_StockCount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphCondition_StockCount>();
	}
};
static_assert(alignof(UActionGraphCondition_StockCount) == 0x000008, "Wrong alignment on UActionGraphCondition_StockCount");
static_assert(sizeof(UActionGraphCondition_StockCount) == 0x000038, "Wrong size on UActionGraphCondition_StockCount");
static_assert(offsetof(UActionGraphCondition_StockCount, _StockValue) == 0x000030, "Member 'UActionGraphCondition_StockCount::_StockValue' has a wrong offset!");
static_assert(offsetof(UActionGraphCondition_StockCount, _Operator) == 0x000034, "Member 'UActionGraphCondition_StockCount::_Operator' has a wrong offset!");

// Class ActionGraph.ActionGraphDriverComponent
// 0x0250 (0x02F0 - 0x00A0)
class alignas(0x10) UActionGraphDriverComponent final : public UActorComponent
{
public:
	uint8                                         Pad_1C64[0x10];                                    // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-69 ])
	class UActionGraph*                           _CurrentActionGraph;                               // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UActionGraph*>                   _ActionGraphs;                                     // 0x00B8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C65[0xD8];                                    // 0x00C8(0x00D8)(Fixing Size After Last Property [ Dumper-69 ])
	struct FActionGraphParam                      _params;                                           // 0x01A0(0x0028)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C66[0x128];                                   // 0x01C8(0x0128)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	void RPC_ALL_Activated_ActionGraph(const struct FActionGraphActivateReq& _req);
	void RPC_ALL_OperatorSignal(const struct FActionGraphOperatorID& _signal_id, int32 _signal_code);
	void RPC_ALL_UpdateGraphFlow(const struct FActionGraphFlow_Multicast& _graph_flow);
	void RPC_CLIENT_StartRequest_Fail_ACK(const struct FActionGraphStartReq_Fail_Ack& _ack);
	void RPC_SERVER_NotifyInputEvent(const struct FActionGraphInput_Req& _req);
	void RPC_SERVER_OperatorSignal(const struct FActionGraphOperatorID& _signal_id, int32 _signal_code);
	void RPC_SERVER_StartRequest(const struct FActionGraphStartReq& _req);
	void RPC_SERVER_StopActionGraph(const struct FActionGraphEndReq& _req);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphDriverComponent">();
	}
	static class UActionGraphDriverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphDriverComponent>();
	}
};
static_assert(alignof(UActionGraphDriverComponent) == 0x000010, "Wrong alignment on UActionGraphDriverComponent");
static_assert(sizeof(UActionGraphDriverComponent) == 0x0002F0, "Wrong size on UActionGraphDriverComponent");
static_assert(offsetof(UActionGraphDriverComponent, _CurrentActionGraph) == 0x0000B0, "Member 'UActionGraphDriverComponent::_CurrentActionGraph' has a wrong offset!");
static_assert(offsetof(UActionGraphDriverComponent, _ActionGraphs) == 0x0000B8, "Member 'UActionGraphDriverComponent::_ActionGraphs' has a wrong offset!");
static_assert(offsetof(UActionGraphDriverComponent, _params) == 0x0001A0, "Member 'UActionGraphDriverComponent::_params' has a wrong offset!");

// Class ActionGraph.ActionGraphNode
// 0x0128 (0x0150 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x10) UActionGraphNode : public UActionGraphBaseObject
{
public:
	class FString                                 _Name;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EActionPriority                               ActionPriority;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C69[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         StockCost;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsPassive;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _AdjustStartTimeByActive;                          // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformType                                TransformType;                                     // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdjustTransformForMate;                            // 0x005B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LookAtAttacker;                                    // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6A[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             _MateOffset;                                       // 0x0060(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C6B[0x40];                                    // 0x00C0(0x0040)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class UActionGraphOperator*>           _OperatorList;                                     // 0x0100(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UActionGraphTransition*>         _TransitionList;                                   // 0x0110(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C6C[0x28];                                    // 0x0120(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphNode">();
	}
	static class UActionGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphNode>();
	}
};
#pragma pack(pop)
static_assert(alignof(UActionGraphNode) == 0x000010, "Wrong alignment on UActionGraphNode");
static_assert(sizeof(UActionGraphNode) == 0x000150, "Wrong size on UActionGraphNode");
static_assert(offsetof(UActionGraphNode, _Name) == 0x000028, "Member 'UActionGraphNode::_Name' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, DisplayText) == 0x000038, "Member 'UActionGraphNode::DisplayText' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, ActionPriority) == 0x000050, "Member 'UActionGraphNode::ActionPriority' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, StockCost) == 0x000054, "Member 'UActionGraphNode::StockCost' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, _IsPassive) == 0x000058, "Member 'UActionGraphNode::_IsPassive' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, _AdjustStartTimeByActive) == 0x000059, "Member 'UActionGraphNode::_AdjustStartTimeByActive' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, TransformType) == 0x00005A, "Member 'UActionGraphNode::TransformType' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, AdjustTransformForMate) == 0x00005B, "Member 'UActionGraphNode::AdjustTransformForMate' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, LookAtAttacker) == 0x00005C, "Member 'UActionGraphNode::LookAtAttacker' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, _MateOffset) == 0x000060, "Member 'UActionGraphNode::_MateOffset' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, _OperatorList) == 0x000100, "Member 'UActionGraphNode::_OperatorList' has a wrong offset!");
static_assert(offsetof(UActionGraphNode, _TransitionList) == 0x000110, "Member 'UActionGraphNode::_TransitionList' has a wrong offset!");

// Class ActionGraph.ActionGraphNodeDecorator
// 0x0010 (0x0038 - 0x0028)
class UActionGraphNodeDecorator : public UActionGraphBaseObject
{
public:
	uint8                                         Pad_1C6D[0x1];                                     // 0x0028(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	bool                                          _Enabled;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C6E[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _StartTime;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _duration;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C6F[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphNodeDecorator">();
	}
	static class UActionGraphNodeDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphNodeDecorator>();
	}
};
static_assert(alignof(UActionGraphNodeDecorator) == 0x000008, "Wrong alignment on UActionGraphNodeDecorator");
static_assert(sizeof(UActionGraphNodeDecorator) == 0x000038, "Wrong size on UActionGraphNodeDecorator");
static_assert(offsetof(UActionGraphNodeDecorator, _Enabled) == 0x000029, "Member 'UActionGraphNodeDecorator::_Enabled' has a wrong offset!");
static_assert(offsetof(UActionGraphNodeDecorator, _StartTime) == 0x00002C, "Member 'UActionGraphNodeDecorator::_StartTime' has a wrong offset!");
static_assert(offsetof(UActionGraphNodeDecorator, _duration) == 0x000030, "Member 'UActionGraphNodeDecorator::_duration' has a wrong offset!");

// Class ActionGraph.ActionGraphNode_Anim
// 0x00D0 (0x0220 - 0x0150)
class UActionGraphNode_Anim : public UActionGraphNode
{
public:
	float                                         _StartTime;                                        // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _duration;                                         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequenceBase*                      _anim;                                             // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMontageSlot                           SlotName;                                          // 0x0158(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         PlayRate;                                          // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C70[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FAlphaBlend                            BlendIn;                                           // 0x0178(0x0030)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAlphaBlend                            BlendOut;                                          // 0x01A8(0x0030)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         BlendOutTriggerTime;                               // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _IsLooping;                                        // 0x01DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C71[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class UActionGraphNode_Anim*                  _PassiveNode;                                      // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SkipPlayingPassive;                                // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C72[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UTransformTrack*                        _Track;                                            // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           _TransientMontage;                                 // 0x01F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 _ActionGraphName;                                  // 0x0200(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C73[0x10];                                    // 0x0210(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphNode_Anim">();
	}
	static class UActionGraphNode_Anim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphNode_Anim>();
	}
};
static_assert(alignof(UActionGraphNode_Anim) == 0x000010, "Wrong alignment on UActionGraphNode_Anim");
static_assert(sizeof(UActionGraphNode_Anim) == 0x000220, "Wrong size on UActionGraphNode_Anim");
static_assert(offsetof(UActionGraphNode_Anim, _StartTime) == 0x000148, "Member 'UActionGraphNode_Anim::_StartTime' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _duration) == 0x00014C, "Member 'UActionGraphNode_Anim::_duration' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _anim) == 0x000150, "Member 'UActionGraphNode_Anim::_anim' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, SlotName) == 0x000158, "Member 'UActionGraphNode_Anim::SlotName' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, PlayRate) == 0x000170, "Member 'UActionGraphNode_Anim::PlayRate' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, BlendIn) == 0x000178, "Member 'UActionGraphNode_Anim::BlendIn' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, BlendOut) == 0x0001A8, "Member 'UActionGraphNode_Anim::BlendOut' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, BlendOutTriggerTime) == 0x0001D8, "Member 'UActionGraphNode_Anim::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _IsLooping) == 0x0001DC, "Member 'UActionGraphNode_Anim::_IsLooping' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _PassiveNode) == 0x0001E0, "Member 'UActionGraphNode_Anim::_PassiveNode' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, SkipPlayingPassive) == 0x0001E8, "Member 'UActionGraphNode_Anim::SkipPlayingPassive' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _Track) == 0x0001F0, "Member 'UActionGraphNode_Anim::_Track' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _TransientMontage) == 0x0001F8, "Member 'UActionGraphNode_Anim::_TransientMontage' has a wrong offset!");
static_assert(offsetof(UActionGraphNode_Anim, _ActionGraphName) == 0x000200, "Member 'UActionGraphNode_Anim::_ActionGraphName' has a wrong offset!");

// Class ActionGraph.ActionGraphNode_Branch
// 0x0000 (0x0150 - 0x0150)
class UActionGraphNode_Branch final : public UActionGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphNode_Branch">();
	}
	static class UActionGraphNode_Branch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphNode_Branch>();
	}
};
static_assert(alignof(UActionGraphNode_Branch) == 0x000010, "Wrong alignment on UActionGraphNode_Branch");
static_assert(sizeof(UActionGraphNode_Branch) == 0x000150, "Wrong size on UActionGraphNode_Branch");

// Class ActionGraph.ActionGraphNode_Directions
// 0x0000 (0x0150 - 0x0150)
class UActionGraphNode_Directions final : public UActionGraphNode
{
public:
	ESliceType                                    _SliceType;                                        // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C74[0x7];                                     // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphNode_Directions">();
	}
	static class UActionGraphNode_Directions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphNode_Directions>();
	}
};
static_assert(alignof(UActionGraphNode_Directions) == 0x000010, "Wrong alignment on UActionGraphNode_Directions");
static_assert(sizeof(UActionGraphNode_Directions) == 0x000150, "Wrong size on UActionGraphNode_Directions");
static_assert(offsetof(UActionGraphNode_Directions, _SliceType) == 0x000148, "Member 'UActionGraphNode_Directions::_SliceType' has a wrong offset!");

// Class ActionGraph.ActionGraphNode_Entry
// 0x0000 (0x0150 - 0x0150)
class UActionGraphNode_Entry final : public UActionGraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphNode_Entry">();
	}
	static class UActionGraphNode_Entry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphNode_Entry>();
	}
};
static_assert(alignof(UActionGraphNode_Entry) == 0x000010, "Wrong alignment on UActionGraphNode_Entry");
static_assert(sizeof(UActionGraphNode_Entry) == 0x000150, "Wrong size on UActionGraphNode_Entry");

// Class ActionGraph.ActionGraphOperator
// 0x0020 (0x0058 - 0x0038)
class UActionGraphOperator : public UActionGraphNodeDecorator
{
public:
	class FText                                   DisplayText;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C75[0x1];                                     // 0x0050(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	bool                                          _UseSyncTime;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C76[0x2];                                     // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _SyncTime;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphOperator">();
	}
	static class UActionGraphOperator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphOperator>();
	}
};
static_assert(alignof(UActionGraphOperator) == 0x000008, "Wrong alignment on UActionGraphOperator");
static_assert(sizeof(UActionGraphOperator) == 0x000058, "Wrong size on UActionGraphOperator");
static_assert(offsetof(UActionGraphOperator, DisplayText) == 0x000038, "Member 'UActionGraphOperator::DisplayText' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator, _UseSyncTime) == 0x000051, "Member 'UActionGraphOperator::_UseSyncTime' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator, _SyncTime) == 0x000054, "Member 'UActionGraphOperator::_SyncTime' has a wrong offset!");

// Class ActionGraph.ActionGraphOperator_Blackboard
// 0x0018 (0x0070 - 0x0058)
class UActionGraphOperator_Blackboard final : public UActionGraphOperator
{
public:
	EActionGraphBlackboardOp                      Operation;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C77[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   Key;                                               // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Value;                                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsRandomValue;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EActionGraphTiming                            Timing;                                            // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsComponentBlackboard;                             // 0x006A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C78[0x5];                                     // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphOperator_Blackboard">();
	}
	static class UActionGraphOperator_Blackboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphOperator_Blackboard>();
	}
};
static_assert(alignof(UActionGraphOperator_Blackboard) == 0x000008, "Wrong alignment on UActionGraphOperator_Blackboard");
static_assert(sizeof(UActionGraphOperator_Blackboard) == 0x000070, "Wrong size on UActionGraphOperator_Blackboard");
static_assert(offsetof(UActionGraphOperator_Blackboard, Operation) == 0x000058, "Member 'UActionGraphOperator_Blackboard::Operation' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator_Blackboard, Key) == 0x00005C, "Member 'UActionGraphOperator_Blackboard::Key' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator_Blackboard, Value) == 0x000064, "Member 'UActionGraphOperator_Blackboard::Value' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator_Blackboard, IsRandomValue) == 0x000068, "Member 'UActionGraphOperator_Blackboard::IsRandomValue' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator_Blackboard, Timing) == 0x000069, "Member 'UActionGraphOperator_Blackboard::Timing' has a wrong offset!");
static_assert(offsetof(UActionGraphOperator_Blackboard, IsComponentBlackboard) == 0x00006A, "Member 'UActionGraphOperator_Blackboard::IsComponentBlackboard' has a wrong offset!");

// Class ActionGraph.ActionGraphOperator_DynamicAnimBase
// 0x0008 (0x0060 - 0x0058)
class UActionGraphOperator_DynamicAnimBase : public UActionGraphOperator
{
public:
	uint8                                         Pad_1C79[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphOperator_DynamicAnimBase">();
	}
	static class UActionGraphOperator_DynamicAnimBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphOperator_DynamicAnimBase>();
	}
};
static_assert(alignof(UActionGraphOperator_DynamicAnimBase) == 0x000008, "Wrong alignment on UActionGraphOperator_DynamicAnimBase");
static_assert(sizeof(UActionGraphOperator_DynamicAnimBase) == 0x000060, "Wrong size on UActionGraphOperator_DynamicAnimBase");

// Class ActionGraph.ActionGraphOperator_Stock
// 0x0008 (0x0060 - 0x0058)
class UActionGraphOperator_Stock final : public UActionGraphOperator
{
public:
	int32                                         DecreasingStockCount;                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C7A[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphOperator_Stock">();
	}
	static class UActionGraphOperator_Stock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphOperator_Stock>();
	}
};
static_assert(alignof(UActionGraphOperator_Stock) == 0x000008, "Wrong alignment on UActionGraphOperator_Stock");
static_assert(sizeof(UActionGraphOperator_Stock) == 0x000060, "Wrong size on UActionGraphOperator_Stock");
static_assert(offsetof(UActionGraphOperator_Stock, DecreasingStockCount) == 0x000058, "Member 'UActionGraphOperator_Stock::DecreasingStockCount' has a wrong offset!");

// Class ActionGraph.ActionGraphTransition
// 0x0028 (0x0060 - 0x0038)
class UActionGraphTransition final : public UActionGraphNodeDecorator
{
public:
	class UActionGraphNode*                       _NextNode;                                         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UActionGraphNode*                       _PrevNode;                                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UActionGraphCondition*>          _Conditions;                                       // 0x0048(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         _Priority;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsReverse;                                         // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsTransitOnlyFinish;                               // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsServerOnly;                                      // 0x005E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C7B[0x1];                                     // 0x005F(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionGraphTransition">();
	}
	static class UActionGraphTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionGraphTransition>();
	}
};
static_assert(alignof(UActionGraphTransition) == 0x000008, "Wrong alignment on UActionGraphTransition");
static_assert(sizeof(UActionGraphTransition) == 0x000060, "Wrong size on UActionGraphTransition");
static_assert(offsetof(UActionGraphTransition, _NextNode) == 0x000038, "Member 'UActionGraphTransition::_NextNode' has a wrong offset!");
static_assert(offsetof(UActionGraphTransition, _PrevNode) == 0x000040, "Member 'UActionGraphTransition::_PrevNode' has a wrong offset!");
static_assert(offsetof(UActionGraphTransition, _Conditions) == 0x000048, "Member 'UActionGraphTransition::_Conditions' has a wrong offset!");
static_assert(offsetof(UActionGraphTransition, _Priority) == 0x000058, "Member 'UActionGraphTransition::_Priority' has a wrong offset!");
static_assert(offsetof(UActionGraphTransition, IsReverse) == 0x00005C, "Member 'UActionGraphTransition::IsReverse' has a wrong offset!");
static_assert(offsetof(UActionGraphTransition, IsTransitOnlyFinish) == 0x00005D, "Member 'UActionGraphTransition::IsTransitOnlyFinish' has a wrong offset!");
static_assert(offsetof(UActionGraphTransition, IsServerOnly) == 0x00005E, "Member 'UActionGraphTransition::IsServerOnly' has a wrong offset!");

}

