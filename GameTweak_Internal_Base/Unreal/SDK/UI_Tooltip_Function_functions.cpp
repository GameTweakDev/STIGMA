#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Tooltip_Function

#include "Basic.hpp"

#include "UI_Tooltip_Function_classes.hpp"
#include "UI_Tooltip_Function_parameters.hpp"


namespace SDK
{

// Function UI_Tooltip_Function.UI_Tooltip_Function_C.OnShowTooltip
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_Tooltip_Function_C::OnShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_Function_C", "OnShowTooltip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_Tooltip_Function.UI_Tooltip_Function_C.SetEffects
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>                     Func_effect_texts                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Tooltip_Function_C::SetEffects(TArray<class FText>& Func_effect_texts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_Function_C", "SetEffects");

	Params::UI_Tooltip_Function_C_SetEffects Parms{};

	Parms.Func_effect_texts = std::move(Func_effect_texts);

	UObject::ProcessEvent(Func, &Parms);

	Func_effect_texts = std::move(Parms.Func_effect_texts);
}


// Function UI_Tooltip_Function.UI_Tooltip_Function_C.SetModes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EGameMode>                       Modes                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UUI_Tooltip_Function_C::SetModes(TArray<EGameMode>& Modes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_Function_C", "SetModes");

	Params::UI_Tooltip_Function_C_SetModes Parms{};

	Parms.Modes = std::move(Modes);

	UObject::ProcessEvent(Func, &Parms);

	Modes = std::move(Parms.Modes);
}


// Function UI_Tooltip_Function.UI_Tooltip_Function_C.SetRemainTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        _expired_at                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUI_Tooltip_Function_C::SetRemainTime(const struct FDateTime& _expired_at)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_Function_C", "SetRemainTime");

	Params::UI_Tooltip_Function_C_SetRemainTime Parms{};

	Parms._expired_at = std::move(_expired_at);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_Tooltip_Function.UI_Tooltip_Function_C.SetShowRemainTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    _show_remain_time                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_Tooltip_Function_C::SetShowRemainTime(bool _show_remain_time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_Tooltip_Function_C", "SetShowRemainTime");

	Params::UI_Tooltip_Function_C_SetShowRemainTime Parms{};

	Parms._show_remain_time = _show_remain_time;

	UObject::ProcessEvent(Func, &Parms);
}

}

