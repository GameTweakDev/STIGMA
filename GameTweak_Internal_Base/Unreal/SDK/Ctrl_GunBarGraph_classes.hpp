#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_GunBarGraph

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_GunBarGraph.Ctrl_GunBarGraph_C
// 0x00A0 (0x0590 - 0x04F0)
class UCtrl_GunBarGraph_C final : public UPreviewableWidget
{
public:
	class USizeBox*                               AREA_Base;                                         // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               AREA_Current;                                      // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPolyGraph*                             GRAPH_Base;                                        // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPolyGraph*                             GRAPH_Current;                                     // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Title_Area;                                        // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_Title;                                         // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_Value;                                         // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Value_Area;                                        // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        MinValue;                                          // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxValue;                                          // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurValue;                                          // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddValue1;                                         // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AddValue2;                                         // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseValue;                                         // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Title;                                             // 0x0560(0x0018)(Edit, BlueprintVisible)
	bool                                          EnableMagazineMode;                                // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394E[0x3];                                     // 0x0579(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BulletCount;                                       // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              TitleVisibility;                                   // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingTotalSumGraph;                                // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	ESlateVisibility                              ValueVisibility;                                   // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_394F[0x5];                                     // 0x0583(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        ResultValue;                                       // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	ESlateVisibility Get_Title_Area_Visibility();
	ESlateVisibility Get_Value_Area_Visibility();
	bool OnSynchronizeProperties();
	void SetMagazineValue(int32 _cur, int32 _add1, int32 _add2, int32 _base, int32 _bullet_count);
	void SetValue(double _cur_value, double _add_value1, double _add_value2, double _base_value);
	void SetVisibleDiff(ESlateVisibility _visible);
	void UpdaetCurrent();
	void Update();
	void Update_Title();
	void UpdateBase();
	void UpdateMinMax();

	void GetValueText(class FText* Text) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_GunBarGraph_C">();
	}
	static class UCtrl_GunBarGraph_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_GunBarGraph_C>();
	}
};
static_assert(alignof(UCtrl_GunBarGraph_C) == 0x000008, "Wrong alignment on UCtrl_GunBarGraph_C");
static_assert(sizeof(UCtrl_GunBarGraph_C) == 0x000590, "Wrong size on UCtrl_GunBarGraph_C");
static_assert(offsetof(UCtrl_GunBarGraph_C, AREA_Base) == 0x0004F0, "Member 'UCtrl_GunBarGraph_C::AREA_Base' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, AREA_Current) == 0x0004F8, "Member 'UCtrl_GunBarGraph_C::AREA_Current' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, GRAPH_Base) == 0x000500, "Member 'UCtrl_GunBarGraph_C::GRAPH_Base' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, GRAPH_Current) == 0x000508, "Member 'UCtrl_GunBarGraph_C::GRAPH_Current' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, Title_Area) == 0x000510, "Member 'UCtrl_GunBarGraph_C::Title_Area' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, Txt_Title) == 0x000518, "Member 'UCtrl_GunBarGraph_C::Txt_Title' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, Txt_Value) == 0x000520, "Member 'UCtrl_GunBarGraph_C::Txt_Value' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, Value_Area) == 0x000528, "Member 'UCtrl_GunBarGraph_C::Value_Area' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, MinValue) == 0x000530, "Member 'UCtrl_GunBarGraph_C::MinValue' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, MaxValue) == 0x000538, "Member 'UCtrl_GunBarGraph_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, CurValue) == 0x000540, "Member 'UCtrl_GunBarGraph_C::CurValue' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, AddValue1) == 0x000548, "Member 'UCtrl_GunBarGraph_C::AddValue1' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, AddValue2) == 0x000550, "Member 'UCtrl_GunBarGraph_C::AddValue2' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, BaseValue) == 0x000558, "Member 'UCtrl_GunBarGraph_C::BaseValue' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, Title) == 0x000560, "Member 'UCtrl_GunBarGraph_C::Title' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, EnableMagazineMode) == 0x000578, "Member 'UCtrl_GunBarGraph_C::EnableMagazineMode' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, BulletCount) == 0x00057C, "Member 'UCtrl_GunBarGraph_C::BulletCount' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, TitleVisibility) == 0x000580, "Member 'UCtrl_GunBarGraph_C::TitleVisibility' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, UsingTotalSumGraph) == 0x000581, "Member 'UCtrl_GunBarGraph_C::UsingTotalSumGraph' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, ValueVisibility) == 0x000582, "Member 'UCtrl_GunBarGraph_C::ValueVisibility' has a wrong offset!");
static_assert(offsetof(UCtrl_GunBarGraph_C, ResultValue) == 0x000588, "Member 'UCtrl_GunBarGraph_C::ResultValue' has a wrong offset!");

}

