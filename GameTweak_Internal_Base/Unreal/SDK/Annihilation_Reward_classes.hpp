#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Annihilation_Reward

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "Engine_structs.hpp"
#include "BPGLib_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Annihilation_Reward.Annihilation_Reward_C
// 0x0090 (0x0580 - 0x04F0)
class UAnnihilation_Reward_C final : public UPreviewableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OnStartAnim_FunctionGoldPerRound;                  // 0x04F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       StrartAnim;                                        // 0x0500(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Background_Img;                                    // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Background_Img_1;                                  // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Background_Outline;                                // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Bakcground_Img;                                    // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Coin_Image;                                        // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Coin_Text;                                         // 0x0530(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Coin_Text_1;                                       // 0x0538(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Line_Img;                                          // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Round_text;                                        // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Round_Win_Panel;                                   // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_FunctionGoldPerRound;                          // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Is_win;                                            // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36F7[0x7];                                     // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        Lifetime;                                          // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRoundStartNotify                      Start_notify;                                      // 0x0570(0x000C)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)

public:
	void Construct();
	void DriveLifeTime(double Delta);
	void ExecuteUbergraph_Annihilation_Reward(int32 EntryPoint);
	class FText Get_Coin_Text();
	class FText Get_Round_Text();
	ESlateVisibility Get_Round_Win_Panel_Visibility_0();
	class FText GetBonusCoinText();
	class FText GetWinBonusCoin();
	void Show();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Annihilation_Reward_C">();
	}
	static class UAnnihilation_Reward_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnnihilation_Reward_C>();
	}
};
static_assert(alignof(UAnnihilation_Reward_C) == 0x000008, "Wrong alignment on UAnnihilation_Reward_C");
static_assert(sizeof(UAnnihilation_Reward_C) == 0x000580, "Wrong size on UAnnihilation_Reward_C");
static_assert(offsetof(UAnnihilation_Reward_C, UberGraphFrame) == 0x0004F0, "Member 'UAnnihilation_Reward_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, OnStartAnim_FunctionGoldPerRound) == 0x0004F8, "Member 'UAnnihilation_Reward_C::OnStartAnim_FunctionGoldPerRound' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, StrartAnim) == 0x000500, "Member 'UAnnihilation_Reward_C::StrartAnim' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Background_Img) == 0x000508, "Member 'UAnnihilation_Reward_C::Background_Img' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Background_Img_1) == 0x000510, "Member 'UAnnihilation_Reward_C::Background_Img_1' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Background_Outline) == 0x000518, "Member 'UAnnihilation_Reward_C::Background_Outline' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Bakcground_Img) == 0x000520, "Member 'UAnnihilation_Reward_C::Bakcground_Img' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Coin_Image) == 0x000528, "Member 'UAnnihilation_Reward_C::Coin_Image' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Coin_Text) == 0x000530, "Member 'UAnnihilation_Reward_C::Coin_Text' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Coin_Text_1) == 0x000538, "Member 'UAnnihilation_Reward_C::Coin_Text_1' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Line_Img) == 0x000540, "Member 'UAnnihilation_Reward_C::Line_Img' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Round_text) == 0x000548, "Member 'UAnnihilation_Reward_C::Round_text' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Round_Win_Panel) == 0x000550, "Member 'UAnnihilation_Reward_C::Round_Win_Panel' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, TXT_FunctionGoldPerRound) == 0x000558, "Member 'UAnnihilation_Reward_C::TXT_FunctionGoldPerRound' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Is_win) == 0x000560, "Member 'UAnnihilation_Reward_C::Is_win' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Lifetime) == 0x000568, "Member 'UAnnihilation_Reward_C::Lifetime' has a wrong offset!");
static_assert(offsetof(UAnnihilation_Reward_C, Start_notify) == 0x000570, "Member 'UAnnihilation_Reward_C::Start_notify' has a wrong offset!");

}

