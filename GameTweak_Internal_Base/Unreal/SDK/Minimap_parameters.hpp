#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Minimap

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Minimap.MinimapMarker.OnBindActor
// 0x0010 (0x0010 - 0x0000)
struct MinimapMarker_OnBindActor final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAD[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MinimapMarker_OnBindActor) == 0x000008, "Wrong alignment on MinimapMarker_OnBindActor");
static_assert(sizeof(MinimapMarker_OnBindActor) == 0x000010, "Wrong size on MinimapMarker_OnBindActor");
static_assert(offsetof(MinimapMarker_OnBindActor, _Actor) == 0x000000, "Member 'MinimapMarker_OnBindActor::_Actor' has a wrong offset!");
static_assert(offsetof(MinimapMarker_OnBindActor, ReturnValue) == 0x000008, "Member 'MinimapMarker_OnBindActor::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapMarker.OnTick
// 0x0040 (0x0040 - 0x0000)
struct MinimapMarker_OnTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _delta;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAE[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MinimapMarker_OnTick) == 0x000004, "Wrong alignment on MinimapMarker_OnTick");
static_assert(sizeof(MinimapMarker_OnTick) == 0x000040, "Wrong size on MinimapMarker_OnTick");
static_assert(offsetof(MinimapMarker_OnTick, MyGeometry) == 0x000000, "Member 'MinimapMarker_OnTick::MyGeometry' has a wrong offset!");
static_assert(offsetof(MinimapMarker_OnTick, _delta) == 0x000038, "Member 'MinimapMarker_OnTick::_delta' has a wrong offset!");
static_assert(offsetof(MinimapMarker_OnTick, ReturnValue) == 0x00003C, "Member 'MinimapMarker_OnTick::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapMarker.GetBoundActor
// 0x0008 (0x0008 - 0x0000)
struct MinimapMarker_GetBoundActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapMarker_GetBoundActor) == 0x000008, "Wrong alignment on MinimapMarker_GetBoundActor");
static_assert(sizeof(MinimapMarker_GetBoundActor) == 0x000008, "Wrong size on MinimapMarker_GetBoundActor");
static_assert(offsetof(MinimapMarker_GetBoundActor, ReturnValue) == 0x000000, "Member 'MinimapMarker_GetBoundActor::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapMarker.IsRotatingEnabled
// 0x0001 (0x0001 - 0x0000)
struct MinimapMarker_IsRotatingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapMarker_IsRotatingEnabled) == 0x000001, "Wrong alignment on MinimapMarker_IsRotatingEnabled");
static_assert(sizeof(MinimapMarker_IsRotatingEnabled) == 0x000001, "Wrong size on MinimapMarker_IsRotatingEnabled");
static_assert(offsetof(MinimapMarker_IsRotatingEnabled, ReturnValue) == 0x000000, "Member 'MinimapMarker_IsRotatingEnabled::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapMarkerFactory.GetMarkerType
// 0x0010 (0x0010 - 0x0000)
struct MinimapMarkerFactory_GetMarkerType final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMinimapMarker>             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapMarkerFactory_GetMarkerType) == 0x000008, "Wrong alignment on MinimapMarkerFactory_GetMarkerType");
static_assert(sizeof(MinimapMarkerFactory_GetMarkerType) == 0x000010, "Wrong size on MinimapMarkerFactory_GetMarkerType");
static_assert(offsetof(MinimapMarkerFactory_GetMarkerType, _target) == 0x000000, "Member 'MinimapMarkerFactory_GetMarkerType::_target' has a wrong offset!");
static_assert(offsetof(MinimapMarkerFactory_GetMarkerType, ReturnValue) == 0x000008, "Member 'MinimapMarkerFactory_GetMarkerType::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapMarkerFactory.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct MinimapMarkerFactory_GetLocalPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapMarkerFactory_GetLocalPlayerController) == 0x000008, "Wrong alignment on MinimapMarkerFactory_GetLocalPlayerController");
static_assert(sizeof(MinimapMarkerFactory_GetLocalPlayerController) == 0x000008, "Wrong size on MinimapMarkerFactory_GetLocalPlayerController");
static_assert(offsetof(MinimapMarkerFactory_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'MinimapMarkerFactory_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapView.AddActor
// 0x0008 (0x0008 - 0x0000)
struct MinimapView_AddActor final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_AddActor) == 0x000008, "Wrong alignment on MinimapView_AddActor");
static_assert(sizeof(MinimapView_AddActor) == 0x000008, "Wrong size on MinimapView_AddActor");
static_assert(offsetof(MinimapView_AddActor, _Actor) == 0x000000, "Member 'MinimapView_AddActor::_Actor' has a wrong offset!");

// Function Minimap.MinimapView.AddPlayer
// 0x0008 (0x0008 - 0x0000)
struct MinimapView_AddPlayer final
{
public:
	class APlayerState*                           _player_state;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_AddPlayer) == 0x000008, "Wrong alignment on MinimapView_AddPlayer");
static_assert(sizeof(MinimapView_AddPlayer) == 0x000008, "Wrong size on MinimapView_AddPlayer");
static_assert(offsetof(MinimapView_AddPlayer, _player_state) == 0x000000, "Member 'MinimapView_AddPlayer::_player_state' has a wrong offset!");

// Function Minimap.MinimapView.FindMarker
// 0x0010 (0x0010 - 0x0000)
struct MinimapView_FindMarker final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMinimapMarker*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_FindMarker) == 0x000008, "Wrong alignment on MinimapView_FindMarker");
static_assert(sizeof(MinimapView_FindMarker) == 0x000010, "Wrong size on MinimapView_FindMarker");
static_assert(offsetof(MinimapView_FindMarker, _Actor) == 0x000000, "Member 'MinimapView_FindMarker::_Actor' has a wrong offset!");
static_assert(offsetof(MinimapView_FindMarker, ReturnValue) == 0x000008, "Member 'MinimapView_FindMarker::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapView.GetCurrentMinimapName
// 0x0018 (0x0018 - 0x0000)
struct MinimapView_GetCurrentMinimapName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_GetCurrentMinimapName) == 0x000008, "Wrong alignment on MinimapView_GetCurrentMinimapName");
static_assert(sizeof(MinimapView_GetCurrentMinimapName) == 0x000018, "Wrong size on MinimapView_GetCurrentMinimapName");
static_assert(offsetof(MinimapView_GetCurrentMinimapName, ReturnValue) == 0x000000, "Member 'MinimapView_GetCurrentMinimapName::ReturnValue' has a wrong offset!");

// Function Minimap.MinimapView.RemoveMarker
// 0x0008 (0x0008 - 0x0000)
struct MinimapView_RemoveMarker final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_RemoveMarker) == 0x000008, "Wrong alignment on MinimapView_RemoveMarker");
static_assert(sizeof(MinimapView_RemoveMarker) == 0x000008, "Wrong size on MinimapView_RemoveMarker");
static_assert(offsetof(MinimapView_RemoveMarker, _Actor) == 0x000000, "Member 'MinimapView_RemoveMarker::_Actor' has a wrong offset!");

// Function Minimap.MinimapView.RemovePlayerMarker
// 0x0008 (0x0008 - 0x0000)
struct MinimapView_RemovePlayerMarker final
{
public:
	class APlayerState*                           _player_state;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_RemovePlayerMarker) == 0x000008, "Wrong alignment on MinimapView_RemovePlayerMarker");
static_assert(sizeof(MinimapView_RemovePlayerMarker) == 0x000008, "Wrong size on MinimapView_RemovePlayerMarker");
static_assert(offsetof(MinimapView_RemovePlayerMarker, _player_state) == 0x000000, "Member 'MinimapView_RemovePlayerMarker::_player_state' has a wrong offset!");

// Function Minimap.MinimapView.SetToFocusActor
// 0x0008 (0x0008 - 0x0000)
struct MinimapView_SetToFocusActor final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_SetToFocusActor) == 0x000008, "Wrong alignment on MinimapView_SetToFocusActor");
static_assert(sizeof(MinimapView_SetToFocusActor) == 0x000008, "Wrong size on MinimapView_SetToFocusActor");
static_assert(offsetof(MinimapView_SetToFocusActor, _Actor) == 0x000000, "Member 'MinimapView_SetToFocusActor::_Actor' has a wrong offset!");

// Function Minimap.MinimapView.SetZoomScale
// 0x0004 (0x0004 - 0x0000)
struct MinimapView_SetZoomScale final
{
public:
	float                                         _scale;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_SetZoomScale) == 0x000004, "Wrong alignment on MinimapView_SetZoomScale");
static_assert(sizeof(MinimapView_SetZoomScale) == 0x000004, "Wrong size on MinimapView_SetZoomScale");
static_assert(offsetof(MinimapView_SetZoomScale, _scale) == 0x000000, "Member 'MinimapView_SetZoomScale::_scale' has a wrong offset!");

// Function Minimap.MinimapView.GetCurrentMinimap
// 0x0008 (0x0008 - 0x0000)
struct MinimapView_GetCurrentMinimap final
{
public:
	class UMinimap*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MinimapView_GetCurrentMinimap) == 0x000008, "Wrong alignment on MinimapView_GetCurrentMinimap");
static_assert(sizeof(MinimapView_GetCurrentMinimap) == 0x000008, "Wrong size on MinimapView_GetCurrentMinimap");
static_assert(offsetof(MinimapView_GetCurrentMinimap, ReturnValue) == 0x000000, "Member 'MinimapView_GetCurrentMinimap::ReturnValue' has a wrong offset!");

}

