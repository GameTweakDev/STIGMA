#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: LVData_TierRewards

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass LVData_TierRewards.LVData_TierRewards_C
// 0x0010 (0x0038 - 0x0028)
class ULVData_TierRewards_C final : public UObject
{
public:
	ETier                                         Tier;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHighTier;                                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3998[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSeasonID                              SeasonID;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMyTier;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Config(ETier _tier, bool _is_high_tier, const struct FSeasonID& _season_id, bool _is_my_tier);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LVData_TierRewards_C">();
	}
	static class ULVData_TierRewards_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULVData_TierRewards_C>();
	}
};
static_assert(alignof(ULVData_TierRewards_C) == 0x000008, "Wrong alignment on ULVData_TierRewards_C");
static_assert(sizeof(ULVData_TierRewards_C) == 0x000038, "Wrong size on ULVData_TierRewards_C");
static_assert(offsetof(ULVData_TierRewards_C, Tier) == 0x000028, "Member 'ULVData_TierRewards_C::Tier' has a wrong offset!");
static_assert(offsetof(ULVData_TierRewards_C, IsHighTier) == 0x000029, "Member 'ULVData_TierRewards_C::IsHighTier' has a wrong offset!");
static_assert(offsetof(ULVData_TierRewards_C, SeasonID) == 0x00002C, "Member 'ULVData_TierRewards_C::SeasonID' has a wrong offset!");
static_assert(offsetof(ULVData_TierRewards_C, IsMyTier) == 0x000030, "Member 'ULVData_TierRewards_C::IsMyTier' has a wrong offset!");

}

