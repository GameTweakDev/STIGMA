#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Safe_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Stigma_structs.hpp"
#include "Stigma_classes.hpp"
#include "BPGLib_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Safe_BP.Safe_BP_C
// 0x0058 (0x0328 - 0x02D0)
class ASafe_BP_C final : public ASafeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UIndicatorPosComponent*                 IndicatorPos;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Safe_HackComplete_Trigger;                      // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Safe_Hack_Possible;                             // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Safe_Hack_Active_ing;                           // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       ScreenMaterial;                                    // 0x0300(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void BndEvt__Safe_BP__SafeArea_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Safe_BP__SafeArea_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_Safe_BP(int32 EntryPoint);
	class UIndicatorPosComponent* GetIndicatorPosComponent();
	void HackingComplete();
	bool OnQueryAddIndiactor(class ABPGPlayerController* Controller, EIndicatorType _type, struct FIndicatorData* _out_detail);
	class FText OnQueryGetDisplayName(EIndicatorType _type);
	struct FInteractionPoint OnQueryInteractionPoint(class ACharaBase* _involver);
	bool OnQueryVisibility(EIndicatorType _type);
	struct FTransform OnQueryWorldTransform(EIndicatorType _type);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetHackingScreen(bool IsHacking);

	class FText GetActorDisplayName() const;
	class UTexture2D* GetActorIcon() const;
	class FText GetDisplayText(class ACharaBase* _involver) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Safe_BP_C">();
	}
	static class ASafe_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASafe_BP_C>();
	}
};
static_assert(alignof(ASafe_BP_C) == 0x000008, "Wrong alignment on ASafe_BP_C");
static_assert(sizeof(ASafe_BP_C) == 0x000328, "Wrong size on ASafe_BP_C");
static_assert(offsetof(ASafe_BP_C, UberGraphFrame) == 0x0002D0, "Member 'ASafe_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASafe_BP_C, IndicatorPos) == 0x0002D8, "Member 'ASafe_BP_C::IndicatorPos' has a wrong offset!");
static_assert(offsetof(ASafe_BP_C, NS_Safe_HackComplete_Trigger) == 0x0002E0, "Member 'ASafe_BP_C::NS_Safe_HackComplete_Trigger' has a wrong offset!");
static_assert(offsetof(ASafe_BP_C, NS_Safe_Hack_Possible) == 0x0002E8, "Member 'ASafe_BP_C::NS_Safe_Hack_Possible' has a wrong offset!");
static_assert(offsetof(ASafe_BP_C, NS_Safe_Hack_Active_ing) == 0x0002F0, "Member 'ASafe_BP_C::NS_Safe_Hack_Active_ing' has a wrong offset!");
static_assert(offsetof(ASafe_BP_C, StaticMesh) == 0x0002F8, "Member 'ASafe_BP_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ASafe_BP_C, ScreenMaterial) == 0x000300, "Member 'ASafe_BP_C::ScreenMaterial' has a wrong offset!");

}

