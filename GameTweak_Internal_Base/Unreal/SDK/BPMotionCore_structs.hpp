#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: BPMotionCore

#include "Basic.hpp"

#include "BPGLib_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum BPMotionCore.EBPMTreeSplitType
// NumValues: 0x0006
enum class EBPMTreeSplitType : uint8
{
	NA                                       = 0,
	StartingDirection                        = 1,
	TargetPosition                           = 2,
	Subbone_Pos                              = 3,
	Subbone_Vel                              = 4,
	EBPMTreeSplitType_MAX                    = 5,
};

// Enum BPMotionCore.EBPMTreeSplitComponent
// NumValues: 0x0004
enum class EBPMTreeSplitComponent : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	EBPMTreeSplitComponent_MAX               = 3,
};

// Enum BPMotionCore.EFallenSide
// NumValues: 0x0006
enum class EFallenSide : uint8
{
	NA                                       = 0,
	LieOnGround                              = 1,
	LieOnStomach                             = 2,
	LieOnLeftSide                            = 3,
	LieOnRightSide                           = 4,
	EFallenSide_MAX                          = 5,
};

// Enum BPMotionCore.EForwardAxis
// NumValues: 0x0007
enum class EForwardAxis : uint8
{
	PX_Axis                                  = 0,
	PY_Axis                                  = 1,
	PZ_Axis                                  = 2,
	NX_Axis                                  = 3,
	NY_Axis                                  = 4,
	NZ_Axis                                  = 5,
	EForwardAxis_MAX                         = 6,
};

// Enum BPMotionCore.EEasingType
// NumValues: 0x000B
enum class EEasingType : uint8
{
	Linear                                   = 0,
	EaseIn                                   = 1,
	EaseInOut                                = 2,
	EaseOut                                  = 3,
	ExpoIn                                   = 4,
	ExpoInOut                                = 5,
	ExpoOut                                  = 6,
	CircularIn                               = 7,
	CircularInOut                            = 8,
	CircularOut                              = 9,
	EEasingType_MAX                          = 10,
};

// ScriptStruct BPMotionCore.BPLocoMotionPlayingAnim
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FBPLocoMotionPlayingAnim final
{
public:
	uint8                                         Pad_1C12[0x38];                                    // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPLocoMotionPlayingAnim) == 0x000008, "Wrong alignment on FBPLocoMotionPlayingAnim");
static_assert(sizeof(FBPLocoMotionPlayingAnim) == 0x000038, "Wrong size on FBPLocoMotionPlayingAnim");

// ScriptStruct BPMotionCore.BPLocoMotionQueue
// 0x0010 (0x0010 - 0x0000)
struct FBPLocoMotionQueue final
{
public:
	TArray<struct FBPLocoMotionPlayingAnim>       Storage;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPLocoMotionQueue) == 0x000008, "Wrong alignment on FBPLocoMotionQueue");
static_assert(sizeof(FBPLocoMotionQueue) == 0x000010, "Wrong size on FBPLocoMotionQueue");
static_assert(offsetof(FBPLocoMotionQueue, Storage) == 0x000000, "Member 'FBPLocoMotionQueue::Storage' has a wrong offset!");

// ScriptStruct BPMotionCore.BPLocoMotion_AnimEntry
// 0x0030 (0x0030 - 0x0000)
struct FBPLocoMotion_AnimEntry final
{
public:
	class UAnimSequence*                          StartSequence;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sequence;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          TurnBackSequence;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FastTransitSequence;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendingTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingType                                   BlendingType;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C13[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         BlendExp;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlendInMeshSpace;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayTurnBackAnimation;                           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C14[0x2];                                     // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPLocoMotion_AnimEntry) == 0x000008, "Wrong alignment on FBPLocoMotion_AnimEntry");
static_assert(sizeof(FBPLocoMotion_AnimEntry) == 0x000030, "Wrong size on FBPLocoMotion_AnimEntry");
static_assert(offsetof(FBPLocoMotion_AnimEntry, StartSequence) == 0x000000, "Member 'FBPLocoMotion_AnimEntry::StartSequence' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, Sequence) == 0x000008, "Member 'FBPLocoMotion_AnimEntry::Sequence' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, TurnBackSequence) == 0x000010, "Member 'FBPLocoMotion_AnimEntry::TurnBackSequence' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, FastTransitSequence) == 0x000018, "Member 'FBPLocoMotion_AnimEntry::FastTransitSequence' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, BlendingTime) == 0x000020, "Member 'FBPLocoMotion_AnimEntry::BlendingTime' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, BlendingType) == 0x000024, "Member 'FBPLocoMotion_AnimEntry::BlendingType' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, BlendExp) == 0x000028, "Member 'FBPLocoMotion_AnimEntry::BlendExp' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, BlendInMeshSpace) == 0x00002C, "Member 'FBPLocoMotion_AnimEntry::BlendInMeshSpace' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_AnimEntry, IsPlayTurnBackAnimation) == 0x00002D, "Member 'FBPLocoMotion_AnimEntry::IsPlayTurnBackAnimation' has a wrong offset!");

// ScriptStruct BPMotionCore.BPLocoMotion_TransitEntry
// 0x0002 (0x0002 - 0x0000)
struct FBPLocoMotion_TransitEntry final
{
public:
	EBPMoveDirection                              SrcDirection;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPMoveDirection                              DestDirection;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPLocoMotion_TransitEntry) == 0x000001, "Wrong alignment on FBPLocoMotion_TransitEntry");
static_assert(sizeof(FBPLocoMotion_TransitEntry) == 0x000002, "Wrong size on FBPLocoMotion_TransitEntry");
static_assert(offsetof(FBPLocoMotion_TransitEntry, SrcDirection) == 0x000000, "Member 'FBPLocoMotion_TransitEntry::SrcDirection' has a wrong offset!");
static_assert(offsetof(FBPLocoMotion_TransitEntry, DestDirection) == 0x000001, "Member 'FBPLocoMotion_TransitEntry::DestDirection' has a wrong offset!");

// ScriptStruct BPMotionCore.BPLocoMotionAnimParams
// 0x0098 (0x0098 - 0x0000)
struct FBPLocoMotionAnimParams final
{
public:
	class UAnimSequence*                          IdleAnim;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ForwardAnim;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          BackwardAnim;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          LeftAnim;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          RightAnim;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Forward_LeftAnim;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Forward_RightAnim;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          _Additive_Turn_LeftAnim;                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          _Additive_Turn_RightAnim;                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EBPMoveDirection, struct FBPLocoMotion_AnimEntry> TransitMap;                                        // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPLocoMotionAnimParams) == 0x000008, "Wrong alignment on FBPLocoMotionAnimParams");
static_assert(sizeof(FBPLocoMotionAnimParams) == 0x000098, "Wrong size on FBPLocoMotionAnimParams");
static_assert(offsetof(FBPLocoMotionAnimParams, IdleAnim) == 0x000000, "Member 'FBPLocoMotionAnimParams::IdleAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, ForwardAnim) == 0x000008, "Member 'FBPLocoMotionAnimParams::ForwardAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, BackwardAnim) == 0x000010, "Member 'FBPLocoMotionAnimParams::BackwardAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, LeftAnim) == 0x000018, "Member 'FBPLocoMotionAnimParams::LeftAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, RightAnim) == 0x000020, "Member 'FBPLocoMotionAnimParams::RightAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, Forward_LeftAnim) == 0x000028, "Member 'FBPLocoMotionAnimParams::Forward_LeftAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, Forward_RightAnim) == 0x000030, "Member 'FBPLocoMotionAnimParams::Forward_RightAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, _Additive_Turn_LeftAnim) == 0x000038, "Member 'FBPLocoMotionAnimParams::_Additive_Turn_LeftAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, _Additive_Turn_RightAnim) == 0x000040, "Member 'FBPLocoMotionAnimParams::_Additive_Turn_RightAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionAnimParams, TransitMap) == 0x000048, "Member 'FBPLocoMotionAnimParams::TransitMap' has a wrong offset!");

// ScriptStruct BPMotionCore.BPLocoMotionNode
// 0x0248 (0x0258 - 0x0010)
struct FBPLocoMotionNode final : public FAnimNode_Base
{
public:
	class UAnimSequence*                          _CurrentAdditiveAnim;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AdditiveWeight;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C15[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRotator                               _LastRotator;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _TurnDecreasedFactor;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _AdditiveMultiply;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _SideTurnWeight;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _TurnRestoreFactor;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _MinHoldTime;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C16[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBPLocoMotionAnimParams                AnimParams;                                        // 0x0050(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UBPMotionMovementComponent*             _MoveComponent;                                    // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBPLocoMotionPlayingAnim               _CurrentAnim;                                      // 0x00F0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FBPLocoMotionQueue                     _AnimQueue;                                        // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                         _CurrentTransitTime;                               // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpdateDirectionTick;                               // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSprintParams                          CurrSprintParams;                                  // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C17[0x114];                                   // 0x0144(0x0114)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPLocoMotionNode) == 0x000008, "Wrong alignment on FBPLocoMotionNode");
static_assert(sizeof(FBPLocoMotionNode) == 0x000258, "Wrong size on FBPLocoMotionNode");
static_assert(offsetof(FBPLocoMotionNode, _CurrentAdditiveAnim) == 0x000010, "Member 'FBPLocoMotionNode::_CurrentAdditiveAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _AdditiveWeight) == 0x000018, "Member 'FBPLocoMotionNode::_AdditiveWeight' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _LastRotator) == 0x000020, "Member 'FBPLocoMotionNode::_LastRotator' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _TurnDecreasedFactor) == 0x000038, "Member 'FBPLocoMotionNode::_TurnDecreasedFactor' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _AdditiveMultiply) == 0x00003C, "Member 'FBPLocoMotionNode::_AdditiveMultiply' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _SideTurnWeight) == 0x000040, "Member 'FBPLocoMotionNode::_SideTurnWeight' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _TurnRestoreFactor) == 0x000044, "Member 'FBPLocoMotionNode::_TurnRestoreFactor' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _MinHoldTime) == 0x000048, "Member 'FBPLocoMotionNode::_MinHoldTime' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, AnimParams) == 0x000050, "Member 'FBPLocoMotionNode::AnimParams' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _MoveComponent) == 0x0000E8, "Member 'FBPLocoMotionNode::_MoveComponent' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _CurrentAnim) == 0x0000F0, "Member 'FBPLocoMotionNode::_CurrentAnim' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _AnimQueue) == 0x000128, "Member 'FBPLocoMotionNode::_AnimQueue' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, _CurrentTransitTime) == 0x000138, "Member 'FBPLocoMotionNode::_CurrentTransitTime' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, UpdateDirectionTick) == 0x00013C, "Member 'FBPLocoMotionNode::UpdateDirectionTick' has a wrong offset!");
static_assert(offsetof(FBPLocoMotionNode, CurrSprintParams) == 0x000140, "Member 'FBPLocoMotionNode::CurrSprintParams' has a wrong offset!");

// ScriptStruct BPMotionCore.MMPlayingInfo
// 0x0010 (0x0010 - 0x0000)
struct FMMPlayingInfo final
{
public:
	bool                                          IsChanged;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C18[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         PlayTime;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Animation;                                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMPlayingInfo) == 0x000008, "Wrong alignment on FMMPlayingInfo");
static_assert(sizeof(FMMPlayingInfo) == 0x000010, "Wrong size on FMMPlayingInfo");
static_assert(offsetof(FMMPlayingInfo, IsChanged) == 0x000000, "Member 'FMMPlayingInfo::IsChanged' has a wrong offset!");
static_assert(offsetof(FMMPlayingInfo, PlayTime) == 0x000004, "Member 'FMMPlayingInfo::PlayTime' has a wrong offset!");
static_assert(offsetof(FMMPlayingInfo, Animation) == 0x000008, "Member 'FMMPlayingInfo::Animation' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMotionAnimNode
// 0x00F8 (0x0108 - 0x0010)
struct FBPMotionAnimNode final : public FAnimNode_Base
{
public:
	float                                         BlendingTime;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingType                                   BlendingType;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C19[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlendInMeshSpace;                                  // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class UMotionMatching*                        _MotionMatching;                                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBPMotionMovementComponent*             _MoveComponent;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMMPlayingInfo                         _PlayingInfo;                                      // 0x0030(0x0010)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C1B[0xC8];                                    // 0x0040(0x00C8)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPMotionAnimNode) == 0x000008, "Wrong alignment on FBPMotionAnimNode");
static_assert(sizeof(FBPMotionAnimNode) == 0x000108, "Wrong size on FBPMotionAnimNode");
static_assert(offsetof(FBPMotionAnimNode, BlendingTime) == 0x000010, "Member 'FBPMotionAnimNode::BlendingTime' has a wrong offset!");
static_assert(offsetof(FBPMotionAnimNode, BlendingType) == 0x000014, "Member 'FBPMotionAnimNode::BlendingType' has a wrong offset!");
static_assert(offsetof(FBPMotionAnimNode, BlendExp) == 0x000018, "Member 'FBPMotionAnimNode::BlendExp' has a wrong offset!");
static_assert(offsetof(FBPMotionAnimNode, BlendInMeshSpace) == 0x00001C, "Member 'FBPMotionAnimNode::BlendInMeshSpace' has a wrong offset!");
static_assert(offsetof(FBPMotionAnimNode, _MotionMatching) == 0x000020, "Member 'FBPMotionAnimNode::_MotionMatching' has a wrong offset!");
static_assert(offsetof(FBPMotionAnimNode, _MoveComponent) == 0x000028, "Member 'FBPMotionAnimNode::_MoveComponent' has a wrong offset!");
static_assert(offsetof(FBPMotionAnimNode, _PlayingInfo) == 0x000030, "Member 'FBPMotionAnimNode::_PlayingInfo' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMotionSequencesNode
// 0x0018 (0x0018 - 0x0000)
struct FBPMotionSequencesNode final
{
public:
	float                                         MinRange;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              AnimationSequences;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPMotionSequencesNode) == 0x000008, "Wrong alignment on FBPMotionSequencesNode");
static_assert(sizeof(FBPMotionSequencesNode) == 0x000018, "Wrong size on FBPMotionSequencesNode");
static_assert(offsetof(FBPMotionSequencesNode, MinRange) == 0x000000, "Member 'FBPMotionSequencesNode::MinRange' has a wrong offset!");
static_assert(offsetof(FBPMotionSequencesNode, MaxRange) == 0x000004, "Member 'FBPMotionSequencesNode::MaxRange' has a wrong offset!");
static_assert(offsetof(FBPMotionSequencesNode, AnimationSequences) == 0x000008, "Member 'FBPMotionSequencesNode::AnimationSequences' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMotionParameterRange
// 0x0018 (0x0018 - 0x0000)
struct FBPMotionParameterRange final
{
public:
	float                                         MinRange;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPMotionSequencesNode>         SequenceNodes;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPMotionParameterRange) == 0x000008, "Wrong alignment on FBPMotionParameterRange");
static_assert(sizeof(FBPMotionParameterRange) == 0x000018, "Wrong size on FBPMotionParameterRange");
static_assert(offsetof(FBPMotionParameterRange, MinRange) == 0x000000, "Member 'FBPMotionParameterRange::MinRange' has a wrong offset!");
static_assert(offsetof(FBPMotionParameterRange, MaxRange) == 0x000004, "Member 'FBPMotionParameterRange::MaxRange' has a wrong offset!");
static_assert(offsetof(FBPMotionParameterRange, SequenceNodes) == 0x000008, "Member 'FBPMotionParameterRange::SequenceNodes' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMotionSequencePlayNode
// 0x0028 (0x0038 - 0x0010)
struct FBPMotionSequencePlayNode final : public FAnimNode_Base
{
public:
	float                                         FirstParameter;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondParameter;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPMotionParameterRange>        SequenceDatas;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InternalTimeAccumulator;                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C1C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimSequenceBase*                      TargetSequence;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FBPMotionSequencePlayNode) == 0x000008, "Wrong alignment on FBPMotionSequencePlayNode");
static_assert(sizeof(FBPMotionSequencePlayNode) == 0x000038, "Wrong size on FBPMotionSequencePlayNode");
static_assert(offsetof(FBPMotionSequencePlayNode, FirstParameter) == 0x000010, "Member 'FBPMotionSequencePlayNode::FirstParameter' has a wrong offset!");
static_assert(offsetof(FBPMotionSequencePlayNode, SecondParameter) == 0x000014, "Member 'FBPMotionSequencePlayNode::SecondParameter' has a wrong offset!");
static_assert(offsetof(FBPMotionSequencePlayNode, SequenceDatas) == 0x000018, "Member 'FBPMotionSequencePlayNode::SequenceDatas' has a wrong offset!");
static_assert(offsetof(FBPMotionSequencePlayNode, InternalTimeAccumulator) == 0x000028, "Member 'FBPMotionSequencePlayNode::InternalTimeAccumulator' has a wrong offset!");
static_assert(offsetof(FBPMotionSequencePlayNode, TargetSequence) == 0x000030, "Member 'FBPMotionSequencePlayNode::TargetSequence' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMTreeSubboneKey
// 0x0030 (0x0030 - 0x0000)
struct FBPMTreeSubboneKey final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vel;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPMTreeSubboneKey) == 0x000008, "Wrong alignment on FBPMTreeSubboneKey");
static_assert(sizeof(FBPMTreeSubboneKey) == 0x000030, "Wrong size on FBPMTreeSubboneKey");
static_assert(offsetof(FBPMTreeSubboneKey, Pos) == 0x000000, "Member 'FBPMTreeSubboneKey::Pos' has a wrong offset!");
static_assert(offsetof(FBPMTreeSubboneKey, Vel) == 0x000018, "Member 'FBPMTreeSubboneKey::Vel' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMSplitConfig
// 0x0020 (0x0020 - 0x0000)
struct FBPMSplitConfig final
{
public:
	EBPMTreeSplitType                             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              Pivot;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptableError;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubboneIndex;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPMSplitConfig) == 0x000008, "Wrong alignment on FBPMSplitConfig");
static_assert(sizeof(FBPMSplitConfig) == 0x000020, "Wrong size on FBPMSplitConfig");
static_assert(offsetof(FBPMSplitConfig, Type) == 0x000000, "Member 'FBPMSplitConfig::Type' has a wrong offset!");
static_assert(offsetof(FBPMSplitConfig, Pivot) == 0x000008, "Member 'FBPMSplitConfig::Pivot' has a wrong offset!");
static_assert(offsetof(FBPMSplitConfig, AcceptableError) == 0x000018, "Member 'FBPMSplitConfig::AcceptableError' has a wrong offset!");
static_assert(offsetof(FBPMSplitConfig, SubboneIndex) == 0x00001C, "Member 'FBPMSplitConfig::SubboneIndex' has a wrong offset!");

// ScriptStruct BPMotionCore.BPMTreeKey
// 0x0040 (0x0040 - 0x0000)
struct FBPMTreeKey final
{
public:
	struct FVector                                StartVelocity;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPosition;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBPMTreeSubboneKey>             SubboneKeys;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPMTreeKey) == 0x000008, "Wrong alignment on FBPMTreeKey");
static_assert(sizeof(FBPMTreeKey) == 0x000040, "Wrong size on FBPMTreeKey");
static_assert(offsetof(FBPMTreeKey, StartVelocity) == 0x000000, "Member 'FBPMTreeKey::StartVelocity' has a wrong offset!");
static_assert(offsetof(FBPMTreeKey, TargetPosition) == 0x000018, "Member 'FBPMTreeKey::TargetPosition' has a wrong offset!");
static_assert(offsetof(FBPMTreeKey, SubboneKeys) == 0x000030, "Member 'FBPMTreeKey::SubboneKeys' has a wrong offset!");

// ScriptStruct BPMotionCore.CharaMovementSetting
// 0x0030 (0x0030 - 0x0000)
struct FCharaMovementSetting final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFullAcceleration;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Friction;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInFluid;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Gravity;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaMovementSetting) == 0x000008, "Wrong alignment on FCharaMovementSetting");
static_assert(sizeof(FCharaMovementSetting) == 0x000030, "Wrong size on FCharaMovementSetting");
static_assert(offsetof(FCharaMovementSetting, MaxSpeed) == 0x000000, "Member 'FCharaMovementSetting::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FCharaMovementSetting, MaxAcceleration) == 0x000004, "Member 'FCharaMovementSetting::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FCharaMovementSetting, EnableFullAcceleration) == 0x000008, "Member 'FCharaMovementSetting::EnableFullAcceleration' has a wrong offset!");
static_assert(offsetof(FCharaMovementSetting, Friction) == 0x00000C, "Member 'FCharaMovementSetting::Friction' has a wrong offset!");
static_assert(offsetof(FCharaMovementSetting, BrakingDeceleration) == 0x000010, "Member 'FCharaMovementSetting::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FCharaMovementSetting, IsInFluid) == 0x000014, "Member 'FCharaMovementSetting::IsInFluid' has a wrong offset!");
static_assert(offsetof(FCharaMovementSetting, Gravity) == 0x000018, "Member 'FCharaMovementSetting::Gravity' has a wrong offset!");

// ScriptStruct BPMotionCore.RandomIdleAnim
// 0x0018 (0x0018 - 0x0000)
struct FRandomIdleAnim final
{
public:
	float                                         Probability;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendingWeight;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      OptionalAnimation;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C20[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRandomIdleAnim) == 0x000008, "Wrong alignment on FRandomIdleAnim");
static_assert(sizeof(FRandomIdleAnim) == 0x000018, "Wrong size on FRandomIdleAnim");
static_assert(offsetof(FRandomIdleAnim, Probability) == 0x000000, "Member 'FRandomIdleAnim::Probability' has a wrong offset!");
static_assert(offsetof(FRandomIdleAnim, BlendingWeight) == 0x000004, "Member 'FRandomIdleAnim::BlendingWeight' has a wrong offset!");
static_assert(offsetof(FRandomIdleAnim, OptionalAnimation) == 0x000008, "Member 'FRandomIdleAnim::OptionalAnimation' has a wrong offset!");

// ScriptStruct BPMotionCore.LyingDownAnimNode
// 0x00B0 (0x00C0 - 0x0010)
struct FLyingDownAnimNode final : public FAnimNode_Base
{
public:
	class FName                                   ChestBoneName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftShoulderBoneName;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightDifferenceCriteria;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EForwardAxis                                  ChestBoneForwardAxis;                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C21[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FRandomIdleAnim>                Idles_LieOnGround;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRandomIdleAnim>                Idles_LieOnStomach;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRandomIdleAnim>                Idles_LieOnLeftSide;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRandomIdleAnim>                Idles_LieOnRightSide;                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C22[0x58];                                    // 0x0068(0x0058)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLyingDownAnimNode) == 0x000008, "Wrong alignment on FLyingDownAnimNode");
static_assert(sizeof(FLyingDownAnimNode) == 0x0000C0, "Wrong size on FLyingDownAnimNode");
static_assert(offsetof(FLyingDownAnimNode, ChestBoneName) == 0x000010, "Member 'FLyingDownAnimNode::ChestBoneName' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, LeftShoulderBoneName) == 0x000018, "Member 'FLyingDownAnimNode::LeftShoulderBoneName' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, HeightDifferenceCriteria) == 0x000020, "Member 'FLyingDownAnimNode::HeightDifferenceCriteria' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, ChestBoneForwardAxis) == 0x000024, "Member 'FLyingDownAnimNode::ChestBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, Idles_LieOnGround) == 0x000028, "Member 'FLyingDownAnimNode::Idles_LieOnGround' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, Idles_LieOnStomach) == 0x000038, "Member 'FLyingDownAnimNode::Idles_LieOnStomach' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, Idles_LieOnLeftSide) == 0x000048, "Member 'FLyingDownAnimNode::Idles_LieOnLeftSide' has a wrong offset!");
static_assert(offsetof(FLyingDownAnimNode, Idles_LieOnRightSide) == 0x000058, "Member 'FLyingDownAnimNode::Idles_LieOnRightSide' has a wrong offset!");

// ScriptStruct BPMotionCore.MMConfigBone
// 0x0008 (0x0008 - 0x0000)
struct FMMConfigBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMConfigBone) == 0x000004, "Wrong alignment on FMMConfigBone");
static_assert(sizeof(FMMConfigBone) == 0x000008, "Wrong size on FMMConfigBone");
static_assert(offsetof(FMMConfigBone, BoneName) == 0x000000, "Member 'FMMConfigBone::BoneName' has a wrong offset!");

// ScriptStruct BPMotionCore.AnimReference
// 0x0010 (0x0010 - 0x0000)
struct FAnimReference final
{
public:
	class UAnimSequence*                          Animation;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C23[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAnimReference) == 0x000008, "Wrong alignment on FAnimReference");
static_assert(sizeof(FAnimReference) == 0x000010, "Wrong size on FAnimReference");
static_assert(offsetof(FAnimReference, Animation) == 0x000000, "Member 'FAnimReference::Animation' has a wrong offset!");
static_assert(offsetof(FAnimReference, Time) == 0x000008, "Member 'FAnimReference::Time' has a wrong offset!");

// ScriptStruct BPMotionCore.MotionMatchingConfig
// 0x0048 (0x0048 - 0x0000)
struct FMotionMatchingConfig final
{
public:
	class UMotionMatching*                        MotionMatching;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateInterval;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Responsiveness;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseIdleMotions;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C24[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         TrajectoryPositionalCostWeight;                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryVelocityCostWeight;                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryAccelerationCostWeight;                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosePositionalCostWeight;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseVelocityCostWeight;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSplitTree;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C25[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         MaxVelocity;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FullAcceleration;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C26[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Friction;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDebugInfos;                                    // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C27[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMotionMatchingConfig) == 0x000008, "Wrong alignment on FMotionMatchingConfig");
static_assert(sizeof(FMotionMatchingConfig) == 0x000048, "Wrong size on FMotionMatchingConfig");
static_assert(offsetof(FMotionMatchingConfig, MotionMatching) == 0x000000, "Member 'FMotionMatchingConfig::MotionMatching' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, PlayRate) == 0x000008, "Member 'FMotionMatchingConfig::PlayRate' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, UpdateInterval) == 0x00000C, "Member 'FMotionMatchingConfig::UpdateInterval' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, Responsiveness) == 0x000010, "Member 'FMotionMatchingConfig::Responsiveness' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, UseIdleMotions) == 0x000014, "Member 'FMotionMatchingConfig::UseIdleMotions' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, TrajectoryPositionalCostWeight) == 0x000018, "Member 'FMotionMatchingConfig::TrajectoryPositionalCostWeight' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, TrajectoryVelocityCostWeight) == 0x00001C, "Member 'FMotionMatchingConfig::TrajectoryVelocityCostWeight' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, TrajectoryAccelerationCostWeight) == 0x000020, "Member 'FMotionMatchingConfig::TrajectoryAccelerationCostWeight' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, PosePositionalCostWeight) == 0x000024, "Member 'FMotionMatchingConfig::PosePositionalCostWeight' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, PoseVelocityCostWeight) == 0x000028, "Member 'FMotionMatchingConfig::PoseVelocityCostWeight' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, UseSplitTree) == 0x00002C, "Member 'FMotionMatchingConfig::UseSplitTree' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, MaxVelocity) == 0x000030, "Member 'FMotionMatchingConfig::MaxVelocity' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, MaxAcceleration) == 0x000034, "Member 'FMotionMatchingConfig::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, FullAcceleration) == 0x000038, "Member 'FMotionMatchingConfig::FullAcceleration' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, Friction) == 0x00003C, "Member 'FMotionMatchingConfig::Friction' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, BrakingDeceleration) == 0x000040, "Member 'FMotionMatchingConfig::BrakingDeceleration' has a wrong offset!");
static_assert(offsetof(FMotionMatchingConfig, ShowDebugInfos) == 0x000044, "Member 'FMotionMatchingConfig::ShowDebugInfos' has a wrong offset!");

// ScriptStruct BPMotionCore.MotionMatchingDriver
// 0x0668 (0x0668 - 0x0000)
struct FMotionMatchingDriver final
{
public:
	class ACharacter*                             _chara;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMotionMatchingConfig                  _Config;                                           // 0x0008(0x0048)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C28[0x618];                                   // 0x0050(0x0618)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMotionMatchingDriver) == 0x000008, "Wrong alignment on FMotionMatchingDriver");
static_assert(sizeof(FMotionMatchingDriver) == 0x000668, "Wrong size on FMotionMatchingDriver");
static_assert(offsetof(FMotionMatchingDriver, _chara) == 0x000000, "Member 'FMotionMatchingDriver::_chara' has a wrong offset!");
static_assert(offsetof(FMotionMatchingDriver, _Config) == 0x000008, "Member 'FMotionMatchingDriver::_Config' has a wrong offset!");

// ScriptStruct BPMotionCore.MotionMatchingIndex
// 0x0008 (0x0008 - 0x0000)
struct FMotionMatchingIndex final
{
public:
	int32                                         DataSetIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyIndex;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMotionMatchingIndex) == 0x000004, "Wrong alignment on FMotionMatchingIndex");
static_assert(sizeof(FMotionMatchingIndex) == 0x000008, "Wrong size on FMotionMatchingIndex");
static_assert(offsetof(FMotionMatchingIndex, DataSetIndex) == 0x000000, "Member 'FMotionMatchingIndex::DataSetIndex' has a wrong offset!");
static_assert(offsetof(FMotionMatchingIndex, KeyIndex) == 0x000004, "Member 'FMotionMatchingIndex::KeyIndex' has a wrong offset!");

// ScriptStruct BPMotionCore.TrajectoryCost
// 0x000C (0x000C - 0x0000)
struct FTrajectoryCost final
{
public:
	float                                         PosCost;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelCost;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelCost;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrajectoryCost) == 0x000004, "Wrong alignment on FTrajectoryCost");
static_assert(sizeof(FTrajectoryCost) == 0x00000C, "Wrong size on FTrajectoryCost");
static_assert(offsetof(FTrajectoryCost, PosCost) == 0x000000, "Member 'FTrajectoryCost::PosCost' has a wrong offset!");
static_assert(offsetof(FTrajectoryCost, VelCost) == 0x000004, "Member 'FTrajectoryCost::VelCost' has a wrong offset!");
static_assert(offsetof(FTrajectoryCost, AccelCost) == 0x000008, "Member 'FTrajectoryCost::AccelCost' has a wrong offset!");

// ScriptStruct BPMotionCore.PoseCost
// 0x0008 (0x0008 - 0x0000)
struct FPoseCost final
{
public:
	float                                         PosCost;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelCost;                                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseCost) == 0x000004, "Wrong alignment on FPoseCost");
static_assert(sizeof(FPoseCost) == 0x000008, "Wrong size on FPoseCost");
static_assert(offsetof(FPoseCost, PosCost) == 0x000000, "Member 'FPoseCost::PosCost' has a wrong offset!");
static_assert(offsetof(FPoseCost, VelCost) == 0x000004, "Member 'FPoseCost::VelCost' has a wrong offset!");

// ScriptStruct BPMotionCore.MMKeyCost
// 0x0020 (0x0020 - 0x0000)
struct FMMKeyCost final
{
public:
	struct FMotionMatchingIndex                   Index;                                             // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FTrajectoryCost                        TrajectoryCost;                                    // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseCost                              PoseCost;                                          // 0x0014(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C29[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMMKeyCost) == 0x000004, "Wrong alignment on FMMKeyCost");
static_assert(sizeof(FMMKeyCost) == 0x000020, "Wrong size on FMMKeyCost");
static_assert(offsetof(FMMKeyCost, Index) == 0x000000, "Member 'FMMKeyCost::Index' has a wrong offset!");
static_assert(offsetof(FMMKeyCost, TrajectoryCost) == 0x000008, "Member 'FMMKeyCost::TrajectoryCost' has a wrong offset!");
static_assert(offsetof(FMMKeyCost, PoseCost) == 0x000014, "Member 'FMMKeyCost::PoseCost' has a wrong offset!");

// ScriptStruct BPMotionCore.RootBoneKey
// 0x0098 (0x0098 - 0x0000)
struct FRootBoneKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Trajectory[0x6];                                   // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootBoneKey) == 0x000008, "Wrong alignment on FRootBoneKey");
static_assert(sizeof(FRootBoneKey) == 0x000098, "Wrong size on FRootBoneKey");
static_assert(offsetof(FRootBoneKey, Time) == 0x000000, "Member 'FRootBoneKey::Time' has a wrong offset!");
static_assert(offsetof(FRootBoneKey, Trajectory) == 0x000008, "Member 'FRootBoneKey::Trajectory' has a wrong offset!");

// ScriptStruct BPMotionCore.PosVel
// 0x0030 (0x0030 - 0x0000)
struct FPosVel final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vel;                                               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPosVel) == 0x000008, "Wrong alignment on FPosVel");
static_assert(sizeof(FPosVel) == 0x000030, "Wrong size on FPosVel");
static_assert(offsetof(FPosVel, Pos) == 0x000000, "Member 'FPosVel::Pos' has a wrong offset!");
static_assert(offsetof(FPosVel, Vel) == 0x000018, "Member 'FPosVel::Vel' has a wrong offset!");

// ScriptStruct BPMotionCore.SubBoneKey
// 0x0030 (0x0030 - 0x0000)
struct FSubBoneKey final
{
public:
	struct FPosVel                                Sample;                                            // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubBoneKey) == 0x000008, "Wrong alignment on FSubBoneKey");
static_assert(sizeof(FSubBoneKey) == 0x000030, "Wrong size on FSubBoneKey");
static_assert(offsetof(FSubBoneKey, Sample) == 0x000000, "Member 'FSubBoneKey::Sample' has a wrong offset!");

// ScriptStruct BPMotionCore.MotionMatchingKey
// 0x00A8 (0x00A8 - 0x0000)
struct FMotionMatchingKey final
{
public:
	struct FRootBoneKey                           Root;                                              // 0x0000(0x0098)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSubBoneKey>                    SubBones;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMotionMatchingKey) == 0x000008, "Wrong alignment on FMotionMatchingKey");
static_assert(sizeof(FMotionMatchingKey) == 0x0000A8, "Wrong size on FMotionMatchingKey");
static_assert(offsetof(FMotionMatchingKey, Root) == 0x000000, "Member 'FMotionMatchingKey::Root' has a wrong offset!");
static_assert(offsetof(FMotionMatchingKey, SubBones) == 0x000098, "Member 'FMotionMatchingKey::SubBones' has a wrong offset!");

// ScriptStruct BPMotionCore.MMFindSetting
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMMFindSetting final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Responsiveness;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSplitTree;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         TrajectoryPositionalCostWeight;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryVelocityCostWeight;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryAccelerationCostWeight;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosePositionalCostWeight;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseVelocityCostWeight;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMotionMatchingIndex                   Current;                                           // 0x0020(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2C[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMMFindSetting) == 0x000008, "Wrong alignment on FMMFindSetting");
static_assert(sizeof(FMMFindSetting) == 0x000038, "Wrong size on FMMFindSetting");
static_assert(offsetof(FMMFindSetting, DeltaTime) == 0x000000, "Member 'FMMFindSetting::DeltaTime' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, Responsiveness) == 0x000004, "Member 'FMMFindSetting::Responsiveness' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, UseSplitTree) == 0x000008, "Member 'FMMFindSetting::UseSplitTree' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, TrajectoryPositionalCostWeight) == 0x00000C, "Member 'FMMFindSetting::TrajectoryPositionalCostWeight' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, TrajectoryVelocityCostWeight) == 0x000010, "Member 'FMMFindSetting::TrajectoryVelocityCostWeight' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, TrajectoryAccelerationCostWeight) == 0x000014, "Member 'FMMFindSetting::TrajectoryAccelerationCostWeight' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, PosePositionalCostWeight) == 0x000018, "Member 'FMMFindSetting::PosePositionalCostWeight' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, PoseVelocityCostWeight) == 0x00001C, "Member 'FMMFindSetting::PoseVelocityCostWeight' has a wrong offset!");
static_assert(offsetof(FMMFindSetting, Current) == 0x000020, "Member 'FMMFindSetting::Current' has a wrong offset!");

// ScriptStruct BPMotionCore.MMLog
// 0x0118 (0x0118 - 0x0000)
struct FMMLog final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMMKeyCost                             Best;                                              // 0x0004(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMotionMatchingKey                     Key;                                               // 0x0028(0x00A8)(NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMMFindSetting                         Setting;                                           // 0x00D8(0x0038)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2E[0x8];                                     // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMMLog) == 0x000008, "Wrong alignment on FMMLog");
static_assert(sizeof(FMMLog) == 0x000118, "Wrong size on FMMLog");
static_assert(offsetof(FMMLog, Timestamp) == 0x000000, "Member 'FMMLog::Timestamp' has a wrong offset!");
static_assert(offsetof(FMMLog, Best) == 0x000004, "Member 'FMMLog::Best' has a wrong offset!");
static_assert(offsetof(FMMLog, Key) == 0x000028, "Member 'FMMLog::Key' has a wrong offset!");
static_assert(offsetof(FMMLog, PlayTime) == 0x0000D0, "Member 'FMMLog::PlayTime' has a wrong offset!");
static_assert(offsetof(FMMLog, Duration) == 0x0000D4, "Member 'FMMLog::Duration' has a wrong offset!");
static_assert(offsetof(FMMLog, Setting) == 0x0000D8, "Member 'FMMLog::Setting' has a wrong offset!");

// ScriptStruct BPMotionCore.MMLogList
// 0x0020 (0x0020 - 0x0000)
struct FMMLogList final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMotionMatching>         MotionMatching;                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMMLog>                         Logs;                                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMMLogList) == 0x000008, "Wrong alignment on FMMLogList");
static_assert(sizeof(FMMLogList) == 0x000020, "Wrong size on FMMLogList");
static_assert(offsetof(FMMLogList, Name) == 0x000000, "Member 'FMMLogList::Name' has a wrong offset!");
static_assert(offsetof(FMMLogList, MotionMatching) == 0x000008, "Member 'FMMLogList::MotionMatching' has a wrong offset!");
static_assert(offsetof(FMMLogList, Logs) == 0x000010, "Member 'FMMLogList::Logs' has a wrong offset!");

// ScriptStruct BPMotionCore.RootBoneSample
// 0x0018 (0x0018 - 0x0000)
struct FRootBoneSample final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRootBoneKey>                   Samples;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootBoneSample) == 0x000008, "Wrong alignment on FRootBoneSample");
static_assert(sizeof(FRootBoneSample) == 0x000018, "Wrong size on FRootBoneSample");
static_assert(offsetof(FRootBoneSample, BoneName) == 0x000000, "Member 'FRootBoneSample::BoneName' has a wrong offset!");
static_assert(offsetof(FRootBoneSample, Samples) == 0x000008, "Member 'FRootBoneSample::Samples' has a wrong offset!");

// ScriptStruct BPMotionCore.SubBoneSample
// 0x0018 (0x0018 - 0x0000)
struct FSubBoneSample final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSubBoneKey>                    Samples;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubBoneSample) == 0x000008, "Wrong alignment on FSubBoneSample");
static_assert(sizeof(FSubBoneSample) == 0x000018, "Wrong size on FSubBoneSample");
static_assert(offsetof(FSubBoneSample, BoneName) == 0x000000, "Member 'FSubBoneSample::BoneName' has a wrong offset!");
static_assert(offsetof(FSubBoneSample, Samples) == 0x000008, "Member 'FSubBoneSample::Samples' has a wrong offset!");

// ScriptStruct BPMotionCore.BestAnimClip
// 0x0030 (0x0030 - 0x0000)
struct FBestAnimClip final
{
public:
	struct FTrajectoryCost                        TrajectoryCost;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseCost                              PoseCost;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimSequence*                          AnimSequence;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C30[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         StartTime;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C31[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBestAnimClip) == 0x000008, "Wrong alignment on FBestAnimClip");
static_assert(sizeof(FBestAnimClip) == 0x000030, "Wrong size on FBestAnimClip");
static_assert(offsetof(FBestAnimClip, TrajectoryCost) == 0x000000, "Member 'FBestAnimClip::TrajectoryCost' has a wrong offset!");
static_assert(offsetof(FBestAnimClip, PoseCost) == 0x00000C, "Member 'FBestAnimClip::PoseCost' has a wrong offset!");
static_assert(offsetof(FBestAnimClip, AnimSequence) == 0x000018, "Member 'FBestAnimClip::AnimSequence' has a wrong offset!");
static_assert(offsetof(FBestAnimClip, Loop) == 0x000020, "Member 'FBestAnimClip::Loop' has a wrong offset!");
static_assert(offsetof(FBestAnimClip, StartTime) == 0x000024, "Member 'FBestAnimClip::StartTime' has a wrong offset!");

// ScriptStruct BPMotionCore.Directional
// 0x0018 (0x0018 - 0x0000)
struct FDirectional final
{
public:
	float                                         Forward;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Backward;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Left;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Up;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Down;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectional) == 0x000004, "Wrong alignment on FDirectional");
static_assert(sizeof(FDirectional) == 0x000018, "Wrong size on FDirectional");
static_assert(offsetof(FDirectional, Forward) == 0x000000, "Member 'FDirectional::Forward' has a wrong offset!");
static_assert(offsetof(FDirectional, Backward) == 0x000004, "Member 'FDirectional::Backward' has a wrong offset!");
static_assert(offsetof(FDirectional, Right) == 0x000008, "Member 'FDirectional::Right' has a wrong offset!");
static_assert(offsetof(FDirectional, Left) == 0x00000C, "Member 'FDirectional::Left' has a wrong offset!");
static_assert(offsetof(FDirectional, Up) == 0x000010, "Member 'FDirectional::Up' has a wrong offset!");
static_assert(offsetof(FDirectional, Down) == 0x000014, "Member 'FDirectional::Down' has a wrong offset!");

// ScriptStruct BPMotionCore.AnimDataSet
// 0x0030 (0x0030 - 0x0000)
struct FAnimDataSet final
{
public:
	class UAnimSource*                            Source;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootBoneSample                        RootSample;                                        // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	TArray<struct FSubBoneSample>                 BoneSamples;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimDataSet) == 0x000008, "Wrong alignment on FAnimDataSet");
static_assert(sizeof(FAnimDataSet) == 0x000030, "Wrong size on FAnimDataSet");
static_assert(offsetof(FAnimDataSet, Source) == 0x000000, "Member 'FAnimDataSet::Source' has a wrong offset!");
static_assert(offsetof(FAnimDataSet, RootSample) == 0x000008, "Member 'FAnimDataSet::RootSample' has a wrong offset!");
static_assert(offsetof(FAnimDataSet, BoneSamples) == 0x000020, "Member 'FAnimDataSet::BoneSamples' has a wrong offset!");

}

