#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: RankEntry_BP

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RankEntry_BP.RankEntry_BP_C
// 0x0088 (0x00B0 - 0x0028)
class URankEntry_BP_C final : public UObject
{
public:
	int32                                         PrevRanking;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ranking;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CharaIcon;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   Nickname;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RankPoint;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kill;                                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Death;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Assist;                                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayTime;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERankingType                                  RankingType;                                       // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3869[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         FinalRound;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BlackCoin;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Gold;                                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Armor;                                             // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FItemID                                ProfileCardIDN;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FItemID                                EmblemIDN;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        UI_Y_Size;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowRankUp;                                        // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowIsMine;                                        // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_386A[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserID                                UserID;                                            // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Set_Ranking_Data_for_Challenge(const struct FACK_ChallengeRead& _src, ERankingType _ranking_type);
	void SetRankingData(const struct FNetRankingEntry& _src, ERankingType _ranking_type);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RankEntry_BP_C">();
	}
	static class URankEntry_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URankEntry_BP_C>();
	}
};
static_assert(alignof(URankEntry_BP_C) == 0x000008, "Wrong alignment on URankEntry_BP_C");
static_assert(sizeof(URankEntry_BP_C) == 0x0000B0, "Wrong size on URankEntry_BP_C");
static_assert(offsetof(URankEntry_BP_C, PrevRanking) == 0x000028, "Member 'URankEntry_BP_C::PrevRanking' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Ranking) == 0x00002C, "Member 'URankEntry_BP_C::Ranking' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, CharaIcon) == 0x000030, "Member 'URankEntry_BP_C::CharaIcon' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Nickname) == 0x000038, "Member 'URankEntry_BP_C::Nickname' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, RankPoint) == 0x000050, "Member 'URankEntry_BP_C::RankPoint' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Kill) == 0x000054, "Member 'URankEntry_BP_C::Kill' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Death) == 0x000058, "Member 'URankEntry_BP_C::Death' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Assist) == 0x00005C, "Member 'URankEntry_BP_C::Assist' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, PlayTime) == 0x000060, "Member 'URankEntry_BP_C::PlayTime' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, RankingType) == 0x000064, "Member 'URankEntry_BP_C::RankingType' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, FinalRound) == 0x000068, "Member 'URankEntry_BP_C::FinalRound' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, BlackCoin) == 0x00006C, "Member 'URankEntry_BP_C::BlackCoin' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Gold) == 0x000070, "Member 'URankEntry_BP_C::Gold' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, Armor) == 0x000074, "Member 'URankEntry_BP_C::Armor' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, ProfileCardIDN) == 0x000078, "Member 'URankEntry_BP_C::ProfileCardIDN' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, EmblemIDN) == 0x000088, "Member 'URankEntry_BP_C::EmblemIDN' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, UI_Y_Size) == 0x000098, "Member 'URankEntry_BP_C::UI_Y_Size' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, ShowRankUp) == 0x0000A0, "Member 'URankEntry_BP_C::ShowRankUp' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, ShowIsMine) == 0x0000A1, "Member 'URankEntry_BP_C::ShowIsMine' has a wrong offset!");
static_assert(offsetof(URankEntry_BP_C, UserID) == 0x0000A8, "Member 'URankEntry_BP_C::UserID' has a wrong offset!");

}

