#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: FL_GlobalFunctions

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_GlobalFunctions.FL_GlobalFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UFL_GlobalFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static void OneMinusx(double In, class UObject* __WorldContext, double* Out);
	static void Angle_Between_Projected_Vectors(const struct FVector& A, const struct FVector& B, const struct FVector& Plane_Normal, class UObject* __WorldContext, double* Angle);
	static void Angle_Between_Vectors(const struct FVector& A, const struct FVector& B, class UObject* __WorldContext, double* Angle);
	static void Direction(const struct FVector& Start, const struct FVector& End, class UObject* __WorldContext, struct FVector* Out);
	static void Direction_Norm(const struct FVector& Start, const struct FVector& End, class UObject* __WorldContext, struct FVector* Out);
	static void DrawDirection(const struct FVector& Center, const struct FVector& Param_Direction, double Length, const struct FLinearColor& Color, class UObject* __WorldContext);
	static void FlatNormalized(const struct FVector& In, class UObject* __WorldContext, struct FVector* Out);
	static void Flatten(const struct FVector& In, class UObject* __WorldContext, struct FVector* Out);
	static void Float_Delta(double A, double B, class UObject* __WorldContext, double* Abs_delta);
	static void GetOrthogonalVector(const struct FVector& In, class UObject* __WorldContext, struct FVector* Out);
	static void GetValueAtPercentage(double Percentage, double Max, double Min, class UObject* __WorldContext, double* Value);
	static void IsLocationToTheRight(const struct FVector& Center, const struct FVector& RightDirection, const struct FVector& Target, class UObject* __WorldContext, bool* Out);
	static void IsLocationToTheRightOfActor(class AActor* Actor, const struct FVector& Location, class UObject* __WorldContext, bool* Out);
	static void MoveTowards(const struct FVector& Start, const struct FVector& Target, double Distance, class UObject* __WorldContext, struct FVector* Moved_position);
	static void Norm(const struct FVector& In, class UObject* __WorldContext, struct FVector* Out);
	static void Norm_dot(const struct FVector& A, const struct FVector& B, class UObject* __WorldContext, double* Out);
	static void ResizeVector(const struct FVector& Vector, double Length, class UObject* __WorldContext, struct FVector* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_GlobalFunctions_C">();
	}
	static class UFL_GlobalFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_GlobalFunctions_C>();
	}
};
static_assert(alignof(UFL_GlobalFunctions_C) == 0x000008, "Wrong alignment on UFL_GlobalFunctions_C");
static_assert(sizeof(UFL_GlobalFunctions_C) == 0x000028, "Wrong size on UFL_GlobalFunctions_C");

}

