#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_Ping

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Ctrl_Ping.Ctrl_Ping_C.OnSynchronizeProperties
// 0x0088 (0x0088 - 0x0000)
struct Ctrl_Ping_C_OnSynchronizeProperties final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3645[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3646[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Bottom_ImplicitCast;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Right_ImplicitCast;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Top_ImplicitCast;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_Ping_C_OnSynchronizeProperties) == 0x000008, "Wrong alignment on Ctrl_Ping_C_OnSynchronizeProperties");
static_assert(sizeof(Ctrl_Ping_C_OnSynchronizeProperties) == 0x000088, "Wrong size on Ctrl_Ping_C_OnSynchronizeProperties");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, ReturnValue) == 0x000000, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, K2Node_MakeStruct_Margin) == 0x000004, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000018, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_BreakVector2D_X) == 0x000020, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, K2Node_MakeStruct_Margin_1) == 0x000048, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000058, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000060, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000068, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, K2Node_MakeStruct_Bottom_ImplicitCast) == 0x00006C, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::K2Node_MakeStruct_Bottom_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, K2Node_MakeStruct_Right_ImplicitCast) == 0x000070, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::K2Node_MakeStruct_Right_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, K2Node_MakeStruct_Top_ImplicitCast) == 0x000074, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::K2Node_MakeStruct_Top_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, K2Node_MakeStruct_Left_ImplicitCast) == 0x000078, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::K2Node_MakeStruct_Left_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x00007C, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_OnSynchronizeProperties, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000080, "Member 'Ctrl_Ping_C_OnSynchronizeProperties::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

// Function Ctrl_Ping.Ctrl_Ping_C.SetArrow
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_Ping_C_SetArrow final
{
public:
	double                                        _angle;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _show;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3647[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_Ping_C_SetArrow) == 0x000008, "Wrong alignment on Ctrl_Ping_C_SetArrow");
static_assert(sizeof(Ctrl_Ping_C_SetArrow) == 0x000010, "Wrong size on Ctrl_Ping_C_SetArrow");
static_assert(offsetof(Ctrl_Ping_C_SetArrow, _angle) == 0x000000, "Member 'Ctrl_Ping_C_SetArrow::_angle' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_SetArrow, _show) == 0x000008, "Member 'Ctrl_Ping_C_SetArrow::_show' has a wrong offset!");
static_assert(offsetof(Ctrl_Ping_C_SetArrow, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x00000C, "Member 'Ctrl_Ping_C_SetArrow::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function Ctrl_Ping.Ctrl_Ping_C.SetEffectImage
// 0x00D0 (0x00D0 - 0x0000)
struct Ctrl_Ping_C_SetEffectImage final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x00D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Ctrl_Ping_C_SetEffectImage) == 0x000010, "Wrong alignment on Ctrl_Ping_C_SetEffectImage");
static_assert(sizeof(Ctrl_Ping_C_SetEffectImage) == 0x0000D0, "Wrong size on Ctrl_Ping_C_SetEffectImage");
static_assert(offsetof(Ctrl_Ping_C_SetEffectImage, InBrush) == 0x000000, "Member 'Ctrl_Ping_C_SetEffectImage::InBrush' has a wrong offset!");

// Function Ctrl_Ping.Ctrl_Ping_C.SetIndicatorImage
// 0x00D0 (0x00D0 - 0x0000)
struct Ctrl_Ping_C_SetIndicatorImage final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x00D0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Ctrl_Ping_C_SetIndicatorImage) == 0x000010, "Wrong alignment on Ctrl_Ping_C_SetIndicatorImage");
static_assert(sizeof(Ctrl_Ping_C_SetIndicatorImage) == 0x0000D0, "Wrong size on Ctrl_Ping_C_SetIndicatorImage");
static_assert(offsetof(Ctrl_Ping_C_SetIndicatorImage, InBrush) == 0x000000, "Member 'Ctrl_Ping_C_SetIndicatorImage::InBrush' has a wrong offset!");

}

