#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: BPGLib

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// Enum BPGLib.EInputMethodType
// NumValues: 0x0003
enum class EInputMethodType : uint8
{
	MouseAndKeyboard                         = 0,
	Gamepad                                  = 1,
	EInputMethodType_MAX                     = 2,
};

// Enum BPGLib.EHoverGraphArea
// NumValues: 0x0003
enum class EHoverGraphArea : uint8
{
	None                                     = 0,
	AxisName                                 = 1,
	EHoverGraphArea_MAX                      = 2,
};

// Enum BPGLib.EWidgetState
// NumValues: 0x0005
enum class EWidgetState : uint8
{
	OnShow                                   = 0,
	Idle                                     = 1,
	OnHide                                   = 2,
	Hide                                     = 3,
	EWidgetState_MAX                         = 4,
};

// Enum BPGLib.EPeriodicRepeatType
// NumValues: 0x0004
enum class EPeriodicRepeatType : uint8
{
	None                                     = 0,
	ForwardBackward                          = 1,
	LeftRight                                = 2,
	EPeriodicRepeatType_MAX                  = 3,
};

// Enum BPGLib.EMoveDriveSide
// NumValues: 0x0004
enum class EMoveDriveSide : uint8
{
	Client                                   = 0,
	Server                                   = 1,
	Remote                                   = 2,
	EMoveDriveSide_MAX                       = 3,
};

// Enum BPGLib.EMoveMode
// NumValues: 0x0006
enum class EMoveMode : uint8
{
	NoMove                                   = 0,
	Normal                                   = 1,
	RootMotion                               = 2,
	TrackMotion                              = 3,
	MotionMatchingMove                       = 4,
	EMoveMode_MAX                            = 5,
};

// Enum BPGLib.EMoveResult
// NumValues: 0x0005
enum class EMoveResult : uint8
{
	OK                                       = 0,
	HitAndSlided                             = 1,
	Stucked                                  = 2,
	ResolvedForPenetration                   = 3,
	EMoveResult_MAX                          = 4,
};

// Enum BPGLib.EPreemptiveEvent
// NumValues: 0x0004
enum class EPreemptiveEvent : uint8
{
	Start                                    = 0,
	Stepping                                 = 1,
	End                                      = 2,
	EPreemptiveEvent_MAX                     = 3,
};

// Enum BPGLib.EFadeStatus
// NumValues: 0x0005
enum class EFadeStatus : uint8
{
	None                                     = 0,
	FadingOut                                = 1,
	FadedOut                                 = 2,
	FadingIn                                 = 3,
	EFadeStatus_MAX                          = 4,
};

// Enum BPGLib.ESprintState
// NumValues: 0x0007
enum class ESprintState : uint8
{
	Deactivated                              = 0,
	StartRequest                             = 1,
	Sprinting                                = 2,
	EndRequest                               = 3,
	EndRequest_Fire                          = 4,
	EndRequest_Cancel                        = 5,
	ESprintState_MAX                         = 6,
};

// Enum BPGLib.EBPMoveDirection
// NumValues: 0x0008
enum class EBPMoveDirection : uint8
{
	NA                                       = 0,
	Forward                                  = 1,
	Left                                     = 2,
	Right                                    = 3,
	LeftForward                              = 4,
	RightForward                             = 5,
	Backward                                 = 6,
	EBPMoveDirection_MAX                     = 7,
};

// Enum BPGLib.ESprintAnimationState
// NumValues: 0x0008
enum class ESprintAnimationState : uint8
{
	NA                                       = 0,
	Start                                    = 1,
	TurnBack                                 = 2,
	Transit                                  = 3,
	FastTransit                              = 4,
	Sprinting                                = 5,
	Finish                                   = 6,
	ESprintAnimationState_MAX                = 7,
};

// Enum BPGLib.EFollowCamInitialDistance
// NumValues: 0x0005
enum class EFollowCamInitialDistance : uint8
{
	MoveToMiddleDistance                     = 0,
	AdaptiveDistance                         = 1,
	FitToTarget_Horizontal                   = 2,
	FitToTarget_Vertical                     = 3,
	EFollowCamInitialDistance_MAX            = 4,
};

// Enum BPGLib.EFollowCamMovementStyle
// NumValues: 0x0003
enum class EFollowCamMovementStyle : uint8
{
	PreferKeepingDirection                   = 0,
	PreferKeepingPosition                    = 1,
	EFollowCamMovementStyle_MAX              = 2,
};

// Enum BPGLib.EFollowCamTarget
// NumValues: 0x0004
enum class EFollowCamTarget : uint8
{
	ActorLocation                            = 0,
	ActorCenter                              = 1,
	Socket                                   = 2,
	EFollowCamTarget_MAX                     = 3,
};

// Enum BPGLib.EIndicatorType
// NumValues: 0x0006
enum class EIndicatorType : uint8
{
	Target                                   = 0,
	Ping                                     = 1,
	Stat                                     = 2,
	Revive                                   = 3,
	Scan                                     = 4,
	EIndicatorType_MAX                       = 5,
};

// Enum BPGLib.EIndicatorVisibleCondition
// NumValues: 0x0004
enum class EIndicatorVisibleCondition : uint8
{
	Always                                   = 0,
	OnSight                                  = 1,
	NotOnSight                               = 2,
	EIndicatorVisibleCondition_MAX           = 3,
};

// Enum BPGLib.ELGLevel
// NumValues: 0x0005
enum class ELGLevel : uint8
{
	Info                                     = 0,
	Debug                                    = 1,
	Warning                                  = 2,
	Error                                    = 3,
	ELGLevel_MAX                             = 4,
};

// Enum BPGLib.EWorldNetType
// NumValues: 0x0005
enum class EWorldNetType : uint8
{
	Standalone                               = 0,
	DedicatedServer                          = 1,
	ListenServer                             = 2,
	Client                                   = 3,
	EWorldNetType_MAX                        = 4,
};

// Enum BPGLib.EMessageBoxButtonType
// NumValues: 0x0004
enum class EMessageBoxButtonType : uint8
{
	Normal                                   = 0,
	Confirm                                  = 1,
	Cancel                                   = 2,
	EMessageBoxButtonType_MAX                = 3,
};

// Enum BPGLib.EMovementSourceType
// NumValues: 0x0004
enum class EMovementSourceType : uint8
{
	None                                     = 0,
	MovingFloor                              = 1,
	ImplementedInterface                     = 2,
	EMovementSourceType_MAX                  = 3,
};

// Enum BPGLib.EMsgPackFormat
// NumValues: 0x0013
enum class EMsgPackFormat : uint8
{
	NA                                       = 0,
	Nil                                      = 1,
	Map                                      = 2,
	Map_Fix                                  = 3,
	Array                                    = 4,
	Array_Fix                                = 5,
	Bool_False                               = 6,
	Bool_True                                = 7,
	Binary                                   = 8,
	Extension                                = 9,
	Extension_Fix                            = 10,
	Float                                    = 11,
	Uint                                     = 12,
	Uint_Fix                                 = 13,
	Int                                      = 14,
	Int_Fix                                  = 15,
	String                                   = 16,
	String_Fix                               = 17,
	EMsgPackFormat_MAX                       = 18,
};

// Enum BPGLib.EPopupType
// NumValues: 0x0004
enum class EPopupType : uint8
{
	GameUI                                   = 0,
	GameUI_Uncloseable                       = 1,
	SystemUI                                 = 2,
	EPopupType_MAX                           = 3,
};

// Enum BPGLib.EHandleReply
// NumValues: 0x0005
enum class EHandleReply : uint8
{
	Handled                                  = 0,
	Handled_Capture                          = 1,
	Handled_ReleaseCapture                   = 2,
	Unhandled                                = 3,
	EHandleReply_MAX                         = 4,
};

// Enum BPGLib.ESplineMeshLength
// NumValues: 0x0003
enum class ESplineMeshLength : uint8
{
	Mesh                                     = 0,
	Specified                                = 1,
	ESplineMeshLength_MAX                    = 2,
};

// Enum BPGLib.EReply
// NumValues: 0x0003
enum class EReply : uint8
{
	Unhandled                                = 0,
	Handled                                  = 1,
	EReply_MAX                               = 2,
};

// Enum BPGLib.EInputMode
// NumValues: 0x0005
enum class EInputMode : uint8
{
	Game                                     = 0,
	GameAndUI                                = 1,
	UIOnly                                   = 2,
	NoInput                                  = 3,
	EInputMode_MAX                           = 4,
};

// Enum BPGLib.EWaitingType
// NumValues: 0x0004
enum class EWaitingType : uint8
{
	NoWait                                   = 0,
	Waiting                                  = 1,
	WaitingButInteractible                   = 2,
	EWaitingType_MAX                         = 3,
};

// Enum BPGLib.EUIOrder
// NumValues: 0x0007
enum class EUIOrder : uint8
{
	Main_VeryLow                             = 0,
	Main_Low                                 = 10,
	Main_Middle                              = 20,
	Main_High                                = 30,
	Main_VeryHigh                            = 40,
	System                                   = 100,
	EUIOrder_MAX                             = 101,
};

// Enum BPGLib.EKeyModifierSide
// NumValues: 0x0004
enum class EKeyModifierSide : uint8
{
	Any                                      = 0,
	Left                                     = 1,
	Right                                    = 2,
	EKeyModifierSide_MAX                     = 3,
};

// Enum BPGLib.EUISpace
// NumValues: 0x0003
enum class EUISpace : uint8
{
	ViewportSpace                            = 0,
	UMGScreenSpace                           = 1,
	EUISpace_MAX                             = 2,
};

// Enum BPGLib.EOutlineColor
// NumValues: 0x000C
enum class EOutlineColor : uint8
{
	NotUsed                                  = 0,
	None                                     = 4,
	LightGreen                               = 12,
	LightBlue                                = 20,
	Yellow                                   = 28,
	Red                                      = 36,
	Orange                                   = 44,
	Gray                                     = 52,
	Team_Blue                                = 60,
	Team_Red                                 = 68,
	Team_Orange                              = 76,
	EOutlineColor_MAX                        = 77,
};

// Enum BPGLib.EStencilBufferType
// NumValues: 0x0003
enum class EStencilBufferType : uint8
{
	NA                                       = 0,
	SceneDepthFilter                         = 128,
	EStencilBufferType_MAX                   = 129,
};

// Enum BPGLib.ENetRoles
// NumValues: 0x0006
enum class ENetRoles : uint8
{
	NA                                       = 0,
	Server_Local                             = 1,
	Server_Remote                            = 2,
	Client_Local                             = 3,
	Client_Remote                            = 4,
	ENetRoles_MAX                            = 5,
};

// Enum BPGLib.EOptionLanguage
// NumValues: 0x000B
enum class EOptionLanguage : uint8
{
	EN                                       = 0,
	KR                                       = 1,
	JP                                       = 2,
	ZH_HANS                                  = 3,
	ZH_HANT                                  = 4,
	TH                                       = 5,
	TR                                       = 6,
	RU                                       = 7,
	PT_BR                                    = 8,
	ES_AR                                    = 9,
	EOptionLanguage_MAX                      = 10,
};

// Enum BPGLib.ECompare
// NumValues: 0x0008
enum class ECompare : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	Greater                                  = 2,
	GreaterOrEqual                           = 3,
	Less                                     = 4,
	LessOrEqual                              = 5,
	Always                                   = 6,
	ECompare_MAX                             = 7,
};

// Enum BPGLib.ENetError
// NumValues: 0x0005
enum class ENetError : uint8
{
	NoError                                  = 0,
	Notice                                   = 1,
	Warning                                  = 2,
	CriticalError                            = 3,
	ENetError_MAX                            = 4,
};

// ScriptStruct BPGLib.LogPackBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FLogPackBase
{
public:
	uint8                                         Pad_1AFD[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         TypeHash;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLogPackBase) == 0x000008, "Wrong alignment on FLogPackBase");
static_assert(sizeof(FLogPackBase) == 0x000010, "Wrong size on FLogPackBase");
static_assert(offsetof(FLogPackBase, TypeHash) == 0x000008, "Member 'FLogPackBase::TypeHash' has a wrong offset!");

// ScriptStruct BPGLib.LogPack
// 0x0010 (0x0020 - 0x0010)
struct FLogPack : public FLogPackBase
{
public:
	struct FDateTime                              Time;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTime;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectID;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogPack) == 0x000008, "Wrong alignment on FLogPack");
static_assert(sizeof(FLogPack) == 0x000020, "Wrong size on FLogPack");
static_assert(offsetof(FLogPack, Time) == 0x000010, "Member 'FLogPack::Time' has a wrong offset!");
static_assert(offsetof(FLogPack, ServerTime) == 0x000018, "Member 'FLogPack::ServerTime' has a wrong offset!");
static_assert(offsetof(FLogPack, ObjectID) == 0x00001C, "Member 'FLogPack::ObjectID' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_Base
// 0x0000 (0x0020 - 0x0020)
struct FBPGMoveLog_Base : public FLogPack
{
};
static_assert(alignof(FBPGMoveLog_Base) == 0x000008, "Wrong alignment on FBPGMoveLog_Base");
static_assert(sizeof(FBPGMoveLog_Base) == 0x000020, "Wrong size on FBPGMoveLog_Base");

// ScriptStruct BPGLib.BPGMoveLog_Warp
// 0x0048 (0x0068 - 0x0020)
struct FBPGMoveLog_Warp final : public FBPGMoveLog_Base
{
public:
	struct FVector                                Location;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Difference;                                        // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_Warp) == 0x000008, "Wrong alignment on FBPGMoveLog_Warp");
static_assert(sizeof(FBPGMoveLog_Warp) == 0x000068, "Wrong size on FBPGMoveLog_Warp");
static_assert(offsetof(FBPGMoveLog_Warp, Location) == 0x000020, "Member 'FBPGMoveLog_Warp::Location' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Warp, Rotation) == 0x000038, "Member 'FBPGMoveLog_Warp::Rotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Warp, Difference) == 0x000050, "Member 'FBPGMoveLog_Warp::Difference' has a wrong offset!");

// ScriptStruct BPGLib.MovementSourceData
// 0x0020 (0x0020 - 0x0000)
struct FMovementSourceData final
{
public:
	EMovementSourceType                           Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceObjectName;                                  // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovementSourceData) == 0x000008, "Wrong alignment on FMovementSourceData");
static_assert(sizeof(FMovementSourceData) == 0x000020, "Wrong size on FMovementSourceData");
static_assert(offsetof(FMovementSourceData, Type) == 0x000000, "Member 'FMovementSourceData::Type' has a wrong offset!");
static_assert(offsetof(FMovementSourceData, SourceObject) == 0x000008, "Member 'FMovementSourceData::SourceObject' has a wrong offset!");
static_assert(offsetof(FMovementSourceData, SourceObjectName) == 0x000010, "Member 'FMovementSourceData::SourceObjectName' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_WastedDelta
// 0x0008 (0x0028 - 0x0020)
struct FBPGMoveLog_WastedDelta final : public FBPGMoveLog_Base
{
public:
	float                                         Delta;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B00[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_WastedDelta) == 0x000008, "Wrong alignment on FBPGMoveLog_WastedDelta");
static_assert(sizeof(FBPGMoveLog_WastedDelta) == 0x000028, "Wrong size on FBPGMoveLog_WastedDelta");
static_assert(offsetof(FBPGMoveLog_WastedDelta, Delta) == 0x000020, "Member 'FBPGMoveLog_WastedDelta::Delta' has a wrong offset!");

// ScriptStruct BPGLib.BattleTime
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FBattleTime final
{
public:
	uint8                                         Pad_1B01[0x4];                                     // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleTime) == 0x000004, "Wrong alignment on FBattleTime");
static_assert(sizeof(FBattleTime) == 0x000004, "Wrong size on FBattleTime");

// ScriptStruct BPGLib.DeltaTime
// 0x0002 (0x0002 - 0x0000)
struct alignas(0x02) FDeltaTime final
{
public:
	uint8                                         Pad_1B02[0x2];                                     // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FDeltaTime) == 0x000002, "Wrong alignment on FDeltaTime");
static_assert(sizeof(FDeltaTime) == 0x000002, "Wrong size on FDeltaTime");

// ScriptStruct BPGLib.MovementState
// 0x0001 (0x0001 - 0x0000)
struct FMovementState final
{
public:
	uint8                                         Pad_1B03[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMovementState) == 0x000001, "Wrong alignment on FMovementState");
static_assert(sizeof(FMovementState) == 0x000001, "Wrong size on FMovementState");

// ScriptStruct BPGLib.C2SMove
// 0x0058 (0x0058 - 0x0000)
struct FC2SMove final
{
public:
	uint8                                         Pad_1B04[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDeltaTime                             DeltaTime;                                         // 0x0008(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementState                         MoveFlags;                                         // 0x000A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B05[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Acceleration;                                      // 0x0010(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Input;                                             // 0x0028(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Yaws;                                              // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FC2SMove) == 0x000008, "Wrong alignment on FC2SMove");
static_assert(sizeof(FC2SMove) == 0x000058, "Wrong size on FC2SMove");
static_assert(offsetof(FC2SMove, DeltaTime) == 0x000008, "Member 'FC2SMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(FC2SMove, MoveFlags) == 0x00000A, "Member 'FC2SMove::MoveFlags' has a wrong offset!");
static_assert(offsetof(FC2SMove, Acceleration) == 0x000010, "Member 'FC2SMove::Acceleration' has a wrong offset!");
static_assert(offsetof(FC2SMove, Input) == 0x000028, "Member 'FC2SMove::Input' has a wrong offset!");
static_assert(offsetof(FC2SMove, Pitch) == 0x000040, "Member 'FC2SMove::Pitch' has a wrong offset!");
static_assert(offsetof(FC2SMove, Roll) == 0x000044, "Member 'FC2SMove::Roll' has a wrong offset!");
static_assert(offsetof(FC2SMove, Yaws) == 0x000048, "Member 'FC2SMove::Yaws' has a wrong offset!");

// ScriptStruct BPGLib.C2SMoves
// 0x0038 (0x0038 - 0x0000)
struct FC2SMoves final
{
public:
	uint8                                         Pad_1B06[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattleTime                            BattleTime;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B07[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FC2SMove>                       Moves;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                ClientPos;                                         // 0x0020(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FC2SMoves) == 0x000008, "Wrong alignment on FC2SMoves");
static_assert(sizeof(FC2SMoves) == 0x000038, "Wrong size on FC2SMoves");
static_assert(offsetof(FC2SMoves, BattleTime) == 0x000008, "Member 'FC2SMoves::BattleTime' has a wrong offset!");
static_assert(offsetof(FC2SMoves, Moves) == 0x000010, "Member 'FC2SMoves::Moves' has a wrong offset!");
static_assert(offsetof(FC2SMoves, ClientPos) == 0x000020, "Member 'FC2SMoves::ClientPos' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DriveRM_StartCorrection
// 0x0030 (0x0050 - 0x0020)
struct FBPGMoveLog_DriveRM_StartCorrection final : public FBPGMoveLog_Base
{
public:
	struct FVector                                NewStartPos;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewStartRot;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_DriveRM_StartCorrection) == 0x000008, "Wrong alignment on FBPGMoveLog_DriveRM_StartCorrection");
static_assert(sizeof(FBPGMoveLog_DriveRM_StartCorrection) == 0x000050, "Wrong size on FBPGMoveLog_DriveRM_StartCorrection");
static_assert(offsetof(FBPGMoveLog_DriveRM_StartCorrection, NewStartPos) == 0x000020, "Member 'FBPGMoveLog_DriveRM_StartCorrection::NewStartPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRM_StartCorrection, NewStartRot) == 0x000038, "Member 'FBPGMoveLog_DriveRM_StartCorrection::NewStartRot' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_OneFrame
// 0x0058 (0x0078 - 0x0020)
struct FBPGMoveLog_OneFrame final : public FBPGMoveLog_Base
{
public:
	float                                         WorldTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattleTime                            BattleTime;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementState                         Flags;                                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B08[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Velocity;                                          // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_OneFrame) == 0x000008, "Wrong alignment on FBPGMoveLog_OneFrame");
static_assert(sizeof(FBPGMoveLog_OneFrame) == 0x000078, "Wrong size on FBPGMoveLog_OneFrame");
static_assert(offsetof(FBPGMoveLog_OneFrame, WorldTime) == 0x000020, "Member 'FBPGMoveLog_OneFrame::WorldTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_OneFrame, BattleTime) == 0x000024, "Member 'FBPGMoveLog_OneFrame::BattleTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_OneFrame, Pos) == 0x000028, "Member 'FBPGMoveLog_OneFrame::Pos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_OneFrame, Rot) == 0x000040, "Member 'FBPGMoveLog_OneFrame::Rot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_OneFrame, Flags) == 0x000058, "Member 'FBPGMoveLog_OneFrame::Flags' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_OneFrame, Velocity) == 0x000060, "Member 'FBPGMoveLog_OneFrame::Velocity' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_Text
// 0x0018 (0x0038 - 0x0020)
struct FBPGMoveLog_Text final : public FBPGMoveLog_Base
{
public:
	ELGLevel                                      Level;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B09[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Message;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_Text) == 0x000008, "Wrong alignment on FBPGMoveLog_Text");
static_assert(sizeof(FBPGMoveLog_Text) == 0x000038, "Wrong size on FBPGMoveLog_Text");
static_assert(offsetof(FBPGMoveLog_Text, Level) == 0x000020, "Member 'FBPGMoveLog_Text::Level' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Text, Message) == 0x000028, "Member 'FBPGMoveLog_Text::Message' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_InterpAnimRot
// 0x0040 (0x0060 - 0x0020)
struct FBPGMoveLog_InterpAnimRot final : public FBPGMoveLog_Base
{
public:
	int32                                         AnimID;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalKeys;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0A[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ResultYaw;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Reason;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key0_Time;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key0_Yaw;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key1_Time;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key1_Yaw;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0C[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_InterpAnimRot) == 0x000008, "Wrong alignment on FBPGMoveLog_InterpAnimRot");
static_assert(sizeof(FBPGMoveLog_InterpAnimRot) == 0x000060, "Wrong size on FBPGMoveLog_InterpAnimRot");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, AnimID) == 0x000020, "Member 'FBPGMoveLog_InterpAnimRot::AnimID' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, PlayTime) == 0x000024, "Member 'FBPGMoveLog_InterpAnimRot::PlayTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, TotalKeys) == 0x000028, "Member 'FBPGMoveLog_InterpAnimRot::TotalKeys' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, Result) == 0x00002C, "Member 'FBPGMoveLog_InterpAnimRot::Result' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, ResultYaw) == 0x000030, "Member 'FBPGMoveLog_InterpAnimRot::ResultYaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, Reason) == 0x000038, "Member 'FBPGMoveLog_InterpAnimRot::Reason' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, Key0_Time) == 0x000048, "Member 'FBPGMoveLog_InterpAnimRot::Key0_Time' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, Key0_Yaw) == 0x00004C, "Member 'FBPGMoveLog_InterpAnimRot::Key0_Yaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, Key1_Time) == 0x000050, "Member 'FBPGMoveLog_InterpAnimRot::Key1_Time' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, Key1_Yaw) == 0x000054, "Member 'FBPGMoveLog_InterpAnimRot::Key1_Yaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_InterpAnimRot, T) == 0x000058, "Member 'FBPGMoveLog_InterpAnimRot::T' has a wrong offset!");

// ScriptStruct BPGLib.MoveSyncID
// 0x0004 (0x0004 - 0x0000)
struct FMoveSyncID final
{
public:
	uint32                                        _id;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMoveSyncID) == 0x000004, "Wrong alignment on FMoveSyncID");
static_assert(sizeof(FMoveSyncID) == 0x000004, "Wrong size on FMoveSyncID");
static_assert(offsetof(FMoveSyncID, _id) == 0x000000, "Member 'FMoveSyncID::_id' has a wrong offset!");

// ScriptStruct BPGLib.PlayingRootMotion
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPlayingRootMotion final
{
public:
	uint8                                         Pad_1B0D[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	uint16                                        MontageID;                                         // 0x0008(0x0002)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0E[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         PlayTime;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayingRootMotion) == 0x000008, "Wrong alignment on FPlayingRootMotion");
static_assert(sizeof(FPlayingRootMotion) == 0x000010, "Wrong size on FPlayingRootMotion");
static_assert(offsetof(FPlayingRootMotion, MontageID) == 0x000008, "Member 'FPlayingRootMotion::MontageID' has a wrong offset!");
static_assert(offsetof(FPlayingRootMotion, PlayTime) == 0x00000C, "Member 'FPlayingRootMotion::PlayTime' has a wrong offset!");

// ScriptStruct BPGLib.S2CMoveAck
// 0x0070 (0x0070 - 0x0000)
struct FS2CMoveAck final
{
public:
	uint8                                         Pad_1B0F[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMoveSyncID                            SyncID;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBattleTime                            BattleTime;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B10[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMovementSourceData                    MovementSource;                                    // 0x0030(0x0020)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FPlayingRootMotion                     PlayingRootMotion;                                 // 0x0050(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B11[0x10];                                    // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FS2CMoveAck) == 0x000008, "Wrong alignment on FS2CMoveAck");
static_assert(sizeof(FS2CMoveAck) == 0x000070, "Wrong size on FS2CMoveAck");
static_assert(offsetof(FS2CMoveAck, SyncID) == 0x000008, "Member 'FS2CMoveAck::SyncID' has a wrong offset!");
static_assert(offsetof(FS2CMoveAck, BattleTime) == 0x00000C, "Member 'FS2CMoveAck::BattleTime' has a wrong offset!");
static_assert(offsetof(FS2CMoveAck, Position) == 0x000010, "Member 'FS2CMoveAck::Position' has a wrong offset!");
static_assert(offsetof(FS2CMoveAck, Yaw) == 0x000028, "Member 'FS2CMoveAck::Yaw' has a wrong offset!");
static_assert(offsetof(FS2CMoveAck, MovementSource) == 0x000030, "Member 'FS2CMoveAck::MovementSource' has a wrong offset!");
static_assert(offsetof(FS2CMoveAck, PlayingRootMotion) == 0x000050, "Member 'FS2CMoveAck::PlayingRootMotion' has a wrong offset!");

// ScriptStruct BPGLib.ScheduledAnimRotation
// 0x0008 (0x0008 - 0x0000)
struct FScheduledAnimRotation final
{
public:
	float                                         PlayTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScheduledAnimRotation) == 0x000004, "Wrong alignment on FScheduledAnimRotation");
static_assert(sizeof(FScheduledAnimRotation) == 0x000008, "Wrong size on FScheduledAnimRotation");
static_assert(offsetof(FScheduledAnimRotation, PlayTime) == 0x000000, "Member 'FScheduledAnimRotation::PlayTime' has a wrong offset!");
static_assert(offsetof(FScheduledAnimRotation, Yaw) == 0x000004, "Member 'FScheduledAnimRotation::Yaw' has a wrong offset!");

// ScriptStruct BPGLib.MoveStamp
// 0x00A8 (0x00A8 - 0x0000)
struct FMoveStamp
{
public:
	uint8                                         Pad_1B12[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMoveSyncID                            SyncID;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeltaTime                             Duration;                                          // 0x0028(0x0002)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B13[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattleTime                            BattleTime;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementState                         State;                                             // 0x0030(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B14[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                InputDir;                                          // 0x0038(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0050(0x0018)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementSourceData                    MovementSource;                                    // 0x0068(0x0020)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FPlayingRootMotion                     PlayingRootMotion;                                 // 0x0088(0x0010)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B15[0x10];                                    // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMoveStamp) == 0x000008, "Wrong alignment on FMoveStamp");
static_assert(sizeof(FMoveStamp) == 0x0000A8, "Wrong size on FMoveStamp");
static_assert(offsetof(FMoveStamp, Position) == 0x000008, "Member 'FMoveStamp::Position' has a wrong offset!");
static_assert(offsetof(FMoveStamp, SyncID) == 0x000020, "Member 'FMoveStamp::SyncID' has a wrong offset!");
static_assert(offsetof(FMoveStamp, Speed) == 0x000024, "Member 'FMoveStamp::Speed' has a wrong offset!");
static_assert(offsetof(FMoveStamp, Duration) == 0x000028, "Member 'FMoveStamp::Duration' has a wrong offset!");
static_assert(offsetof(FMoveStamp, BattleTime) == 0x00002C, "Member 'FMoveStamp::BattleTime' has a wrong offset!");
static_assert(offsetof(FMoveStamp, State) == 0x000030, "Member 'FMoveStamp::State' has a wrong offset!");
static_assert(offsetof(FMoveStamp, InputDir) == 0x000038, "Member 'FMoveStamp::InputDir' has a wrong offset!");
static_assert(offsetof(FMoveStamp, Rot) == 0x000050, "Member 'FMoveStamp::Rot' has a wrong offset!");
static_assert(offsetof(FMoveStamp, MovementSource) == 0x000068, "Member 'FMoveStamp::MovementSource' has a wrong offset!");
static_assert(offsetof(FMoveStamp, PlayingRootMotion) == 0x000088, "Member 'FMoveStamp::PlayingRootMotion' has a wrong offset!");

// ScriptStruct BPGLib.AnimTrackKey
// 0x0040 (0x0040 - 0x0000)
struct FAnimTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B16[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Pos;                                               // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rot;                                               // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimTrackKey) == 0x000010, "Wrong alignment on FAnimTrackKey");
static_assert(sizeof(FAnimTrackKey) == 0x000040, "Wrong size on FAnimTrackKey");
static_assert(offsetof(FAnimTrackKey, Time) == 0x000000, "Member 'FAnimTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FAnimTrackKey, Pos) == 0x000008, "Member 'FAnimTrackKey::Pos' has a wrong offset!");
static_assert(offsetof(FAnimTrackKey, Rot) == 0x000020, "Member 'FAnimTrackKey::Rot' has a wrong offset!");

// ScriptStruct BPGLib.MoveStampC2S
// 0x0000 (0x00A8 - 0x00A8)
struct FMoveStampC2S final : public FMoveStamp
{
};
static_assert(alignof(FMoveStampC2S) == 0x000008, "Wrong alignment on FMoveStampC2S");
static_assert(sizeof(FMoveStampC2S) == 0x0000A8, "Wrong size on FMoveStampC2S");

// ScriptStruct BPGLib.UUID
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FUUID final
{
public:
	uint8                                         Pad_1B17[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FUUID) == 0x000004, "Wrong alignment on FUUID");
static_assert(sizeof(FUUID) == 0x000010, "Wrong size on FUUID");

// ScriptStruct BPGLib.SprintParams
// 0x0004 (0x0004 - 0x0000)
struct FSprintParams final
{
public:
	ESprintState                                  State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPMoveDirection                              Prev;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPMoveDirection                              Next;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESprintAnimationState                         AnimState;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSprintParams) == 0x000001, "Wrong alignment on FSprintParams");
static_assert(sizeof(FSprintParams) == 0x000004, "Wrong size on FSprintParams");
static_assert(offsetof(FSprintParams, State) == 0x000000, "Member 'FSprintParams::State' has a wrong offset!");
static_assert(offsetof(FSprintParams, Prev) == 0x000001, "Member 'FSprintParams::Prev' has a wrong offset!");
static_assert(offsetof(FSprintParams, Next) == 0x000002, "Member 'FSprintParams::Next' has a wrong offset!");
static_assert(offsetof(FSprintParams, AnimState) == 0x000003, "Member 'FSprintParams::AnimState' has a wrong offset!");

// ScriptStruct BPGLib.StartingRootMotion
// 0x0028 (0x0028 - 0x0000)
struct FStartingRootMotion final
{
public:
	uint16                                        AnimID;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B18[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B19[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FStartingRootMotion) == 0x000008, "Wrong alignment on FStartingRootMotion");
static_assert(sizeof(FStartingRootMotion) == 0x000028, "Wrong size on FStartingRootMotion");
static_assert(offsetof(FStartingRootMotion, AnimID) == 0x000000, "Member 'FStartingRootMotion::AnimID' has a wrong offset!");
static_assert(offsetof(FStartingRootMotion, StartTime) == 0x000004, "Member 'FStartingRootMotion::StartTime' has a wrong offset!");
static_assert(offsetof(FStartingRootMotion, Location) == 0x000008, "Member 'FStartingRootMotion::Location' has a wrong offset!");
static_assert(offsetof(FStartingRootMotion, Yaw) == 0x000020, "Member 'FStartingRootMotion::Yaw' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_ErrorCorrection
// 0x0068 (0x0088 - 0x0020)
struct FBPGMoveLog_ErrorCorrection final : public FBPGMoveLog_Base
{
public:
	class FString                                 Text;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveMode                                     MoveMode;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1A[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                CurPos;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurRot;                                            // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ErrorPos;                                          // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorYaw;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1B[0x4];                                     // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_ErrorCorrection) == 0x000008, "Wrong alignment on FBPGMoveLog_ErrorCorrection");
static_assert(sizeof(FBPGMoveLog_ErrorCorrection) == 0x000088, "Wrong size on FBPGMoveLog_ErrorCorrection");
static_assert(offsetof(FBPGMoveLog_ErrorCorrection, Text) == 0x000020, "Member 'FBPGMoveLog_ErrorCorrection::Text' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ErrorCorrection, MoveMode) == 0x000030, "Member 'FBPGMoveLog_ErrorCorrection::MoveMode' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ErrorCorrection, CurPos) == 0x000038, "Member 'FBPGMoveLog_ErrorCorrection::CurPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ErrorCorrection, CurRot) == 0x000050, "Member 'FBPGMoveLog_ErrorCorrection::CurRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ErrorCorrection, ErrorPos) == 0x000068, "Member 'FBPGMoveLog_ErrorCorrection::ErrorPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ErrorCorrection, ErrorYaw) == 0x000080, "Member 'FBPGMoveLog_ErrorCorrection::ErrorYaw' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_ServerDrive_Wasted
// 0x0028 (0x0048 - 0x0020)
struct FBPGMoveLog_ServerDrive_Wasted final : public FBPGMoveLog_Base
{
public:
	float                                         DeltaTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Acceleration;                                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_ServerDrive_Wasted) == 0x000008, "Wrong alignment on FBPGMoveLog_ServerDrive_Wasted");
static_assert(sizeof(FBPGMoveLog_ServerDrive_Wasted) == 0x000048, "Wrong size on FBPGMoveLog_ServerDrive_Wasted");
static_assert(offsetof(FBPGMoveLog_ServerDrive_Wasted, DeltaTime) == 0x000020, "Member 'FBPGMoveLog_ServerDrive_Wasted::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive_Wasted, ElapsedTime) == 0x000024, "Member 'FBPGMoveLog_ServerDrive_Wasted::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive_Wasted, Alpha) == 0x000028, "Member 'FBPGMoveLog_ServerDrive_Wasted::Alpha' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive_Wasted, Acceleration) == 0x000030, "Member 'FBPGMoveLog_ServerDrive_Wasted::Acceleration' has a wrong offset!");

// ScriptStruct BPGLib.MovementProfile
// 0x0014 (0x0014 - 0x0000)
struct FMovementProfile final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFullAcceleration;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Friction;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDeceleration;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovementProfile) == 0x000004, "Wrong alignment on FMovementProfile");
static_assert(sizeof(FMovementProfile) == 0x000014, "Wrong size on FMovementProfile");
static_assert(offsetof(FMovementProfile, MaxSpeed) == 0x000000, "Member 'FMovementProfile::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FMovementProfile, MaxAcceleration) == 0x000004, "Member 'FMovementProfile::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FMovementProfile, EnableFullAcceleration) == 0x000008, "Member 'FMovementProfile::EnableFullAcceleration' has a wrong offset!");
static_assert(offsetof(FMovementProfile, Friction) == 0x00000C, "Member 'FMovementProfile::Friction' has a wrong offset!");
static_assert(offsetof(FMovementProfile, BrakingDeceleration) == 0x000010, "Member 'FMovementProfile::BrakingDeceleration' has a wrong offset!");

// ScriptStruct BPGLib.LocomotiveProfile
// 0x0060 (0x0060 - 0x0000)
struct FLocomotiveProfile final
{
public:
	struct FMovementProfile                       Forward;                                           // 0x0000(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementProfile                       Side;                                              // 0x0014(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementProfile                       Backward;                                          // 0x0028(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1E[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Gravity;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1F[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLocomotiveProfile) == 0x000008, "Wrong alignment on FLocomotiveProfile");
static_assert(sizeof(FLocomotiveProfile) == 0x000060, "Wrong size on FLocomotiveProfile");
static_assert(offsetof(FLocomotiveProfile, Forward) == 0x000000, "Member 'FLocomotiveProfile::Forward' has a wrong offset!");
static_assert(offsetof(FLocomotiveProfile, Side) == 0x000014, "Member 'FLocomotiveProfile::Side' has a wrong offset!");
static_assert(offsetof(FLocomotiveProfile, Backward) == 0x000028, "Member 'FLocomotiveProfile::Backward' has a wrong offset!");
static_assert(offsetof(FLocomotiveProfile, Gravity) == 0x000040, "Member 'FLocomotiveProfile::Gravity' has a wrong offset!");
static_assert(offsetof(FLocomotiveProfile, GravityScale) == 0x000058, "Member 'FLocomotiveProfile::GravityScale' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_Crouch
// 0x0008 (0x0028 - 0x0020)
struct FBPGMoveLog_Crouch final : public FBPGMoveLog_Base
{
public:
	bool                                          Crouched;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B20[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_Crouch) == 0x000008, "Wrong alignment on FBPGMoveLog_Crouch");
static_assert(sizeof(FBPGMoveLog_Crouch) == 0x000028, "Wrong size on FBPGMoveLog_Crouch");
static_assert(offsetof(FBPGMoveLog_Crouch, Crouched) == 0x000020, "Member 'FBPGMoveLog_Crouch::Crouched' has a wrong offset!");

// ScriptStruct BPGLib.NetReply
// 0x0020 (0x0020 - 0x0000)
struct FNetReply final
{
public:
	ENetError                                     Level;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B21[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Message;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetReply) == 0x000008, "Wrong alignment on FNetReply");
static_assert(sizeof(FNetReply) == 0x000020, "Wrong size on FNetReply");
static_assert(offsetof(FNetReply, Level) == 0x000000, "Member 'FNetReply::Level' has a wrong offset!");
static_assert(offsetof(FNetReply, Message) == 0x000008, "Member 'FNetReply::Message' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_Remote_Extrapolating
// 0x0030 (0x0050 - 0x0020)
struct FBPGMoveLog_Remote_Extrapolating final : public FBPGMoveLog_Base
{
public:
	bool                                          DoExtrapolation;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B22[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Elapsed;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccelerating;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B23[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         FadeOut;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidTarget;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B24[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_Remote_Extrapolating) == 0x000008, "Wrong alignment on FBPGMoveLog_Remote_Extrapolating");
static_assert(sizeof(FBPGMoveLog_Remote_Extrapolating) == 0x000050, "Wrong size on FBPGMoveLog_Remote_Extrapolating");
static_assert(offsetof(FBPGMoveLog_Remote_Extrapolating, DoExtrapolation) == 0x000020, "Member 'FBPGMoveLog_Remote_Extrapolating::DoExtrapolation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Remote_Extrapolating, Elapsed) == 0x000024, "Member 'FBPGMoveLog_Remote_Extrapolating::Elapsed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Remote_Extrapolating, IsAccelerating) == 0x000028, "Member 'FBPGMoveLog_Remote_Extrapolating::IsAccelerating' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Remote_Extrapolating, FadeOut) == 0x00002C, "Member 'FBPGMoveLog_Remote_Extrapolating::FadeOut' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Remote_Extrapolating, Velocity) == 0x000030, "Member 'FBPGMoveLog_Remote_Extrapolating::Velocity' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Remote_Extrapolating, IsValidTarget) == 0x000048, "Member 'FBPGMoveLog_Remote_Extrapolating::IsValidTarget' has a wrong offset!");

// ScriptStruct BPGLib.WidgetAnimOption
// 0x0020 (0x0020 - 0x0000)
struct FWidgetAnimOption final
{
public:
	bool                                          CanPlayAnim;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B25[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   AnimName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LoopCount;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RestoreState;                                      // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B26[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         PlayCount;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsIdle;                                            // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B27[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FWidgetAnimOption) == 0x000004, "Wrong alignment on FWidgetAnimOption");
static_assert(sizeof(FWidgetAnimOption) == 0x000020, "Wrong size on FWidgetAnimOption");
static_assert(offsetof(FWidgetAnimOption, CanPlayAnim) == 0x000000, "Member 'FWidgetAnimOption::CanPlayAnim' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, AnimName) == 0x000004, "Member 'FWidgetAnimOption::AnimName' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, LoopCount) == 0x00000C, "Member 'FWidgetAnimOption::LoopCount' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, PlayRate) == 0x000010, "Member 'FWidgetAnimOption::PlayRate' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, PlayMode) == 0x000014, "Member 'FWidgetAnimOption::PlayMode' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, RestoreState) == 0x000015, "Member 'FWidgetAnimOption::RestoreState' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, PlayCount) == 0x000018, "Member 'FWidgetAnimOption::PlayCount' has a wrong offset!");
static_assert(offsetof(FWidgetAnimOption, IsIdle) == 0x00001C, "Member 'FWidgetAnimOption::IsIdle' has a wrong offset!");

// ScriptStruct BPGLib.Angle
// 0x0002 (0x0002 - 0x0000)
struct FAngle final
{
public:
	uint16                                        _angle;                                            // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAngle) == 0x000002, "Wrong alignment on FAngle");
static_assert(sizeof(FAngle) == 0x000002, "Wrong size on FAngle");
static_assert(offsetof(FAngle, _angle) == 0x000000, "Member 'FAngle::_angle' has a wrong offset!");

// ScriptStruct BPGLib.MontagePlayInfo
// 0x0018 (0x0018 - 0x0000)
struct FMontagePlayInfo final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B28[0x10];                                    // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMontagePlayInfo) == 0x000008, "Wrong alignment on FMontagePlayInfo");
static_assert(sizeof(FMontagePlayInfo) == 0x000018, "Wrong size on FMontagePlayInfo");
static_assert(offsetof(FMontagePlayInfo, Anim) == 0x000000, "Member 'FMontagePlayInfo::Anim' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_Setup
// 0x00C0 (0x00E0 - 0x0020)
struct FBPGMoveLog_Setup final : public FBPGMoveLog_Base
{
public:
	EMoveDriveSide                                DriveSide;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B29[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Delta;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CtrlRotation;                                      // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TrackModeTime;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2A[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                TrackModeAnchorPos;                                // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TrackModeAnchorRot;                                // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsFloor;                                           // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2B[0x7];                                     // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_Setup) == 0x000008, "Wrong alignment on FBPGMoveLog_Setup");
static_assert(sizeof(FBPGMoveLog_Setup) == 0x0000E0, "Wrong size on FBPGMoveLog_Setup");
static_assert(offsetof(FBPGMoveLog_Setup, DriveSide) == 0x000020, "Member 'FBPGMoveLog_Setup::DriveSide' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, Delta) == 0x000024, "Member 'FBPGMoveLog_Setup::Delta' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, Location) == 0x000028, "Member 'FBPGMoveLog_Setup::Location' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, Acceleration) == 0x000040, "Member 'FBPGMoveLog_Setup::Acceleration' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, Velocity) == 0x000058, "Member 'FBPGMoveLog_Setup::Velocity' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, Rotation) == 0x000070, "Member 'FBPGMoveLog_Setup::Rotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, CtrlRotation) == 0x000088, "Member 'FBPGMoveLog_Setup::CtrlRotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, TrackModeTime) == 0x0000A0, "Member 'FBPGMoveLog_Setup::TrackModeTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, TrackModeAnchorPos) == 0x0000A8, "Member 'FBPGMoveLog_Setup::TrackModeAnchorPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, TrackModeAnchorRot) == 0x0000C0, "Member 'FBPGMoveLog_Setup::TrackModeAnchorRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_Setup, IsFloor) == 0x0000D8, "Member 'FBPGMoveLog_Setup::IsFloor' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_MoveMode
// 0x0018 (0x0038 - 0x0020)
struct FBPGMoveLog_MoveMode final : public FBPGMoveLog_Base
{
public:
	EMoveMode                                     MoveMode;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnTrackMotion;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanPlayTrackMode;                                  // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRootMotionSyncMode;                              // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockTransformExceptRootMotion;                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Anchor;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_MoveMode) == 0x000008, "Wrong alignment on FBPGMoveLog_MoveMode");
static_assert(sizeof(FBPGMoveLog_MoveMode) == 0x000038, "Wrong size on FBPGMoveLog_MoveMode");
static_assert(offsetof(FBPGMoveLog_MoveMode, MoveMode) == 0x000020, "Member 'FBPGMoveLog_MoveMode::MoveMode' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveMode, IsOnTrackMotion) == 0x000021, "Member 'FBPGMoveLog_MoveMode::IsOnTrackMotion' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveMode, CanPlayTrackMode) == 0x000022, "Member 'FBPGMoveLog_MoveMode::CanPlayTrackMode' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveMode, IsRootMotionSyncMode) == 0x000023, "Member 'FBPGMoveLog_MoveMode::IsRootMotionSyncMode' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveMode, LockTransformExceptRootMotion) == 0x000024, "Member 'FBPGMoveLog_MoveMode::LockTransformExceptRootMotion' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveMode, Anchor) == 0x000028, "Member 'FBPGMoveLog_MoveMode::Anchor' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DriverResult
// 0x0040 (0x0060 - 0x0020)
struct FBPGMoveLog_DriverResult final : public FBPGMoveLog_Base
{
public:
	float                                         PreDelta;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostDelta;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualDelta;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                LocationOffset;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_DriverResult) == 0x000008, "Wrong alignment on FBPGMoveLog_DriverResult");
static_assert(sizeof(FBPGMoveLog_DriverResult) == 0x000060, "Wrong size on FBPGMoveLog_DriverResult");
static_assert(offsetof(FBPGMoveLog_DriverResult, PreDelta) == 0x000020, "Member 'FBPGMoveLog_DriverResult::PreDelta' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverResult, PostDelta) == 0x000024, "Member 'FBPGMoveLog_DriverResult::PostDelta' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverResult, ActualDelta) == 0x000028, "Member 'FBPGMoveLog_DriverResult::ActualDelta' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverResult, LocationOffset) == 0x000030, "Member 'FBPGMoveLog_DriverResult::LocationOffset' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverResult, RotationOffset) == 0x000048, "Member 'FBPGMoveLog_DriverResult::RotationOffset' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_TryMove
// 0x0070 (0x0090 - 0x0020)
struct FBPGMoveLog_TryMove final : public FBPGMoveLog_Base
{
public:
	class FString                                 Reason;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginPos;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TryOffset;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RampOffset;                                        // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_TryMove) == 0x000008, "Wrong alignment on FBPGMoveLog_TryMove");
static_assert(sizeof(FBPGMoveLog_TryMove) == 0x000090, "Wrong size on FBPGMoveLog_TryMove");
static_assert(offsetof(FBPGMoveLog_TryMove, Reason) == 0x000020, "Member 'FBPGMoveLog_TryMove::Reason' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TryMove, OriginPos) == 0x000030, "Member 'FBPGMoveLog_TryMove::OriginPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TryMove, TryOffset) == 0x000048, "Member 'FBPGMoveLog_TryMove::TryOffset' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TryMove, RampOffset) == 0x000060, "Member 'FBPGMoveLog_TryMove::RampOffset' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TryMove, RotationOffset) == 0x000078, "Member 'FBPGMoveLog_TryMove::RotationOffset' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_StartAnimErrorCorrection
// 0x0068 (0x0088 - 0x0020)
struct FBPGMoveLog_StartAnimErrorCorrection final : public FBPGMoveLog_Base
{
public:
	struct FVector                                CurPos;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurRot;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RefPos;                                            // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RefRot;                                            // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_StartAnimErrorCorrection) == 0x000008, "Wrong alignment on FBPGMoveLog_StartAnimErrorCorrection");
static_assert(sizeof(FBPGMoveLog_StartAnimErrorCorrection) == 0x000088, "Wrong size on FBPGMoveLog_StartAnimErrorCorrection");
static_assert(offsetof(FBPGMoveLog_StartAnimErrorCorrection, CurPos) == 0x000020, "Member 'FBPGMoveLog_StartAnimErrorCorrection::CurPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartAnimErrorCorrection, CurRot) == 0x000038, "Member 'FBPGMoveLog_StartAnimErrorCorrection::CurRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartAnimErrorCorrection, RefPos) == 0x000050, "Member 'FBPGMoveLog_StartAnimErrorCorrection::RefPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartAnimErrorCorrection, RefRot) == 0x000068, "Member 'FBPGMoveLog_StartAnimErrorCorrection::RefRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartAnimErrorCorrection, Duration) == 0x000080, "Member 'FBPGMoveLog_StartAnimErrorCorrection::Duration' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartAnimErrorCorrection, PlayTime) == 0x000084, "Member 'FBPGMoveLog_StartAnimErrorCorrection::PlayTime' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_AnimStartCorrection
// 0x0068 (0x0088 - 0x0020)
struct FBPGMoveLog_AnimStartCorrection final : public FBPGMoveLog_Base
{
public:
	float                                         Elapsed;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldStartPos;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OldStartRot;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NewStartPos;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewStartRot;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_AnimStartCorrection) == 0x000008, "Wrong alignment on FBPGMoveLog_AnimStartCorrection");
static_assert(sizeof(FBPGMoveLog_AnimStartCorrection) == 0x000088, "Wrong size on FBPGMoveLog_AnimStartCorrection");
static_assert(offsetof(FBPGMoveLog_AnimStartCorrection, Elapsed) == 0x000020, "Member 'FBPGMoveLog_AnimStartCorrection::Elapsed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimStartCorrection, Duration) == 0x000024, "Member 'FBPGMoveLog_AnimStartCorrection::Duration' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimStartCorrection, OldStartPos) == 0x000028, "Member 'FBPGMoveLog_AnimStartCorrection::OldStartPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimStartCorrection, OldStartRot) == 0x000040, "Member 'FBPGMoveLog_AnimStartCorrection::OldStartRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimStartCorrection, NewStartPos) == 0x000058, "Member 'FBPGMoveLog_AnimStartCorrection::NewStartPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimStartCorrection, NewStartRot) == 0x000070, "Member 'FBPGMoveLog_AnimStartCorrection::NewStartRot' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_C2S
// 0x0040 (0x0060 - 0x0020)
struct FBPGMoveLog_C2S final : public FBPGMoveLog_Base
{
public:
	bool                                          IsSending;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FC2SMoves                              Moves;                                             // 0x0028(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_C2S) == 0x000008, "Wrong alignment on FBPGMoveLog_C2S");
static_assert(sizeof(FBPGMoveLog_C2S) == 0x000060, "Wrong size on FBPGMoveLog_C2S");
static_assert(offsetof(FBPGMoveLog_C2S, IsSending) == 0x000020, "Member 'FBPGMoveLog_C2S::IsSending' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_C2S, Moves) == 0x000028, "Member 'FBPGMoveLog_C2S::Moves' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_MoveStamp
// 0x00B0 (0x00D0 - 0x0020)
struct FBPGMoveLog_MoveStamp final : public FBPGMoveLog_Base
{
public:
	bool                                          IsSending;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMoveStamp                             MoveStamp;                                         // 0x0028(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_MoveStamp) == 0x000008, "Wrong alignment on FBPGMoveLog_MoveStamp");
static_assert(sizeof(FBPGMoveLog_MoveStamp) == 0x0000D0, "Wrong size on FBPGMoveLog_MoveStamp");
static_assert(offsetof(FBPGMoveLog_MoveStamp, IsSending) == 0x000020, "Member 'FBPGMoveLog_MoveStamp::IsSending' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveStamp, MoveStamp) == 0x000028, "Member 'FBPGMoveLog_MoveStamp::MoveStamp' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_S2CMoveAck
// 0x0090 (0x00B0 - 0x0020)
struct FBPGMoveLog_S2CMoveAck final : public FBPGMoveLog_Base
{
public:
	bool                                          IsSending;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B30[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FS2CMoveAck                            Ack;                                               // 0x0028(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Difference;                                        // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_S2CMoveAck) == 0x000008, "Wrong alignment on FBPGMoveLog_S2CMoveAck");
static_assert(sizeof(FBPGMoveLog_S2CMoveAck) == 0x0000B0, "Wrong size on FBPGMoveLog_S2CMoveAck");
static_assert(offsetof(FBPGMoveLog_S2CMoveAck, IsSending) == 0x000020, "Member 'FBPGMoveLog_S2CMoveAck::IsSending' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_S2CMoveAck, Ack) == 0x000028, "Member 'FBPGMoveLog_S2CMoveAck::Ack' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_S2CMoveAck, Difference) == 0x000098, "Member 'FBPGMoveLog_S2CMoveAck::Difference' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_SetTransform
// 0x0040 (0x0060 - 0x0020)
struct FBPGMoveLog_SetTransform final : public FBPGMoveLog_Base
{
public:
	struct FVector                                Location;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_SetTransform) == 0x000008, "Wrong alignment on FBPGMoveLog_SetTransform");
static_assert(sizeof(FBPGMoveLog_SetTransform) == 0x000060, "Wrong size on FBPGMoveLog_SetTransform");
static_assert(offsetof(FBPGMoveLog_SetTransform, Location) == 0x000020, "Member 'FBPGMoveLog_SetTransform::Location' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_SetTransform, Rotation) == 0x000038, "Member 'FBPGMoveLog_SetTransform::Rotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_SetTransform, Reason) == 0x000050, "Member 'FBPGMoveLog_SetTransform::Reason' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DriverTick
// 0x00A0 (0x00C0 - 0x0020)
struct FBPGMoveLog_DriverTick final : public FBPGMoveLog_Base
{
public:
	float                                         DeltaTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B31[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Velocity;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RootMotionVelocity;                                // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CtrlRotation;                                      // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Input;                                             // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInAir;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B32[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_DriverTick) == 0x000008, "Wrong alignment on FBPGMoveLog_DriverTick");
static_assert(sizeof(FBPGMoveLog_DriverTick) == 0x0000C0, "Wrong size on FBPGMoveLog_DriverTick");
static_assert(offsetof(FBPGMoveLog_DriverTick, DeltaTime) == 0x000020, "Member 'FBPGMoveLog_DriverTick::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, Velocity) == 0x000028, "Member 'FBPGMoveLog_DriverTick::Velocity' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, RootMotionVelocity) == 0x000040, "Member 'FBPGMoveLog_DriverTick::RootMotionVelocity' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, Acceleration) == 0x000058, "Member 'FBPGMoveLog_DriverTick::Acceleration' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, Rotation) == 0x000070, "Member 'FBPGMoveLog_DriverTick::Rotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, CtrlRotation) == 0x000088, "Member 'FBPGMoveLog_DriverTick::CtrlRotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, Input) == 0x0000A0, "Member 'FBPGMoveLog_DriverTick::Input' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriverTick, IsInAir) == 0x0000B8, "Member 'FBPGMoveLog_DriverTick::IsInAir' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DrivePhysic
// 0x0060 (0x0080 - 0x0020)
struct FBPGMoveLog_DrivePhysic final : public FBPGMoveLog_Base
{
public:
	struct FMovementProfile                       Profile;                                           // 0x0020(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B33[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                LocalVelDir;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Accel;                                             // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vel;                                               // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_DrivePhysic) == 0x000008, "Wrong alignment on FBPGMoveLog_DrivePhysic");
static_assert(sizeof(FBPGMoveLog_DrivePhysic) == 0x000080, "Wrong size on FBPGMoveLog_DrivePhysic");
static_assert(offsetof(FBPGMoveLog_DrivePhysic, Profile) == 0x000020, "Member 'FBPGMoveLog_DrivePhysic::Profile' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DrivePhysic, LocalVelDir) == 0x000038, "Member 'FBPGMoveLog_DrivePhysic::LocalVelDir' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DrivePhysic, Accel) == 0x000050, "Member 'FBPGMoveLog_DrivePhysic::Accel' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DrivePhysic, Vel) == 0x000068, "Member 'FBPGMoveLog_DrivePhysic::Vel' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_ServerDrive
// 0x0018 (0x0038 - 0x0020)
struct FBPGMoveLog_ServerDrive final : public FBPGMoveLog_Base
{
public:
	struct FBattleTime                            BattleTime;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProcessedTime;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExpired;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNoMove;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRotationReached;                                 // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInterpolating;                                   // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B34[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_ServerDrive) == 0x000008, "Wrong alignment on FBPGMoveLog_ServerDrive");
static_assert(sizeof(FBPGMoveLog_ServerDrive) == 0x000038, "Wrong size on FBPGMoveLog_ServerDrive");
static_assert(offsetof(FBPGMoveLog_ServerDrive, BattleTime) == 0x000020, "Member 'FBPGMoveLog_ServerDrive::BattleTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, DeltaTime) == 0x000024, "Member 'FBPGMoveLog_ServerDrive::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, ElapsedTime) == 0x000028, "Member 'FBPGMoveLog_ServerDrive::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, ProcessedTime) == 0x00002C, "Member 'FBPGMoveLog_ServerDrive::ProcessedTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, IsExpired) == 0x000030, "Member 'FBPGMoveLog_ServerDrive::IsExpired' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, IsNoMove) == 0x000031, "Member 'FBPGMoveLog_ServerDrive::IsNoMove' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, IsRotationReached) == 0x000032, "Member 'FBPGMoveLog_ServerDrive::IsRotationReached' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ServerDrive, IsInterpolating) == 0x000033, "Member 'FBPGMoveLog_ServerDrive::IsInterpolating' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_RemoteDrive
// 0x0068 (0x0088 - 0x0020)
struct FBPGMoveLog_RemoteDrive final : public FBPGMoveLog_Base
{
public:
	bool                                          PreemptiveMode;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B35[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Pos;                                               // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Vel;                                               // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovementState                         State;                                             // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B36[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         SmoothingElapsed;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEarlyOut;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SmoothingFinished;                                 // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B37[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ProcessedTime;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToDec;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDelta;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_RemoteDrive) == 0x000008, "Wrong alignment on FBPGMoveLog_RemoteDrive");
static_assert(sizeof(FBPGMoveLog_RemoteDrive) == 0x000088, "Wrong size on FBPGMoveLog_RemoteDrive");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, PreemptiveMode) == 0x000020, "Member 'FBPGMoveLog_RemoteDrive::PreemptiveMode' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, Pos) == 0x000028, "Member 'FBPGMoveLog_RemoteDrive::Pos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, Rot) == 0x000040, "Member 'FBPGMoveLog_RemoteDrive::Rot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, Vel) == 0x000058, "Member 'FBPGMoveLog_RemoteDrive::Vel' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, State) == 0x000070, "Member 'FBPGMoveLog_RemoteDrive::State' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, SmoothingElapsed) == 0x000074, "Member 'FBPGMoveLog_RemoteDrive::SmoothingElapsed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, IsEarlyOut) == 0x000078, "Member 'FBPGMoveLog_RemoteDrive::IsEarlyOut' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, SmoothingFinished) == 0x000079, "Member 'FBPGMoveLog_RemoteDrive::SmoothingFinished' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, ProcessedTime) == 0x00007C, "Member 'FBPGMoveLog_RemoteDrive::ProcessedTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, TimeToDec) == 0x000080, "Member 'FBPGMoveLog_RemoteDrive::TimeToDec' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_RemoteDrive, AdditionalDelta) == 0x000084, "Member 'FBPGMoveLog_RemoteDrive::AdditionalDelta' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_StartSmoothing
// 0x0078 (0x0098 - 0x0020)
struct FBPGMoveLog_StartSmoothing final : public FBPGMoveLog_Base
{
public:
	struct FVector                                StartPos;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRot;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRot;                                         // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartSpeed;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeed;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dist;                                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TakeTime;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDuration;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingSpeed;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_StartSmoothing) == 0x000008, "Wrong alignment on FBPGMoveLog_StartSmoothing");
static_assert(sizeof(FBPGMoveLog_StartSmoothing) == 0x000098, "Wrong size on FBPGMoveLog_StartSmoothing");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, StartPos) == 0x000020, "Member 'FBPGMoveLog_StartSmoothing::StartPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, StartRot) == 0x000038, "Member 'FBPGMoveLog_StartSmoothing::StartRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, TargetPos) == 0x000050, "Member 'FBPGMoveLog_StartSmoothing::TargetPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, TargetRot) == 0x000068, "Member 'FBPGMoveLog_StartSmoothing::TargetRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, StartSpeed) == 0x000080, "Member 'FBPGMoveLog_StartSmoothing::StartSpeed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, TargetSpeed) == 0x000084, "Member 'FBPGMoveLog_StartSmoothing::TargetSpeed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, Dist) == 0x000088, "Member 'FBPGMoveLog_StartSmoothing::Dist' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, TakeTime) == 0x00008C, "Member 'FBPGMoveLog_StartSmoothing::TakeTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, FinalDuration) == 0x000090, "Member 'FBPGMoveLog_StartSmoothing::FinalDuration' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_StartSmoothing, SmoothingSpeed) == 0x000094, "Member 'FBPGMoveLog_StartSmoothing::SmoothingSpeed' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_MoveStampSender
// 0x0010 (0x0030 - 0x0020)
struct FBPGMoveLog_MoveStampSender final : public FBPGMoveLog_Base
{
public:
	float                                         DeltaTime;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Elapsed;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SyncInterval;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldSend;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedToSend;                                        // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B38[0x2];                                     // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_MoveStampSender) == 0x000008, "Wrong alignment on FBPGMoveLog_MoveStampSender");
static_assert(sizeof(FBPGMoveLog_MoveStampSender) == 0x000030, "Wrong size on FBPGMoveLog_MoveStampSender");
static_assert(offsetof(FBPGMoveLog_MoveStampSender, DeltaTime) == 0x000020, "Member 'FBPGMoveLog_MoveStampSender::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveStampSender, Elapsed) == 0x000024, "Member 'FBPGMoveLog_MoveStampSender::Elapsed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveStampSender, SyncInterval) == 0x000028, "Member 'FBPGMoveLog_MoveStampSender::SyncInterval' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveStampSender, ShouldSend) == 0x00002C, "Member 'FBPGMoveLog_MoveStampSender::ShouldSend' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveStampSender, NeedToSend) == 0x00002D, "Member 'FBPGMoveLog_MoveStampSender::NeedToSend' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_ActionSyncError
// 0x0000 (0x0020 - 0x0020)
struct FBPGMoveLog_ActionSyncError final : public FBPGMoveLog_Base
{
};
static_assert(alignof(FBPGMoveLog_ActionSyncError) == 0x000008, "Wrong alignment on FBPGMoveLog_ActionSyncError");
static_assert(sizeof(FBPGMoveLog_ActionSyncError) == 0x000020, "Wrong size on FBPGMoveLog_ActionSyncError");

// ScriptStruct BPGLib.BPGMoveLog_TrackMotion
// 0x0030 (0x0050 - 0x0020)
struct FBPGMoveLog_TrackMotion final : public FBPGMoveLog_Base
{
public:
	bool                                          Start;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B39[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Track;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Anchor;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3A[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_TrackMotion) == 0x000008, "Wrong alignment on FBPGMoveLog_TrackMotion");
static_assert(sizeof(FBPGMoveLog_TrackMotion) == 0x000050, "Wrong size on FBPGMoveLog_TrackMotion");
static_assert(offsetof(FBPGMoveLog_TrackMotion, Start) == 0x000020, "Member 'FBPGMoveLog_TrackMotion::Start' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TrackMotion, Track) == 0x000028, "Member 'FBPGMoveLog_TrackMotion::Track' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TrackMotion, Anchor) == 0x000038, "Member 'FBPGMoveLog_TrackMotion::Anchor' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_TrackMotion, StartTime) == 0x000048, "Member 'FBPGMoveLog_TrackMotion::StartTime' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_ActionSyncCorrection
// 0x0040 (0x0060 - 0x0020)
struct FBPGMoveLog_ActionSyncCorrection final : public FBPGMoveLog_Base
{
public:
	float                                         Elapsed;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveMode                                     MoveMode;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                TargetPos;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRot;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_ActionSyncCorrection) == 0x000008, "Wrong alignment on FBPGMoveLog_ActionSyncCorrection");
static_assert(sizeof(FBPGMoveLog_ActionSyncCorrection) == 0x000060, "Wrong size on FBPGMoveLog_ActionSyncCorrection");
static_assert(offsetof(FBPGMoveLog_ActionSyncCorrection, Elapsed) == 0x000020, "Member 'FBPGMoveLog_ActionSyncCorrection::Elapsed' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ActionSyncCorrection, Duration) == 0x000024, "Member 'FBPGMoveLog_ActionSyncCorrection::Duration' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ActionSyncCorrection, MoveMode) == 0x000028, "Member 'FBPGMoveLog_ActionSyncCorrection::MoveMode' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ActionSyncCorrection, TargetPos) == 0x000030, "Member 'FBPGMoveLog_ActionSyncCorrection::TargetPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ActionSyncCorrection, TargetRot) == 0x000048, "Member 'FBPGMoveLog_ActionSyncCorrection::TargetRot' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_ReportActionSyncError
// 0x0060 (0x0080 - 0x0020)
struct FBPGMoveLog_ReportActionSyncError final : public FBPGMoveLog_Base
{
public:
	struct FVector                                CurPos;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CurRot;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RefPos;                                            // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RefRot;                                            // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_ReportActionSyncError) == 0x000008, "Wrong alignment on FBPGMoveLog_ReportActionSyncError");
static_assert(sizeof(FBPGMoveLog_ReportActionSyncError) == 0x000080, "Wrong size on FBPGMoveLog_ReportActionSyncError");
static_assert(offsetof(FBPGMoveLog_ReportActionSyncError, CurPos) == 0x000020, "Member 'FBPGMoveLog_ReportActionSyncError::CurPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ReportActionSyncError, CurRot) == 0x000038, "Member 'FBPGMoveLog_ReportActionSyncError::CurRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ReportActionSyncError, RefPos) == 0x000050, "Member 'FBPGMoveLog_ReportActionSyncError::RefPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_ReportActionSyncError, RefRot) == 0x000068, "Member 'FBPGMoveLog_ReportActionSyncError::RefRot' has a wrong offset!");

// ScriptStruct BPGLib.MoveResult
// 0x0058 (0x0058 - 0x0000)
struct FMoveResult final
{
public:
	bool                                          ShouldUpdateVelocity;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ProcessedTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalDeltaTime;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityOffset;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControlledOffset;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AnimatedOffset;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoveResult) == 0x000008, "Wrong alignment on FMoveResult");
static_assert(sizeof(FMoveResult) == 0x000058, "Wrong size on FMoveResult");
static_assert(offsetof(FMoveResult, ShouldUpdateVelocity) == 0x000000, "Member 'FMoveResult::ShouldUpdateVelocity' has a wrong offset!");
static_assert(offsetof(FMoveResult, ProcessedTime) == 0x000004, "Member 'FMoveResult::ProcessedTime' has a wrong offset!");
static_assert(offsetof(FMoveResult, AdditionalDeltaTime) == 0x000008, "Member 'FMoveResult::AdditionalDeltaTime' has a wrong offset!");
static_assert(offsetof(FMoveResult, GravityOffset) == 0x00000C, "Member 'FMoveResult::GravityOffset' has a wrong offset!");
static_assert(offsetof(FMoveResult, ControlledOffset) == 0x000010, "Member 'FMoveResult::ControlledOffset' has a wrong offset!");
static_assert(offsetof(FMoveResult, AnimatedOffset) == 0x000028, "Member 'FMoveResult::AnimatedOffset' has a wrong offset!");
static_assert(offsetof(FMoveResult, RotationOffset) == 0x000040, "Member 'FMoveResult::RotationOffset' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_MoveResult
// 0x0068 (0x0088 - 0x0020)
struct FBPGMoveLog_MoveResult final : public FBPGMoveLog_Base
{
public:
	class FString                                 Comment;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMoveResult                            Result;                                            // 0x0030(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_MoveResult) == 0x000008, "Wrong alignment on FBPGMoveLog_MoveResult");
static_assert(sizeof(FBPGMoveLog_MoveResult) == 0x000088, "Wrong size on FBPGMoveLog_MoveResult");
static_assert(offsetof(FBPGMoveLog_MoveResult, Comment) == 0x000020, "Member 'FBPGMoveLog_MoveResult::Comment' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_MoveResult, Result) == 0x000030, "Member 'FBPGMoveLog_MoveResult::Result' has a wrong offset!");

// ScriptStruct BPGLib.StringList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FStringList final
{
public:
	uint8                                         Pad_1B3D[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FStringList) == 0x000008, "Wrong alignment on FStringList");
static_assert(sizeof(FStringList) == 0x000010, "Wrong size on FStringList");

// ScriptStruct BPGLib.BPGMoveLog_DriveRootMotion
// 0x00C0 (0x00E0 - 0x0020)
struct FBPGMoveLog_DriveRootMotion final : public FBPGMoveLog_Base
{
public:
	bool                                          IsEnabled;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Track;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Montage;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AnchorPos;                                         // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AnchorRot;                                         // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EvaluatedPos;                                      // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EvaluatedRot;                                      // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocOffset;                                         // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotOffset;                                         // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_DriveRootMotion) == 0x000008, "Wrong alignment on FBPGMoveLog_DriveRootMotion");
static_assert(sizeof(FBPGMoveLog_DriveRootMotion) == 0x0000E0, "Wrong size on FBPGMoveLog_DriveRootMotion");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, IsEnabled) == 0x000020, "Member 'FBPGMoveLog_DriveRootMotion::IsEnabled' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, Track) == 0x000028, "Member 'FBPGMoveLog_DriveRootMotion::Track' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, Montage) == 0x000038, "Member 'FBPGMoveLog_DriveRootMotion::Montage' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, StartTime) == 0x000048, "Member 'FBPGMoveLog_DriveRootMotion::StartTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, PlayTime) == 0x00004C, "Member 'FBPGMoveLog_DriveRootMotion::PlayTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, AnchorPos) == 0x000050, "Member 'FBPGMoveLog_DriveRootMotion::AnchorPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, AnchorRot) == 0x000068, "Member 'FBPGMoveLog_DriveRootMotion::AnchorRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, EvaluatedPos) == 0x000080, "Member 'FBPGMoveLog_DriveRootMotion::EvaluatedPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, EvaluatedRot) == 0x000098, "Member 'FBPGMoveLog_DriveRootMotion::EvaluatedRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, LocOffset) == 0x0000B0, "Member 'FBPGMoveLog_DriveRootMotion::LocOffset' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRootMotion, RotOffset) == 0x0000C8, "Member 'FBPGMoveLog_DriveRootMotion::RotOffset' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_PreemptiveMode
// 0x0070 (0x0090 - 0x0020)
struct FBPGMoveLog_PreemptiveMode final : public FBPGMoveLog_Base
{
public:
	EPreemptiveEvent                              Event;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3F[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                CapsulePos;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRot;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MeshPos;                                           // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRot;                                           // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          WasSavedFloor;                                     // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B40[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_PreemptiveMode) == 0x000008, "Wrong alignment on FBPGMoveLog_PreemptiveMode");
static_assert(sizeof(FBPGMoveLog_PreemptiveMode) == 0x000090, "Wrong size on FBPGMoveLog_PreemptiveMode");
static_assert(offsetof(FBPGMoveLog_PreemptiveMode, Event) == 0x000020, "Member 'FBPGMoveLog_PreemptiveMode::Event' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PreemptiveMode, CapsulePos) == 0x000028, "Member 'FBPGMoveLog_PreemptiveMode::CapsulePos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PreemptiveMode, CapsuleRot) == 0x000040, "Member 'FBPGMoveLog_PreemptiveMode::CapsuleRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PreemptiveMode, MeshPos) == 0x000058, "Member 'FBPGMoveLog_PreemptiveMode::MeshPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PreemptiveMode, MeshRot) == 0x000070, "Member 'FBPGMoveLog_PreemptiveMode::MeshRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PreemptiveMode, WasSavedFloor) == 0x000088, "Member 'FBPGMoveLog_PreemptiveMode::WasSavedFloor' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_PlayRootMotion
// 0x0078 (0x0098 - 0x0020)
struct FBPGMoveLog_PlayRootMotion final : public FBPGMoveLog_Base
{
public:
	class FString                                 AnimName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B41[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                MeshLocation;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRotation;                                      // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalOffset;                                       // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_PlayRootMotion) == 0x000008, "Wrong alignment on FBPGMoveLog_PlayRootMotion");
static_assert(sizeof(FBPGMoveLog_PlayRootMotion) == 0x000098, "Wrong size on FBPGMoveLog_PlayRootMotion");
static_assert(offsetof(FBPGMoveLog_PlayRootMotion, AnimName) == 0x000020, "Member 'FBPGMoveLog_PlayRootMotion::AnimName' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PlayRootMotion, Velocity) == 0x000030, "Member 'FBPGMoveLog_PlayRootMotion::Velocity' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PlayRootMotion, PlayTime) == 0x000048, "Member 'FBPGMoveLog_PlayRootMotion::PlayTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PlayRootMotion, MeshLocation) == 0x000050, "Member 'FBPGMoveLog_PlayRootMotion::MeshLocation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PlayRootMotion, MeshRotation) == 0x000068, "Member 'FBPGMoveLog_PlayRootMotion::MeshRotation' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_PlayRootMotion, LocalOffset) == 0x000080, "Member 'FBPGMoveLog_PlayRootMotion::LocalOffset' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_AdjustStartTransform
// 0x0070 (0x0090 - 0x0020)
struct FBPGMoveLog_AdjustStartTransform final : public FBPGMoveLog_Base
{
public:
	class FString                                 Reason;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldPos;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OldRot;                                            // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NewPos;                                            // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRot;                                            // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_AdjustStartTransform) == 0x000008, "Wrong alignment on FBPGMoveLog_AdjustStartTransform");
static_assert(sizeof(FBPGMoveLog_AdjustStartTransform) == 0x000090, "Wrong size on FBPGMoveLog_AdjustStartTransform");
static_assert(offsetof(FBPGMoveLog_AdjustStartTransform, Reason) == 0x000020, "Member 'FBPGMoveLog_AdjustStartTransform::Reason' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AdjustStartTransform, OldPos) == 0x000030, "Member 'FBPGMoveLog_AdjustStartTransform::OldPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AdjustStartTransform, OldRot) == 0x000048, "Member 'FBPGMoveLog_AdjustStartTransform::OldRot' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AdjustStartTransform, NewPos) == 0x000060, "Member 'FBPGMoveLog_AdjustStartTransform::NewPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AdjustStartTransform, NewRot) == 0x000078, "Member 'FBPGMoveLog_AdjustStartTransform::NewRot' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_QueueAnimRot
// 0x0010 (0x0030 - 0x0020)
struct FBPGMoveLog_QueueAnimRot final : public FBPGMoveLog_Base
{
public:
	float                                         PlayTime;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MontageID;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B42[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_QueueAnimRot) == 0x000008, "Wrong alignment on FBPGMoveLog_QueueAnimRot");
static_assert(sizeof(FBPGMoveLog_QueueAnimRot) == 0x000030, "Wrong size on FBPGMoveLog_QueueAnimRot");
static_assert(offsetof(FBPGMoveLog_QueueAnimRot, PlayTime) == 0x000020, "Member 'FBPGMoveLog_QueueAnimRot::PlayTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_QueueAnimRot, Yaw) == 0x000024, "Member 'FBPGMoveLog_QueueAnimRot::Yaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_QueueAnimRot, MontageID) == 0x000028, "Member 'FBPGMoveLog_QueueAnimRot::MontageID' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_AnimErrorTrackerDetect
// 0x0048 (0x0068 - 0x0020)
struct FBPGMoveLog_AnimErrorTrackerDetect final : public FBPGMoveLog_Base
{
public:
	float                                         RefTime;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B43[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                TrackedPos;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackedYaw;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B44[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                RefPos;                                            // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefYaw;                                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B45[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_AnimErrorTrackerDetect) == 0x000008, "Wrong alignment on FBPGMoveLog_AnimErrorTrackerDetect");
static_assert(sizeof(FBPGMoveLog_AnimErrorTrackerDetect) == 0x000068, "Wrong size on FBPGMoveLog_AnimErrorTrackerDetect");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerDetect, RefTime) == 0x000020, "Member 'FBPGMoveLog_AnimErrorTrackerDetect::RefTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerDetect, TrackedPos) == 0x000028, "Member 'FBPGMoveLog_AnimErrorTrackerDetect::TrackedPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerDetect, TrackedYaw) == 0x000040, "Member 'FBPGMoveLog_AnimErrorTrackerDetect::TrackedYaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerDetect, RefPos) == 0x000048, "Member 'FBPGMoveLog_AnimErrorTrackerDetect::RefPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerDetect, RefYaw) == 0x000060, "Member 'FBPGMoveLog_AnimErrorTrackerDetect::RefYaw' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_AnimErrorTrackerInterp
// 0x0050 (0x0070 - 0x0020)
struct FBPGMoveLog_AnimErrorTrackerInterp final : public FBPGMoveLog_Base
{
public:
	float                                         RefTime;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key0Time;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key1Time;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B46[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Key0Pos;                                           // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key0Yaw;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B47[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Key1Pos;                                           // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key1Yaw;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_AnimErrorTrackerInterp) == 0x000008, "Wrong alignment on FBPGMoveLog_AnimErrorTrackerInterp");
static_assert(sizeof(FBPGMoveLog_AnimErrorTrackerInterp) == 0x000070, "Wrong size on FBPGMoveLog_AnimErrorTrackerInterp");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, RefTime) == 0x000020, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::RefTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, Key0Time) == 0x000024, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::Key0Time' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, Key1Time) == 0x000028, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::Key1Time' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, Key0Pos) == 0x000030, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::Key0Pos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, Key0Yaw) == 0x000048, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::Key0Yaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, Key1Pos) == 0x000050, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::Key1Pos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, Key1Yaw) == 0x000068, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::Key1Yaw' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterp, T) == 0x00006C, "Member 'FBPGMoveLog_AnimErrorTrackerInterp::T' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_AnimErrorTrackerInterpFail
// 0x0010 (0x0030 - 0x0020)
struct FBPGMoveLog_AnimErrorTrackerInterpFail final : public FBPGMoveLog_Base
{
public:
	float                                         RefTime;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key0Time;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyCount;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B48[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_AnimErrorTrackerInterpFail) == 0x000008, "Wrong alignment on FBPGMoveLog_AnimErrorTrackerInterpFail");
static_assert(sizeof(FBPGMoveLog_AnimErrorTrackerInterpFail) == 0x000030, "Wrong size on FBPGMoveLog_AnimErrorTrackerInterpFail");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterpFail, RefTime) == 0x000020, "Member 'FBPGMoveLog_AnimErrorTrackerInterpFail::RefTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterpFail, Key0Time) == 0x000024, "Member 'FBPGMoveLog_AnimErrorTrackerInterpFail::Key0Time' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_AnimErrorTrackerInterpFail, KeyCount) == 0x000028, "Member 'FBPGMoveLog_AnimErrorTrackerInterpFail::KeyCount' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DriveRM_NormalDrive
// 0x0078 (0x0098 - 0x0020)
struct FBPGMoveLog_DriveRM_NormalDrive final : public FBPGMoveLog_Base
{
public:
	uint8                                         Pad_1B49[0x48];                                    // 0x0020(0x0048)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                NewStartPos;                                       // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewStartRot;                                       // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_DriveRM_NormalDrive) == 0x000008, "Wrong alignment on FBPGMoveLog_DriveRM_NormalDrive");
static_assert(sizeof(FBPGMoveLog_DriveRM_NormalDrive) == 0x000098, "Wrong size on FBPGMoveLog_DriveRM_NormalDrive");
static_assert(offsetof(FBPGMoveLog_DriveRM_NormalDrive, NewStartPos) == 0x000068, "Member 'FBPGMoveLog_DriveRM_NormalDrive::NewStartPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRM_NormalDrive, NewStartRot) == 0x000080, "Member 'FBPGMoveLog_DriveRM_NormalDrive::NewStartRot' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DriveRM_AdjustZ
// 0x0010 (0x0030 - 0x0020)
struct FBPGMoveLog_DriveRM_AdjustZ final : public FBPGMoveLog_Base
{
public:
	float                                         AnimZ;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseZ;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurZ;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4A[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_DriveRM_AdjustZ) == 0x000008, "Wrong alignment on FBPGMoveLog_DriveRM_AdjustZ");
static_assert(sizeof(FBPGMoveLog_DriveRM_AdjustZ) == 0x000030, "Wrong size on FBPGMoveLog_DriveRM_AdjustZ");
static_assert(offsetof(FBPGMoveLog_DriveRM_AdjustZ, AnimZ) == 0x000020, "Member 'FBPGMoveLog_DriveRM_AdjustZ::AnimZ' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRM_AdjustZ, BaseZ) == 0x000024, "Member 'FBPGMoveLog_DriveRM_AdjustZ::BaseZ' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DriveRM_AdjustZ, CurZ) == 0x000028, "Member 'FBPGMoveLog_DriveRM_AdjustZ::CurZ' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_FindFloor
// 0x0018 (0x0038 - 0x0020)
struct FBPGMoveLog_FindFloor final : public FBPGMoveLog_Base
{
public:
	bool                                          IsWalkableFloor;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 FloorName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_FindFloor) == 0x000008, "Wrong alignment on FBPGMoveLog_FindFloor");
static_assert(sizeof(FBPGMoveLog_FindFloor) == 0x000038, "Wrong size on FBPGMoveLog_FindFloor");
static_assert(offsetof(FBPGMoveLog_FindFloor, IsWalkableFloor) == 0x000020, "Member 'FBPGMoveLog_FindFloor::IsWalkableFloor' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_FindFloor, FloorName) == 0x000028, "Member 'FBPGMoveLog_FindFloor::FloorName' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_BlockingHit
// 0x0098 (0x00B8 - 0x0020)
struct FBPGMoveLog_BlockingHit final : public FBPGMoveLog_Base
{
public:
	bool                                          IsBlockingHit;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 ActorName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPos;                                         // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTime;                                           // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4D[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                RampVector;                                        // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBPGMoveLog_BlockingHit) == 0x000008, "Wrong alignment on FBPGMoveLog_BlockingHit");
static_assert(sizeof(FBPGMoveLog_BlockingHit) == 0x0000B8, "Wrong size on FBPGMoveLog_BlockingHit");
static_assert(offsetof(FBPGMoveLog_BlockingHit, IsBlockingHit) == 0x000020, "Member 'FBPGMoveLog_BlockingHit::IsBlockingHit' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, ActorName) == 0x000028, "Member 'FBPGMoveLog_BlockingHit::ActorName' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, Location) == 0x000038, "Member 'FBPGMoveLog_BlockingHit::Location' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, ImpactPos) == 0x000050, "Member 'FBPGMoveLog_BlockingHit::ImpactPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, SurfaceNormal) == 0x000068, "Member 'FBPGMoveLog_BlockingHit::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, ImpactNormal) == 0x000080, "Member 'FBPGMoveLog_BlockingHit::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, HitTime) == 0x000098, "Member 'FBPGMoveLog_BlockingHit::HitTime' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_BlockingHit, RampVector) == 0x0000A0, "Member 'FBPGMoveLog_BlockingHit::RampVector' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_UpdateVel
// 0x0058 (0x0078 - 0x0020)
struct FBPGMoveLog_UpdateVel final : public FBPGMoveLog_Base
{
public:
	float                                         Delta;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                StartPos;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveResult                                   Result;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4F[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_UpdateVel) == 0x000008, "Wrong alignment on FBPGMoveLog_UpdateVel");
static_assert(sizeof(FBPGMoveLog_UpdateVel) == 0x000078, "Wrong size on FBPGMoveLog_UpdateVel");
static_assert(offsetof(FBPGMoveLog_UpdateVel, Delta) == 0x000020, "Member 'FBPGMoveLog_UpdateVel::Delta' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_UpdateVel, StartPos) == 0x000028, "Member 'FBPGMoveLog_UpdateVel::StartPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_UpdateVel, EndPos) == 0x000040, "Member 'FBPGMoveLog_UpdateVel::EndPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_UpdateVel, Velocity) == 0x000058, "Member 'FBPGMoveLog_UpdateVel::Velocity' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_UpdateVel, Result) == 0x000070, "Member 'FBPGMoveLog_UpdateVel::Result' has a wrong offset!");

// ScriptStruct BPGLib.BPGMoveLog_DetectedSyncError
// 0x0038 (0x0058 - 0x0020)
struct FBPGMoveLog_DetectedSyncError final : public FBPGMoveLog_Base
{
public:
	struct FVector                                ServerPos;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClientPos;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B50[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBPGMoveLog_DetectedSyncError) == 0x000008, "Wrong alignment on FBPGMoveLog_DetectedSyncError");
static_assert(sizeof(FBPGMoveLog_DetectedSyncError) == 0x000058, "Wrong size on FBPGMoveLog_DetectedSyncError");
static_assert(offsetof(FBPGMoveLog_DetectedSyncError, ServerPos) == 0x000020, "Member 'FBPGMoveLog_DetectedSyncError::ServerPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DetectedSyncError, ClientPos) == 0x000038, "Member 'FBPGMoveLog_DetectedSyncError::ClientPos' has a wrong offset!");
static_assert(offsetof(FBPGMoveLog_DetectedSyncError, MaxSpeed) == 0x000050, "Member 'FBPGMoveLog_DetectedSyncError::MaxSpeed' has a wrong offset!");

// ScriptStruct BPGLib.ClientMove
// 0x0038 (0x0038 - 0x0000)
struct FClientMove final
{
public:
	float                                         WorldTime;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaPos;                                          // 0x0008(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRot;                                          // 0x0020(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMove) == 0x000008, "Wrong alignment on FClientMove");
static_assert(sizeof(FClientMove) == 0x000038, "Wrong size on FClientMove");
static_assert(offsetof(FClientMove, WorldTime) == 0x000000, "Member 'FClientMove::WorldTime' has a wrong offset!");
static_assert(offsetof(FClientMove, DeltaTime) == 0x000004, "Member 'FClientMove::DeltaTime' has a wrong offset!");
static_assert(offsetof(FClientMove, DeltaPos) == 0x000008, "Member 'FClientMove::DeltaPos' has a wrong offset!");
static_assert(offsetof(FClientMove, DeltaRot) == 0x000020, "Member 'FClientMove::DeltaRot' has a wrong offset!");

// ScriptStruct BPGLib.RotationSequence
// 0x0018 (0x0018 - 0x0000)
struct FRotationSequence final
{
public:
	TArray<struct FRotator>                       _Rots;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         _Length;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _interval;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRotationSequence) == 0x000008, "Wrong alignment on FRotationSequence");
static_assert(sizeof(FRotationSequence) == 0x000018, "Wrong size on FRotationSequence");
static_assert(offsetof(FRotationSequence, _Rots) == 0x000000, "Member 'FRotationSequence::_Rots' has a wrong offset!");
static_assert(offsetof(FRotationSequence, _Length) == 0x000010, "Member 'FRotationSequence::_Length' has a wrong offset!");
static_assert(offsetof(FRotationSequence, _interval) == 0x000014, "Member 'FRotationSequence::_interval' has a wrong offset!");

// ScriptStruct BPGLib.DateTimeISO
// 0x0000 (0x0008 - 0x0008)
struct FDateTimeISO final : public FDateTime
{
};
static_assert(alignof(FDateTimeISO) == 0x000008, "Wrong alignment on FDateTimeISO");
static_assert(sizeof(FDateTimeISO) == 0x000008, "Wrong size on FDateTimeISO");

// ScriptStruct BPGLib.ErrorCorrector
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FErrorCorrector final
{
public:
	uint8                                         Pad_1B51[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FErrorCorrector) == 0x000008, "Wrong alignment on FErrorCorrector");
static_assert(sizeof(FErrorCorrector) == 0x000050, "Wrong size on FErrorCorrector");

// ScriptStruct BPGLib.Monitor
// 0x001C (0x001C - 0x0000)
struct FMonitor final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportHDR;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B52[0x13];                                    // 0x0009(0x0013)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMonitor) == 0x000004, "Wrong alignment on FMonitor");
static_assert(sizeof(FMonitor) == 0x00001C, "Wrong size on FMonitor");
static_assert(offsetof(FMonitor, Width) == 0x000000, "Member 'FMonitor::Width' has a wrong offset!");
static_assert(offsetof(FMonitor, Height) == 0x000004, "Member 'FMonitor::Height' has a wrong offset!");
static_assert(offsetof(FMonitor, SupportHDR) == 0x000008, "Member 'FMonitor::SupportHDR' has a wrong offset!");

// ScriptStruct BPGLib.VideoMode
// 0x000C (0x000C - 0x0000)
struct FVideoMode final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefreshRate;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVideoMode) == 0x000004, "Wrong alignment on FVideoMode");
static_assert(sizeof(FVideoMode) == 0x00000C, "Wrong size on FVideoMode");
static_assert(offsetof(FVideoMode, Width) == 0x000000, "Member 'FVideoMode::Width' has a wrong offset!");
static_assert(offsetof(FVideoMode, Height) == 0x000004, "Member 'FVideoMode::Height' has a wrong offset!");
static_assert(offsetof(FVideoMode, RefreshRate) == 0x000008, "Member 'FVideoMode::RefreshRate' has a wrong offset!");

// ScriptStruct BPGLib.IndicatorData
// 0x0028 (0x0028 - 0x0000)
struct FIndicatorData final
{
public:
	bool                                          NeedIndicatorActor;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B53[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 IndicatedActor;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorType                                Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B54[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UIndicatorBaseWidget*                   IndicatorWidget;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B55[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FIndicatorData) == 0x000008, "Wrong alignment on FIndicatorData");
static_assert(sizeof(FIndicatorData) == 0x000028, "Wrong size on FIndicatorData");
static_assert(offsetof(FIndicatorData, NeedIndicatorActor) == 0x000000, "Member 'FIndicatorData::NeedIndicatorActor' has a wrong offset!");
static_assert(offsetof(FIndicatorData, IndicatedActor) == 0x000008, "Member 'FIndicatorData::IndicatedActor' has a wrong offset!");
static_assert(offsetof(FIndicatorData, Type) == 0x000010, "Member 'FIndicatorData::Type' has a wrong offset!");
static_assert(offsetof(FIndicatorData, IndicatorWidget) == 0x000018, "Member 'FIndicatorData::IndicatorWidget' has a wrong offset!");
static_assert(offsetof(FIndicatorData, Lifetime) == 0x000020, "Member 'FIndicatorData::Lifetime' has a wrong offset!");

// ScriptStruct BPGLib.PerspectiveScale
// 0x0020 (0x0020 - 0x0000)
struct FPerspectiveScale final
{
public:
	struct FVector2D                              DistanceRange;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScaleRange;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerspectiveScale) == 0x000008, "Wrong alignment on FPerspectiveScale");
static_assert(sizeof(FPerspectiveScale) == 0x000020, "Wrong size on FPerspectiveScale");
static_assert(offsetof(FPerspectiveScale, DistanceRange) == 0x000000, "Member 'FPerspectiveScale::DistanceRange' has a wrong offset!");
static_assert(offsetof(FPerspectiveScale, ScaleRange) == 0x000010, "Member 'FPerspectiveScale::ScaleRange' has a wrong offset!");

// ScriptStruct BPGLib.LogPack_WorldDesc
// 0x0018 (0x0028 - 0x0010)
struct FLogPack_WorldDesc final : public FLogPackBase
{
public:
	EWorldNetType                                 WorldType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B56[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogPack_WorldDesc) == 0x000008, "Wrong alignment on FLogPack_WorldDesc");
static_assert(sizeof(FLogPack_WorldDesc) == 0x000028, "Wrong size on FLogPack_WorldDesc");
static_assert(offsetof(FLogPack_WorldDesc, WorldType) == 0x000010, "Member 'FLogPack_WorldDesc::WorldType' has a wrong offset!");
static_assert(offsetof(FLogPack_WorldDesc, Name) == 0x000018, "Member 'FLogPack_WorldDesc::Name' has a wrong offset!");

// ScriptStruct BPGLib.LogPack_ObjectEntry
// 0x0020 (0x0030 - 0x0010)
struct FLogPack_ObjectEntry : public FLogPackBase
{
public:
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorSize;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocal;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B57[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ObjectID;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B58[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLogPack_ObjectEntry) == 0x000008, "Wrong alignment on FLogPack_ObjectEntry");
static_assert(sizeof(FLogPack_ObjectEntry) == 0x000030, "Wrong size on FLogPack_ObjectEntry");
static_assert(offsetof(FLogPack_ObjectEntry, Name) == 0x000010, "Member 'FLogPack_ObjectEntry::Name' has a wrong offset!");
static_assert(offsetof(FLogPack_ObjectEntry, ActorSize) == 0x000020, "Member 'FLogPack_ObjectEntry::ActorSize' has a wrong offset!");
static_assert(offsetof(FLogPack_ObjectEntry, IsLocal) == 0x000024, "Member 'FLogPack_ObjectEntry::IsLocal' has a wrong offset!");
static_assert(offsetof(FLogPack_ObjectEntry, ObjectID) == 0x000028, "Member 'FLogPack_ObjectEntry::ObjectID' has a wrong offset!");

// ScriptStruct BPGLib.LogPack_BeginGroup
// 0x0010 (0x0030 - 0x0020)
struct FLogPack_BeginGroup final : public FLogPack
{
public:
	class FString                                 Group;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogPack_BeginGroup) == 0x000008, "Wrong alignment on FLogPack_BeginGroup");
static_assert(sizeof(FLogPack_BeginGroup) == 0x000030, "Wrong size on FLogPack_BeginGroup");
static_assert(offsetof(FLogPack_BeginGroup, Group) == 0x000020, "Member 'FLogPack_BeginGroup::Group' has a wrong offset!");

// ScriptStruct BPGLib.LogPack_EndGroup
// 0x0010 (0x0030 - 0x0020)
struct FLogPack_EndGroup final : public FLogPack
{
public:
	class FString                                 Group;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogPack_EndGroup) == 0x000008, "Wrong alignment on FLogPack_EndGroup");
static_assert(sizeof(FLogPack_EndGroup) == 0x000030, "Wrong size on FLogPack_EndGroup");
static_assert(offsetof(FLogPack_EndGroup, Group) == 0x000020, "Member 'FLogPack_EndGroup::Group' has a wrong offset!");

// ScriptStruct BPGLib.MessageBoxButton
// 0x0028 (0x0028 - 0x0000)
struct FMessageBoxButton final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMessageBoxButtonType                         Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B59[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageBoxButton) == 0x000008, "Wrong alignment on FMessageBoxButton");
static_assert(sizeof(FMessageBoxButton) == 0x000028, "Wrong size on FMessageBoxButton");
static_assert(offsetof(FMessageBoxButton, ID) == 0x000000, "Member 'FMessageBoxButton::ID' has a wrong offset!");
static_assert(offsetof(FMessageBoxButton, Type) == 0x000008, "Member 'FMessageBoxButton::Type' has a wrong offset!");
static_assert(offsetof(FMessageBoxButton, Text) == 0x000010, "Member 'FMessageBoxButton::Text' has a wrong offset!");

// ScriptStruct BPGLib.MessageBoxSetting
// 0x0048 (0x0048 - 0x0000)
struct FMessageBoxSetting final
{
public:
	EUIOrder                                      UIOrder;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMessageBoxButton>              ButtonDefines;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageBoxSetting) == 0x000008, "Wrong alignment on FMessageBoxSetting");
static_assert(sizeof(FMessageBoxSetting) == 0x000048, "Wrong size on FMessageBoxSetting");
static_assert(offsetof(FMessageBoxSetting, UIOrder) == 0x000000, "Member 'FMessageBoxSetting::UIOrder' has a wrong offset!");
static_assert(offsetof(FMessageBoxSetting, Title) == 0x000008, "Member 'FMessageBoxSetting::Title' has a wrong offset!");
static_assert(offsetof(FMessageBoxSetting, Message) == 0x000020, "Member 'FMessageBoxSetting::Message' has a wrong offset!");
static_assert(offsetof(FMessageBoxSetting, ButtonDefines) == 0x000038, "Member 'FMessageBoxSetting::ButtonDefines' has a wrong offset!");

// ScriptStruct BPGLib.MovementQuery
// 0x0028 (0x0028 - 0x0000)
struct FMovementQuery final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5B[0x20];                                    // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMovementQuery) == 0x000008, "Wrong alignment on FMovementQuery");
static_assert(sizeof(FMovementQuery) == 0x000028, "Wrong size on FMovementQuery");
static_assert(offsetof(FMovementQuery, Actor) == 0x000000, "Member 'FMovementQuery::Actor' has a wrong offset!");

// ScriptStruct BPGLib.MovementQueryResult
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FMovementQueryResult final
{
public:
	uint8                                         Pad_1B5C[0x70];                                    // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMovementQueryResult) == 0x000010, "Wrong alignment on FMovementQueryResult");
static_assert(sizeof(FMovementQueryResult) == 0x000070, "Wrong size on FMovementQueryResult");

// ScriptStruct BPGLib.PolyGraphAxisData
// 0x0030 (0x0030 - 0x0000)
struct FPolyGraphAxisData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Values;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPolyGraphAxisData) == 0x000008, "Wrong alignment on FPolyGraphAxisData");
static_assert(sizeof(FPolyGraphAxisData) == 0x000030, "Wrong size on FPolyGraphAxisData");
static_assert(offsetof(FPolyGraphAxisData, DisplayName) == 0x000000, "Member 'FPolyGraphAxisData::DisplayName' has a wrong offset!");
static_assert(offsetof(FPolyGraphAxisData, MinValue) == 0x000018, "Member 'FPolyGraphAxisData::MinValue' has a wrong offset!");
static_assert(offsetof(FPolyGraphAxisData, MaxValue) == 0x00001C, "Member 'FPolyGraphAxisData::MaxValue' has a wrong offset!");
static_assert(offsetof(FPolyGraphAxisData, Values) == 0x000020, "Member 'FPolyGraphAxisData::Values' has a wrong offset!");

// ScriptStruct BPGLib.BackgroundWidget
// 0x0010 (0x0010 - 0x0000)
struct FBackgroundWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Depth;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBackgroundWidget) == 0x000008, "Wrong alignment on FBackgroundWidget");
static_assert(sizeof(FBackgroundWidget) == 0x000010, "Wrong size on FBackgroundWidget");
static_assert(offsetof(FBackgroundWidget, Widget) == 0x000000, "Member 'FBackgroundWidget::Widget' has a wrong offset!");
static_assert(offsetof(FBackgroundWidget, Depth) == 0x000008, "Member 'FBackgroundWidget::Depth' has a wrong offset!");

// ScriptStruct BPGLib.ProfileRecord
// 0x0014 (0x0014 - 0x0000)
struct FProfileRecord final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedMS;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvgElapsedMS;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfileRecord) == 0x000004, "Wrong alignment on FProfileRecord");
static_assert(sizeof(FProfileRecord) == 0x000014, "Wrong size on FProfileRecord");
static_assert(offsetof(FProfileRecord, Name) == 0x000000, "Member 'FProfileRecord::Name' has a wrong offset!");
static_assert(offsetof(FProfileRecord, CallCount) == 0x000008, "Member 'FProfileRecord::CallCount' has a wrong offset!");
static_assert(offsetof(FProfileRecord, ElapsedMS) == 0x00000C, "Member 'FProfileRecord::ElapsedMS' has a wrong offset!");
static_assert(offsetof(FProfileRecord, AvgElapsedMS) == 0x000010, "Member 'FProfileRecord::AvgElapsedMS' has a wrong offset!");

// ScriptStruct BPGLib.RootMotionEvaluator
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FRootMotionEvaluator final
{
public:
	uint8                                         Pad_1B5E[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRootMotionEvaluator) == 0x000008, "Wrong alignment on FRootMotionEvaluator");
static_assert(sizeof(FRootMotionEvaluator) == 0x000050, "Wrong size on FRootMotionEvaluator");

// ScriptStruct BPGLib.PolyGraphAxis
// 0x0020 (0x0020 - 0x0000)
struct FPolyGraphAxis final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPolyGraphAxis) == 0x000008, "Wrong alignment on FPolyGraphAxis");
static_assert(sizeof(FPolyGraphAxis) == 0x000020, "Wrong size on FPolyGraphAxis");
static_assert(offsetof(FPolyGraphAxis, DisplayName) == 0x000000, "Member 'FPolyGraphAxis::DisplayName' has a wrong offset!");
static_assert(offsetof(FPolyGraphAxis, MinValue) == 0x000018, "Member 'FPolyGraphAxis::MinValue' has a wrong offset!");
static_assert(offsetof(FPolyGraphAxis, MaxValue) == 0x00001C, "Member 'FPolyGraphAxis::MaxValue' has a wrong offset!");

// ScriptStruct BPGLib.PolyGraphLayer
// 0x00E0 (0x00E0 - 0x0000)
struct FPolyGraphLayer final
{
public:
	struct FSlateBrush                            FillBrush;                                         // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5F[0xC];                                     // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FPolyGraphLayer) == 0x000010, "Wrong alignment on FPolyGraphLayer");
static_assert(sizeof(FPolyGraphLayer) == 0x0000E0, "Wrong size on FPolyGraphLayer");
static_assert(offsetof(FPolyGraphLayer, FillBrush) == 0x000000, "Member 'FPolyGraphLayer::FillBrush' has a wrong offset!");
static_assert(offsetof(FPolyGraphLayer, LineColor) == 0x0000D0, "Member 'FPolyGraphLayer::LineColor' has a wrong offset!");

// ScriptStruct BPGLib.PolyGraphSetting
// 0x0038 (0x0038 - 0x0000)
struct FPolyGraphSetting final
{
public:
	TArray<struct FPolyGraphAxis>                 Axes;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPolyGraphLayer>                Layers;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FColor                                 BackgroundColor;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TextColor;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 AxisLineColor;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StepLineColor;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepCount;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Space;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPolyGraphSetting) == 0x000008, "Wrong alignment on FPolyGraphSetting");
static_assert(sizeof(FPolyGraphSetting) == 0x000038, "Wrong size on FPolyGraphSetting");
static_assert(offsetof(FPolyGraphSetting, Axes) == 0x000000, "Member 'FPolyGraphSetting::Axes' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, Layers) == 0x000010, "Member 'FPolyGraphSetting::Layers' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, BackgroundColor) == 0x000020, "Member 'FPolyGraphSetting::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, TextColor) == 0x000024, "Member 'FPolyGraphSetting::TextColor' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, AxisLineColor) == 0x000028, "Member 'FPolyGraphSetting::AxisLineColor' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, StepLineColor) == 0x00002C, "Member 'FPolyGraphSetting::StepLineColor' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, StepCount) == 0x000030, "Member 'FPolyGraphSetting::StepCount' has a wrong offset!");
static_assert(offsetof(FPolyGraphSetting, Space) == 0x000034, "Member 'FPolyGraphSetting::Space' has a wrong offset!");

// ScriptStruct BPGLib.TransformSequence
// 0x0028 (0x0028 - 0x0000)
struct FTransformSequence final
{
public:
	TArray<struct FVector>                        _Pos;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FQuat>                          _Rot;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         _Length;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _interval;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTransformSequence) == 0x000008, "Wrong alignment on FTransformSequence");
static_assert(sizeof(FTransformSequence) == 0x000028, "Wrong size on FTransformSequence");
static_assert(offsetof(FTransformSequence, _Pos) == 0x000000, "Member 'FTransformSequence::_Pos' has a wrong offset!");
static_assert(offsetof(FTransformSequence, _Rot) == 0x000010, "Member 'FTransformSequence::_Rot' has a wrong offset!");
static_assert(offsetof(FTransformSequence, _Length) == 0x000020, "Member 'FTransformSequence::_Length' has a wrong offset!");
static_assert(offsetof(FTransformSequence, _interval) == 0x000024, "Member 'FTransformSequence::_interval' has a wrong offset!");

// ScriptStruct BPGLib.OutlineInfo
// 0x0002 (0x0002 - 0x0000)
struct FOutlineInfo final
{
public:
	EOutlineColor                                 OutlineColor;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingSceneDepth;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutlineInfo) == 0x000001, "Wrong alignment on FOutlineInfo");
static_assert(sizeof(FOutlineInfo) == 0x000002, "Wrong size on FOutlineInfo");
static_assert(offsetof(FOutlineInfo, OutlineColor) == 0x000000, "Member 'FOutlineInfo::OutlineColor' has a wrong offset!");
static_assert(offsetof(FOutlineInfo, UsingSceneDepth) == 0x000001, "Member 'FOutlineInfo::UsingSceneDepth' has a wrong offset!");

// ScriptStruct BPGLib.SplineSetup
// 0x0068 (0x0068 - 0x0000)
struct FSplineSetup final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FireVelocity;                                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointCount;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SamplingInterval;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoGravityDistance;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakRate;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSubStepping;                                    // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B60[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         SubStepCount;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B61[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FSplineSetup) == 0x000008, "Wrong alignment on FSplineSetup");
static_assert(sizeof(FSplineSetup) == 0x000068, "Wrong size on FSplineSetup");
static_assert(offsetof(FSplineSetup, Start) == 0x000000, "Member 'FSplineSetup::Start' has a wrong offset!");
static_assert(offsetof(FSplineSetup, End) == 0x000018, "Member 'FSplineSetup::End' has a wrong offset!");
static_assert(offsetof(FSplineSetup, FireVelocity) == 0x000030, "Member 'FSplineSetup::FireVelocity' has a wrong offset!");
static_assert(offsetof(FSplineSetup, PointCount) == 0x000048, "Member 'FSplineSetup::PointCount' has a wrong offset!");
static_assert(offsetof(FSplineSetup, SamplingInterval) == 0x00004C, "Member 'FSplineSetup::SamplingInterval' has a wrong offset!");
static_assert(offsetof(FSplineSetup, NoGravityDistance) == 0x000050, "Member 'FSplineSetup::NoGravityDistance' has a wrong offset!");
static_assert(offsetof(FSplineSetup, GravityScale) == 0x000054, "Member 'FSplineSetup::GravityScale' has a wrong offset!");
static_assert(offsetof(FSplineSetup, PeakRate) == 0x000058, "Member 'FSplineSetup::PeakRate' has a wrong offset!");
static_assert(offsetof(FSplineSetup, UseSubStepping) == 0x00005C, "Member 'FSplineSetup::UseSubStepping' has a wrong offset!");
static_assert(offsetof(FSplineSetup, SubStepCount) == 0x000060, "Member 'FSplineSetup::SubStepCount' has a wrong offset!");

// ScriptStruct BPGLib.DateTimeString
// 0x0010 (0x0010 - 0x0000)
struct FDateTimeString final
{
public:
	class FString                                 DateTime;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDateTimeString) == 0x000008, "Wrong alignment on FDateTimeString");
static_assert(sizeof(FDateTimeString) == 0x000010, "Wrong size on FDateTimeString");
static_assert(offsetof(FDateTimeString, DateTime) == 0x000000, "Member 'FDateTimeString::DateTime' has a wrong offset!");

// ScriptStruct BPGLib.Vector16
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FVector16 final
{
public:
	uint8                                         Pad_1B62[0xC];                                     // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FVector16) == 0x000004, "Wrong alignment on FVector16");
static_assert(sizeof(FVector16) == 0x00000C, "Wrong size on FVector16");

}

