#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: WIDGET_ControlPower

#include "Basic.hpp"

#include "BPGLib_classes.hpp"
#include "Stigma_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_ControlPower.WIDGET_ControlPower_C
// 0x0050 (0x0540 - 0x04F0)
class UWIDGET_ControlPower_C final : public UPreviewableWidget
{
public:
	class UImage*                                 Background;                                        // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                BTN_CP_Tip;                                        // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCtrl_StatUpdate_C*                     Ctrl_StatUpdate;                                   // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Smile_Bad;                                     // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Smile_good;                                    // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_AdditionalControlPowerNum;                     // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_MainControlPowerNum;                           // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_2;                                  // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGunObject*                             GunObject;                                         // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Origin_Total_CP;                                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void HideTooltip(bool _is_hide);
	class UWidget* OnGetTooltip();
	void SetChara(ECharaType _chara_type);
	void SetGunObject(class UGunObject* Param_GunObject, bool _is_init);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_ControlPower_C">();
	}
	static class UWIDGET_ControlPower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_ControlPower_C>();
	}
};
static_assert(alignof(UWIDGET_ControlPower_C) == 0x000008, "Wrong alignment on UWIDGET_ControlPower_C");
static_assert(sizeof(UWIDGET_ControlPower_C) == 0x000540, "Wrong size on UWIDGET_ControlPower_C");
static_assert(offsetof(UWIDGET_ControlPower_C, Background) == 0x0004F0, "Member 'UWIDGET_ControlPower_C::Background' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, BTN_CP_Tip) == 0x0004F8, "Member 'UWIDGET_ControlPower_C::BTN_CP_Tip' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, Ctrl_StatUpdate) == 0x000500, "Member 'UWIDGET_ControlPower_C::Ctrl_StatUpdate' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, Img_Smile_Bad) == 0x000508, "Member 'UWIDGET_ControlPower_C::Img_Smile_Bad' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, Img_Smile_good) == 0x000510, "Member 'UWIDGET_ControlPower_C::Img_Smile_good' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, Txt_AdditionalControlPowerNum) == 0x000518, "Member 'UWIDGET_ControlPower_C::Txt_AdditionalControlPowerNum' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, Txt_MainControlPowerNum) == 0x000520, "Member 'UWIDGET_ControlPower_C::Txt_MainControlPowerNum' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, WidgetSwitcher_2) == 0x000528, "Member 'UWIDGET_ControlPower_C::WidgetSwitcher_2' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, GunObject) == 0x000530, "Member 'UWIDGET_ControlPower_C::GunObject' has a wrong offset!");
static_assert(offsetof(UWIDGET_ControlPower_C, Origin_Total_CP) == 0x000538, "Member 'UWIDGET_ControlPower_C::Origin_Total_CP' has a wrong offset!");

}

