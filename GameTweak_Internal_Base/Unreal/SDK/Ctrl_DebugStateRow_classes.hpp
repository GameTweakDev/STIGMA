#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_DebugStateRow

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Ctrl_DebugStateRow.Ctrl_DebugStateRow_C
// 0x01B8 (0x06A8 - 0x04F0)
class UCtrl_DebugStateRow_C final : public UPreviewableWidget
{
public:
	class UTextBlock*                             TXT_Base;                                          // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Boost;                                         // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Current;                                       // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Txt_Title;                                         // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TXT_Total;                                         // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Title;                                             // 0x0518(0x0018)(Edit, BlueprintVisible)
	class FText                                   Current;                                           // 0x0530(0x0018)(Edit, BlueprintVisible)
	class FText                                   Total;                                             // 0x0548(0x0018)(Edit, BlueprintVisible)
	class FText                                   base;                                              // 0x0560(0x0018)(Edit, BlueprintVisible)
	class FText                                   Boost;                                             // 0x0578(0x0018)(Edit, BlueprintVisible)
	struct FSlateFontInfo                         TitleFont;                                         // 0x0590(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSlateFontInfo                         ValueFont;                                         // 0x05E8(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSlateColor                            TitleColor;                                        // 0x0640(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            CurrentColor;                                      // 0x0654(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            TotalColor;                                        // 0x0668(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            BaseColor;                                         // 0x067C(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            BoostColor;                                        // 0x0690(0x0014)(Edit, BlueprintVisible)

public:
	bool OnSynchronizeProperties();
	void SetValues(const class FText& _current, const class FText& _total, const class FText& _base, const class FText& _boost);
	void UpdateAll();
	void UpdateFont();
	void UpdateTitle();
	void UpdateValues();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ctrl_DebugStateRow_C">();
	}
	static class UCtrl_DebugStateRow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrl_DebugStateRow_C>();
	}
};
static_assert(alignof(UCtrl_DebugStateRow_C) == 0x000008, "Wrong alignment on UCtrl_DebugStateRow_C");
static_assert(sizeof(UCtrl_DebugStateRow_C) == 0x0006A8, "Wrong size on UCtrl_DebugStateRow_C");
static_assert(offsetof(UCtrl_DebugStateRow_C, TXT_Base) == 0x0004F0, "Member 'UCtrl_DebugStateRow_C::TXT_Base' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, TXT_Boost) == 0x0004F8, "Member 'UCtrl_DebugStateRow_C::TXT_Boost' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, TXT_Current) == 0x000500, "Member 'UCtrl_DebugStateRow_C::TXT_Current' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, Txt_Title) == 0x000508, "Member 'UCtrl_DebugStateRow_C::Txt_Title' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, TXT_Total) == 0x000510, "Member 'UCtrl_DebugStateRow_C::TXT_Total' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, Title) == 0x000518, "Member 'UCtrl_DebugStateRow_C::Title' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, Current) == 0x000530, "Member 'UCtrl_DebugStateRow_C::Current' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, Total) == 0x000548, "Member 'UCtrl_DebugStateRow_C::Total' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, base) == 0x000560, "Member 'UCtrl_DebugStateRow_C::base' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, Boost) == 0x000578, "Member 'UCtrl_DebugStateRow_C::Boost' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, TitleFont) == 0x000590, "Member 'UCtrl_DebugStateRow_C::TitleFont' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, ValueFont) == 0x0005E8, "Member 'UCtrl_DebugStateRow_C::ValueFont' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, TitleColor) == 0x000640, "Member 'UCtrl_DebugStateRow_C::TitleColor' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, CurrentColor) == 0x000654, "Member 'UCtrl_DebugStateRow_C::CurrentColor' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, TotalColor) == 0x000668, "Member 'UCtrl_DebugStateRow_C::TotalColor' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, BaseColor) == 0x00067C, "Member 'UCtrl_DebugStateRow_C::BaseColor' has a wrong offset!");
static_assert(offsetof(UCtrl_DebugStateRow_C, BoostColor) == 0x000690, "Member 'UCtrl_DebugStateRow_C::BoostColor' has a wrong offset!");

}

