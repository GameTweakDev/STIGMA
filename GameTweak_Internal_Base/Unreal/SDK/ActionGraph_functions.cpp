#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: ActionGraph

#include "Basic.hpp"

#include "ActionGraph_classes.hpp"
#include "ActionGraph_parameters.hpp"


namespace SDK
{

// Function ActionGraph.ActionGraph.GetStockCooltimeElapsed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionGraph::GetStockCooltimeElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetStockCooltimeElapsed");

	Params::ActionGraph_GetStockCooltimeElapsed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetActiveHitRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UActionGraph::GetActiveHitRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetActiveHitRange");

	Params::ActionGraph_GetActiveHitRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetAttackableRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UActionGraph::GetAttackableRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetAttackableRange");

	Params::ActionGraph_GetAttackableRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetCalculatedFinalStockCooltime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionGraph::GetCalculatedFinalStockCooltime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetCalculatedFinalStockCooltime");

	Params::ActionGraph_GetCalculatedFinalStockCooltime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetDefaultMaxStockCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionGraph::GetDefaultMaxStockCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetDefaultMaxStockCount");

	Params::ActionGraph_GetDefaultMaxStockCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetMaxStockCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionGraph::GetMaxStockCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetMaxStockCount");

	Params::ActionGraph_GetMaxStockCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetStockCooltime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionGraph::GetStockCooltime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetStockCooltime");

	Params::ActionGraph_GetStockCooltime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetStockCooltimeProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionGraph::GetStockCooltimeProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetStockCooltimeProgress");

	Params::ActionGraph_GetStockCooltimeProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetStockCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionGraph::GetStockCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetStockCount");

	Params::ActionGraph_GetStockCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetStockType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EStockType                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStockType UActionGraph::GetStockType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetStockType");

	Params::ActionGraph_GetStockType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.GetUsage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EActionUsage                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EActionUsage UActionGraph::GetUsage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "GetUsage");

	Params::ActionGraph_GetUsage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.IsBoundStockCoolTimeDelegate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionGraph::IsBoundStockCoolTimeDelegate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "IsBoundStockCoolTimeDelegate");

	Params::ActionGraph_IsBoundStockCoolTimeDelegate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.IsChangeStanceAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionGraph::IsChangeStanceAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "IsChangeStanceAction");

	Params::ActionGraph_IsChangeStanceAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.IsDelayTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionGraph::IsDelayTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "IsDelayTime");

	Params::ActionGraph_IsDelayTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.IsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionGraph::IsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "IsRunning");

	Params::ActionGraph_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraph.IsSupportedAnimRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionGraph::IsSupportedAnimRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraph", "IsSupportedAnimRate");

	Params::ActionGraph_IsSupportedAnimRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraphCharacter.IsPlayingPassiveAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    _is_check_passive_standing                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AActionGraphCharacter::IsPlayingPassiveAction(bool _is_check_passive_standing) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphCharacter", "IsPlayingPassiveAction");

	Params::ActionGraphCharacter_IsPlayingPassiveAction Parms{};

	Parms._is_check_passive_standing = _is_check_passive_standing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_ALL_Activated_ActionGraph
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FActionGraphActivateReq          _req                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_ALL_Activated_ActionGraph(const struct FActionGraphActivateReq& _req)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_ALL_Activated_ActionGraph");

	Params::ActionGraphDriverComponent_RPC_ALL_Activated_ActionGraph Parms{};

	Parms._req = std::move(_req);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_ALL_OperatorSignal
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FActionGraphOperatorID           _signal_id                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   _signal_code                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_ALL_OperatorSignal(const struct FActionGraphOperatorID& _signal_id, int32 _signal_code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_ALL_OperatorSignal");

	Params::ActionGraphDriverComponent_RPC_ALL_OperatorSignal Parms{};

	Parms._signal_id = std::move(_signal_id);
	Parms._signal_code = _signal_code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_ALL_UpdateGraphFlow
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FActionGraphFlow_Multicast       _graph_flow                                            (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_ALL_UpdateGraphFlow(const struct FActionGraphFlow_Multicast& _graph_flow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_ALL_UpdateGraphFlow");

	Params::ActionGraphDriverComponent_RPC_ALL_UpdateGraphFlow Parms{};

	Parms._graph_flow = std::move(_graph_flow);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_CLIENT_StartRequest_Fail_ACK
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FActionGraphStartReq_Fail_Ack    _ack                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_CLIENT_StartRequest_Fail_ACK(const struct FActionGraphStartReq_Fail_Ack& _ack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_CLIENT_StartRequest_Fail_ACK");

	Params::ActionGraphDriverComponent_RPC_CLIENT_StartRequest_Fail_ACK Parms{};

	Parms._ack = std::move(_ack);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_NotifyInputEvent
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FActionGraphInput_Req            _req                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_SERVER_NotifyInputEvent(const struct FActionGraphInput_Req& _req)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_SERVER_NotifyInputEvent");

	Params::ActionGraphDriverComponent_RPC_SERVER_NotifyInputEvent Parms{};

	Parms._req = std::move(_req);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_OperatorSignal
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FActionGraphOperatorID           _signal_id                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   _signal_code                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_SERVER_OperatorSignal(const struct FActionGraphOperatorID& _signal_id, int32 _signal_code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_SERVER_OperatorSignal");

	Params::ActionGraphDriverComponent_RPC_SERVER_OperatorSignal Parms{};

	Parms._signal_id = std::move(_signal_id);
	Parms._signal_code = _signal_code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_StartRequest
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FActionGraphStartReq             _req                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_SERVER_StartRequest(const struct FActionGraphStartReq& _req)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_SERVER_StartRequest");

	Params::ActionGraphDriverComponent_RPC_SERVER_StartRequest Parms{};

	Parms._req = std::move(_req);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ActionGraph.ActionGraphDriverComponent.RPC_SERVER_StopActionGraph
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FActionGraphEndReq               _req                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UActionGraphDriverComponent::RPC_SERVER_StopActionGraph(const struct FActionGraphEndReq& _req)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionGraphDriverComponent", "RPC_SERVER_StopActionGraph");

	Params::ActionGraphDriverComponent_RPC_SERVER_StopActionGraph Parms{};

	Parms._req = std::move(_req);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

