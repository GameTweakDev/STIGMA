#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Page_BattlePass

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "BPGLib_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Activate_K2Node_ComponentBoundEvent_11_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_AllReward_K2Node_ComponentBoundEvent_15_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_BuyLevelup_K2Node_ComponentBoundEvent_13_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_ChallengeTask_K2Node_ComponentBoundEvent_8_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_0_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_GoToIntro_K2Node_ComponentBoundEvent_5_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature final
{
public:
	class UAnimatableWidget*                      _widget;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          _select;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature) == 0x000008, "Wrong alignment on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature");
static_assert(sizeof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature) == 0x000010, "Wrong size on Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature, _widget) == 0x000000, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature::_widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature, _select) == 0x000008, "Member 'Page_BattlePass_C_BndEvt__Page_BattlePass_Btn_Info_K2Node_ComponentBoundEvent_1_DM_OnSelectEnd__DelegateSignature::_select' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.EnableLevelBuyBtn
// 0x0001 (0x0001 - 0x0000)
struct Page_BattlePass_C_EnableLevelBuyBtn final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_EnableLevelBuyBtn) == 0x000001, "Wrong alignment on Page_BattlePass_C_EnableLevelBuyBtn");
static_assert(sizeof(Page_BattlePass_C_EnableLevelBuyBtn) == 0x000001, "Wrong size on Page_BattlePass_C_EnableLevelBuyBtn");
static_assert(offsetof(Page_BattlePass_C_EnableLevelBuyBtn, _enable) == 0x000000, "Member 'Page_BattlePass_C_EnableLevelBuyBtn::_enable' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.EnablePurchaseBtn
// 0x0001 (0x0001 - 0x0000)
struct Page_BattlePass_C_EnablePurchaseBtn final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_EnablePurchaseBtn) == 0x000001, "Wrong alignment on Page_BattlePass_C_EnablePurchaseBtn");
static_assert(sizeof(Page_BattlePass_C_EnablePurchaseBtn) == 0x000001, "Wrong size on Page_BattlePass_C_EnablePurchaseBtn");
static_assert(offsetof(Page_BattlePass_C_EnablePurchaseBtn, _enable) == 0x000000, "Member 'Page_BattlePass_C_EnablePurchaseBtn::_enable' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.ExecuteUbergraph_Page_BattlePass
// 0x01F0 (0x01F0 - 0x0000)
struct Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EB8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   K2Node_Event__name;                                // 0x0008(0x0018)(ConstParm)
	EItemGrade                                    K2Node_Event__grade;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__premium_locked;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__show_2;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EB9[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGradeDef                              CallFunc_GetGradeDefine_ReturnValue;               // 0x0028(0x0070)(ConstParm)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0098(0x0014)()
	TDelegate<void(EResultCode _rcode, struct FACK_MissionRead& _ack)> K2Node_CreateDelegate_OutputDelegate;              // 0x00AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EBA[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemID_BattlePass>             CallFunc_GetNoMissionBattlePassIDs_ReturnValue;    // 0x00C0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EBB[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattlePassInfo                        CallFunc_GetBattlePassInfo__out_info;              // 0x00D8(0x0078)()
	bool                                          CallFunc_GetBattlePassInfo_ReturnValue;            // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__show_1;                              // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EBC[0x6];                                     // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget_6;              // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select_6;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EBD[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget_5;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select_5;              // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EBE[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget_4;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select_4;              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EBF[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget_3;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select_3;              // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC0[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget_2;              // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select_2;              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__show;                                // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC1[0x6];                                     // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget_1;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select_1;              // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC2[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             CallFunc_DoModal_ReturnValue;                      // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUI_BattlePassBuyPopup*                 K2Node_DynamicCast_AsUI_Battle_Pass_Buy_Popup;     // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC3[0x7];                                     // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimatableWidget*                      K2Node_ComponentBoundEvent__widget;                // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent__select;                // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC4[0x7];                                     // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             CallFunc_DoModal_ReturnValue_1;                    // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__enable_1;                            // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event__enable;                              // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass) == 0x000008, "Wrong alignment on Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass");
static_assert(sizeof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass) == 0x0001F0, "Wrong size on Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, EntryPoint) == 0x000000, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::EntryPoint' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__name) == 0x000008, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__name' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__grade) == 0x000020, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__grade' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__premium_locked) == 0x000021, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__premium_locked' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__show_2) == 0x000022, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__show_2' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_GetGradeDefine_ReturnValue) == 0x000028, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_GetGradeDefine_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_MakeStruct_SlateColor) == 0x000098, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_CreateDelegate_OutputDelegate) == 0x0000AC, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_GetNoMissionBattlePassIDs_ReturnValue) == 0x0000C0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_GetNoMissionBattlePassIDs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D4, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_GetBattlePassInfo__out_info) == 0x0000D8, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_GetBattlePassInfo__out_info' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_GetBattlePassInfo_ReturnValue) == 0x000150, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_GetBattlePassInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__show_1) == 0x000151, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__show_1' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget_6) == 0x000158, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget_6' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select_6) == 0x000160, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select_6' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget_5) == 0x000168, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget_5' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select_5) == 0x000170, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select_5' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget_4) == 0x000178, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget_4' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select_4) == 0x000180, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select_4' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget_3) == 0x000188, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget_3' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select_3) == 0x000190, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select_3' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget_2) == 0x000198, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget_2' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select_2) == 0x0001A0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select_2' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__show) == 0x0001A1, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__show' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget_1) == 0x0001A8, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget_1' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select_1) == 0x0001B0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select_1' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_DoModal_ReturnValue) == 0x0001B8, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_DoModal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_DynamicCast_AsUI_Battle_Pass_Buy_Popup) == 0x0001C0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_DynamicCast_AsUI_Battle_Pass_Buy_Popup' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_DynamicCast_bSuccess) == 0x0001C8, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__widget) == 0x0001D0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__widget' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_ComponentBoundEvent__select) == 0x0001D8, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_ComponentBoundEvent__select' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, CallFunc_DoModal_ReturnValue_1) == 0x0001E0, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::CallFunc_DoModal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__enable_1) == 0x0001E8, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__enable_1' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass, K2Node_Event__enable) == 0x0001E9, "Member 'Page_BattlePass_C_ExecuteUbergraph_Page_BattlePass::K2Node_Event__enable' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.On Read Mission
// 0x0060 (0x0060 - 0x0000)
struct Page_BattlePass_C_On_Read_Mission final
{
public:
	EResultCode                                   _rcode;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_MissionRead                       _ack;                                              // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FNetReply                              ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC6[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FNetReply                              CallFunc_NetReplyFromCode_ReturnValue;             // 0x0040(0x0020)()
};
static_assert(alignof(Page_BattlePass_C_On_Read_Mission) == 0x000008, "Wrong alignment on Page_BattlePass_C_On_Read_Mission");
static_assert(sizeof(Page_BattlePass_C_On_Read_Mission) == 0x000060, "Wrong size on Page_BattlePass_C_On_Read_Mission");
static_assert(offsetof(Page_BattlePass_C_On_Read_Mission, _rcode) == 0x000000, "Member 'Page_BattlePass_C_On_Read_Mission::_rcode' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_On_Read_Mission, _ack) == 0x000008, "Member 'Page_BattlePass_C_On_Read_Mission::_ack' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_On_Read_Mission, ReturnValue) == 0x000018, "Member 'Page_BattlePass_C_On_Read_Mission::ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_On_Read_Mission, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'Page_BattlePass_C_On_Read_Mission::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_On_Read_Mission, CallFunc_NetReplyFromCode_ReturnValue) == 0x000040, "Member 'Page_BattlePass_C_On_Read_Mission::CallFunc_NetReplyFromCode_ReturnValue' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.OpenMissionPopup
// 0x0018 (0x0018 - 0x0000)
struct Page_BattlePass_C_OpenMissionPopup final
{
public:
	class UPopupBase*                             CallFunc_DoModal_ReturnValue;                      // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUI_MissionPopup_C*                     K2Node_DynamicCast_AsUI_Mission_Popup;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_OpenMissionPopup) == 0x000008, "Wrong alignment on Page_BattlePass_C_OpenMissionPopup");
static_assert(sizeof(Page_BattlePass_C_OpenMissionPopup) == 0x000018, "Wrong size on Page_BattlePass_C_OpenMissionPopup");
static_assert(offsetof(Page_BattlePass_C_OpenMissionPopup, CallFunc_DoModal_ReturnValue) == 0x000000, "Member 'Page_BattlePass_C_OpenMissionPopup::CallFunc_DoModal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_OpenMissionPopup, K2Node_DynamicCast_AsUI_Mission_Popup) == 0x000008, "Member 'Page_BattlePass_C_OpenMissionPopup::K2Node_DynamicCast_AsUI_Mission_Popup' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_OpenMissionPopup, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Page_BattlePass_C_OpenMissionPopup::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.SetPreviewItemInfo
// 0x0020 (0x0020 - 0x0000)
struct Page_BattlePass_C_SetPreviewItemInfo final
{
public:
	class FText                                   _Name;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EItemGrade                                    _Grade;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _premium_locked;                                   // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_SetPreviewItemInfo) == 0x000008, "Wrong alignment on Page_BattlePass_C_SetPreviewItemInfo");
static_assert(sizeof(Page_BattlePass_C_SetPreviewItemInfo) == 0x000020, "Wrong size on Page_BattlePass_C_SetPreviewItemInfo");
static_assert(offsetof(Page_BattlePass_C_SetPreviewItemInfo, _Name) == 0x000000, "Member 'Page_BattlePass_C_SetPreviewItemInfo::_Name' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_SetPreviewItemInfo, _Grade) == 0x000018, "Member 'Page_BattlePass_C_SetPreviewItemInfo::_Grade' has a wrong offset!");
static_assert(offsetof(Page_BattlePass_C_SetPreviewItemInfo, _premium_locked) == 0x000019, "Member 'Page_BattlePass_C_SetPreviewItemInfo::_premium_locked' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.ShowActivateButton
// 0x0001 (0x0001 - 0x0000)
struct Page_BattlePass_C_ShowActivateButton final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_ShowActivateButton) == 0x000001, "Wrong alignment on Page_BattlePass_C_ShowActivateButton");
static_assert(sizeof(Page_BattlePass_C_ShowActivateButton) == 0x000001, "Wrong size on Page_BattlePass_C_ShowActivateButton");
static_assert(offsetof(Page_BattlePass_C_ShowActivateButton, _show) == 0x000000, "Member 'Page_BattlePass_C_ShowActivateButton::_show' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.ShowAllRewardBtn
// 0x0001 (0x0001 - 0x0000)
struct Page_BattlePass_C_ShowAllRewardBtn final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_ShowAllRewardBtn) == 0x000001, "Wrong alignment on Page_BattlePass_C_ShowAllRewardBtn");
static_assert(sizeof(Page_BattlePass_C_ShowAllRewardBtn) == 0x000001, "Wrong size on Page_BattlePass_C_ShowAllRewardBtn");
static_assert(offsetof(Page_BattlePass_C_ShowAllRewardBtn, _show) == 0x000000, "Member 'Page_BattlePass_C_ShowAllRewardBtn::_show' has a wrong offset!");

// Function Page_BattlePass.Page_BattlePass_C.ShowPreviewItemInfo
// 0x0001 (0x0001 - 0x0000)
struct Page_BattlePass_C_ShowPreviewItemInfo final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Page_BattlePass_C_ShowPreviewItemInfo) == 0x000001, "Wrong alignment on Page_BattlePass_C_ShowPreviewItemInfo");
static_assert(sizeof(Page_BattlePass_C_ShowPreviewItemInfo) == 0x000001, "Wrong size on Page_BattlePass_C_ShowPreviewItemInfo");
static_assert(offsetof(Page_BattlePass_C_ShowPreviewItemInfo, _show) == 0x000000, "Member 'Page_BattlePass_C_ShowPreviewItemInfo::_show' has a wrong offset!");

}

