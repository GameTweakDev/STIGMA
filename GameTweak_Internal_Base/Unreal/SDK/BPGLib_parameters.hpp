#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: BPGLib

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "BPGLib_structs.hpp"


namespace SDK::Params
{

// Function BPGLib.3DViewWidget.GetActor
// 0x0008 (0x0008 - 0x0000)
struct ThreeDViewWidget_GetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetActor) == 0x000008, "Wrong alignment on ThreeDViewWidget_GetActor");
static_assert(sizeof(ThreeDViewWidget_GetActor) == 0x000008, "Wrong size on ThreeDViewWidget_GetActor");
static_assert(offsetof(ThreeDViewWidget_GetActor, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetActor::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct ThreeDViewWidget_GetCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetCameraLocation) == 0x000008, "Wrong alignment on ThreeDViewWidget_GetCameraLocation");
static_assert(sizeof(ThreeDViewWidget_GetCameraLocation) == 0x000018, "Wrong size on ThreeDViewWidget_GetCameraLocation");
static_assert(offsetof(ThreeDViewWidget_GetCameraLocation, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetCameraLocation::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct ThreeDViewWidget_GetCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetCameraRotation) == 0x000008, "Wrong alignment on ThreeDViewWidget_GetCameraRotation");
static_assert(sizeof(ThreeDViewWidget_GetCameraRotation) == 0x000018, "Wrong size on ThreeDViewWidget_GetCameraRotation");
static_assert(offsetof(ThreeDViewWidget_GetCameraRotation, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetCameraRotation::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetCaptureSource
// 0x0001 (0x0001 - 0x0000)
struct ThreeDViewWidget_GetCaptureSource final
{
public:
	ESceneCaptureSource                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetCaptureSource) == 0x000001, "Wrong alignment on ThreeDViewWidget_GetCaptureSource");
static_assert(sizeof(ThreeDViewWidget_GetCaptureSource) == 0x000001, "Wrong size on ThreeDViewWidget_GetCaptureSource");
static_assert(offsetof(ThreeDViewWidget_GetCaptureSource, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetCaptureSource::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetClearColor
// 0x0010 (0x0010 - 0x0000)
struct ThreeDViewWidget_GetClearColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetClearColor) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetClearColor");
static_assert(sizeof(ThreeDViewWidget_GetClearColor) == 0x000010, "Wrong size on ThreeDViewWidget_GetClearColor");
static_assert(offsetof(ThreeDViewWidget_GetClearColor, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetClearColor::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetFOV
// 0x0004 (0x0004 - 0x0000)
struct ThreeDViewWidget_GetFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetFOV) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetFOV");
static_assert(sizeof(ThreeDViewWidget_GetFOV) == 0x000004, "Wrong size on ThreeDViewWidget_GetFOV");
static_assert(offsetof(ThreeDViewWidget_GetFOV, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetFOV::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetMaxDepth
// 0x0004 (0x0004 - 0x0000)
struct ThreeDViewWidget_GetMaxDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetMaxDepth) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetMaxDepth");
static_assert(sizeof(ThreeDViewWidget_GetMaxDepth) == 0x000004, "Wrong size on ThreeDViewWidget_GetMaxDepth");
static_assert(offsetof(ThreeDViewWidget_GetMaxDepth, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetMaxDepth::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetMinDepth
// 0x0004 (0x0004 - 0x0000)
struct ThreeDViewWidget_GetMinDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetMinDepth) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetMinDepth");
static_assert(sizeof(ThreeDViewWidget_GetMinDepth) == 0x000004, "Wrong size on ThreeDViewWidget_GetMinDepth");
static_assert(offsetof(ThreeDViewWidget_GetMinDepth, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetMinDepth::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetOrthoWidth
// 0x0004 (0x0004 - 0x0000)
struct ThreeDViewWidget_GetOrthoWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetOrthoWidth) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetOrthoWidth");
static_assert(sizeof(ThreeDViewWidget_GetOrthoWidth) == 0x000004, "Wrong size on ThreeDViewWidget_GetOrthoWidth");
static_assert(offsetof(ThreeDViewWidget_GetOrthoWidth, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetOrthoWidth::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetPostProcessSettings
// 0x06E0 (0x06E0 - 0x0000)
struct ThreeDViewWidget_GetPostProcessSettings final
{
public:
	struct FPostProcessSettings                   ReturnValue;                                       // 0x0000(0x06E0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetPostProcessSettings) == 0x000010, "Wrong alignment on ThreeDViewWidget_GetPostProcessSettings");
static_assert(sizeof(ThreeDViewWidget_GetPostProcessSettings) == 0x0006E0, "Wrong size on ThreeDViewWidget_GetPostProcessSettings");
static_assert(offsetof(ThreeDViewWidget_GetPostProcessSettings, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetPostProcessSettings::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct ThreeDViewWidget_GetProjectionMode final
{
public:
	ECameraProjectionMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetProjectionMode) == 0x000001, "Wrong alignment on ThreeDViewWidget_GetProjectionMode");
static_assert(sizeof(ThreeDViewWidget_GetProjectionMode) == 0x000001, "Wrong size on ThreeDViewWidget_GetProjectionMode");
static_assert(offsetof(ThreeDViewWidget_GetProjectionMode, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetProjectionMode::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetRenderTargetFormat
// 0x0001 (0x0001 - 0x0000)
struct ThreeDViewWidget_GetRenderTargetFormat final
{
public:
	ETextureRenderTargetFormat                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetRenderTargetFormat) == 0x000001, "Wrong alignment on ThreeDViewWidget_GetRenderTargetFormat");
static_assert(sizeof(ThreeDViewWidget_GetRenderTargetFormat) == 0x000001, "Wrong size on ThreeDViewWidget_GetRenderTargetFormat");
static_assert(offsetof(ThreeDViewWidget_GetRenderTargetFormat, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetRenderTargetFormat::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetRenderTargetHeight
// 0x0004 (0x0004 - 0x0000)
struct ThreeDViewWidget_GetRenderTargetHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetRenderTargetHeight) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetRenderTargetHeight");
static_assert(sizeof(ThreeDViewWidget_GetRenderTargetHeight) == 0x000004, "Wrong size on ThreeDViewWidget_GetRenderTargetHeight");
static_assert(offsetof(ThreeDViewWidget_GetRenderTargetHeight, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetRenderTargetHeight::ReturnValue' has a wrong offset!");

// Function BPGLib.3DViewWidget.GetRenderTargetWidth
// 0x0004 (0x0004 - 0x0000)
struct ThreeDViewWidget_GetRenderTargetWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreeDViewWidget_GetRenderTargetWidth) == 0x000004, "Wrong alignment on ThreeDViewWidget_GetRenderTargetWidth");
static_assert(sizeof(ThreeDViewWidget_GetRenderTargetWidth) == 0x000004, "Wrong size on ThreeDViewWidget_GetRenderTargetWidth");
static_assert(offsetof(ThreeDViewWidget_GetRenderTargetWidth, ReturnValue) == 0x000000, "Member 'ThreeDViewWidget_GetRenderTargetWidth::ReturnValue' has a wrong offset!");

// Function BPGLib.AnimatableWidget.CloseWithAnim
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_CloseWithAnim final
{
public:
	bool                                          _force_immediately;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_CloseWithAnim) == 0x000001, "Wrong alignment on AnimatableWidget_CloseWithAnim");
static_assert(sizeof(AnimatableWidget_CloseWithAnim) == 0x000001, "Wrong size on AnimatableWidget_CloseWithAnim");
static_assert(offsetof(AnimatableWidget_CloseWithAnim, _force_immediately) == 0x000000, "Member 'AnimatableWidget_CloseWithAnim::_force_immediately' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Focus
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_OnEVENT_Focus final
{
public:
	bool                                          _focus;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Focus) == 0x000001, "Wrong alignment on AnimatableWidget_OnEVENT_Focus");
static_assert(sizeof(AnimatableWidget_OnEVENT_Focus) == 0x000001, "Wrong size on AnimatableWidget_OnEVENT_Focus");
static_assert(offsetof(AnimatableWidget_OnEVENT_Focus, _focus) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Focus::_focus' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Focus_Internal
// 0x0010 (0x0010 - 0x0000)
struct AnimatableWidget_OnEVENT_Focus_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _focus;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AnimatableWidget_OnEVENT_Focus_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Focus_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Focus_Internal) == 0x000010, "Wrong size on AnimatableWidget_OnEVENT_Focus_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Focus_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Focus_Internal::_self' has a wrong offset!");
static_assert(offsetof(AnimatableWidget_OnEVENT_Focus_Internal, _focus) == 0x000008, "Member 'AnimatableWidget_OnEVENT_Focus_Internal::_focus' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Hide_End_Internal
// 0x0008 (0x0008 - 0x0000)
struct AnimatableWidget_OnEVENT_Hide_End_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Hide_End_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Hide_End_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Hide_End_Internal) == 0x000008, "Wrong size on AnimatableWidget_OnEVENT_Hide_End_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Hide_End_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Hide_End_Internal::_self' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Hide_Start_Internal
// 0x0008 (0x0008 - 0x0000)
struct AnimatableWidget_OnEVENT_Hide_Start_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Hide_Start_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Hide_Start_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Hide_Start_Internal) == 0x000008, "Wrong size on AnimatableWidget_OnEVENT_Hide_Start_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Hide_Start_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Hide_Start_Internal::_self' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Select_End
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_OnEVENT_Select_End final
{
public:
	bool                                          _selected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Select_End) == 0x000001, "Wrong alignment on AnimatableWidget_OnEVENT_Select_End");
static_assert(sizeof(AnimatableWidget_OnEVENT_Select_End) == 0x000001, "Wrong size on AnimatableWidget_OnEVENT_Select_End");
static_assert(offsetof(AnimatableWidget_OnEVENT_Select_End, _selected) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Select_End::_selected' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Select_End_Internal
// 0x0010 (0x0010 - 0x0000)
struct AnimatableWidget_OnEVENT_Select_End_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AnimatableWidget_OnEVENT_Select_End_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Select_End_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Select_End_Internal) == 0x000010, "Wrong size on AnimatableWidget_OnEVENT_Select_End_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Select_End_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Select_End_Internal::_self' has a wrong offset!");
static_assert(offsetof(AnimatableWidget_OnEVENT_Select_End_Internal, _select) == 0x000008, "Member 'AnimatableWidget_OnEVENT_Select_End_Internal::_select' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Select_Start
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_OnEVENT_Select_Start final
{
public:
	bool                                          _select;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Select_Start) == 0x000001, "Wrong alignment on AnimatableWidget_OnEVENT_Select_Start");
static_assert(sizeof(AnimatableWidget_OnEVENT_Select_Start) == 0x000001, "Wrong size on AnimatableWidget_OnEVENT_Select_Start");
static_assert(offsetof(AnimatableWidget_OnEVENT_Select_Start, _select) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Select_Start::_select' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Select_Start_Internal
// 0x0010 (0x0010 - 0x0000)
struct AnimatableWidget_OnEVENT_Select_Start_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _select;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(AnimatableWidget_OnEVENT_Select_Start_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Select_Start_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Select_Start_Internal) == 0x000010, "Wrong size on AnimatableWidget_OnEVENT_Select_Start_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Select_Start_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Select_Start_Internal::_self' has a wrong offset!");
static_assert(offsetof(AnimatableWidget_OnEVENT_Select_Start_Internal, _select) == 0x000008, "Member 'AnimatableWidget_OnEVENT_Select_Start_Internal::_select' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Show_End_Internal
// 0x0008 (0x0008 - 0x0000)
struct AnimatableWidget_OnEVENT_Show_End_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Show_End_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Show_End_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Show_End_Internal) == 0x000008, "Wrong size on AnimatableWidget_OnEVENT_Show_End_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Show_End_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Show_End_Internal::_self' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Show_Start_Internal
// 0x0008 (0x0008 - 0x0000)
struct AnimatableWidget_OnEVENT_Show_Start_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Show_Start_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Show_Start_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Show_Start_Internal) == 0x000008, "Wrong size on AnimatableWidget_OnEVENT_Show_Start_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Show_Start_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Show_Start_Internal::_self' has a wrong offset!");

// Function BPGLib.AnimatableWidget.OnEVENT_Spotlight_Internal
// 0x0008 (0x0008 - 0x0000)
struct AnimatableWidget_OnEVENT_Spotlight_Internal final
{
public:
	class UAnimatableWidget*                      _self;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_OnEVENT_Spotlight_Internal) == 0x000008, "Wrong alignment on AnimatableWidget_OnEVENT_Spotlight_Internal");
static_assert(sizeof(AnimatableWidget_OnEVENT_Spotlight_Internal) == 0x000008, "Wrong size on AnimatableWidget_OnEVENT_Spotlight_Internal");
static_assert(offsetof(AnimatableWidget_OnEVENT_Spotlight_Internal, _self) == 0x000000, "Member 'AnimatableWidget_OnEVENT_Spotlight_Internal::_self' has a wrong offset!");

// Function BPGLib.AnimatableWidget.Select
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_Select final
{
public:
	bool                                          _select;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_Select) == 0x000001, "Wrong alignment on AnimatableWidget_Select");
static_assert(sizeof(AnimatableWidget_Select) == 0x000001, "Wrong size on AnimatableWidget_Select");
static_assert(offsetof(AnimatableWidget_Select, _select) == 0x000000, "Member 'AnimatableWidget_Select::_select' has a wrong offset!");

// Function BPGLib.AnimatableWidget.SetVisibilityWithAnim
// 0x0002 (0x0002 - 0x0000)
struct AnimatableWidget_SetVisibilityWithAnim final
{
public:
	ESlateVisibility                              _visibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _force_immediately;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_SetVisibilityWithAnim) == 0x000001, "Wrong alignment on AnimatableWidget_SetVisibilityWithAnim");
static_assert(sizeof(AnimatableWidget_SetVisibilityWithAnim) == 0x000002, "Wrong size on AnimatableWidget_SetVisibilityWithAnim");
static_assert(offsetof(AnimatableWidget_SetVisibilityWithAnim, _visibility) == 0x000000, "Member 'AnimatableWidget_SetVisibilityWithAnim::_visibility' has a wrong offset!");
static_assert(offsetof(AnimatableWidget_SetVisibilityWithAnim, _force_immediately) == 0x000001, "Member 'AnimatableWidget_SetVisibilityWithAnim::_force_immediately' has a wrong offset!");

// Function BPGLib.AnimatableWidget.SkipPlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct AnimatableWidget_SkipPlayAnimation final
{
public:
	class FName                                   _anim_name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_SkipPlayAnimation) == 0x000004, "Wrong alignment on AnimatableWidget_SkipPlayAnimation");
static_assert(sizeof(AnimatableWidget_SkipPlayAnimation) == 0x000008, "Wrong size on AnimatableWidget_SkipPlayAnimation");
static_assert(offsetof(AnimatableWidget_SkipPlayAnimation, _anim_name) == 0x000000, "Member 'AnimatableWidget_SkipPlayAnimation::_anim_name' has a wrong offset!");

// Function BPGLib.AnimatableWidget.IsFocused
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_IsFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_IsFocused) == 0x000001, "Wrong alignment on AnimatableWidget_IsFocused");
static_assert(sizeof(AnimatableWidget_IsFocused) == 0x000001, "Wrong size on AnimatableWidget_IsFocused");
static_assert(offsetof(AnimatableWidget_IsFocused, ReturnValue) == 0x000000, "Member 'AnimatableWidget_IsFocused::ReturnValue' has a wrong offset!");

// Function BPGLib.AnimatableWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct AnimatableWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimatableWidget_IsSelected) == 0x000001, "Wrong alignment on AnimatableWidget_IsSelected");
static_assert(sizeof(AnimatableWidget_IsSelected) == 0x000001, "Wrong size on AnimatableWidget_IsSelected");
static_assert(offsetof(AnimatableWidget_IsSelected, ReturnValue) == 0x000000, "Member 'AnimatableWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.GetCurrentMovementSource
// 0x0008 (0x0008 - 0x0000)
struct BPGCharacter_GetCurrentMovementSource final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_GetCurrentMovementSource) == 0x000008, "Wrong alignment on BPGCharacter_GetCurrentMovementSource");
static_assert(sizeof(BPGCharacter_GetCurrentMovementSource) == 0x000008, "Wrong size on BPGCharacter_GetCurrentMovementSource");
static_assert(offsetof(BPGCharacter_GetCurrentMovementSource, ReturnValue) == 0x000000, "Member 'BPGCharacter_GetCurrentMovementSource::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.RPC_C2S_Moves
// 0x0038 (0x0038 - 0x0000)
struct BPGCharacter_RPC_C2S_Moves final
{
public:
	struct FC2SMoves                              _moves;                                            // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_RPC_C2S_Moves) == 0x000008, "Wrong alignment on BPGCharacter_RPC_C2S_Moves");
static_assert(sizeof(BPGCharacter_RPC_C2S_Moves) == 0x000038, "Wrong size on BPGCharacter_RPC_C2S_Moves");
static_assert(offsetof(BPGCharacter_RPC_C2S_Moves, _moves) == 0x000000, "Member 'BPGCharacter_RPC_C2S_Moves::_moves' has a wrong offset!");

// Function BPGLib.BPGCharacter.RPC_S2C_ForcedMoveAck
// 0x0070 (0x0070 - 0x0000)
struct BPGCharacter_RPC_S2C_ForcedMoveAck final
{
public:
	struct FS2CMoveAck                            _ack;                                              // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_RPC_S2C_ForcedMoveAck) == 0x000008, "Wrong alignment on BPGCharacter_RPC_S2C_ForcedMoveAck");
static_assert(sizeof(BPGCharacter_RPC_S2C_ForcedMoveAck) == 0x000070, "Wrong size on BPGCharacter_RPC_S2C_ForcedMoveAck");
static_assert(offsetof(BPGCharacter_RPC_S2C_ForcedMoveAck, _ack) == 0x000000, "Member 'BPGCharacter_RPC_S2C_ForcedMoveAck::_ack' has a wrong offset!");

// Function BPGLib.BPGCharacter.RPC_S2C_MoveAck
// 0x0070 (0x0070 - 0x0000)
struct BPGCharacter_RPC_S2C_MoveAck final
{
public:
	struct FS2CMoveAck                            _ack;                                              // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_RPC_S2C_MoveAck) == 0x000008, "Wrong alignment on BPGCharacter_RPC_S2C_MoveAck");
static_assert(sizeof(BPGCharacter_RPC_S2C_MoveAck) == 0x000070, "Wrong size on BPGCharacter_RPC_S2C_MoveAck");
static_assert(offsetof(BPGCharacter_RPC_S2C_MoveAck, _ack) == 0x000000, "Member 'BPGCharacter_RPC_S2C_MoveAck::_ack' has a wrong offset!");

// Function BPGLib.BPGCharacter.RPC_SERVER_MoveStamp
// 0x00A8 (0x00A8 - 0x0000)
struct BPGCharacter_RPC_SERVER_MoveStamp final
{
public:
	struct FMoveStampC2S                          _move;                                             // 0x0000(0x00A8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_RPC_SERVER_MoveStamp) == 0x000008, "Wrong alignment on BPGCharacter_RPC_SERVER_MoveStamp");
static_assert(sizeof(BPGCharacter_RPC_SERVER_MoveStamp) == 0x0000A8, "Wrong size on BPGCharacter_RPC_SERVER_MoveStamp");
static_assert(offsetof(BPGCharacter_RPC_SERVER_MoveStamp, _move) == 0x000000, "Member 'BPGCharacter_RPC_SERVER_MoveStamp::_move' has a wrong offset!");

// Function BPGLib.BPGCharacter.RPC_SERVER_Request_ChangeSprintState
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_RPC_SERVER_Request_ChangeSprintState final
{
public:
	ESprintState                                  _state;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_RPC_SERVER_Request_ChangeSprintState) == 0x000001, "Wrong alignment on BPGCharacter_RPC_SERVER_Request_ChangeSprintState");
static_assert(sizeof(BPGCharacter_RPC_SERVER_Request_ChangeSprintState) == 0x000001, "Wrong size on BPGCharacter_RPC_SERVER_Request_ChangeSprintState");
static_assert(offsetof(BPGCharacter_RPC_SERVER_Request_ChangeSprintState, _state) == 0x000000, "Member 'BPGCharacter_RPC_SERVER_Request_ChangeSprintState::_state' has a wrong offset!");

// Function BPGLib.BPGCharacter.SetMovementScaler
// 0x0018 (0x0018 - 0x0000)
struct BPGCharacter_SetMovementScaler final
{
public:
	struct FVector                                _scaler;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_SetMovementScaler) == 0x000008, "Wrong alignment on BPGCharacter_SetMovementScaler");
static_assert(sizeof(BPGCharacter_SetMovementScaler) == 0x000018, "Wrong size on BPGCharacter_SetMovementScaler");
static_assert(offsetof(BPGCharacter_SetMovementScaler, _scaler) == 0x000000, "Member 'BPGCharacter_SetMovementScaler::_scaler' has a wrong offset!");

// Function BPGLib.BPGCharacter.SetMovementSource
// 0x0008 (0x0008 - 0x0000)
struct BPGCharacter_SetMovementSource final
{
public:
	class UObject*                                _source;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_SetMovementSource) == 0x000008, "Wrong alignment on BPGCharacter_SetMovementSource");
static_assert(sizeof(BPGCharacter_SetMovementSource) == 0x000008, "Wrong size on BPGCharacter_SetMovementSource");
static_assert(offsetof(BPGCharacter_SetMovementSource, _source) == 0x000000, "Member 'BPGCharacter_SetMovementSource::_source' has a wrong offset!");

// Function BPGLib.BPGCharacter.SetMoveMode
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_SetMoveMode final
{
public:
	EMoveMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_SetMoveMode) == 0x000001, "Wrong alignment on BPGCharacter_SetMoveMode");
static_assert(sizeof(BPGCharacter_SetMoveMode) == 0x000001, "Wrong size on BPGCharacter_SetMoveMode");
static_assert(offsetof(BPGCharacter_SetMoveMode, _mode) == 0x000000, "Member 'BPGCharacter_SetMoveMode::_mode' has a wrong offset!");

// Function BPGLib.BPGCharacter.SetPlayingLocoMotionNode
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_SetPlayingLocoMotionNode final
{
public:
	bool                                          _is_playing;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_SetPlayingLocoMotionNode) == 0x000001, "Wrong alignment on BPGCharacter_SetPlayingLocoMotionNode");
static_assert(sizeof(BPGCharacter_SetPlayingLocoMotionNode) == 0x000001, "Wrong size on BPGCharacter_SetPlayingLocoMotionNode");
static_assert(offsetof(BPGCharacter_SetPlayingLocoMotionNode, _is_playing) == 0x000000, "Member 'BPGCharacter_SetPlayingLocoMotionNode::_is_playing' has a wrong offset!");

// Function BPGLib.BPGCharacter.SetRotationScaler
// 0x0018 (0x0018 - 0x0000)
struct BPGCharacter_SetRotationScaler final
{
public:
	struct FRotator                               _scaler;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_SetRotationScaler) == 0x000008, "Wrong alignment on BPGCharacter_SetRotationScaler");
static_assert(sizeof(BPGCharacter_SetRotationScaler) == 0x000018, "Wrong size on BPGCharacter_SetRotationScaler");
static_assert(offsetof(BPGCharacter_SetRotationScaler, _scaler) == 0x000000, "Member 'BPGCharacter_SetRotationScaler::_scaler' has a wrong offset!");

// Function BPGLib.BPGCharacter.GetMovementScaler
// 0x0018 (0x0018 - 0x0000)
struct BPGCharacter_GetMovementScaler final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_GetMovementScaler) == 0x000008, "Wrong alignment on BPGCharacter_GetMovementScaler");
static_assert(sizeof(BPGCharacter_GetMovementScaler) == 0x000018, "Wrong size on BPGCharacter_GetMovementScaler");
static_assert(offsetof(BPGCharacter_GetMovementScaler, ReturnValue) == 0x000000, "Member 'BPGCharacter_GetMovementScaler::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.GetMoveMode
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_GetMoveMode final
{
public:
	EMoveMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_GetMoveMode) == 0x000001, "Wrong alignment on BPGCharacter_GetMoveMode");
static_assert(sizeof(BPGCharacter_GetMoveMode) == 0x000001, "Wrong size on BPGCharacter_GetMoveMode");
static_assert(offsetof(BPGCharacter_GetMoveMode, ReturnValue) == 0x000000, "Member 'BPGCharacter_GetMoveMode::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.GetRotationScaler
// 0x0018 (0x0018 - 0x0000)
struct BPGCharacter_GetRotationScaler final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_GetRotationScaler) == 0x000008, "Wrong alignment on BPGCharacter_GetRotationScaler");
static_assert(sizeof(BPGCharacter_GetRotationScaler) == 0x000018, "Wrong size on BPGCharacter_GetRotationScaler");
static_assert(offsetof(BPGCharacter_GetRotationScaler, ReturnValue) == 0x000000, "Member 'BPGCharacter_GetRotationScaler::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.IsLocal
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_IsLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_IsLocal) == 0x000001, "Wrong alignment on BPGCharacter_IsLocal");
static_assert(sizeof(BPGCharacter_IsLocal) == 0x000001, "Wrong size on BPGCharacter_IsLocal");
static_assert(offsetof(BPGCharacter_IsLocal, ReturnValue) == 0x000000, "Member 'BPGCharacter_IsLocal::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.IsPlayingLocoMotionNode
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_IsPlayingLocoMotionNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_IsPlayingLocoMotionNode) == 0x000001, "Wrong alignment on BPGCharacter_IsPlayingLocoMotionNode");
static_assert(sizeof(BPGCharacter_IsPlayingLocoMotionNode) == 0x000001, "Wrong size on BPGCharacter_IsPlayingLocoMotionNode");
static_assert(offsetof(BPGCharacter_IsPlayingLocoMotionNode, ReturnValue) == 0x000000, "Member 'BPGCharacter_IsPlayingLocoMotionNode::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.IsRemote
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_IsRemote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_IsRemote) == 0x000001, "Wrong alignment on BPGCharacter_IsRemote");
static_assert(sizeof(BPGCharacter_IsRemote) == 0x000001, "Wrong size on BPGCharacter_IsRemote");
static_assert(offsetof(BPGCharacter_IsRemote, ReturnValue) == 0x000000, "Member 'BPGCharacter_IsRemote::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGCharacter.IsSpectated
// 0x0001 (0x0001 - 0x0000)
struct BPGCharacter_IsSpectated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGCharacter_IsSpectated) == 0x000001, "Wrong alignment on BPGCharacter_IsSpectated");
static_assert(sizeof(BPGCharacter_IsSpectated) == 0x000001, "Wrong size on BPGCharacter_IsSpectated");
static_assert(offsetof(BPGCharacter_IsSpectated, ReturnValue) == 0x000000, "Member 'BPGCharacter_IsSpectated::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGGameInstance.GetVersion
// 0x0010 (0x0010 - 0x0000)
struct BPGGameInstance_GetVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGGameInstance_GetVersion) == 0x000008, "Wrong alignment on BPGGameInstance_GetVersion");
static_assert(sizeof(BPGGameInstance_GetVersion) == 0x000010, "Wrong size on BPGGameInstance_GetVersion");
static_assert(offsetof(BPGGameInstance_GetVersion, ReturnValue) == 0x000000, "Member 'BPGGameInstance_GetVersion::ReturnValue' has a wrong offset!");

// Function BPGLib.GamepadInputReceiver.OnGamepadInput
// 0x0048 (0x0048 - 0x0000)
struct GamepadInputReceiver_OnGamepadInput final
{
public:
	struct FKeyEvent                              _in_key_event;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B75[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GamepadInputReceiver_OnGamepadInput) == 0x000008, "Wrong alignment on GamepadInputReceiver_OnGamepadInput");
static_assert(sizeof(GamepadInputReceiver_OnGamepadInput) == 0x000048, "Wrong size on GamepadInputReceiver_OnGamepadInput");
static_assert(offsetof(GamepadInputReceiver_OnGamepadInput, _in_key_event) == 0x000000, "Member 'GamepadInputReceiver_OnGamepadInput::_in_key_event' has a wrong offset!");
static_assert(offsetof(GamepadInputReceiver_OnGamepadInput, ReturnValue) == 0x000040, "Member 'GamepadInputReceiver_OnGamepadInput::ReturnValue' has a wrong offset!");

// Function BPGLib.GamepadInputReceiver.IsReadyGamepadFocus
// 0x0001 (0x0001 - 0x0000)
struct GamepadInputReceiver_IsReadyGamepadFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamepadInputReceiver_IsReadyGamepadFocus) == 0x000001, "Wrong alignment on GamepadInputReceiver_IsReadyGamepadFocus");
static_assert(sizeof(GamepadInputReceiver_IsReadyGamepadFocus) == 0x000001, "Wrong size on GamepadInputReceiver_IsReadyGamepadFocus");
static_assert(offsetof(GamepadInputReceiver_IsReadyGamepadFocus, ReturnValue) == 0x000000, "Member 'GamepadInputReceiver_IsReadyGamepadFocus::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGInputSubsystem.SetCurrentInputType
// 0x0001 (0x0001 - 0x0000)
struct BPGInputSubsystem_SetCurrentInputType final
{
public:
	EInputMethodType                              _new_input_type;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGInputSubsystem_SetCurrentInputType) == 0x000001, "Wrong alignment on BPGInputSubsystem_SetCurrentInputType");
static_assert(sizeof(BPGInputSubsystem_SetCurrentInputType) == 0x000001, "Wrong size on BPGInputSubsystem_SetCurrentInputType");
static_assert(offsetof(BPGInputSubsystem_SetCurrentInputType, _new_input_type) == 0x000000, "Member 'BPGInputSubsystem_SetCurrentInputType::_new_input_type' has a wrong offset!");

// Function BPGLib.BPGInputSubsystem.GetCurrentInputType
// 0x0001 (0x0001 - 0x0000)
struct BPGInputSubsystem_GetCurrentInputType final
{
public:
	EInputMethodType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGInputSubsystem_GetCurrentInputType) == 0x000001, "Wrong alignment on BPGInputSubsystem_GetCurrentInputType");
static_assert(sizeof(BPGInputSubsystem_GetCurrentInputType) == 0x000001, "Wrong size on BPGInputSubsystem_GetCurrentInputType");
static_assert(offsetof(BPGInputSubsystem_GetCurrentInputType, ReturnValue) == 0x000000, "Member 'BPGInputSubsystem_GetCurrentInputType::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.GetShowSyncError
// 0x0001 (0x0001 - 0x0000)
struct BPGMovementComponent_GetShowSyncError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_GetShowSyncError) == 0x000001, "Wrong alignment on BPGMovementComponent_GetShowSyncError");
static_assert(sizeof(BPGMovementComponent_GetShowSyncError) == 0x000001, "Wrong size on BPGMovementComponent_GetShowSyncError");
static_assert(offsetof(BPGMovementComponent_GetShowSyncError, ReturnValue) == 0x000000, "Member 'BPGMovementComponent_GetShowSyncError::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.SetShowSyncError
// 0x0001 (0x0001 - 0x0000)
struct BPGMovementComponent_SetShowSyncError final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_SetShowSyncError) == 0x000001, "Wrong alignment on BPGMovementComponent_SetShowSyncError");
static_assert(sizeof(BPGMovementComponent_SetShowSyncError) == 0x000001, "Wrong size on BPGMovementComponent_SetShowSyncError");
static_assert(offsetof(BPGMovementComponent_SetShowSyncError, _show) == 0x000000, "Member 'BPGMovementComponent_SetShowSyncError::_show' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.GetDebugInfoString
// 0x0010 (0x0010 - 0x0000)
struct BPGMovementComponent_GetDebugInfoString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_GetDebugInfoString) == 0x000008, "Wrong alignment on BPGMovementComponent_GetDebugInfoString");
static_assert(sizeof(BPGMovementComponent_GetDebugInfoString) == 0x000010, "Wrong size on BPGMovementComponent_GetDebugInfoString");
static_assert(offsetof(BPGMovementComponent_GetDebugInfoString, ReturnValue) == 0x000000, "Member 'BPGMovementComponent_GetDebugInfoString::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct BPGMovementComponent_OnMontageEnded final
{
public:
	class UAnimMontage*                           _montage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _interrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BPGMovementComponent_OnMontageEnded) == 0x000008, "Wrong alignment on BPGMovementComponent_OnMontageEnded");
static_assert(sizeof(BPGMovementComponent_OnMontageEnded) == 0x000010, "Wrong size on BPGMovementComponent_OnMontageEnded");
static_assert(offsetof(BPGMovementComponent_OnMontageEnded, _montage) == 0x000000, "Member 'BPGMovementComponent_OnMontageEnded::_montage' has a wrong offset!");
static_assert(offsetof(BPGMovementComponent_OnMontageEnded, _interrupted) == 0x000008, "Member 'BPGMovementComponent_OnMontageEnded::_interrupted' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct BPGMovementComponent_OnMontageStarted final
{
public:
	class UAnimMontage*                           _montage;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_OnMontageStarted) == 0x000008, "Wrong alignment on BPGMovementComponent_OnMontageStarted");
static_assert(sizeof(BPGMovementComponent_OnMontageStarted) == 0x000008, "Wrong size on BPGMovementComponent_OnMontageStarted");
static_assert(offsetof(BPGMovementComponent_OnMontageStarted, _montage) == 0x000000, "Member 'BPGMovementComponent_OnMontageStarted::_montage' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.SetInitialMoveMode
// 0x0001 (0x0001 - 0x0000)
struct BPGMovementComponent_SetInitialMoveMode final
{
public:
	EMoveMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_SetInitialMoveMode) == 0x000001, "Wrong alignment on BPGMovementComponent_SetInitialMoveMode");
static_assert(sizeof(BPGMovementComponent_SetInitialMoveMode) == 0x000001, "Wrong size on BPGMovementComponent_SetInitialMoveMode");
static_assert(offsetof(BPGMovementComponent_SetInitialMoveMode, _mode) == 0x000000, "Member 'BPGMovementComponent_SetInitialMoveMode::_mode' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.SetMoveMode
// 0x0001 (0x0001 - 0x0000)
struct BPGMovementComponent_SetMoveMode final
{
public:
	EMoveMode                                     _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_SetMoveMode) == 0x000001, "Wrong alignment on BPGMovementComponent_SetMoveMode");
static_assert(sizeof(BPGMovementComponent_SetMoveMode) == 0x000001, "Wrong size on BPGMovementComponent_SetMoveMode");
static_assert(offsetof(BPGMovementComponent_SetMoveMode, _mode) == 0x000000, "Member 'BPGMovementComponent_SetMoveMode::_mode' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.GetInitialMoveMode
// 0x0001 (0x0001 - 0x0000)
struct BPGMovementComponent_GetInitialMoveMode final
{
public:
	EMoveMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_GetInitialMoveMode) == 0x000001, "Wrong alignment on BPGMovementComponent_GetInitialMoveMode");
static_assert(sizeof(BPGMovementComponent_GetInitialMoveMode) == 0x000001, "Wrong size on BPGMovementComponent_GetInitialMoveMode");
static_assert(offsetof(BPGMovementComponent_GetInitialMoveMode, ReturnValue) == 0x000000, "Member 'BPGMovementComponent_GetInitialMoveMode::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGMovementComponent.GetMoveMode
// 0x0001 (0x0001 - 0x0000)
struct BPGMovementComponent_GetMoveMode final
{
public:
	EMoveMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGMovementComponent_GetMoveMode) == 0x000001, "Wrong alignment on BPGMovementComponent_GetMoveMode");
static_assert(sizeof(BPGMovementComponent_GetMoveMode) == 0x000001, "Wrong size on BPGMovementComponent_GetMoveMode");
static_assert(offsetof(BPGMovementComponent_GetMoveMode, ReturnValue) == 0x000000, "Member 'BPGMovementComponent_GetMoveMode::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.ActivateCameraByTag
// 0x0018 (0x0018 - 0x0000)
struct BPGPlayerController_ActivateCameraByTag final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _blending;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      _blend_func;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7F[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_ActivateCameraByTag) == 0x000008, "Wrong alignment on BPGPlayerController_ActivateCameraByTag");
static_assert(sizeof(BPGPlayerController_ActivateCameraByTag) == 0x000018, "Wrong size on BPGPlayerController_ActivateCameraByTag");
static_assert(offsetof(BPGPlayerController_ActivateCameraByTag, _Name) == 0x000000, "Member 'BPGPlayerController_ActivateCameraByTag::_Name' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_ActivateCameraByTag, _blending) == 0x000008, "Member 'BPGPlayerController_ActivateCameraByTag::_blending' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_ActivateCameraByTag, _blend_func) == 0x00000C, "Member 'BPGPlayerController_ActivateCameraByTag::_blend_func' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_ActivateCameraByTag, ReturnValue) == 0x000010, "Member 'BPGPlayerController_ActivateCameraByTag::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.CloseModalWithType
// 0x0008 (0x0008 - 0x0000)
struct BPGPlayerController_CloseModalWithType final
{
public:
	TSubclassOf<class UPopupBase>                 _class_type;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_CloseModalWithType) == 0x000008, "Wrong alignment on BPGPlayerController_CloseModalWithType");
static_assert(sizeof(BPGPlayerController_CloseModalWithType) == 0x000008, "Wrong size on BPGPlayerController_CloseModalWithType");
static_assert(offsetof(BPGPlayerController_CloseModalWithType, _class_type) == 0x000000, "Member 'BPGPlayerController_CloseModalWithType::_class_type' has a wrong offset!");

// Function BPGLib.BPGPlayerController.DoModal
// 0x0020 (0x0020 - 0x0000)
struct BPGPlayerController_DoModal final
{
public:
	class UPopupBase*                             _dlg;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPopupBase>                 _dlg_type;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _open_even_if_same_class;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_registered_background_widgets;               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B80[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_DoModal) == 0x000008, "Wrong alignment on BPGPlayerController_DoModal");
static_assert(sizeof(BPGPlayerController_DoModal) == 0x000020, "Wrong size on BPGPlayerController_DoModal");
static_assert(offsetof(BPGPlayerController_DoModal, _dlg) == 0x000000, "Member 'BPGPlayerController_DoModal::_dlg' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModal, _dlg_type) == 0x000008, "Member 'BPGPlayerController_DoModal::_dlg_type' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModal, _open_even_if_same_class) == 0x000010, "Member 'BPGPlayerController_DoModal::_open_even_if_same_class' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModal, _hide_registered_background_widgets) == 0x000011, "Member 'BPGPlayerController_DoModal::_hide_registered_background_widgets' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModal, ReturnValue) == 0x000018, "Member 'BPGPlayerController_DoModal::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.DoModalEx
// 0x0030 (0x0030 - 0x0000)
struct BPGPlayerController_DoModalEx final
{
public:
	class UPopupBase*                             _dlg;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPopupBase>                 _dlg_type;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _open_even_if_same_class;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_registered_background_widgets;               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B81[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)> _proc;                                             // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B82[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_DoModalEx) == 0x000008, "Wrong alignment on BPGPlayerController_DoModalEx");
static_assert(sizeof(BPGPlayerController_DoModalEx) == 0x000030, "Wrong size on BPGPlayerController_DoModalEx");
static_assert(offsetof(BPGPlayerController_DoModalEx, _dlg) == 0x000000, "Member 'BPGPlayerController_DoModalEx::_dlg' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModalEx, _dlg_type) == 0x000008, "Member 'BPGPlayerController_DoModalEx::_dlg_type' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModalEx, _open_even_if_same_class) == 0x000010, "Member 'BPGPlayerController_DoModalEx::_open_even_if_same_class' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModalEx, _hide_registered_background_widgets) == 0x000011, "Member 'BPGPlayerController_DoModalEx::_hide_registered_background_widgets' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModalEx, _proc) == 0x000014, "Member 'BPGPlayerController_DoModalEx::_proc' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_DoModalEx, ReturnValue) == 0x000028, "Member 'BPGPlayerController_DoModalEx::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.GetInputModeEx
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_GetInputModeEx final
{
public:
	EInputMode                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_GetInputModeEx) == 0x000001, "Wrong alignment on BPGPlayerController_GetInputModeEx");
static_assert(sizeof(BPGPlayerController_GetInputModeEx) == 0x000001, "Wrong size on BPGPlayerController_GetInputModeEx");
static_assert(offsetof(BPGPlayerController_GetInputModeEx, ReturnValue) == 0x000000, "Member 'BPGPlayerController_GetInputModeEx::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.OnChangeWaiting
// 0x0002 (0x0002 - 0x0000)
struct BPGPlayerController_OnChangeWaiting final
{
public:
	EWaitingType                                  _waiting_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_OnChangeWaiting) == 0x000001, "Wrong alignment on BPGPlayerController_OnChangeWaiting");
static_assert(sizeof(BPGPlayerController_OnChangeWaiting) == 0x000002, "Wrong size on BPGPlayerController_OnChangeWaiting");
static_assert(offsetof(BPGPlayerController_OnChangeWaiting, _waiting_type) == 0x000000, "Member 'BPGPlayerController_OnChangeWaiting::_waiting_type' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_OnChangeWaiting, ReturnValue) == 0x000001, "Member 'BPGPlayerController_OnChangeWaiting::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.OnCloseWindow
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_OnCloseWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_OnCloseWindow) == 0x000001, "Wrong alignment on BPGPlayerController_OnCloseWindow");
static_assert(sizeof(BPGPlayerController_OnCloseWindow) == 0x000001, "Wrong size on BPGPlayerController_OnCloseWindow");
static_assert(offsetof(BPGPlayerController_OnCloseWindow, ReturnValue) == 0x000000, "Member 'BPGPlayerController_OnCloseWindow::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.OnDEBUG_ToggleUI
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_OnDEBUG_ToggleUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_OnDEBUG_ToggleUI) == 0x000001, "Wrong alignment on BPGPlayerController_OnDEBUG_ToggleUI");
static_assert(sizeof(BPGPlayerController_OnDEBUG_ToggleUI) == 0x000001, "Wrong size on BPGPlayerController_OnDEBUG_ToggleUI");
static_assert(offsetof(BPGPlayerController_OnDEBUG_ToggleUI, ReturnValue) == 0x000000, "Member 'BPGPlayerController_OnDEBUG_ToggleUI::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.RegisterBackgroundWidget
// 0x0008 (0x0008 - 0x0000)
struct BPGPlayerController_RegisterBackgroundWidget final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_RegisterBackgroundWidget) == 0x000008, "Wrong alignment on BPGPlayerController_RegisterBackgroundWidget");
static_assert(sizeof(BPGPlayerController_RegisterBackgroundWidget) == 0x000008, "Wrong size on BPGPlayerController_RegisterBackgroundWidget");
static_assert(offsetof(BPGPlayerController_RegisterBackgroundWidget, _widget) == 0x000000, "Member 'BPGPlayerController_RegisterBackgroundWidget::_widget' has a wrong offset!");

// Function BPGLib.BPGPlayerController.RPC_CLIENT_ExecCommand
// 0x0010 (0x0010 - 0x0000)
struct BPGPlayerController_RPC_CLIENT_ExecCommand final
{
public:
	class FString                                 _command;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_RPC_CLIENT_ExecCommand) == 0x000008, "Wrong alignment on BPGPlayerController_RPC_CLIENT_ExecCommand");
static_assert(sizeof(BPGPlayerController_RPC_CLIENT_ExecCommand) == 0x000010, "Wrong size on BPGPlayerController_RPC_CLIENT_ExecCommand");
static_assert(offsetof(BPGPlayerController_RPC_CLIENT_ExecCommand, _command) == 0x000000, "Member 'BPGPlayerController_RPC_CLIENT_ExecCommand::_command' has a wrong offset!");

// Function BPGLib.BPGPlayerController.RPC_SERVER_RequestCommand
// 0x0010 (0x0010 - 0x0000)
struct BPGPlayerController_RPC_SERVER_RequestCommand final
{
public:
	class FString                                 _command;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_RPC_SERVER_RequestCommand) == 0x000008, "Wrong alignment on BPGPlayerController_RPC_SERVER_RequestCommand");
static_assert(sizeof(BPGPlayerController_RPC_SERVER_RequestCommand) == 0x000010, "Wrong size on BPGPlayerController_RPC_SERVER_RequestCommand");
static_assert(offsetof(BPGPlayerController_RPC_SERVER_RequestCommand, _command) == 0x000000, "Member 'BPGPlayerController_RPC_SERVER_RequestCommand::_command' has a wrong offset!");

// Function BPGLib.BPGPlayerController.SetInputModeEx
// 0x0010 (0x0010 - 0x0000)
struct BPGPlayerController_SetInputModeEx final
{
public:
	EInputMode                                    _mode;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B83[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UWidget*                                Focus_widget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_SetInputModeEx) == 0x000008, "Wrong alignment on BPGPlayerController_SetInputModeEx");
static_assert(sizeof(BPGPlayerController_SetInputModeEx) == 0x000010, "Wrong size on BPGPlayerController_SetInputModeEx");
static_assert(offsetof(BPGPlayerController_SetInputModeEx, _mode) == 0x000000, "Member 'BPGPlayerController_SetInputModeEx::_mode' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_SetInputModeEx, Focus_widget) == 0x000008, "Member 'BPGPlayerController_SetInputModeEx::Focus_widget' has a wrong offset!");

// Function BPGLib.BPGPlayerController.SetUseStartFadeIn
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_SetUseStartFadeIn final
{
public:
	bool                                          _use_start_fade_in;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_SetUseStartFadeIn) == 0x000001, "Wrong alignment on BPGPlayerController_SetUseStartFadeIn");
static_assert(sizeof(BPGPlayerController_SetUseStartFadeIn) == 0x000001, "Wrong size on BPGPlayerController_SetUseStartFadeIn");
static_assert(offsetof(BPGPlayerController_SetUseStartFadeIn, _use_start_fade_in) == 0x000000, "Member 'BPGPlayerController_SetUseStartFadeIn::_use_start_fade_in' has a wrong offset!");

// Function BPGLib.BPGPlayerController.SetWaiting
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_SetWaiting final
{
public:
	EWaitingType                                  _waiting_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_SetWaiting) == 0x000001, "Wrong alignment on BPGPlayerController_SetWaiting");
static_assert(sizeof(BPGPlayerController_SetWaiting) == 0x000001, "Wrong size on BPGPlayerController_SetWaiting");
static_assert(offsetof(BPGPlayerController_SetWaiting, _waiting_type) == 0x000000, "Member 'BPGPlayerController_SetWaiting::_waiting_type' has a wrong offset!");

// Function BPGLib.BPGPlayerController.StartFadeIn
// 0x0004 (0x0004 - 0x0000)
struct BPGPlayerController_StartFadeIn final
{
public:
	float                                         _duration;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_StartFadeIn) == 0x000004, "Wrong alignment on BPGPlayerController_StartFadeIn");
static_assert(sizeof(BPGPlayerController_StartFadeIn) == 0x000004, "Wrong size on BPGPlayerController_StartFadeIn");
static_assert(offsetof(BPGPlayerController_StartFadeIn, _duration) == 0x000000, "Member 'BPGPlayerController_StartFadeIn::_duration' has a wrong offset!");

// Function BPGLib.BPGPlayerController.StartFadeOut
// 0x0004 (0x0004 - 0x0000)
struct BPGPlayerController_StartFadeOut final
{
public:
	float                                         _duration;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_StartFadeOut) == 0x000004, "Wrong alignment on BPGPlayerController_StartFadeOut");
static_assert(sizeof(BPGPlayerController_StartFadeOut) == 0x000004, "Wrong size on BPGPlayerController_StartFadeOut");
static_assert(offsetof(BPGPlayerController_StartFadeOut, _duration) == 0x000000, "Member 'BPGPlayerController_StartFadeOut::_duration' has a wrong offset!");

// Function BPGLib.BPGPlayerController.UnregisterBackgroundWidget
// 0x0008 (0x0008 - 0x0000)
struct BPGPlayerController_UnregisterBackgroundWidget final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_UnregisterBackgroundWidget) == 0x000008, "Wrong alignment on BPGPlayerController_UnregisterBackgroundWidget");
static_assert(sizeof(BPGPlayerController_UnregisterBackgroundWidget) == 0x000008, "Wrong size on BPGPlayerController_UnregisterBackgroundWidget");
static_assert(offsetof(BPGPlayerController_UnregisterBackgroundWidget, _widget) == 0x000000, "Member 'BPGPlayerController_UnregisterBackgroundWidget::_widget' has a wrong offset!");

// Function BPGLib.BPGPlayerController.GetFadeStatus
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_GetFadeStatus final
{
public:
	EFadeStatus                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_GetFadeStatus) == 0x000001, "Wrong alignment on BPGPlayerController_GetFadeStatus");
static_assert(sizeof(BPGPlayerController_GetFadeStatus) == 0x000001, "Wrong size on BPGPlayerController_GetFadeStatus");
static_assert(offsetof(BPGPlayerController_GetFadeStatus, ReturnValue) == 0x000000, "Member 'BPGPlayerController_GetFadeStatus::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.GetFPS
// 0x0004 (0x0004 - 0x0000)
struct BPGPlayerController_GetFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_GetFPS) == 0x000004, "Wrong alignment on BPGPlayerController_GetFPS");
static_assert(sizeof(BPGPlayerController_GetFPS) == 0x000004, "Wrong size on BPGPlayerController_GetFPS");
static_assert(offsetof(BPGPlayerController_GetFPS, ReturnValue) == 0x000000, "Member 'BPGPlayerController_GetFPS::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.GetTopPopup
// 0x0008 (0x0008 - 0x0000)
struct BPGPlayerController_GetTopPopup final
{
public:
	class UPopupBase*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_GetTopPopup) == 0x000008, "Wrong alignment on BPGPlayerController_GetTopPopup");
static_assert(sizeof(BPGPlayerController_GetTopPopup) == 0x000008, "Wrong size on BPGPlayerController_GetTopPopup");
static_assert(offsetof(BPGPlayerController_GetTopPopup, ReturnValue) == 0x000000, "Member 'BPGPlayerController_GetTopPopup::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.IsAnyPopupOpened
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_IsAnyPopupOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_IsAnyPopupOpened) == 0x000001, "Wrong alignment on BPGPlayerController_IsAnyPopupOpened");
static_assert(sizeof(BPGPlayerController_IsAnyPopupOpened) == 0x000001, "Wrong size on BPGPlayerController_IsAnyPopupOpened");
static_assert(offsetof(BPGPlayerController_IsAnyPopupOpened, ReturnValue) == 0x000000, "Member 'BPGPlayerController_IsAnyPopupOpened::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.IsPopupOpened
// 0x000C (0x000C - 0x0000)
struct BPGPlayerController_IsPopupOpened final
{
public:
	class FName                                   _popup_id;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B84[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(BPGPlayerController_IsPopupOpened) == 0x000004, "Wrong alignment on BPGPlayerController_IsPopupOpened");
static_assert(sizeof(BPGPlayerController_IsPopupOpened) == 0x00000C, "Wrong size on BPGPlayerController_IsPopupOpened");
static_assert(offsetof(BPGPlayerController_IsPopupOpened, _popup_id) == 0x000000, "Member 'BPGPlayerController_IsPopupOpened::_popup_id' has a wrong offset!");
static_assert(offsetof(BPGPlayerController_IsPopupOpened, ReturnValue) == 0x000008, "Member 'BPGPlayerController_IsPopupOpened::ReturnValue' has a wrong offset!");

// Function BPGLib.BPGPlayerController.IsSpectating
// 0x0001 (0x0001 - 0x0000)
struct BPGPlayerController_IsSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPGPlayerController_IsSpectating) == 0x000001, "Wrong alignment on BPGPlayerController_IsSpectating");
static_assert(sizeof(BPGPlayerController_IsSpectating) == 0x000001, "Wrong size on BPGPlayerController_IsSpectating");
static_assert(offsetof(BPGPlayerController_IsSpectating, ReturnValue) == 0x000000, "Member 'BPGPlayerController_IsSpectating::ReturnValue' has a wrong offset!");

// Function BPGLib.EnumComboButton.SelectEnumValue
// 0x0004 (0x0004 - 0x0000)
struct EnumComboButton_SelectEnumValue final
{
public:
	int32                                         _value;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumComboButton_SelectEnumValue) == 0x000004, "Wrong alignment on EnumComboButton_SelectEnumValue");
static_assert(sizeof(EnumComboButton_SelectEnumValue) == 0x000004, "Wrong size on EnumComboButton_SelectEnumValue");
static_assert(offsetof(EnumComboButton_SelectEnumValue, _value) == 0x000000, "Member 'EnumComboButton_SelectEnumValue::_value' has a wrong offset!");

// Function BPGLib.EnumComboButton.GetEnumClass
// 0x0008 (0x0008 - 0x0000)
struct EnumComboButton_GetEnumClass final
{
public:
	const class UEnum*                            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnumComboButton_GetEnumClass) == 0x000008, "Wrong alignment on EnumComboButton_GetEnumClass");
static_assert(sizeof(EnumComboButton_GetEnumClass) == 0x000008, "Wrong size on EnumComboButton_GetEnumClass");
static_assert(offsetof(EnumComboButton_GetEnumClass, ReturnValue) == 0x000000, "Member 'EnumComboButton_GetEnumClass::ReturnValue' has a wrong offset!");

// Function BPGLib.FollowCameraActor.AddDistance
// 0x0004 (0x0004 - 0x0000)
struct FollowCameraActor_AddDistance final
{
public:
	float                                         _dist;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowCameraActor_AddDistance) == 0x000004, "Wrong alignment on FollowCameraActor_AddDistance");
static_assert(sizeof(FollowCameraActor_AddDistance) == 0x000004, "Wrong size on FollowCameraActor_AddDistance");
static_assert(offsetof(FollowCameraActor_AddDistance, _dist) == 0x000000, "Member 'FollowCameraActor_AddDistance::_dist' has a wrong offset!");

// Function BPGLib.FollowCameraActor.HasTargetActor
// 0x0001 (0x0001 - 0x0000)
struct FollowCameraActor_HasTargetActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowCameraActor_HasTargetActor) == 0x000001, "Wrong alignment on FollowCameraActor_HasTargetActor");
static_assert(sizeof(FollowCameraActor_HasTargetActor) == 0x000001, "Wrong size on FollowCameraActor_HasTargetActor");
static_assert(offsetof(FollowCameraActor_HasTargetActor, ReturnValue) == 0x000000, "Member 'FollowCameraActor_HasTargetActor::ReturnValue' has a wrong offset!");

// Function BPGLib.FollowCameraActor.SetOriginRotator
// 0x0018 (0x0018 - 0x0000)
struct FollowCameraActor_SetOriginRotator final
{
public:
	struct FRotator                               _rotator;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowCameraActor_SetOriginRotator) == 0x000008, "Wrong alignment on FollowCameraActor_SetOriginRotator");
static_assert(sizeof(FollowCameraActor_SetOriginRotator) == 0x000018, "Wrong size on FollowCameraActor_SetOriginRotator");
static_assert(offsetof(FollowCameraActor_SetOriginRotator, _rotator) == 0x000000, "Member 'FollowCameraActor_SetOriginRotator::_rotator' has a wrong offset!");

// Function BPGLib.FollowCameraActor.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct FollowCameraActor_SetTargetActor final
{
public:
	class AActor*                                 _target;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowCameraActor_SetTargetActor) == 0x000008, "Wrong alignment on FollowCameraActor_SetTargetActor");
static_assert(sizeof(FollowCameraActor_SetTargetActor) == 0x000008, "Wrong size on FollowCameraActor_SetTargetActor");
static_assert(offsetof(FollowCameraActor_SetTargetActor, _target) == 0x000000, "Member 'FollowCameraActor_SetTargetActor::_target' has a wrong offset!");

// Function BPGLib.FollowCameraActor.GetTargetDistance
// 0x0004 (0x0004 - 0x0000)
struct FollowCameraActor_GetTargetDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowCameraActor_GetTargetDistance) == 0x000004, "Wrong alignment on FollowCameraActor_GetTargetDistance");
static_assert(sizeof(FollowCameraActor_GetTargetDistance) == 0x000004, "Wrong size on FollowCameraActor_GetTargetDistance");
static_assert(offsetof(FollowCameraActor_GetTargetDistance, ReturnValue) == 0x000000, "Member 'FollowCameraActor_GetTargetDistance::ReturnValue' has a wrong offset!");

// Function BPGLib.FollowCameraActor.GetTargetTransform
// 0x0060 (0x0060 - 0x0000)
struct FollowCameraActor_GetTargetTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FollowCameraActor_GetTargetTransform) == 0x000010, "Wrong alignment on FollowCameraActor_GetTargetTransform");
static_assert(sizeof(FollowCameraActor_GetTargetTransform) == 0x000060, "Wrong size on FollowCameraActor_GetTargetTransform");
static_assert(offsetof(FollowCameraActor_GetTargetTransform, ReturnValue) == 0x000000, "Member 'FollowCameraActor_GetTargetTransform::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetAllMonitors
// 0x0010 (0x0010 - 0x0000)
struct GfxOption_GetAllMonitors final
{
public:
	TArray<struct FMonitor>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetAllMonitors) == 0x000008, "Wrong alignment on GfxOption_GetAllMonitors");
static_assert(sizeof(GfxOption_GetAllMonitors) == 0x000010, "Wrong size on GfxOption_GetAllMonitors");
static_assert(offsetof(GfxOption_GetAllMonitors, ReturnValue) == 0x000000, "Member 'GfxOption_GetAllMonitors::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetAllResolutions
// 0x0020 (0x0020 - 0x0000)
struct GfxOption_GetAllResolutions final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   _window_type;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B90[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FVideoMode>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetAllResolutions) == 0x000008, "Wrong alignment on GfxOption_GetAllResolutions");
static_assert(sizeof(GfxOption_GetAllResolutions) == 0x000020, "Wrong size on GfxOption_GetAllResolutions");
static_assert(offsetof(GfxOption_GetAllResolutions, _world_ctx) == 0x000000, "Member 'GfxOption_GetAllResolutions::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetAllResolutions, _window_type) == 0x000008, "Member 'GfxOption_GetAllResolutions::_window_type' has a wrong offset!");
static_assert(offsetof(GfxOption_GetAllResolutions, ReturnValue) == 0x000010, "Member 'GfxOption_GetAllResolutions::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetCurrentMonitor
// 0x0028 (0x0028 - 0x0000)
struct GfxOption_GetCurrentMonitor final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMonitor                               ReturnValue;                                       // 0x0008(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B91[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GfxOption_GetCurrentMonitor) == 0x000008, "Wrong alignment on GfxOption_GetCurrentMonitor");
static_assert(sizeof(GfxOption_GetCurrentMonitor) == 0x000028, "Wrong size on GfxOption_GetCurrentMonitor");
static_assert(offsetof(GfxOption_GetCurrentMonitor, _world_ctx) == 0x000000, "Member 'GfxOption_GetCurrentMonitor::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetCurrentMonitor, ReturnValue) == 0x000008, "Member 'GfxOption_GetCurrentMonitor::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetCurrentMonitorIndex
// 0x0010 (0x0010 - 0x0000)
struct GfxOption_GetCurrentMonitorIndex final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B92[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(GfxOption_GetCurrentMonitorIndex) == 0x000008, "Wrong alignment on GfxOption_GetCurrentMonitorIndex");
static_assert(sizeof(GfxOption_GetCurrentMonitorIndex) == 0x000010, "Wrong size on GfxOption_GetCurrentMonitorIndex");
static_assert(offsetof(GfxOption_GetCurrentMonitorIndex, _world_ctx) == 0x000000, "Member 'GfxOption_GetCurrentMonitorIndex::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetCurrentMonitorIndex, ReturnValue) == 0x000008, "Member 'GfxOption_GetCurrentMonitorIndex::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetFullscreenResolutions
// 0x0018 (0x0018 - 0x0000)
struct GfxOption_GetFullscreenResolutions final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVideoMode>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetFullscreenResolutions) == 0x000008, "Wrong alignment on GfxOption_GetFullscreenResolutions");
static_assert(sizeof(GfxOption_GetFullscreenResolutions) == 0x000018, "Wrong size on GfxOption_GetFullscreenResolutions");
static_assert(offsetof(GfxOption_GetFullscreenResolutions, _world_ctx) == 0x000000, "Member 'GfxOption_GetFullscreenResolutions::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetFullscreenResolutions, ReturnValue) == 0x000008, "Member 'GfxOption_GetFullscreenResolutions::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetGameResolution
// 0x0010 (0x0010 - 0x0000)
struct GfxOption_GetGameResolution final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetGameResolution) == 0x000008, "Wrong alignment on GfxOption_GetGameResolution");
static_assert(sizeof(GfxOption_GetGameResolution) == 0x000010, "Wrong size on GfxOption_GetGameResolution");
static_assert(offsetof(GfxOption_GetGameResolution, _world_ctx) == 0x000000, "Member 'GfxOption_GetGameResolution::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetGameResolution, ReturnValue) == 0x000008, "Member 'GfxOption_GetGameResolution::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetGameViewportSize
// 0x0010 (0x0010 - 0x0000)
struct GfxOption_GetGameViewportSize final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetGameViewportSize) == 0x000008, "Wrong alignment on GfxOption_GetGameViewportSize");
static_assert(sizeof(GfxOption_GetGameViewportSize) == 0x000010, "Wrong size on GfxOption_GetGameViewportSize");
static_assert(offsetof(GfxOption_GetGameViewportSize, _world_ctx) == 0x000000, "Member 'GfxOption_GetGameViewportSize::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetGameViewportSize, ReturnValue) == 0x000008, "Member 'GfxOption_GetGameViewportSize::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetUserSettings
// 0x0010 (0x0010 - 0x0000)
struct GfxOption_GetUserSettings final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameUserSettings*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetUserSettings) == 0x000008, "Wrong alignment on GfxOption_GetUserSettings");
static_assert(sizeof(GfxOption_GetUserSettings) == 0x000010, "Wrong size on GfxOption_GetUserSettings");
static_assert(offsetof(GfxOption_GetUserSettings, _world_ctx) == 0x000000, "Member 'GfxOption_GetUserSettings::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetUserSettings, ReturnValue) == 0x000008, "Member 'GfxOption_GetUserSettings::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.GetWindowedResolutions
// 0x0018 (0x0018 - 0x0000)
struct GfxOption_GetWindowedResolutions final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVideoMode>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_GetWindowedResolutions) == 0x000008, "Wrong alignment on GfxOption_GetWindowedResolutions");
static_assert(sizeof(GfxOption_GetWindowedResolutions) == 0x000018, "Wrong size on GfxOption_GetWindowedResolutions");
static_assert(offsetof(GfxOption_GetWindowedResolutions, _world_ctx) == 0x000000, "Member 'GfxOption_GetWindowedResolutions::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_GetWindowedResolutions, ReturnValue) == 0x000008, "Member 'GfxOption_GetWindowedResolutions::ReturnValue' has a wrong offset!");

// Function BPGLib.GfxOption.ResolveSupportedResolution
// 0x0018 (0x0018 - 0x0000)
struct GfxOption_ResolveSupportedResolution final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _width;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _height;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GfxOption_ResolveSupportedResolution) == 0x000008, "Wrong alignment on GfxOption_ResolveSupportedResolution");
static_assert(sizeof(GfxOption_ResolveSupportedResolution) == 0x000018, "Wrong size on GfxOption_ResolveSupportedResolution");
static_assert(offsetof(GfxOption_ResolveSupportedResolution, _world_ctx) == 0x000000, "Member 'GfxOption_ResolveSupportedResolution::_world_ctx' has a wrong offset!");
static_assert(offsetof(GfxOption_ResolveSupportedResolution, _width) == 0x000008, "Member 'GfxOption_ResolveSupportedResolution::_width' has a wrong offset!");
static_assert(offsetof(GfxOption_ResolveSupportedResolution, _height) == 0x00000C, "Member 'GfxOption_ResolveSupportedResolution::_height' has a wrong offset!");
static_assert(offsetof(GfxOption_ResolveSupportedResolution, ReturnValue) == 0x000010, "Member 'GfxOption_ResolveSupportedResolution::ReturnValue' has a wrong offset!");

// Function BPGLib.Indicateable.GetIndicatorPosComponent
// 0x0008 (0x0008 - 0x0000)
struct Indicateable_GetIndicatorPosComponent final
{
public:
	class UIndicatorPosComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Indicateable_GetIndicatorPosComponent) == 0x000008, "Wrong alignment on Indicateable_GetIndicatorPosComponent");
static_assert(sizeof(Indicateable_GetIndicatorPosComponent) == 0x000008, "Wrong size on Indicateable_GetIndicatorPosComponent");
static_assert(offsetof(Indicateable_GetIndicatorPosComponent, ReturnValue) == 0x000000, "Member 'Indicateable_GetIndicatorPosComponent::ReturnValue' has a wrong offset!");

// Function BPGLib.Indicateable.OnQueryAddEvent
// 0x0002 (0x0002 - 0x0000)
struct Indicateable_OnQueryAddEvent final
{
public:
	EIndicatorType                                _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _param;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Indicateable_OnQueryAddEvent) == 0x000001, "Wrong alignment on Indicateable_OnQueryAddEvent");
static_assert(sizeof(Indicateable_OnQueryAddEvent) == 0x000002, "Wrong size on Indicateable_OnQueryAddEvent");
static_assert(offsetof(Indicateable_OnQueryAddEvent, _type) == 0x000000, "Member 'Indicateable_OnQueryAddEvent::_type' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryAddEvent, _param) == 0x000001, "Member 'Indicateable_OnQueryAddEvent::_param' has a wrong offset!");

// Function BPGLib.Indicateable.OnQueryAddIndiactor
// 0x0040 (0x0040 - 0x0000)
struct Indicateable_OnQueryAddIndiactor final
{
public:
	class ABPGPlayerController*                   Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorType                                _type;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B93[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FIndicatorData                         _out_detail;                                       // 0x0010(0x0028)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B94[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Indicateable_OnQueryAddIndiactor) == 0x000008, "Wrong alignment on Indicateable_OnQueryAddIndiactor");
static_assert(sizeof(Indicateable_OnQueryAddIndiactor) == 0x000040, "Wrong size on Indicateable_OnQueryAddIndiactor");
static_assert(offsetof(Indicateable_OnQueryAddIndiactor, Controller) == 0x000000, "Member 'Indicateable_OnQueryAddIndiactor::Controller' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryAddIndiactor, _type) == 0x000008, "Member 'Indicateable_OnQueryAddIndiactor::_type' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryAddIndiactor, _out_detail) == 0x000010, "Member 'Indicateable_OnQueryAddIndiactor::_out_detail' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryAddIndiactor, ReturnValue) == 0x000038, "Member 'Indicateable_OnQueryAddIndiactor::ReturnValue' has a wrong offset!");

// Function BPGLib.Indicateable.OnQueryGetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct Indicateable_OnQueryGetDisplayName final
{
public:
	EIndicatorType                                _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B95[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Indicateable_OnQueryGetDisplayName) == 0x000008, "Wrong alignment on Indicateable_OnQueryGetDisplayName");
static_assert(sizeof(Indicateable_OnQueryGetDisplayName) == 0x000020, "Wrong size on Indicateable_OnQueryGetDisplayName");
static_assert(offsetof(Indicateable_OnQueryGetDisplayName, _type) == 0x000000, "Member 'Indicateable_OnQueryGetDisplayName::_type' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryGetDisplayName, ReturnValue) == 0x000008, "Member 'Indicateable_OnQueryGetDisplayName::ReturnValue' has a wrong offset!");

// Function BPGLib.Indicateable.OnQueryVisibility
// 0x0002 (0x0002 - 0x0000)
struct Indicateable_OnQueryVisibility final
{
public:
	EIndicatorType                                _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Indicateable_OnQueryVisibility) == 0x000001, "Wrong alignment on Indicateable_OnQueryVisibility");
static_assert(sizeof(Indicateable_OnQueryVisibility) == 0x000002, "Wrong size on Indicateable_OnQueryVisibility");
static_assert(offsetof(Indicateable_OnQueryVisibility, _type) == 0x000000, "Member 'Indicateable_OnQueryVisibility::_type' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryVisibility, ReturnValue) == 0x000001, "Member 'Indicateable_OnQueryVisibility::ReturnValue' has a wrong offset!");

// Function BPGLib.Indicateable.OnQueryWorldTransform
// 0x0070 (0x0070 - 0x0000)
struct Indicateable_OnQueryWorldTransform final
{
public:
	EIndicatorType                                _type;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B96[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Indicateable_OnQueryWorldTransform) == 0x000010, "Wrong alignment on Indicateable_OnQueryWorldTransform");
static_assert(sizeof(Indicateable_OnQueryWorldTransform) == 0x000070, "Wrong size on Indicateable_OnQueryWorldTransform");
static_assert(offsetof(Indicateable_OnQueryWorldTransform, _type) == 0x000000, "Member 'Indicateable_OnQueryWorldTransform::_type' has a wrong offset!");
static_assert(offsetof(Indicateable_OnQueryWorldTransform, ReturnValue) == 0x000010, "Member 'Indicateable_OnQueryWorldTransform::ReturnValue' has a wrong offset!");

// Function BPGLib.PreviewableWidget.FindWidgetByUIID
// 0x0010 (0x0010 - 0x0000)
struct PreviewableWidget_FindWidgetByUIID final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPreviewableWidget*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreviewableWidget_FindWidgetByUIID) == 0x000008, "Wrong alignment on PreviewableWidget_FindWidgetByUIID");
static_assert(sizeof(PreviewableWidget_FindWidgetByUIID) == 0x000010, "Wrong size on PreviewableWidget_FindWidgetByUIID");
static_assert(offsetof(PreviewableWidget_FindWidgetByUIID, _id) == 0x000000, "Member 'PreviewableWidget_FindWidgetByUIID::_id' has a wrong offset!");
static_assert(offsetof(PreviewableWidget_FindWidgetByUIID, ReturnValue) == 0x000008, "Member 'PreviewableWidget_FindWidgetByUIID::ReturnValue' has a wrong offset!");

// Function BPGLib.PreviewableWidget.OnSynchronizeProperties
// 0x0001 (0x0001 - 0x0000)
struct PreviewableWidget_OnSynchronizeProperties final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreviewableWidget_OnSynchronizeProperties) == 0x000001, "Wrong alignment on PreviewableWidget_OnSynchronizeProperties");
static_assert(sizeof(PreviewableWidget_OnSynchronizeProperties) == 0x000001, "Wrong size on PreviewableWidget_OnSynchronizeProperties");
static_assert(offsetof(PreviewableWidget_OnSynchronizeProperties, ReturnValue) == 0x000000, "Member 'PreviewableWidget_OnSynchronizeProperties::ReturnValue' has a wrong offset!");

// Function BPGLib.PreviewableWidget.SetUIID
// 0x0008 (0x0008 - 0x0000)
struct PreviewableWidget_SetUIID final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreviewableWidget_SetUIID) == 0x000004, "Wrong alignment on PreviewableWidget_SetUIID");
static_assert(sizeof(PreviewableWidget_SetUIID) == 0x000008, "Wrong size on PreviewableWidget_SetUIID");
static_assert(offsetof(PreviewableWidget_SetUIID, _id) == 0x000000, "Member 'PreviewableWidget_SetUIID::_id' has a wrong offset!");

// Function BPGLib.IndicatorBaseWidget.OnShow
// 0x0001 (0x0001 - 0x0000)
struct IndicatorBaseWidget_OnShow final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorBaseWidget_OnShow) == 0x000001, "Wrong alignment on IndicatorBaseWidget_OnShow");
static_assert(sizeof(IndicatorBaseWidget_OnShow) == 0x000001, "Wrong size on IndicatorBaseWidget_OnShow");
static_assert(offsetof(IndicatorBaseWidget_OnShow, _show) == 0x000000, "Member 'IndicatorBaseWidget_OnShow::_show' has a wrong offset!");

// Function BPGLib.IndicatorBaseWidget.OnUpdateLocation
// 0x0008 (0x0008 - 0x0000)
struct IndicatorBaseWidget_OnUpdateLocation final
{
public:
	bool                                          _is_clipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _angle;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorBaseWidget_OnUpdateLocation) == 0x000004, "Wrong alignment on IndicatorBaseWidget_OnUpdateLocation");
static_assert(sizeof(IndicatorBaseWidget_OnUpdateLocation) == 0x000008, "Wrong size on IndicatorBaseWidget_OnUpdateLocation");
static_assert(offsetof(IndicatorBaseWidget_OnUpdateLocation, _is_clipped) == 0x000000, "Member 'IndicatorBaseWidget_OnUpdateLocation::_is_clipped' has a wrong offset!");
static_assert(offsetof(IndicatorBaseWidget_OnUpdateLocation, _angle) == 0x000004, "Member 'IndicatorBaseWidget_OnUpdateLocation::_angle' has a wrong offset!");

// Function BPGLib.IndicatorBaseWidget.GetIndicatorType
// 0x0001 (0x0001 - 0x0000)
struct IndicatorBaseWidget_GetIndicatorType final
{
public:
	EIndicatorType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorBaseWidget_GetIndicatorType) == 0x000001, "Wrong alignment on IndicatorBaseWidget_GetIndicatorType");
static_assert(sizeof(IndicatorBaseWidget_GetIndicatorType) == 0x000001, "Wrong size on IndicatorBaseWidget_GetIndicatorType");
static_assert(offsetof(IndicatorBaseWidget_GetIndicatorType, ReturnValue) == 0x000000, "Member 'IndicatorBaseWidget_GetIndicatorType::ReturnValue' has a wrong offset!");

// Function BPGLib.IndicatorBaseWidget.GetIsInViewport
// 0x0001 (0x0001 - 0x0000)
struct IndicatorBaseWidget_GetIsInViewport final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorBaseWidget_GetIsInViewport) == 0x000001, "Wrong alignment on IndicatorBaseWidget_GetIsInViewport");
static_assert(sizeof(IndicatorBaseWidget_GetIsInViewport) == 0x000001, "Wrong size on IndicatorBaseWidget_GetIsInViewport");
static_assert(offsetof(IndicatorBaseWidget_GetIsInViewport, ReturnValue) == 0x000000, "Member 'IndicatorBaseWidget_GetIsInViewport::ReturnValue' has a wrong offset!");

// Function BPGLib.IndicatorBaseWidget.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct IndicatorBaseWidget_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorBaseWidget_GetTargetActor) == 0x000008, "Wrong alignment on IndicatorBaseWidget_GetTargetActor");
static_assert(sizeof(IndicatorBaseWidget_GetTargetActor) == 0x000008, "Wrong size on IndicatorBaseWidget_GetTargetActor");
static_assert(offsetof(IndicatorBaseWidget_GetTargetActor, ReturnValue) == 0x000000, "Member 'IndicatorBaseWidget_GetTargetActor::ReturnValue' has a wrong offset!");

// Function BPGLib.IndicatorBaseWidget.IsFallFromPlayer
// 0x0001 (0x0001 - 0x0000)
struct IndicatorBaseWidget_IsFallFromPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorBaseWidget_IsFallFromPlayer) == 0x000001, "Wrong alignment on IndicatorBaseWidget_IsFallFromPlayer");
static_assert(sizeof(IndicatorBaseWidget_IsFallFromPlayer) == 0x000001, "Wrong size on IndicatorBaseWidget_IsFallFromPlayer");
static_assert(offsetof(IndicatorBaseWidget_IsFallFromPlayer, ReturnValue) == 0x000000, "Member 'IndicatorBaseWidget_IsFallFromPlayer::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.ClickButton
// 0x000C (0x000C - 0x0000)
struct PopupBase_ClickButton final
{
public:
	class FName                                   _ctrl_id;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _close;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA9[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(PopupBase_ClickButton) == 0x000004, "Wrong alignment on PopupBase_ClickButton");
static_assert(sizeof(PopupBase_ClickButton) == 0x00000C, "Wrong size on PopupBase_ClickButton");
static_assert(offsetof(PopupBase_ClickButton, _ctrl_id) == 0x000000, "Member 'PopupBase_ClickButton::_ctrl_id' has a wrong offset!");
static_assert(offsetof(PopupBase_ClickButton, _close) == 0x000008, "Member 'PopupBase_ClickButton::_close' has a wrong offset!");
static_assert(offsetof(PopupBase_ClickButton, ReturnValue) == 0x000009, "Member 'PopupBase_ClickButton::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.Close
// 0x0001 (0x0001 - 0x0000)
struct PopupBase_Close final
{
public:
	bool                                          _force_close;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_Close) == 0x000001, "Wrong alignment on PopupBase_Close");
static_assert(sizeof(PopupBase_Close) == 0x000001, "Wrong size on PopupBase_Close");
static_assert(offsetof(PopupBase_Close, _force_close) == 0x000000, "Member 'PopupBase_Close::_force_close' has a wrong offset!");

// Function BPGLib.PopupBase.GetFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct PopupBase_GetFocusWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_GetFocusWidget) == 0x000008, "Wrong alignment on PopupBase_GetFocusWidget");
static_assert(sizeof(PopupBase_GetFocusWidget) == 0x000008, "Wrong size on PopupBase_GetFocusWidget");
static_assert(offsetof(PopupBase_GetFocusWidget, ReturnValue) == 0x000000, "Member 'PopupBase_GetFocusWidget::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.OnBeforeClose
// 0x0001 (0x0001 - 0x0000)
struct PopupBase_OnBeforeClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_OnBeforeClose) == 0x000001, "Wrong alignment on PopupBase_OnBeforeClose");
static_assert(sizeof(PopupBase_OnBeforeClose) == 0x000001, "Wrong size on PopupBase_OnBeforeClose");
static_assert(offsetof(PopupBase_OnBeforeClose, ReturnValue) == 0x000000, "Member 'PopupBase_OnBeforeClose::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.OnChangeWaiting
// 0x0002 (0x0002 - 0x0000)
struct PopupBase_OnChangeWaiting final
{
public:
	EWaitingType                                  _waiting_type;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_OnChangeWaiting) == 0x000001, "Wrong alignment on PopupBase_OnChangeWaiting");
static_assert(sizeof(PopupBase_OnChangeWaiting) == 0x000002, "Wrong size on PopupBase_OnChangeWaiting");
static_assert(offsetof(PopupBase_OnChangeWaiting, _waiting_type) == 0x000000, "Member 'PopupBase_OnChangeWaiting::_waiting_type' has a wrong offset!");
static_assert(offsetof(PopupBase_OnChangeWaiting, ReturnValue) == 0x000001, "Member 'PopupBase_OnChangeWaiting::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.OnHidePopup
// 0x0001 (0x0001 - 0x0000)
struct PopupBase_OnHidePopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_OnHidePopup) == 0x000001, "Wrong alignment on PopupBase_OnHidePopup");
static_assert(sizeof(PopupBase_OnHidePopup) == 0x000001, "Wrong size on PopupBase_OnHidePopup");
static_assert(offsetof(PopupBase_OnHidePopup, ReturnValue) == 0x000000, "Member 'PopupBase_OnHidePopup::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.OnShowPopup
// 0x0001 (0x0001 - 0x0000)
struct PopupBase_OnShowPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_OnShowPopup) == 0x000001, "Wrong alignment on PopupBase_OnShowPopup");
static_assert(sizeof(PopupBase_OnShowPopup) == 0x000001, "Wrong size on PopupBase_OnShowPopup");
static_assert(offsetof(PopupBase_OnShowPopup, ReturnValue) == 0x000000, "Member 'PopupBase_OnShowPopup::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.GetCloseKey
// 0x0018 (0x0018 - 0x0000)
struct PopupBase_GetCloseKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_GetCloseKey) == 0x000008, "Wrong alignment on PopupBase_GetCloseKey");
static_assert(sizeof(PopupBase_GetCloseKey) == 0x000018, "Wrong size on PopupBase_GetCloseKey");
static_assert(offsetof(PopupBase_GetCloseKey, ReturnValue) == 0x000000, "Member 'PopupBase_GetCloseKey::ReturnValue' has a wrong offset!");

// Function BPGLib.PopupBase.GetPopupID
// 0x0008 (0x0008 - 0x0000)
struct PopupBase_GetPopupID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PopupBase_GetPopupID) == 0x000004, "Wrong alignment on PopupBase_GetPopupID");
static_assert(sizeof(PopupBase_GetPopupID) == 0x000008, "Wrong size on PopupBase_GetPopupID");
static_assert(offsetof(PopupBase_GetPopupID, ReturnValue) == 0x000000, "Member 'PopupBase_GetPopupID::ReturnValue' has a wrong offset!");

// Function BPGLib.MessageBox.Create
// 0x0048 (0x0048 - 0x0000)
struct MessageBox_Create final
{
public:
	struct FMessageBoxSetting                     _box_setting;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageBox_Create) == 0x000008, "Wrong alignment on MessageBox_Create");
static_assert(sizeof(MessageBox_Create) == 0x000048, "Wrong size on MessageBox_Create");
static_assert(offsetof(MessageBox_Create, _box_setting) == 0x000000, "Member 'MessageBox_Create::_box_setting' has a wrong offset!");

// Function BPGLib.MessageBox.OnCreate
// 0x0050 (0x0050 - 0x0000)
struct MessageBox_OnCreate final
{
public:
	struct FMessageBoxSetting                     _box_setting;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAA[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MessageBox_OnCreate) == 0x000008, "Wrong alignment on MessageBox_OnCreate");
static_assert(sizeof(MessageBox_OnCreate) == 0x000050, "Wrong size on MessageBox_OnCreate");
static_assert(offsetof(MessageBox_OnCreate, _box_setting) == 0x000000, "Member 'MessageBox_OnCreate::_box_setting' has a wrong offset!");
static_assert(offsetof(MessageBox_OnCreate, ReturnValue) == 0x000048, "Member 'MessageBox_OnCreate::ReturnValue' has a wrong offset!");

// Function BPGLib.MovementSource.BeginRide
// 0x0010 (0x0010 - 0x0000)
struct MovementSource_BeginRide final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MovementSource_BeginRide) == 0x000008, "Wrong alignment on MovementSource_BeginRide");
static_assert(sizeof(MovementSource_BeginRide) == 0x000010, "Wrong size on MovementSource_BeginRide");
static_assert(offsetof(MovementSource_BeginRide, _Actor) == 0x000000, "Member 'MovementSource_BeginRide::_Actor' has a wrong offset!");
static_assert(offsetof(MovementSource_BeginRide, ReturnValue) == 0x000008, "Member 'MovementSource_BeginRide::ReturnValue' has a wrong offset!");

// Function BPGLib.MovementSource.EndRide
// 0x0010 (0x0010 - 0x0000)
struct MovementSource_EndRide final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(MovementSource_EndRide) == 0x000008, "Wrong alignment on MovementSource_EndRide");
static_assert(sizeof(MovementSource_EndRide) == 0x000010, "Wrong size on MovementSource_EndRide");
static_assert(offsetof(MovementSource_EndRide, _Actor) == 0x000000, "Member 'MovementSource_EndRide::_Actor' has a wrong offset!");
static_assert(offsetof(MovementSource_EndRide, ReturnValue) == 0x000008, "Member 'MovementSource_EndRide::ReturnValue' has a wrong offset!");

// Function BPGLib.MovementSource.GetBaseTransform
// 0x0070 (0x0070 - 0x0000)
struct MovementSource_GetBaseTransform final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSource_GetBaseTransform) == 0x000010, "Wrong alignment on MovementSource_GetBaseTransform");
static_assert(sizeof(MovementSource_GetBaseTransform) == 0x000070, "Wrong size on MovementSource_GetBaseTransform");
static_assert(offsetof(MovementSource_GetBaseTransform, _Actor) == 0x000000, "Member 'MovementSource_GetBaseTransform::_Actor' has a wrong offset!");
static_assert(offsetof(MovementSource_GetBaseTransform, ReturnValue) == 0x000010, "Member 'MovementSource_GetBaseTransform::ReturnValue' has a wrong offset!");

// Function BPGLib.MovementSource.GetMovementSourceData
// 0x0028 (0x0028 - 0x0000)
struct MovementSource_GetMovementSourceData final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovementSourceData                    ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSource_GetMovementSourceData) == 0x000008, "Wrong alignment on MovementSource_GetMovementSourceData");
static_assert(sizeof(MovementSource_GetMovementSourceData) == 0x000028, "Wrong size on MovementSource_GetMovementSourceData");
static_assert(offsetof(MovementSource_GetMovementSourceData, _Actor) == 0x000000, "Member 'MovementSource_GetMovementSourceData::_Actor' has a wrong offset!");
static_assert(offsetof(MovementSource_GetMovementSourceData, ReturnValue) == 0x000008, "Member 'MovementSource_GetMovementSourceData::ReturnValue' has a wrong offset!");

// Function BPGLib.MovementSource.HandleMovement
// 0x00A0 (0x00A0 - 0x0000)
struct MovementSource_HandleMovement final
{
public:
	struct FMovementQuery                         _query;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BAE[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMovementQueryResult                   ReturnValue;                                       // 0x0030(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSource_HandleMovement) == 0x000010, "Wrong alignment on MovementSource_HandleMovement");
static_assert(sizeof(MovementSource_HandleMovement) == 0x0000A0, "Wrong size on MovementSource_HandleMovement");
static_assert(offsetof(MovementSource_HandleMovement, _query) == 0x000000, "Member 'MovementSource_HandleMovement::_query' has a wrong offset!");
static_assert(offsetof(MovementSource_HandleMovement, ReturnValue) == 0x000030, "Member 'MovementSource_HandleMovement::ReturnValue' has a wrong offset!");

// Function BPGLib.NetUtil.GetLocalHostURL
// 0x0020 (0x0020 - 0x0000)
struct NetUtil_GetLocalHostURL final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _port_offset;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetUtil_GetLocalHostURL) == 0x000008, "Wrong alignment on NetUtil_GetLocalHostURL");
static_assert(sizeof(NetUtil_GetLocalHostURL) == 0x000020, "Wrong size on NetUtil_GetLocalHostURL");
static_assert(offsetof(NetUtil_GetLocalHostURL, _world_ctx) == 0x000000, "Member 'NetUtil_GetLocalHostURL::_world_ctx' has a wrong offset!");
static_assert(offsetof(NetUtil_GetLocalHostURL, _port_offset) == 0x000008, "Member 'NetUtil_GetLocalHostURL::_port_offset' has a wrong offset!");
static_assert(offsetof(NetUtil_GetLocalHostURL, ReturnValue) == 0x000010, "Member 'NetUtil_GetLocalHostURL::ReturnValue' has a wrong offset!");

// Function BPGLib.NetUtil.GetPort
// 0x0010 (0x0010 - 0x0000)
struct NetUtil_GetPort final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB2[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(NetUtil_GetPort) == 0x000008, "Wrong alignment on NetUtil_GetPort");
static_assert(sizeof(NetUtil_GetPort) == 0x000010, "Wrong size on NetUtil_GetPort");
static_assert(offsetof(NetUtil_GetPort, _world_ctx) == 0x000000, "Member 'NetUtil_GetPort::_world_ctx' has a wrong offset!");
static_assert(offsetof(NetUtil_GetPort, ReturnValue) == 0x000008, "Member 'NetUtil_GetPort::ReturnValue' has a wrong offset!");

// Function BPGLib.PolyGraph.GetValue
// 0x000C (0x000C - 0x0000)
struct PolyGraph_GetValue final
{
public:
	int32                                         _idx_axis;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _layer;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PolyGraph_GetValue) == 0x000004, "Wrong alignment on PolyGraph_GetValue");
static_assert(sizeof(PolyGraph_GetValue) == 0x00000C, "Wrong size on PolyGraph_GetValue");
static_assert(offsetof(PolyGraph_GetValue, _idx_axis) == 0x000000, "Member 'PolyGraph_GetValue::_idx_axis' has a wrong offset!");
static_assert(offsetof(PolyGraph_GetValue, _layer) == 0x000004, "Member 'PolyGraph_GetValue::_layer' has a wrong offset!");
static_assert(offsetof(PolyGraph_GetValue, ReturnValue) == 0x000008, "Member 'PolyGraph_GetValue::ReturnValue' has a wrong offset!");

// Function BPGLib.PolyGraph.GetValueText
// 0x0020 (0x0020 - 0x0000)
struct PolyGraph_GetValueText final
{
public:
	int32                                         _idx_axis;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _layer;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PolyGraph_GetValueText) == 0x000008, "Wrong alignment on PolyGraph_GetValueText");
static_assert(sizeof(PolyGraph_GetValueText) == 0x000020, "Wrong size on PolyGraph_GetValueText");
static_assert(offsetof(PolyGraph_GetValueText, _idx_axis) == 0x000000, "Member 'PolyGraph_GetValueText::_idx_axis' has a wrong offset!");
static_assert(offsetof(PolyGraph_GetValueText, _layer) == 0x000004, "Member 'PolyGraph_GetValueText::_layer' has a wrong offset!");
static_assert(offsetof(PolyGraph_GetValueText, ReturnValue) == 0x000008, "Member 'PolyGraph_GetValueText::ReturnValue' has a wrong offset!");

// Function BPGLib.PolyGraph.SetAxisMinMax
// 0x000C (0x000C - 0x0000)
struct PolyGraph_SetAxisMinMax final
{
public:
	int32                                         _idx_axis;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _min;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PolyGraph_SetAxisMinMax) == 0x000004, "Wrong alignment on PolyGraph_SetAxisMinMax");
static_assert(sizeof(PolyGraph_SetAxisMinMax) == 0x00000C, "Wrong size on PolyGraph_SetAxisMinMax");
static_assert(offsetof(PolyGraph_SetAxisMinMax, _idx_axis) == 0x000000, "Member 'PolyGraph_SetAxisMinMax::_idx_axis' has a wrong offset!");
static_assert(offsetof(PolyGraph_SetAxisMinMax, _min) == 0x000004, "Member 'PolyGraph_SetAxisMinMax::_min' has a wrong offset!");
static_assert(offsetof(PolyGraph_SetAxisMinMax, _max) == 0x000008, "Member 'PolyGraph_SetAxisMinMax::_max' has a wrong offset!");

// Function BPGLib.PolyGraph.SetAxisValue
// 0x000C (0x000C - 0x0000)
struct PolyGraph_SetAxisValue final
{
public:
	int32                                         _idx_axis;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _idx_layer;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _value;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PolyGraph_SetAxisValue) == 0x000004, "Wrong alignment on PolyGraph_SetAxisValue");
static_assert(sizeof(PolyGraph_SetAxisValue) == 0x00000C, "Wrong size on PolyGraph_SetAxisValue");
static_assert(offsetof(PolyGraph_SetAxisValue, _idx_axis) == 0x000000, "Member 'PolyGraph_SetAxisValue::_idx_axis' has a wrong offset!");
static_assert(offsetof(PolyGraph_SetAxisValue, _idx_layer) == 0x000004, "Member 'PolyGraph_SetAxisValue::_idx_layer' has a wrong offset!");
static_assert(offsetof(PolyGraph_SetAxisValue, _value) == 0x000008, "Member 'PolyGraph_SetAxisValue::_value' has a wrong offset!");

// Function BPGLib.PolyGraph.GetSetting
// 0x0038 (0x0038 - 0x0000)
struct PolyGraph_GetSetting final
{
public:
	struct FPolyGraphSetting                      ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PolyGraph_GetSetting) == 0x000008, "Wrong alignment on PolyGraph_GetSetting");
static_assert(sizeof(PolyGraph_GetSetting) == 0x000038, "Wrong size on PolyGraph_GetSetting");
static_assert(offsetof(PolyGraph_GetSetting, ReturnValue) == 0x000000, "Member 'PolyGraph_GetSetting::ReturnValue' has a wrong offset!");

// Function BPGLib.Previewable.OnMouseDown
// 0x00B8 (0x00B8 - 0x0000)
struct Previewable_OnMouseDown final
{
public:
	struct FGeometry                              _geo;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          _event;                                            // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHandleReply                                  ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB8[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Previewable_OnMouseDown) == 0x000008, "Wrong alignment on Previewable_OnMouseDown");
static_assert(sizeof(Previewable_OnMouseDown) == 0x0000B8, "Wrong size on Previewable_OnMouseDown");
static_assert(offsetof(Previewable_OnMouseDown, _geo) == 0x000000, "Member 'Previewable_OnMouseDown::_geo' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseDown, _event) == 0x000038, "Member 'Previewable_OnMouseDown::_event' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseDown, ReturnValue) == 0x0000B0, "Member 'Previewable_OnMouseDown::ReturnValue' has a wrong offset!");

// Function BPGLib.Previewable.OnMouseMove
// 0x00B8 (0x00B8 - 0x0000)
struct Previewable_OnMouseMove final
{
public:
	struct FGeometry                              _geo;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          _event;                                            // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHandleReply                                  ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB9[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Previewable_OnMouseMove) == 0x000008, "Wrong alignment on Previewable_OnMouseMove");
static_assert(sizeof(Previewable_OnMouseMove) == 0x0000B8, "Wrong size on Previewable_OnMouseMove");
static_assert(offsetof(Previewable_OnMouseMove, _geo) == 0x000000, "Member 'Previewable_OnMouseMove::_geo' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseMove, _event) == 0x000038, "Member 'Previewable_OnMouseMove::_event' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseMove, ReturnValue) == 0x0000B0, "Member 'Previewable_OnMouseMove::ReturnValue' has a wrong offset!");

// Function BPGLib.Previewable.OnMouseUp
// 0x00B8 (0x00B8 - 0x0000)
struct Previewable_OnMouseUp final
{
public:
	struct FGeometry                              _geo;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          _event;                                            // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHandleReply                                  ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBA[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Previewable_OnMouseUp) == 0x000008, "Wrong alignment on Previewable_OnMouseUp");
static_assert(sizeof(Previewable_OnMouseUp) == 0x0000B8, "Wrong size on Previewable_OnMouseUp");
static_assert(offsetof(Previewable_OnMouseUp, _geo) == 0x000000, "Member 'Previewable_OnMouseUp::_geo' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseUp, _event) == 0x000038, "Member 'Previewable_OnMouseUp::_event' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseUp, ReturnValue) == 0x0000B0, "Member 'Previewable_OnMouseUp::ReturnValue' has a wrong offset!");

// Function BPGLib.Previewable.OnMouseWheel
// 0x00B8 (0x00B8 - 0x0000)
struct Previewable_OnMouseWheel final
{
public:
	struct FGeometry                              _geo;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          _event;                                            // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHandleReply                                  ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BBB[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Previewable_OnMouseWheel) == 0x000008, "Wrong alignment on Previewable_OnMouseWheel");
static_assert(sizeof(Previewable_OnMouseWheel) == 0x0000B8, "Wrong size on Previewable_OnMouseWheel");
static_assert(offsetof(Previewable_OnMouseWheel, _geo) == 0x000000, "Member 'Previewable_OnMouseWheel::_geo' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseWheel, _event) == 0x000038, "Member 'Previewable_OnMouseWheel::_event' has a wrong offset!");
static_assert(offsetof(Previewable_OnMouseWheel, ReturnValue) == 0x0000B0, "Member 'Previewable_OnMouseWheel::ReturnValue' has a wrong offset!");

// Function BPGLib.Profiler.GetAllProfileRecordsString
// 0x0010 (0x0010 - 0x0000)
struct Profiler_GetAllProfileRecordsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Profiler_GetAllProfileRecordsString) == 0x000008, "Wrong alignment on Profiler_GetAllProfileRecordsString");
static_assert(sizeof(Profiler_GetAllProfileRecordsString) == 0x000010, "Wrong size on Profiler_GetAllProfileRecordsString");
static_assert(offsetof(Profiler_GetAllProfileRecordsString, ReturnValue) == 0x000000, "Member 'Profiler_GetAllProfileRecordsString::ReturnValue' has a wrong offset!");

// Function BPGLib.Profiler.GetProfileRecord
// 0x001C (0x001C - 0x0000)
struct Profiler_GetProfileRecord final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProfileRecord                         ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Profiler_GetProfileRecord) == 0x000004, "Wrong alignment on Profiler_GetProfileRecord");
static_assert(sizeof(Profiler_GetProfileRecord) == 0x00001C, "Wrong size on Profiler_GetProfileRecord");
static_assert(offsetof(Profiler_GetProfileRecord, _Name) == 0x000000, "Member 'Profiler_GetProfileRecord::_Name' has a wrong offset!");
static_assert(offsetof(Profiler_GetProfileRecord, ReturnValue) == 0x000008, "Member 'Profiler_GetProfileRecord::ReturnValue' has a wrong offset!");

// Function BPGLib.Profiler.GetProfileRecordString
// 0x0018 (0x0018 - 0x0000)
struct Profiler_GetProfileRecordString final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Profiler_GetProfileRecordString) == 0x000008, "Wrong alignment on Profiler_GetProfileRecordString");
static_assert(sizeof(Profiler_GetProfileRecordString) == 0x000018, "Wrong size on Profiler_GetProfileRecordString");
static_assert(offsetof(Profiler_GetProfileRecordString, _Name) == 0x000000, "Member 'Profiler_GetProfileRecordString::_Name' has a wrong offset!");
static_assert(offsetof(Profiler_GetProfileRecordString, ReturnValue) == 0x000008, "Member 'Profiler_GetProfileRecordString::ReturnValue' has a wrong offset!");

// Function BPGLib.Profiler.ProfileEnd
// 0x0008 (0x0008 - 0x0000)
struct Profiler_ProfileEnd final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Profiler_ProfileEnd) == 0x000004, "Wrong alignment on Profiler_ProfileEnd");
static_assert(sizeof(Profiler_ProfileEnd) == 0x000008, "Wrong size on Profiler_ProfileEnd");
static_assert(offsetof(Profiler_ProfileEnd, _Name) == 0x000000, "Member 'Profiler_ProfileEnd::_Name' has a wrong offset!");

// Function BPGLib.Profiler.ProfileStart
// 0x0008 (0x0008 - 0x0000)
struct Profiler_ProfileStart final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Profiler_ProfileStart) == 0x000004, "Wrong alignment on Profiler_ProfileStart");
static_assert(sizeof(Profiler_ProfileStart) == 0x000008, "Wrong size on Profiler_ProfileStart");
static_assert(offsetof(Profiler_ProfileStart, _Name) == 0x000000, "Member 'Profiler_ProfileStart::_Name' has a wrong offset!");

// Function BPGLib.RadioButton.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct RadioButton_SetBackgroundColor final
{
public:
	struct FLinearColor                           InBackgroundColor;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetBackgroundColor) == 0x000004, "Wrong alignment on RadioButton_SetBackgroundColor");
static_assert(sizeof(RadioButton_SetBackgroundColor) == 0x000010, "Wrong size on RadioButton_SetBackgroundColor");
static_assert(offsetof(RadioButton_SetBackgroundColor, InBackgroundColor) == 0x000000, "Member 'RadioButton_SetBackgroundColor::InBackgroundColor' has a wrong offset!");

// Function BPGLib.RadioButton.SetClickMethod
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetClickMethod final
{
public:
	EButtonClickMethod                            InClickMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetClickMethod) == 0x000001, "Wrong alignment on RadioButton_SetClickMethod");
static_assert(sizeof(RadioButton_SetClickMethod) == 0x000001, "Wrong size on RadioButton_SetClickMethod");
static_assert(offsetof(RadioButton_SetClickMethod, InClickMethod) == 0x000000, "Member 'RadioButton_SetClickMethod::InClickMethod' has a wrong offset!");

// Function BPGLib.RadioButton.SetColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct RadioButton_SetColorAndOpacity final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetColorAndOpacity) == 0x000004, "Wrong alignment on RadioButton_SetColorAndOpacity");
static_assert(sizeof(RadioButton_SetColorAndOpacity) == 0x000010, "Wrong size on RadioButton_SetColorAndOpacity");
static_assert(offsetof(RadioButton_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'RadioButton_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function BPGLib.RadioButton.SetPressMethod
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetPressMethod final
{
public:
	EButtonPressMethod                            InPressMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetPressMethod) == 0x000001, "Wrong alignment on RadioButton_SetPressMethod");
static_assert(sizeof(RadioButton_SetPressMethod) == 0x000001, "Wrong size on RadioButton_SetPressMethod");
static_assert(offsetof(RadioButton_SetPressMethod, InPressMethod) == 0x000000, "Member 'RadioButton_SetPressMethod::InPressMethod' has a wrong offset!");

// Function BPGLib.RadioButton.SetSelectable
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetSelectable final
{
public:
	bool                                          _enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetSelectable) == 0x000001, "Wrong alignment on RadioButton_SetSelectable");
static_assert(sizeof(RadioButton_SetSelectable) == 0x000001, "Wrong size on RadioButton_SetSelectable");
static_assert(offsetof(RadioButton_SetSelectable, _enable) == 0x000000, "Member 'RadioButton_SetSelectable::_enable' has a wrong offset!");

// Function BPGLib.RadioButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetSelected final
{
public:
	bool                                          _selected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetSelected) == 0x000001, "Wrong alignment on RadioButton_SetSelected");
static_assert(sizeof(RadioButton_SetSelected) == 0x000001, "Wrong size on RadioButton_SetSelected");
static_assert(offsetof(RadioButton_SetSelected, _selected) == 0x000000, "Member 'RadioButton_SetSelected::_selected' has a wrong offset!");

// Function BPGLib.RadioButton.SetStyle
// 0x03F0 (0x03F0 - 0x0000)
struct RadioButton_SetStyle final
{
public:
	struct FButtonStyle                           InStyle;                                           // 0x0000(0x03F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetStyle) == 0x000010, "Wrong alignment on RadioButton_SetStyle");
static_assert(sizeof(RadioButton_SetStyle) == 0x0003F0, "Wrong size on RadioButton_SetStyle");
static_assert(offsetof(RadioButton_SetStyle, InStyle) == 0x000000, "Member 'RadioButton_SetStyle::InStyle' has a wrong offset!");

// Function BPGLib.RadioButton.SetTouchMethod
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_SetTouchMethod final
{
public:
	EButtonTouchMethod                            InTouchMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_SetTouchMethod) == 0x000001, "Wrong alignment on RadioButton_SetTouchMethod");
static_assert(sizeof(RadioButton_SetTouchMethod) == 0x000001, "Wrong size on RadioButton_SetTouchMethod");
static_assert(offsetof(RadioButton_SetTouchMethod, InTouchMethod) == 0x000000, "Member 'RadioButton_SetTouchMethod::InTouchMethod' has a wrong offset!");

// Function BPGLib.RadioButton.IsPressed
// 0x0001 (0x0001 - 0x0000)
struct RadioButton_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadioButton_IsPressed) == 0x000001, "Wrong alignment on RadioButton_IsPressed");
static_assert(sizeof(RadioButton_IsPressed) == 0x000001, "Wrong size on RadioButton_IsPressed");
static_assert(offsetof(RadioButton_IsPressed, ReturnValue) == 0x000000, "Member 'RadioButton_IsPressed::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.AddIndicator
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_AddIndicator final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _indicate_actor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorType                                _type;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC2[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_AddIndicator) == 0x000008, "Wrong alignment on UIHelper_AddIndicator");
static_assert(sizeof(UIHelper_AddIndicator) == 0x000018, "Wrong size on UIHelper_AddIndicator");
static_assert(offsetof(UIHelper_AddIndicator, _world_ctx) == 0x000000, "Member 'UIHelper_AddIndicator::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_AddIndicator, _indicate_actor) == 0x000008, "Member 'UIHelper_AddIndicator::_indicate_actor' has a wrong offset!");
static_assert(offsetof(UIHelper_AddIndicator, _type) == 0x000010, "Member 'UIHelper_AddIndicator::_type' has a wrong offset!");
static_assert(offsetof(UIHelper_AddIndicator, ReturnValue) == 0x000011, "Member 'UIHelper_AddIndicator::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.AdjustGridLayout
// 0x0038 (0x0038 - 0x0000)
struct UIHelper_AdjustGridLayout final
{
public:
	class UGridPanel*                             _grid;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cx;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _cy;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        _children;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          _horz_align;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            _vert_align;                                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC3[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMargin                                _margin;                                           // 0x0024(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC4[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_AdjustGridLayout) == 0x000008, "Wrong alignment on UIHelper_AdjustGridLayout");
static_assert(sizeof(UIHelper_AdjustGridLayout) == 0x000038, "Wrong size on UIHelper_AdjustGridLayout");
static_assert(offsetof(UIHelper_AdjustGridLayout, _grid) == 0x000000, "Member 'UIHelper_AdjustGridLayout::_grid' has a wrong offset!");
static_assert(offsetof(UIHelper_AdjustGridLayout, _cx) == 0x000008, "Member 'UIHelper_AdjustGridLayout::_cx' has a wrong offset!");
static_assert(offsetof(UIHelper_AdjustGridLayout, _cy) == 0x00000C, "Member 'UIHelper_AdjustGridLayout::_cy' has a wrong offset!");
static_assert(offsetof(UIHelper_AdjustGridLayout, _children) == 0x000010, "Member 'UIHelper_AdjustGridLayout::_children' has a wrong offset!");
static_assert(offsetof(UIHelper_AdjustGridLayout, _horz_align) == 0x000020, "Member 'UIHelper_AdjustGridLayout::_horz_align' has a wrong offset!");
static_assert(offsetof(UIHelper_AdjustGridLayout, _vert_align) == 0x000021, "Member 'UIHelper_AdjustGridLayout::_vert_align' has a wrong offset!");
static_assert(offsetof(UIHelper_AdjustGridLayout, _margin) == 0x000024, "Member 'UIHelper_AdjustGridLayout::_margin' has a wrong offset!");

// Function BPGLib.UIHelper.CalcTextSize
// 0x0030 (0x0030 - 0x0000)
struct UIHelper_CalcTextSize final
{
public:
	class UTextBlock*                             _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_CalcTextSize) == 0x000008, "Wrong alignment on UIHelper_CalcTextSize");
static_assert(sizeof(UIHelper_CalcTextSize) == 0x000030, "Wrong size on UIHelper_CalcTextSize");
static_assert(offsetof(UIHelper_CalcTextSize, _widget) == 0x000000, "Member 'UIHelper_CalcTextSize::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_CalcTextSize, _text) == 0x000008, "Member 'UIHelper_CalcTextSize::_text' has a wrong offset!");
static_assert(offsetof(UIHelper_CalcTextSize, ReturnValue) == 0x000020, "Member 'UIHelper_CalcTextSize::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.CloseAllModals
// 0x0008 (0x0008 - 0x0000)
struct UIHelper_CloseAllModals final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_CloseAllModals) == 0x000008, "Wrong alignment on UIHelper_CloseAllModals");
static_assert(sizeof(UIHelper_CloseAllModals) == 0x000008, "Wrong size on UIHelper_CloseAllModals");
static_assert(offsetof(UIHelper_CloseAllModals, _world_ctx) == 0x000000, "Member 'UIHelper_CloseAllModals::_world_ctx' has a wrong offset!");

// Function BPGLib.UIHelper.DateTimeToString
// 0x0020 (0x0020 - 0x0000)
struct UIHelper_DateTimeToString final
{
public:
	struct FDateTime                              _date;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_DateTimeToString) == 0x000008, "Wrong alignment on UIHelper_DateTimeToString");
static_assert(sizeof(UIHelper_DateTimeToString) == 0x000020, "Wrong size on UIHelper_DateTimeToString");
static_assert(offsetof(UIHelper_DateTimeToString, _date) == 0x000000, "Member 'UIHelper_DateTimeToString::_date' has a wrong offset!");
static_assert(offsetof(UIHelper_DateTimeToString, ReturnValue) == 0x000008, "Member 'UIHelper_DateTimeToString::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.DoModal
// 0x0028 (0x0028 - 0x0000)
struct UIHelper_DoModal final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPopupBase*                             _dlg;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPopupBase>                 _dlg_type;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _open_even_if_same_class;                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_registered_background_widgets;               // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC5[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_DoModal) == 0x000008, "Wrong alignment on UIHelper_DoModal");
static_assert(sizeof(UIHelper_DoModal) == 0x000028, "Wrong size on UIHelper_DoModal");
static_assert(offsetof(UIHelper_DoModal, _world_ctx) == 0x000000, "Member 'UIHelper_DoModal::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModal, _dlg) == 0x000008, "Member 'UIHelper_DoModal::_dlg' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModal, _dlg_type) == 0x000010, "Member 'UIHelper_DoModal::_dlg_type' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModal, _open_even_if_same_class) == 0x000018, "Member 'UIHelper_DoModal::_open_even_if_same_class' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModal, _hide_registered_background_widgets) == 0x000019, "Member 'UIHelper_DoModal::_hide_registered_background_widgets' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModal, ReturnValue) == 0x000020, "Member 'UIHelper_DoModal::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.DoModalEx
// 0x0038 (0x0038 - 0x0000)
struct UIHelper_DoModalEx final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPopupBase*                             _dlg;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPopupBase>                 _dlg_type;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _open_even_if_same_class;                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _hide_registered_background_widgets;               // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC6[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)> _proc;                                             // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC7[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_DoModalEx) == 0x000008, "Wrong alignment on UIHelper_DoModalEx");
static_assert(sizeof(UIHelper_DoModalEx) == 0x000038, "Wrong size on UIHelper_DoModalEx");
static_assert(offsetof(UIHelper_DoModalEx, _world_ctx) == 0x000000, "Member 'UIHelper_DoModalEx::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModalEx, _dlg) == 0x000008, "Member 'UIHelper_DoModalEx::_dlg' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModalEx, _dlg_type) == 0x000010, "Member 'UIHelper_DoModalEx::_dlg_type' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModalEx, _open_even_if_same_class) == 0x000018, "Member 'UIHelper_DoModalEx::_open_even_if_same_class' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModalEx, _hide_registered_background_widgets) == 0x000019, "Member 'UIHelper_DoModalEx::_hide_registered_background_widgets' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModalEx, _proc) == 0x00001C, "Member 'UIHelper_DoModalEx::_proc' has a wrong offset!");
static_assert(offsetof(UIHelper_DoModalEx, ReturnValue) == 0x000030, "Member 'UIHelper_DoModalEx::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.FindUMGWidgetByID
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_FindUMGWidgetByID final
{
public:
	class UObject*                                _world_ctx;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _id;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPreviewableWidget*                     ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_FindUMGWidgetByID) == 0x000008, "Wrong alignment on UIHelper_FindUMGWidgetByID");
static_assert(sizeof(UIHelper_FindUMGWidgetByID) == 0x000018, "Wrong size on UIHelper_FindUMGWidgetByID");
static_assert(offsetof(UIHelper_FindUMGWidgetByID, _world_ctx) == 0x000000, "Member 'UIHelper_FindUMGWidgetByID::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_FindUMGWidgetByID, _id) == 0x000008, "Member 'UIHelper_FindUMGWidgetByID::_id' has a wrong offset!");
static_assert(offsetof(UIHelper_FindUMGWidgetByID, ReturnValue) == 0x000010, "Member 'UIHelper_FindUMGWidgetByID::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.FindWidgetAnimation
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_FindWidgetAnimation final
{
public:
	class UUserWidget*                            _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _animation_name;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_FindWidgetAnimation) == 0x000008, "Wrong alignment on UIHelper_FindWidgetAnimation");
static_assert(sizeof(UIHelper_FindWidgetAnimation) == 0x000018, "Wrong size on UIHelper_FindWidgetAnimation");
static_assert(offsetof(UIHelper_FindWidgetAnimation, _widget) == 0x000000, "Member 'UIHelper_FindWidgetAnimation::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_FindWidgetAnimation, _animation_name) == 0x000008, "Member 'UIHelper_FindWidgetAnimation::_animation_name' has a wrong offset!");
static_assert(offsetof(UIHelper_FindWidgetAnimation, ReturnValue) == 0x000010, "Member 'UIHelper_FindWidgetAnimation::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.GetEntryWidgetFromItem
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_GetEntryWidgetFromItem final
{
public:
	class UListView*                              _list_view;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          _item;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_GetEntryWidgetFromItem) == 0x000008, "Wrong alignment on UIHelper_GetEntryWidgetFromItem");
static_assert(sizeof(UIHelper_GetEntryWidgetFromItem) == 0x000018, "Wrong size on UIHelper_GetEntryWidgetFromItem");
static_assert(offsetof(UIHelper_GetEntryWidgetFromItem, _list_view) == 0x000000, "Member 'UIHelper_GetEntryWidgetFromItem::_list_view' has a wrong offset!");
static_assert(offsetof(UIHelper_GetEntryWidgetFromItem, _item) == 0x000008, "Member 'UIHelper_GetEntryWidgetFromItem::_item' has a wrong offset!");
static_assert(offsetof(UIHelper_GetEntryWidgetFromItem, ReturnValue) == 0x000010, "Member 'UIHelper_GetEntryWidgetFromItem::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.GetInputMode
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_GetInputMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputMode                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_GetInputMode) == 0x000008, "Wrong alignment on UIHelper_GetInputMode");
static_assert(sizeof(UIHelper_GetInputMode) == 0x000010, "Wrong size on UIHelper_GetInputMode");
static_assert(offsetof(UIHelper_GetInputMode, WorldContextObject) == 0x000000, "Member 'UIHelper_GetInputMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UIHelper_GetInputMode, ReturnValue) == 0x000008, "Member 'UIHelper_GetInputMode::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.GetUMGViewportSize
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_GetUMGViewportSize final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_GetUMGViewportSize) == 0x000008, "Wrong alignment on UIHelper_GetUMGViewportSize");
static_assert(sizeof(UIHelper_GetUMGViewportSize) == 0x000018, "Wrong size on UIHelper_GetUMGViewportSize");
static_assert(offsetof(UIHelper_GetUMGViewportSize, _world_ctx) == 0x000000, "Member 'UIHelper_GetUMGViewportSize::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_GetUMGViewportSize, ReturnValue) == 0x000008, "Member 'UIHelper_GetUMGViewportSize::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.IsAltKeyPressed
// 0x0048 (0x0048 - 0x0000)
struct UIHelper_IsAltKeyPressed final
{
public:
	struct FKeyEvent                              _event;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EKeyModifierSide                              _side;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC9[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_IsAltKeyPressed) == 0x000008, "Wrong alignment on UIHelper_IsAltKeyPressed");
static_assert(sizeof(UIHelper_IsAltKeyPressed) == 0x000048, "Wrong size on UIHelper_IsAltKeyPressed");
static_assert(offsetof(UIHelper_IsAltKeyPressed, _event) == 0x000000, "Member 'UIHelper_IsAltKeyPressed::_event' has a wrong offset!");
static_assert(offsetof(UIHelper_IsAltKeyPressed, _side) == 0x000040, "Member 'UIHelper_IsAltKeyPressed::_side' has a wrong offset!");
static_assert(offsetof(UIHelper_IsAltKeyPressed, ReturnValue) == 0x000041, "Member 'UIHelper_IsAltKeyPressed::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.IsAnyPopupOpened
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_IsAnyPopupOpened final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_IsAnyPopupOpened) == 0x000008, "Wrong alignment on UIHelper_IsAnyPopupOpened");
static_assert(sizeof(UIHelper_IsAnyPopupOpened) == 0x000010, "Wrong size on UIHelper_IsAnyPopupOpened");
static_assert(offsetof(UIHelper_IsAnyPopupOpened, _world_ctx) == 0x000000, "Member 'UIHelper_IsAnyPopupOpened::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_IsAnyPopupOpened, ReturnValue) == 0x000008, "Member 'UIHelper_IsAnyPopupOpened::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.IsControlKeyPressed
// 0x0048 (0x0048 - 0x0000)
struct UIHelper_IsControlKeyPressed final
{
public:
	struct FKeyEvent                              _event;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EKeyModifierSide                              _side;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCB[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_IsControlKeyPressed) == 0x000008, "Wrong alignment on UIHelper_IsControlKeyPressed");
static_assert(sizeof(UIHelper_IsControlKeyPressed) == 0x000048, "Wrong size on UIHelper_IsControlKeyPressed");
static_assert(offsetof(UIHelper_IsControlKeyPressed, _event) == 0x000000, "Member 'UIHelper_IsControlKeyPressed::_event' has a wrong offset!");
static_assert(offsetof(UIHelper_IsControlKeyPressed, _side) == 0x000040, "Member 'UIHelper_IsControlKeyPressed::_side' has a wrong offset!");
static_assert(offsetof(UIHelper_IsControlKeyPressed, ReturnValue) == 0x000041, "Member 'UIHelper_IsControlKeyPressed::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.IsKeyPressed
// 0x0060 (0x0060 - 0x0000)
struct UIHelper_IsKeyPressed final
{
public:
	struct FKeyEvent                              _event;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   _Key;                                              // 0x0040(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _with_ctrl;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _with_shift;                                       // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _with_alt;                                         // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCC[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_IsKeyPressed) == 0x000008, "Wrong alignment on UIHelper_IsKeyPressed");
static_assert(sizeof(UIHelper_IsKeyPressed) == 0x000060, "Wrong size on UIHelper_IsKeyPressed");
static_assert(offsetof(UIHelper_IsKeyPressed, _event) == 0x000000, "Member 'UIHelper_IsKeyPressed::_event' has a wrong offset!");
static_assert(offsetof(UIHelper_IsKeyPressed, _Key) == 0x000040, "Member 'UIHelper_IsKeyPressed::_Key' has a wrong offset!");
static_assert(offsetof(UIHelper_IsKeyPressed, _with_ctrl) == 0x000058, "Member 'UIHelper_IsKeyPressed::_with_ctrl' has a wrong offset!");
static_assert(offsetof(UIHelper_IsKeyPressed, _with_shift) == 0x000059, "Member 'UIHelper_IsKeyPressed::_with_shift' has a wrong offset!");
static_assert(offsetof(UIHelper_IsKeyPressed, _with_alt) == 0x00005A, "Member 'UIHelper_IsKeyPressed::_with_alt' has a wrong offset!");
static_assert(offsetof(UIHelper_IsKeyPressed, ReturnValue) == 0x00005B, "Member 'UIHelper_IsKeyPressed::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.IsPopupOpened
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_IsPopupOpened final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _popup_id;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_IsPopupOpened) == 0x000008, "Wrong alignment on UIHelper_IsPopupOpened");
static_assert(sizeof(UIHelper_IsPopupOpened) == 0x000018, "Wrong size on UIHelper_IsPopupOpened");
static_assert(offsetof(UIHelper_IsPopupOpened, _world_ctx) == 0x000000, "Member 'UIHelper_IsPopupOpened::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_IsPopupOpened, _popup_id) == 0x000008, "Member 'UIHelper_IsPopupOpened::_popup_id' has a wrong offset!");
static_assert(offsetof(UIHelper_IsPopupOpened, ReturnValue) == 0x000010, "Member 'UIHelper_IsPopupOpened::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.IsShiftKeyPressed
// 0x0048 (0x0048 - 0x0000)
struct UIHelper_IsShiftKeyPressed final
{
public:
	struct FKeyEvent                              _event;                                            // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EKeyModifierSide                              _side;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCE[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_IsShiftKeyPressed) == 0x000008, "Wrong alignment on UIHelper_IsShiftKeyPressed");
static_assert(sizeof(UIHelper_IsShiftKeyPressed) == 0x000048, "Wrong size on UIHelper_IsShiftKeyPressed");
static_assert(offsetof(UIHelper_IsShiftKeyPressed, _event) == 0x000000, "Member 'UIHelper_IsShiftKeyPressed::_event' has a wrong offset!");
static_assert(offsetof(UIHelper_IsShiftKeyPressed, _side) == 0x000040, "Member 'UIHelper_IsShiftKeyPressed::_side' has a wrong offset!");
static_assert(offsetof(UIHelper_IsShiftKeyPressed, ReturnValue) == 0x000041, "Member 'UIHelper_IsShiftKeyPressed::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.MessageBoxOK
// 0x0070 (0x0070 - 0x0000)
struct UIHelper_MessageBoxOK final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIOrder                                      _ui_order;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BCF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   _Title;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _message;                                          // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _override_ok_text;                                 // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)> _on_clicked;                                       // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMessageBox>                _class_type;                                       // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_MessageBoxOK) == 0x000008, "Wrong alignment on UIHelper_MessageBoxOK");
static_assert(sizeof(UIHelper_MessageBoxOK) == 0x000070, "Wrong size on UIHelper_MessageBoxOK");
static_assert(offsetof(UIHelper_MessageBoxOK, _world_ctx) == 0x000000, "Member 'UIHelper_MessageBoxOK::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxOK, _ui_order) == 0x000008, "Member 'UIHelper_MessageBoxOK::_ui_order' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxOK, _Title) == 0x000010, "Member 'UIHelper_MessageBoxOK::_Title' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxOK, _message) == 0x000028, "Member 'UIHelper_MessageBoxOK::_message' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxOK, _override_ok_text) == 0x000040, "Member 'UIHelper_MessageBoxOK::_override_ok_text' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxOK, _on_clicked) == 0x000058, "Member 'UIHelper_MessageBoxOK::_on_clicked' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxOK, _class_type) == 0x000068, "Member 'UIHelper_MessageBoxOK::_class_type' has a wrong offset!");

// Function BPGLib.UIHelper.MessageBoxWithCustomButtons
// 0x0068 (0x0068 - 0x0000)
struct UIHelper_MessageBoxWithCustomButtons final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIOrder                                      _ui_order;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD0[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   _Title;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _message;                                          // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FMessageBoxButton>              _button_defs;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)> _on_clicked;                                       // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMessageBox>                _class_type;                                       // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_MessageBoxWithCustomButtons) == 0x000008, "Wrong alignment on UIHelper_MessageBoxWithCustomButtons");
static_assert(sizeof(UIHelper_MessageBoxWithCustomButtons) == 0x000068, "Wrong size on UIHelper_MessageBoxWithCustomButtons");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _world_ctx) == 0x000000, "Member 'UIHelper_MessageBoxWithCustomButtons::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _ui_order) == 0x000008, "Member 'UIHelper_MessageBoxWithCustomButtons::_ui_order' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _Title) == 0x000010, "Member 'UIHelper_MessageBoxWithCustomButtons::_Title' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _message) == 0x000028, "Member 'UIHelper_MessageBoxWithCustomButtons::_message' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _button_defs) == 0x000040, "Member 'UIHelper_MessageBoxWithCustomButtons::_button_defs' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _on_clicked) == 0x000050, "Member 'UIHelper_MessageBoxWithCustomButtons::_on_clicked' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxWithCustomButtons, _class_type) == 0x000060, "Member 'UIHelper_MessageBoxWithCustomButtons::_class_type' has a wrong offset!");

// Function BPGLib.UIHelper.MessageBoxYesNo
// 0x0088 (0x0088 - 0x0000)
struct UIHelper_MessageBoxYesNo final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIOrder                                      _ui_order;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD1[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   _Title;                                            // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _message;                                          // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _override_yes_text;                                // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   _override_no_text;                                 // 0x0058(0x0018)(Parm, NativeAccessSpecifierPublic)
	TDelegate<void(class UPopupBase* _popup, class FName _ctrl_id)> _on_clicked;                                       // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMessageBox>                _class_type;                                       // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_MessageBoxYesNo) == 0x000008, "Wrong alignment on UIHelper_MessageBoxYesNo");
static_assert(sizeof(UIHelper_MessageBoxYesNo) == 0x000088, "Wrong size on UIHelper_MessageBoxYesNo");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _world_ctx) == 0x000000, "Member 'UIHelper_MessageBoxYesNo::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _ui_order) == 0x000008, "Member 'UIHelper_MessageBoxYesNo::_ui_order' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _Title) == 0x000010, "Member 'UIHelper_MessageBoxYesNo::_Title' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _message) == 0x000028, "Member 'UIHelper_MessageBoxYesNo::_message' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _override_yes_text) == 0x000040, "Member 'UIHelper_MessageBoxYesNo::_override_yes_text' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _override_no_text) == 0x000058, "Member 'UIHelper_MessageBoxYesNo::_override_no_text' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _on_clicked) == 0x000070, "Member 'UIHelper_MessageBoxYesNo::_on_clicked' has a wrong offset!");
static_assert(offsetof(UIHelper_MessageBoxYesNo, _class_type) == 0x000080, "Member 'UIHelper_MessageBoxYesNo::_class_type' has a wrong offset!");

// Function BPGLib.UIHelper.PlayWidgetAnimation
// 0x0020 (0x0020 - 0x0000)
struct UIHelper_PlayWidgetAnimation final
{
public:
	class UUserWidget*                            _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _animation_name;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _start_time;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _loop_count;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _play_rate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _restore_state;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD2[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_PlayWidgetAnimation) == 0x000008, "Wrong alignment on UIHelper_PlayWidgetAnimation");
static_assert(sizeof(UIHelper_PlayWidgetAnimation) == 0x000020, "Wrong size on UIHelper_PlayWidgetAnimation");
static_assert(offsetof(UIHelper_PlayWidgetAnimation, _widget) == 0x000000, "Member 'UIHelper_PlayWidgetAnimation::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_PlayWidgetAnimation, _animation_name) == 0x000008, "Member 'UIHelper_PlayWidgetAnimation::_animation_name' has a wrong offset!");
static_assert(offsetof(UIHelper_PlayWidgetAnimation, _start_time) == 0x000010, "Member 'UIHelper_PlayWidgetAnimation::_start_time' has a wrong offset!");
static_assert(offsetof(UIHelper_PlayWidgetAnimation, _loop_count) == 0x000014, "Member 'UIHelper_PlayWidgetAnimation::_loop_count' has a wrong offset!");
static_assert(offsetof(UIHelper_PlayWidgetAnimation, _play_rate) == 0x000018, "Member 'UIHelper_PlayWidgetAnimation::_play_rate' has a wrong offset!");
static_assert(offsetof(UIHelper_PlayWidgetAnimation, _restore_state) == 0x00001C, "Member 'UIHelper_PlayWidgetAnimation::_restore_state' has a wrong offset!");

// Function BPGLib.UIHelper.RegisterBackgroundWidget
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_RegisterBackgroundWidget final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                _widget;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_RegisterBackgroundWidget) == 0x000008, "Wrong alignment on UIHelper_RegisterBackgroundWidget");
static_assert(sizeof(UIHelper_RegisterBackgroundWidget) == 0x000010, "Wrong size on UIHelper_RegisterBackgroundWidget");
static_assert(offsetof(UIHelper_RegisterBackgroundWidget, _world_ctx) == 0x000000, "Member 'UIHelper_RegisterBackgroundWidget::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_RegisterBackgroundWidget, _widget) == 0x000008, "Member 'UIHelper_RegisterBackgroundWidget::_widget' has a wrong offset!");

// Function BPGLib.UIHelper.RemoveIndicator
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_RemoveIndicator final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _indicate_actor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorType                                _type;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_RemoveIndicator) == 0x000008, "Wrong alignment on UIHelper_RemoveIndicator");
static_assert(sizeof(UIHelper_RemoveIndicator) == 0x000018, "Wrong size on UIHelper_RemoveIndicator");
static_assert(offsetof(UIHelper_RemoveIndicator, _world_ctx) == 0x000000, "Member 'UIHelper_RemoveIndicator::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_RemoveIndicator, _indicate_actor) == 0x000008, "Member 'UIHelper_RemoveIndicator::_indicate_actor' has a wrong offset!");
static_assert(offsetof(UIHelper_RemoveIndicator, _type) == 0x000010, "Member 'UIHelper_RemoveIndicator::_type' has a wrong offset!");

// Function BPGLib.UIHelper.SetInputMode
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_SetInputMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputMode                                    _mode;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UWidget*                                Focus_widget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_SetInputMode) == 0x000008, "Wrong alignment on UIHelper_SetInputMode");
static_assert(sizeof(UIHelper_SetInputMode) == 0x000018, "Wrong size on UIHelper_SetInputMode");
static_assert(offsetof(UIHelper_SetInputMode, WorldContextObject) == 0x000000, "Member 'UIHelper_SetInputMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UIHelper_SetInputMode, _mode) == 0x000008, "Member 'UIHelper_SetInputMode::_mode' has a wrong offset!");
static_assert(offsetof(UIHelper_SetInputMode, Focus_widget) == 0x000010, "Member 'UIHelper_SetInputMode::Focus_widget' has a wrong offset!");

// Function BPGLib.UIHelper.SetProgressFillBrush
// 0x00E0 (0x00E0 - 0x0000)
struct UIHelper_SetProgressFillBrush final
{
public:
	class UProgressBar*                           _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD5[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            _brush;                                            // 0x0010(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_SetProgressFillBrush) == 0x000010, "Wrong alignment on UIHelper_SetProgressFillBrush");
static_assert(sizeof(UIHelper_SetProgressFillBrush) == 0x0000E0, "Wrong size on UIHelper_SetProgressFillBrush");
static_assert(offsetof(UIHelper_SetProgressFillBrush, _widget) == 0x000000, "Member 'UIHelper_SetProgressFillBrush::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_SetProgressFillBrush, _brush) == 0x000010, "Member 'UIHelper_SetProgressFillBrush::_brush' has a wrong offset!");

// Function BPGLib.UIHelper.SetShow
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_SetShow final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              _show_visibility;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              _hide_visibility;                                  // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD6[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_SetShow) == 0x000008, "Wrong alignment on UIHelper_SetShow");
static_assert(sizeof(UIHelper_SetShow) == 0x000010, "Wrong size on UIHelper_SetShow");
static_assert(offsetof(UIHelper_SetShow, _widget) == 0x000000, "Member 'UIHelper_SetShow::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_SetShow, _show) == 0x000008, "Member 'UIHelper_SetShow::_show' has a wrong offset!");
static_assert(offsetof(UIHelper_SetShow, _show_visibility) == 0x000009, "Member 'UIHelper_SetShow::_show_visibility' has a wrong offset!");
static_assert(offsetof(UIHelper_SetShow, _hide_visibility) == 0x00000A, "Member 'UIHelper_SetShow::_hide_visibility' has a wrong offset!");

// Function BPGLib.UIHelper.SetTexture2DIfValid
// 0x0060 (0x0060 - 0x0000)
struct UIHelper_SetTexture2DIfValid final
{
public:
	class UImage*                                 _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              _obj_ref;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _adjust_size;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD7[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UTexture2D>              _default_obj_ref;                                  // 0x0038(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_SetTexture2DIfValid) == 0x000008, "Wrong alignment on UIHelper_SetTexture2DIfValid");
static_assert(sizeof(UIHelper_SetTexture2DIfValid) == 0x000060, "Wrong size on UIHelper_SetTexture2DIfValid");
static_assert(offsetof(UIHelper_SetTexture2DIfValid, _widget) == 0x000000, "Member 'UIHelper_SetTexture2DIfValid::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_SetTexture2DIfValid, _obj_ref) == 0x000008, "Member 'UIHelper_SetTexture2DIfValid::_obj_ref' has a wrong offset!");
static_assert(offsetof(UIHelper_SetTexture2DIfValid, _adjust_size) == 0x000030, "Member 'UIHelper_SetTexture2DIfValid::_adjust_size' has a wrong offset!");
static_assert(offsetof(UIHelper_SetTexture2DIfValid, _default_obj_ref) == 0x000038, "Member 'UIHelper_SetTexture2DIfValid::_default_obj_ref' has a wrong offset!");

// Function BPGLib.UIHelper.SetVisibilityIfNot
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_SetVisibilityIfNot final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              _visibility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_SetVisibilityIfNot) == 0x000008, "Wrong alignment on UIHelper_SetVisibilityIfNot");
static_assert(sizeof(UIHelper_SetVisibilityIfNot) == 0x000010, "Wrong size on UIHelper_SetVisibilityIfNot");
static_assert(offsetof(UIHelper_SetVisibilityIfNot, _widget) == 0x000000, "Member 'UIHelper_SetVisibilityIfNot::_widget' has a wrong offset!");
static_assert(offsetof(UIHelper_SetVisibilityIfNot, _visibility) == 0x000008, "Member 'UIHelper_SetVisibilityIfNot::_visibility' has a wrong offset!");

// Function BPGLib.UIHelper.SetWaiting
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_SetWaiting final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitingType                                  _waiting_type;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BD9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_SetWaiting) == 0x000008, "Wrong alignment on UIHelper_SetWaiting");
static_assert(sizeof(UIHelper_SetWaiting) == 0x000010, "Wrong size on UIHelper_SetWaiting");
static_assert(offsetof(UIHelper_SetWaiting, _world_ctx) == 0x000000, "Member 'UIHelper_SetWaiting::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_SetWaiting, _waiting_type) == 0x000008, "Member 'UIHelper_SetWaiting::_waiting_type' has a wrong offset!");

// Function BPGLib.UIHelper.ShowTooltip
// 0x0008 (0x0008 - 0x0000)
struct UIHelper_ShowTooltip final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_ShowTooltip) == 0x000008, "Wrong alignment on UIHelper_ShowTooltip");
static_assert(sizeof(UIHelper_ShowTooltip) == 0x000008, "Wrong size on UIHelper_ShowTooltip");
static_assert(offsetof(UIHelper_ShowTooltip, _widget) == 0x000000, "Member 'UIHelper_ShowTooltip::_widget' has a wrong offset!");

// Function BPGLib.UIHelper.StringToDateTime
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_StringToDateTime final
{
public:
	class FString                                 _date_time_string;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_StringToDateTime) == 0x000008, "Wrong alignment on UIHelper_StringToDateTime");
static_assert(sizeof(UIHelper_StringToDateTime) == 0x000018, "Wrong size on UIHelper_StringToDateTime");
static_assert(offsetof(UIHelper_StringToDateTime, _date_time_string) == 0x000000, "Member 'UIHelper_StringToDateTime::_date_time_string' has a wrong offset!");
static_assert(offsetof(UIHelper_StringToDateTime, ReturnValue) == 0x000010, "Member 'UIHelper_StringToDateTime::ReturnValue' has a wrong offset!");

// Function BPGLib.UIHelper.UnregisterBackgroundWidget
// 0x0010 (0x0010 - 0x0000)
struct UIHelper_UnregisterBackgroundWidget final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                _widget;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHelper_UnregisterBackgroundWidget) == 0x000008, "Wrong alignment on UIHelper_UnregisterBackgroundWidget");
static_assert(sizeof(UIHelper_UnregisterBackgroundWidget) == 0x000010, "Wrong size on UIHelper_UnregisterBackgroundWidget");
static_assert(offsetof(UIHelper_UnregisterBackgroundWidget, _world_ctx) == 0x000000, "Member 'UIHelper_UnregisterBackgroundWidget::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_UnregisterBackgroundWidget, _widget) == 0x000008, "Member 'UIHelper_UnregisterBackgroundWidget::_widget' has a wrong offset!");

// Function BPGLib.UIHelper.UpdateIndicator
// 0x0018 (0x0018 - 0x0000)
struct UIHelper_UpdateIndicator final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _indicate_actor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIndicatorType                                _type;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(UIHelper_UpdateIndicator) == 0x000008, "Wrong alignment on UIHelper_UpdateIndicator");
static_assert(sizeof(UIHelper_UpdateIndicator) == 0x000018, "Wrong size on UIHelper_UpdateIndicator");
static_assert(offsetof(UIHelper_UpdateIndicator, _world_ctx) == 0x000000, "Member 'UIHelper_UpdateIndicator::_world_ctx' has a wrong offset!");
static_assert(offsetof(UIHelper_UpdateIndicator, _indicate_actor) == 0x000008, "Member 'UIHelper_UpdateIndicator::_indicate_actor' has a wrong offset!");
static_assert(offsetof(UIHelper_UpdateIndicator, _type) == 0x000010, "Member 'UIHelper_UpdateIndicator::_type' has a wrong offset!");

// Function BPGLib.Util.ActivateCameraByTag
// 0x0020 (0x0020 - 0x0000)
struct Util_ActivateCameraByTag final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _Name;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _blending;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      _blend_func;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDB[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_ActivateCameraByTag) == 0x000008, "Wrong alignment on Util_ActivateCameraByTag");
static_assert(sizeof(Util_ActivateCameraByTag) == 0x000020, "Wrong size on Util_ActivateCameraByTag");
static_assert(offsetof(Util_ActivateCameraByTag, _world_ctx) == 0x000000, "Member 'Util_ActivateCameraByTag::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_ActivateCameraByTag, _Name) == 0x000008, "Member 'Util_ActivateCameraByTag::_Name' has a wrong offset!");
static_assert(offsetof(Util_ActivateCameraByTag, _blending) == 0x000010, "Member 'Util_ActivateCameraByTag::_blending' has a wrong offset!");
static_assert(offsetof(Util_ActivateCameraByTag, _blend_func) == 0x000014, "Member 'Util_ActivateCameraByTag::_blend_func' has a wrong offset!");
static_assert(offsetof(Util_ActivateCameraByTag, ReturnValue) == 0x000018, "Member 'Util_ActivateCameraByTag::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.AddImpulse
// 0x0038 (0x0038 - 0x0000)
struct Util_AddImpulse final
{
public:
	class UPrimitiveComponent*                    _comp;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Pos;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _impulse;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_AddImpulse) == 0x000008, "Wrong alignment on Util_AddImpulse");
static_assert(sizeof(Util_AddImpulse) == 0x000038, "Wrong size on Util_AddImpulse");
static_assert(offsetof(Util_AddImpulse, _comp) == 0x000000, "Member 'Util_AddImpulse::_comp' has a wrong offset!");
static_assert(offsetof(Util_AddImpulse, _Pos) == 0x000008, "Member 'Util_AddImpulse::_Pos' has a wrong offset!");
static_assert(offsetof(Util_AddImpulse, _impulse) == 0x000020, "Member 'Util_AddImpulse::_impulse' has a wrong offset!");

// Function BPGLib.Util.AddRotator
// 0x0048 (0x0048 - 0x0000)
struct Util_AddRotator final
{
public:
	struct FRotator                               _r1;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _r2;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_AddRotator) == 0x000008, "Wrong alignment on Util_AddRotator");
static_assert(sizeof(Util_AddRotator) == 0x000048, "Wrong size on Util_AddRotator");
static_assert(offsetof(Util_AddRotator, _r1) == 0x000000, "Member 'Util_AddRotator::_r1' has a wrong offset!");
static_assert(offsetof(Util_AddRotator, _r2) == 0x000018, "Member 'Util_AddRotator::_r2' has a wrong offset!");
static_assert(offsetof(Util_AddRotator, ReturnValue) == 0x000030, "Member 'Util_AddRotator::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.AppendText
// 0x0060 (0x0060 - 0x0000)
struct Util_AppendText final
{
public:
	class FText                                   _t1;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _t2;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _seperator;                                        // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_AppendText) == 0x000008, "Wrong alignment on Util_AppendText");
static_assert(sizeof(Util_AppendText) == 0x000060, "Wrong size on Util_AppendText");
static_assert(offsetof(Util_AppendText, _t1) == 0x000000, "Member 'Util_AppendText::_t1' has a wrong offset!");
static_assert(offsetof(Util_AppendText, _t2) == 0x000018, "Member 'Util_AppendText::_t2' has a wrong offset!");
static_assert(offsetof(Util_AppendText, _seperator) == 0x000030, "Member 'Util_AppendText::_seperator' has a wrong offset!");
static_assert(offsetof(Util_AppendText, ReturnValue) == 0x000048, "Member 'Util_AppendText::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.BuildTrajectorySpline
// 0x0070 (0x0070 - 0x0000)
struct Util_BuildTrajectorySpline final
{
public:
	class USplineComponent*                       _Spline;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSplineSetup                           _settings;                                         // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_BuildTrajectorySpline) == 0x000008, "Wrong alignment on Util_BuildTrajectorySpline");
static_assert(sizeof(Util_BuildTrajectorySpline) == 0x000070, "Wrong size on Util_BuildTrajectorySpline");
static_assert(offsetof(Util_BuildTrajectorySpline, _Spline) == 0x000000, "Member 'Util_BuildTrajectorySpline::_Spline' has a wrong offset!");
static_assert(offsetof(Util_BuildTrajectorySpline, _settings) == 0x000008, "Member 'Util_BuildTrajectorySpline::_settings' has a wrong offset!");

// Function BPGLib.Util.CalcCurrentWeek
// 0x0010 (0x0010 - 0x0000)
struct Util_CalcCurrentWeek final
{
public:
	struct FDateTime                              _start_date;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDC[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_CalcCurrentWeek) == 0x000008, "Wrong alignment on Util_CalcCurrentWeek");
static_assert(sizeof(Util_CalcCurrentWeek) == 0x000010, "Wrong size on Util_CalcCurrentWeek");
static_assert(offsetof(Util_CalcCurrentWeek, _start_date) == 0x000000, "Member 'Util_CalcCurrentWeek::_start_date' has a wrong offset!");
static_assert(offsetof(Util_CalcCurrentWeek, ReturnValue) == 0x000008, "Member 'Util_CalcCurrentWeek::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.CalcPlayRate
// 0x0010 (0x0010 - 0x0000)
struct Util_CalcPlayRate final
{
public:
	class UAnimSequenceBase*                      _anim;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _target_duration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_CalcPlayRate) == 0x000008, "Wrong alignment on Util_CalcPlayRate");
static_assert(sizeof(Util_CalcPlayRate) == 0x000010, "Wrong size on Util_CalcPlayRate");
static_assert(offsetof(Util_CalcPlayRate, _anim) == 0x000000, "Member 'Util_CalcPlayRate::_anim' has a wrong offset!");
static_assert(offsetof(Util_CalcPlayRate, _target_duration) == 0x000008, "Member 'Util_CalcPlayRate::_target_duration' has a wrong offset!");
static_assert(offsetof(Util_CalcPlayRate, ReturnValue) == 0x00000C, "Member 'Util_CalcPlayRate::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.CalcRotationalDeviation
// 0x0010 (0x0010 - 0x0000)
struct Util_CalcRotationalDeviation final
{
public:
	float                                         _yaw;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _pitch;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _base;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_CalcRotationalDeviation) == 0x000004, "Wrong alignment on Util_CalcRotationalDeviation");
static_assert(sizeof(Util_CalcRotationalDeviation) == 0x000010, "Wrong size on Util_CalcRotationalDeviation");
static_assert(offsetof(Util_CalcRotationalDeviation, _yaw) == 0x000000, "Member 'Util_CalcRotationalDeviation::_yaw' has a wrong offset!");
static_assert(offsetof(Util_CalcRotationalDeviation, _pitch) == 0x000004, "Member 'Util_CalcRotationalDeviation::_pitch' has a wrong offset!");
static_assert(offsetof(Util_CalcRotationalDeviation, _base) == 0x000008, "Member 'Util_CalcRotationalDeviation::_base' has a wrong offset!");
static_assert(offsetof(Util_CalcRotationalDeviation, ReturnValue) == 0x00000C, "Member 'Util_CalcRotationalDeviation::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.CalcWorldDirectionToUIAngle
// 0x0030 (0x0030 - 0x0000)
struct Util_CalcWorldDirectionToUIAngle final
{
public:
	class APlayerController*                      _my_pc;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _target_actor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _basis;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDD[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_CalcWorldDirectionToUIAngle) == 0x000008, "Wrong alignment on Util_CalcWorldDirectionToUIAngle");
static_assert(sizeof(Util_CalcWorldDirectionToUIAngle) == 0x000030, "Wrong size on Util_CalcWorldDirectionToUIAngle");
static_assert(offsetof(Util_CalcWorldDirectionToUIAngle, _my_pc) == 0x000000, "Member 'Util_CalcWorldDirectionToUIAngle::_my_pc' has a wrong offset!");
static_assert(offsetof(Util_CalcWorldDirectionToUIAngle, _target_actor) == 0x000008, "Member 'Util_CalcWorldDirectionToUIAngle::_target_actor' has a wrong offset!");
static_assert(offsetof(Util_CalcWorldDirectionToUIAngle, _basis) == 0x000010, "Member 'Util_CalcWorldDirectionToUIAngle::_basis' has a wrong offset!");
static_assert(offsetof(Util_CalcWorldDirectionToUIAngle, ReturnValue) == 0x000028, "Member 'Util_CalcWorldDirectionToUIAngle::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.CopyTextToClipboard
// 0x0010 (0x0010 - 0x0000)
struct Util_CopyTextToClipboard final
{
public:
	class FString                                 _text;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_CopyTextToClipboard) == 0x000008, "Wrong alignment on Util_CopyTextToClipboard");
static_assert(sizeof(Util_CopyTextToClipboard) == 0x000010, "Wrong size on Util_CopyTextToClipboard");
static_assert(offsetof(Util_CopyTextToClipboard, _text) == 0x000000, "Member 'Util_CopyTextToClipboard::_text' has a wrong offset!");

// Function BPGLib.Util.DecFloat
// 0x000C (0x000C - 0x0000)
struct Util_DecFloat final
{
public:
	float                                         _time;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delta;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_DecFloat) == 0x000004, "Wrong alignment on Util_DecFloat");
static_assert(sizeof(Util_DecFloat) == 0x00000C, "Wrong size on Util_DecFloat");
static_assert(offsetof(Util_DecFloat, _time) == 0x000000, "Member 'Util_DecFloat::_time' has a wrong offset!");
static_assert(offsetof(Util_DecFloat, _delta) == 0x000004, "Member 'Util_DecFloat::_delta' has a wrong offset!");
static_assert(offsetof(Util_DecFloat, ReturnValue) == 0x000008, "Member 'Util_DecFloat::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.DecFloatClamp
// 0x0010 (0x0010 - 0x0000)
struct Util_DecFloatClamp final
{
public:
	float                                         _time;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delta;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _min;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_DecFloatClamp) == 0x000004, "Wrong alignment on Util_DecFloatClamp");
static_assert(sizeof(Util_DecFloatClamp) == 0x000010, "Wrong size on Util_DecFloatClamp");
static_assert(offsetof(Util_DecFloatClamp, _time) == 0x000000, "Member 'Util_DecFloatClamp::_time' has a wrong offset!");
static_assert(offsetof(Util_DecFloatClamp, _delta) == 0x000004, "Member 'Util_DecFloatClamp::_delta' has a wrong offset!");
static_assert(offsetof(Util_DecFloatClamp, _min) == 0x000008, "Member 'Util_DecFloatClamp::_min' has a wrong offset!");
static_assert(offsetof(Util_DecFloatClamp, ReturnValue) == 0x00000C, "Member 'Util_DecFloatClamp::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.DeprojectScreenToWorld
// 0x0058 (0x0058 - 0x0000)
struct Util_DeprojectScreenToWorld final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _ss_pos;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _depth;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _out_ws_pos;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _out_ws_dir;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BDF[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_DeprojectScreenToWorld) == 0x000008, "Wrong alignment on Util_DeprojectScreenToWorld");
static_assert(sizeof(Util_DeprojectScreenToWorld) == 0x000058, "Wrong size on Util_DeprojectScreenToWorld");
static_assert(offsetof(Util_DeprojectScreenToWorld, _world_ctx) == 0x000000, "Member 'Util_DeprojectScreenToWorld::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_DeprojectScreenToWorld, _ss_pos) == 0x000008, "Member 'Util_DeprojectScreenToWorld::_ss_pos' has a wrong offset!");
static_assert(offsetof(Util_DeprojectScreenToWorld, _depth) == 0x000018, "Member 'Util_DeprojectScreenToWorld::_depth' has a wrong offset!");
static_assert(offsetof(Util_DeprojectScreenToWorld, _out_ws_pos) == 0x000020, "Member 'Util_DeprojectScreenToWorld::_out_ws_pos' has a wrong offset!");
static_assert(offsetof(Util_DeprojectScreenToWorld, _out_ws_dir) == 0x000038, "Member 'Util_DeprojectScreenToWorld::_out_ws_dir' has a wrong offset!");
static_assert(offsetof(Util_DeprojectScreenToWorld, ReturnValue) == 0x000050, "Member 'Util_DeprojectScreenToWorld::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.ExitGame
// 0x0008 (0x0008 - 0x0000)
struct Util_ExitGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_ExitGame) == 0x000008, "Wrong alignment on Util_ExitGame");
static_assert(sizeof(Util_ExitGame) == 0x000008, "Wrong size on Util_ExitGame");
static_assert(offsetof(Util_ExitGame, WorldContextObject) == 0x000000, "Member 'Util_ExitGame::WorldContextObject' has a wrong offset!");

// Function BPGLib.Util.ForceLoadAllMipmaps
// 0x0008 (0x0008 - 0x0000)
struct Util_ForceLoadAllMipmaps final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_ForceLoadAllMipmaps) == 0x000008, "Wrong alignment on Util_ForceLoadAllMipmaps");
static_assert(sizeof(Util_ForceLoadAllMipmaps) == 0x000008, "Wrong size on Util_ForceLoadAllMipmaps");
static_assert(offsetof(Util_ForceLoadAllMipmaps, _Actor) == 0x000000, "Member 'Util_ForceLoadAllMipmaps::_Actor' has a wrong offset!");

// Function BPGLib.Util.GetActorBound
// 0x0040 (0x0040 - 0x0000)
struct Util_GetActorBound final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetActorBound) == 0x000008, "Wrong alignment on Util_GetActorBound");
static_assert(sizeof(Util_GetActorBound) == 0x000040, "Wrong size on Util_GetActorBound");
static_assert(offsetof(Util_GetActorBound, _Actor) == 0x000000, "Member 'Util_GetActorBound::_Actor' has a wrong offset!");
static_assert(offsetof(Util_GetActorBound, ReturnValue) == 0x000008, "Member 'Util_GetActorBound::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetAngleBetweenDirections
// 0x0038 (0x0038 - 0x0000)
struct Util_GetAngleBetweenDirections final
{
public:
	struct FVector                                V1;                                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                V2;                                                // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE0[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_GetAngleBetweenDirections) == 0x000008, "Wrong alignment on Util_GetAngleBetweenDirections");
static_assert(sizeof(Util_GetAngleBetweenDirections) == 0x000038, "Wrong size on Util_GetAngleBetweenDirections");
static_assert(offsetof(Util_GetAngleBetweenDirections, V1) == 0x000000, "Member 'Util_GetAngleBetweenDirections::V1' has a wrong offset!");
static_assert(offsetof(Util_GetAngleBetweenDirections, V2) == 0x000018, "Member 'Util_GetAngleBetweenDirections::V2' has a wrong offset!");
static_assert(offsetof(Util_GetAngleBetweenDirections, ReturnValue) == 0x000030, "Member 'Util_GetAngleBetweenDirections::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetBoxBound
// 0x0040 (0x0040 - 0x0000)
struct Util_GetBoxBound final
{
public:
	class UPrimitiveComponent*                    _component;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetBoxBound) == 0x000008, "Wrong alignment on Util_GetBoxBound");
static_assert(sizeof(Util_GetBoxBound) == 0x000040, "Wrong size on Util_GetBoxBound");
static_assert(offsetof(Util_GetBoxBound, _component) == 0x000000, "Member 'Util_GetBoxBound::_component' has a wrong offset!");
static_assert(offsetof(Util_GetBoxBound, ReturnValue) == 0x000008, "Member 'Util_GetBoxBound::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetBPGInputSubsystem
// 0x0010 (0x0010 - 0x0000)
struct Util_GetBPGInputSubsystem final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPGInputSubsystem*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetBPGInputSubsystem) == 0x000008, "Wrong alignment on Util_GetBPGInputSubsystem");
static_assert(sizeof(Util_GetBPGInputSubsystem) == 0x000010, "Wrong size on Util_GetBPGInputSubsystem");
static_assert(offsetof(Util_GetBPGInputSubsystem, _world_ctx) == 0x000000, "Member 'Util_GetBPGInputSubsystem::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_GetBPGInputSubsystem, ReturnValue) == 0x000008, "Member 'Util_GetBPGInputSubsystem::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetClassFName
// 0x0010 (0x0010 - 0x0000)
struct Util_GetClassFName final
{
public:
	class UClass*                                 _Class;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetClassFName) == 0x000008, "Wrong alignment on Util_GetClassFName");
static_assert(sizeof(Util_GetClassFName) == 0x000010, "Wrong size on Util_GetClassFName");
static_assert(offsetof(Util_GetClassFName, _Class) == 0x000000, "Member 'Util_GetClassFName::_Class' has a wrong offset!");
static_assert(offsetof(Util_GetClassFName, ReturnValue) == 0x000008, "Member 'Util_GetClassFName::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetDefaultLanguage
// 0x0001 (0x0001 - 0x0000)
struct Util_GetDefaultLanguage final
{
public:
	EOptionLanguage                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetDefaultLanguage) == 0x000001, "Wrong alignment on Util_GetDefaultLanguage");
static_assert(sizeof(Util_GetDefaultLanguage) == 0x000001, "Wrong size on Util_GetDefaultLanguage");
static_assert(offsetof(Util_GetDefaultLanguage, ReturnValue) == 0x000000, "Member 'Util_GetDefaultLanguage::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetDisplayDateTime
// 0x00C8 (0x00C8 - 0x0000)
struct Util_GetDisplayDateTime final
{
public:
	struct FDateTime                              _date_time;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _time_format;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _years_format;                                     // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _months_format;                                    // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _days_format;                                      // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _hours_format;                                     // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _minutes_format;                                   // 0x0080(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _seconds_format;                                   // 0x0098(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x00B0(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetDisplayDateTime) == 0x000008, "Wrong alignment on Util_GetDisplayDateTime");
static_assert(sizeof(Util_GetDisplayDateTime) == 0x0000C8, "Wrong size on Util_GetDisplayDateTime");
static_assert(offsetof(Util_GetDisplayDateTime, _date_time) == 0x000000, "Member 'Util_GetDisplayDateTime::_date_time' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _time_format) == 0x000008, "Member 'Util_GetDisplayDateTime::_time_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _years_format) == 0x000020, "Member 'Util_GetDisplayDateTime::_years_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _months_format) == 0x000038, "Member 'Util_GetDisplayDateTime::_months_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _days_format) == 0x000050, "Member 'Util_GetDisplayDateTime::_days_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _hours_format) == 0x000068, "Member 'Util_GetDisplayDateTime::_hours_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _minutes_format) == 0x000080, "Member 'Util_GetDisplayDateTime::_minutes_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, _seconds_format) == 0x000098, "Member 'Util_GetDisplayDateTime::_seconds_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayDateTime, ReturnValue) == 0x0000B0, "Member 'Util_GetDisplayDateTime::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetDisplayTimespan
// 0x00A8 (0x00A8 - 0x0000)
struct Util_GetDisplayTimespan final
{
public:
	struct FTimespan                              _time_span;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _time_format;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   _days_format;                                      // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _hours_format;                                     // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _minutes_format;                                   // 0x0050(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   _seconds_format;                                   // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         _time_digits;                                      // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _show_zero_value;                                  // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE1[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Max_time_units_to_show;                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE2[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ReturnValue;                                       // 0x0090(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetDisplayTimespan) == 0x000008, "Wrong alignment on Util_GetDisplayTimespan");
static_assert(sizeof(Util_GetDisplayTimespan) == 0x0000A8, "Wrong size on Util_GetDisplayTimespan");
static_assert(offsetof(Util_GetDisplayTimespan, _time_span) == 0x000000, "Member 'Util_GetDisplayTimespan::_time_span' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _time_format) == 0x000008, "Member 'Util_GetDisplayTimespan::_time_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _days_format) == 0x000020, "Member 'Util_GetDisplayTimespan::_days_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _hours_format) == 0x000038, "Member 'Util_GetDisplayTimespan::_hours_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _minutes_format) == 0x000050, "Member 'Util_GetDisplayTimespan::_minutes_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _seconds_format) == 0x000068, "Member 'Util_GetDisplayTimespan::_seconds_format' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _time_digits) == 0x000080, "Member 'Util_GetDisplayTimespan::_time_digits' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, _show_zero_value) == 0x000084, "Member 'Util_GetDisplayTimespan::_show_zero_value' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, Max_time_units_to_show) == 0x000088, "Member 'Util_GetDisplayTimespan::Max_time_units_to_show' has a wrong offset!");
static_assert(offsetof(Util_GetDisplayTimespan, ReturnValue) == 0x000090, "Member 'Util_GetDisplayTimespan::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetNetRole
// 0x0010 (0x0010 - 0x0000)
struct Util_GetNetRole final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRoles                                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_GetNetRole) == 0x000008, "Wrong alignment on Util_GetNetRole");
static_assert(sizeof(Util_GetNetRole) == 0x000010, "Wrong size on Util_GetNetRole");
static_assert(offsetof(Util_GetNetRole, _Actor) == 0x000000, "Member 'Util_GetNetRole::_Actor' has a wrong offset!");
static_assert(offsetof(Util_GetNetRole, ReturnValue) == 0x000008, "Member 'Util_GetNetRole::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetNextDayZeroUTC
// 0x0008 (0x0008 - 0x0000)
struct Util_GetNextDayZeroUTC final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetNextDayZeroUTC) == 0x000008, "Wrong alignment on Util_GetNextDayZeroUTC");
static_assert(sizeof(Util_GetNextDayZeroUTC) == 0x000008, "Wrong size on Util_GetNextDayZeroUTC");
static_assert(offsetof(Util_GetNextDayZeroUTC, ReturnValue) == 0x000000, "Member 'Util_GetNextDayZeroUTC::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetNicknameLength
// 0x0018 (0x0018 - 0x0000)
struct Util_GetNicknameLength final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_GetNicknameLength) == 0x000008, "Wrong alignment on Util_GetNicknameLength");
static_assert(sizeof(Util_GetNicknameLength) == 0x000018, "Wrong size on Util_GetNicknameLength");
static_assert(offsetof(Util_GetNicknameLength, Str) == 0x000000, "Member 'Util_GetNicknameLength::Str' has a wrong offset!");
static_assert(offsetof(Util_GetNicknameLength, ReturnValue) == 0x000010, "Member 'Util_GetNicknameLength::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetProjectionMatrix
// 0x0090 (0x0090 - 0x0000)
struct Util_GetProjectionMatrix final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE5[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetProjectionMatrix) == 0x000010, "Wrong alignment on Util_GetProjectionMatrix");
static_assert(sizeof(Util_GetProjectionMatrix) == 0x000090, "Wrong size on Util_GetProjectionMatrix");
static_assert(offsetof(Util_GetProjectionMatrix, _world_ctx) == 0x000000, "Member 'Util_GetProjectionMatrix::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_GetProjectionMatrix, ReturnValue) == 0x000010, "Member 'Util_GetProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetRandomVector
// 0x0050 (0x0050 - 0x0000)
struct Util_GetRandomVector final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Random_angle_range;                                // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE6[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetRandomVector) == 0x000008, "Wrong alignment on Util_GetRandomVector");
static_assert(sizeof(Util_GetRandomVector) == 0x000050, "Wrong size on Util_GetRandomVector");
static_assert(offsetof(Util_GetRandomVector, Start) == 0x000000, "Member 'Util_GetRandomVector::Start' has a wrong offset!");
static_assert(offsetof(Util_GetRandomVector, End) == 0x000018, "Member 'Util_GetRandomVector::End' has a wrong offset!");
static_assert(offsetof(Util_GetRandomVector, Random_angle_range) == 0x000030, "Member 'Util_GetRandomVector::Random_angle_range' has a wrong offset!");
static_assert(offsetof(Util_GetRandomVector, ReturnValue) == 0x000038, "Member 'Util_GetRandomVector::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetRemainTimespan
// 0x0010 (0x0010 - 0x0000)
struct Util_GetRemainTimespan final
{
public:
	struct FDateTime                              _target_date_time;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetRemainTimespan) == 0x000008, "Wrong alignment on Util_GetRemainTimespan");
static_assert(sizeof(Util_GetRemainTimespan) == 0x000010, "Wrong size on Util_GetRemainTimespan");
static_assert(offsetof(Util_GetRemainTimespan, _target_date_time) == 0x000000, "Member 'Util_GetRemainTimespan::_target_date_time' has a wrong offset!");
static_assert(offsetof(Util_GetRemainTimespan, ReturnValue) == 0x000008, "Member 'Util_GetRemainTimespan::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetRotatedWidgetTransform
// 0x0068 (0x0068 - 0x0000)
struct Util_GetRotatedWidgetTransform final
{
public:
	struct FVector2D                              _offset;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _angle_in_deg;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector2D                              _aspect_scaler;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _local_rotation_offset;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE8[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FWidgetTransform                       ReturnValue;                                       // 0x0030(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetRotatedWidgetTransform) == 0x000008, "Wrong alignment on Util_GetRotatedWidgetTransform");
static_assert(sizeof(Util_GetRotatedWidgetTransform) == 0x000068, "Wrong size on Util_GetRotatedWidgetTransform");
static_assert(offsetof(Util_GetRotatedWidgetTransform, _offset) == 0x000000, "Member 'Util_GetRotatedWidgetTransform::_offset' has a wrong offset!");
static_assert(offsetof(Util_GetRotatedWidgetTransform, _angle_in_deg) == 0x000010, "Member 'Util_GetRotatedWidgetTransform::_angle_in_deg' has a wrong offset!");
static_assert(offsetof(Util_GetRotatedWidgetTransform, _aspect_scaler) == 0x000018, "Member 'Util_GetRotatedWidgetTransform::_aspect_scaler' has a wrong offset!");
static_assert(offsetof(Util_GetRotatedWidgetTransform, _local_rotation_offset) == 0x000028, "Member 'Util_GetRotatedWidgetTransform::_local_rotation_offset' has a wrong offset!");
static_assert(offsetof(Util_GetRotatedWidgetTransform, ReturnValue) == 0x000030, "Member 'Util_GetRotatedWidgetTransform::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetRotatorFromTwoDirections
// 0x0048 (0x0048 - 0x0000)
struct Util_GetRotatorFromTwoDirections final
{
public:
	struct FVector                                _dir1;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _dir2;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetRotatorFromTwoDirections) == 0x000008, "Wrong alignment on Util_GetRotatorFromTwoDirections");
static_assert(sizeof(Util_GetRotatorFromTwoDirections) == 0x000048, "Wrong size on Util_GetRotatorFromTwoDirections");
static_assert(offsetof(Util_GetRotatorFromTwoDirections, _dir1) == 0x000000, "Member 'Util_GetRotatorFromTwoDirections::_dir1' has a wrong offset!");
static_assert(offsetof(Util_GetRotatorFromTwoDirections, _dir2) == 0x000018, "Member 'Util_GetRotatorFromTwoDirections::_dir2' has a wrong offset!");
static_assert(offsetof(Util_GetRotatorFromTwoDirections, ReturnValue) == 0x000030, "Member 'Util_GetRotatorFromTwoDirections::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetViewMatrix
// 0x0090 (0x0090 - 0x0000)
struct Util_GetViewMatrix final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE9[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetViewMatrix) == 0x000010, "Wrong alignment on Util_GetViewMatrix");
static_assert(sizeof(Util_GetViewMatrix) == 0x000090, "Wrong size on Util_GetViewMatrix");
static_assert(offsetof(Util_GetViewMatrix, _world_ctx) == 0x000000, "Member 'Util_GetViewMatrix::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_GetViewMatrix, ReturnValue) == 0x000010, "Member 'Util_GetViewMatrix::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetViewportSize
// 0x0018 (0x0018 - 0x0000)
struct Util_GetViewportSize final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetViewportSize) == 0x000008, "Wrong alignment on Util_GetViewportSize");
static_assert(sizeof(Util_GetViewportSize) == 0x000018, "Wrong size on Util_GetViewportSize");
static_assert(offsetof(Util_GetViewportSize, _world_ctx) == 0x000000, "Member 'Util_GetViewportSize::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_GetViewportSize, ReturnValue) == 0x000008, "Member 'Util_GetViewportSize::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetViewProjectionMatrix
// 0x0090 (0x0090 - 0x0000)
struct Util_GetViewProjectionMatrix final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEA[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_GetViewProjectionMatrix) == 0x000010, "Wrong alignment on Util_GetViewProjectionMatrix");
static_assert(sizeof(Util_GetViewProjectionMatrix) == 0x000090, "Wrong size on Util_GetViewProjectionMatrix");
static_assert(offsetof(Util_GetViewProjectionMatrix, _world_ctx) == 0x000000, "Member 'Util_GetViewProjectionMatrix::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_GetViewProjectionMatrix, ReturnValue) == 0x000010, "Member 'Util_GetViewProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.GetWidgetPositionAndSize
// 0x0030 (0x0030 - 0x0000)
struct Util_GetWidgetPositionAndSize final
{
public:
	class UWidget*                                _widget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _out_pos;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _out_size;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEB[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_GetWidgetPositionAndSize) == 0x000008, "Wrong alignment on Util_GetWidgetPositionAndSize");
static_assert(sizeof(Util_GetWidgetPositionAndSize) == 0x000030, "Wrong size on Util_GetWidgetPositionAndSize");
static_assert(offsetof(Util_GetWidgetPositionAndSize, _widget) == 0x000000, "Member 'Util_GetWidgetPositionAndSize::_widget' has a wrong offset!");
static_assert(offsetof(Util_GetWidgetPositionAndSize, _out_pos) == 0x000008, "Member 'Util_GetWidgetPositionAndSize::_out_pos' has a wrong offset!");
static_assert(offsetof(Util_GetWidgetPositionAndSize, _out_size) == 0x000018, "Member 'Util_GetWidgetPositionAndSize::_out_size' has a wrong offset!");
static_assert(offsetof(Util_GetWidgetPositionAndSize, ReturnValue) == 0x000028, "Member 'Util_GetWidgetPositionAndSize::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.HasDisplay
// 0x0010 (0x0010 - 0x0000)
struct Util_HasDisplay final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_HasDisplay) == 0x000008, "Wrong alignment on Util_HasDisplay");
static_assert(sizeof(Util_HasDisplay) == 0x000010, "Wrong size on Util_HasDisplay");
static_assert(offsetof(Util_HasDisplay, _world_ctx) == 0x000000, "Member 'Util_HasDisplay::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_HasDisplay, ReturnValue) == 0x000008, "Member 'Util_HasDisplay::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IncFloat
// 0x000C (0x000C - 0x0000)
struct Util_IncFloat final
{
public:
	float                                         _time;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delta;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_IncFloat) == 0x000004, "Wrong alignment on Util_IncFloat");
static_assert(sizeof(Util_IncFloat) == 0x00000C, "Wrong size on Util_IncFloat");
static_assert(offsetof(Util_IncFloat, _time) == 0x000000, "Member 'Util_IncFloat::_time' has a wrong offset!");
static_assert(offsetof(Util_IncFloat, _delta) == 0x000004, "Member 'Util_IncFloat::_delta' has a wrong offset!");
static_assert(offsetof(Util_IncFloat, ReturnValue) == 0x000008, "Member 'Util_IncFloat::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IncFloatClamp
// 0x0010 (0x0010 - 0x0000)
struct Util_IncFloatClamp final
{
public:
	float                                         _time;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _delta;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _max;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_IncFloatClamp) == 0x000004, "Wrong alignment on Util_IncFloatClamp");
static_assert(sizeof(Util_IncFloatClamp) == 0x000010, "Wrong size on Util_IncFloatClamp");
static_assert(offsetof(Util_IncFloatClamp, _time) == 0x000000, "Member 'Util_IncFloatClamp::_time' has a wrong offset!");
static_assert(offsetof(Util_IncFloatClamp, _delta) == 0x000004, "Member 'Util_IncFloatClamp::_delta' has a wrong offset!");
static_assert(offsetof(Util_IncFloatClamp, _max) == 0x000008, "Member 'Util_IncFloatClamp::_max' has a wrong offset!");
static_assert(offsetof(Util_IncFloatClamp, ReturnValue) == 0x00000C, "Member 'Util_IncFloatClamp::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsAI
// 0x0010 (0x0010 - 0x0000)
struct Util_IsAI final
{
public:
	const class APawn*                            _pawn;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BED[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsAI) == 0x000008, "Wrong alignment on Util_IsAI");
static_assert(sizeof(Util_IsAI) == 0x000010, "Wrong size on Util_IsAI");
static_assert(offsetof(Util_IsAI, _pawn) == 0x000000, "Member 'Util_IsAI::_pawn' has a wrong offset!");
static_assert(offsetof(Util_IsAI, ReturnValue) == 0x000008, "Member 'Util_IsAI::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsAnyServer
// 0x0010 (0x0010 - 0x0000)
struct Util_IsAnyServer final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsAnyServer) == 0x000008, "Wrong alignment on Util_IsAnyServer");
static_assert(sizeof(Util_IsAnyServer) == 0x000010, "Wrong size on Util_IsAnyServer");
static_assert(offsetof(Util_IsAnyServer, _world_ctx) == 0x000000, "Member 'Util_IsAnyServer::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsAnyServer, ReturnValue) == 0x000008, "Member 'Util_IsAnyServer::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsClient
// 0x0010 (0x0010 - 0x0000)
struct Util_IsClient final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsClient) == 0x000008, "Wrong alignment on Util_IsClient");
static_assert(sizeof(Util_IsClient) == 0x000010, "Wrong size on Util_IsClient");
static_assert(offsetof(Util_IsClient, _world_ctx) == 0x000000, "Member 'Util_IsClient::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsClient, ReturnValue) == 0x000008, "Member 'Util_IsClient::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsDediServer
// 0x0010 (0x0010 - 0x0000)
struct Util_IsDediServer final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsDediServer) == 0x000008, "Wrong alignment on Util_IsDediServer");
static_assert(sizeof(Util_IsDediServer) == 0x000010, "Wrong size on Util_IsDediServer");
static_assert(offsetof(Util_IsDediServer, _world_ctx) == 0x000000, "Member 'Util_IsDediServer::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsDediServer, ReturnValue) == 0x000008, "Member 'Util_IsDediServer::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsDediServerAndNoPIE
// 0x0010 (0x0010 - 0x0000)
struct Util_IsDediServerAndNoPIE final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsDediServerAndNoPIE) == 0x000008, "Wrong alignment on Util_IsDediServerAndNoPIE");
static_assert(sizeof(Util_IsDediServerAndNoPIE) == 0x000010, "Wrong size on Util_IsDediServerAndNoPIE");
static_assert(offsetof(Util_IsDediServerAndNoPIE, _world_ctx) == 0x000000, "Member 'Util_IsDediServerAndNoPIE::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsDediServerAndNoPIE, ReturnValue) == 0x000008, "Member 'Util_IsDediServerAndNoPIE::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsGamepadAttached
// 0x0001 (0x0001 - 0x0000)
struct Util_IsGamepadAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_IsGamepadAttached) == 0x000001, "Wrong alignment on Util_IsGamepadAttached");
static_assert(sizeof(Util_IsGamepadAttached) == 0x000001, "Wrong size on Util_IsGamepadAttached");
static_assert(offsetof(Util_IsGamepadAttached, ReturnValue) == 0x000000, "Member 'Util_IsGamepadAttached::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsInPIE
// 0x0010 (0x0010 - 0x0000)
struct Util_IsInPIE final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsInPIE) == 0x000008, "Wrong alignment on Util_IsInPIE");
static_assert(sizeof(Util_IsInPIE) == 0x000010, "Wrong size on Util_IsInPIE");
static_assert(offsetof(Util_IsInPIE, _world_ctx) == 0x000000, "Member 'Util_IsInPIE::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsInPIE, ReturnValue) == 0x000008, "Member 'Util_IsInPIE::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsListenServer
// 0x0010 (0x0010 - 0x0000)
struct Util_IsListenServer final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsListenServer) == 0x000008, "Wrong alignment on Util_IsListenServer");
static_assert(sizeof(Util_IsListenServer) == 0x000010, "Wrong size on Util_IsListenServer");
static_assert(offsetof(Util_IsListenServer, _world_ctx) == 0x000000, "Member 'Util_IsListenServer::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsListenServer, ReturnValue) == 0x000008, "Member 'Util_IsListenServer::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsNetRole
// 0x0010 (0x0010 - 0x0000)
struct Util_IsNetRole final
{
public:
	class AActor*                                 _Actor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRoles                                     _role;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF4[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsNetRole) == 0x000008, "Wrong alignment on Util_IsNetRole");
static_assert(sizeof(Util_IsNetRole) == 0x000010, "Wrong size on Util_IsNetRole");
static_assert(offsetof(Util_IsNetRole, _Actor) == 0x000000, "Member 'Util_IsNetRole::_Actor' has a wrong offset!");
static_assert(offsetof(Util_IsNetRole, _role) == 0x000008, "Member 'Util_IsNetRole::_role' has a wrong offset!");
static_assert(offsetof(Util_IsNetRole, ReturnValue) == 0x000009, "Member 'Util_IsNetRole::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsOnlineSessionCreated
// 0x0010 (0x0010 - 0x0000)
struct Util_IsOnlineSessionCreated final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsOnlineSessionCreated) == 0x000008, "Wrong alignment on Util_IsOnlineSessionCreated");
static_assert(sizeof(Util_IsOnlineSessionCreated) == 0x000010, "Wrong size on Util_IsOnlineSessionCreated");
static_assert(offsetof(Util_IsOnlineSessionCreated, _world_ctx) == 0x000000, "Member 'Util_IsOnlineSessionCreated::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsOnlineSessionCreated, ReturnValue) == 0x000008, "Member 'Util_IsOnlineSessionCreated::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsOnListenServer
// 0x0010 (0x0010 - 0x0000)
struct Util_IsOnListenServer final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsOnListenServer) == 0x000008, "Wrong alignment on Util_IsOnListenServer");
static_assert(sizeof(Util_IsOnListenServer) == 0x000010, "Wrong size on Util_IsOnListenServer");
static_assert(offsetof(Util_IsOnListenServer, _world_ctx) == 0x000000, "Member 'Util_IsOnListenServer::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsOnListenServer, ReturnValue) == 0x000008, "Member 'Util_IsOnListenServer::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.IsStandalone
// 0x0010 (0x0010 - 0x0000)
struct Util_IsStandalone final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_IsStandalone) == 0x000008, "Wrong alignment on Util_IsStandalone");
static_assert(sizeof(Util_IsStandalone) == 0x000010, "Wrong size on Util_IsStandalone");
static_assert(offsetof(Util_IsStandalone, _world_ctx) == 0x000000, "Member 'Util_IsStandalone::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_IsStandalone, ReturnValue) == 0x000008, "Member 'Util_IsStandalone::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.OneMinus
// 0x0008 (0x0008 - 0x0000)
struct Util_OneMinus final
{
public:
	float                                         _val;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_OneMinus) == 0x000004, "Wrong alignment on Util_OneMinus");
static_assert(sizeof(Util_OneMinus) == 0x000008, "Wrong size on Util_OneMinus");
static_assert(offsetof(Util_OneMinus, _val) == 0x000000, "Member 'Util_OneMinus::_val' has a wrong offset!");
static_assert(offsetof(Util_OneMinus, ReturnValue) == 0x000004, "Member 'Util_OneMinus::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.ProjectWorldToScreen
// 0x0038 (0x0038 - 0x0000)
struct Util_ProjectWorldToScreen final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _ws_pos;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _out_ss_pos;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF8[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_ProjectWorldToScreen) == 0x000008, "Wrong alignment on Util_ProjectWorldToScreen");
static_assert(sizeof(Util_ProjectWorldToScreen) == 0x000038, "Wrong size on Util_ProjectWorldToScreen");
static_assert(offsetof(Util_ProjectWorldToScreen, _world_ctx) == 0x000000, "Member 'Util_ProjectWorldToScreen::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_ProjectWorldToScreen, _ws_pos) == 0x000008, "Member 'Util_ProjectWorldToScreen::_ws_pos' has a wrong offset!");
static_assert(offsetof(Util_ProjectWorldToScreen, _out_ss_pos) == 0x000020, "Member 'Util_ProjectWorldToScreen::_out_ss_pos' has a wrong offset!");
static_assert(offsetof(Util_ProjectWorldToScreen, ReturnValue) == 0x000030, "Member 'Util_ProjectWorldToScreen::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.RemapAngle_180_To_360
// 0x0008 (0x0008 - 0x0000)
struct Util_RemapAngle_180_To_360 final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_RemapAngle_180_To_360) == 0x000004, "Wrong alignment on Util_RemapAngle_180_To_360");
static_assert(sizeof(Util_RemapAngle_180_To_360) == 0x000008, "Wrong size on Util_RemapAngle_180_To_360");
static_assert(offsetof(Util_RemapAngle_180_To_360, Angle) == 0x000000, "Member 'Util_RemapAngle_180_To_360::Angle' has a wrong offset!");
static_assert(offsetof(Util_RemapAngle_180_To_360, ReturnValue) == 0x000004, "Member 'Util_RemapAngle_180_To_360::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.RemapAngle_360_To_180
// 0x0008 (0x0008 - 0x0000)
struct Util_RemapAngle_360_To_180 final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_RemapAngle_360_To_180) == 0x000004, "Wrong alignment on Util_RemapAngle_360_To_180");
static_assert(sizeof(Util_RemapAngle_360_To_180) == 0x000008, "Wrong size on Util_RemapAngle_360_To_180");
static_assert(offsetof(Util_RemapAngle_360_To_180, Angle) == 0x000000, "Member 'Util_RemapAngle_360_To_180::Angle' has a wrong offset!");
static_assert(offsetof(Util_RemapAngle_360_To_180, ReturnValue) == 0x000004, "Member 'Util_RemapAngle_360_To_180::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.RemapRotator_180_To_360
// 0x0030 (0x0030 - 0x0000)
struct Util_RemapRotator_180_To_360 final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_RemapRotator_180_To_360) == 0x000008, "Wrong alignment on Util_RemapRotator_180_To_360");
static_assert(sizeof(Util_RemapRotator_180_To_360) == 0x000030, "Wrong size on Util_RemapRotator_180_To_360");
static_assert(offsetof(Util_RemapRotator_180_To_360, Rot) == 0x000000, "Member 'Util_RemapRotator_180_To_360::Rot' has a wrong offset!");
static_assert(offsetof(Util_RemapRotator_180_To_360, ReturnValue) == 0x000018, "Member 'Util_RemapRotator_180_To_360::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.RemapRotator_360_To_180
// 0x0030 (0x0030 - 0x0000)
struct Util_RemapRotator_360_To_180 final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_RemapRotator_360_To_180) == 0x000008, "Wrong alignment on Util_RemapRotator_360_To_180");
static_assert(sizeof(Util_RemapRotator_360_To_180) == 0x000030, "Wrong size on Util_RemapRotator_360_To_180");
static_assert(offsetof(Util_RemapRotator_360_To_180, Rot) == 0x000000, "Member 'Util_RemapRotator_360_To_180::Rot' has a wrong offset!");
static_assert(offsetof(Util_RemapRotator_360_To_180, ReturnValue) == 0x000018, "Member 'Util_RemapRotator_360_To_180::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SafeSetWidgetVisibility
// 0x0010 (0x0010 - 0x0000)
struct Util_SafeSetWidgetVisibility final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              _visibility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_SafeSetWidgetVisibility) == 0x000008, "Wrong alignment on Util_SafeSetWidgetVisibility");
static_assert(sizeof(Util_SafeSetWidgetVisibility) == 0x000010, "Wrong size on Util_SafeSetWidgetVisibility");
static_assert(offsetof(Util_SafeSetWidgetVisibility, Widget) == 0x000000, "Member 'Util_SafeSetWidgetVisibility::Widget' has a wrong offset!");
static_assert(offsetof(Util_SafeSetWidgetVisibility, _visibility) == 0x000008, "Member 'Util_SafeSetWidgetVisibility::_visibility' has a wrong offset!");

// Function BPGLib.Util.SecondsToTimespan
// 0x0010 (0x0010 - 0x0000)
struct Util_SecondsToTimespan final
{
public:
	int32                                         _secs;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_SecondsToTimespan) == 0x000008, "Wrong alignment on Util_SecondsToTimespan");
static_assert(sizeof(Util_SecondsToTimespan) == 0x000010, "Wrong size on Util_SecondsToTimespan");
static_assert(offsetof(Util_SecondsToTimespan, _secs) == 0x000000, "Member 'Util_SecondsToTimespan::_secs' has a wrong offset!");
static_assert(offsetof(Util_SecondsToTimespan, ReturnValue) == 0x000008, "Member 'Util_SecondsToTimespan::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SecondsToTimespanString
// 0x0018 (0x0018 - 0x0000)
struct Util_SecondsToTimespanString final
{
public:
	int32                                         _secs;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_SecondsToTimespanString) == 0x000008, "Wrong alignment on Util_SecondsToTimespanString");
static_assert(sizeof(Util_SecondsToTimespanString) == 0x000018, "Wrong size on Util_SecondsToTimespanString");
static_assert(offsetof(Util_SecondsToTimespanString, _secs) == 0x000000, "Member 'Util_SecondsToTimespanString::_secs' has a wrong offset!");
static_assert(offsetof(Util_SecondsToTimespanString, ReturnValue) == 0x000008, "Member 'Util_SecondsToTimespanString::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SetActivateSubLevel
// 0x0018 (0x0018 - 0x0000)
struct Util_SetActivateSubLevel final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 _level;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _is_active;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFC[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_SetActivateSubLevel) == 0x000008, "Wrong alignment on Util_SetActivateSubLevel");
static_assert(sizeof(Util_SetActivateSubLevel) == 0x000018, "Wrong size on Util_SetActivateSubLevel");
static_assert(offsetof(Util_SetActivateSubLevel, _world_ctx) == 0x000000, "Member 'Util_SetActivateSubLevel::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_SetActivateSubLevel, _level) == 0x000008, "Member 'Util_SetActivateSubLevel::_level' has a wrong offset!");
static_assert(offsetof(Util_SetActivateSubLevel, _is_active) == 0x000010, "Member 'Util_SetActivateSubLevel::_is_active' has a wrong offset!");
static_assert(offsetof(Util_SetActivateSubLevel, ReturnValue) == 0x000011, "Member 'Util_SetActivateSubLevel::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SetRenderToCustomDepth
// 0x0010 (0x0010 - 0x0000)
struct Util_SetRenderToCustomDepth final
{
public:
	class USceneComponent*                        _component;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _enable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutlineColor                                 _color;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _recursive;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _using_scene_depth;                                // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFD[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_SetRenderToCustomDepth) == 0x000008, "Wrong alignment on Util_SetRenderToCustomDepth");
static_assert(sizeof(Util_SetRenderToCustomDepth) == 0x000010, "Wrong size on Util_SetRenderToCustomDepth");
static_assert(offsetof(Util_SetRenderToCustomDepth, _component) == 0x000000, "Member 'Util_SetRenderToCustomDepth::_component' has a wrong offset!");
static_assert(offsetof(Util_SetRenderToCustomDepth, _enable) == 0x000008, "Member 'Util_SetRenderToCustomDepth::_enable' has a wrong offset!");
static_assert(offsetof(Util_SetRenderToCustomDepth, _color) == 0x000009, "Member 'Util_SetRenderToCustomDepth::_color' has a wrong offset!");
static_assert(offsetof(Util_SetRenderToCustomDepth, _recursive) == 0x00000A, "Member 'Util_SetRenderToCustomDepth::_recursive' has a wrong offset!");
static_assert(offsetof(Util_SetRenderToCustomDepth, _using_scene_depth) == 0x00000B, "Member 'Util_SetRenderToCustomDepth::_using_scene_depth' has a wrong offset!");

// Function BPGLib.Util.SpawnActor
// 0x00A0 (0x00A0 - 0x0000)
struct Util_SpawnActor final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _owner;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 _Class;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFE[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTransform                             _tx;                                               // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  _instigator;                                       // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _replication;                                      // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            _collision;                                        // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BFF[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C00[0x8];                                     // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_SpawnActor) == 0x000010, "Wrong alignment on Util_SpawnActor");
static_assert(sizeof(Util_SpawnActor) == 0x0000A0, "Wrong size on Util_SpawnActor");
static_assert(offsetof(Util_SpawnActor, _world_ctx) == 0x000000, "Member 'Util_SpawnActor::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, _owner) == 0x000008, "Member 'Util_SpawnActor::_owner' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, _Class) == 0x000010, "Member 'Util_SpawnActor::_Class' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, _tx) == 0x000020, "Member 'Util_SpawnActor::_tx' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, _instigator) == 0x000080, "Member 'Util_SpawnActor::_instigator' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, _replication) == 0x000088, "Member 'Util_SpawnActor::_replication' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, _collision) == 0x000089, "Member 'Util_SpawnActor::_collision' has a wrong offset!");
static_assert(offsetof(Util_SpawnActor, ReturnValue) == 0x000090, "Member 'Util_SpawnActor::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SpawnVFXAtActor
// 0x0050 (0x0050 - 0x0000)
struct Util_SpawnVFXAtActor final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         _FX;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _Actor;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _ws_loc;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _ws_rot;                                           // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_SpawnVFXAtActor) == 0x000008, "Wrong alignment on Util_SpawnVFXAtActor");
static_assert(sizeof(Util_SpawnVFXAtActor) == 0x000050, "Wrong size on Util_SpawnVFXAtActor");
static_assert(offsetof(Util_SpawnVFXAtActor, _world_ctx) == 0x000000, "Member 'Util_SpawnVFXAtActor::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtActor, _FX) == 0x000008, "Member 'Util_SpawnVFXAtActor::_FX' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtActor, _Actor) == 0x000010, "Member 'Util_SpawnVFXAtActor::_Actor' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtActor, _ws_loc) == 0x000018, "Member 'Util_SpawnVFXAtActor::_ws_loc' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtActor, _ws_rot) == 0x000030, "Member 'Util_SpawnVFXAtActor::_ws_rot' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtActor, ReturnValue) == 0x000048, "Member 'Util_SpawnVFXAtActor::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SpawnVFXAtLocation
// 0x0080 (0x0080 - 0x0000)
struct Util_SpawnVFXAtLocation final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         _FX;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             _tx;                                               // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C01[0x8];                                     // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_SpawnVFXAtLocation) == 0x000010, "Wrong alignment on Util_SpawnVFXAtLocation");
static_assert(sizeof(Util_SpawnVFXAtLocation) == 0x000080, "Wrong size on Util_SpawnVFXAtLocation");
static_assert(offsetof(Util_SpawnVFXAtLocation, _world_ctx) == 0x000000, "Member 'Util_SpawnVFXAtLocation::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtLocation, _FX) == 0x000008, "Member 'Util_SpawnVFXAtLocation::_FX' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtLocation, _tx) == 0x000010, "Member 'Util_SpawnVFXAtLocation::_tx' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAtLocation, ReturnValue) == 0x000070, "Member 'Util_SpawnVFXAtLocation::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SpawnVFXAttachBoneName
// 0x0070 (0x0070 - 0x0000)
struct Util_SpawnVFXAttachBoneName final
{
public:
	const class UObject*                          _world_ctx;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         _FX;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 _skelmesh_com;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _ws_loc;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _ws_rot;                                           // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                _scale;                                            // 0x0050(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_SpawnVFXAttachBoneName) == 0x000008, "Wrong alignment on Util_SpawnVFXAttachBoneName");
static_assert(sizeof(Util_SpawnVFXAttachBoneName) == 0x000070, "Wrong size on Util_SpawnVFXAttachBoneName");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, _world_ctx) == 0x000000, "Member 'Util_SpawnVFXAttachBoneName::_world_ctx' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, _FX) == 0x000008, "Member 'Util_SpawnVFXAttachBoneName::_FX' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, _skelmesh_com) == 0x000010, "Member 'Util_SpawnVFXAttachBoneName::_skelmesh_com' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, AttachPointName) == 0x000018, "Member 'Util_SpawnVFXAttachBoneName::AttachPointName' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, _ws_loc) == 0x000020, "Member 'Util_SpawnVFXAttachBoneName::_ws_loc' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, _ws_rot) == 0x000038, "Member 'Util_SpawnVFXAttachBoneName::_ws_rot' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, _scale) == 0x000050, "Member 'Util_SpawnVFXAttachBoneName::_scale' has a wrong offset!");
static_assert(offsetof(Util_SpawnVFXAttachBoneName, ReturnValue) == 0x000068, "Member 'Util_SpawnVFXAttachBoneName::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.StringToEnum
// 0x0028 (0x0028 - 0x0000)
struct Util_StringToEnum final
{
public:
	class FString                                 _enum_type;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _value;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         _enum_value;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C02[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(Util_StringToEnum) == 0x000008, "Wrong alignment on Util_StringToEnum");
static_assert(sizeof(Util_StringToEnum) == 0x000028, "Wrong size on Util_StringToEnum");
static_assert(offsetof(Util_StringToEnum, _enum_type) == 0x000000, "Member 'Util_StringToEnum::_enum_type' has a wrong offset!");
static_assert(offsetof(Util_StringToEnum, _value) == 0x000010, "Member 'Util_StringToEnum::_value' has a wrong offset!");
static_assert(offsetof(Util_StringToEnum, _enum_value) == 0x000020, "Member 'Util_StringToEnum::_enum_value' has a wrong offset!");
static_assert(offsetof(Util_StringToEnum, ReturnValue) == 0x000021, "Member 'Util_StringToEnum::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.SubtractRotator
// 0x0048 (0x0048 - 0x0000)
struct Util_SubtractRotator final
{
public:
	struct FRotator                               _r1;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               _r2;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_SubtractRotator) == 0x000008, "Wrong alignment on Util_SubtractRotator");
static_assert(sizeof(Util_SubtractRotator) == 0x000048, "Wrong size on Util_SubtractRotator");
static_assert(offsetof(Util_SubtractRotator, _r1) == 0x000000, "Member 'Util_SubtractRotator::_r1' has a wrong offset!");
static_assert(offsetof(Util_SubtractRotator, _r2) == 0x000018, "Member 'Util_SubtractRotator::_r2' has a wrong offset!");
static_assert(offsetof(Util_SubtractRotator, ReturnValue) == 0x000030, "Member 'Util_SubtractRotator::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.TrimClassPostfix
// 0x0020 (0x0020 - 0x0000)
struct Util_TrimClassPostfix final
{
public:
	class FString                                 _str;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_TrimClassPostfix) == 0x000008, "Wrong alignment on Util_TrimClassPostfix");
static_assert(sizeof(Util_TrimClassPostfix) == 0x000020, "Wrong size on Util_TrimClassPostfix");
static_assert(offsetof(Util_TrimClassPostfix, _str) == 0x000000, "Member 'Util_TrimClassPostfix::_str' has a wrong offset!");
static_assert(offsetof(Util_TrimClassPostfix, ReturnValue) == 0x000010, "Member 'Util_TrimClassPostfix::ReturnValue' has a wrong offset!");

// Function BPGLib.Util.UTC_To_LocalTime
// 0x0010 (0x0010 - 0x0000)
struct Util_UTC_To_LocalTime final
{
public:
	struct FDateTime                              _utc;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Util_UTC_To_LocalTime) == 0x000008, "Wrong alignment on Util_UTC_To_LocalTime");
static_assert(sizeof(Util_UTC_To_LocalTime) == 0x000010, "Wrong size on Util_UTC_To_LocalTime");
static_assert(offsetof(Util_UTC_To_LocalTime, _utc) == 0x000000, "Member 'Util_UTC_To_LocalTime::_utc' has a wrong offset!");
static_assert(offsetof(Util_UTC_To_LocalTime, ReturnValue) == 0x000008, "Member 'Util_UTC_To_LocalTime::ReturnValue' has a wrong offset!");

// Function BPGLib.NetReplyBlueprintLibrary.Error
// 0x0040 (0x0040 - 0x0000)
struct NetReplyBlueprintLibrary_Error final
{
public:
	ENetError                                     _level;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C03[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   _msg;                                              // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FNetReply                              ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetReplyBlueprintLibrary_Error) == 0x000008, "Wrong alignment on NetReplyBlueprintLibrary_Error");
static_assert(sizeof(NetReplyBlueprintLibrary_Error) == 0x000040, "Wrong size on NetReplyBlueprintLibrary_Error");
static_assert(offsetof(NetReplyBlueprintLibrary_Error, _level) == 0x000000, "Member 'NetReplyBlueprintLibrary_Error::_level' has a wrong offset!");
static_assert(offsetof(NetReplyBlueprintLibrary_Error, _msg) == 0x000008, "Member 'NetReplyBlueprintLibrary_Error::_msg' has a wrong offset!");
static_assert(offsetof(NetReplyBlueprintLibrary_Error, ReturnValue) == 0x000020, "Member 'NetReplyBlueprintLibrary_Error::ReturnValue' has a wrong offset!");

// Function BPGLib.NetReplyBlueprintLibrary.OK
// 0x0020 (0x0020 - 0x0000)
struct NetReplyBlueprintLibrary_OK final
{
public:
	struct FNetReply                              ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetReplyBlueprintLibrary_OK) == 0x000008, "Wrong alignment on NetReplyBlueprintLibrary_OK");
static_assert(sizeof(NetReplyBlueprintLibrary_OK) == 0x000020, "Wrong size on NetReplyBlueprintLibrary_OK");
static_assert(offsetof(NetReplyBlueprintLibrary_OK, ReturnValue) == 0x000000, "Member 'NetReplyBlueprintLibrary_OK::ReturnValue' has a wrong offset!");

}

