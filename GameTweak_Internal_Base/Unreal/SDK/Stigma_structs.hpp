#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Stigma

#include "Basic.hpp"

#include "ActionGraph_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "BPGLib_structs.hpp"
#include "NetCore_structs.hpp"
#include "Slate_structs.hpp"
#include "AIModule_structs.hpp"
#include "NATSClient_structs.hpp"
#include "BPMotionCore_structs.hpp"


namespace SDK
{

// Enum Stigma.ECharaType
// NumValues: 0x001F
enum class ECharaType : uint8
{
	None                                     = 0,
	MrTen                                    = 1,
	MrHollowPoint                            = 2,
	MrParabellum                             = 3,
	Adam                                     = 4,
	Nano                                     = 5,
	One                                      = 6,
	Twin                                     = 7,
	GrayHand                                 = 8,
	GrayHeavy                                = 9,
	GrayPaper                                = 10,
	HardworkerZero                           = 11,
	HardworkerCrush                          = 12,
	HardworkerGrasper                        = 13,
	Alexa                                    = 14,
	SpyFlon                                  = 15,
	SpyBJ                                    = 16,
	SpyPoice                                 = 17,
	SmileSim                                 = 18,
	ZombieNicol                              = 19,
	KingFred                                 = 20,
	Micron                                   = 21,
	Secret                                   = 22,
	Wander                                   = 23,
	MsRoyal                                  = 24,
	MsRoyal_Agent_A                          = 240,
	MsRoyal_Agent_B                          = 241,
	NPC_TutorialAgent                        = 252,
	NPC_Action_Dummy                         = 253,
	NPC                                      = 254,
	ECharaType_MAX                           = 255,
};

// Enum Stigma.EArmorType
// NumValues: 0x0006
enum class EArmorType : uint8
{
	NA                                       = 0,
	Soft                                     = 1,
	Medium                                   = 2,
	Hard                                     = 3,
	Multi                                    = 4,
	EArmorType_MAX                           = 5,
};

// Enum Stigma.EKnockType
// NumValues: 0x000A
enum class EKnockType : uint8
{
	None                                     = 0,
	Disarmed                                 = 1,
	Stagger                                  = 2,
	PushBack                                 = 3,
	KnockBack                                = 4,
	KnockBack_TwoTap                         = 5,
	KnockDown                                = 6,
	HardKnockDown                            = 7,
	Unavoidable                              = 8,
	EKnockType_MAX                           = 9,
};

// Enum Stigma.EDamageTarget
// NumValues: 0x0005
enum class EDamageTarget : uint8
{
	EnemyOnly                                = 0,
	EnemyAndSelf                             = 1,
	IgnoreSelf                               = 2,
	All                                      = 3,
	EDamageTarget_MAX                        = 4,
};

// Enum Stigma.EDamageType
// NumValues: 0x0005
enum class EDamageType : uint8
{
	Parts_Armor                              = 0,
	NoParts_NoArmor                          = 1,
	Parts_NoArmor                            = 2,
	NoParts_Armor                            = 3,
	EDamageType_MAX                          = 4,
};

// Enum Stigma.ESurfaceMaterialType
// NumValues: 0x0016
enum class ESurfaceMaterialType : uint8
{
	NA                                       = 0,
	Body                                     = 1,
	BulletProof                              = 2,
	Concrete                                 = 3,
	Dirt                                     = 4,
	Carpet                                   = 5,
	Febric                                   = 6,
	Grass                                    = 7,
	Glass                                    = 8,
	Ice                                      = 9,
	Metal                                    = 10,
	Plastic                                  = 11,
	Sand                                     = 12,
	Snow                                     = 13,
	Stone                                    = 14,
	Water                                    = 15,
	Wood                                     = 16,
	Gravel                                   = 17,
	Plant                                    = 18,
	Breakable                                = 19,
	Paper                                    = 20,
	MAX                                      = 21,
};

// Enum Stigma.EBones
// NumValues: 0x001E
enum class EBones : uint8
{
	NA                                       = 0,
	Root                                     = 1,
	Head                                     = 10,
	Bip001                                   = 20,
	Pelvis                                   = 21,
	Spine_01                                 = 22,
	Spine_02                                 = 23,
	Spine_03                                 = 24,
	Neck                                     = 25,
	Clavicle_L                               = 30,
	UpperArm_L                               = 31,
	LowerArm_L                               = 32,
	Hand_L                                   = 50,
	Prop_L                                   = 51,
	Clavicle_R                               = 40,
	UpperArm_R                               = 41,
	LowerArm_R                               = 42,
	Hand_R                                   = 60,
	Prop_R                                   = 61,
	Thigh_L                                  = 70,
	Calf_L                                   = 71,
	Foot_L                                   = 90,
	Ball_L                                   = 91,
	Thigh_R                                  = 80,
	Calf_R                                   = 81,
	Foot_R                                   = 100,
	Ball_R                                   = 101,
	KillPoint_Head                           = 110,
	KillPoint_Nut                            = 111,
	EBones_MAX                               = 112,
};

// Enum Stigma.EMeleeAttackPoint
// NumValues: 0x000E
enum class EMeleeAttackPoint : uint8
{
	Hand_Right                               = 0,
	Hand_Left                                = 1,
	Foot_Right                               = 2,
	Foot_Left                                = 3,
	Shoulder_Left                            = 4,
	Shoulder_Right                           = 5,
	Both_Hand                                = 6,
	Chest                                    = 7,
	LowerArm_Left                            = 8,
	LowerArm_Right                           = 9,
	BodyFront                                = 10,
	Prop_Left                                = 11,
	Prop_Right                               = 12,
	EMeleeAttackPoint_MAX                    = 13,
};

// Enum Stigma.EAttackType
// NumValues: 0x0018
enum class EAttackType : uint8
{
	None                                     = 0,
	Trigger                                  = 1,
	Punch                                    = 2,
	Kick                                     = 3,
	Grapple                                  = 4,
	Block                                    = 5,
	CounterAttack                            = 6,
	Parrying                                 = 7,
	Gun_Fire                                 = 8,
	Gun_Throw                                = 9,
	Knife_Throw                              = 10,
	Knife_Brandish                           = 11,
	Knife_Stab                               = 12,
	Sword_Brandish                           = 13,
	Sword_Stab                               = 14,
	Blunt                                    = 15,
	Bomb_Explosion                           = 16,
	Bomb_Throw                               = 17,
	Taser                                    = 18,
	PoisonGas                                = 19,
	Axe_Throw                                = 20,
	NailGun                                  = 21,
	Bow_Arrow                                = 22,
	EAttackType_MAX                          = 23,
};

// Enum Stigma.EBodyLowerAction
// NumValues: 0x0003
enum class EBodyLowerAction : uint8
{
	Idle                                     = 0,
	PickupProp                               = 1,
	EBodyLowerAction_MAX                     = 2,
};

// Enum Stigma.EBodyLowerState
// NumValues: 0x0006
enum class EBodyLowerState : uint8
{
	Stand                                    = 0,
	Crouch                                   = 1,
	Lie                                      = 2,
	Prone                                    = 3,
	Died                                     = 4,
	EBodyLowerState_MAX                      = 5,
};

// Enum Stigma.EBodyUpperState
// NumValues: 0x0004
enum class EBodyUpperState : uint8
{
	Normal                                   = 0,
	Aimming                                  = 1,
	Sprint                                   = 2,
	EBodyUpperState_MAX                      = 3,
};

// Enum Stigma.ECharaAction
// NumValues: 0x0020
enum class ECharaAction : uint8
{
	NA                                       = 0,
	Idle                                     = 1,
	Fire                                     = 2,
	MeleeAttack                              = 3,
	LoadMagazine                             = 4,
	LoadBullet                               = 5,
	Fire_Sub                                 = 6,
	LoadMagazine_Sub                         = 7,
	LoadBullet_Sub                           = 8,
	ThrowGun                                 = 9,
	ThrowProp                                = 10,
	ThrowAwayProp                            = 11,
	Skill_1                                  = 12,
	Skill_2                                  = 13,
	Skill_3                                  = 14,
	FastMove                                 = 15,
	Stagger                                  = 16,
	PushBack                                 = 17,
	KnockBack                                = 18,
	KnockBack_TwoTap                         = 19,
	KnockDown                                = 20,
	FlyingKO                                 = 21,
	Vault                                    = 22,
	StepUp                                   = 23,
	Occupy                                   = 24,
	StandUp                                  = 25,
	KnockBack_Unavoidable                    = 26,
	KnockDown_Unavoidable                    = 27,
	Escape                                   = 28,
	Revive                                   = 29,
	Hacking                                  = 30,
	ECharaAction_MAX                         = 31,
};

// Enum Stigma.EBulletTip
// NumValues: 0x0006
enum class EBulletTip : uint8
{
	NA                                       = 0,
	BT_FMJ                                   = 1,
	BT_HollowPoint                           = 2,
	BT_Tracer                                = 3,
	BT_AP                                    = 4,
	EBulletTip_MAX                           = 5,
};

// Enum Stigma.EGunType
// NumValues: 0x001F
enum class EGunType : uint8
{
	NA                                       = 0,
	BrenTen                                  = 1,
	DanWessonBruin                           = 2,
	HnKP30L                                  = 3,
	CZP10F                                   = 4,
	RugerMark4L                              = 5,
	KelTecCP33                               = 6,
	WaltherPPK                               = 7,
	Taurus180C                               = 8,
	CZ2075RAMI                               = 9,
	Glock45                                  = 10,
	BobergXR9                                = 11,
	MossbergMC1                              = 12,
	Glock26                                  = 13,
	SIGP365                                  = 14,
	FNFiveSeven                              = 15,
	STICombatMaster                          = 16,
	AF2011A1                                 = 17,
	DesertEagleL6                            = 18,
	Glock18C                                 = 19,
	Beretta93R                               = 20,
	WaltherPPQ                               = 21,
	Beretta96A1                              = 22,
	Kimber1911R                              = 23,
	ColtPython357M                           = 24,
	SnapDouble                               = 25,
	BreakDouble                              = 26,
	MicronBow                                = 253,
	TwinGun                                  = 254,
	Common                                   = 255,
	EGunType_MAX                             = 256,
};

// Enum Stigma.EAutoStandUp
// NumValues: 0x0007
enum class EAutoStandUp : uint8
{
	None                                     = 0,
	InPlace                                  = 1,
	Forward                                  = 2,
	Backward                                 = 3,
	Left                                     = 4,
	Right                                    = 5,
	EAutoStandUp_MAX                         = 6,
};

// Enum Stigma.EDebug_DamageViewerType
// NumValues: 0x0003
enum class EDebug_DamageViewerType : uint8
{
	FIXED                                    = 0,
	BALLON                                   = 1,
	EDebug_MAX                               = 2,
};

// Enum Stigma.EAbnormal
// NumValues: 0x000A
enum class EAbnormal : uint8
{
	None                                     = 0,
	Death                                    = 1,
	HeadShot                                 = 2,
	LegInjury                                = 4,
	ElectricShock                            = 8,
	ArmorBreak                               = 16,
	FlashBang                                = 32,
	GasSmoke                                 = 64,
	WPSmoke                                  = 128,
	EAbnormal_MAX                            = 129,
};

// Enum Stigma.EItemGrade
// NumValues: 0x0006
enum class EItemGrade : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	Advanced                                 = 2,
	Rare                                     = 3,
	Legend                                   = 4,
	EItemGrade_MAX                           = 5,
};

// Enum Stigma.EItemStage
// NumValues: 0x0006
enum class EItemStage : uint8
{
	Production                               = 0,
	Developping                              = 1,
	Disused                                  = 2,
	InternalUseOnly                          = 3,
	CommingSoon                              = 4,
	EItemStage_MAX                           = 5,
};

// Enum Stigma.ECharaFacialType
// NumValues: 0x0006
enum class ECharaFacialType : uint8
{
	Idle                                     = 0,
	Died                                     = 1,
	Damaged                                  = 2,
	Shout                                    = 3,
	Signature                                = 4,
	ECharaFacialType_MAX                     = 5,
};

// Enum Stigma.EGunnerType
// NumValues: 0x0007
enum class EGunnerType : uint8
{
	NoGun                                    = 0,
	Single_Right                             = 1,
	Single_Left                              = 2,
	Dual_Right                               = 3,
	Dual_Left                                = 4,
	Snipe                                    = 5,
	EGunnerType_MAX                          = 6,
};

// Enum Stigma.EObtainType
// NumValues: 0x0006
enum class EObtainType : uint8
{
	NA                                       = 0,
	Level                                    = 1,
	Shop                                     = 2,
	BattlePass                               = 4,
	String                                   = 8,
	EObtainType_MAX                          = 9,
};

// Enum Stigma.EFightingStyle
// NumValues: 0x0006
enum class EFightingStyle : uint8
{
	NA                                       = 0,
	Marksman                                 = 1,
	Striker                                  = 2,
	Disruptor                                = 3,
	Infiltrator                              = 4,
	EFightingStyle_MAX                       = 5,
};

// Enum Stigma.EOrganization
// NumValues: 0x000B
enum class EOrganization : uint8
{
	NA                                       = 0,
	AS_Master                                = 1,
	AS_Maid                                  = 2,
	AB_GrayCrows                             = 3,
	AB_HardWorkers                           = 4,
	S_Force                                  = 5,
	SPY                                      = 6,
	UN                                       = 7,
	DofC                                     = 8,
	Etc                                      = 9,
	EOrganization_MAX                        = 10,
};

// Enum Stigma.EGameMode
// NumValues: 0x000B
enum class EGameMode : uint8
{
	NA                                       = 0,
	TDM                                      = 1,
	Bounty                                   = 2,
	Capturing                                = 3,
	CLB                                      = 4,
	Annihilation                             = 5,
	TrainingRoom                             = 6,
	Challenge                                = 7,
	VS                                       = 8,
	CustomGame                               = 255,
	EGameMode_MAX                            = 256,
};

// Enum Stigma.ETeams
// NumValues: 0x000D
enum class ETeams : uint8
{
	NA                                       = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	D                                        = 4,
	E                                        = 5,
	F                                        = 6,
	G                                        = 7,
	H                                        = 8,
	I                                        = 9,
	MyTeam                                   = 10,
	Neutral                                  = 200,
	MAX                                      = 201,
};

// Enum Stigma.EScopeIdleShake
// NumValues: 0x0003
enum class EScopeIdleShake : uint8
{
	Ribbon                                   = 0,
	Random                                   = 1,
	EScopeIdleShake_MAX                      = 2,
};

// Enum Stigma.ENetSyncModel
// NumValues: 0x0003
enum class ENetSyncModel : uint8
{
	P2P                                      = 0,
	CS                                       = 1,
	ENetSyncModel_MAX                        = 2,
};

// Enum Stigma.EScopeType
// NumValues: 0x0006
enum class EScopeType : uint8
{
	None                                     = 0,
	DotSight                                 = 1,
	Scope                                    = 2,
	LaserSight                               = 3,
	HolographicSight                         = 4,
	EScopeType_MAX                           = 5,
};

// Enum Stigma.EBulletEffectScaleType
// NumValues: 0x0005
enum class EBulletEffectScaleType : uint8
{
	NA                                       = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	MAX                                      = 4,
};

// Enum Stigma.EBulletType
// NumValues: 0x000E
enum class EBulletType : uint8
{
	NA                                       = 0,
	Bullet_22LR                              = 1,
	Bullet_9MM                               = 2,
	Bullet_10MM                              = 3,
	Bullet_45ACP                             = 4,
	Bullet_357MAG                            = 5,
	Bullet_32ACP                             = 6,
	Bullet_44MAG                             = 7,
	Bullet_5_7MM                             = 8,
	Bullet_40SW                              = 9,
	Bullet_38S                               = 10,
	Bullet_38ACP                             = 11,
	Bullet_50AE                              = 12,
	EBulletType_MAX                          = 13,
};

// Enum Stigma.EGunCategory
// NumValues: 0x0004
enum class EGunCategory : uint8
{
	Pistol                                   = 0,
	SMG                                      = 1,
	Shotgun                                  = 2,
	EGunCategory_MAX                         = 3,
};

// Enum Stigma.EBodyParts
// NumValues: 0x000E
enum class EBodyParts : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Body                                     = 2,
	Arm_L                                    = 3,
	Arm_R                                    = 4,
	Hand_L                                   = 5,
	Hand_R                                   = 6,
	Leg_L                                    = 7,
	Leg_R                                    = 8,
	Foot_L                                   = 9,
	Foot_R                                   = 10,
	Critical                                 = 11,
	BlockedBody                              = 12,
	MAX                                      = 13,
};

// Enum Stigma.EPingQuality
// NumValues: 0x0005
enum class EPingQuality : uint8
{
	Red                                      = 0,
	Orange                                   = 1,
	Yellow                                   = 2,
	Green                                    = 3,
	EPingQuality_MAX                         = 4,
};

// Enum Stigma.EAttackPriority
// NumValues: 0x000D
enum class EAttackPriority : uint8
{
	NoPriority                               = 0,
	Melee_Weak                               = 1,
	Melee_Mid                                = 2,
	Melee_Strong                             = 3,
	Melee_Super                              = 4,
	Weapon_Weak                              = 5,
	Weapon_Mid                               = 6,
	Weapon_Strong                            = 7,
	Counter_Weak                             = 8,
	Counter_Mid                              = 9,
	Counter_Strong                           = 10,
	Unavoidable                              = 11,
	EAttackPriority_MAX                      = 12,
};

// Enum Stigma.EObstacleScanResult
// NumValues: 0x0004
enum class EObstacleScanResult : uint8
{
	None                                     = 0,
	Vault                                    = 1,
	StepUp                                   = 2,
	EObstacleScanResult_MAX                  = 3,
};

// Enum Stigma.EGunnerJobReason
// NumValues: 0x0004
enum class EGunnerJobReason : uint8
{
	Start                                    = 0,
	Finish                                   = 1,
	Cancel                                   = 2,
	EGunnerJobReason_MAX                     = 3,
};

// Enum Stigma.EObjectState
// NumValues: 0x000C
enum class EObjectState : uint8
{
	NA                                       = 0,
	Inactivated                              = 1,
	Hidden                                   = 2,
	Equiped                                  = 3,
	Equiped_Collidable                       = 4,
	Placed                                   = 5,
	Simulating                               = 6,
	Simulating_NoSync                        = 7,
	Thrown                                   = 8,
	Sticked                                  = 9,
	ENUM_LAST                                = 10,
	EObjectState_MAX                         = 11,
};

// Enum Stigma.EStunType
// NumValues: 0x0004
enum class EStunType : uint8
{
	NA                                       = 0,
	HeadShot                                 = 1,
	FlashBang                                = 2,
	EStunType_MAX                            = 3,
};

// Enum Stigma.EBodyPhysicalState
// NumValues: 0x0009
enum class EBodyPhysicalState : uint8
{
	NA                                       = 0,
	Kinematic                                = 1,
	Kinematic_WithFullBodyPhysics            = 2,
	Kinematic_WithUpperBodyPhysics           = 3,
	Kinematic_WithLegsAndArmsPhysics         = 4,
	Kinematic_WithSpecificBone               = 5,
	Ragdoll                                  = 6,
	Ragdoll_Damaged                          = 7,
	EBodyPhysicalState_MAX                   = 8,
};

// Enum Stigma.EInvincibleMode
// NumValues: 0x0004
enum class EInvincibleMode : uint8
{
	None                                     = 0,
	Once                                     = 1,
	Infinite                                 = 2,
	EInvincibleMode_MAX                      = 3,
};

// Enum Stigma.ESideViewSide
// NumValues: 0x0003
enum class ESideViewSide : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	ESideViewSide_MAX                        = 2,
};

// Enum Stigma.EChangedPlayerState
// NumValues: 0x000A
enum class EChangedPlayerState : uint8
{
	All                                      = 0,
	NetID                                    = 1,
	JoinType                                 = 2,
	IsReadyToFight                           = 3,
	User                                     = 4,
	Character                                = 5,
	Spectating                               = 6,
	KPI                                      = 7,
	GunSpec                                  = 8,
	EChangedPlayerState_MAX                  = 9,
};

// Enum Stigma.ECameraWalkMode
// NumValues: 0x0004
enum class ECameraWalkMode : uint8
{
	Normal                                   = 0,
	SideView                                 = 1,
	Directing                                = 2,
	ECameraWalkMode_MAX                      = 3,
};

// Enum Stigma.EOwnType
// NumValues: 0x0005
enum class EOwnType : uint8
{
	NA                                       = 0,
	Permanent                                = 1,
	Count                                    = 2,
	ExpireAt                                 = 3,
	EOwnType_MAX                             = 4,
};

// Enum Stigma.EResultCode
// NumValues: 0x0032
enum class EResultCode : uint8
{
	NA                                       = 0,
	OK                                       = 1,
	LEVEL_ERROR_START                        = 2,
	ERR_NetworkDevice                        = 2,
	ERR_Internal                             = 3,
	ERR_Prohibited                           = 4,
	ERR_HTTP                                 = 5,
	ERR_Steam                                = 6,
	ERR_Database                             = 7,
	ERR_IncorrectSetting                     = 8,
	ERR_NotServicedTime                      = 9,
	ERR_ForbiddenCountry                     = 10,
	ERR_InvalidAccountID                     = 11,
	ERR_InvalidUserID                        = 12,
	ERR_InvalidItemID                        = 13,
	ERR_InvalidDediID                        = 14,
	ERR_IncorrectPacket                      = 15,
	ERR_NeedToUpdateClient                   = 16,
	ERR_DuplicatedLogin                      = 17,
	ERR_Banned                               = 18,
	LEVEL_ERROR_End                          = 40,
	LEVEL_WARNING_START                      = 41,
	WARN_InvalidArgument                     = 42,
	WARN_IsExist                             = 43,
	WARN_IsNotExist                          = 44,
	WARN_InvalidRequest                      = 45,
	WARN_InvalidFormat                       = 46,
	LEVEL_WARNING_END                        = 80,
	LEVEL_NOTICE_START                       = 81,
	NOTICE_Fail                              = 82,
	NOTICE_Prohibited                        = 83,
	NOTICE_InvalidArgument                   = 84,
	NOTICE_NoFreeSpace                       = 85,
	NOTICE_InvalidStatus                     = 86,
	NOTICE_NotEnoughCurrency                 = 87,
	NOTICE_IsExist                           = 88,
	NOTICE_IsNotExist                        = 89,
	NOTICE_NoUser                            = 90,
	NOTICE_InvalidNickname                   = 91,
	NOTICE_DuplicatedNickname                = 92,
	NOTICE_IsNotOnlineUser                   = 93,
	NOTICE_ServiceIsNotOpened                = 100,
	NOTICE_Some_OK                           = 101,
	NOTICE_IsExpired                         = 102,
	NOTICE_IsExhausted                       = 103,
	NOTICE_MatchBanned                       = 104,
	NOTICE_MatchCancelByParty                = 105,
	NOTICE_InviterIsInBattle                 = 106,
	LEVEL_NOTICE_END                         = 254,
	EResultCode_MAX                          = 255,
};

// Enum Stigma.ETier
// NumValues: 0x0022
enum class ETier : uint8
{
	NA                                       = 0,
	Iron5                                    = 1,
	Iron4                                    = 2,
	Iron3                                    = 3,
	Iron2                                    = 4,
	Iron1                                    = 5,
	Bronze5                                  = 6,
	Bronze4                                  = 7,
	Bronze3                                  = 8,
	Bronze2                                  = 9,
	Bronze1                                  = 10,
	Silver5                                  = 11,
	Silver4                                  = 12,
	Silver3                                  = 13,
	Silver2                                  = 14,
	Silver1                                  = 15,
	Gold5                                    = 16,
	Gold4                                    = 17,
	Gold3                                    = 18,
	Gold2                                    = 19,
	Gold1                                    = 20,
	Platinum5                                = 21,
	Platinum4                                = 22,
	Platinum3                                = 23,
	Platinum2                                = 24,
	Platinum1                                = 25,
	Diamond5                                 = 26,
	Diamond4                                 = 27,
	Diamond3                                 = 28,
	Diamond2                                 = 29,
	Diamond1                                 = 30,
	Master                                   = 31,
	Specter                                  = 32,
	ETier_MAX                                = 33,
};

// Enum Stigma.EUserPlayingAt
// NumValues: 0x0017
enum class EUserPlayingAt : uint8
{
	Offline                                  = 0,
	Lobby_Main                               = 1,
	Lobby_Master                             = 2,
	Lobby_Weapon                             = 3,
	Lobby_Weapon_Customizing                 = 4,
	Lobby_Perk                               = 5,
	Lobby_Costume                            = 6,
	Lobby_BattlePass                         = 7,
	Lobby_Record                             = 8,
	Lobby_Shop                               = 9,
	Lobby_Recruit                            = 10,
	MatchMaking                              = 20,
	PVE_Training                             = 31,
	PVE_KDM                                  = 32,
	PVE_GTA                                  = 33,
	PVE_TDM                                  = 34,
	PVE_MAX                                  = 35,
	PVP_KDM                                  = 41,
	PVP_GTA                                  = 42,
	PVP_VS                                   = 43,
	PVP_TDM                                  = 44,
	PVP_MAX                                  = 45,
	EUserPlayingAt_MAX                       = 46,
};

// Enum Stigma.ERankingType
// NumValues: 0x0008
enum class ERankingType : uint8
{
	NA                                       = 0,
	Total                                    = 1,
	KillEmAll                                = 2,
	GetEmAll                                 = 3,
	Challenge                                = 4,
	TeamDeathMatch                           = 5,
	VS                                       = 6,
	ERankingType_MAX                         = 7,
};

// Enum Stigma.ERecruitType
// NumValues: 0x0005
enum class ERecruitType : uint8
{
	NA                                       = 0,
	Normal                                   = 1,
	Advanced                                 = 2,
	Event                                    = 3,
	ERecruitType_MAX                         = 4,
};

// Enum Stigma.EKillStreak
// NumValues: 0x0017
enum class EKillStreak : uint8
{
	None                                     = 0,
	LoveShot                                 = 1,
	HeadShotKill                             = 2,
	DoubleKill                               = 3,
	TripleKill                               = 4,
	QuadraKill                               = 5,
	PentaKill                                = 6,
	SerialKiller                             = 7,
	KillerHunter                             = 8,
	Avenger                                  = 9,
	LastOne                                  = 10,
	BulletBanker                             = 11,
	QuickSlayer                              = 12,
	Reviver                                  = 13,
	FirstKill                                = 14,
	WarriorReturns                           = 15,
	DavidAndGoliaths                         = 16,
	BestAssist                               = 17,
	LastMan                                  = 18,
	GoldMiner                                = 19,
	HackSuccess                              = 20,
	GeniusHacker                             = 21,
	EKillStreak_MAX                          = 22,
};

// Enum Stigma.EChatType
// NumValues: 0x0007
enum class EChatType : uint8
{
	TotalChat                                = 0,
	TeamChat                                 = 1,
	PartyChat                                = 2,
	System                                   = 3,
	Shout                                    = 4,
	Radios                                   = 5,
	EChatType_MAX                            = 6,
};

// Enum Stigma.EInputAction
// NumValues: 0x005E
enum class EInputAction : uint8
{
	NA                                       = 0,
	Crouch                                   = 1,
	Skill_1                                  = 2,
	Skill_2                                  = 3,
	Skill_3                                  = 4,
	Fire                                     = 5,
	Zoom                                     = 6,
	Reload                                   = 7,
	UseBooster_Slot1                         = 8,
	UseBooster_Slot2                         = 9,
	UseBooster_Slot3                         = 10,
	UseBooster_Slot4                         = 11,
	Interaction                              = 12,
	FastMove                                 = 13,
	StandUp                                  = 14,
	OpenStore                                = 15,
	ToggleLaserSight                         = 16,
	AutoBoosters                             = 17,
	MoveForward                              = 18,
	MoveBackward                             = 19,
	MoveLeft                                 = 20,
	MoveRight                                = 21,
	TurnRate                                 = 22,
	Turn                                     = 23,
	LookUpRate                               = 24,
	LookUp                                   = 25,
	HideHUD                                  = 26,
	ChangeMaster                             = 27,
	EnterChat                                = 40,
	CallMenu                                 = 41,
	Tab                                      = 50,
	Help                                     = 51,
	Ping                                     = 52,
	PingScroll                               = 53,
	RadioChat_All                            = 54,
	RadioChat_1                              = 55,
	RadioChat_2                              = 56,
	RadioChat_3                              = 57,
	RadioChat_4                              = 58,
	RadioChat_Key1                           = 59,
	RadioChat_Key2                           = 60,
	RadioChat_Key3                           = 61,
	RadioChat_Key4                           = 62,
	RadioChat_Key5                           = 63,
	RadioChat_Key6                           = 64,
	RadioChat_Key7                           = 65,
	RadioChat_Key8                           = 66,
	RadioChat_Key9                           = 67,
	RadioChat_Close                          = 68,
	SupplyStore_Use_1                        = 70,
	SupplyStore_Use_2                        = 71,
	SupplyStore_Use_3                        = 72,
	Skip_Popup                               = 73,
	SteamScreenshot                          = 74,
	GamePause                                = 100,
	PlayerSightLine                          = 101,
	Player1Camera                            = 102,
	Player2Camera                            = 103,
	Player3Camera                            = 104,
	Player4Camera                            = 105,
	Player5Camera                            = 106,
	Player6Camera                            = 107,
	Player7Camera                            = 108,
	Player8Camera                            = 109,
	Player9Camera                            = 110,
	Player10Camera                           = 111,
	Player11Camera                           = 112,
	Player12Camera                           = 113,
	NextPlayerCamera                         = 114,
	PrevPlayerCamera                         = 115,
	FreeCamera                               = 116,
	CameraForward                            = 117,
	CameraBackward                           = 118,
	CameraLeft                               = 119,
	CameraRight                              = 120,
	CharacterOrbitCamera                     = 121,
	FixedCamera1                             = 122,
	FixedCamera2                             = 123,
	FixedCamera3                             = 124,
	FixedCamera4                             = 125,
	FixedCamera5                             = 126,
	FixedCamera6                             = 127,
	FixedCamera7                             = 128,
	FixedCamera8                             = 129,
	StatStartFile                            = 247,
	StatStopFile                             = 248,
	DEBUG_ToggleCrosshair                    = 249,
	MouseSenseUp                             = 250,
	MouseSenseDown                           = 251,
	DEBUG_SpawnNewChara                      = 252,
	DEBUG_ChangeGun                          = 253,
	DEBUG_ToggleCartoon                      = 254,
	Cheat                                    = 255,
	EInputAction_MAX                         = 256,
};

// Enum Stigma.EEventCasterResponse
// NumValues: 0x0003
enum class EEventCasterResponse : uint8
{
	KeepGoing                                = 0,
	NoMore                                   = 1,
	EEventCasterResponse_MAX                 = 2,
};

// Enum Stigma.ELobbyPage
// NumValues: 0x001B
enum class ELobbyPage : uint8
{
	NA                                       = 0,
	Main                                     = 1,
	Master                                   = 2,
	Armory                                   = 3,
	Armory_Gun                               = 4,
	Armory_PassiveSkill                      = 5,
	Armory_Booster                           = 6,
	Armory_Skin                              = 7,
	Play                                     = 8,
	Play_PVP_ModeSelection                   = 9,
	Play_TutorialSelection                   = 10,
	Play_Matching                            = 11,
	Inventory                                = 12,
	Record_Statistic                         = 13,
	Record_Ranking                           = 14,
	Record_Match_History                     = 15,
	Record_Tier                              = 16,
	Shop                                     = 17,
	Shop_Bundle                              = 18,
	Shop_Master                              = 19,
	Shop_Guns                                = 20,
	Shop_Cash                                = 21,
	Shop_Supplies                            = 22,
	BattlePass                               = 23,
	Recruit                                  = 24,
	MasterPick                               = 25,
	ELobbyPage_MAX                           = 26,
};

// Enum Stigma.EMissionUpdateType
// NumValues: 0x0006
enum class EMissionUpdateType : uint8
{
	None                                     = 0,
	Progress                                 = 1,
	Bookmarked                               = 2,
	Rewarded                                 = 3,
	Changed                                  = 4,
	EMissionUpdateType_MAX                   = 5,
};

// Enum Stigma.EEventCounter
// NumValues: 0x0017
enum class EEventCounter : uint8
{
	NA                                       = 0,
	FRIEND_Login                             = 1,
	FRIEND_INVITED                           = 2,
	FRIEND_ANY                               = 3,
	PARTY_INVITED                            = 4,
	PARTY_ANY                                = 5,
	BATTLE_INVITED                           = 6,
	BATTLE_ANY                               = 7,
	CHARACTER_Updated                        = 8,
	SKIN_BODY_Updated                        = 9,
	SKIN_HEAD_Updated                        = 10,
	GUN_Updated                              = 11,
	GUN_BODY_Updated                         = 12,
	GUN_SLIDE_Updated                        = 13,
	GUN_MAGAZINE_Updated                     = 14,
	GUN_FRONT_Updated                        = 15,
	GUN_SIGHT_Updated                        = 16,
	GUN_CHARM_Updated                        = 17,
	GUN_STICKER_Updated                      = 18,
	INVEN_Updated                            = 19,
	MAIL_UnreadCount_Updated                 = 20,
	EVENTPAGE_RewardCount_Updated            = 21,
	EEventCounter_MAX                        = 22,
};

// Enum Stigma.EUserEvent
// NumValues: 0x0014
enum class EUserEvent : uint8
{
	None                                     = 0,
	UserInfo                                 = 1,
	Currency                                 = 2,
	Character                                = 3,
	Gun                                      = 4,
	Inventory                                = 5,
	Equipment                                = 6,
	Function                                 = 7,
	EventPage                                = 8,
	PassiveSkillLevel                        = 9,
	CharacterSelection                       = 10,
	CharacterSetting                         = 11,
	Tutorial                                 = 12,
	Goods                                    = 13,
	Profile                                  = 14,
	BattlePass                               = 15,
	Competition                              = 16,
	Announcer                                = 17,
	ForcedGunChanging                        = 18,
	EUserEvent_MAX                           = 19,
};

// Enum Stigma.EOptionCategoryType
// NumValues: 0x0006
enum class EOptionCategoryType : uint8
{
	General                                  = 0,
	Control                                  = 1,
	Graphic                                  = 2,
	Audio                                    = 3,
	CategoryTypeMax                          = 4,
	EOptionCategoryType_MAX                  = 5,
};

// Enum Stigma.EGunPartsSlot
// NumValues: 0x000E
enum class EGunPartsSlot : uint8
{
	NA                                       = 0,
	Body                                     = 1,
	Slide                                    = 2,
	Magazine                                 = 3,
	Front                                    = 4,
	Top                                      = 5,
	Under                                    = 6,
	Charm_Body                               = 7,
	Charm_Magazine                           = 8,
	Deprecated_Charm_Front                   = 9,
	Sticker_Body                             = 10,
	Sticker_Slide                            = 11,
	Deprecated_Sticker_Front                 = 12,
	EGunPartsSlot_MAX                        = 13,
};

// Enum Stigma.ETickTaskState
// NumValues: 0x0004
enum class ETickTaskState : uint8
{
	STARTED                                  = 0,
	UPDATE                                   = 1,
	FINISHED                                 = 2,
	ETickTaskState_MAX                       = 3,
};

// Enum Stigma.EConfirmResponse
// NumValues: 0x0005
enum class EConfirmResponse : uint8
{
	NA                                       = 0,
	Success_Ready                            = 1,
	Success_CancelReady                      = 2,
	AlreadySelect                            = 3,
	EConfirmResponse_MAX                     = 4,
};

// Enum Stigma.ELemmingsGamePhase
// NumValues: 0x0009
enum class ELemmingsGamePhase : uint8
{
	Idle                                     = 0,
	Starting                                 = 1,
	Fighting                                 = 2,
	WaitingRush                              = 3,
	WaitingIntermission                      = 4,
	Intermission                             = 5,
	Finishing                                = 6,
	Finished                                 = 7,
	ELemmingsGamePhase_MAX                   = 8,
};

// Enum Stigma.EPlayerJoinEvent
// NumValues: 0x0004
enum class EPlayerJoinEvent : uint8
{
	Join                                     = 0,
	Updated                                  = 1,
	Leave                                    = 2,
	EPlayerJoinEvent_MAX                     = 3,
};

// Enum Stigma.EItemCategory
// NumValues: 0x0023
enum class EItemCategory : uint8
{
	NA                                       = 0,
	ActiveSkill                              = 1,
	PassiveSkill                             = 2,
	Skin_Body                                = 3,
	Skin_Head                                = 4,
	Character                                = 5,
	Buff                                     = 6,
	Gears                                    = 7,
	Armor                                    = 8,
	Currency                                 = 9,
	Gun_Body                                 = 10,
	Gun_Slide                                = 11,
	Gun_Magazine                             = 12,
	Gun_Front                                = 13,
	Gun_Sight                                = 14,
	Gun_Charm                                = 15,
	Gun_Sticker                              = 16,
	Stack                                    = 20,
	Booster                                  = 21,
	Emblem                                   = 22,
	ProfileCard                              = 23,
	Emoticon                                 = 24,
	NicknameFX                               = 25,
	RandomBox                                = 30,
	Function                                 = 31,
	Announcer                                = 32,
	Goods                                    = 50,
	Survey                                   = 51,
	Notification                             = 52,
	Mission                                  = 53,
	BattlePass                               = 54,
	EventPage                                = 55,
	Exp                                      = 56,
	Recruit                                  = 57,
	MAX                                      = 58,
};

// Enum Stigma.EChatBoxChannelType
// NumValues: 0x0006
enum class EChatBoxChannelType : uint8
{
	None                                     = 0,
	Total                                    = 1,
	Team                                     = 2,
	Party                                    = 4,
	Channel_Max                              = 8,
	EChatBoxChannelType_MAX                  = 9,
};

// Enum Stigma.EChatBoxInputStateType
// NumValues: 0x0005
enum class EChatBoxInputStateType : uint8
{
	NoneChat                                 = 0,
	Hide                                     = 1,
	Input_None                               = 2,
	Input_Idle                               = 3,
	EChatBoxInputStateType_MAX               = 4,
};

// Enum Stigma.EChatBoxPanelStateType
// NumValues: 0x0005
enum class EChatBoxPanelStateType : uint8
{
	Show                                     = 0,
	Hide                                     = 1,
	Tip                                      = 2,
	TempShow                                 = 3,
	EChatBoxPanelStateType_MAX               = 4,
};

// Enum Stigma.EChatBoxInitType
// NumValues: 0x0004
enum class EChatBoxInitType : uint8
{
	LobbyMode                                = 0,
	WaitingMode                              = 1,
	BattleMode                               = 2,
	EChatBoxInitType_MAX                     = 3,
};

// Enum Stigma.EAbnormalState
// NumValues: 0x000A
enum class EAbnormalState : uint8
{
	NA                                       = 0,
	Critical_Hitted                          = 1,
	Head_Hitted                              = 2,
	Armor_Break                              = 3,
	FlashBang                                = 4,
	GasSmoke                                 = 5,
	WPSmoke                                  = 6,
	Death                                    = 7,
	LegInjury                                = 8,
	EAbnormalState_MAX                       = 9,
};

// Enum Stigma.EAntiAbnormal
// NumValues: 0x0005
enum class EAntiAbnormal : uint8
{
	None                                     = 0,
	LegInjury                                = 1,
	DoubleTap                                = 2,
	ElectricShock                            = 4,
	EAntiAbnormal_MAX                        = 5,
};

// Enum Stigma.EActionType
// NumValues: 0x0007
enum class EActionType : uint8
{
	NA                                       = 0,
	Basic                                    = 1,
	Melee                                    = 2,
	Gun                                      = 3,
	Passive                                  = 4,
	FastMove                                 = 5,
	EActionType_MAX                          = 6,
};

// Enum Stigma.EHitReport
// NumValues: 0x0003
enum class EHitReport : uint8
{
	No                                       = 0,
	Yes                                      = 1,
	EHitReport_MAX                           = 2,
};

// Enum Stigma.EActionDefense
// NumValues: 0x0004
enum class EActionDefense : uint8
{
	None                                     = 0,
	Block                                    = 1,
	Avoid                                    = 2,
	EActionDefense_MAX                       = 3,
};

// Enum Stigma.EAIFocusMode
// NumValues: 0x0005
enum class EAIFocusMode : uint8
{
	NA                                       = 0,
	Default                                  = 1,
	Forward                                  = 2,
	FocalPoint                               = 3,
	EAIFocusMode_MAX                         = 4,
};

// Enum Stigma.EMapLoopResult
// NumValues: 0x0004
enum class EMapLoopResult : uint8
{
	Start                                    = 0,
	LoopBody                                 = 1,
	Completed                                = 2,
	EMapLoopResult_MAX                       = 3,
};

// Enum Stigma.EInputConditionType
// NumValues: 0x0004
enum class EInputConditionType : uint8
{
	Once                                     = 0,
	Down                                     = 1,
	Released                                 = 2,
	EInputConditionType_MAX                  = 3,
};

// Enum Stigma.EAG_HitTreat
// NumValues: 0x0004
enum class EAG_HitTreat : uint8
{
	Ignored                                  = 0,
	Apply                                    = 1,
	Delayed                                  = 2,
	EAG_MAX                                  = 3,
};

// Enum Stigma.ECanTransitFlags
// NumValues: 0x0006
enum class ECanTransitFlags : uint8
{
	NA                                       = 0,
	Movement                                 = 1,
	Fire                                     = 2,
	Actions                                  = 4,
	Self                                     = 8,
	ECanTransitFlags_MAX                     = 9,
};

// Enum Stigma.EPerspectiveView
// NumValues: 0x0003
enum class EPerspectiveView : uint8
{
	TPS                                      = 0,
	FPS                                      = 1,
	EPerspectiveView_MAX                     = 2,
};

// Enum Stigma.EPiercingShotFireType
// NumValues: 0x0003
enum class EPiercingShotFireType : uint8
{
	CrosshairPoint                           = 0,
	Deviation                                = 1,
	EPiercingShotFireType_MAX                = 2,
};

// Enum Stigma.EAIRespawnStyle
// NumValues: 0x0003
enum class EAIRespawnStyle : uint8
{
	None                                     = 0,
	AutoRespawn                              = 1,
	EAIRespawnStyle_MAX                      = 2,
};

// Enum Stigma.ECheckThreat
// NumValues: 0x0003
enum class ECheckThreat : uint8
{
	PullBack                                 = 0,
	Assault                                  = 1,
	ECheckThreat_MAX                         = 2,
};

// Enum Stigma.EPerceptionPhase
// NumValues: 0x0005
enum class EPerceptionPhase : uint8
{
	Careless                                 = 0,
	Doubt                                    = 1,
	Wariness                                 = 2,
	Discovery                                = 3,
	EPerceptionPhase_MAX                     = 4,
};

// Enum Stigma.EAIAttackAction
// NumValues: 0x0006
enum class EAIAttackAction : uint8
{
	None                                     = 0,
	Skill_1                                  = 1,
	Skill_2                                  = 2,
	Skill_3                                  = 3,
	Fire                                     = 4,
	EAIAttackAction_MAX                      = 5,
};

// Enum Stigma.ECompareFunc
// NumValues: 0x0007
enum class ECompareFunc : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	Greater                                  = 2,
	GreaterOrEqual                           = 3,
	Less                                     = 4,
	LessOrEqual                              = 5,
	ECompareFunc_MAX                         = 6,
};

// Enum Stigma.EMainBehaviorType
// NumValues: 0x0009
enum class EMainBehaviorType : uint8
{
	NA                                       = 0,
	ProperLocationMove                       = 1,
	Fight                                    = 2,
	LastLocationPatrol                       = 3,
	Patrol                                   = 4,
	MoveTo                                   = 5,
	LookAround                               = 6,
	DoActivateSwitch                         = 7,
	EMainBehaviorType_MAX                    = 8,
};

// Enum Stigma.EAIRole
// NumValues: 0x0003
enum class EAIRole : uint8
{
	AsHuman                                  = 0,
	AsBot                                    = 1,
	EAIRole_MAX                              = 2,
};

// Enum Stigma.EAI_Tactics
// NumValues: 0x0006
enum class EAI_Tactics : uint8
{
	None                                     = 0,
	Offense                                  = 1,
	Defense                                  = 2,
	Retreat                                  = 3,
	DEV                                      = 4,
	EAI_MAX                                  = 5,
};

// Enum Stigma.EAI_TensionLevel
// NumValues: 0x0004
enum class EAI_TensionLevel : uint8
{
	None                                     = 0,
	Tensioned                                = 1,
	Urgent                                   = 2,
	EAI_MAX                                  = 3,
};

// Enum Stigma.ESightStatus
// NumValues: 0x0004
enum class ESightStatus : uint8
{
	Unseen                                   = 0,
	Seen                                     = 1,
	LostSight                                = 2,
	ESightStatus_MAX                         = 3,
};

// Enum Stigma.EAIFireType
// NumValues: 0x0004
enum class EAIFireType : uint8
{
	NoFire                                   = 0,
	Cautious                                 = 1,
	Blindly                                  = 2,
	EAIFireType_MAX                          = 3,
};

// Enum Stigma.EThreatLevel
// NumValues: 0x0004
enum class EThreatLevel : uint8
{
	Safe                                     = 0,
	Tense                                    = 1,
	Danger                                   = 2,
	EThreatLevel_MAX                         = 3,
};

// Enum Stigma.ESpawnConditionalType
// NumValues: 0x0004
enum class ESpawnConditionalType : uint8
{
	NA                                       = 0,
	SpawnFinished                            = 1,
	SpawnActorAllDestroyed                   = 2,
	ESpawnConditionalType_MAX                = 3,
};

// Enum Stigma.EAlertType
// NumValues: 0x0008
enum class EAlertType : uint8
{
	None                                     = 0,
	Revive                                   = 1,
	TeamDeath                                = 2,
	Transfer                                 = 3,
	Hacking                                  = 4,
	Bounty_AddBuffs                          = 5,
	Bounty_ChangePhase                       = 6,
	EAlertType_MAX                           = 7,
};

// Enum Stigma.EBattleSetting
// NumValues: 0x0007
enum class EBattleSetting : uint8
{
	NA                                       = 0,
	MIN_PLAYER                               = 1,
	MAX_PLAYER                               = 5,
	MIN_AI_PLAYER                            = 1,
	MAX_AI_PLAYER                            = 100,
	MAX_BATTLE_SETTING_CNT                   = 101,
	EBattleSetting_MAX                       = 102,
};

// Enum Stigma.EWinTeam
// NumValues: 0x0006
enum class EWinTeam : uint8
{
	BrokenBattle                             = 255,
	Draw                                     = 0,
	TeamA                                    = 1,
	TeamB                                    = 2,
	MAX_WIN_TEAM_CNT                         = 3,
	EWinTeam_MAX                             = 256,
};

// Enum Stigma.EBattleStatus
// NumValues: 0x0008
enum class EBattleStatus : uint8
{
	Idle                                     = 0,
	Matching                                 = 1,
	WaitLogin                                = 2,
	Starting                                 = 3,
	Fighting                                 = 4,
	Finish                                   = 5,
	MAX_BATTLE_STATUS_CNT                    = 6,
	EBattleStatus_MAX                        = 7,
};

// Enum Stigma.EPlayerStatus
// NumValues: 0x000F
enum class EPlayerStatus : uint8
{
	NA                                       = 0,
	Waiting                                  = 10,
	MatchPicked                              = 13,
	MatchReserved                            = 15,
	Matched                                  = 20,
	Playing                                  = 30,
	JumpingToBattle                          = 40,
	Quit_LastUser                            = 99,
	Disconnected                             = 100,
	Quit                                     = 101,
	NotJoined                                = 102,
	Banned                                   = 103,
	InvalidUser                              = 200,
	MAX_BATTLE_PLAYER_STATUS_CNT             = 201,
	EPlayerStatus_MAX                        = 202,
};

// Enum Stigma.EBattleModePhase
// NumValues: 0x0007
enum class EBattleModePhase : uint8
{
	PreBattle                                = 0,
	PreRound                                 = 1,
	InRound                                  = 2,
	PostRound                                = 3,
	FinishRound                              = 4,
	FinishBattle                             = 5,
	EBattleModePhase_MAX                     = 6,
};

// Enum Stigma.EFindMatchStatus
// NumValues: 0x0006
enum class EFindMatchStatus : uint8
{
	NA                                       = 0,
	WaitAck                                  = 1,
	Matching                                 = 2,
	Matched                                  = 3,
	Reconnecting                             = 4,
	EFindMatchStatus_MAX                     = 5,
};

// Enum Stigma.EFinishReason
// NumValues: 0x0005
enum class EFinishReason : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	STOP_NoHuman                             = 2,
	STOP_EmptyTeam                           = 3,
	EFinishReason_MAX                        = 4,
};

// Enum Stigma.EBattleStats
// NumValues: 0x0004
enum class EBattleStats : uint8
{
	Total                                    = 0,
	InSpawnMax                               = 1,
	MAX_BATTLE_STATS_CNT                     = 2,
	EBattleStats_MAX                         = 3,
};

// Enum Stigma.EBattleDecision
// NumValues: 0x0005
enum class EBattleDecision : uint8
{
	WinOrLose                                = 0,
	Draw                                     = 1,
	Timeout                                  = 2,
	InvalidMatch                             = 3,
	EBattleDecision_MAX                      = 4,
};

// Enum Stigma.ERoundResult
// NumValues: 0x0006
enum class ERoundResult : uint8
{
	Win                                      = 0,
	Lose                                     = 1,
	Draw                                     = 2,
	Neutral_RedWin                           = 3,
	Neutral_BlueWin                          = 4,
	ERoundResult_MAX                         = 5,
};

// Enum Stigma.ERoundResultReason
// NumValues: 0x0004
enum class ERoundResultReason : uint8
{
	NA                                       = 0,
	Annihilation                             = 1,
	Vantage                                  = 2,
	ERoundResultReason_MAX                   = 3,
};

// Enum Stigma.EBarrierState
// NumValues: 0x0005
enum class EBarrierState : uint8
{
	Disable                                  = 0,
	BlockEnemy                               = 1,
	BlockAlly                                = 2,
	BlockAll                                 = 3,
	EBarrierState_MAX                        = 4,
};

// Enum Stigma.ERenderTargetSize
// NumValues: 0x0005
enum class ERenderTargetSize : uint8
{
	Full                                     = 0,
	Double                                   = 1,
	Half                                     = 2,
	Quater                                   = 3,
	ERenderTargetSize_MAX                    = 4,
};

// Enum Stigma.EBattleClosingPhase
// NumValues: 0x0004
enum class EBattleClosingPhase : uint8
{
	None                                     = 0,
	PlayingOutro                             = 1,
	ResultUI                                 = 2,
	EBattleClosingPhase_MAX                  = 3,
};

// Enum Stigma.EBattleStoreTab
// NumValues: 0x0005
enum class EBattleStoreTab : uint8
{
	Armor                                    = 0,
	Buff                                     = 1,
	Weapon                                   = 2,
	ActiveSkill                              = 3,
	EBattleStoreTab_MAX                      = 4,
};

// Enum Stigma.EArmorRechargeType
// NumValues: 0x0005
enum class EArmorRechargeType : uint8
{
	NA                                       = 0,
	BattleStore                              = 1,
	SupplyStore                              = 2,
	Function_PerRound                        = 3,
	EArmorRechargeType_MAX                   = 4,
};

// Enum Stigma.EGoldRewardType
// NumValues: 0x000D
enum class EGoldRewardType : uint8
{
	NA                                       = 0,
	Initial                                  = 1,
	BreakIn                                  = 2,
	RoundReward                              = 3,
	GoldBox                                  = 4,
	Kill                                     = 5,
	Assist                                   = 6,
	Bounty                                   = 7,
	Hacking                                  = 8,
	Function_Start                           = 9,
	Function_PerRound                        = 10,
	FreeGold                                 = 11,
	EGoldRewardType_MAX                      = 12,
};

// Enum Stigma.EOvercomePhase
// NumValues: 0x0005
enum class EOvercomePhase : uint8
{
	NotIn                                    = 0,
	Early                                    = 1,
	JustTime                                 = 2,
	Late                                     = 3,
	EOvercomePhase_MAX                       = 4,
};

// Enum Stigma.EFootstepSide
// NumValues: 0x0003
enum class EFootstepSide : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EFootstepSide_MAX                        = 2,
};

// Enum Stigma.EHitHeight
// NumValues: 0x0004
enum class EHitHeight : uint8
{
	Low                                      = 0,
	Middle                                   = 1,
	High                                     = 2,
	EHitHeight_MAX                           = 3,
};

// Enum Stigma.EHitDirection
// NumValues: 0x0007
enum class EHitDirection : uint8
{
	Front                                    = 0,
	FrontLeft                                = 1,
	FrontRight                               = 2,
	Back                                     = 3,
	Left                                     = 4,
	Right                                    = 5,
	EHitDirection_MAX                        = 6,
};

// Enum Stigma.EBountyActionType
// NumValues: 0x0004
enum class EBountyActionType : uint8
{
	Gettering                                = 0,
	Transfer                                 = 1,
	Hacking                                  = 2,
	EBountyActionType_MAX                    = 3,
};

// Enum Stigma.EBountyTargetResult
// NumValues: 0x0004
enum class EBountyTargetResult : uint8
{
	Progressing                              = 0,
	SuccessTransfer                          = 1,
	Failed                                   = 2,
	EBountyTargetResult_MAX                  = 3,
};

// Enum Stigma.EScoreFrom
// NumValues: 0x0004
enum class EScoreFrom : uint8
{
	Constant                                 = 0,
	ELOScore                                 = 1,
	InverseELOScore                          = 2,
	EScoreFrom_MAX                           = 3,
};

// Enum Stigma.EGTA_Strategy
// NumValues: 0x0005
enum class EGTA_Strategy : uint8
{
	GatherGold                               = 0,
	KillSender                               = 1,
	HackSafe                                 = 2,
	DefenseSafe                              = 3,
	EGTA_MAX                                 = 4,
};

// Enum Stigma.ESafeHackStatus
// NumValues: 0x0005
enum class ESafeHackStatus : uint8
{
	Safe                                     = 0,
	BeingHackedByMe                          = 1,
	BeingHackedByMyTeam                      = 2,
	BeingHackedByOtherTeam                   = 3,
	ESafeHackStatus_MAX                      = 4,
};

// Enum Stigma.EKTA_Strategy
// NumValues: 0x0004
enum class EKTA_Strategy : uint8
{
	SeekAndDestroy                           = 0,
	ReviveAlly                               = 1,
	Survive                                  = 2,
	EKTA_MAX                                 = 3,
};

// Enum Stigma.EAIFightState
// NumValues: 0x0007
enum class EAIFightState : uint8
{
	None                                     = 0,
	Fire_Aiming                              = 1,
	Fire_Shooting                            = 2,
	Fire_Ending                              = 3,
	Action_Start                             = 4,
	Action_Doing                             = 5,
	EAIFightState_MAX                        = 6,
};

// Enum Stigma.ETargetLocationType
// NumValues: 0x0004
enum class ETargetLocationType : uint8
{
	Hold                                     = 0,
	PullBack                                 = 1,
	PushOn                                   = 2,
	ETargetLocationType_MAX                  = 3,
};

// Enum Stigma.EBTLookAroundPhase
// NumValues: 0x0003
enum class EBTLookAroundPhase : uint8
{
	WaitingScan                              = 0,
	LookAround                               = 1,
	EBTLookAroundPhase_MAX                   = 2,
};

// Enum Stigma.EAIFireUntil
// NumValues: 0x0003
enum class EAIFireUntil : uint8
{
	Immediately                              = 0,
	Time                                     = 1,
	EAIFireUntil_MAX                         = 2,
};

// Enum Stigma.EAI_LookAt
// NumValues: 0x0004
enum class EAI_LookAt : uint8
{
	Forward                                  = 0,
	Enemy                                    = 1,
	Around                                   = 2,
	EAI_MAX                                  = 3,
};

// Enum Stigma.EAI_MoveType
// NumValues: 0x0005
enum class EAI_MoveType : uint8
{
	JustRun                                  = 0,
	ToFight                                  = 1,
	RunAway                                  = 2,
	ToRevive                                 = 3,
	EAI_MAX                                  = 4,
};

// Enum Stigma.EAI_ReadyFor
// NumValues: 0x0004
enum class EAI_ReadyFor : uint8
{
	Move                                     = 0,
	Shooting                                 = 1,
	LongRangedMove                           = 2,
	EAI_MAX                                  = 3,
};

// Enum Stigma.EBuffEffectType
// NumValues: 0x002C
enum class EBuffEffectType : uint8
{
	UndefinedBuff                            = 0,
	FireDelay_DecRate                        = 1,
	Additional_MaxStock                      = 2,
	PlayRate_Actions                         = 3,
	DamageRate_Actions                       = 4,
	SlowDownTimeScaler                       = 5,
	StunTimeScaler                           = 6,
	DamageScaler                             = 7,
	DeviationScaler                          = 8,
	Fov_SetFov                               = 9,
	Damage_IncRate                           = 10,
	Range_IncRate                            = 11,
	AdditionalBullet                         = 12,
	AdditionalMagazine                       = 13,
	ReloadSpeed_IncRate                      = 14,
	HealPerSec                               = 15,
	GunDeviation_Fire_1PV_DecRate            = 16,
	GunDeviation_Fire_3PV_DecRate            = 17,
	GunDeviation_DecRate                     = 18,
	Deviation_Recovery_DecRate               = 19,
	BodyDeviation_Aiming_DecRate             = 20,
	BodyDeviation_Moving_DecRate             = 21,
	BodyDeviation_Crouch_DecRate             = 22,
	Recoil_DecRate_Vert                      = 23,
	Recoil_DecRate_Horz                      = 24,
	Recoil_DecRate_Crosshair                 = 25,
	Recoil_DecRate_Camera                    = 26,
	Recoil_Recovery_1PV_DecRate              = 27,
	Recoil_Recovery_3PV_DecRate              = 28,
	ControlPower_Inc                         = 29,
	CooltimeDecreaseSec                      = 30,
	DurationIncreaseSec                      = 31,
	SlowDownDecreaseSec                      = 32,
	StunDecreaseSec                          = 33,
	DoubleTap_JudgeTime_IncRate              = 34,
	TwoTapDecreaseRate                       = 35,
	FlashBangDecreaseSec                     = 36,
	BoneBreakDecreaseSec                     = 37,
	SpeedBoost_Stand                         = 38,
	SpeedBoost_Crouch                        = 39,
	SpeedBoost_Aim                           = 40,
	ScanRange                                = 41,
	ScanRangeDistance                        = 42,
	EBuffEffectType_MAX                      = 43,
};

// Enum Stigma.EBuffValueDisplayType
// NumValues: 0x0008
enum class EBuffValueDisplayType : uint8
{
	NotDisplay                               = 0,
	FloatAndPercent                          = 1,
	FloatAndMultiplyBy100Percent             = 2,
	FloatAndSecond                           = 3,
	Integer                                  = 4,
	IntegerAndSecond                         = 5,
	FloatAndMeter                            = 6,
	EBuffValueDisplayType_MAX                = 7,
};

// Enum Stigma.EBuffValueType
// NumValues: 0x0003
enum class EBuffValueType : uint8
{
	Scalar                                   = 0,
	Curve                                    = 1,
	EBuffValueType_MAX                       = 2,
};

// Enum Stigma.EBuffLimitType
// NumValues: 0x0004
enum class EBuffLimitType : uint8
{
	LimitedTime                              = 0,
	UntilDeath                               = 1,
	Unlimited                                = 2,
	EBuffLimitType_MAX                       = 3,
};

// Enum Stigma.EBuildTarget
// NumValues: 0x0005
enum class EBuildTarget : uint8
{
	None                                     = 0,
	Client                                   = 1,
	Editor                                   = 2,
	Server                                   = 3,
	EBuildTarget_MAX                         = 4,
};

// Enum Stigma.EBuildType
// NumValues: 0x0004
enum class EBuildType : uint8
{
	Debug                                    = 0,
	Development                              = 1,
	Shipping                                 = 2,
	EBuildType_MAX                           = 3,
};

// Enum Stigma.EAppBuild
// NumValues: 0x0004
enum class EAppBuild : uint8
{
	Game                                     = 0,
	Demo                                     = 1,
	Playtest                                 = 2,
	EAppBuild_MAX                            = 3,
};

// Enum Stigma.ERunEnv
// NumValues: 0x0007
enum class ERunEnv : uint8
{
	NA                                       = 0,
	PRODUCTION                               = 1,
	STAGING                                  = 2,
	TEST                                     = 3,
	DEV                                      = 4,
	LOADTEST                                 = 5,
	ERunEnv_MAX                              = 6,
};

// Enum Stigma.EServiceRegion
// NumValues: 0x0007
enum class EServiceRegion : uint8
{
	None                                     = 0,
	Asia_East                                = 1,
	Asia_South                               = 2,
	America_North                            = 10,
	America_South                            = 11,
	EU                                       = 20,
	EServiceRegion_MAX                       = 21,
};

// Enum Stigma.EChallengeResultType
// NumValues: 0x0003
enum class EChallengeResultType : uint8
{
	Clear                                    = 0,
	Fail                                     = 1,
	EChallengeResultType_MAX                 = 2,
};

// Enum Stigma.EShapeType
// NumValues: 0x0004
enum class EShapeType : uint8
{
	NA                                       = 0,
	Capsule                                  = 1,
	Box                                      = 2,
	EShapeType_MAX                           = 3,
};

// Enum Stigma.ECLBModePhase
// NumValues: 0x0007
enum class ECLBModePhase : uint8
{
	None                                     = 0,
	StartFighting                            = 1,
	Fighting                                 = 2,
	StartLoading                             = 3,
	Loading                                  = 4,
	Finish                                   = 5,
	ECLBModePhase_MAX                        = 6,
};

// Enum Stigma.ECLB_SectorType
// NumValues: 0x0008
enum class ECLB_SectorType : uint8
{
	NA                                       = 0,
	Annihilation                             = 1,
	Defension                                = 2,
	Securement                               = 3,
	Intermission                             = 4,
	Intermission_PrepareForBattle            = 5,
	Intermission_FinishBattle                = 6,
	ECLB_MAX                                 = 7,
};

// Enum Stigma.EClientSessionResult
// NumValues: 0x000C
enum class EClientSessionResult : uint8
{
	OK                                       = 0,
	Fail_InProgress                          = 1,
	Fail_NoInterface                         = 2,
	Fail_NoMyID                              = 3,
	Fail_FindSession                         = 4,
	Fail_JoinSession                         = 5,
	Fail_NoOpenSlot                          = 6,
	Fail_NotExistSession                     = 7,
	Fail_CouldNotRetrieveAddress             = 8,
	Fail_AlreadyInSession                    = 9,
	Fail_UnknownError                        = 10,
	EClientSessionResult_MAX                 = 11,
};

// Enum Stigma.EClientSessionStatus
// NumValues: 0x0008
enum class EClientSessionStatus : uint8
{
	Idle                                     = 0,
	FindingSession                           = 1,
	JoiningSession                           = 2,
	InSession                                = 3,
	Ending                                   = 4,
	Ended                                    = 5,
	DestroyingSession                        = 6,
	EClientSessionStatus_MAX                 = 7,
};

// Enum Stigma.EValidity
// NumValues: 0x0004
enum class EValidity : uint8
{
	Invalid                                  = 0,
	Validating                               = 1,
	Valid                                    = 2,
	EValidity_MAX                            = 3,
};

// Enum Stigma.EPlayerSide
// NumValues: 0x0005
enum class EPlayerSide : uint8
{
	Self                                     = 0,
	Ally                                     = 1,
	Enemy                                    = 2,
	Unknown                                  = 3,
	EPlayerSide_MAX                          = 4,
};

// Enum Stigma.EAttackIconType
// NumValues: 0x0006
enum class EAttackIconType : uint8
{
	Pistol                                   = 0,
	Fist                                     = 1,
	Grapple                                  = 2,
	Knife                                    = 3,
	Bomb                                     = 4,
	EAttackIconType_MAX                      = 5,
};

// Enum Stigma.ELifeState
// NumValues: 0x0004
enum class ELifeState : uint8
{
	None                                     = 0,
	Alive                                    = 1,
	Dead                                     = 2,
	ELifeState_MAX                           = 3,
};

// Enum Stigma.EPassiveSkillSubCategory
// NumValues: 0x0013
enum class EPassiveSkillSubCategory : uint8
{
	NA                                       = 0,
	Movement                                 = 1,
	ScanRange                                = 2,
	Booster_Cooltime                         = 10,
	Booster_Duration                         = 11,
	Resist_SlowDown                          = 20,
	Resist_Stun                              = 21,
	Resist_TwoTap                            = 22,
	Resist_FlashBang                         = 23,
	Resist_BoneBreak                         = 24,
	GunMastery_FireDelay                     = 50,
	GunMastery_SteadyAim                     = 51,
	GunMastery_Recoil                        = 52,
	GunMastery_Recovery                      = 53,
	GunMastery_ShootNRun                     = 54,
	GunMastery_ControlPower                  = 55,
	GunMastery_ThrowGun                      = 56,
	GunMastery_DoubleTap                     = 57,
	EPassiveSkillSubCategory_MAX             = 58,
};

// Enum Stigma.EBoosterAcquisitionType
// NumValues: 0x0005
enum class EBoosterAcquisitionType : uint8
{
	NA                                       = 0,
	Free                                     = 1,
	Paid                                     = 2,
	MAX_COUNT                                = 3,
	EBoosterAcquisitionType_MAX              = 4,
};

// Enum Stigma.EStackables
// NumValues: 0x0003
enum class EStackables : uint8
{
	NA                                       = 0,
	Card                                     = 1,
	EStackables_MAX                          = 2,
};

// Enum Stigma.ERandomBoxType
// NumValues: 0x0006
enum class ERandomBoxType : uint8
{
	NA                                       = 0,
	Weapon                                   = 1,
	Skin                                     = 2,
	Consumable                               = 3,
	Currency                                 = 4,
	ERandomBoxType_MAX                       = 5,
};

// Enum Stigma.EFuncTarget
// NumValues: 0x001C
enum class EFuncTarget : uint8
{
	NA                                       = 0,
	EXP                                      = 1,
	LearnEXP                                 = 2,
	PassEXP                                  = 3,
	Diamond                                  = 4,
	BoosterTicket                            = 5,
	BoosterSlot                              = 6,
	AutoBooster                              = 7,
	SkillLevel                               = 8,
	SkillSlot                                = 9,
	SkillPoint                               = 10,
	Nickname                                 = 11,
	Character                                = 12,
	BulletCount                              = 13,
	BulletTip                                = 14,
	BSPlus                                   = 15,
	Gold_Start                               = 16,
	Gold_PerRound                            = 17,
	LearningPoint                            = 18,
	DisableMatch                             = 19,
	BoosterCooltime                          = 20,
	BoosterDuration                          = 21,
	MasterHP                                 = 22,
	Armor_PerRound                           = 23,
	MagazineCount                            = 24,
	ActionSkillStock                         = 25,
	ActionSkillCooltime                      = 26,
	EFuncTarget_MAX                          = 27,
};

// Enum Stigma.EGoods
// NumValues: 0x003D
enum class EGoods : uint8
{
	NA                                       = 0,
	Master                                   = 1,
	Weapon                                   = 2,
	Currency                                 = 3,
	Function                                 = 4,
	Emblem                                   = 5,
	ProfileCard                              = 6,
	Bundle                                   = 7,
	Box                                      = 8,
	NicknameFX                               = 9,
	MASTER_Mr_Ten                            = 11,
	MASTER_Mr_HollowPoint                    = 12,
	MASTER_Mr_Parabellum                     = 13,
	MASTER_Nano                              = 15,
	MASTER_One                               = 16,
	MASTER_Twin                              = 17,
	MASTER_Gray_Hand                         = 18,
	MASTER_Gray_Heavy                        = 19,
	MASTER_Gray_Paper                        = 20,
	MASTER_HW_Zero                           = 21,
	MASTER_HW_Crush                          = 22,
	MASTER_HW_Grasper                        = 23,
	MASTER_Alexa                             = 24,
	MASTER_Spy_Flon                          = 25,
	MASTER_Spy_BJ                            = 26,
	MASTER_Spy_Poice                         = 27,
	MASTER_Smile_Sim                         = 28,
	MASTER_Zombie_Nicol                      = 29,
	MASTER_KingFred                          = 30,
	MASTER_Micron                            = 31,
	MASTER_Secret                            = 32,
	MASTER_Wander                            = 33,
	MASTER_Royal                             = 34,
	GUN_BrenTen                              = 101,
	GUN_DanWessonBruin                       = 102,
	GUN_HKP30L                               = 103,
	GUN_CZP10F                               = 104,
	GUN_RugerMark4L                          = 105,
	GUN_KelTecCP33                           = 106,
	GUN_WaltherPPK                           = 107,
	GUN_Taurus180C                           = 108,
	GUN_CZ2075RAMI                           = 109,
	GUN_Glock45                              = 110,
	GUN_BobergXR9                            = 111,
	GUN_MossbergMC1                          = 112,
	GUN_Glock26                              = 113,
	GUN_SIGP365                              = 114,
	GUN_FNFiveSeven                          = 115,
	GUN_STICombatMaster                      = 116,
	GUN_AF2011A1                             = 117,
	GUN_DesertEagleL6                        = 118,
	GUN_Glock18C                             = 119,
	GUN_Beretta93R                           = 120,
	GUN_WaltherPPQ                           = 121,
	GUN_Beretta96A1                          = 122,
	GUN_Kimber1911R                          = 123,
	GUN_ColtPython357M                       = 124,
	GUN_SnapDouble                           = 125,
	GUN_BreakDouble                          = 126,
	Common                                   = 255,
	EGoods_MAX                               = 256,
};

// Enum Stigma.EBuffCategory
// NumValues: 0x000B
enum class EBuffCategory : uint8
{
	None                                     = 0,
	GunMastery                               = 1,
	Movement                                 = 2,
	Booster                                  = 3,
	Resist                                   = 4,
	Heal                                     = 5,
	Strengthen                               = 6,
	Action                                   = 7,
	ModeBuff                                 = 8,
	Player                                   = 9,
	EBuffCategory_MAX                        = 10,
};

// Enum Stigma.EArmorCategory
// NumValues: 0x0003
enum class EArmorCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	EArmorCategory_MAX                       = 2,
};

// Enum Stigma.EProfileCardCategory
// NumValues: 0x0003
enum class EProfileCardCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	EProfileCardCategory_MAX                 = 2,
};

// Enum Stigma.EEmblemCategory
// NumValues: 0x0003
enum class EEmblemCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	EEmblemCategory_MAX                      = 2,
};

// Enum Stigma.ENicknameFXCategory
// NumValues: 0x0003
enum class ENicknameFXCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	ENicknameFXCategory_MAX                  = 2,
};

// Enum Stigma.EEmoticonCategory
// NumValues: 0x0003
enum class EEmoticonCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	EEmoticonCategory_MAX                    = 2,
};

// Enum Stigma.EExpiryType
// NumValues: 0x0005
enum class EExpiryType : uint8
{
	None                                     = 0,
	Count                                    = 1,
	ElapsedTime                              = 2,
	SpecificDate                             = 3,
	EExpiryType_MAX                          = 4,
};

// Enum Stigma.ECurrencyTypes
// NumValues: 0x000F
enum class ECurrencyTypes : uint8
{
	NA                                       = 0,
	SteamCash                                = 1,
	BSCash                                   = 2,
	Diamond                                  = 3,
	SkillPoint                               = 4,
	MasterCoin                               = 5,
	LearningPoint                            = 6,
	BoosterTicket                            = 7,
	Mileage                                  = 8,
	BattleCoin                               = 10,
	BSCash_Free                              = 11,
	Diamond_Free                             = 12,
	Recruit                                  = 13,
	BoosterTicket_Challenge                  = 100,
	ECurrencyTypes_MAX                       = 101,
};

// Enum Stigma.EExpType
// NumValues: 0x0005
enum class EExpType : uint8
{
	NA                                       = 0,
	Player                                   = 1,
	BattlePass                               = 2,
	Master                                   = 3,
	EExpType_MAX                             = 4,
};

// Enum Stigma.EBuyingPlace
// NumValues: 0x0004
enum class EBuyingPlace : uint8
{
	NA                                       = 0,
	Shop                                     = 1,
	BlackMarket                              = 2,
	EBuyingPlace_MAX                         = 3,
};

// Enum Stigma.EBattlePassCategory
// NumValues: 0x0003
enum class EBattlePassCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	EBattlePassCategory_MAX                  = 2,
};

// Enum Stigma.EEventPageType
// NumValues: 0x000B
enum class EEventPageType : uint8
{
	NA                                       = 0,
	Attendance                               = 1,
	KeepConnect                              = 2,
	Mission                                  = 3,
	Collection                               = 4,
	TrackMission                             = 5,
	MasterMission                            = 6,
	PlatformMission                          = 7,
	DailyMission                             = 254,
	ChallengeMode                            = 255,
	EEventPageType_MAX                       = 256,
};

// Enum Stigma.EMissionType
// NumValues: 0x000A
enum class EMissionType : uint8
{
	NA                                       = 0,
	Challenge                                = 1,
	Event                                    = 2,
	Daily                                    = 3,
	BattlePass                               = 4,
	Achievement                              = 5,
	Beginner                                 = 6,
	Master                                   = 7,
	Platform                                 = 8,
	EMissionType_MAX                         = 9,
};

// Enum Stigma.EAnnouncerCategory
// NumValues: 0x0003
enum class EAnnouncerCategory : uint8
{
	NA                                       = 0,
	Common                                   = 1,
	EAnnouncerCategory_MAX                   = 2,
};

// Enum Stigma.ENicknameTestResult
// NumValues: 0x0005
enum class ENicknameTestResult : uint8
{
	OK                                       = 0,
	LengthProblem                            = 1,
	WrongLetter                              = 2,
	MyNickname                               = 3,
	ENicknameTestResult_MAX                  = 4,
};

// Enum Stigma.EUriType
// NumValues: 0x0005
enum class EUriType : uint8
{
	Live                                     = 0,
	QA                                       = 1,
	Dev                                      = 2,
	MAX_URI_CNT                              = 3,
	EUriType_MAX                             = 4,
};

// Enum Stigma.EAccountState
// NumValues: 0x0005
enum class EAccountState : uint8
{
	NA                                       = 0,
	Active                                   = 1,
	DeActive                                 = 2,
	MAX_ACCOUNT_STATUS_CNT                   = 3,
	EAccountState_MAX                        = 4,
};

// Enum Stigma.EPublisher
// NumValues: 0x0007
enum class EPublisher : uint8
{
	NA                                       = 0,
	Dev                                      = 1,
	Inside                                   = 2,
	Steam                                    = 10,
	Epic                                     = 20,
	MAX_PUBLISH_TYPE_CNT                     = 21,
	EPublisher_MAX                           = 22,
};

// Enum Stigma.EUserInGameState
// NumValues: 0x0005
enum class EUserInGameState : uint8
{
	NA                                       = 0,
	Lobby                                    = 1,
	InBattle                                 = 2,
	MAX_USER_STATEL_CNT                      = 3,
	EUserInGameState_MAX                     = 4,
};

// Enum Stigma.EUserTypes
// NumValues: 0x0006
enum class EUserTypes : uint8
{
	Normal                                   = 0,
	Tester                                   = 1,
	Operator                                 = 2,
	Developer                                = 3,
	MAX_USER_TYPE_CNT                        = 4,
	EUserTypes_MAX                           = 5,
};

// Enum Stigma.EJoinType
// NumValues: 0x0006
enum class EJoinType : uint8
{
	NA                                       = 0,
	AsPlayer                                 = 1,
	AsObserver                               = 2,
	AsCoach                                  = 3,
	AsGM                                     = 100,
	EJoinType_MAX                            = 101,
};

// Enum Stigma.ECharacterSlot
// NumValues: 0x0008
enum class ECharacterSlot : uint8
{
	NA                                       = 0,
	Slot_1                                   = 1,
	Slot_2                                   = 2,
	Slot_3                                   = 3,
	Slot_4                                   = 4,
	Slot_5                                   = 5,
	MAX_SLOT_CNT                             = 6,
	ECharacterSlot_MAX                       = 7,
};

// Enum Stigma.ESpecterID
// NumValues: 0x0014
enum class ESpecterID : uint8
{
	NA                                       = 0,
	MU_ZERO                                  = 1,
	AS_MASTERS                               = 10,
	AS_MASTERS_MR_TEN                        = 11,
	AS_MASTERS_MR_PARABELLUM                 = 12,
	AS_MASTERS_MR_HOLLOW_POINT               = 13,
	AS_MAID                                  = 20,
	AS_MAID_WIP                              = 21,
	AS_MAID_MS_TWIN                          = 22,
	AS_MAID_MS_NANO                          = 23,
	AB_GRAYS                                 = 30,
	AB_GRAY_HEAVY                            = 31,
	AB_GRAY_PAPER                            = 32,
	AB_GRAY_HANDS                            = 33,
	AB_HARD_WORKERS                          = 40,
	AB_HARD_WORKERS_ZERO                     = 41,
	AB_HARD_WORKERS_TWO                      = 42,
	AB_HARD_WORKERS_THREE                    = 43,
	MAX_SPECTER_ID_CNT                       = 44,
	ESpecterID_MAX                           = 45,
};

// Enum Stigma.ECharacterLevel
// NumValues: 0x0007
enum class ECharacterLevel : uint8
{
	Zero                                     = 0,
	L1                                       = 1,
	L2                                       = 2,
	L3                                       = 3,
	L4                                       = 4,
	MAX_LEVEL_CNT                            = 5,
	ECharacterLevel_MAX                      = 6,
};

// Enum Stigma.ECharacterWeapons
// NumValues: 0x0003
enum class ECharacterWeapons : uint8
{
	WeaponID                                 = 0,
	MAX_CHARACTER_WEAPONS_CNT                = 1,
	ECharacterWeapons_MAX                    = 2,
};

// Enum Stigma.ECharacterParts
// NumValues: 0x0006
enum class ECharacterParts : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	Arm                                      = 2,
	Leg                                      = 3,
	MAX_CHARACTER_PARTS_CNT                  = 4,
	ECharacterParts_MAX                      = 5,
};

// Enum Stigma.ECharacterSkills
// NumValues: 0x0006
enum class ECharacterSkills : uint8
{
	Skill1                                   = 0,
	Skill2                                   = 1,
	Skill3                                   = 2,
	Skill4                                   = 3,
	MAX_CHARACTER_SkillS_CNT                 = 4,
	ECharacterSkills_MAX                     = 5,
};

// Enum Stigma.EContentUnlockCondition
// NumValues: 0x0005
enum class EContentUnlockCondition : uint8
{
	NA                                       = 0,
	Level                                    = 1,
	MissionClear                             = 2,
	EventClear                               = 3,
	EContentUnlockCondition_MAX              = 4,
};

// Enum Stigma.ECostType
// NumValues: 0x0004
enum class ECostType : uint8
{
	NA                                       = 0,
	Currency                                 = 1,
	Item                                     = 2,
	ECostType_MAX                            = 3,
};

// Enum Stigma.EIncType
// NumValues: 0x0004
enum class EIncType : uint8
{
	NA                                       = 0,
	Ratio                                    = 1,
	Quantity                                 = 2,
	EIncType_MAX                             = 3,
};

// Enum Stigma.EGrantTiming
// NumValues: 0x0007
enum class EGrantTiming : uint8
{
	NA                                       = 0,
	OnBattleResult                           = 1,
	Once                                     = 2,
	DailyOnce                                = 3,
	DailyOnce_Login                          = 4,
	OnBattle                                 = 5,
	EGrantTiming_MAX                         = 6,
};

// Enum Stigma.EAccumulationType
// NumValues: 0x0004
enum class EAccumulationType : uint8
{
	None                                     = 0,
	Duration                                 = 1,
	Effect                                   = 2,
	EAccumulationType_MAX                    = 3,
};

// Enum Stigma.EButtonIntensity
// NumValues: 0x0004
enum class EButtonIntensity : uint8
{
	Low                                      = 0,
	Middle                                   = 1,
	High                                     = 2,
	EButtonIntensity_MAX                     = 3,
};

// Enum Stigma.EProgressBarTextType
// NumValues: 0x0005
enum class EProgressBarTextType : uint8
{
	NoText                                   = 0,
	Fraction                                 = 1,
	Percentage                               = 2,
	MaxText                                  = 3,
	EProgressBarTextType_MAX                 = 4,
};

// Enum Stigma.EItemUITag
// NumValues: 0x0009
enum class EItemUITag : uint8
{
	NA                                       = 0,
	New                                      = 1,
	Hot                                      = 2,
	CommingSoon                              = 3,
	Event                                    = 4,
	Starter                                  = 5,
	Free                                     = 6,
	Premium                                  = 7,
	EItemUITag_MAX                           = 8,
};

// Enum Stigma.EOptionPalettePresetMode
// NumValues: 0x0004
enum class EOptionPalettePresetMode : uint8
{
	CrossHairColors                          = 0,
	CrossHairOutlineColors                   = 1,
	CustomColors                             = 2,
	EOptionPalettePresetMode_MAX             = 3,
};

// Enum Stigma.ESocialUserProfileSlotType
// NumValues: 0x0004
enum class ESocialUserProfileSlotType : uint8
{
	FriendMode                               = 0,
	RecentBattleMode                         = 1,
	SteamFriendMode                          = 2,
	ESocialUserProfileSlotType_MAX           = 3,
};

// Enum Stigma.EElevatorStatus
// NumValues: 0x0005
enum class EElevatorStatus : uint8
{
	Idle                                     = 0,
	ClosingDoor                              = 1,
	Moving                                   = 2,
	OpeningDoor                              = 3,
	EElevatorStatus_MAX                      = 4,
};

// Enum Stigma.EEQG_PawnType
// NumValues: 0x0004
enum class EEQG_PawnType : uint8
{
	Allies                                   = 0,
	Enemies                                  = 1,
	ExposedEnemies                           = 2,
	EEQG_MAX                                 = 3,
};

// Enum Stigma.ESafeType
// NumValues: 0x0005
enum class ESafeType : uint8
{
	MySafe                                   = 0,
	EnemySafe_Richer                         = 1,
	EnemySafe_Random                         = 2,
	Random                                   = 3,
	ESafeType_MAX                            = 4,
};

// Enum Stigma.EEQT_Side
// NumValues: 0x0004
enum class EEQT_Side : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Side                                     = 2,
	EEQT_MAX                                 = 3,
};

// Enum Stigma.EAI_TeamSide
// NumValues: 0x0003
enum class EAI_TeamSide : uint32
{
	Ally                                     = 0,
	Enemy                                    = 1,
	EAI_MAX                                  = 2,
};

// Enum Stigma.EDateType
// NumValues: 0x0005
enum class EDateType : uint8
{
	NA                                       = 0,
	Permanent                                = 1,
	Expiry                                   = 2,
	Validity                                 = 3,
	EDateType_MAX                            = 4,
};

// Enum Stigma.EEventUserType
// NumValues: 0x0004
enum class EEventUserType : uint8
{
	All                                      = 0,
	Newbie                                   = 1,
	Return                                   = 2,
	EEventUserType_MAX                       = 3,
};

// Enum Stigma.EGunFeedback
// NumValues: 0x0008
enum class EGunFeedback : uint8
{
	Ready                                    = 0,
	Firing                                   = 1,
	Fired                                    = 2,
	LoadingMagazine                          = 3,
	LoadingBullet                            = 4,
	NeedToChangeMagazine                     = 5,
	NeedToLoadBullet                         = 6,
	EGunFeedback_MAX                         = 7,
};

// Enum Stigma.EGunState
// NumValues: 0x0005
enum class EGunState : uint8
{
	Idle                                     = 0,
	Firing                                   = 1,
	LoadMagazine                             = 2,
	LoadBullet                               = 3,
	EGunState_MAX                            = 4,
};

// Enum Stigma.EGunnerState
// NumValues: 0x000C
enum class EGunnerState : uint8
{
	NA                                       = 0,
	Busy                                     = 1,
	NotReady                                 = 2,
	BeingReady                               = 3,
	ReadyToFire                              = 4,
	LoadingManagine                          = 5,
	LoadingBullet                            = 6,
	NeedToChangeMagazine                     = 7,
	NeedToLoadBullet                         = 8,
	NeedToExtraJob                           = 9,
	DoingExtraJob                            = 10,
	EGunnerState_MAX                         = 11,
};

// Enum Stigma.EGoldBoxType
// NumValues: 0x0004
enum class EGoldBoxType : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EGoldBoxType_MAX                         = 3,
};

// Enum Stigma.EGoodsCategory
// NumValues: 0x000B
enum class EGoodsCategory : uint8
{
	NA                                       = 0,
	Recommend                                = 1,
	Set                                      = 2,
	Master                                   = 3,
	Gun                                      = 4,
	GunAccessary                             = 5,
	ProfileItem                              = 6,
	Consume                                  = 7,
	Currency                                 = 8,
	BSCash                                   = 9,
	EGoodsCategory_MAX                       = 10,
};

// Enum Stigma.EBuyLimitType
// NumValues: 0x0007
enum class EBuyLimitType : uint8
{
	NoLimit                                  = 0,
	PerDay                                   = 1,
	PerWeek                                  = 2,
	PerMonth                                 = 3,
	PerYear                                  = 4,
	PerAccount                               = 5,
	EBuyLimitType_MAX                        = 6,
};

// Enum Stigma.EGoToWidgetType
// NumValues: 0x0005
enum class EGoToWidgetType : uint8
{
	NA                                       = 0,
	LobbyPage                                = 1,
	PopupBase                                = 2,
	Custom                                   = 255,
	EGoToWidgetType_MAX                      = 256,
};

// Enum Stigma.ECompetitionType
// NumValues: 0x0005
enum class ECompetitionType : uint8
{
	NA                                       = 0,
	Hour                                     = 1,
	Day                                      = 2,
	Week                                     = 3,
	ECompetitionType_MAX                     = 4,
};

// Enum Stigma.ECompetitionState
// NumValues: 0x0007
enum class ECompetitionState : uint8
{
	NA                                       = 0,
	Break                                    = 1,
	PostBreak                                = 2,
	Grouping                                 = 3,
	Playing                                  = 4,
	ResultWaiting                            = 5,
	ECompetitionState_MAX                    = 6,
};

// Enum Stigma.EGunUsage
// NumValues: 0x0006
enum class EGunUsage : uint8
{
	MainGun                                  = 0,
	SubGun                                   = 1,
	LootedGun                                = 2,
	SpecialGun_Main                          = 3,
	SpecialGun_Sub                           = 4,
	EGunUsage_MAX                            = 5,
};

// Enum Stigma.EGunSearchGroup
// NumValues: 0x0005
enum class EGunSearchGroup : uint8
{
	None                                     = 0,
	Handy                                    = 1,
	Balance                                  = 2,
	Power                                    = 3,
	EGunSearchGroup_MAX                      = 4,
};

// Enum Stigma.EGunSpecFilter
// NumValues: 0x0008
enum class EGunSpecFilter : uint8
{
	ControlPower                             = 0,
	Damage                                   = 1,
	Accuracy                                 = 2,
	ReloadSpeed                              = 3,
	FireDelay                                = 4,
	Recoil                                   = 5,
	Bullets                                  = 6,
	EGunSpecFilter_MAX                       = 7,
};

// Enum Stigma.ESpecialGunSlot
// NumValues: 0x0003
enum class ESpecialGunSlot : uint8
{
	Main                                     = 0,
	Sub                                      = 1,
	ESpecialGunSlot_MAX                      = 2,
};

// Enum Stigma.EGunPartsSocket
// NumValues: 0x0011
enum class EGunPartsSocket : uint8
{
	NA                                       = 0,
	Dot                                      = 1,
	Dot2                                     = 2,
	Slide                                    = 3,
	MGZ                                      = 4,
	MGZ2                                     = 5,
	CS                                       = 6,
	Laser                                    = 7,
	SLC                                      = 8,
	MGZ_Charm                                = 9,
	SLC_Charm                                = 10,
	Body_Charm                               = 11,
	SLC_Sticker                              = 12,
	Body_Sticker                             = 13,
	Slide_Sticker                            = 14,
	Body_Sticker2                            = 15,
	EGunPartsSocket_MAX                      = 16,
};

// Enum Stigma.EHitReply
// NumValues: 0x0005
enum class EHitReply : uint8
{
	None                                     = 0,
	IsBlocked                                = 1,
	NoPassiveAction                          = 2,
	Abnormal_TwoTapped                       = 4,
	EHitReply_MAX                            = 5,
};

// Enum Stigma.EFloatingHitMessage
// NumValues: 0x0006
enum class EFloatingHitMessage : uint8
{
	None                                     = 0,
	DoubleTap                                = 1,
	Headshot                                 = 2,
	ArmorBreak                               = 3,
	LegInjury                                = 4,
	EFloatingHitMessage_MAX                  = 5,
};

// Enum Stigma.EHitSoundType
// NumValues: 0x0005
enum class EHitSoundType : uint8
{
	NA                                       = 0,
	PlaySound3D                              = 1,
	Attacker2D                               = 2,
	Victim2D                                 = 4,
	EHitSoundType_MAX                        = 5,
};

// Enum Stigma.EKillLogType
// NumValues: 0x0003
enum class EKillLogType : uint8
{
	Normal                                   = 0,
	Revive                                   = 1,
	EKillLogType_MAX                         = 2,
};

// Enum Stigma.EIMCType
// NumValues: 0x000B
enum class EIMCType : uint8
{
	NA                                       = 0,
	Game_Common                              = 1,
	Lobby                                    = 2,
	Battle_Common                            = 3,
	Playing                                  = 4,
	Spectating                               = 5,
	RadioChat                                = 6,
	DisableControl                           = 7,
	Intermission                             = 8,
	Debug                                    = 255,
	EIMCType_MAX                             = 256,
};

// Enum Stigma.EInputSlotType
// NumValues: 0x0004
enum class EInputSlotType : uint8
{
	Keyboard_First                           = 0,
	Keyboard_Second                          = 1,
	GamePad_First                            = 2,
	EInputSlotType_MAX                       = 3,
};

// Enum Stigma.EInputActioUsage
// NumValues: 0x0003
enum class EInputActioUsage : uint8
{
	Default                                  = 0,
	Debug                                    = 1,
	EInputActioUsage_MAX                     = 2,
};

// Enum Stigma.EInteractionResult
// NumValues: 0x0004
enum class EInteractionResult : uint8
{
	OK                                       = 0,
	Delaying                                 = 1,
	Failed                                   = 2,
	EInteractionResult_MAX                   = 3,
};

// Enum Stigma.EItemEquipFilter
// NumValues: 0x0004
enum class EItemEquipFilter : uint8
{
	None                                     = 0,
	Equipable                                = 1,
	UnEquipable                              = 2,
	EItemEquipFilter_MAX                     = 3,
};

// Enum Stigma.ELobbyCameraFit
// NumValues: 0x0004
enum class ELobbyCameraFit : uint8
{
	HorizontalFit                            = 0,
	VerticalFit                              = 1,
	DistanceFirstFit                         = 2,
	ELobbyCameraFit_MAX                      = 3,
};

// Enum Stigma.ELocalRegistryValueType
// NumValues: 0x0005
enum class ELocalRegistryValueType : uint8
{
	BOOL                                     = 0,
	INT32                                    = 1,
	REAL32                                   = 2,
	STRING                                   = 3,
	ELocalRegistryValueType_MAX              = 4,
};

// Enum Stigma.EMannequinUpdateType
// NumValues: 0x0004
enum class EMannequinUpdateType : uint8
{
	Manual                                   = 0,
	FromLocalPlayerState                     = 1,
	FromParty                                = 2,
	EMannequinUpdateType_MAX                 = 3,
};

// Enum Stigma.ECharaMarkerState
// NumValues: 0x0005
enum class ECharaMarkerState : uint8
{
	Hidden                                   = 0,
	Alive                                    = 1,
	Dead                                     = 2,
	BountyTarget                             = 3,
	ECharaMarkerState_MAX                    = 4,
};

// Enum Stigma.EMatchModePhase
// NumValues: 0x0010
enum class EMatchModePhase : uint8
{
	None                                     = 0,
	ValidatePublicIP                         = 1,
	CreateSession                            = 2,
	RegisterServer                           = 3,
	Idle                                     = 4,
	CharacterPick                            = 5,
	TransitClients                           = 6,
	MapLoading                               = 7,
	WaitLogin                                = 8,
	StartBattle                              = 9,
	Fighting                                 = 10,
	Draining                                 = 11,
	EndBattle                                = 12,
	Terminate                                = 13,
	Error                                    = 14,
	EMatchModePhase_MAX                      = 15,
};

// Enum Stigma.EConditionDriveLoc
// NumValues: 0x0004
enum class EConditionDriveLoc : uint8
{
	DediAndClient                            = 0,
	Client                                   = 1,
	ServiceServer                            = 2,
	EConditionDriveLoc_MAX                   = 3,
};

// Enum Stigma.EConditionCancelType
// NumValues: 0x0003
enum class EConditionCancelType : uint8
{
	Condition                                = 0,
	Mission                                  = 1,
	EConditionCancelType_MAX                 = 2,
};

// Enum Stigma.EMissionConditionType
// NumValues: 0x0038
enum class EMissionConditionType : uint8
{
	NA                                       = 0,
	Character                                = 1,
	FightingStyle                            = 2,
	Mode                                     = 3,
	ModeCategory                             = 4,
	Organization                             = 5,
	CharacterIndex                           = 6,
	Damage                                   = 50,
	DamageSkill                              = 51,
	HitRangeOver                             = 52,
	HitRangeUnder                            = 53,
	WeaponGroup                              = 54,
	FloatingHit                              = 55,
	KillAssist                               = 56,
	Kill                                     = 57,
	Assist                                   = 58,
	KillSkill                                = 59,
	KillStreak                               = 60,
	KillRangeOver                            = 61,
	KillRangeUnder                           = 62,
	Resurrect                                = 63,
	UseBooster                               = 64,
	AbilityUp                                = 65,
	ArmorReplace                             = 66,
	GetObject                                = 67,
	Action                                   = 68,
	WithParty                                = 69,
	Challenge_TimeLimitRound                 = 70,
	OpenUI                                   = 71,
	Interact                                 = 72,
	EnterArea                                = 73,
	ChangeMaster                             = 74,
	ChangeWeapon                             = 75,
	KillGun                                  = 76,
	Death                                    = 77,
	RoundWin                                 = 78,
	UseInvenItem                             = 150,
	PurchaseGoods                            = 151,
	ChangeParts                              = 152,
	ChangeGunParts                           = 153,
	ChangeGunCharm                           = 154,
	ChangeGunSticker                         = 155,
	LevelUpPassiveSkill                      = 156,
	LevelUpPlayer                            = 157,
	GetItem                                  = 158,
	GunCollect                               = 159,
	UseCurrency                              = 160,
	PlayTime                                 = 200,
	Win                                      = 201,
	MVP                                      = 202,
	GameCount                                = 203,
	RoundCount                               = 204,
	Challenge_ClearRound                     = 205,
	MissionClear                             = 250,
	TrackCount                               = 251,
	MAX                                      = 252,
};

// Enum Stigma.EMissionConditionSubTypeCategory
// NumValues: 0x0006
enum class EMissionConditionSubTypeCategory : uint8
{
	None                                     = 0,
	Enum                                     = 1,
	ItemCategory                             = 2,
	Int                                      = 3,
	FName                                    = 4,
	EMissionConditionSubTypeCategory_MAX     = 5,
};

// Enum Stigma.EMissionJudger
// NumValues: 0x0004
enum class EMissionJudger : uint8
{
	DedicatedServer                          = 0,
	Service                                  = 1,
	Client                                   = 2,
	EMissionJudger_MAX                       = 3,
};

// Enum Stigma.EMissionProgressType
// NumValues: 0x0006
enum class EMissionProgressType : uint8
{
	InValid                                  = 0,
	Progressing                              = 1,
	Complete                                 = 2,
	Finished                                 = 3,
	Fail                                     = 4,
	EMissionProgressType_MAX                 = 5,
};

// Enum Stigma.EModeCategory
// NumValues: 0x0009
enum class EModeCategory : uint8
{
	NA                                       = 0,
	PVP                                      = 1,
	PVE                                      = 2,
	Ranking                                  = 3,
	Training                                 = 4,
	BOT                                      = 5,
	Welcome                                  = 6,
	CustomGame                               = 7,
	EModeCategory_MAX                        = 8,
};

// Enum Stigma.EMatchStartCondition
// NumValues: 0x0004
enum class EMatchStartCondition : uint8
{
	Always                                   = 0,
	WithMinimalPlayers                       = 1,
	WithMaximumPlayers                       = 2,
	EMatchStartCondition_MAX                 = 3,
};

// Enum Stigma.EModeTeamAliveCheckType
// NumValues: 0x0004
enum class EModeTeamAliveCheckType : uint8
{
	None                                     = 0,
	Defeat_OneTeam                           = 1,
	Survive_OneTeam                          = 2,
	EModeTeamAliveCheckType_MAX              = 3,
};

// Enum Stigma.ECanChangeMaster
// NumValues: 0x0004
enum class ECanChangeMaster : uint8
{
	No                                       = 0,
	Yes_IfDie                                = 1,
	Yes_Always                               = 2,
	ECanChangeMaster_MAX                     = 3,
};

// Enum Stigma.ERoundStartRespawnType
// NumValues: 0x0004
enum class ERoundStartRespawnType : uint8
{
	NoRespawn                                = 0,
	Respawn                                  = 1,
	RespawnInPlace                           = 2,
	ERoundStartRespawnType_MAX               = 3,
};

// Enum Stigma.EModeUnlockCondition
// NumValues: 0x0004
enum class EModeUnlockCondition : uint8
{
	None                                     = 0,
	ModePlayCount                            = 1,
	Level                                    = 2,
	EModeUnlockCondition_MAX                 = 3,
};

// Enum Stigma.EMotionSource
// NumValues: 0x0005
enum class EMotionSource : uint8
{
	Both                                     = 0,
	LowerOnly                                = 1,
	UpperOnly                                = 2,
	UpperOnlyAndNoLowerRot                   = 3,
	EMotionSource_MAX                        = 4,
};

// Enum Stigma.ERootMotionFrom
// NumValues: 0x0004
enum class ERootMotionFrom : uint8
{
	None                                     = 0,
	FromMontage                              = 1,
	FromEverything                           = 2,
	ERootMotionFrom_MAX                      = 3,
};

// Enum Stigma.EObjectLife
// NumValues: 0x0004
enum class EObjectLife : uint8
{
	Alive                                    = 0,
	Disappearing                             = 1,
	Inactivated                              = 2,
	EObjectLife_MAX                          = 3,
};

// Enum Stigma.EObjectType
// NumValues: 0x0004
enum class EObjectType : uint8
{
	NA                                       = 0,
	Gun                                      = 1,
	GoldBox                                  = 2,
	EObjectType_MAX                          = 3,
};

// Enum Stigma.EOptionDescType
// NumValues: 0x0003
enum class EOptionDescType : uint8
{
	Text                                     = 0,
	CustomWidget                             = 1,
	EOptionDescType_MAX                      = 2,
};

// Enum Stigma.EInviteReply
// NumValues: 0x0004
enum class EInviteReply : uint8
{
	OK                                       = 0,
	Cancel                                   = 1,
	Error                                    = 2,
	EInviteReply_MAX                         = 3,
};

// Enum Stigma.EEventPageHack
// NumValues: 0x0007
enum class EEventPageHack : uint8
{
	ClearAll                                 = 0,
	Clear                                    = 1,
	ClearOptionReward                        = 2,
	AddCount                                 = 3,
	AddOptionCount                           = 4,
	AddProgress                              = 5,
	EEventPageHack_MAX                       = 6,
};

// Enum Stigma.EBattlePassHack
// NumValues: 0x0002
enum class EBattlePassHack : uint8
{
	Clear                                    = 0,
	EBattlePassHack_MAX                      = 1,
};

// Enum Stigma.EMissionHack
// NumValues: 0x0005
enum class EMissionHack : uint8
{
	Clear                                    = 0,
	Success                                  = 1,
	AddCount                                 = 2,
	Change                                   = 3,
	EMissionHack_MAX                         = 4,
};

// Enum Stigma.EAnnounceUIType
// NumValues: 0x0004
enum class EAnnounceUIType : uint8
{
	OnAll                                    = 0,
	OnLobby                                  = 1,
	OnGame                                   = 2,
	EAnnounceUIType_MAX                      = 3,
};

// Enum Stigma.EMailType
// NumValues: 0x0004
enum class EMailType : uint8
{
	NA                                       = 0,
	Managing                                 = 1,
	System                                   = 2,
	EMailType_MAX                            = 3,
};

// Enum Stigma.EMailState
// NumValues: 0x0007
enum class EMailState : uint8
{
	NA                                       = 0,
	NotRead                                  = 1,
	OnlyRead                                 = 2,
	ReadReceive                              = 3,
	Delete                                   = 4,
	Expired                                  = 5,
	EMailState_MAX                           = 6,
};

// Enum Stigma.ERoomStatus
// NumValues: 0x0007
enum class ERoomStatus : uint8
{
	NA                                       = 0,
	Idle                                     = 1,
	WaitDediToStart                          = 2,
	WaitDediToStartWaiting                   = 3,
	Starting                                 = 4,
	Fighting                                 = 5,
	ERoomStatus_MAX                          = 6,
};

// Enum Stigma.EPlayerMatchOption
// NumValues: 0x0003
enum class EPlayerMatchOption : uint8
{
	NoFlag                                   = 0,
	IgnoreMinPlayer                          = 2,
	EPlayerMatchOption_MAX                   = 3,
};

// Enum Stigma.EBattlePingType
// NumValues: 0x0007
enum class EBattlePingType : uint8
{
	None                                     = 0,
	Alert                                    = 1,
	Assemble                                 = 2,
	Help                                     = 3,
	Secure                                   = 4,
	ReqRevive                                = 5,
	EBattlePingType_MAX                      = 6,
};

// Enum Stigma.EPreviewActorType
// NumValues: 0x0003
enum class EPreviewActorType : uint8
{
	Gun                                      = 0,
	Charm                                    = 1,
	EPreviewActorType_MAX                    = 2,
};

// Enum Stigma.ERadioChatCategory
// NumValues: 0x0007
enum class ERadioChatCategory : uint8
{
	NA                                       = 0,
	Battle                                   = 1,
	Tactics                                  = 2,
	Talk                                     = 3,
	Strategy                                 = 4,
	END                                      = 5,
	ERadioChatCategory_MAX                   = 6,
};

// Enum Stigma.ESafeState
// NumValues: 0x0004
enum class ESafeState : uint8
{
	Normal                                   = 0,
	Steal                                    = 1,
	Repair                                   = 2,
	ESafeState_MAX                           = 3,
};

// Enum Stigma.EServerStatus
// NumValues: 0x000A
enum class EServerStatus : uint8
{
	NA                                       = 0,
	Idle                                     = 10,
	CharacterPick                            = 20,
	MapLoading                               = 30,
	WaitLogin                                = 40,
	StartBattle                              = 50,
	Fighting                                 = 60,
	Finish                                   = 70,
	Error                                    = 100,
	EServerStatus_MAX                        = 101,
};

// Enum Stigma.EServerSessionStatus
// NumValues: 0x0009
enum class EServerSessionStatus : uint8
{
	Idle                                     = 0,
	Creating                                 = 1,
	Created                                  = 2,
	Starting                                 = 3,
	Started                                  = 4,
	Ending                                   = 5,
	Ended                                    = 6,
	Destroying                               = 7,
	EServerSessionStatus_MAX                 = 8,
};

// Enum Stigma.EShopSortType
// NumValues: 0x0006
enum class EShopSortType : uint8
{
	Kind                                     = 0,
	Recent                                   = 1,
	Grade                                    = 2,
	Sale                                     = 3,
	DeadLine                                 = 4,
	EShopSortType_MAX                        = 5,
};

// Enum Stigma.EShopSetCategoryType
// NumValues: 0x0005
enum class EShopSetCategoryType : uint8
{
	All                                      = 0,
	Master                                   = 1,
	Gun                                      = 2,
	Accesory                                 = 3,
	EShopSetCategoryType_MAX                 = 4,
};

// Enum Stigma.EShopMasterCategoryType
// NumValues: 0x0004
enum class EShopMasterCategoryType : uint8
{
	All                                      = 0,
	Body                                     = 1,
	Hair                                     = 2,
	EShopMasterCategoryType_MAX              = 3,
};

// Enum Stigma.EShopGunCategoryType
// NumValues: 0x0002
enum class EShopGunCategoryType : uint8
{
	All                                      = 0,
	EShopGunCategoryType_MAX                 = 1,
};

// Enum Stigma.EShopAccesoryCategoryType
// NumValues: 0x0004
enum class EShopAccesoryCategoryType : uint8
{
	All                                      = 0,
	Sticker                                  = 1,
	Charm                                    = 2,
	EShopAccesoryCategoryType_MAX            = 3,
};

// Enum Stigma.EShopProfileItemCategoryType
// NumValues: 0x0005
enum class EShopProfileItemCategoryType : uint8
{
	All                                      = 0,
	Emblem                                   = 1,
	ProfileCard                              = 2,
	NicknameFX                               = 3,
	EShopProfileItemCategoryType_MAX         = 4,
};

// Enum Stigma.EShopConsumeCategoryType
// NumValues: 0x0004
enum class EShopConsumeCategoryType : uint8
{
	All                                      = 0,
	Booster                                  = 1,
	ETC                                      = 2,
	EShopConsumeCategoryType_MAX             = 3,
};

// Enum Stigma.EShopCurrencyCategoryType
// NumValues: 0x0002
enum class EShopCurrencyCategoryType : uint8
{
	All                                      = 0,
	EShopCurrencyCategoryType_MAX            = 1,
};

// Enum Stigma.EShopBSCashCategoryType
// NumValues: 0x0002
enum class EShopBSCashCategoryType : uint8
{
	All                                      = 0,
	EShopBSCashCategoryType_MAX              = 1,
};

// Enum Stigma.EGoodsDisplayType
// NumValues: 0x0007
enum class EGoodsDisplayType : uint8
{
	None                                     = 0,
	Key                                      = 1,
	Character                                = 2,
	Box                                      = 3,
	Parts                                    = 4,
	Bundle                                   = 5,
	EGoodsDisplayType_MAX                    = 6,
};

// Enum Stigma.EGoodsItemSlot
// NumValues: 0x000B
enum class EGoodsItemSlot : uint8
{
	None                                     = 0,
	Key                                      = 1,
	Character                                = 2,
	Box                                      = 3,
	Headgear                                 = 4,
	Facegear                                 = 5,
	Upper                                    = 6,
	Lower                                    = 7,
	Foot                                     = 8,
	Set                                      = 9,
	EGoodsItemSlot_MAX                       = 10,
};

// Enum Stigma.EGoodsBuyInfo
// NumValues: 0x0009
enum class EGoodsBuyInfo : uint8
{
	None                                     = 0,
	SoldOut                                  = 1,
	Limited_Level                            = 2,
	Limited_Time                             = 3,
	Limited_Upcoming                         = 4,
	Owned_All                                = 5,
	Owned_Parts                              = 6,
	NotEnoughCurrency                        = 7,
	EGoodsBuyInfo_MAX                        = 8,
};

// Enum Stigma.EGoodsOwningInfo
// NumValues: 0x0004
enum class EGoodsOwningInfo : uint8
{
	NotOwned                                 = 0,
	PartlyOwned                              = 1,
	Owned                                    = 2,
	EGoodsOwningInfo_MAX                     = 3,
};

// Enum Stigma.EHoldingPropMode
// NumValues: 0x0005
enum class EHoldingPropMode : uint8
{
	NoProp                                   = 0,
	ThrowableProp                            = 1,
	CoverableProp                            = 2,
	ConcealableProp                          = 3,
	EHoldingPropMode_MAX                     = 4,
};

// Enum Stigma.EAnimMoveMode
// NumValues: 0x0004
enum class EAnimMoveMode : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	Jog                                      = 2,
	EAnimMoveMode_MAX                        = 3,
};

// Enum Stigma.ESessionClosingStep
// NumValues: 0x0004
enum class ESessionClosingStep : uint8
{
	None                                     = 0,
	EndSession                               = 1,
	DestroySession                           = 2,
	ESessionClosingStep_MAX                  = 3,
};

// Enum Stigma.ESupplyItemType
// NumValues: 0x0004
enum class ESupplyItemType : uint8
{
	RechargeArmor                            = 0,
	AddMagazineCount                         = 1,
	AddHP                                    = 2,
	ESupplyItemType_MAX                      = 3,
};

// Enum Stigma.ESurveyTime
// NumValues: 0x0005
enum class ESurveyTime : uint8
{
	NA                                       = 0,
	Alpha                                    = 1,
	SteamFest                                = 2,
	GTT                                      = 3,
	ESurveyTime_MAX                          = 4,
};

// Enum Stigma.ESurveyType
// NumValues: 0x0006
enum class ESurveyType : uint8
{
	NA                                       = 0,
	Point                                    = 1,
	SelectSingle                             = 2,
	SelectMulti                              = 3,
	Text                                     = 4,
	ESurveyType_MAX                          = 5,
};

// Enum Stigma.ETableEntryType
// NumValues: 0x0002
enum class ETableEntryType : uint8
{
	ETC                                      = 0,
	MAX                                      = 1,
};

// Enum Stigma.ELifeControlByColliding
// NumValues: 0x0004
enum class ELifeControlByColliding : uint8
{
	None                                     = 0,
	Break                                    = 1,
	DecreaseDurability                       = 2,
	ELifeControlByColliding_MAX              = 3,
};

// Enum Stigma.EThrowSourceType
// NumValues: 0x0006
enum class EThrowSourceType : uint8
{
	SpawnInstance                            = 0,
	OwnersGun                                = 1,
	PrimaryGun                               = 2,
	OwnersProp                               = 3,
	SubGun                                   = 4,
	EThrowSourceType_MAX                     = 5,
};

// Enum Stigma.EThrowTargetType
// NumValues: 0x0004
enum class EThrowTargetType : uint8
{
	HittedPoint                              = 0,
	FixedDistance                            = 1,
	FixedSpline                              = 2,
	EThrowTargetType_MAX                     = 3,
};

// Enum Stigma.EThrowCollisionType
// NumValues: 0x0003
enum class EThrowCollisionType : uint8
{
	Sphere                                   = 0,
	Component                                = 1,
	EThrowCollisionType_MAX                  = 2,
};

// Enum Stigma.EThrowStuckDirection
// NumValues: 0x0004
enum class EThrowStuckDirection : uint8
{
	Throwing                                 = 0,
	SurfaceNormal                            = 1,
	AdjustedThrowing                         = 2,
	EThrowStuckDirection_MAX                 = 3,
};

// Enum Stigma.EThrowStartLocationType
// NumValues: 0x0003
enum class EThrowStartLocationType : uint8
{
	AnimationPose                            = 0,
	WorldPose                                = 1,
	EThrowStartLocationType_MAX              = 2,
};

// Enum Stigma.ETierGroup
// NumValues: 0x000A
enum class ETierGroup : uint8
{
	NA                                       = 0,
	Specter                                  = 1,
	Master                                   = 2,
	Diamond                                  = 3,
	Platinum                                 = 4,
	Gold                                     = 5,
	Silver                                   = 6,
	Bronze                                   = 7,
	Iron                                     = 8,
	ETierGroup_MAX                           = 9,
};

// Enum Stigma.ETimeTweenState
// NumValues: 0x0005
enum class ETimeTweenState : uint8
{
	Stop                                     = 0,
	StartWait                                = 1,
	Start                                    = 2,
	Finish                                   = 3,
	ETimeTweenState_MAX                      = 4,
};

// Enum Stigma.ETeamSide
// NumValues: 0x0004
enum class ETeamSide : uint8
{
	Ally                                     = 0,
	Enemy1                                   = 1,
	Enemy2                                   = 2,
	ETeamSide_MAX                            = 3,
};

// Enum Stigma.ETooltipType
// NumValues: 0x0022
enum class ETooltipType : uint8
{
	Default                                  = 0,
	NonItemEntry                             = 1,
	OnlyKeys                                 = 2,
	PartyInvite                              = 3,
	GunSpecDetail                            = 4,
	GMFunction                               = 5,
	TotalFunction                            = 6,
	GunPartsDesc                             = 7,
	GunStatGraph                             = 8,
	BSPlus                                   = 9,
	BulletTip                                = 10,
	KillStreak                               = 11,
	ItemID_Default                           = 200,
	ItemID_PassiveSkill                      = 201,
	ItemID_Skin_Body                         = 202,
	ItemID_Skin_Head                         = 203,
	ItemID_Character                         = 204,
	ItemID_Booster                           = 205,
	ItemID_Function                          = 206,
	ItemID_Currency                          = 207,
	ItemID_Gun_Body                          = 208,
	ItemID_Gun_Slide                         = 209,
	ItemID_Gun_Magazine                      = 210,
	ItemID_Gun_Front                         = 211,
	ItemID_Gun_Sight                         = 212,
	ItemID_Gun_Charm                         = 213,
	ItemID_Gun_Sticker                       = 214,
	ItemID_RandomBox                         = 215,
	ItemID_ProfileCard                       = 216,
	ItemID_Emblem                            = 217,
	ItemID_NicknameFX                        = 218,
	ItemID_Armor                             = 219,
	ItemID_Exp                               = 220,
	ETooltipType_MAX                         = 221,
};

// Enum Stigma.ETransitionPhase
// NumValues: 0x0005
enum class ETransitionPhase : uint8
{
	Idle                                     = 0,
	Query                                    = 1,
	JoinToDedi                               = 2,
	BackToLobby                              = 3,
	ETransitionPhase_MAX                     = 4,
};

// Enum Stigma.ETutorialStartResponse
// NumValues: 0x0005
enum class ETutorialStartResponse : uint8
{
	No                                       = 0,
	Yes                                      = 1,
	Never                                    = 2,
	Yes_Keep                                 = 3,
	ETutorialStartResponse_MAX               = 4,
};

// Enum Stigma.ETutorialState
// NumValues: 0x0004
enum class ETutorialState : uint8
{
	None                                     = 0,
	OnGoing                                  = 1,
	OnClosing                                = 2,
	ETutorialState_MAX                       = 3,
};

// Enum Stigma.EActionWheelPartsType
// NumValues: 0x0004
enum class EActionWheelPartsType : uint8
{
	NA                                       = 0,
	Ping                                     = 1,
	Emoticon                                 = 2,
	EActionWheelPartsType_MAX                = 3,
};

// Enum Stigma.ESelectCharaErrorCode
// NumValues: 0x0008
enum class ESelectCharaErrorCode : uint8
{
	None                                     = 0,
	InvalidPlayerState                       = 1,
	InvalidPlayerContext                     = 2,
	InvalidPlayerController                  = 3,
	AlreadySelected                          = 4,
	HasNotCharacter                          = 5,
	UpcommingCharacter                       = 6,
	ESelectCharaErrorCode_MAX                = 7,
};

// Enum Stigma.EFloatingGuidePosition
// NumValues: 0x0009
enum class EFloatingGuidePosition : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Left                                     = 2,
	Right                                    = 3,
	TopLeft                                  = 4,
	TopRight                                 = 5,
	BottomLeft                               = 6,
	BottomRight                              = 7,
	EFloatingGuidePosition_MAX               = 8,
};

// Enum Stigma.EHelpMenuStateType
// NumValues: 0x0005
enum class EHelpMenuStateType : uint8
{
	Category_Normal                          = 0,
	Category_Selected                        = 1,
	Contents_Normal                          = 2,
	Contents_Selected                        = 3,
	EHelpMenuStateType_MAX                   = 4,
};

// Enum Stigma.EHoverMenuEntryType
// NumValues: 0x0004
enum class EHoverMenuEntryType : uint8
{
	LeftMouseInput                           = 0,
	RightMouseInput                          = 1,
	KeyboardInput                            = 2,
	EHoverMenuEntryType_MAX                  = 3,
};

// Enum Stigma.EOwnedViewingState
// NumValues: 0x0003
enum class EOwnedViewingState : uint8
{
	Owned                                    = 0,
	NotOwned                                 = 1,
	EOwnedViewingState_MAX                   = 2,
};

// Enum Stigma.EOwnedStandardType
// NumValues: 0x0003
enum class EOwnedStandardType : uint8
{
	Inventory                                = 0,
	Unique                                   = 1,
	EOwnedStandardType_MAX                   = 2,
};

// Enum Stigma.ELobbyManneguinVisible
// NumValues: 0x0004
enum class ELobbyManneguinVisible : uint8
{
	All                                      = 0,
	OnlyMe                                   = 1,
	None                                     = 2,
	ELobbyManneguinVisible_MAX               = 3,
};

// Enum Stigma.EMenuBarState
// NumValues: 0x0004
enum class EMenuBarState : uint8
{
	Enable                                   = 0,
	AlwaysEnable                             = 1,
	Disable                                  = 2,
	EMenuBarState_MAX                        = 3,
};

// Enum Stigma.EMenuBarEntryType
// NumValues: 0x0003
enum class EMenuBarEntryType : uint8
{
	Widget                                   = 0,
	Spacer                                   = 1,
	EMenuBarEntryType_MAX                    = 2,
};

// Enum Stigma.EMenuBarEntryTextBindType
// NumValues: 0x0003
enum class EMenuBarEntryTextBindType : uint8
{
	Manual                                   = 0,
	StringTable                              = 1,
	EMenuBarEntryTextBindType_MAX            = 2,
};

// Enum Stigma.EOptionDescProcState
// NumValues: 0x0004
enum class EOptionDescProcState : uint8
{
	Hide                                     = 0,
	Show                                     = 1,
	WaitForHide                              = 2,
	EOptionDescProcState_MAX                 = 3,
};

// Enum Stigma.EOptionPopupResetType
// NumValues: 0x0004
enum class EOptionPopupResetType : uint8
{
	None                                     = 0,
	ResetToDefault                           = 1,
	RevertToOriginal                         = 2,
	EOptionPopupResetType_MAX                = 3,
};

// Enum Stigma.EPassiveSettingLevelState
// NumValues: 0x0007
enum class EPassiveSettingLevelState : uint8
{
	None                                     = 0,
	Learned                                  = 1,
	Current                                  = 2,
	Buffed                                   = 4,
	MaxCanLevelUp                            = 8,
	LevelLocked                              = 32,
	EPassiveSettingLevelState_MAX            = 33,
};

// Enum Stigma.EPlayerReadyState
// NumValues: 0x0004
enum class EPlayerReadyState : uint8
{
	NotBound                                 = 0,
	Bound                                    = 1,
	PlayerReady                              = 2,
	EPlayerReadyState_MAX                    = 3,
};

// Enum Stigma.EPreviewType
// NumValues: 0x0006
enum class EPreviewType : uint8
{
	Image                                    = 0,
	Character                                = 1,
	Gun                                      = 2,
	Charm                                    = 3,
	ProfileCard                              = 4,
	EPreviewType_MAX                         = 5,
};

// Enum Stigma.ERadioChatPhase
// NumValues: 0x0004
enum class ERadioChatPhase : uint8
{
	NA                                       = 0,
	Category                                 = 1,
	SelectChat                               = 2,
	ERadioChatPhase_MAX                      = 3,
};

// Enum Stigma.ERecruitSequenceType
// NumValues: 0x0009
enum class ERecruitSequenceType : uint8
{
	NA                                       = 0,
	Intro                                    = 1,
	Intro_Loop                               = 2,
	NormalReward                             = 3,
	SpecialReward_Intro                      = 4,
	SpecialReward_Legend_Intro               = 5,
	SpecialReward_Gun                        = 6,
	SpecialReward_Master                     = 7,
	ERecruitSequenceType_MAX                 = 8,
};

// Enum Stigma.ERewardItemState
// NumValues: 0x0004
enum class ERewardItemState : uint8
{
	Default                                  = 0,
	CanReward                                = 1,
	Rewarded                                 = 2,
	ERewardItemState_MAX                     = 3,
};

// Enum Stigma.ESearchUserPopupMode
// NumValues: 0x0004
enum class ESearchUserPopupMode : uint8
{
	Social                                   = 0,
	CustomGame                               = 1,
	Ranking                                  = 2,
	ESearchUserPopupMode_MAX                 = 3,
};

// Enum Stigma.ESocialEntryDisplayType
// NumValues: 0x0004
enum class ESocialEntryDisplayType : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	Away                                     = 2,
	ESocialEntryDisplayType_MAX              = 3,
};

// Enum Stigma.ESocialPopupTabType
// NumValues: 0x0006
enum class ESocialPopupTabType : uint8
{
	Friend                                   = 0,
	RecentPlay                               = 1,
	Steam                                    = 2,
	Accept                                   = 3,
	TabMax                                   = 4,
	ESocialPopupTabType_MAX                  = 5,
};

// Enum Stigma.ESurveyUIPhase
// NumValues: 0x0005
enum class ESurveyUIPhase : uint8
{
	Guide                                    = 0,
	Question                                 = 1,
	Question_Final                           = 2,
	Finish                                   = 3,
	ESurveyUIPhase_MAX                       = 4,
};

// Enum Stigma.EWeeklyBestRecordType
// NumValues: 0x0005
enum class EWeeklyBestRecordType : uint8
{
	NA                                       = 0,
	NoRecord                                 = 1,
	Record                                   = 2,
	Upcoming                                 = 3,
	EWeeklyBestRecordType_MAX                = 4,
};

// Enum Stigma.EUserSlotStatus
// NumValues: 0x0004
enum class EUserSlotStatus : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Permanent                                = 2,
	EUserSlotStatus_MAX                      = 3,
};

// Enum Stigma.EInputKeyType
// NumValues: 0x0003
enum class EInputKeyType : uint8
{
	Action                                   = 0,
	Axis                                     = 1,
	EInputKeyType_MAX                        = 2,
};

// Enum Stigma.EInputKeyModifier
// NumValues: 0x0005
enum class EInputKeyModifier : uint8
{
	None                                     = 0,
	Left_Ctrl                                = 1,
	Left_Alt                                 = 2,
	Left_Shift                               = 3,
	EInputKeyModifier_MAX                    = 4,
};

// Enum Stigma.EKeyBindingType
// NumValues: 0x0004
enum class EKeyBindingType : uint8
{
	NA                                       = 0,
	BATTLE                                   = 1,
	SPECTATE                                 = 2,
	EKeyBindingType_MAX                      = 3,
};

// Enum Stigma.EAAMethod
// NumValues: 0x0005
enum class EAAMethod : uint8
{
	None                                     = 0,
	FXAA                                     = 1,
	TAAU                                     = 2,
	TSR                                      = 3,
	EAAMethod_MAX                            = 4,
};

// Enum Stigma.EUserProfileValidity
// NumValues: 0x0005
enum class EUserProfileValidity : uint8
{
	Invalid                                  = 0,
	NicknameOnly                             = 1,
	BasicUser                                = 2,
	WithCharacter                            = 3,
	EUserProfileValidity_MAX                 = 4,
};

// Enum Stigma.EUserProfileType
// NumValues: 0x0007
enum class EUserProfileType : uint8
{
	NA                                       = 0,
	Searched                                 = 1,
	ToBeFriend                               = 2,
	RecentPlay                               = 3,
	Steam                                    = 4,
	Friend                                   = 5,
	EUserProfileType_MAX                     = 6,
};

// Enum Stigma.EVaultType
// NumValues: 0x0003
enum class EVaultType : uint8
{
	Vault                                    = 0,
	Climb                                    = 1,
	EVaultType_MAX                           = 2,
};

// Enum Stigma.EVoiceGroup
// NumValues: 0x000A
enum class EVoiceGroup : uint8
{
	Super                                    = 0,
	A                                        = 1,
	B                                        = 2,
	C                                        = 3,
	D                                        = 4,
	E                                        = 5,
	F                                        = 6,
	G                                        = 7,
	H                                        = 8,
	EVoiceGroup_MAX                          = 9,
};

// Enum Stigma.EAnnouncerType
// NumValues: 0x0003
enum class EAnnouncerType : uint8
{
	Male                                     = 0,
	Female                                   = 1,
	EAnnouncerType_MAX                       = 2,
};

// Enum Stigma.EWaitingRoomState
// NumValues: 0x000A
enum class EWaitingRoomState : uint8
{
	NA                                       = 0,
	Idle                                     = 1,
	Customizing                              = 2,
	CharacterPick                            = 3,
	Starting                                 = 4,
	Intro                                    = 5,
	Started                                  = 6,
	Quiting                                  = 7,
	Quited                                   = 8,
	EWaitingRoomState_MAX                    = 9,
};

// Enum Stigma.EWeaponType
// NumValues: 0x0007
enum class EWeaponType : uint8
{
	NA                                       = 0,
	BareHand                                 = 1,
	Gun                                      = 2,
	Bomb                                     = 3,
	Knife                                    = 4,
	Sword                                    = 5,
	MAX                                      = 6,
};

// ScriptStruct Stigma.UserID
// 0x0008 (0x0008 - 0x0000)
struct FUserID final
{
public:
	uint64                                        _id;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FUserID) == 0x000008, "Wrong alignment on FUserID");
static_assert(sizeof(FUserID) == 0x000008, "Wrong size on FUserID");
static_assert(offsetof(FUserID, _id) == 0x000000, "Member 'FUserID::_id' has a wrong offset!");

// ScriptStruct Stigma.UserName
// 0x0018 (0x0018 - 0x0000)
struct FUserName final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB2[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FUserName) == 0x000008, "Wrong alignment on FUserName");
static_assert(sizeof(FUserName) == 0x000018, "Wrong size on FUserName");
static_assert(offsetof(FUserName, Name) == 0x000000, "Member 'FUserName::Name' has a wrong offset!");
static_assert(offsetof(FUserName, Tag) == 0x000010, "Member 'FUserName::Tag' has a wrong offset!");

// ScriptStruct Stigma.ItemID
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FItemID
{
public:
	uint8                                         Pad_1CB3[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _id;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CB4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FItemID) == 0x000008, "Wrong alignment on FItemID");
static_assert(sizeof(FItemID) == 0x000010, "Wrong size on FItemID");
static_assert(offsetof(FItemID, _id) == 0x000008, "Member 'FItemID::_id' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Gun_Sticker
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Sticker final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Sticker) == 0x000008, "Wrong alignment on FItemID_Gun_Sticker");
static_assert(sizeof(FItemID_Gun_Sticker) == 0x000010, "Wrong size on FItemID_Gun_Sticker");

// ScriptStruct Stigma.GunPreset
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FGunPreset final
{
public:
	uint8                                         Pad_1CB5[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _PresetCode;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGunType                                      _DEBUG_GunType;                                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1CB6[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGunPreset) == 0x000008, "Wrong alignment on FGunPreset");
static_assert(sizeof(FGunPreset) == 0x000010, "Wrong size on FGunPreset");
static_assert(offsetof(FGunPreset, _PresetCode) == 0x000008, "Member 'FGunPreset::_PresetCode' has a wrong offset!");
static_assert(offsetof(FGunPreset, _DEBUG_GunType) == 0x00000C, "Member 'FGunPreset::_DEBUG_GunType' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Gun_Body
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Body final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Body) == 0x000008, "Wrong alignment on FItemID_Gun_Body");
static_assert(sizeof(FItemID_Gun_Body) == 0x000010, "Wrong size on FItemID_Gun_Body");

// ScriptStruct Stigma.ItemID_Gun_Magazine
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Magazine final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Magazine) == 0x000008, "Wrong alignment on FItemID_Gun_Magazine");
static_assert(sizeof(FItemID_Gun_Magazine) == 0x000010, "Wrong size on FItemID_Gun_Magazine");

// ScriptStruct Stigma.ItemID_Gun_Slide
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Slide final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Slide) == 0x000008, "Wrong alignment on FItemID_Gun_Slide");
static_assert(sizeof(FItemID_Gun_Slide) == 0x000010, "Wrong size on FItemID_Gun_Slide");

// ScriptStruct Stigma.ItemID_Gun_Front
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Front final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Front) == 0x000008, "Wrong alignment on FItemID_Gun_Front");
static_assert(sizeof(FItemID_Gun_Front) == 0x000010, "Wrong size on FItemID_Gun_Front");

// ScriptStruct Stigma.ItemID_Gun_Sight
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Sight final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Sight) == 0x000008, "Wrong alignment on FItemID_Gun_Sight");
static_assert(sizeof(FItemID_Gun_Sight) == 0x000010, "Wrong size on FItemID_Gun_Sight");

// ScriptStruct Stigma.ItemID_Gun_Charm
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gun_Charm final : public FItemID
{
};
static_assert(alignof(FItemID_Gun_Charm) == 0x000008, "Wrong alignment on FItemID_Gun_Charm");
static_assert(sizeof(FItemID_Gun_Charm) == 0x000010, "Wrong size on FItemID_Gun_Charm");

// ScriptStruct Stigma.GunSpec
// 0x00D0 (0x00D0 - 0x0000)
struct FGunSpec final
{
public:
	struct FGunPreset                             Prst;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrstName;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletTip                                    BltTp;                                             // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB7[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Gun_Body                       Bd;                                                // 0x0028(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Magazine                   Mgz;                                               // 0x0038(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Slide                      Sld;                                               // 0x0048(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Front                      Ft;                                                // 0x0058(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Sight                      Tp;                                                // 0x0068(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Sight                      Ud;                                                // 0x0078(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Charm                      ChmBd;                                             // 0x0088(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Charm                      ChmMgz;                                            // 0x0098(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Sticker                    StkBd;                                             // 0x00A8(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Gun_Sticker                    StkSld;                                            // 0x00B8(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMarkd;                                           // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB8[0x7];                                     // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGunSpec) == 0x000008, "Wrong alignment on FGunSpec");
static_assert(sizeof(FGunSpec) == 0x0000D0, "Wrong size on FGunSpec");
static_assert(offsetof(FGunSpec, Prst) == 0x000000, "Member 'FGunSpec::Prst' has a wrong offset!");
static_assert(offsetof(FGunSpec, PrstName) == 0x000010, "Member 'FGunSpec::PrstName' has a wrong offset!");
static_assert(offsetof(FGunSpec, BltTp) == 0x000020, "Member 'FGunSpec::BltTp' has a wrong offset!");
static_assert(offsetof(FGunSpec, Bd) == 0x000028, "Member 'FGunSpec::Bd' has a wrong offset!");
static_assert(offsetof(FGunSpec, Mgz) == 0x000038, "Member 'FGunSpec::Mgz' has a wrong offset!");
static_assert(offsetof(FGunSpec, Sld) == 0x000048, "Member 'FGunSpec::Sld' has a wrong offset!");
static_assert(offsetof(FGunSpec, Ft) == 0x000058, "Member 'FGunSpec::Ft' has a wrong offset!");
static_assert(offsetof(FGunSpec, Tp) == 0x000068, "Member 'FGunSpec::Tp' has a wrong offset!");
static_assert(offsetof(FGunSpec, Ud) == 0x000078, "Member 'FGunSpec::Ud' has a wrong offset!");
static_assert(offsetof(FGunSpec, ChmBd) == 0x000088, "Member 'FGunSpec::ChmBd' has a wrong offset!");
static_assert(offsetof(FGunSpec, ChmMgz) == 0x000098, "Member 'FGunSpec::ChmMgz' has a wrong offset!");
static_assert(offsetof(FGunSpec, StkBd) == 0x0000A8, "Member 'FGunSpec::StkBd' has a wrong offset!");
static_assert(offsetof(FGunSpec, StkSld) == 0x0000B8, "Member 'FGunSpec::StkSld' has a wrong offset!");
static_assert(offsetof(FGunSpec, IsMarkd) == 0x0000C8, "Member 'FGunSpec::IsMarkd' has a wrong offset!");

// ScriptStruct Stigma.CharSpec
// 0x0100 (0x0100 - 0x0000)
struct FCharSpec final
{
public:
	struct FItemID                                Body;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                Head;                                              // 0x0010(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                Armor;                                             // 0x0020(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunSpec                               Gun;                                               // 0x0030(0x00D0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharSpec) == 0x000008, "Wrong alignment on FCharSpec");
static_assert(sizeof(FCharSpec) == 0x000100, "Wrong size on FCharSpec");
static_assert(offsetof(FCharSpec, Body) == 0x000000, "Member 'FCharSpec::Body' has a wrong offset!");
static_assert(offsetof(FCharSpec, Head) == 0x000010, "Member 'FCharSpec::Head' has a wrong offset!");
static_assert(offsetof(FCharSpec, Armor) == 0x000020, "Member 'FCharSpec::Armor' has a wrong offset!");
static_assert(offsetof(FCharSpec, Gun) == 0x000030, "Member 'FCharSpec::Gun' has a wrong offset!");

// ScriptStruct Stigma.UserProfileBase
// 0x0168 (0x0168 - 0x0000)
struct FUserProfileBase
{
public:
	struct FUserID                                IDN;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nick;                                              // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserPlayingAt                                PlyAt;                                             // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB9[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Lv;                                                // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                PCard;                                             // 0x0028(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                Emblem;                                            // 0x0038(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0048(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBA[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              CreatedAt;                                         // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharSpec                              Opt_Char;                                          // 0x0068(0x0100)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserProfileBase) == 0x000008, "Wrong alignment on FUserProfileBase");
static_assert(sizeof(FUserProfileBase) == 0x000168, "Wrong size on FUserProfileBase");
static_assert(offsetof(FUserProfileBase, IDN) == 0x000000, "Member 'FUserProfileBase::IDN' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, Nick) == 0x000008, "Member 'FUserProfileBase::Nick' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, PlyAt) == 0x000020, "Member 'FUserProfileBase::PlyAt' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, Lv) == 0x000024, "Member 'FUserProfileBase::Lv' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, PCard) == 0x000028, "Member 'FUserProfileBase::PCard' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, Emblem) == 0x000038, "Member 'FUserProfileBase::Emblem' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, NicknameFX) == 0x000048, "Member 'FUserProfileBase::NicknameFX' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, Tier) == 0x000058, "Member 'FUserProfileBase::Tier' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, CreatedAt) == 0x000060, "Member 'FUserProfileBase::CreatedAt' has a wrong offset!");
static_assert(offsetof(FUserProfileBase, Opt_Char) == 0x000068, "Member 'FUserProfileBase::Opt_Char' has a wrong offset!");

// ScriptStruct Stigma.UserSearch
// 0x0020 (0x0020 - 0x0000)
struct FUserSearch final
{
public:
	struct FUserID                                IDN;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSearch) == 0x000008, "Wrong alignment on FUserSearch");
static_assert(sizeof(FUserSearch) == 0x000020, "Wrong size on FUserSearch");
static_assert(offsetof(FUserSearch, IDN) == 0x000000, "Member 'FUserSearch::IDN' has a wrong offset!");
static_assert(offsetof(FUserSearch, Nickname) == 0x000008, "Member 'FUserSearch::Nickname' has a wrong offset!");

// ScriptStruct Stigma.ACK_SearchUser
// 0x0028 (0x0028 - 0x0000)
struct FACK_SearchUser final
{
public:
	class FString                                 SearchNick;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUserSearch>                    Result;                                            // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_SearchUser) == 0x000008, "Wrong alignment on FACK_SearchUser");
static_assert(sizeof(FACK_SearchUser) == 0x000028, "Wrong size on FACK_SearchUser");
static_assert(offsetof(FACK_SearchUser, SearchNick) == 0x000000, "Member 'FACK_SearchUser::SearchNick' has a wrong offset!");
static_assert(offsetof(FACK_SearchUser, Offset) == 0x000010, "Member 'FACK_SearchUser::Offset' has a wrong offset!");
static_assert(offsetof(FACK_SearchUser, Limit) == 0x000014, "Member 'FACK_SearchUser::Limit' has a wrong offset!");
static_assert(offsetof(FACK_SearchUser, Result) == 0x000018, "Member 'FACK_SearchUser::Result' has a wrong offset!");

// ScriptStruct Stigma.GoodsFilterInfo
// 0x0008 (0x0008 - 0x0000)
struct FGoodsFilterInfo final
{
public:
	ECharaType                                    _CharaFilter;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      _GunFilter;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoodsCategory                                _MainCategory;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBB[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         _SubCategoryIdx;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoodsFilterInfo) == 0x000004, "Wrong alignment on FGoodsFilterInfo");
static_assert(sizeof(FGoodsFilterInfo) == 0x000008, "Wrong size on FGoodsFilterInfo");
static_assert(offsetof(FGoodsFilterInfo, _CharaFilter) == 0x000000, "Member 'FGoodsFilterInfo::_CharaFilter' has a wrong offset!");
static_assert(offsetof(FGoodsFilterInfo, _GunFilter) == 0x000001, "Member 'FGoodsFilterInfo::_GunFilter' has a wrong offset!");
static_assert(offsetof(FGoodsFilterInfo, _MainCategory) == 0x000002, "Member 'FGoodsFilterInfo::_MainCategory' has a wrong offset!");
static_assert(offsetof(FGoodsFilterInfo, _SubCategoryIdx) == 0x000004, "Member 'FGoodsFilterInfo::_SubCategoryIdx' has a wrong offset!");

// ScriptStruct Stigma.DOT
// 0x0008 (0x0008 - 0x0000)
struct FDOT final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDOT) == 0x000004, "Wrong alignment on FDOT");
static_assert(sizeof(FDOT) == 0x000008, "Wrong size on FDOT");
static_assert(offsetof(FDOT, Duration) == 0x000000, "Member 'FDOT::Duration' has a wrong offset!");
static_assert(offsetof(FDOT, Damage) == 0x000004, "Member 'FDOT::Damage' has a wrong offset!");

// ScriptStruct Stigma.FloatingHitCoolTime
// 0x000C (0x000C - 0x0000)
struct FFloatingHitCoolTime final
{
public:
	float                                         HeadShot;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DoubleTap;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegInjury;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatingHitCoolTime) == 0x000004, "Wrong alignment on FFloatingHitCoolTime");
static_assert(sizeof(FFloatingHitCoolTime) == 0x00000C, "Wrong size on FFloatingHitCoolTime");
static_assert(offsetof(FFloatingHitCoolTime, HeadShot) == 0x000000, "Member 'FFloatingHitCoolTime::HeadShot' has a wrong offset!");
static_assert(offsetof(FFloatingHitCoolTime, DoubleTap) == 0x000004, "Member 'FFloatingHitCoolTime::DoubleTap' has a wrong offset!");
static_assert(offsetof(FFloatingHitCoolTime, LegInjury) == 0x000008, "Member 'FFloatingHitCoolTime::LegInjury' has a wrong offset!");

// ScriptStruct Stigma.ActionGraph_SkillInfo
// 0x0060 (0x0060 - 0x0000)
struct FActionGraph_SkillInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGraph_SkillInfo) == 0x000008, "Wrong alignment on FActionGraph_SkillInfo");
static_assert(sizeof(FActionGraph_SkillInfo) == 0x000060, "Wrong size on FActionGraph_SkillInfo");
static_assert(offsetof(FActionGraph_SkillInfo, ID) == 0x000000, "Member 'FActionGraph_SkillInfo::ID' has a wrong offset!");
static_assert(offsetof(FActionGraph_SkillInfo, DisplayName) == 0x000008, "Member 'FActionGraph_SkillInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FActionGraph_SkillInfo, Desc) == 0x000020, "Member 'FActionGraph_SkillInfo::Desc' has a wrong offset!");
static_assert(offsetof(FActionGraph_SkillInfo, Icon) == 0x000038, "Member 'FActionGraph_SkillInfo::Icon' has a wrong offset!");

// ScriptStruct Stigma.UserRole
// 0x0003 (0x0003 - 0x0000)
struct FUserRole final
{
public:
	bool                                          CanCreateCustomGame;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSuperUser;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGM;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserRole) == 0x000001, "Wrong alignment on FUserRole");
static_assert(sizeof(FUserRole) == 0x000003, "Wrong size on FUserRole");
static_assert(offsetof(FUserRole, CanCreateCustomGame) == 0x000000, "Member 'FUserRole::CanCreateCustomGame' has a wrong offset!");
static_assert(offsetof(FUserRole, IsSuperUser) == 0x000001, "Member 'FUserRole::IsSuperUser' has a wrong offset!");
static_assert(offsetof(FUserRole, IsGM) == 0x000002, "Member 'FUserRole::IsGM' has a wrong offset!");

// ScriptStruct Stigma.UserInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FUserInfo final
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserRole                              Role;                                              // 0x0040(0x0003)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBC[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EloRate;                                           // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         TierRank;                                          // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBD[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ProfileCard;                                       // 0x0060(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                Emblem;                                            // 0x0070(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0080(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    LastUsedCharaType;                                 // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBE[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Tutorial;                                          // 0x0094(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathCount;                                        // 0x009C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistCount;                                       // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CBF[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FUserInfo) == 0x000008, "Wrong alignment on FUserInfo");
static_assert(sizeof(FUserInfo) == 0x0000A8, "Wrong size on FUserInfo");
static_assert(offsetof(FUserInfo, UserID) == 0x000000, "Member 'FUserInfo::UserID' has a wrong offset!");
static_assert(offsetof(FUserInfo, Nickname) == 0x000008, "Member 'FUserInfo::Nickname' has a wrong offset!");
static_assert(offsetof(FUserInfo, Country) == 0x000020, "Member 'FUserInfo::Country' has a wrong offset!");
static_assert(offsetof(FUserInfo, Region) == 0x000030, "Member 'FUserInfo::Region' has a wrong offset!");
static_assert(offsetof(FUserInfo, Role) == 0x000040, "Member 'FUserInfo::Role' has a wrong offset!");
static_assert(offsetof(FUserInfo, Level) == 0x000044, "Member 'FUserInfo::Level' has a wrong offset!");
static_assert(offsetof(FUserInfo, Exp) == 0x000048, "Member 'FUserInfo::Exp' has a wrong offset!");
static_assert(offsetof(FUserInfo, PlayTime) == 0x00004C, "Member 'FUserInfo::PlayTime' has a wrong offset!");
static_assert(offsetof(FUserInfo, PlayCount) == 0x000050, "Member 'FUserInfo::PlayCount' has a wrong offset!");
static_assert(offsetof(FUserInfo, EloRate) == 0x000054, "Member 'FUserInfo::EloRate' has a wrong offset!");
static_assert(offsetof(FUserInfo, TierRank) == 0x000058, "Member 'FUserInfo::TierRank' has a wrong offset!");
static_assert(offsetof(FUserInfo, ProfileCard) == 0x000060, "Member 'FUserInfo::ProfileCard' has a wrong offset!");
static_assert(offsetof(FUserInfo, Emblem) == 0x000070, "Member 'FUserInfo::Emblem' has a wrong offset!");
static_assert(offsetof(FUserInfo, NicknameFX) == 0x000080, "Member 'FUserInfo::NicknameFX' has a wrong offset!");
static_assert(offsetof(FUserInfo, LastUsedCharaType) == 0x000090, "Member 'FUserInfo::LastUsedCharaType' has a wrong offset!");
static_assert(offsetof(FUserInfo, Tutorial) == 0x000094, "Member 'FUserInfo::Tutorial' has a wrong offset!");
static_assert(offsetof(FUserInfo, KillCount) == 0x000098, "Member 'FUserInfo::KillCount' has a wrong offset!");
static_assert(offsetof(FUserInfo, DeathCount) == 0x00009C, "Member 'FUserInfo::DeathCount' has a wrong offset!");
static_assert(offsetof(FUserInfo, AssistCount) == 0x0000A0, "Member 'FUserInfo::AssistCount' has a wrong offset!");

// ScriptStruct Stigma.UserSlotStatus
// 0x0001 (0x0001 - 0x0000)
struct FUserSlotStatus final
{
public:
	EUserSlotStatus                               _value;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FUserSlotStatus) == 0x000001, "Wrong alignment on FUserSlotStatus");
static_assert(sizeof(FUserSlotStatus) == 0x000001, "Wrong size on FUserSlotStatus");
static_assert(offsetof(FUserSlotStatus, _value) == 0x000000, "Member 'FUserSlotStatus::_value' has a wrong offset!");

// ScriptStruct Stigma.UserSlots
// 0x0030 (0x0030 - 0x0000)
struct FUserSlots final
{
public:
	struct FUserSlotStatus                        Booster3Status;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              Booster3ExpireAt;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserSlotStatus                        Booster4Status;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              Booster4ExpireAt;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  GunPresetSlot;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserSlots) == 0x000008, "Wrong alignment on FUserSlots");
static_assert(sizeof(FUserSlots) == 0x000030, "Wrong size on FUserSlots");
static_assert(offsetof(FUserSlots, Booster3Status) == 0x000000, "Member 'FUserSlots::Booster3Status' has a wrong offset!");
static_assert(offsetof(FUserSlots, Booster3ExpireAt) == 0x000008, "Member 'FUserSlots::Booster3ExpireAt' has a wrong offset!");
static_assert(offsetof(FUserSlots, Booster4Status) == 0x000010, "Member 'FUserSlots::Booster4Status' has a wrong offset!");
static_assert(offsetof(FUserSlots, Booster4ExpireAt) == 0x000018, "Member 'FUserSlots::Booster4ExpireAt' has a wrong offset!");
static_assert(offsetof(FUserSlots, GunPresetSlot) == 0x000020, "Member 'FUserSlots::GunPresetSlot' has a wrong offset!");

// ScriptStruct Stigma.NetInvenItem
// 0x0028 (0x0028 - 0x0000)
struct FNetInvenItem final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnType                                      OwnType;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC2[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	int64                                         OwnValue;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAt;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetInvenItem) == 0x000008, "Wrong alignment on FNetInvenItem");
static_assert(sizeof(FNetInvenItem) == 0x000028, "Wrong size on FNetInvenItem");
static_assert(offsetof(FNetInvenItem, ItemIDN) == 0x000000, "Member 'FNetInvenItem::ItemIDN' has a wrong offset!");
static_assert(offsetof(FNetInvenItem, OwnType) == 0x000010, "Member 'FNetInvenItem::OwnType' has a wrong offset!");
static_assert(offsetof(FNetInvenItem, OwnValue) == 0x000018, "Member 'FNetInvenItem::OwnValue' has a wrong offset!");
static_assert(offsetof(FNetInvenItem, UpdatedAt) == 0x000020, "Member 'FNetInvenItem::UpdatedAt' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Armor
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Armor final : public FItemID
{
};
static_assert(alignof(FItemID_Armor) == 0x000008, "Wrong alignment on FItemID_Armor");
static_assert(sizeof(FItemID_Armor) == 0x000010, "Wrong size on FItemID_Armor");

// ScriptStruct Stigma.ItemID_Skin_Body
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Skin_Body final : public FItemID
{
};
static_assert(alignof(FItemID_Skin_Body) == 0x000008, "Wrong alignment on FItemID_Skin_Body");
static_assert(sizeof(FItemID_Skin_Body) == 0x000010, "Wrong size on FItemID_Skin_Body");

// ScriptStruct Stigma.ItemID_Skin_Head
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Skin_Head final : public FItemID
{
};
static_assert(alignof(FItemID_Skin_Head) == 0x000008, "Wrong alignment on FItemID_Skin_Head");
static_assert(sizeof(FItemID_Skin_Head) == 0x000010, "Wrong size on FItemID_Skin_Head");

// ScriptStruct Stigma.NetCharacter
// 0x0050 (0x0050 - 0x0000)
struct FNetCharacter final
{
public:
	ECharaType                                    CharType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Skin_Body                      BodyIDN;                                           // 0x0008(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Armor                          ArmorIDN;                                          // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Skin_Head                      HeadIDN;                                           // 0x0028(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunPreset                             GunPreset;                                         // 0x0038(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetCharacter) == 0x000008, "Wrong alignment on FNetCharacter");
static_assert(sizeof(FNetCharacter) == 0x000050, "Wrong size on FNetCharacter");
static_assert(offsetof(FNetCharacter, CharType) == 0x000000, "Member 'FNetCharacter::CharType' has a wrong offset!");
static_assert(offsetof(FNetCharacter, BodyIDN) == 0x000008, "Member 'FNetCharacter::BodyIDN' has a wrong offset!");
static_assert(offsetof(FNetCharacter, ArmorIDN) == 0x000018, "Member 'FNetCharacter::ArmorIDN' has a wrong offset!");
static_assert(offsetof(FNetCharacter, HeadIDN) == 0x000028, "Member 'FNetCharacter::HeadIDN' has a wrong offset!");
static_assert(offsetof(FNetCharacter, GunPreset) == 0x000038, "Member 'FNetCharacter::GunPreset' has a wrong offset!");
static_assert(offsetof(FNetCharacter, ExpireAt) == 0x000048, "Member 'FNetCharacter::ExpireAt' has a wrong offset!");

// ScriptStruct Stigma.FakeLoad
// 0x0108 (0x0108 - 0x0000)
struct FFakeLoad final
{
public:
	struct FUserInfo                              User;                                              // 0x0000(0x00A8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUserSlots                             Slot;                                              // 0x00A8(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetInvenItem>                  Inven;                                             // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetCharacter>                  CharInfo;                                          // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeLoad) == 0x000008, "Wrong alignment on FFakeLoad");
static_assert(sizeof(FFakeLoad) == 0x000108, "Wrong size on FFakeLoad");
static_assert(offsetof(FFakeLoad, User) == 0x000000, "Member 'FFakeLoad::User' has a wrong offset!");
static_assert(offsetof(FFakeLoad, Slot) == 0x0000A8, "Member 'FFakeLoad::Slot' has a wrong offset!");
static_assert(offsetof(FFakeLoad, GunSpec) == 0x0000D8, "Member 'FFakeLoad::GunSpec' has a wrong offset!");
static_assert(offsetof(FFakeLoad, Inven) == 0x0000E8, "Member 'FFakeLoad::Inven' has a wrong offset!");
static_assert(offsetof(FFakeLoad, CharInfo) == 0x0000F8, "Member 'FFakeLoad::CharInfo' has a wrong offset!");

// ScriptStruct Stigma.ModeScoreRule
// 0x0004 (0x0004 - 0x0000)
struct FModeScoreRule final
{
public:
	float                                         Damage_Min;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeScoreRule) == 0x000004, "Wrong alignment on FModeScoreRule");
static_assert(sizeof(FModeScoreRule) == 0x000004, "Wrong size on FModeScoreRule");
static_assert(offsetof(FModeScoreRule, Damage_Min) == 0x000000, "Member 'FModeScoreRule::Damage_Min' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Currency
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Currency final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Currency) == 0x000008, "Wrong alignment on FItemIDRef_Currency");
static_assert(sizeof(FItemIDRef_Currency) == 0x000010, "Wrong size on FItemIDRef_Currency");

// ScriptStruct Stigma.RewardCurrency
// 0x0018 (0x0018 - 0x0000)
struct FRewardCurrency final
{
public:
	struct FItemIDRef_Currency                    CurrencyID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRewardCurrency) == 0x000008, "Wrong alignment on FRewardCurrency");
static_assert(sizeof(FRewardCurrency) == 0x000018, "Wrong size on FRewardCurrency");
static_assert(offsetof(FRewardCurrency, CurrencyID) == 0x000000, "Member 'FRewardCurrency::CurrencyID' has a wrong offset!");
static_assert(offsetof(FRewardCurrency, Amount) == 0x000010, "Member 'FRewardCurrency::Amount' has a wrong offset!");

// ScriptStruct Stigma.REQ_SearchUser
// 0x0018 (0x0018 - 0x0000)
struct FREQ_SearchUser final
{
public:
	class FString                                 SearchNick;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_SearchUser) == 0x000008, "Wrong alignment on FREQ_SearchUser");
static_assert(sizeof(FREQ_SearchUser) == 0x000018, "Wrong size on FREQ_SearchUser");
static_assert(offsetof(FREQ_SearchUser, SearchNick) == 0x000000, "Member 'FREQ_SearchUser::SearchNick' has a wrong offset!");
static_assert(offsetof(FREQ_SearchUser, Offset) == 0x000010, "Member 'FREQ_SearchUser::Offset' has a wrong offset!");
static_assert(offsetof(FREQ_SearchUser, Limit) == 0x000014, "Member 'FREQ_SearchUser::Limit' has a wrong offset!");

// ScriptStruct Stigma.Shot
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FShot final
{
public:
	uint8                                         Pad_1CC5[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FShot) == 0x000008, "Wrong alignment on FShot");
static_assert(sizeof(FShot) == 0x000028, "Wrong size on FShot");

// ScriptStruct Stigma.Proficiency
// 0x0008 (0x0008 - 0x0000)
struct FProficiency final
{
public:
	float                                         Low;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         High;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProficiency) == 0x000004, "Wrong alignment on FProficiency");
static_assert(sizeof(FProficiency) == 0x000008, "Wrong size on FProficiency");
static_assert(offsetof(FProficiency, Low) == 0x000000, "Member 'FProficiency::Low' has a wrong offset!");
static_assert(offsetof(FProficiency, High) == 0x000004, "Member 'FProficiency::High' has a wrong offset!");

// ScriptStruct Stigma.ACK_FindMatch
// 0x0001 (0x0001 - 0x0000)
struct FACK_FindMatch final
{
public:
	uint8                                         Pad_1CC6[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_FindMatch) == 0x000001, "Wrong alignment on FACK_FindMatch");
static_assert(sizeof(FACK_FindMatch) == 0x000001, "Wrong size on FACK_FindMatch");

// ScriptStruct Stigma.AbilityEntry
// 0x000C (0x000C - 0x0000)
struct FAbilityEntry final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityEntry) == 0x000004, "Wrong alignment on FAbilityEntry");
static_assert(sizeof(FAbilityEntry) == 0x00000C, "Wrong size on FAbilityEntry");
static_assert(offsetof(FAbilityEntry, Name) == 0x000000, "Member 'FAbilityEntry::Name' has a wrong offset!");
static_assert(offsetof(FAbilityEntry, Value) == 0x000008, "Member 'FAbilityEntry::Value' has a wrong offset!");

// ScriptStruct Stigma.Abnormals
// 0x0001 (0x0001 - 0x0000)
struct FAbnormals final
{
public:
	uint8                                         _Flags;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAbnormals) == 0x000001, "Wrong alignment on FAbnormals");
static_assert(sizeof(FAbnormals) == 0x000001, "Wrong size on FAbnormals");
static_assert(offsetof(FAbnormals, _Flags) == 0x000000, "Member 'FAbnormals::_Flags' has a wrong offset!");

// ScriptStruct Stigma.Config_Abnormal
// 0x0028 (0x0028 - 0x0000)
struct FConfig_Abnormal final
{
public:
	float                                         LegInjury_Duration;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegInjury_SpeedRate;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay_Duration;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stun_Duration;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Delay_RateCurve;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sneeze_Deviation;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sneeze_SpeedRate;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbnormals                             ImmuneAbnormals;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC7[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_Abnormal) == 0x000008, "Wrong alignment on FConfig_Abnormal");
static_assert(sizeof(FConfig_Abnormal) == 0x000028, "Wrong size on FConfig_Abnormal");
static_assert(offsetof(FConfig_Abnormal, LegInjury_Duration) == 0x000000, "Member 'FConfig_Abnormal::LegInjury_Duration' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, LegInjury_SpeedRate) == 0x000004, "Member 'FConfig_Abnormal::LegInjury_SpeedRate' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, Delay_Duration) == 0x000008, "Member 'FConfig_Abnormal::Delay_Duration' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, Stun_Duration) == 0x00000C, "Member 'FConfig_Abnormal::Stun_Duration' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, Delay_RateCurve) == 0x000010, "Member 'FConfig_Abnormal::Delay_RateCurve' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, Sneeze_Deviation) == 0x000018, "Member 'FConfig_Abnormal::Sneeze_Deviation' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, Sneeze_SpeedRate) == 0x00001C, "Member 'FConfig_Abnormal::Sneeze_SpeedRate' has a wrong offset!");
static_assert(offsetof(FConfig_Abnormal, ImmuneAbnormals) == 0x000020, "Member 'FConfig_Abnormal::ImmuneAbnormals' has a wrong offset!");

// ScriptStruct Stigma.ItemEntry
// 0x0128 (0x0130 - 0x0008)
struct FItemEntry : public FTableRowBase
{
public:
	EItemStage                                    Stage;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ItemID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescShort;                                         // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsDefaultItem;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    Grade;                                             // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC9[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigIcon;                                           // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SimpleIcon;                                        // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardCurrency                        Refund;                                            // 0x00F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemID                                GoodsItemID;                                       // 0x0110(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LaunchingDate;                                     // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemEntry) == 0x000008, "Wrong alignment on FItemEntry");
static_assert(sizeof(FItemEntry) == 0x000130, "Wrong size on FItemEntry");
static_assert(offsetof(FItemEntry, Stage) == 0x000008, "Member 'FItemEntry::Stage' has a wrong offset!");
static_assert(offsetof(FItemEntry, ItemID) == 0x000010, "Member 'FItemEntry::ItemID' has a wrong offset!");
static_assert(offsetof(FItemEntry, DisplayName) == 0x000020, "Member 'FItemEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FItemEntry, Desc) == 0x000038, "Member 'FItemEntry::Desc' has a wrong offset!");
static_assert(offsetof(FItemEntry, DescShort) == 0x000050, "Member 'FItemEntry::DescShort' has a wrong offset!");
static_assert(offsetof(FItemEntry, IsDefaultItem) == 0x000068, "Member 'FItemEntry::IsDefaultItem' has a wrong offset!");
static_assert(offsetof(FItemEntry, Grade) == 0x000069, "Member 'FItemEntry::Grade' has a wrong offset!");
static_assert(offsetof(FItemEntry, Icon) == 0x000070, "Member 'FItemEntry::Icon' has a wrong offset!");
static_assert(offsetof(FItemEntry, BigIcon) == 0x000098, "Member 'FItemEntry::BigIcon' has a wrong offset!");
static_assert(offsetof(FItemEntry, SimpleIcon) == 0x0000C0, "Member 'FItemEntry::SimpleIcon' has a wrong offset!");
static_assert(offsetof(FItemEntry, Color) == 0x0000E8, "Member 'FItemEntry::Color' has a wrong offset!");
static_assert(offsetof(FItemEntry, Refund) == 0x0000F8, "Member 'FItemEntry::Refund' has a wrong offset!");
static_assert(offsetof(FItemEntry, GoodsItemID) == 0x000110, "Member 'FItemEntry::GoodsItemID' has a wrong offset!");
static_assert(offsetof(FItemEntry, LaunchingDate) == 0x000120, "Member 'FItemEntry::LaunchingDate' has a wrong offset!");

// ScriptStruct Stigma.Config_ProfileCard
// 0x0008 (0x0138 - 0x0130)
struct FConfig_ProfileCard final : public FItemEntry
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_ProfileCard) == 0x000008, "Wrong alignment on FConfig_ProfileCard");
static_assert(sizeof(FConfig_ProfileCard) == 0x000138, "Wrong size on FConfig_ProfileCard");
static_assert(offsetof(FConfig_ProfileCard, WidgetClass) == 0x000130, "Member 'FConfig_ProfileCard::WidgetClass' has a wrong offset!");

// ScriptStruct Stigma.HitData
// 0x00A8 (0x00A8 - 0x0000)
struct FHitData final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Assistor;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 AttackerOperatorID;                                // 0x0010(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCA[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 Victim;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjectBase*                            Weapon;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeleeAttackPoint                             MeleeAttackPoint;                                  // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCB[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Pos;                                               // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        bone;                                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          SurfaceMaterial;                                   // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCC[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FBattleTime                            HitTime;                                           // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApplyDamageRate;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCD[0x20];                                    // 0x0088(0x0020)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FHitData) == 0x000008, "Wrong alignment on FHitData");
static_assert(sizeof(FHitData) == 0x0000A8, "Wrong size on FHitData");
static_assert(offsetof(FHitData, Attacker) == 0x000000, "Member 'FHitData::Attacker' has a wrong offset!");
static_assert(offsetof(FHitData, Assistor) == 0x000008, "Member 'FHitData::Assistor' has a wrong offset!");
static_assert(offsetof(FHitData, AttackerOperatorID) == 0x000010, "Member 'FHitData::AttackerOperatorID' has a wrong offset!");
static_assert(offsetof(FHitData, Victim) == 0x000018, "Member 'FHitData::Victim' has a wrong offset!");
static_assert(offsetof(FHitData, Weapon) == 0x000020, "Member 'FHitData::Weapon' has a wrong offset!");
static_assert(offsetof(FHitData, AttackType) == 0x000028, "Member 'FHitData::AttackType' has a wrong offset!");
static_assert(offsetof(FHitData, MeleeAttackPoint) == 0x000029, "Member 'FHitData::MeleeAttackPoint' has a wrong offset!");
static_assert(offsetof(FHitData, Pos) == 0x000030, "Member 'FHitData::Pos' has a wrong offset!");
static_assert(offsetof(FHitData, ImpactNormal) == 0x000048, "Member 'FHitData::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FHitData, SurfaceNormal) == 0x000060, "Member 'FHitData::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(FHitData, bone) == 0x000078, "Member 'FHitData::bone' has a wrong offset!");
static_assert(offsetof(FHitData, SurfaceMaterial) == 0x000079, "Member 'FHitData::SurfaceMaterial' has a wrong offset!");
static_assert(offsetof(FHitData, HitTime) == 0x00007C, "Member 'FHitData::HitTime' has a wrong offset!");
static_assert(offsetof(FHitData, Distance) == 0x000080, "Member 'FHitData::Distance' has a wrong offset!");
static_assert(offsetof(FHitData, ApplyDamageRate) == 0x000084, "Member 'FHitData::ApplyDamageRate' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Booster
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Booster final : public FItemID
{
};
static_assert(alignof(FItemID_Booster) == 0x000008, "Wrong alignment on FItemID_Booster");
static_assert(sizeof(FItemID_Booster) == 0x000010, "Wrong size on FItemID_Booster");

// ScriptStruct Stigma.PlayerPrivilege
// 0x0001 (0x0001 - 0x0000)
struct FPlayerPrivilege final
{
public:
	uint8                                         IsRoomLeader : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsRoomManager : 1;                                 // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FPlayerPrivilege) == 0x000001, "Wrong alignment on FPlayerPrivilege");
static_assert(sizeof(FPlayerPrivilege) == 0x000001, "Wrong size on FPlayerPrivilege");

// ScriptStruct Stigma.PlayerSlots
// 0x0001 (0x0001 - 0x0000)
struct FPlayerSlots final
{
public:
	uint8                                         _Masks;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPlayerSlots) == 0x000001, "Wrong alignment on FPlayerSlots");
static_assert(sizeof(FPlayerSlots) == 0x000001, "Wrong size on FPlayerSlots");
static_assert(offsetof(FPlayerSlots, _Masks) == 0x000000, "Member 'FPlayerSlots::_Masks' has a wrong offset!");

// ScriptStruct Stigma.ItemID_ProfileCard
// 0x0000 (0x0010 - 0x0010)
struct FItemID_ProfileCard final : public FItemID
{
};
static_assert(alignof(FItemID_ProfileCard) == 0x000008, "Wrong alignment on FItemID_ProfileCard");
static_assert(sizeof(FItemID_ProfileCard) == 0x000010, "Wrong size on FItemID_ProfileCard");

// ScriptStruct Stigma.ItemID_Emblem
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Emblem final : public FItemID
{
};
static_assert(alignof(FItemID_Emblem) == 0x000008, "Wrong alignment on FItemID_Emblem");
static_assert(sizeof(FItemID_Emblem) == 0x000010, "Wrong size on FItemID_Emblem");

// ScriptStruct Stigma.ItemID_NicknameFX
// 0x0000 (0x0010 - 0x0010)
struct FItemID_NicknameFX final : public FItemID
{
};
static_assert(alignof(FItemID_NicknameFX) == 0x000008, "Wrong alignment on FItemID_NicknameFX");
static_assert(sizeof(FItemID_NicknameFX) == 0x000010, "Wrong size on FItemID_NicknameFX");

// ScriptStruct Stigma.UserInBattle
// 0x00A0 (0x00A0 - 0x0000)
struct FUserInBattle final
{
public:
	struct FUserName                              Nickname;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerPrivilege                       Privilege;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCE[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BoosterTicket;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Booster>                Boosters;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPlayerSlots                           Slots;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CCF[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_ProfileCard                    ProfileCard;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Emblem                         Emblem;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_NicknameFX                     NicknameFX;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD0[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AdditionalBulletRatio;                             // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD1[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         AdditionalHP;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalHPRatio;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalBoosterDurationSec;                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalBoosterCooltimeSec;                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalGoldStart;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalGoldPerRound;                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalArmorPerRound_Percent;                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Additional_Magazine;                               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillStock_Inc;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillStock_Inc_Ratio;                              // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillCooltime_Dec_Ratio;                           // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserInBattle) == 0x000008, "Wrong alignment on FUserInBattle");
static_assert(sizeof(FUserInBattle) == 0x0000A0, "Wrong size on FUserInBattle");
static_assert(offsetof(FUserInBattle, Nickname) == 0x000000, "Member 'FUserInBattle::Nickname' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Privilege) == 0x000018, "Member 'FUserInBattle::Privilege' has a wrong offset!");
static_assert(offsetof(FUserInBattle, BoosterTicket) == 0x00001C, "Member 'FUserInBattle::BoosterTicket' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Boosters) == 0x000020, "Member 'FUserInBattle::Boosters' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Slots) == 0x000030, "Member 'FUserInBattle::Slots' has a wrong offset!");
static_assert(offsetof(FUserInBattle, ProfileCard) == 0x000038, "Member 'FUserInBattle::ProfileCard' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Emblem) == 0x000048, "Member 'FUserInBattle::Emblem' has a wrong offset!");
static_assert(offsetof(FUserInBattle, NicknameFX) == 0x000058, "Member 'FUserInBattle::NicknameFX' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Tier) == 0x000068, "Member 'FUserInBattle::Tier' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Level) == 0x00006C, "Member 'FUserInBattle::Level' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalBulletRatio) == 0x000070, "Member 'FUserInBattle::AdditionalBulletRatio' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalHP) == 0x000074, "Member 'FUserInBattle::AdditionalHP' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalHPRatio) == 0x000078, "Member 'FUserInBattle::AdditionalHPRatio' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalBoosterDurationSec) == 0x00007C, "Member 'FUserInBattle::AdditionalBoosterDurationSec' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalBoosterCooltimeSec) == 0x000080, "Member 'FUserInBattle::AdditionalBoosterCooltimeSec' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalGoldStart) == 0x000084, "Member 'FUserInBattle::AdditionalGoldStart' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalGoldPerRound) == 0x000088, "Member 'FUserInBattle::AdditionalGoldPerRound' has a wrong offset!");
static_assert(offsetof(FUserInBattle, AdditionalArmorPerRound_Percent) == 0x00008C, "Member 'FUserInBattle::AdditionalArmorPerRound_Percent' has a wrong offset!");
static_assert(offsetof(FUserInBattle, Additional_Magazine) == 0x000090, "Member 'FUserInBattle::Additional_Magazine' has a wrong offset!");
static_assert(offsetof(FUserInBattle, SkillStock_Inc) == 0x000094, "Member 'FUserInBattle::SkillStock_Inc' has a wrong offset!");
static_assert(offsetof(FUserInBattle, SkillStock_Inc_Ratio) == 0x000098, "Member 'FUserInBattle::SkillStock_Inc_Ratio' has a wrong offset!");
static_assert(offsetof(FUserInBattle, SkillCooltime_Dec_Ratio) == 0x00009C, "Member 'FUserInBattle::SkillCooltime_Dec_Ratio' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticKDA
// 0x0010 (0x0010 - 0x0000)
struct FNetStatisticKDA final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Kill;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Death;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticKDA) == 0x000004, "Wrong alignment on FNetStatisticKDA");
static_assert(sizeof(FNetStatisticKDA) == 0x000010, "Wrong size on FNetStatisticKDA");
static_assert(offsetof(FNetStatisticKDA, GameMode) == 0x000000, "Member 'FNetStatisticKDA::GameMode' has a wrong offset!");
static_assert(offsetof(FNetStatisticKDA, Kill) == 0x000004, "Member 'FNetStatisticKDA::Kill' has a wrong offset!");
static_assert(offsetof(FNetStatisticKDA, Death) == 0x000008, "Member 'FNetStatisticKDA::Death' has a wrong offset!");
static_assert(offsetof(FNetStatisticKDA, Assist) == 0x00000C, "Member 'FNetStatisticKDA::Assist' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticCharKDA
// 0x0018 (0x0018 - 0x0000)
struct FNetStatisticCharKDA final
{
public:
	ECharaType                                    CharType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetStatisticKDA>               KDA;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticCharKDA) == 0x000008, "Wrong alignment on FNetStatisticCharKDA");
static_assert(sizeof(FNetStatisticCharKDA) == 0x000018, "Wrong size on FNetStatisticCharKDA");
static_assert(offsetof(FNetStatisticCharKDA, CharType) == 0x000000, "Member 'FNetStatisticCharKDA::CharType' has a wrong offset!");
static_assert(offsetof(FNetStatisticCharKDA, KDA) == 0x000008, "Member 'FNetStatisticCharKDA::KDA' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticKDAPlain
// 0x0020 (0x0020 - 0x0000)
struct FNetStatisticKDAPlain final
{
public:
	TArray<struct FNetStatisticKDA>               TotalKDA;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticCharKDA>           CharKDA;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticKDAPlain) == 0x000008, "Wrong alignment on FNetStatisticKDAPlain");
static_assert(sizeof(FNetStatisticKDAPlain) == 0x000020, "Wrong size on FNetStatisticKDAPlain");
static_assert(offsetof(FNetStatisticKDAPlain, TotalKDA) == 0x000000, "Member 'FNetStatisticKDAPlain::TotalKDA' has a wrong offset!");
static_assert(offsetof(FNetStatisticKDAPlain, CharKDA) == 0x000010, "Member 'FNetStatisticKDAPlain::CharKDA' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticKillStreak
// 0x0008 (0x0008 - 0x0000)
struct FNetStatisticKillStreak final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Count;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticKillStreak) == 0x000004, "Wrong alignment on FNetStatisticKillStreak");
static_assert(sizeof(FNetStatisticKillStreak) == 0x000008, "Wrong size on FNetStatisticKillStreak");
static_assert(offsetof(FNetStatisticKillStreak, GameMode) == 0x000000, "Member 'FNetStatisticKillStreak::GameMode' has a wrong offset!");
static_assert(offsetof(FNetStatisticKillStreak, Count) == 0x000004, "Member 'FNetStatisticKillStreak::Count' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticKillStreakPlain
// 0x0018 (0x0018 - 0x0000)
struct FNetStatisticKillStreakPlain final
{
public:
	EKillStreak                                   Streak;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetStatisticKillStreak>        Count;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticKillStreakPlain) == 0x000008, "Wrong alignment on FNetStatisticKillStreakPlain");
static_assert(sizeof(FNetStatisticKillStreakPlain) == 0x000018, "Wrong size on FNetStatisticKillStreakPlain");
static_assert(offsetof(FNetStatisticKillStreakPlain, Streak) == 0x000000, "Member 'FNetStatisticKillStreakPlain::Streak' has a wrong offset!");
static_assert(offsetof(FNetStatisticKillStreakPlain, Count) == 0x000008, "Member 'FNetStatisticKillStreakPlain::Count' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticWin
// 0x0010 (0x0010 - 0x0000)
struct FNetStatisticWin final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Win;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Draw;                                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lose;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticWin) == 0x000004, "Wrong alignment on FNetStatisticWin");
static_assert(sizeof(FNetStatisticWin) == 0x000010, "Wrong size on FNetStatisticWin");
static_assert(offsetof(FNetStatisticWin, GameMode) == 0x000000, "Member 'FNetStatisticWin::GameMode' has a wrong offset!");
static_assert(offsetof(FNetStatisticWin, Win) == 0x000004, "Member 'FNetStatisticWin::Win' has a wrong offset!");
static_assert(offsetof(FNetStatisticWin, Draw) == 0x000008, "Member 'FNetStatisticWin::Draw' has a wrong offset!");
static_assert(offsetof(FNetStatisticWin, Lose) == 0x00000C, "Member 'FNetStatisticWin::Lose' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticWinPlain
// 0x0010 (0x0010 - 0x0000)
struct FNetStatisticWinPlain final
{
public:
	TArray<struct FNetStatisticWin>               StatisticWin;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticWinPlain) == 0x000008, "Wrong alignment on FNetStatisticWinPlain");
static_assert(sizeof(FNetStatisticWinPlain) == 0x000010, "Wrong size on FNetStatisticWinPlain");
static_assert(offsetof(FNetStatisticWinPlain, StatisticWin) == 0x000000, "Member 'FNetStatisticWinPlain::StatisticWin' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticMVP
// 0x000C (0x000C - 0x0000)
struct FNetStatisticMVP final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         MVP;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCnt;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticMVP) == 0x000004, "Wrong alignment on FNetStatisticMVP");
static_assert(sizeof(FNetStatisticMVP) == 0x00000C, "Wrong size on FNetStatisticMVP");
static_assert(offsetof(FNetStatisticMVP, GameMode) == 0x000000, "Member 'FNetStatisticMVP::GameMode' has a wrong offset!");
static_assert(offsetof(FNetStatisticMVP, MVP) == 0x000004, "Member 'FNetStatisticMVP::MVP' has a wrong offset!");
static_assert(offsetof(FNetStatisticMVP, PlayCnt) == 0x000008, "Member 'FNetStatisticMVP::PlayCnt' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticMVPPlain
// 0x0010 (0x0010 - 0x0000)
struct FNetStatisticMVPPlain final
{
public:
	TArray<struct FNetStatisticMVP>               StatisticMVP;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticMVPPlain) == 0x000008, "Wrong alignment on FNetStatisticMVPPlain");
static_assert(sizeof(FNetStatisticMVPPlain) == 0x000010, "Wrong size on FNetStatisticMVPPlain");
static_assert(offsetof(FNetStatisticMVPPlain, StatisticMVP) == 0x000000, "Member 'FNetStatisticMVPPlain::StatisticMVP' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticGun
// 0x0010 (0x0010 - 0x0000)
struct FNetStatisticGun final
{
public:
	EGunType                                      GunType;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Fire;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hit;                                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectilePerBullet;                               // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticGun) == 0x000004, "Wrong alignment on FNetStatisticGun");
static_assert(sizeof(FNetStatisticGun) == 0x000010, "Wrong size on FNetStatisticGun");
static_assert(offsetof(FNetStatisticGun, GunType) == 0x000000, "Member 'FNetStatisticGun::GunType' has a wrong offset!");
static_assert(offsetof(FNetStatisticGun, Fire) == 0x000004, "Member 'FNetStatisticGun::Fire' has a wrong offset!");
static_assert(offsetof(FNetStatisticGun, Hit) == 0x000008, "Member 'FNetStatisticGun::Hit' has a wrong offset!");
static_assert(offsetof(FNetStatisticGun, ProjectilePerBullet) == 0x00000C, "Member 'FNetStatisticGun::ProjectilePerBullet' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticHitRate
// 0x0018 (0x0018 - 0x0000)
struct FNetStatisticHitRate final
{
public:
	int32                                         TotalProjectilePerBullet;                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalHit;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticGun>               StatisticGun;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticHitRate) == 0x000008, "Wrong alignment on FNetStatisticHitRate");
static_assert(sizeof(FNetStatisticHitRate) == 0x000018, "Wrong size on FNetStatisticHitRate");
static_assert(offsetof(FNetStatisticHitRate, TotalProjectilePerBullet) == 0x000000, "Member 'FNetStatisticHitRate::TotalProjectilePerBullet' has a wrong offset!");
static_assert(offsetof(FNetStatisticHitRate, TotalHit) == 0x000004, "Member 'FNetStatisticHitRate::TotalHit' has a wrong offset!");
static_assert(offsetof(FNetStatisticHitRate, StatisticGun) == 0x000008, "Member 'FNetStatisticHitRate::StatisticGun' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticPlayTime
// 0x0008 (0x0008 - 0x0000)
struct FNetStatisticPlayTime final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         PlayTime;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticPlayTime) == 0x000004, "Wrong alignment on FNetStatisticPlayTime");
static_assert(sizeof(FNetStatisticPlayTime) == 0x000008, "Wrong size on FNetStatisticPlayTime");
static_assert(offsetof(FNetStatisticPlayTime, GameMode) == 0x000000, "Member 'FNetStatisticPlayTime::GameMode' has a wrong offset!");
static_assert(offsetof(FNetStatisticPlayTime, PlayTime) == 0x000004, "Member 'FNetStatisticPlayTime::PlayTime' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticCharPlayTime
// 0x0018 (0x0018 - 0x0000)
struct FNetStatisticCharPlayTime final
{
public:
	ECharaType                                    CharType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetStatisticPlayTime>          PlayTime;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticCharPlayTime) == 0x000008, "Wrong alignment on FNetStatisticCharPlayTime");
static_assert(sizeof(FNetStatisticCharPlayTime) == 0x000018, "Wrong size on FNetStatisticCharPlayTime");
static_assert(offsetof(FNetStatisticCharPlayTime, CharType) == 0x000000, "Member 'FNetStatisticCharPlayTime::CharType' has a wrong offset!");
static_assert(offsetof(FNetStatisticCharPlayTime, PlayTime) == 0x000008, "Member 'FNetStatisticCharPlayTime::PlayTime' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticPlayTimePlain
// 0x0020 (0x0020 - 0x0000)
struct FNetStatisticPlayTimePlain final
{
public:
	TArray<struct FNetStatisticPlayTime>          TotalPlayTime;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticCharPlayTime>      CharPlayTime;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticPlayTimePlain) == 0x000008, "Wrong alignment on FNetStatisticPlayTimePlain");
static_assert(sizeof(FNetStatisticPlayTimePlain) == 0x000020, "Wrong size on FNetStatisticPlayTimePlain");
static_assert(offsetof(FNetStatisticPlayTimePlain, TotalPlayTime) == 0x000000, "Member 'FNetStatisticPlayTimePlain::TotalPlayTime' has a wrong offset!");
static_assert(offsetof(FNetStatisticPlayTimePlain, CharPlayTime) == 0x000010, "Member 'FNetStatisticPlayTimePlain::CharPlayTime' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticDamage
// 0x0020 (0x0020 - 0x0000)
struct FNetStatisticDamage final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillNum;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorDamage;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticDamage) == 0x000008, "Wrong alignment on FNetStatisticDamage");
static_assert(sizeof(FNetStatisticDamage) == 0x000020, "Wrong size on FNetStatisticDamage");
static_assert(offsetof(FNetStatisticDamage, Category) == 0x000000, "Member 'FNetStatisticDamage::Category' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamage, Type) == 0x000010, "Member 'FNetStatisticDamage::Type' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamage, SkillNum) == 0x000014, "Member 'FNetStatisticDamage::SkillNum' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamage, Damage) == 0x000018, "Member 'FNetStatisticDamage::Damage' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamage, ArmorDamage) == 0x00001C, "Member 'FNetStatisticDamage::ArmorDamage' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticDamagePlain
// 0x0020 (0x0020 - 0x0000)
struct FNetStatisticDamagePlain final
{
public:
	int32                                         TotalDamage;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalArmorDamage;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalArmorBreak;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetStatisticDamage>            StatisticDamage;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticDamagePlain) == 0x000008, "Wrong alignment on FNetStatisticDamagePlain");
static_assert(sizeof(FNetStatisticDamagePlain) == 0x000020, "Wrong size on FNetStatisticDamagePlain");
static_assert(offsetof(FNetStatisticDamagePlain, TotalDamage) == 0x000000, "Member 'FNetStatisticDamagePlain::TotalDamage' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamagePlain, TotalArmorDamage) == 0x000004, "Member 'FNetStatisticDamagePlain::TotalArmorDamage' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamagePlain, TotalArmorBreak) == 0x000008, "Member 'FNetStatisticDamagePlain::TotalArmorBreak' has a wrong offset!");
static_assert(offsetof(FNetStatisticDamagePlain, StatisticDamage) == 0x000010, "Member 'FNetStatisticDamagePlain::StatisticDamage' has a wrong offset!");

// ScriptStruct Stigma.NetStatistic
// 0x00A8 (0x00A8 - 0x0000)
struct FNetStatistic final
{
public:
	struct FNetStatisticKDAPlain                  KDA;                                               // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticWinPlain                  Win;                                               // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticMVPPlain                  MVP;                                               // 0x0030(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticHitRate                   HitRate;                                           // 0x0040(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticDamagePlain               Damage;                                            // 0x0058(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticPlayTimePlain             PlayTime;                                          // 0x0078(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticKillStreakPlain>   KillStreak;                                        // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatistic) == 0x000008, "Wrong alignment on FNetStatistic");
static_assert(sizeof(FNetStatistic) == 0x0000A8, "Wrong size on FNetStatistic");
static_assert(offsetof(FNetStatistic, KDA) == 0x000000, "Member 'FNetStatistic::KDA' has a wrong offset!");
static_assert(offsetof(FNetStatistic, Win) == 0x000020, "Member 'FNetStatistic::Win' has a wrong offset!");
static_assert(offsetof(FNetStatistic, MVP) == 0x000030, "Member 'FNetStatistic::MVP' has a wrong offset!");
static_assert(offsetof(FNetStatistic, HitRate) == 0x000040, "Member 'FNetStatistic::HitRate' has a wrong offset!");
static_assert(offsetof(FNetStatistic, Damage) == 0x000058, "Member 'FNetStatistic::Damage' has a wrong offset!");
static_assert(offsetof(FNetStatistic, PlayTime) == 0x000078, "Member 'FNetStatistic::PlayTime' has a wrong offset!");
static_assert(offsetof(FNetStatistic, KillStreak) == 0x000098, "Member 'FNetStatistic::KillStreak' has a wrong offset!");

// ScriptStruct Stigma.ACK_StatisticRead
// 0x00A8 (0x00A8 - 0x0000)
struct FACK_StatisticRead final
{
public:
	struct FNetStatistic                          Statistic;                                         // 0x0000(0x00A8)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_StatisticRead) == 0x000008, "Wrong alignment on FACK_StatisticRead");
static_assert(sizeof(FACK_StatisticRead) == 0x0000A8, "Wrong size on FACK_StatisticRead");
static_assert(offsetof(FACK_StatisticRead, Statistic) == 0x000000, "Member 'FACK_StatisticRead::Statistic' has a wrong offset!");

// ScriptStruct Stigma.Config_UIForChara
// 0x0130 (0x0130 - 0x0000)
struct FConfig_UIForChara final
{
public:
	TSoftObjectPtr<class UFileMediaSource>        Movie_Skill1_A;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie_Skill1_B;                                    // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie_Skill2_A;                                    // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie_Skill2_B;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie_Skill3_A;                                    // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie_Skill3_B;                                    // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie_FastMove;                                    // 0x00F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Story;                                             // 0x0118(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_UIForChara) == 0x000008, "Wrong alignment on FConfig_UIForChara");
static_assert(sizeof(FConfig_UIForChara) == 0x000130, "Wrong size on FConfig_UIForChara");
static_assert(offsetof(FConfig_UIForChara, Movie_Skill1_A) == 0x000000, "Member 'FConfig_UIForChara::Movie_Skill1_A' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Movie_Skill1_B) == 0x000028, "Member 'FConfig_UIForChara::Movie_Skill1_B' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Movie_Skill2_A) == 0x000050, "Member 'FConfig_UIForChara::Movie_Skill2_A' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Movie_Skill2_B) == 0x000078, "Member 'FConfig_UIForChara::Movie_Skill2_B' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Movie_Skill3_A) == 0x0000A0, "Member 'FConfig_UIForChara::Movie_Skill3_A' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Movie_Skill3_B) == 0x0000C8, "Member 'FConfig_UIForChara::Movie_Skill3_B' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Movie_FastMove) == 0x0000F0, "Member 'FConfig_UIForChara::Movie_FastMove' has a wrong offset!");
static_assert(offsetof(FConfig_UIForChara, Story) == 0x000118, "Member 'FConfig_UIForChara::Story' has a wrong offset!");

// ScriptStruct Stigma.ArmorRechargeHistory
// 0x000C (0x000C - 0x0000)
struct FArmorRechargeHistory final
{
public:
	EArmorRechargeType                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Recharge_Percent;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArmorRechargeHistory) == 0x000004, "Wrong alignment on FArmorRechargeHistory");
static_assert(sizeof(FArmorRechargeHistory) == 0x00000C, "Wrong size on FArmorRechargeHistory");
static_assert(offsetof(FArmorRechargeHistory, Type) == 0x000000, "Member 'FArmorRechargeHistory::Type' has a wrong offset!");
static_assert(offsetof(FArmorRechargeHistory, Recharge_Percent) == 0x000004, "Member 'FArmorRechargeHistory::Recharge_Percent' has a wrong offset!");
static_assert(offsetof(FArmorRechargeHistory, Round) == 0x000008, "Member 'FArmorRechargeHistory::Round' has a wrong offset!");

// ScriptStruct Stigma.NetCharaKey
// 0x0001 (0x0001 - 0x0000)
struct FNetCharaKey final
{
public:
	uint8                                         _Key;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FNetCharaKey) == 0x000001, "Wrong alignment on FNetCharaKey");
static_assert(sizeof(FNetCharaKey) == 0x000001, "Wrong size on FNetCharaKey");
static_assert(offsetof(FNetCharaKey, _Key) == 0x000000, "Member 'FNetCharaKey::_Key' has a wrong offset!");

// ScriptStruct Stigma.NetKillLog
// 0x0018 (0x0018 - 0x0000)
struct FNetKillLog final
{
public:
	struct FNetCharaKey                           Killer;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNetCharaKey                           Assist;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNetCharaKey                           Victim;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDD[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	class AObjectBase*                            Weapon;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 OperatorID;                                        // 0x0010(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        HittedBone;                                        // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetKillLog) == 0x000008, "Wrong alignment on FNetKillLog");
static_assert(sizeof(FNetKillLog) == 0x000018, "Wrong size on FNetKillLog");
static_assert(offsetof(FNetKillLog, Killer) == 0x000000, "Member 'FNetKillLog::Killer' has a wrong offset!");
static_assert(offsetof(FNetKillLog, Assist) == 0x000001, "Member 'FNetKillLog::Assist' has a wrong offset!");
static_assert(offsetof(FNetKillLog, Victim) == 0x000002, "Member 'FNetKillLog::Victim' has a wrong offset!");
static_assert(offsetof(FNetKillLog, Weapon) == 0x000008, "Member 'FNetKillLog::Weapon' has a wrong offset!");
static_assert(offsetof(FNetKillLog, OperatorID) == 0x000010, "Member 'FNetKillLog::OperatorID' has a wrong offset!");
static_assert(offsetof(FNetKillLog, AttackType) == 0x000016, "Member 'FNetKillLog::AttackType' has a wrong offset!");
static_assert(offsetof(FNetKillLog, HittedBone) == 0x000017, "Member 'FNetKillLog::HittedBone' has a wrong offset!");

// ScriptStruct Stigma.Config_AISetting
// 0x000C (0x000C - 0x0000)
struct FConfig_AISetting final
{
public:
	float                                         Sight_Distance;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sight_FOV;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingRange;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_AISetting) == 0x000004, "Wrong alignment on FConfig_AISetting");
static_assert(sizeof(FConfig_AISetting) == 0x00000C, "Wrong size on FConfig_AISetting");
static_assert(offsetof(FConfig_AISetting, Sight_Distance) == 0x000000, "Member 'FConfig_AISetting::Sight_Distance' has a wrong offset!");
static_assert(offsetof(FConfig_AISetting, Sight_FOV) == 0x000004, "Member 'FConfig_AISetting::Sight_FOV' has a wrong offset!");
static_assert(offsetof(FConfig_AISetting, HearingRange) == 0x000008, "Member 'FConfig_AISetting::HearingRange' has a wrong offset!");

// ScriptStruct Stigma.RegionScore
// 0x0018 (0x0018 - 0x0000)
struct FRegionScore final
{
public:
	class FString                                 Rgn;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDE[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRegionScore) == 0x000008, "Wrong alignment on FRegionScore");
static_assert(sizeof(FRegionScore) == 0x000018, "Wrong size on FRegionScore");
static_assert(offsetof(FRegionScore, Rgn) == 0x000000, "Member 'FRegionScore::Rgn' has a wrong offset!");
static_assert(offsetof(FRegionScore, Ping) == 0x000010, "Member 'FRegionScore::Ping' has a wrong offset!");

// ScriptStruct Stigma.MatchOption
// 0x0038 (0x0038 - 0x0000)
struct FMatchOption final
{
public:
	TArray<EGameMode>                             WishedModes;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsCustomGame;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CDF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 BattleIDS;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRegionScore>                   RegionScores;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchOption) == 0x000008, "Wrong alignment on FMatchOption");
static_assert(sizeof(FMatchOption) == 0x000038, "Wrong size on FMatchOption");
static_assert(offsetof(FMatchOption, WishedModes) == 0x000000, "Member 'FMatchOption::WishedModes' has a wrong offset!");
static_assert(offsetof(FMatchOption, IsCustomGame) == 0x000010, "Member 'FMatchOption::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FMatchOption, BattleIDS) == 0x000018, "Member 'FMatchOption::BattleIDS' has a wrong offset!");
static_assert(offsetof(FMatchOption, RegionScores) == 0x000028, "Member 'FMatchOption::RegionScores' has a wrong offset!");

// ScriptStruct Stigma.ActionGraphID
// 0x0000 (0x0010 - 0x0010)
struct FActionGraphID final : public FItemID
{
};
static_assert(alignof(FActionGraphID) == 0x000008, "Wrong alignment on FActionGraphID");
static_assert(sizeof(FActionGraphID) == 0x000010, "Wrong size on FActionGraphID");

// ScriptStruct Stigma.SkillInfo_AI
// 0x0028 (0x0028 - 0x0000)
struct FSkillInfo_AI final
{
public:
	struct FActionGraphID                         ActionID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivationDistance;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillEndTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionStep;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaAction                                  ActionSlot;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE0[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FSkillInfo_AI) == 0x000008, "Wrong alignment on FSkillInfo_AI");
static_assert(sizeof(FSkillInfo_AI) == 0x000028, "Wrong size on FSkillInfo_AI");
static_assert(offsetof(FSkillInfo_AI, ActionID) == 0x000000, "Member 'FSkillInfo_AI::ActionID' has a wrong offset!");
static_assert(offsetof(FSkillInfo_AI, ActivationDistance) == 0x000010, "Member 'FSkillInfo_AI::ActivationDistance' has a wrong offset!");
static_assert(offsetof(FSkillInfo_AI, Priority) == 0x000014, "Member 'FSkillInfo_AI::Priority' has a wrong offset!");
static_assert(offsetof(FSkillInfo_AI, SkillEndTime) == 0x000018, "Member 'FSkillInfo_AI::SkillEndTime' has a wrong offset!");
static_assert(offsetof(FSkillInfo_AI, ActionStep) == 0x00001C, "Member 'FSkillInfo_AI::ActionStep' has a wrong offset!");
static_assert(offsetof(FSkillInfo_AI, ActionSlot) == 0x000020, "Member 'FSkillInfo_AI::ActionSlot' has a wrong offset!");

// ScriptStruct Stigma.GoodsTag
// 0x0005 (0x0005 - 0x0000)
struct FGoodsTag final
{
public:
	bool                                          New;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hot;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CommingSoon;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Event;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Starter;                                           // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoodsTag) == 0x000001, "Wrong alignment on FGoodsTag");
static_assert(sizeof(FGoodsTag) == 0x000005, "Wrong size on FGoodsTag");
static_assert(offsetof(FGoodsTag, New) == 0x000000, "Member 'FGoodsTag::New' has a wrong offset!");
static_assert(offsetof(FGoodsTag, Hot) == 0x000001, "Member 'FGoodsTag::Hot' has a wrong offset!");
static_assert(offsetof(FGoodsTag, CommingSoon) == 0x000002, "Member 'FGoodsTag::CommingSoon' has a wrong offset!");
static_assert(offsetof(FGoodsTag, Event) == 0x000003, "Member 'FGoodsTag::Event' has a wrong offset!");
static_assert(offsetof(FGoodsTag, Starter) == 0x000004, "Member 'FGoodsTag::Starter' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Currency
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Currency final : public FItemID
{
};
static_assert(alignof(FItemID_Currency) == 0x000008, "Wrong alignment on FItemID_Currency");
static_assert(sizeof(FItemID_Currency) == 0x000010, "Wrong size on FItemID_Currency");

// ScriptStruct Stigma.NetGoods
// 0x0068 (0x0068 - 0x0000)
struct FNetGoods final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGoodsTag                              Tags;                                              // 0x0010(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE1[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Discount;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplaySlot;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCount;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Price;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Currency                       PriceType;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartAt;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndAt;                                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetGoods) == 0x000008, "Wrong alignment on FNetGoods");
static_assert(sizeof(FNetGoods) == 0x000068, "Wrong size on FNetGoods");
static_assert(offsetof(FNetGoods, ItemIDN) == 0x000000, "Member 'FNetGoods::ItemIDN' has a wrong offset!");
static_assert(offsetof(FNetGoods, Tags) == 0x000010, "Member 'FNetGoods::Tags' has a wrong offset!");
static_assert(offsetof(FNetGoods, Discount) == 0x000018, "Member 'FNetGoods::Discount' has a wrong offset!");
static_assert(offsetof(FNetGoods, DisplaySlot) == 0x00001C, "Member 'FNetGoods::DisplaySlot' has a wrong offset!");
static_assert(offsetof(FNetGoods, LimitCount) == 0x000020, "Member 'FNetGoods::LimitCount' has a wrong offset!");
static_assert(offsetof(FNetGoods, Price) == 0x000024, "Member 'FNetGoods::Price' has a wrong offset!");
static_assert(offsetof(FNetGoods, PriceType) == 0x000028, "Member 'FNetGoods::PriceType' has a wrong offset!");
static_assert(offsetof(FNetGoods, CurrencyCode) == 0x000038, "Member 'FNetGoods::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FNetGoods, Desc) == 0x000048, "Member 'FNetGoods::Desc' has a wrong offset!");
static_assert(offsetof(FNetGoods, StartAt) == 0x000058, "Member 'FNetGoods::StartAt' has a wrong offset!");
static_assert(offsetof(FNetGoods, EndAt) == 0x000060, "Member 'FNetGoods::EndAt' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadActiveGoods
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadActiveGoods final
{
public:
	TArray<struct FNetGoods>                      Goods;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadActiveGoods) == 0x000008, "Wrong alignment on FACK_ReadActiveGoods");
static_assert(sizeof(FACK_ReadActiveGoods) == 0x000010, "Wrong size on FACK_ReadActiveGoods");
static_assert(offsetof(FACK_ReadActiveGoods, Goods) == 0x000000, "Member 'FACK_ReadActiveGoods::Goods' has a wrong offset!");

// ScriptStruct Stigma.BodyDeviation
// 0x0020 (0x0020 - 0x0000)
struct FBodyDeviation final
{
public:
	float                                         base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScaler;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Abnormal;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalScaler;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buffed;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBodyDeviation) == 0x000004, "Wrong alignment on FBodyDeviation");
static_assert(sizeof(FBodyDeviation) == 0x000020, "Wrong size on FBodyDeviation");
static_assert(offsetof(FBodyDeviation, base) == 0x000000, "Member 'FBodyDeviation::base' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, BaseScaler) == 0x000004, "Member 'FBodyDeviation::BaseScaler' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, Rotation) == 0x000008, "Member 'FBodyDeviation::Rotation' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, Speed) == 0x00000C, "Member 'FBodyDeviation::Speed' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, Damage) == 0x000010, "Member 'FBodyDeviation::Damage' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, Abnormal) == 0x000014, "Member 'FBodyDeviation::Abnormal' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, GlobalScaler) == 0x000018, "Member 'FBodyDeviation::GlobalScaler' has a wrong offset!");
static_assert(offsetof(FBodyDeviation, Buffed) == 0x00001C, "Member 'FBodyDeviation::Buffed' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Skin_Body
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Skin_Body final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Skin_Body) == 0x000008, "Wrong alignment on FItemIDRef_Skin_Body");
static_assert(sizeof(FItemIDRef_Skin_Body) == 0x000010, "Wrong size on FItemIDRef_Skin_Body");

// ScriptStruct Stigma.ItemIDRef_Skin_Head
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Skin_Head final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Skin_Head) == 0x000008, "Wrong alignment on FItemIDRef_Skin_Head");
static_assert(sizeof(FItemIDRef_Skin_Head) == 0x000010, "Wrong size on FItemIDRef_Skin_Head");

// ScriptStruct Stigma.BotCreation
// 0x0070 (0x0070 - 0x0000)
struct FBotCreation final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Nickname;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETeams                                        Team;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Skin_Body                   BodyID;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Head                   HeadID;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    ArmorType;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      GunType;                                           // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE4[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ELO;                                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coward;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shooting_Oriented;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HP_Scaler;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor_Scaler;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionStockScaler;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletCountScaler;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE5[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBotCreation) == 0x000008, "Wrong alignment on FBotCreation");
static_assert(sizeof(FBotCreation) == 0x000070, "Wrong size on FBotCreation");
static_assert(offsetof(FBotCreation, Enable) == 0x000000, "Member 'FBotCreation::Enable' has a wrong offset!");
static_assert(offsetof(FBotCreation, Nickname) == 0x000008, "Member 'FBotCreation::Nickname' has a wrong offset!");
static_assert(offsetof(FBotCreation, Team) == 0x000020, "Member 'FBotCreation::Team' has a wrong offset!");
static_assert(offsetof(FBotCreation, BodyID) == 0x000028, "Member 'FBotCreation::BodyID' has a wrong offset!");
static_assert(offsetof(FBotCreation, HeadID) == 0x000038, "Member 'FBotCreation::HeadID' has a wrong offset!");
static_assert(offsetof(FBotCreation, ArmorType) == 0x000048, "Member 'FBotCreation::ArmorType' has a wrong offset!");
static_assert(offsetof(FBotCreation, GunType) == 0x000049, "Member 'FBotCreation::GunType' has a wrong offset!");
static_assert(offsetof(FBotCreation, ELO) == 0x00004C, "Member 'FBotCreation::ELO' has a wrong offset!");
static_assert(offsetof(FBotCreation, Coward) == 0x000050, "Member 'FBotCreation::Coward' has a wrong offset!");
static_assert(offsetof(FBotCreation, Shooting_Oriented) == 0x000054, "Member 'FBotCreation::Shooting_Oriented' has a wrong offset!");
static_assert(offsetof(FBotCreation, HP_Scaler) == 0x000058, "Member 'FBotCreation::HP_Scaler' has a wrong offset!");
static_assert(offsetof(FBotCreation, Armor_Scaler) == 0x00005C, "Member 'FBotCreation::Armor_Scaler' has a wrong offset!");
static_assert(offsetof(FBotCreation, ActionStockScaler) == 0x000060, "Member 'FBotCreation::ActionStockScaler' has a wrong offset!");
static_assert(offsetof(FBotCreation, BulletCountScaler) == 0x000064, "Member 'FBotCreation::BulletCountScaler' has a wrong offset!");
static_assert(offsetof(FBotCreation, Lifetime) == 0x000068, "Member 'FBotCreation::Lifetime' has a wrong offset!");

// ScriptStruct Stigma.DediBattleStatus
// 0x0010 (0x0010 - 0x0000)
struct FDediBattleStatus final
{
public:
	EServerStatus                                 State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         RemainTimeSec;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FPS;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmptyPlayerCount;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDediBattleStatus) == 0x000004, "Wrong alignment on FDediBattleStatus");
static_assert(sizeof(FDediBattleStatus) == 0x000010, "Wrong size on FDediBattleStatus");
static_assert(offsetof(FDediBattleStatus, State) == 0x000000, "Member 'FDediBattleStatus::State' has a wrong offset!");
static_assert(offsetof(FDediBattleStatus, RemainTimeSec) == 0x000004, "Member 'FDediBattleStatus::RemainTimeSec' has a wrong offset!");
static_assert(offsetof(FDediBattleStatus, FPS) == 0x000008, "Member 'FDediBattleStatus::FPS' has a wrong offset!");
static_assert(offsetof(FDediBattleStatus, EmptyPlayerCount) == 0x00000C, "Member 'FDediBattleStatus::EmptyPlayerCount' has a wrong offset!");

// ScriptStruct Stigma.PartsDamage
// 0x0008 (0x0008 - 0x0000)
struct FPartsDamage final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProtectedByArmor;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE7[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FPartsDamage) == 0x000004, "Wrong alignment on FPartsDamage");
static_assert(sizeof(FPartsDamage) == 0x000008, "Wrong size on FPartsDamage");
static_assert(offsetof(FPartsDamage, DamageRate) == 0x000000, "Member 'FPartsDamage::DamageRate' has a wrong offset!");
static_assert(offsetof(FPartsDamage, IsProtectedByArmor) == 0x000004, "Member 'FPartsDamage::IsProtectedByArmor' has a wrong offset!");

// ScriptStruct Stigma.Config_CharaDamage
// 0x0040 (0x0040 - 0x0000)
struct FConfig_CharaDamage final
{
public:
	float                                         BaseDamage_Fist;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage_Foot;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage_Shoulder;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage_CounterAttack;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartsDamage                           Head;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartsDamage                           Body;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartsDamage                           Arms;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartsDamage                           Legs;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartsDamage                           KillPoint_Head;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPartsDamage                           KillPoint_Nut;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_CharaDamage) == 0x000004, "Wrong alignment on FConfig_CharaDamage");
static_assert(sizeof(FConfig_CharaDamage) == 0x000040, "Wrong size on FConfig_CharaDamage");
static_assert(offsetof(FConfig_CharaDamage, BaseDamage_Fist) == 0x000000, "Member 'FConfig_CharaDamage::BaseDamage_Fist' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, BaseDamage_Foot) == 0x000004, "Member 'FConfig_CharaDamage::BaseDamage_Foot' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, BaseDamage_Shoulder) == 0x000008, "Member 'FConfig_CharaDamage::BaseDamage_Shoulder' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, BaseDamage_CounterAttack) == 0x00000C, "Member 'FConfig_CharaDamage::BaseDamage_CounterAttack' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, Head) == 0x000010, "Member 'FConfig_CharaDamage::Head' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, Body) == 0x000018, "Member 'FConfig_CharaDamage::Body' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, Arms) == 0x000020, "Member 'FConfig_CharaDamage::Arms' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, Legs) == 0x000028, "Member 'FConfig_CharaDamage::Legs' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, KillPoint_Head) == 0x000030, "Member 'FConfig_CharaDamage::KillPoint_Head' has a wrong offset!");
static_assert(offsetof(FConfig_CharaDamage, KillPoint_Nut) == 0x000038, "Member 'FConfig_CharaDamage::KillPoint_Nut' has a wrong offset!");

// ScriptStruct Stigma.SeasonID
// 0x0004 (0x0004 - 0x0000)
struct FSeasonID final
{
public:
	int32                                         _id;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSeasonID) == 0x000004, "Wrong alignment on FSeasonID");
static_assert(sizeof(FSeasonID) == 0x000004, "Wrong size on FSeasonID");
static_assert(offsetof(FSeasonID, _id) == 0x000000, "Member 'FSeasonID::_id' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadSearchedUserRanking
// 0x0018 (0x0018 - 0x0000)
struct FREQ_ReadSearchedUserRanking final
{
public:
	struct FUserID                                SearchUserID;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              SeasonID;                                          // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  RankingType;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE8[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadSearchedUserRanking) == 0x000008, "Wrong alignment on FREQ_ReadSearchedUserRanking");
static_assert(sizeof(FREQ_ReadSearchedUserRanking) == 0x000018, "Wrong size on FREQ_ReadSearchedUserRanking");
static_assert(offsetof(FREQ_ReadSearchedUserRanking, SearchUserID) == 0x000000, "Member 'FREQ_ReadSearchedUserRanking::SearchUserID' has a wrong offset!");
static_assert(offsetof(FREQ_ReadSearchedUserRanking, Count) == 0x000008, "Member 'FREQ_ReadSearchedUserRanking::Count' has a wrong offset!");
static_assert(offsetof(FREQ_ReadSearchedUserRanking, SeasonID) == 0x000010, "Member 'FREQ_ReadSearchedUserRanking::SeasonID' has a wrong offset!");
static_assert(offsetof(FREQ_ReadSearchedUserRanking, RankingType) == 0x000014, "Member 'FREQ_ReadSearchedUserRanking::RankingType' has a wrong offset!");

// ScriptStruct Stigma.DamageDef
// 0x0014 (0x0014 - 0x0000)
struct FDamageDef final
{
public:
	EDamageType                                   DamageType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageTarget                                 DamageTarget;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CE9[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Damage;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockType                                    KnockType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbnormals                             Abnormals;                                         // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEA[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDOT                                   DOT;                                               // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageDef) == 0x000004, "Wrong alignment on FDamageDef");
static_assert(sizeof(FDamageDef) == 0x000014, "Wrong size on FDamageDef");
static_assert(offsetof(FDamageDef, DamageType) == 0x000000, "Member 'FDamageDef::DamageType' has a wrong offset!");
static_assert(offsetof(FDamageDef, DamageTarget) == 0x000001, "Member 'FDamageDef::DamageTarget' has a wrong offset!");
static_assert(offsetof(FDamageDef, Damage) == 0x000004, "Member 'FDamageDef::Damage' has a wrong offset!");
static_assert(offsetof(FDamageDef, KnockType) == 0x000008, "Member 'FDamageDef::KnockType' has a wrong offset!");
static_assert(offsetof(FDamageDef, Abnormals) == 0x000009, "Member 'FDamageDef::Abnormals' has a wrong offset!");
static_assert(offsetof(FDamageDef, DOT) == 0x00000C, "Member 'FDamageDef::DOT' has a wrong offset!");

// ScriptStruct Stigma.GradeDef
// 0x0068 (0x0070 - 0x0008)
struct FGradeDef final : public FTableRowBase
{
public:
	EItemGrade                                    Grade;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FXColor;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      IconMaterial;                                      // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGradeDef) == 0x000008, "Wrong alignment on FGradeDef");
static_assert(sizeof(FGradeDef) == 0x000070, "Wrong size on FGradeDef");
static_assert(offsetof(FGradeDef, Grade) == 0x000008, "Member 'FGradeDef::Grade' has a wrong offset!");
static_assert(offsetof(FGradeDef, DisplayName) == 0x000010, "Member 'FGradeDef::DisplayName' has a wrong offset!");
static_assert(offsetof(FGradeDef, Color) == 0x000028, "Member 'FGradeDef::Color' has a wrong offset!");
static_assert(offsetof(FGradeDef, FXColor) == 0x000038, "Member 'FGradeDef::FXColor' has a wrong offset!");
static_assert(offsetof(FGradeDef, IconMaterial) == 0x000048, "Member 'FGradeDef::IconMaterial' has a wrong offset!");

// ScriptStruct Stigma.CREQ_CB_UpdateSecurityData
// 0x0200 (0x0200 - 0x0000)
struct FCREQ_CB_UpdateSecurityData final
{
public:
	uint8                                         SecurityData[0x200];                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCREQ_CB_UpdateSecurityData) == 0x000001, "Wrong alignment on FCREQ_CB_UpdateSecurityData");
static_assert(sizeof(FCREQ_CB_UpdateSecurityData) == 0x000200, "Wrong size on FCREQ_CB_UpdateSecurityData");
static_assert(offsetof(FCREQ_CB_UpdateSecurityData, SecurityData) == 0x000000, "Member 'FCREQ_CB_UpdateSecurityData::SecurityData' has a wrong offset!");

// ScriptStruct Stigma.CameraModeSetting
// 0x0038 (0x0038 - 0x0000)
struct FCameraModeSetting final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtOffset;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEC[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCameraModeSetting) == 0x000008, "Wrong alignment on FCameraModeSetting");
static_assert(sizeof(FCameraModeSetting) == 0x000038, "Wrong size on FCameraModeSetting");
static_assert(offsetof(FCameraModeSetting, LocationOffset) == 0x000000, "Member 'FCameraModeSetting::LocationOffset' has a wrong offset!");
static_assert(offsetof(FCameraModeSetting, LookAtOffset) == 0x000018, "Member 'FCameraModeSetting::LookAtOffset' has a wrong offset!");
static_assert(offsetof(FCameraModeSetting, Distance) == 0x000030, "Member 'FCameraModeSetting::Distance' has a wrong offset!");

// ScriptStruct Stigma.VoiceConfig
// 0x0020 (0x0028 - 0x0008)
struct FVoiceConfig final : public FTableRowBase
{
public:
	class FName                                   VoiceID;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayPercent;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrevVoiceID;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceGroup                                   GroupType;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CED[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         PriorityInGroup;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEE[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FVoiceConfig) == 0x000008, "Wrong alignment on FVoiceConfig");
static_assert(sizeof(FVoiceConfig) == 0x000028, "Wrong size on FVoiceConfig");
static_assert(offsetof(FVoiceConfig, VoiceID) == 0x000008, "Member 'FVoiceConfig::VoiceID' has a wrong offset!");
static_assert(offsetof(FVoiceConfig, PlayPercent) == 0x000010, "Member 'FVoiceConfig::PlayPercent' has a wrong offset!");
static_assert(offsetof(FVoiceConfig, PrevVoiceID) == 0x000014, "Member 'FVoiceConfig::PrevVoiceID' has a wrong offset!");
static_assert(offsetof(FVoiceConfig, GroupType) == 0x00001C, "Member 'FVoiceConfig::GroupType' has a wrong offset!");
static_assert(offsetof(FVoiceConfig, PriorityInGroup) == 0x000020, "Member 'FVoiceConfig::PriorityInGroup' has a wrong offset!");

// ScriptStruct Stigma.ChannelVoiceInfo
// 0x0040 (0x0040 - 0x0000)
struct FChannelVoiceInfo final
{
public:
	class AActor*                                 ChannelActor;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoiceConfig                           VoiceConfig;                                       // 0x0008(0x0028)(NativeAccessSpecifierPublic)
	class APlayerState*                           VoiceOwnerPlayer;                                  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEF[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FChannelVoiceInfo) == 0x000008, "Wrong alignment on FChannelVoiceInfo");
static_assert(sizeof(FChannelVoiceInfo) == 0x000040, "Wrong size on FChannelVoiceInfo");
static_assert(offsetof(FChannelVoiceInfo, ChannelActor) == 0x000000, "Member 'FChannelVoiceInfo::ChannelActor' has a wrong offset!");
static_assert(offsetof(FChannelVoiceInfo, VoiceConfig) == 0x000008, "Member 'FChannelVoiceInfo::VoiceConfig' has a wrong offset!");
static_assert(offsetof(FChannelVoiceInfo, VoiceOwnerPlayer) == 0x000030, "Member 'FChannelVoiceInfo::VoiceOwnerPlayer' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Mission
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Mission final : public FItemID
{
};
static_assert(alignof(FItemID_Mission) == 0x000008, "Wrong alignment on FItemID_Mission");
static_assert(sizeof(FItemID_Mission) == 0x000010, "Wrong size on FItemID_Mission");

// ScriptStruct Stigma.NetMission
// 0x0030 (0x0030 - 0x0000)
struct FNetMission final
{
public:
	struct FItemID                                TAID;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Mission                        MIID;                                              // 0x0010(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Idx;                                               // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF0[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Cnt;                                               // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bkm;                                               // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rwd;                                               // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF1[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FNetMission) == 0x000008, "Wrong alignment on FNetMission");
static_assert(sizeof(FNetMission) == 0x000030, "Wrong size on FNetMission");
static_assert(offsetof(FNetMission, TAID) == 0x000000, "Member 'FNetMission::TAID' has a wrong offset!");
static_assert(offsetof(FNetMission, MIID) == 0x000010, "Member 'FNetMission::MIID' has a wrong offset!");
static_assert(offsetof(FNetMission, Idx) == 0x000020, "Member 'FNetMission::Idx' has a wrong offset!");
static_assert(offsetof(FNetMission, Cnt) == 0x000024, "Member 'FNetMission::Cnt' has a wrong offset!");
static_assert(offsetof(FNetMission, Bkm) == 0x000028, "Member 'FNetMission::Bkm' has a wrong offset!");
static_assert(offsetof(FNetMission, Rwd) == 0x000029, "Member 'FNetMission::Rwd' has a wrong offset!");

// ScriptStruct Stigma.ResultMission
// 0x0038 (0x0038 - 0x0000)
struct FResultMission final
{
public:
	struct FNetMission                            Mission;                                           // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CountInMatch;                                      // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF2[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FResultMission) == 0x000008, "Wrong alignment on FResultMission");
static_assert(sizeof(FResultMission) == 0x000038, "Wrong size on FResultMission");
static_assert(offsetof(FResultMission, Mission) == 0x000000, "Member 'FResultMission::Mission' has a wrong offset!");
static_assert(offsetof(FResultMission, CountInMatch) == 0x000030, "Member 'FResultMission::CountInMatch' has a wrong offset!");

// ScriptStruct Stigma.GoToWidgetConfig
// 0x0028 (0x0030 - 0x0008)
struct FGoToWidgetConfig final : public FTableRowBase
{
public:
	class FName                                   NameID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoToWidgetType                               Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELobbyPage                                    LobbyPage;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF3[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UPopupBase>                 PopupClass;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPreviewableWidget>         CustomWidgetClass;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGoToWidgetDetailer>        DetailerClass;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoToWidgetConfig) == 0x000008, "Wrong alignment on FGoToWidgetConfig");
static_assert(sizeof(FGoToWidgetConfig) == 0x000030, "Wrong size on FGoToWidgetConfig");
static_assert(offsetof(FGoToWidgetConfig, NameID) == 0x000008, "Member 'FGoToWidgetConfig::NameID' has a wrong offset!");
static_assert(offsetof(FGoToWidgetConfig, Type) == 0x000010, "Member 'FGoToWidgetConfig::Type' has a wrong offset!");
static_assert(offsetof(FGoToWidgetConfig, LobbyPage) == 0x000011, "Member 'FGoToWidgetConfig::LobbyPage' has a wrong offset!");
static_assert(offsetof(FGoToWidgetConfig, PopupClass) == 0x000018, "Member 'FGoToWidgetConfig::PopupClass' has a wrong offset!");
static_assert(offsetof(FGoToWidgetConfig, CustomWidgetClass) == 0x000020, "Member 'FGoToWidgetConfig::CustomWidgetClass' has a wrong offset!");
static_assert(offsetof(FGoToWidgetConfig, DetailerClass) == 0x000028, "Member 'FGoToWidgetConfig::DetailerClass' has a wrong offset!");

// ScriptStruct Stigma.FightingStyleDefine
// 0x0070 (0x0078 - 0x0008)
struct FFightingStyleDefine final : public FTableRowBase
{
public:
	EFightingStyle                                FightingStyle;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFightingStyleDefine) == 0x000008, "Wrong alignment on FFightingStyleDefine");
static_assert(sizeof(FFightingStyleDefine) == 0x000078, "Wrong size on FFightingStyleDefine");
static_assert(offsetof(FFightingStyleDefine, FightingStyle) == 0x000008, "Member 'FFightingStyleDefine::FightingStyle' has a wrong offset!");
static_assert(offsetof(FFightingStyleDefine, DisplayName) == 0x000010, "Member 'FFightingStyleDefine::DisplayName' has a wrong offset!");
static_assert(offsetof(FFightingStyleDefine, Desc) == 0x000028, "Member 'FFightingStyleDefine::Desc' has a wrong offset!");
static_assert(offsetof(FFightingStyleDefine, Icon) == 0x000040, "Member 'FFightingStyleDefine::Icon' has a wrong offset!");
static_assert(offsetof(FFightingStyleDefine, Color) == 0x000068, "Member 'FFightingStyleDefine::Color' has a wrong offset!");

// ScriptStruct Stigma.Stat_Gun
// 0x0030 (0x0030 - 0x0000)
struct FStat_Gun final
{
public:
	EGunType                                      GunType;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Fire;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectilePerBullet;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cri;                                               // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Head;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Body;                                              // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Arm;                                               // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Leg;                                               // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kill;                                              // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorDamage;                                       // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_Gun) == 0x000004, "Wrong alignment on FStat_Gun");
static_assert(sizeof(FStat_Gun) == 0x000030, "Wrong size on FStat_Gun");
static_assert(offsetof(FStat_Gun, GunType) == 0x000000, "Member 'FStat_Gun::GunType' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Fire) == 0x000004, "Member 'FStat_Gun::Fire' has a wrong offset!");
static_assert(offsetof(FStat_Gun, ProjectilePerBullet) == 0x000008, "Member 'FStat_Gun::ProjectilePerBullet' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Cri) == 0x00000C, "Member 'FStat_Gun::Cri' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Head) == 0x000010, "Member 'FStat_Gun::Head' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Body) == 0x000014, "Member 'FStat_Gun::Body' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Arm) == 0x000018, "Member 'FStat_Gun::Arm' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Leg) == 0x00001C, "Member 'FStat_Gun::Leg' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Kill) == 0x000020, "Member 'FStat_Gun::Kill' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Assist) == 0x000024, "Member 'FStat_Gun::Assist' has a wrong offset!");
static_assert(offsetof(FStat_Gun, Damage) == 0x000028, "Member 'FStat_Gun::Damage' has a wrong offset!");
static_assert(offsetof(FStat_Gun, ArmorDamage) == 0x00002C, "Member 'FStat_Gun::ArmorDamage' has a wrong offset!");

// ScriptStruct Stigma.ActionGraph_ActivationInfo
// 0x0004 (0x0004 - 0x0000)
struct FActionGraph_ActivationInfo final
{
public:
	int32                                         UnlockPrice;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGraph_ActivationInfo) == 0x000004, "Wrong alignment on FActionGraph_ActivationInfo");
static_assert(sizeof(FActionGraph_ActivationInfo) == 0x000004, "Wrong size on FActionGraph_ActivationInfo");
static_assert(offsetof(FActionGraph_ActivationInfo, UnlockPrice) == 0x000000, "Member 'FActionGraph_ActivationInfo::UnlockPrice' has a wrong offset!");

// ScriptStruct Stigma.AppliedFunction
// 0x0030 (0x0030 - 0x0000)
struct FAppliedFunction final
{
public:
	struct FItemID                                FunctionGroupID;                                   // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              ExpiredAt_ActiveFunction;                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiredAt_GMFunction;                              // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFuncTarget                                   FuncTarget;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF7[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAppliedFunction) == 0x000008, "Wrong alignment on FAppliedFunction");
static_assert(sizeof(FAppliedFunction) == 0x000030, "Wrong size on FAppliedFunction");
static_assert(offsetof(FAppliedFunction, FunctionGroupID) == 0x000000, "Member 'FAppliedFunction::FunctionGroupID' has a wrong offset!");
static_assert(offsetof(FAppliedFunction, Value) == 0x000010, "Member 'FAppliedFunction::Value' has a wrong offset!");
static_assert(offsetof(FAppliedFunction, ExpiredAt_ActiveFunction) == 0x000018, "Member 'FAppliedFunction::ExpiredAt_ActiveFunction' has a wrong offset!");
static_assert(offsetof(FAppliedFunction, ExpiredAt_GMFunction) == 0x000020, "Member 'FAppliedFunction::ExpiredAt_GMFunction' has a wrong offset!");
static_assert(offsetof(FAppliedFunction, FuncTarget) == 0x000028, "Member 'FAppliedFunction::FuncTarget' has a wrong offset!");

// ScriptStruct Stigma.Config_GunZoom
// 0x0028 (0x0028 - 0x0000)
struct FConfig_GunZoom final
{
public:
	float                                         FOV_1PV;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScopeType                                    ScopeType;                                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF8[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ZoomDistance;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScopeDullness;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScopeCutoff;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScopeRestoreSpeed;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_BodyRate;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_GunRate;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Rate;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleShaking_Speed;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_GunZoom) == 0x000004, "Wrong alignment on FConfig_GunZoom");
static_assert(sizeof(FConfig_GunZoom) == 0x000028, "Wrong size on FConfig_GunZoom");
static_assert(offsetof(FConfig_GunZoom, FOV_1PV) == 0x000000, "Member 'FConfig_GunZoom::FOV_1PV' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, ScopeType) == 0x000004, "Member 'FConfig_GunZoom::ScopeType' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, ZoomDistance) == 0x000008, "Member 'FConfig_GunZoom::ZoomDistance' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, ScopeDullness) == 0x00000C, "Member 'FConfig_GunZoom::ScopeDullness' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, ScopeCutoff) == 0x000010, "Member 'FConfig_GunZoom::ScopeCutoff' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, ScopeRestoreSpeed) == 0x000014, "Member 'FConfig_GunZoom::ScopeRestoreSpeed' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, Deviation_BodyRate) == 0x000018, "Member 'FConfig_GunZoom::Deviation_BodyRate' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, Deviation_GunRate) == 0x00001C, "Member 'FConfig_GunZoom::Deviation_GunRate' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, Recoil_Rate) == 0x000020, "Member 'FConfig_GunZoom::Recoil_Rate' has a wrong offset!");
static_assert(offsetof(FConfig_GunZoom, IdleShaking_Speed) == 0x000024, "Member 'FConfig_GunZoom::IdleShaking_Speed' has a wrong offset!");

// ScriptStruct Stigma.GunAttribute_Common
// 0x0024 (0x0024 - 0x0000)
struct FGunAttribute_Common final
{
public:
	float                                         ControlPower;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_Base;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_PerShot;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Horz;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Crosshair_Rate;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Camera_Rate;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Recovery_DecRate;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletCount;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunAttribute_Common) == 0x000004, "Wrong alignment on FGunAttribute_Common");
static_assert(sizeof(FGunAttribute_Common) == 0x000024, "Wrong size on FGunAttribute_Common");
static_assert(offsetof(FGunAttribute_Common, ControlPower) == 0x000000, "Member 'FGunAttribute_Common::ControlPower' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Deviation_Base) == 0x000004, "Member 'FGunAttribute_Common::Deviation_Base' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Deviation_PerShot) == 0x000008, "Member 'FGunAttribute_Common::Deviation_PerShot' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Recoil) == 0x00000C, "Member 'FGunAttribute_Common::Recoil' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Recoil_Horz) == 0x000010, "Member 'FGunAttribute_Common::Recoil_Horz' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Recoil_Crosshair_Rate) == 0x000014, "Member 'FGunAttribute_Common::Recoil_Crosshair_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Recoil_Camera_Rate) == 0x000018, "Member 'FGunAttribute_Common::Recoil_Camera_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, Recoil_Recovery_DecRate) == 0x00001C, "Member 'FGunAttribute_Common::Recoil_Recovery_DecRate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_Common, BulletCount) == 0x000020, "Member 'FGunAttribute_Common::BulletCount' has a wrong offset!");

// ScriptStruct Stigma.MaterialOverride
// 0x0030 (0x0030 - 0x0000)
struct FMaterialOverride final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialOverride) == 0x000008, "Wrong alignment on FMaterialOverride");
static_assert(sizeof(FMaterialOverride) == 0x000030, "Wrong size on FMaterialOverride");
static_assert(offsetof(FMaterialOverride, SlotName) == 0x000000, "Member 'FMaterialOverride::SlotName' has a wrong offset!");
static_assert(offsetof(FMaterialOverride, Material) == 0x000008, "Member 'FMaterialOverride::Material' has a wrong offset!");

// ScriptStruct Stigma.MeshDefine
// 0x0070 (0x0070 - 0x0000)
struct FMeshDefine final
{
public:
	TSoftClassPtr<class UClass>                   CopySourceActor;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialOverride>              MaterialOverrides;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OtherMeshMaskingNames;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshDefine) == 0x000008, "Wrong alignment on FMeshDefine");
static_assert(sizeof(FMeshDefine) == 0x000070, "Wrong size on FMeshDefine");
static_assert(offsetof(FMeshDefine, CopySourceActor) == 0x000000, "Member 'FMeshDefine::CopySourceActor' has a wrong offset!");
static_assert(offsetof(FMeshDefine, Mesh) == 0x000028, "Member 'FMeshDefine::Mesh' has a wrong offset!");
static_assert(offsetof(FMeshDefine, MaterialOverrides) == 0x000050, "Member 'FMeshDefine::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FMeshDefine, OtherMeshMaskingNames) == 0x000060, "Member 'FMeshDefine::OtherMeshMaskingNames' has a wrong offset!");

// ScriptStruct Stigma.PartsEntry
// 0x0070 (0x01A0 - 0x0130)
struct FPartsEntry : public FItemEntry
{
public:
	struct FMeshDefine                            Mesh;                                              // 0x0130(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartsEntry) == 0x000008, "Wrong alignment on FPartsEntry");
static_assert(sizeof(FPartsEntry) == 0x0001A0, "Wrong size on FPartsEntry");
static_assert(offsetof(FPartsEntry, Mesh) == 0x000130, "Member 'FPartsEntry::Mesh' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Base
// 0x0040 (0x01E0 - 0x01A0)
struct FGunEntry_Base : public FPartsEntry
{
public:
	EGunPartsSocket                               AttachSocket;                                      // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunPartsSlot                                 GunPartsSlot;                                      // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF9[0x2];                                     // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunAttribute_Common                   GunAttribute_Common;                               // 0x01A4(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsAttachableAccessory;                             // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttachableAnyGun;                                // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFixedSlot;                                       // 0x01CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFA[0x5];                                     // 0x01CB(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EGunType>                              AttachableGunTypes;                                // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunEntry_Base) == 0x000008, "Wrong alignment on FGunEntry_Base");
static_assert(sizeof(FGunEntry_Base) == 0x0001E0, "Wrong size on FGunEntry_Base");
static_assert(offsetof(FGunEntry_Base, AttachSocket) == 0x0001A0, "Member 'FGunEntry_Base::AttachSocket' has a wrong offset!");
static_assert(offsetof(FGunEntry_Base, GunPartsSlot) == 0x0001A1, "Member 'FGunEntry_Base::GunPartsSlot' has a wrong offset!");
static_assert(offsetof(FGunEntry_Base, GunAttribute_Common) == 0x0001A4, "Member 'FGunEntry_Base::GunAttribute_Common' has a wrong offset!");
static_assert(offsetof(FGunEntry_Base, IsAttachableAccessory) == 0x0001C8, "Member 'FGunEntry_Base::IsAttachableAccessory' has a wrong offset!");
static_assert(offsetof(FGunEntry_Base, IsAttachableAnyGun) == 0x0001C9, "Member 'FGunEntry_Base::IsAttachableAnyGun' has a wrong offset!");
static_assert(offsetof(FGunEntry_Base, IsFixedSlot) == 0x0001CA, "Member 'FGunEntry_Base::IsFixedSlot' has a wrong offset!");
static_assert(offsetof(FGunEntry_Base, AttachableGunTypes) == 0x0001D0, "Member 'FGunEntry_Base::AttachableGunTypes' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Sight
// 0x00A0 (0x0280 - 0x01E0)
struct FGunEntry_Sight final : public FGunEntry_Base
{
public:
	struct FConfig_GunZoom                        Zoom;                                              // 0x01E0(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       DotPoseAnim;                                       // 0x0208(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECharaType, TSoftObjectPtr<class UAnimSequenceBase>> SpecificDotPoseAnim;                               // 0x0230(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunEntry_Sight) == 0x000008, "Wrong alignment on FGunEntry_Sight");
static_assert(sizeof(FGunEntry_Sight) == 0x000280, "Wrong size on FGunEntry_Sight");
static_assert(offsetof(FGunEntry_Sight, Zoom) == 0x0001E0, "Member 'FGunEntry_Sight::Zoom' has a wrong offset!");
static_assert(offsetof(FGunEntry_Sight, DotPoseAnim) == 0x000208, "Member 'FGunEntry_Sight::DotPoseAnim' has a wrong offset!");
static_assert(offsetof(FGunEntry_Sight, SpecificDotPoseAnim) == 0x000230, "Member 'FGunEntry_Sight::SpecificDotPoseAnim' has a wrong offset!");

// ScriptStruct Stigma.SurveyPointRange
// 0x0040 (0x0040 - 0x0000)
struct FSurveyPointRange final
{
public:
	class FText                                   MinLabel;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinPoint;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFB[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   MaxLabel;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MaxPoint;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFC[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FSurveyPointRange) == 0x000008, "Wrong alignment on FSurveyPointRange");
static_assert(sizeof(FSurveyPointRange) == 0x000040, "Wrong size on FSurveyPointRange");
static_assert(offsetof(FSurveyPointRange, MinLabel) == 0x000000, "Member 'FSurveyPointRange::MinLabel' has a wrong offset!");
static_assert(offsetof(FSurveyPointRange, MinPoint) == 0x000018, "Member 'FSurveyPointRange::MinPoint' has a wrong offset!");
static_assert(offsetof(FSurveyPointRange, MaxLabel) == 0x000020, "Member 'FSurveyPointRange::MaxLabel' has a wrong offset!");
static_assert(offsetof(FSurveyPointRange, MaxPoint) == 0x000038, "Member 'FSurveyPointRange::MaxPoint' has a wrong offset!");

// ScriptStruct Stigma.SurveyQuestion
// 0x0078 (0x0078 - 0x0000)
struct FSurveyQuestion final
{
public:
	ESurveyType                                   QuestionType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Question;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CanInputText;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFE[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSurveyPointRange                      PointDefine;                                       // 0x0028(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           Selections;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurveyQuestion) == 0x000008, "Wrong alignment on FSurveyQuestion");
static_assert(sizeof(FSurveyQuestion) == 0x000078, "Wrong size on FSurveyQuestion");
static_assert(offsetof(FSurveyQuestion, QuestionType) == 0x000000, "Member 'FSurveyQuestion::QuestionType' has a wrong offset!");
static_assert(offsetof(FSurveyQuestion, Question) == 0x000008, "Member 'FSurveyQuestion::Question' has a wrong offset!");
static_assert(offsetof(FSurveyQuestion, CanInputText) == 0x000020, "Member 'FSurveyQuestion::CanInputText' has a wrong offset!");
static_assert(offsetof(FSurveyQuestion, PointDefine) == 0x000028, "Member 'FSurveyQuestion::PointDefine' has a wrong offset!");
static_assert(offsetof(FSurveyQuestion, Selections) == 0x000068, "Member 'FSurveyQuestion::Selections' has a wrong offset!");

// ScriptStruct Stigma.StigmaLogBase
// 0x0028 (0x0028 - 0x0000)
struct FStigmaLogBase
{
public:
	class FString                                 SVC;                                               // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EVT;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Time;                                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStigmaLogBase) == 0x000008, "Wrong alignment on FStigmaLogBase");
static_assert(sizeof(FStigmaLogBase) == 0x000028, "Wrong size on FStigmaLogBase");
static_assert(offsetof(FStigmaLogBase, SVC) == 0x000000, "Member 'FStigmaLogBase::SVC' has a wrong offset!");
static_assert(offsetof(FStigmaLogBase, EVT) == 0x000010, "Member 'FStigmaLogBase::EVT' has a wrong offset!");
static_assert(offsetof(FStigmaLogBase, Time) == 0x000020, "Member 'FStigmaLogBase::Time' has a wrong offset!");

// ScriptStruct Stigma.StigmaLogBase_User
// 0x0008 (0x0030 - 0x0028)
struct FStigmaLogBase_User : public FStigmaLogBase
{
public:
	struct FUserID                                UserID;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStigmaLogBase_User) == 0x000008, "Wrong alignment on FStigmaLogBase_User");
static_assert(sizeof(FStigmaLogBase_User) == 0x000030, "Wrong size on FStigmaLogBase_User");
static_assert(offsetof(FStigmaLogBase_User, UserID) == 0x000028, "Member 'FStigmaLogBase_User::UserID' has a wrong offset!");

// ScriptStruct Stigma.Bounty_GoldRule
// 0x0014 (0x0014 - 0x0000)
struct FBounty_GoldRule final
{
public:
	int32                                         InitialGold;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillGold;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistGold;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakInGoldTime;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakInGoldUnit;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBounty_GoldRule) == 0x000004, "Wrong alignment on FBounty_GoldRule");
static_assert(sizeof(FBounty_GoldRule) == 0x000014, "Wrong size on FBounty_GoldRule");
static_assert(offsetof(FBounty_GoldRule, InitialGold) == 0x000000, "Member 'FBounty_GoldRule::InitialGold' has a wrong offset!");
static_assert(offsetof(FBounty_GoldRule, KillGold) == 0x000004, "Member 'FBounty_GoldRule::KillGold' has a wrong offset!");
static_assert(offsetof(FBounty_GoldRule, AssistGold) == 0x000008, "Member 'FBounty_GoldRule::AssistGold' has a wrong offset!");
static_assert(offsetof(FBounty_GoldRule, BreakInGoldTime) == 0x00000C, "Member 'FBounty_GoldRule::BreakInGoldTime' has a wrong offset!");
static_assert(offsetof(FBounty_GoldRule, BreakInGoldUnit) == 0x000010, "Member 'FBounty_GoldRule::BreakInGoldUnit' has a wrong offset!");

// ScriptStruct Stigma.Armor_RefillPrice
// 0x0008 (0x0008 - 0x0000)
struct FArmor_RefillPrice final
{
public:
	int32                                         Refill_Price;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceIncrease;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArmor_RefillPrice) == 0x000004, "Wrong alignment on FArmor_RefillPrice");
static_assert(sizeof(FArmor_RefillPrice) == 0x000008, "Wrong size on FArmor_RefillPrice");
static_assert(offsetof(FArmor_RefillPrice, Refill_Price) == 0x000000, "Member 'FArmor_RefillPrice::Refill_Price' has a wrong offset!");
static_assert(offsetof(FArmor_RefillPrice, PriceIncrease) == 0x000004, "Member 'FArmor_RefillPrice::PriceIncrease' has a wrong offset!");

// ScriptStruct Stigma.ApiResult
// 0x0008 (0x0008 - 0x0000)
struct FApiResult
{
public:
	EResultCode                                   Code;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         PublisherError;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FApiResult) == 0x000004, "Wrong alignment on FApiResult");
static_assert(sizeof(FApiResult) == 0x000008, "Wrong size on FApiResult");
static_assert(offsetof(FApiResult, Code) == 0x000000, "Member 'FApiResult::Code' has a wrong offset!");
static_assert(offsetof(FApiResult, PublisherError) == 0x000004, "Member 'FApiResult::PublisherError' has a wrong offset!");

// ScriptStruct Stigma.BuffKey
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FBuffKey final
{
public:
	uint8                                         Pad_1D00[0x4];                                     // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBuffKey) == 0x000004, "Wrong alignment on FBuffKey");
static_assert(sizeof(FBuffKey) == 0x000004, "Wrong size on FBuffKey");

// ScriptStruct Stigma.ItemOpenResult
// 0x0018 (0x0018 - 0x0000)
struct FItemOpenResult final
{
public:
	EResultCode                                   ResultCode;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D01[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetInvenItem>                  Item;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemOpenResult) == 0x000008, "Wrong alignment on FItemOpenResult");
static_assert(sizeof(FItemOpenResult) == 0x000018, "Wrong size on FItemOpenResult");
static_assert(offsetof(FItemOpenResult, ResultCode) == 0x000000, "Member 'FItemOpenResult::ResultCode' has a wrong offset!");
static_assert(offsetof(FItemOpenResult, Item) == 0x000008, "Member 'FItemOpenResult::Item' has a wrong offset!");

// ScriptStruct Stigma.CurrencyPlain
// 0x0018 (0x0018 - 0x0000)
struct FCurrencyPlain final
{
public:
	struct FItemID_Currency                       CurrencyID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D02[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCurrencyPlain) == 0x000008, "Wrong alignment on FCurrencyPlain");
static_assert(sizeof(FCurrencyPlain) == 0x000018, "Wrong size on FCurrencyPlain");
static_assert(offsetof(FCurrencyPlain, CurrencyID) == 0x000000, "Member 'FCurrencyPlain::CurrencyID' has a wrong offset!");
static_assert(offsetof(FCurrencyPlain, Amount) == 0x000010, "Member 'FCurrencyPlain::Amount' has a wrong offset!");

// ScriptStruct Stigma.Refunded
// 0x0028 (0x0028 - 0x0000)
struct FRefunded final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrencyPlain                         Currency;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRefunded) == 0x000008, "Wrong alignment on FRefunded");
static_assert(sizeof(FRefunded) == 0x000028, "Wrong size on FRefunded");
static_assert(offsetof(FRefunded, ItemIDN) == 0x000000, "Member 'FRefunded::ItemIDN' has a wrong offset!");
static_assert(offsetof(FRefunded, Currency) == 0x000010, "Member 'FRefunded::Currency' has a wrong offset!");

// ScriptStruct Stigma.RewardPlain
// 0x0020 (0x0020 - 0x0000)
struct FRewardPlain final
{
public:
	TArray<struct FItemOpenResult>                Reward;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRefunded>                      Refund;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardPlain) == 0x000008, "Wrong alignment on FRewardPlain");
static_assert(sizeof(FRewardPlain) == 0x000020, "Wrong size on FRewardPlain");
static_assert(offsetof(FRewardPlain, Reward) == 0x000000, "Member 'FRewardPlain::Reward' has a wrong offset!");
static_assert(offsetof(FRewardPlain, Refund) == 0x000010, "Member 'FRewardPlain::Refund' has a wrong offset!");

// ScriptStruct Stigma.ACK_ActivateCoupon
// 0x0030 (0x0030 - 0x0000)
struct FACK_ActivateCoupon final
{
public:
	class FString                                 CouponCode;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardPlain                           RewardPlain;                                       // 0x0010(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ActivateCoupon) == 0x000008, "Wrong alignment on FACK_ActivateCoupon");
static_assert(sizeof(FACK_ActivateCoupon) == 0x000030, "Wrong size on FACK_ActivateCoupon");
static_assert(offsetof(FACK_ActivateCoupon, CouponCode) == 0x000000, "Member 'FACK_ActivateCoupon::CouponCode' has a wrong offset!");
static_assert(offsetof(FACK_ActivateCoupon, RewardPlain) == 0x000010, "Member 'FACK_ActivateCoupon::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.HelpContent
// 0x00C0 (0x00C8 - 0x0008)
struct FHelpContent final : public FTableRowBase
{
public:
	class FString                                 ContentsKey;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        Movie;                                             // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CategoryTitle;                                     // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0090(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FText>                           Subtitle;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           Description;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpContent) == 0x000008, "Wrong alignment on FHelpContent");
static_assert(sizeof(FHelpContent) == 0x0000C8, "Wrong size on FHelpContent");
static_assert(offsetof(FHelpContent, ContentsKey) == 0x000008, "Member 'FHelpContent::ContentsKey' has a wrong offset!");
static_assert(offsetof(FHelpContent, Category) == 0x000018, "Member 'FHelpContent::Category' has a wrong offset!");
static_assert(offsetof(FHelpContent, Movie) == 0x000028, "Member 'FHelpContent::Movie' has a wrong offset!");
static_assert(offsetof(FHelpContent, Image) == 0x000050, "Member 'FHelpContent::Image' has a wrong offset!");
static_assert(offsetof(FHelpContent, CategoryTitle) == 0x000078, "Member 'FHelpContent::CategoryTitle' has a wrong offset!");
static_assert(offsetof(FHelpContent, Title) == 0x000090, "Member 'FHelpContent::Title' has a wrong offset!");
static_assert(offsetof(FHelpContent, Subtitle) == 0x0000A8, "Member 'FHelpContent::Subtitle' has a wrong offset!");
static_assert(offsetof(FHelpContent, Description) == 0x0000B8, "Member 'FHelpContent::Description' has a wrong offset!");

// ScriptStruct Stigma.GameSetting
// 0x0040 (0x0040 - 0x0000)
struct FGameSetting final
{
public:
	class FString                                 BattleID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D03[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 MapName;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsCustomGame : 1;                                  // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CanJoin : 1;                                       // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CanObserverChat : 1;                               // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         EnableBOT : 1;                                     // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsWelcomeMatch : 1;                                // 0x0038(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D04[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGameSetting) == 0x000008, "Wrong alignment on FGameSetting");
static_assert(sizeof(FGameSetting) == 0x000040, "Wrong size on FGameSetting");
static_assert(offsetof(FGameSetting, BattleID) == 0x000000, "Member 'FGameSetting::BattleID' has a wrong offset!");
static_assert(offsetof(FGameSetting, GameMode) == 0x000010, "Member 'FGameSetting::GameMode' has a wrong offset!");
static_assert(offsetof(FGameSetting, MapName) == 0x000018, "Member 'FGameSetting::MapName' has a wrong offset!");
static_assert(offsetof(FGameSetting, Options) == 0x000028, "Member 'FGameSetting::Options' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_BattleDef
// 0x0040 (0x0068 - 0x0028)
struct FBattleLog_BattleDef final : public FStigmaLogBase
{
public:
	struct FGameSetting                           Battle;                                            // 0x0028(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_BattleDef) == 0x000008, "Wrong alignment on FBattleLog_BattleDef");
static_assert(sizeof(FBattleLog_BattleDef) == 0x000068, "Wrong size on FBattleLog_BattleDef");
static_assert(offsetof(FBattleLog_BattleDef, Battle) == 0x000028, "Member 'FBattleLog_BattleDef::Battle' has a wrong offset!");

// ScriptStruct Stigma.TDM_GoldRule
// 0x0014 (0x0014 - 0x0000)
struct FTDM_GoldRule final
{
public:
	int32                                         InitialGold;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillGold;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeGoldTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeGoldUnit;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakInGoldFactor;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDM_GoldRule) == 0x000004, "Wrong alignment on FTDM_GoldRule");
static_assert(sizeof(FTDM_GoldRule) == 0x000014, "Wrong size on FTDM_GoldRule");
static_assert(offsetof(FTDM_GoldRule, InitialGold) == 0x000000, "Member 'FTDM_GoldRule::InitialGold' has a wrong offset!");
static_assert(offsetof(FTDM_GoldRule, KillGold) == 0x000004, "Member 'FTDM_GoldRule::KillGold' has a wrong offset!");
static_assert(offsetof(FTDM_GoldRule, FreeGoldTime) == 0x000008, "Member 'FTDM_GoldRule::FreeGoldTime' has a wrong offset!");
static_assert(offsetof(FTDM_GoldRule, FreeGoldUnit) == 0x00000C, "Member 'FTDM_GoldRule::FreeGoldUnit' has a wrong offset!");
static_assert(offsetof(FTDM_GoldRule, BreakInGoldFactor) == 0x000010, "Member 'FTDM_GoldRule::BreakInGoldFactor' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef final : public FItemID
{
};
static_assert(alignof(FItemIDRef) == 0x000008, "Wrong alignment on FItemIDRef");
static_assert(sizeof(FItemIDRef) == 0x000010, "Wrong size on FItemIDRef");

// ScriptStruct Stigma.ObtainGuide
// 0x0030 (0x0030 - 0x0000)
struct FObtainGuide final
{
public:
	EObtainType                                   ObtainType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D05[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef                             ItemID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   String;                                            // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObtainGuide) == 0x000008, "Wrong alignment on FObtainGuide");
static_assert(sizeof(FObtainGuide) == 0x000030, "Wrong size on FObtainGuide");
static_assert(offsetof(FObtainGuide, ObtainType) == 0x000000, "Member 'FObtainGuide::ObtainType' has a wrong offset!");
static_assert(offsetof(FObtainGuide, Level) == 0x000004, "Member 'FObtainGuide::Level' has a wrong offset!");
static_assert(offsetof(FObtainGuide, ItemID) == 0x000008, "Member 'FObtainGuide::ItemID' has a wrong offset!");
static_assert(offsetof(FObtainGuide, String) == 0x000018, "Member 'FObtainGuide::String' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Gears
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Gears final : public FItemID
{
};
static_assert(alignof(FItemID_Gears) == 0x000008, "Wrong alignment on FItemID_Gears");
static_assert(sizeof(FItemID_Gears) == 0x000010, "Wrong size on FItemID_Gears");

// ScriptStruct Stigma.GunAttribute_FireSystem
// 0x0048 (0x0048 - 0x0000)
struct FGunAttribute_FireSystem final
{
public:
	float                                         Deviation_Max;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilFactor_1PV;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilFactor_3PV;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRecoil;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_SpeedRate;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_Crouch_Rate;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_Damaged_Duration;                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_Damaged_Rate;                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_3PV_Rate;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_1PV_Rate;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_DualGun;                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_Rotation_Rate;                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_Recovery_Delay;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_Recovery_Slope;                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_Body_Increase_Speed;                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_Body_Decrease_Speed;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationFactor_HoldingProp_Rate;                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_HoldingProp_Rate;                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunAttribute_FireSystem) == 0x000004, "Wrong alignment on FGunAttribute_FireSystem");
static_assert(sizeof(FGunAttribute_FireSystem) == 0x000048, "Wrong size on FGunAttribute_FireSystem");
static_assert(offsetof(FGunAttribute_FireSystem, Deviation_Max) == 0x000000, "Member 'FGunAttribute_FireSystem::Deviation_Max' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, RecoilFactor_1PV) == 0x000004, "Member 'FGunAttribute_FireSystem::RecoilFactor_1PV' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, RecoilFactor_3PV) == 0x000008, "Member 'FGunAttribute_FireSystem::RecoilFactor_3PV' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, MaxRecoil) == 0x00000C, "Member 'FGunAttribute_FireSystem::MaxRecoil' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_SpeedRate) == 0x000010, "Member 'FGunAttribute_FireSystem::DeviationFactor_SpeedRate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_Crouch_Rate) == 0x000014, "Member 'FGunAttribute_FireSystem::DeviationFactor_Crouch_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_Damaged_Duration) == 0x000018, "Member 'FGunAttribute_FireSystem::DeviationFactor_Damaged_Duration' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_Damaged_Rate) == 0x00001C, "Member 'FGunAttribute_FireSystem::DeviationFactor_Damaged_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_3PV_Rate) == 0x000020, "Member 'FGunAttribute_FireSystem::DeviationFactor_3PV_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_1PV_Rate) == 0x000024, "Member 'FGunAttribute_FireSystem::DeviationFactor_1PV_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_DualGun) == 0x000028, "Member 'FGunAttribute_FireSystem::DeviationFactor_DualGun' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_Rotation_Rate) == 0x00002C, "Member 'FGunAttribute_FireSystem::DeviationFactor_Rotation_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, Deviation_Recovery_Delay) == 0x000030, "Member 'FGunAttribute_FireSystem::Deviation_Recovery_Delay' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, Deviation_Recovery_Slope) == 0x000034, "Member 'FGunAttribute_FireSystem::Deviation_Recovery_Slope' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, Deviation_Body_Increase_Speed) == 0x000038, "Member 'FGunAttribute_FireSystem::Deviation_Body_Increase_Speed' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, Deviation_Body_Decrease_Speed) == 0x00003C, "Member 'FGunAttribute_FireSystem::Deviation_Body_Decrease_Speed' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, DeviationFactor_HoldingProp_Rate) == 0x000040, "Member 'FGunAttribute_FireSystem::DeviationFactor_HoldingProp_Rate' has a wrong offset!");
static_assert(offsetof(FGunAttribute_FireSystem, Recoil_HoldingProp_Rate) == 0x000044, "Member 'FGunAttribute_FireSystem::Recoil_HoldingProp_Rate' has a wrong offset!");

// ScriptStruct Stigma.BattleStore_ItemPrice
// 0x001C (0x0028 - 0x000C)
struct FBattleStore_ItemPrice final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_1D06[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ItemID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPrice;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D07[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleStore_ItemPrice) == 0x000008, "Wrong alignment on FBattleStore_ItemPrice");
static_assert(sizeof(FBattleStore_ItemPrice) == 0x000028, "Wrong size on FBattleStore_ItemPrice");
static_assert(offsetof(FBattleStore_ItemPrice, ItemID) == 0x000010, "Member 'FBattleStore_ItemPrice::ItemID' has a wrong offset!");
static_assert(offsetof(FBattleStore_ItemPrice, CurrentPrice) == 0x000020, "Member 'FBattleStore_ItemPrice::CurrentPrice' has a wrong offset!");

// ScriptStruct Stigma.BattleStore_ItemPriceList
// 0x0010 (0x0118 - 0x0108)
struct FBattleStore_ItemPriceList final : public FFastArraySerializer
{
public:
	TArray<struct FBattleStore_ItemPrice>         ItemPrices;                                        // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleStore_ItemPriceList) == 0x000008, "Wrong alignment on FBattleStore_ItemPriceList");
static_assert(sizeof(FBattleStore_ItemPriceList) == 0x000118, "Wrong size on FBattleStore_ItemPriceList");
static_assert(offsetof(FBattleStore_ItemPriceList, ItemPrices) == 0x000108, "Member 'FBattleStore_ItemPriceList::ItemPrices' has a wrong offset!");

// ScriptStruct Stigma.SoundDefines
// 0x0040 (0x0040 - 0x0000)
struct FSoundDefines final
{
public:
	TSoftObjectPtr<class USoundCue>               Sound;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLooping;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D08[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         SoundDuration;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnlyLocal;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D09[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class USoundCue*                              LoadedSoundCue;                                    // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundDefines) == 0x000008, "Wrong alignment on FSoundDefines");
static_assert(sizeof(FSoundDefines) == 0x000040, "Wrong size on FSoundDefines");
static_assert(offsetof(FSoundDefines, Sound) == 0x000000, "Member 'FSoundDefines::Sound' has a wrong offset!");
static_assert(offsetof(FSoundDefines, IsLooping) == 0x000028, "Member 'FSoundDefines::IsLooping' has a wrong offset!");
static_assert(offsetof(FSoundDefines, SoundDuration) == 0x00002C, "Member 'FSoundDefines::SoundDuration' has a wrong offset!");
static_assert(offsetof(FSoundDefines, IsOnlyLocal) == 0x000030, "Member 'FSoundDefines::IsOnlyLocal' has a wrong offset!");
static_assert(offsetof(FSoundDefines, LoadedSoundCue) == 0x000038, "Member 'FSoundDefines::LoadedSoundCue' has a wrong offset!");

// ScriptStruct Stigma.InteractionPoint
// 0x0030 (0x0030 - 0x0000)
struct FInteractionPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AdjustExtension;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionPoint) == 0x000008, "Wrong alignment on FInteractionPoint");
static_assert(sizeof(FInteractionPoint) == 0x000030, "Wrong size on FInteractionPoint");
static_assert(offsetof(FInteractionPoint, Point) == 0x000000, "Member 'FInteractionPoint::Point' has a wrong offset!");
static_assert(offsetof(FInteractionPoint, AdjustExtension) == 0x000018, "Member 'FInteractionPoint::AdjustExtension' has a wrong offset!");

// ScriptStruct Stigma.ReviveSetting
// 0x0008 (0x0008 - 0x0000)
struct FReviveSetting final
{
public:
	TSubclassOf<class AReviverBase>               ReviverType;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReviveSetting) == 0x000008, "Wrong alignment on FReviveSetting");
static_assert(sizeof(FReviveSetting) == 0x000008, "Wrong size on FReviveSetting");
static_assert(offsetof(FReviveSetting, ReviverType) == 0x000000, "Member 'FReviveSetting::ReviverType' has a wrong offset!");

// ScriptStruct Stigma.MatchTimeOffset
// 0x000C (0x000C - 0x0000)
struct FMatchTimeOffset final
{
public:
	int32                                         UserCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewbieGapLimit;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchTimeOffset) == 0x000004, "Wrong alignment on FMatchTimeOffset");
static_assert(sizeof(FMatchTimeOffset) == 0x00000C, "Wrong size on FMatchTimeOffset");
static_assert(offsetof(FMatchTimeOffset, UserCount) == 0x000000, "Member 'FMatchTimeOffset::UserCount' has a wrong offset!");
static_assert(offsetof(FMatchTimeOffset, StartTime) == 0x000004, "Member 'FMatchTimeOffset::StartTime' has a wrong offset!");
static_assert(offsetof(FMatchTimeOffset, NewbieGapLimit) == 0x000008, "Member 'FMatchTimeOffset::NewbieGapLimit' has a wrong offset!");

// ScriptStruct Stigma.MQMsg
// 0x0020 (0x0038 - 0x0018)
struct FMQMsg : public FNATSMsg
{
public:
	class FString                                 FromSV;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SVID;                                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQMsg) == 0x000008, "Wrong alignment on FMQMsg");
static_assert(sizeof(FMQMsg) == 0x000038, "Wrong size on FMQMsg");
static_assert(offsetof(FMQMsg, FromSV) == 0x000018, "Member 'FMQMsg::FromSV' has a wrong offset!");
static_assert(offsetof(FMQMsg, SVID) == 0x000028, "Member 'FMQMsg::SVID' has a wrong offset!");

// ScriptStruct Stigma.MQReqMsg
// 0x0018 (0x0050 - 0x0038)
struct FMQReqMsg : public FMQMsg
{
public:
	class FString                                 ReplyTo;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReqAt;                                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQReqMsg) == 0x000008, "Wrong alignment on FMQReqMsg");
static_assert(sizeof(FMQReqMsg) == 0x000050, "Wrong size on FMQReqMsg");
static_assert(offsetof(FMQReqMsg, ReplyTo) == 0x000038, "Member 'FMQReqMsg::ReplyTo' has a wrong offset!");
static_assert(offsetof(FMQReqMsg, ReqAt) == 0x000048, "Member 'FMQReqMsg::ReqAt' has a wrong offset!");

// ScriptStruct Stigma.REQ_UpdateServer
// 0x0030 (0x0080 - 0x0050)
struct FREQ_UpdateServer final : public FMQReqMsg
{
public:
	class FString                                 DediIDS;                                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DediSteamIDS;                                      // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerStatus                                 DediStatus;                                        // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0A[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         EmptyPlayerCount;                                  // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FPS;                                               // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0B[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_UpdateServer) == 0x000008, "Wrong alignment on FREQ_UpdateServer");
static_assert(sizeof(FREQ_UpdateServer) == 0x000080, "Wrong size on FREQ_UpdateServer");
static_assert(offsetof(FREQ_UpdateServer, DediIDS) == 0x000050, "Member 'FREQ_UpdateServer::DediIDS' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateServer, DediSteamIDS) == 0x000060, "Member 'FREQ_UpdateServer::DediSteamIDS' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateServer, DediStatus) == 0x000070, "Member 'FREQ_UpdateServer::DediStatus' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateServer, EmptyPlayerCount) == 0x000074, "Member 'FREQ_UpdateServer::EmptyPlayerCount' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateServer, FPS) == 0x000078, "Member 'FREQ_UpdateServer::FPS' has a wrong offset!");

// ScriptStruct Stigma.KeyMapping
// 0x0030 (0x0030 - 0x0000)
struct FKeyMapping final
{
public:
	struct FKey                                   DefaultKey;                                        // 0x0000(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   MultiKey;                                          // 0x0018(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyMapping) == 0x000008, "Wrong alignment on FKeyMapping");
static_assert(sizeof(FKeyMapping) == 0x000030, "Wrong size on FKeyMapping");
static_assert(offsetof(FKeyMapping, DefaultKey) == 0x000000, "Member 'FKeyMapping::DefaultKey' has a wrong offset!");
static_assert(offsetof(FKeyMapping, MultiKey) == 0x000018, "Member 'FKeyMapping::MultiKey' has a wrong offset!");

// ScriptStruct Stigma.GearMeshDefines
// 0x0140 (0x0140 - 0x0000)
struct FGearMeshDefines final
{
public:
	TSoftObjectPtr<class UStreamableRenderAsset>  Asset;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDestructibleMesh>       DestructibleMesh;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UGeometryCollection>     GeometryCollection;                                // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          DestructGearFX;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStreamableRenderAsset>  Asset_1PV;                                         // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RelativeTransform;                                 // 0x00D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideLobby;                                         // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0C[0xF];                                     // 0x0131(0x000F)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGearMeshDefines) == 0x000010, "Wrong alignment on FGearMeshDefines");
static_assert(sizeof(FGearMeshDefines) == 0x000140, "Wrong size on FGearMeshDefines");
static_assert(offsetof(FGearMeshDefines, Asset) == 0x000000, "Member 'FGearMeshDefines::Asset' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, DestructibleMesh) == 0x000028, "Member 'FGearMeshDefines::DestructibleMesh' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, GeometryCollection) == 0x000050, "Member 'FGearMeshDefines::GeometryCollection' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, DestructGearFX) == 0x000078, "Member 'FGearMeshDefines::DestructGearFX' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, Asset_1PV) == 0x0000A0, "Member 'FGearMeshDefines::Asset_1PV' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, SocketName) == 0x0000C8, "Member 'FGearMeshDefines::SocketName' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, RelativeTransform) == 0x0000D0, "Member 'FGearMeshDefines::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FGearMeshDefines, HideLobby) == 0x000130, "Member 'FGearMeshDefines::HideLobby' has a wrong offset!");

// ScriptStruct Stigma.SectionMeshDefines
// 0x0018 (0x0018 - 0x0000)
struct FSectionMeshDefines final
{
public:
	TArray<struct FGearMeshDefines>               MeshDefines;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         HP_Percentage;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorDamageRate;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSectionMeshDefines) == 0x000008, "Wrong alignment on FSectionMeshDefines");
static_assert(sizeof(FSectionMeshDefines) == 0x000018, "Wrong size on FSectionMeshDefines");
static_assert(offsetof(FSectionMeshDefines, MeshDefines) == 0x000000, "Member 'FSectionMeshDefines::MeshDefines' has a wrong offset!");
static_assert(offsetof(FSectionMeshDefines, HP_Percentage) == 0x000010, "Member 'FSectionMeshDefines::HP_Percentage' has a wrong offset!");
static_assert(offsetof(FSectionMeshDefines, ArmorDamageRate) == 0x000014, "Member 'FSectionMeshDefines::ArmorDamageRate' has a wrong offset!");

// ScriptStruct Stigma.ACK_SingleItemUpdate
// 0x0001 (0x0001 - 0x0000)
struct FACK_SingleItemUpdate final
{
public:
	uint8                                         Pad_1D0D[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_SingleItemUpdate) == 0x000001, "Wrong alignment on FACK_SingleItemUpdate");
static_assert(sizeof(FACK_SingleItemUpdate) == 0x000001, "Wrong size on FACK_SingleItemUpdate");

// ScriptStruct Stigma.GlobalPingSettings
// 0x0020 (0x0020 - 0x0000)
struct FGlobalPingSettings final
{
public:
	TSubclassOf<class UUI_ActionWheelMenu>        ActionWheelMenuUIClass;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APingMarker>                PingMarkerClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PingLifetimeSec;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionWheelDelayTimeSec;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PingCooltimeSec;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadioChatCooltimeSec;                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalPingSettings) == 0x000008, "Wrong alignment on FGlobalPingSettings");
static_assert(sizeof(FGlobalPingSettings) == 0x000020, "Wrong size on FGlobalPingSettings");
static_assert(offsetof(FGlobalPingSettings, ActionWheelMenuUIClass) == 0x000000, "Member 'FGlobalPingSettings::ActionWheelMenuUIClass' has a wrong offset!");
static_assert(offsetof(FGlobalPingSettings, PingMarkerClass) == 0x000008, "Member 'FGlobalPingSettings::PingMarkerClass' has a wrong offset!");
static_assert(offsetof(FGlobalPingSettings, PingLifetimeSec) == 0x000010, "Member 'FGlobalPingSettings::PingLifetimeSec' has a wrong offset!");
static_assert(offsetof(FGlobalPingSettings, ActionWheelDelayTimeSec) == 0x000014, "Member 'FGlobalPingSettings::ActionWheelDelayTimeSec' has a wrong offset!");
static_assert(offsetof(FGlobalPingSettings, PingCooltimeSec) == 0x000018, "Member 'FGlobalPingSettings::PingCooltimeSec' has a wrong offset!");
static_assert(offsetof(FGlobalPingSettings, RadioChatCooltimeSec) == 0x00001C, "Member 'FGlobalPingSettings::RadioChatCooltimeSec' has a wrong offset!");

// ScriptStruct Stigma.RewardItem
// 0x0018 (0x0018 - 0x0000)
struct FRewardItem final
{
public:
	struct FItemIDRef                             ItemIDN;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOrDuration;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0E[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRewardItem) == 0x000008, "Wrong alignment on FRewardItem");
static_assert(sizeof(FRewardItem) == 0x000018, "Wrong size on FRewardItem");
static_assert(offsetof(FRewardItem, ItemIDN) == 0x000000, "Member 'FRewardItem::ItemIDN' has a wrong offset!");
static_assert(offsetof(FRewardItem, CountOrDuration) == 0x000010, "Member 'FRewardItem::CountOrDuration' has a wrong offset!");

// ScriptStruct Stigma.Reward
// 0x0010 (0x0010 - 0x0000)
struct FReward
{
public:
	TArray<struct FRewardItem>                    Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReward) == 0x000008, "Wrong alignment on FReward");
static_assert(sizeof(FReward) == 0x000010, "Wrong size on FReward");
static_assert(offsetof(FReward, Items) == 0x000000, "Member 'FReward::Items' has a wrong offset!");

// ScriptStruct Stigma.BattlePassLevelConfig
// 0x0028 (0x0030 - 0x0008)
struct FBattlePassLevelConfig final : public FTableRowBase
{
public:
	int32                                         StartExp;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                FreeReward;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FReward                                PremiumReward;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassLevelConfig) == 0x000008, "Wrong alignment on FBattlePassLevelConfig");
static_assert(sizeof(FBattlePassLevelConfig) == 0x000030, "Wrong size on FBattlePassLevelConfig");
static_assert(offsetof(FBattlePassLevelConfig, StartExp) == 0x000008, "Member 'FBattlePassLevelConfig::StartExp' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelConfig, FreeReward) == 0x000010, "Member 'FBattlePassLevelConfig::FreeReward' has a wrong offset!");
static_assert(offsetof(FBattlePassLevelConfig, PremiumReward) == 0x000020, "Member 'FBattlePassLevelConfig::PremiumReward' has a wrong offset!");

// ScriptStruct Stigma.InputMappingContextDefine
// 0x0030 (0x0038 - 0x0008)
struct FInputMappingContextDefine final : public FTableRowBase
{
public:
	EIMCType                                      IMC_Type;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D10[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputMappingContext>    InputMappingContext;                               // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputMappingContextDefine) == 0x000008, "Wrong alignment on FInputMappingContextDefine");
static_assert(sizeof(FInputMappingContextDefine) == 0x000038, "Wrong size on FInputMappingContextDefine");
static_assert(offsetof(FInputMappingContextDefine, IMC_Type) == 0x000008, "Member 'FInputMappingContextDefine::IMC_Type' has a wrong offset!");
static_assert(offsetof(FInputMappingContextDefine, Priority) == 0x00000C, "Member 'FInputMappingContextDefine::Priority' has a wrong offset!");
static_assert(offsetof(FInputMappingContextDefine, InputMappingContext) == 0x000010, "Member 'FInputMappingContextDefine::InputMappingContext' has a wrong offset!");

// ScriptStruct Stigma.NetWeeklyBestRank
// 0x0010 (0x0010 - 0x0000)
struct FNetWeeklyBestRank final
{
public:
	ERankingType                                  RankingType;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D11[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Week;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetWeeklyBestRank) == 0x000004, "Wrong alignment on FNetWeeklyBestRank");
static_assert(sizeof(FNetWeeklyBestRank) == 0x000010, "Wrong size on FNetWeeklyBestRank");
static_assert(offsetof(FNetWeeklyBestRank, RankingType) == 0x000000, "Member 'FNetWeeklyBestRank::RankingType' has a wrong offset!");
static_assert(offsetof(FNetWeeklyBestRank, Week) == 0x000004, "Member 'FNetWeeklyBestRank::Week' has a wrong offset!");
static_assert(offsetof(FNetWeeklyBestRank, Value) == 0x000008, "Member 'FNetWeeklyBestRank::Value' has a wrong offset!");
static_assert(offsetof(FNetWeeklyBestRank, Score) == 0x00000C, "Member 'FNetWeeklyBestRank::Score' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticTier
// 0x0050 (0x0050 - 0x0000)
struct FNetStatisticTier final
{
public:
	ETier                                         Tier;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D12[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankingRatio;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetWeeklyBestRank>             WeeklyBestRank;                                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticKDA>               KDA;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticWin>               Win;                                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetStatisticPlayTime>          PlayTime;                                          // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticTier) == 0x000008, "Wrong alignment on FNetStatisticTier");
static_assert(sizeof(FNetStatisticTier) == 0x000050, "Wrong size on FNetStatisticTier");
static_assert(offsetof(FNetStatisticTier, Tier) == 0x000000, "Member 'FNetStatisticTier::Tier' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, Score) == 0x000004, "Member 'FNetStatisticTier::Score' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, Ranking) == 0x000008, "Member 'FNetStatisticTier::Ranking' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, RankingRatio) == 0x00000C, "Member 'FNetStatisticTier::RankingRatio' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, WeeklyBestRank) == 0x000010, "Member 'FNetStatisticTier::WeeklyBestRank' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, KDA) == 0x000020, "Member 'FNetStatisticTier::KDA' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, Win) == 0x000030, "Member 'FNetStatisticTier::Win' has a wrong offset!");
static_assert(offsetof(FNetStatisticTier, PlayTime) == 0x000040, "Member 'FNetStatisticTier::PlayTime' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadUserTierInfo
// 0x0050 (0x0050 - 0x0000)
struct FACK_ReadUserTierInfo final
{
public:
	struct FNetStatisticTier                      TierInfo;                                          // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadUserTierInfo) == 0x000008, "Wrong alignment on FACK_ReadUserTierInfo");
static_assert(sizeof(FACK_ReadUserTierInfo) == 0x000050, "Wrong size on FACK_ReadUserTierInfo");
static_assert(offsetof(FACK_ReadUserTierInfo, TierInfo) == 0x000000, "Member 'FACK_ReadUserTierInfo::TierInfo' has a wrong offset!");

// ScriptStruct Stigma.DediID
// 0x0010 (0x0010 - 0x0000)
struct FDediID final
{
public:
	class FString                                 _id;                                               // 0x0000(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FDediID) == 0x000008, "Wrong alignment on FDediID");
static_assert(sizeof(FDediID) == 0x000010, "Wrong size on FDediID");
static_assert(offsetof(FDediID, _id) == 0x000000, "Member 'FDediID::_id' has a wrong offset!");

// ScriptStruct Stigma.AISetting_AimError
// 0x0010 (0x0010 - 0x0000)
struct FAISetting_AimError final
{
public:
	float                                         base;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        TargetBone;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D13[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ZOffset;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAISetting_AimError) == 0x000004, "Wrong alignment on FAISetting_AimError");
static_assert(sizeof(FAISetting_AimError) == 0x000010, "Wrong size on FAISetting_AimError");
static_assert(offsetof(FAISetting_AimError, base) == 0x000000, "Member 'FAISetting_AimError::base' has a wrong offset!");
static_assert(offsetof(FAISetting_AimError, Range) == 0x000004, "Member 'FAISetting_AimError::Range' has a wrong offset!");
static_assert(offsetof(FAISetting_AimError, TargetBone) == 0x000008, "Member 'FAISetting_AimError::TargetBone' has a wrong offset!");
static_assert(offsetof(FAISetting_AimError, ZOffset) == 0x00000C, "Member 'FAISetting_AimError::ZOffset' has a wrong offset!");

// ScriptStruct Stigma.GlobalAISetting
// 0x0044 (0x0044 - 0x0000)
struct FGlobalAISetting final
{
public:
	float                                         UpdateThreatInterval;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatLevel_SafeBar_Min;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatLevel_SafeBar_Max;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatLevel_DangerBar_Min;                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatLevel_DangerBar_Max;                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAISetting_AimError                    Aim_200;                                           // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAISetting_AimError                    Aim_800;                                           // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FAISetting_AimError                    Aim_1400;                                          // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalAISetting) == 0x000004, "Wrong alignment on FGlobalAISetting");
static_assert(sizeof(FGlobalAISetting) == 0x000044, "Wrong size on FGlobalAISetting");
static_assert(offsetof(FGlobalAISetting, UpdateThreatInterval) == 0x000000, "Member 'FGlobalAISetting::UpdateThreatInterval' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, ThreatLevel_SafeBar_Min) == 0x000004, "Member 'FGlobalAISetting::ThreatLevel_SafeBar_Min' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, ThreatLevel_SafeBar_Max) == 0x000008, "Member 'FGlobalAISetting::ThreatLevel_SafeBar_Max' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, ThreatLevel_DangerBar_Min) == 0x00000C, "Member 'FGlobalAISetting::ThreatLevel_DangerBar_Min' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, ThreatLevel_DangerBar_Max) == 0x000010, "Member 'FGlobalAISetting::ThreatLevel_DangerBar_Max' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, Aim_200) == 0x000014, "Member 'FGlobalAISetting::Aim_200' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, Aim_800) == 0x000024, "Member 'FGlobalAISetting::Aim_800' has a wrong offset!");
static_assert(offsetof(FGlobalAISetting, Aim_1400) == 0x000034, "Member 'FGlobalAISetting::Aim_1400' has a wrong offset!");

// ScriptStruct Stigma.ItemID_BattlePass
// 0x0000 (0x0010 - 0x0010)
struct FItemID_BattlePass final : public FItemID
{
};
static_assert(alignof(FItemID_BattlePass) == 0x000008, "Wrong alignment on FItemID_BattlePass");
static_assert(sizeof(FItemID_BattlePass) == 0x000010, "Wrong size on FItemID_BattlePass");

// ScriptStruct Stigma.NetBattlePass
// 0x0028 (0x0028 - 0x0000)
struct FNetBattlePass final
{
public:
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActived;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D14[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardLevel;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPremium;                                         // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D15[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FNetBattlePass) == 0x000008, "Wrong alignment on FNetBattlePass");
static_assert(sizeof(FNetBattlePass) == 0x000028, "Wrong size on FNetBattlePass");
static_assert(offsetof(FNetBattlePass, PassIDN) == 0x000000, "Member 'FNetBattlePass::PassIDN' has a wrong offset!");
static_assert(offsetof(FNetBattlePass, IsActived) == 0x000010, "Member 'FNetBattlePass::IsActived' has a wrong offset!");
static_assert(offsetof(FNetBattlePass, Level) == 0x000014, "Member 'FNetBattlePass::Level' has a wrong offset!");
static_assert(offsetof(FNetBattlePass, Exp) == 0x000018, "Member 'FNetBattlePass::Exp' has a wrong offset!");
static_assert(offsetof(FNetBattlePass, RewardLevel) == 0x00001C, "Member 'FNetBattlePass::RewardLevel' has a wrong offset!");
static_assert(offsetof(FNetBattlePass, IsPremium) == 0x000020, "Member 'FNetBattlePass::IsPremium' has a wrong offset!");

// ScriptStruct Stigma.Config_CharaFireSystem
// 0x0018 (0x0018 - 0x0000)
struct FConfig_CharaFireSystem final
{
public:
	EGunType                                      DefaultGunType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      SpecialGun_Left;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      SpecialGun_Right;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunnerType                                   GunnerType;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeftHandDecoupled;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D16[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         DefaultGunCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPower;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Speed;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilRecovery_Speed;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_CharaFireSystem) == 0x000004, "Wrong alignment on FConfig_CharaFireSystem");
static_assert(sizeof(FConfig_CharaFireSystem) == 0x000018, "Wrong size on FConfig_CharaFireSystem");
static_assert(offsetof(FConfig_CharaFireSystem, DefaultGunType) == 0x000000, "Member 'FConfig_CharaFireSystem::DefaultGunType' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, SpecialGun_Left) == 0x000001, "Member 'FConfig_CharaFireSystem::SpecialGun_Left' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, SpecialGun_Right) == 0x000002, "Member 'FConfig_CharaFireSystem::SpecialGun_Right' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, GunnerType) == 0x000003, "Member 'FConfig_CharaFireSystem::GunnerType' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, IsLeftHandDecoupled) == 0x000004, "Member 'FConfig_CharaFireSystem::IsLeftHandDecoupled' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, DefaultGunCount) == 0x000008, "Member 'FConfig_CharaFireSystem::DefaultGunCount' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, ControlPower) == 0x00000C, "Member 'FConfig_CharaFireSystem::ControlPower' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, Recoil_Speed) == 0x000010, "Member 'FConfig_CharaFireSystem::Recoil_Speed' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFireSystem, RecoilRecovery_Speed) == 0x000014, "Member 'FConfig_CharaFireSystem::RecoilRecovery_Speed' has a wrong offset!");

// ScriptStruct Stigma.Config_TwoTap
// 0x0004 (0x0004 - 0x0000)
struct FConfig_TwoTap final
{
public:
	float                                         TimeLimit;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_TwoTap) == 0x000004, "Wrong alignment on FConfig_TwoTap");
static_assert(sizeof(FConfig_TwoTap) == 0x000004, "Wrong size on FConfig_TwoTap");
static_assert(offsetof(FConfig_TwoTap, TimeLimit) == 0x000000, "Member 'FConfig_TwoTap::TimeLimit' has a wrong offset!");

// ScriptStruct Stigma.Config_Body
// 0x0020 (0x0020 - 0x0000)
struct FConfig_Body final
{
public:
	float                                         Tall;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHP;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Height;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Calf_Foot_Distance;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Foot_Height;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             BoneMap;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Body) == 0x000008, "Wrong alignment on FConfig_Body");
static_assert(sizeof(FConfig_Body) == 0x000020, "Wrong size on FConfig_Body");
static_assert(offsetof(FConfig_Body, Tall) == 0x000000, "Member 'FConfig_Body::Tall' has a wrong offset!");
static_assert(offsetof(FConfig_Body, Width) == 0x000004, "Member 'FConfig_Body::Width' has a wrong offset!");
static_assert(offsetof(FConfig_Body, MaxHP) == 0x000008, "Member 'FConfig_Body::MaxHP' has a wrong offset!");
static_assert(offsetof(FConfig_Body, Pelvis_Height) == 0x00000C, "Member 'FConfig_Body::Pelvis_Height' has a wrong offset!");
static_assert(offsetof(FConfig_Body, Calf_Foot_Distance) == 0x000010, "Member 'FConfig_Body::Calf_Foot_Distance' has a wrong offset!");
static_assert(offsetof(FConfig_Body, Foot_Height) == 0x000014, "Member 'FConfig_Body::Foot_Height' has a wrong offset!");
static_assert(offsetof(FConfig_Body, BoneMap) == 0x000018, "Member 'FConfig_Body::BoneMap' has a wrong offset!");

// ScriptStruct Stigma.Config_CharaSpeed
// 0x003C (0x003C - 0x0000)
struct FConfig_CharaSpeed final
{
public:
	struct FMovementProfile                       Forward;                                           // 0x0000(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementProfile                       Side;                                              // 0x0014(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovementProfile                       Backward;                                          // 0x0028(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_CharaSpeed) == 0x000004, "Wrong alignment on FConfig_CharaSpeed");
static_assert(sizeof(FConfig_CharaSpeed) == 0x00003C, "Wrong size on FConfig_CharaSpeed");
static_assert(offsetof(FConfig_CharaSpeed, Forward) == 0x000000, "Member 'FConfig_CharaSpeed::Forward' has a wrong offset!");
static_assert(offsetof(FConfig_CharaSpeed, Side) == 0x000014, "Member 'FConfig_CharaSpeed::Side' has a wrong offset!");
static_assert(offsetof(FConfig_CharaSpeed, Backward) == 0x000028, "Member 'FConfig_CharaSpeed::Backward' has a wrong offset!");

// ScriptStruct Stigma.Config_Locomotion
// 0x0130 (0x0130 - 0x0000)
struct FConfig_Locomotion final
{
public:
	struct FConfig_CharaSpeed                     Stand_Relax;                                       // 0x0000(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaSpeed                     Stand_Aimming;                                     // 0x003C(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaSpeed                     Crouch_Relax;                                      // 0x0078(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaSpeed                     Crouch_Aimming;                                    // 0x00B4(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaSpeed                     Sprint;                                            // 0x00F0(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SprintRotationRate;                                // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Locomotion) == 0x000004, "Wrong alignment on FConfig_Locomotion");
static_assert(sizeof(FConfig_Locomotion) == 0x000130, "Wrong size on FConfig_Locomotion");
static_assert(offsetof(FConfig_Locomotion, Stand_Relax) == 0x000000, "Member 'FConfig_Locomotion::Stand_Relax' has a wrong offset!");
static_assert(offsetof(FConfig_Locomotion, Stand_Aimming) == 0x00003C, "Member 'FConfig_Locomotion::Stand_Aimming' has a wrong offset!");
static_assert(offsetof(FConfig_Locomotion, Crouch_Relax) == 0x000078, "Member 'FConfig_Locomotion::Crouch_Relax' has a wrong offset!");
static_assert(offsetof(FConfig_Locomotion, Crouch_Aimming) == 0x0000B4, "Member 'FConfig_Locomotion::Crouch_Aimming' has a wrong offset!");
static_assert(offsetof(FConfig_Locomotion, Sprint) == 0x0000F0, "Member 'FConfig_Locomotion::Sprint' has a wrong offset!");
static_assert(offsetof(FConfig_Locomotion, SprintRotationRate) == 0x00012C, "Member 'FConfig_Locomotion::SprintRotationRate' has a wrong offset!");

// ScriptStruct Stigma.RecoveryInfo
// 0x0010 (0x0010 - 0x0000)
struct FRecoveryInfo final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRecoveryHPPerPeriod;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRecoveryRate;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecoveryInfo) == 0x000004, "Wrong alignment on FRecoveryInfo");
static_assert(sizeof(FRecoveryInfo) == 0x000010, "Wrong size on FRecoveryInfo");
static_assert(offsetof(FRecoveryInfo, Delay) == 0x000000, "Member 'FRecoveryInfo::Delay' has a wrong offset!");
static_assert(offsetof(FRecoveryInfo, Period) == 0x000004, "Member 'FRecoveryInfo::Period' has a wrong offset!");
static_assert(offsetof(FRecoveryInfo, MaxRecoveryHPPerPeriod) == 0x000008, "Member 'FRecoveryInfo::MaxRecoveryHPPerPeriod' has a wrong offset!");
static_assert(offsetof(FRecoveryInfo, MaxRecoveryRate) == 0x00000C, "Member 'FRecoveryInfo::MaxRecoveryRate' has a wrong offset!");

// ScriptStruct Stigma.Config_CharaSound
// 0x00A0 (0x00A0 - 0x0000)
struct FConfig_CharaSound final
{
public:
	TSoftObjectPtr<class USoundCue>               Footstep;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              BreakingArmorSound;                                // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              BreakingArmorSound_1PV;                            // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              TurnOffSoundCue;                                   // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_CharaSound) == 0x000008, "Wrong alignment on FConfig_CharaSound");
static_assert(sizeof(FConfig_CharaSound) == 0x0000A0, "Wrong size on FConfig_CharaSound");
static_assert(offsetof(FConfig_CharaSound, Footstep) == 0x000000, "Member 'FConfig_CharaSound::Footstep' has a wrong offset!");
static_assert(offsetof(FConfig_CharaSound, BreakingArmorSound) == 0x000028, "Member 'FConfig_CharaSound::BreakingArmorSound' has a wrong offset!");
static_assert(offsetof(FConfig_CharaSound, BreakingArmorSound_1PV) == 0x000050, "Member 'FConfig_CharaSound::BreakingArmorSound_1PV' has a wrong offset!");
static_assert(offsetof(FConfig_CharaSound, TurnOffSoundCue) == 0x000078, "Member 'FConfig_CharaSound::TurnOffSoundCue' has a wrong offset!");

// ScriptStruct Stigma.Config_CharaFX
// 0x0050 (0x0050 - 0x0000)
struct FConfig_CharaFX final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          BreakingArmorFX;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFXSystemAsset>          HealingSkinFX;                                     // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_CharaFX) == 0x000008, "Wrong alignment on FConfig_CharaFX");
static_assert(sizeof(FConfig_CharaFX) == 0x000050, "Wrong size on FConfig_CharaFX");
static_assert(offsetof(FConfig_CharaFX, BreakingArmorFX) == 0x000000, "Member 'FConfig_CharaFX::BreakingArmorFX' has a wrong offset!");
static_assert(offsetof(FConfig_CharaFX, HealingSkinFX) == 0x000028, "Member 'FConfig_CharaFX::HealingSkinFX' has a wrong offset!");

// ScriptStruct Stigma.Config_Camera
// 0x00B8 (0x00C0 - 0x0008)
struct FConfig_Camera final : public FTableRowBase
{
public:
	struct FCameraModeSetting                     Normal;                                            // 0x0008(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraModeSetting                     Sprint;                                            // 0x0040(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Mesh1PV_Offset;                                    // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Mesh1PV_Zoom_Offset;                               // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchOffset;                                      // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Camera) == 0x000008, "Wrong alignment on FConfig_Camera");
static_assert(sizeof(FConfig_Camera) == 0x0000C0, "Wrong size on FConfig_Camera");
static_assert(offsetof(FConfig_Camera, Normal) == 0x000008, "Member 'FConfig_Camera::Normal' has a wrong offset!");
static_assert(offsetof(FConfig_Camera, Sprint) == 0x000040, "Member 'FConfig_Camera::Sprint' has a wrong offset!");
static_assert(offsetof(FConfig_Camera, Mesh1PV_Offset) == 0x000078, "Member 'FConfig_Camera::Mesh1PV_Offset' has a wrong offset!");
static_assert(offsetof(FConfig_Camera, Mesh1PV_Zoom_Offset) == 0x000090, "Member 'FConfig_Camera::Mesh1PV_Zoom_Offset' has a wrong offset!");
static_assert(offsetof(FConfig_Camera, CrouchOffset) == 0x0000A8, "Member 'FConfig_Camera::CrouchOffset' has a wrong offset!");

// ScriptStruct Stigma.Config_Facial
// 0x0050 (0x0050 - 0x0000)
struct FConfig_Facial final
{
public:
	TMap<ECharaFacialType, TSoftObjectPtr<class UAnimSequenceBase>> Facials;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Facial) == 0x000008, "Wrong alignment on FConfig_Facial");
static_assert(sizeof(FConfig_Facial) == 0x000050, "Wrong size on FConfig_Facial");
static_assert(offsetof(FConfig_Facial, Facials) == 0x000000, "Member 'FConfig_Facial::Facials' has a wrong offset!");

// ScriptStruct Stigma.ActionGraphSetting
// 0x01D0 (0x01D0 - 0x0000)
struct FActionGraphSetting final
{
public:
	struct FActionGraphID                         Fire;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         MeleeAttack;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         LoadMagazine;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         LoadBullet;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Fire_Sub;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         LoadMagazine_Sub;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         LoadBullet_Sub;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         ThrowGun;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         ThrowProp;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         ThrowAwayProp;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Skill_1;                                           // 0x00A0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Skill_2;                                           // 0x00B0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Skill_3;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         FastMove;                                          // 0x00D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Stagger;                                           // 0x00E0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         PushBack;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         KnockBack;                                         // 0x0100(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         KnockBack_TwoTap;                                  // 0x0110(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         KnockDown;                                         // 0x0120(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         FlyingKO;                                          // 0x0130(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Vault;                                             // 0x0140(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         StepUp;                                            // 0x0150(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Occupy;                                            // 0x0160(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         StandUp;                                           // 0x0170(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         KnockBack_Unavoidable;                             // 0x0180(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         KnockDown_Unavoidable;                             // 0x0190(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Escape;                                            // 0x01A0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Revive;                                            // 0x01B0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphID                         Hacking;                                           // 0x01C0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGraphSetting) == 0x000008, "Wrong alignment on FActionGraphSetting");
static_assert(sizeof(FActionGraphSetting) == 0x0001D0, "Wrong size on FActionGraphSetting");
static_assert(offsetof(FActionGraphSetting, Fire) == 0x000000, "Member 'FActionGraphSetting::Fire' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, MeleeAttack) == 0x000010, "Member 'FActionGraphSetting::MeleeAttack' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, LoadMagazine) == 0x000020, "Member 'FActionGraphSetting::LoadMagazine' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, LoadBullet) == 0x000030, "Member 'FActionGraphSetting::LoadBullet' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Fire_Sub) == 0x000040, "Member 'FActionGraphSetting::Fire_Sub' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, LoadMagazine_Sub) == 0x000050, "Member 'FActionGraphSetting::LoadMagazine_Sub' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, LoadBullet_Sub) == 0x000060, "Member 'FActionGraphSetting::LoadBullet_Sub' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, ThrowGun) == 0x000070, "Member 'FActionGraphSetting::ThrowGun' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, ThrowProp) == 0x000080, "Member 'FActionGraphSetting::ThrowProp' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, ThrowAwayProp) == 0x000090, "Member 'FActionGraphSetting::ThrowAwayProp' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Skill_1) == 0x0000A0, "Member 'FActionGraphSetting::Skill_1' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Skill_2) == 0x0000B0, "Member 'FActionGraphSetting::Skill_2' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Skill_3) == 0x0000C0, "Member 'FActionGraphSetting::Skill_3' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, FastMove) == 0x0000D0, "Member 'FActionGraphSetting::FastMove' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Stagger) == 0x0000E0, "Member 'FActionGraphSetting::Stagger' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, PushBack) == 0x0000F0, "Member 'FActionGraphSetting::PushBack' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, KnockBack) == 0x000100, "Member 'FActionGraphSetting::KnockBack' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, KnockBack_TwoTap) == 0x000110, "Member 'FActionGraphSetting::KnockBack_TwoTap' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, KnockDown) == 0x000120, "Member 'FActionGraphSetting::KnockDown' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, FlyingKO) == 0x000130, "Member 'FActionGraphSetting::FlyingKO' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Vault) == 0x000140, "Member 'FActionGraphSetting::Vault' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, StepUp) == 0x000150, "Member 'FActionGraphSetting::StepUp' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Occupy) == 0x000160, "Member 'FActionGraphSetting::Occupy' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, StandUp) == 0x000170, "Member 'FActionGraphSetting::StandUp' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, KnockBack_Unavoidable) == 0x000180, "Member 'FActionGraphSetting::KnockBack_Unavoidable' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, KnockDown_Unavoidable) == 0x000190, "Member 'FActionGraphSetting::KnockDown_Unavoidable' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Escape) == 0x0001A0, "Member 'FActionGraphSetting::Escape' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Revive) == 0x0001B0, "Member 'FActionGraphSetting::Revive' has a wrong offset!");
static_assert(offsetof(FActionGraphSetting, Hacking) == 0x0001C0, "Member 'FActionGraphSetting::Hacking' has a wrong offset!");

// ScriptStruct Stigma.Config_LobbyChara
// 0x0030 (0x0030 - 0x0000)
struct FConfig_LobbyChara final
{
public:
	struct FRotator                               CameraRotator;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_LobbyChara) == 0x000008, "Wrong alignment on FConfig_LobbyChara");
static_assert(sizeof(FConfig_LobbyChara) == 0x000030, "Wrong size on FConfig_LobbyChara");
static_assert(offsetof(FConfig_LobbyChara, CameraRotator) == 0x000000, "Member 'FConfig_LobbyChara::CameraRotator' has a wrong offset!");
static_assert(offsetof(FConfig_LobbyChara, TargetOffset) == 0x000018, "Member 'FConfig_LobbyChara::TargetOffset' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_PassiveSkill
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_PassiveSkill final : public FItemID
{
};
static_assert(alignof(FItemIDRef_PassiveSkill) == 0x000008, "Wrong alignment on FItemIDRef_PassiveSkill");
static_assert(sizeof(FItemIDRef_PassiveSkill) == 0x000010, "Wrong size on FItemIDRef_PassiveSkill");

// ScriptStruct Stigma.CharacterDefault
// 0x0030 (0x0030 - 0x0000)
struct FCharacterDefault final
{
public:
	struct FItemIDRef_Skin_Body                   BodyID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Head                   HeadID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_PassiveSkill>        PassiveSkillID;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterDefault) == 0x000008, "Wrong alignment on FCharacterDefault");
static_assert(sizeof(FCharacterDefault) == 0x000030, "Wrong size on FCharacterDefault");
static_assert(offsetof(FCharacterDefault, BodyID) == 0x000000, "Member 'FCharacterDefault::BodyID' has a wrong offset!");
static_assert(offsetof(FCharacterDefault, HeadID) == 0x000010, "Member 'FCharacterDefault::HeadID' has a wrong offset!");
static_assert(offsetof(FCharacterDefault, PassiveSkillID) == 0x000020, "Member 'FCharacterDefault::PassiveSkillID' has a wrong offset!");

// ScriptStruct Stigma.CharacterDefine
// 0x08B0 (0x09E0 - 0x0130)
struct FCharacterDefine final : public FItemEntry
{
public:
	EOrganization                                 Organization;                                      // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFightingStyle                                FightingStyle;                                     // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D17[0x6];                                     // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0138(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstanceType;                                  // 0x0160(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UI_AnimInstanceType;                               // 0x0188(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObtainGuide                           ObtainGuide;                                       // 0x01B0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_Body                           Body;                                              // 0x01E0(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_Locomotion                     Speed;                                             // 0x0200(0x0130)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaFireSystem                FireSys;                                           // 0x0330(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaDamage                    Damage;                                            // 0x0348(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_TwoTap                         TwoTap;                                            // 0x0388(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D18[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FConfig_Abnormal                       Abnormal;                                          // 0x0390(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRecoveryInfo                          BulletBodyRecovery;                                // 0x03B8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRecoveryInfo                          BulletHeadRecovery;                                // 0x03C8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_CharaSound                     Sound;                                             // 0x03D8(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_CharaFX                        FX;                                                // 0x0478(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_Camera                         Camera;                                            // 0x04C8(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_Facial                         Facial;                                            // 0x0588(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_UIForChara                     UI;                                                // 0x05D8(0x0130)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FActionGraphSetting                    ActionGraph;                                       // 0x0708(0x01D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_LobbyChara                     LobbyChara;                                        // 0x08D8(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterDefault                      Default;                                           // 0x0908(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<EGunType>                              RecommendedGun;                                    // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ECharaType>                            FriendlyCharacters;                                // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ECharaType>                            HostileCharacters;                                 // 0x0958(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FConfig_AISetting                      AISetting;                                         // 0x0968(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableLeftHandIK;                                  // 0x0974(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D19[0x3];                                     // 0x0975(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UHUD_ScopeWidgetBase>       ScopeWidgetClass;                                  // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Filter_Icon;                                       // 0x0980(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FullBody_Icon;                                     // 0x09A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        _LoadedAssets;                                     // 0x09D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCharacterDefine) == 0x000008, "Wrong alignment on FCharacterDefine");
static_assert(sizeof(FCharacterDefine) == 0x0009E0, "Wrong size on FCharacterDefine");
static_assert(offsetof(FCharacterDefine, Organization) == 0x000130, "Member 'FCharacterDefine::Organization' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, FightingStyle) == 0x000131, "Member 'FCharacterDefine::FightingStyle' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Class) == 0x000138, "Member 'FCharacterDefine::Class' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, AnimInstanceType) == 0x000160, "Member 'FCharacterDefine::AnimInstanceType' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, UI_AnimInstanceType) == 0x000188, "Member 'FCharacterDefine::UI_AnimInstanceType' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, ObtainGuide) == 0x0001B0, "Member 'FCharacterDefine::ObtainGuide' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Body) == 0x0001E0, "Member 'FCharacterDefine::Body' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Speed) == 0x000200, "Member 'FCharacterDefine::Speed' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, FireSys) == 0x000330, "Member 'FCharacterDefine::FireSys' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Damage) == 0x000348, "Member 'FCharacterDefine::Damage' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, TwoTap) == 0x000388, "Member 'FCharacterDefine::TwoTap' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Abnormal) == 0x000390, "Member 'FCharacterDefine::Abnormal' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, BulletBodyRecovery) == 0x0003B8, "Member 'FCharacterDefine::BulletBodyRecovery' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, BulletHeadRecovery) == 0x0003C8, "Member 'FCharacterDefine::BulletHeadRecovery' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Sound) == 0x0003D8, "Member 'FCharacterDefine::Sound' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, FX) == 0x000478, "Member 'FCharacterDefine::FX' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Camera) == 0x0004C8, "Member 'FCharacterDefine::Camera' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Facial) == 0x000588, "Member 'FCharacterDefine::Facial' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, UI) == 0x0005D8, "Member 'FCharacterDefine::UI' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, ActionGraph) == 0x000708, "Member 'FCharacterDefine::ActionGraph' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, LobbyChara) == 0x0008D8, "Member 'FCharacterDefine::LobbyChara' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Default) == 0x000908, "Member 'FCharacterDefine::Default' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, RecommendedGun) == 0x000938, "Member 'FCharacterDefine::RecommendedGun' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, FriendlyCharacters) == 0x000948, "Member 'FCharacterDefine::FriendlyCharacters' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, HostileCharacters) == 0x000958, "Member 'FCharacterDefine::HostileCharacters' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, AISetting) == 0x000968, "Member 'FCharacterDefine::AISetting' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, EnableLeftHandIK) == 0x000974, "Member 'FCharacterDefine::EnableLeftHandIK' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, ScopeWidgetClass) == 0x000978, "Member 'FCharacterDefine::ScopeWidgetClass' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, Filter_Icon) == 0x000980, "Member 'FCharacterDefine::Filter_Icon' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, FullBody_Icon) == 0x0009A8, "Member 'FCharacterDefine::FullBody_Icon' has a wrong offset!");
static_assert(offsetof(FCharacterDefine, _LoadedAssets) == 0x0009D0, "Member 'FCharacterDefine::_LoadedAssets' has a wrong offset!");

// ScriptStruct Stigma.CastedEvent
// 0x0040 (0x0040 - 0x0000)
struct FCastedEvent final
{
public:
	class UObject*                                Subject;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                With;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Vector;                                            // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HappenCount;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1B[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCastedEvent) == 0x000008, "Wrong alignment on FCastedEvent");
static_assert(sizeof(FCastedEvent) == 0x000040, "Wrong size on FCastedEvent");
static_assert(offsetof(FCastedEvent, Subject) == 0x000000, "Member 'FCastedEvent::Subject' has a wrong offset!");
static_assert(offsetof(FCastedEvent, Target) == 0x000008, "Member 'FCastedEvent::Target' has a wrong offset!");
static_assert(offsetof(FCastedEvent, With) == 0x000010, "Member 'FCastedEvent::With' has a wrong offset!");
static_assert(offsetof(FCastedEvent, IntValue) == 0x000018, "Member 'FCastedEvent::IntValue' has a wrong offset!");
static_assert(offsetof(FCastedEvent, Vector) == 0x000020, "Member 'FCastedEvent::Vector' has a wrong offset!");
static_assert(offsetof(FCastedEvent, HappenCount) == 0x000038, "Member 'FCastedEvent::HappenCount' has a wrong offset!");

// ScriptStruct Stigma.GunGraphValues
// 0x001C (0x001C - 0x0000)
struct FGunGraphValues final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accuracy;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadSpeed;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelay;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagazineCount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletCount;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunGraphValues) == 0x000004, "Wrong alignment on FGunGraphValues");
static_assert(sizeof(FGunGraphValues) == 0x00001C, "Wrong size on FGunGraphValues");
static_assert(offsetof(FGunGraphValues, Damage) == 0x000000, "Member 'FGunGraphValues::Damage' has a wrong offset!");
static_assert(offsetof(FGunGraphValues, Accuracy) == 0x000004, "Member 'FGunGraphValues::Accuracy' has a wrong offset!");
static_assert(offsetof(FGunGraphValues, ReloadSpeed) == 0x000008, "Member 'FGunGraphValues::ReloadSpeed' has a wrong offset!");
static_assert(offsetof(FGunGraphValues, FireDelay) == 0x00000C, "Member 'FGunGraphValues::FireDelay' has a wrong offset!");
static_assert(offsetof(FGunGraphValues, Recoil) == 0x000010, "Member 'FGunGraphValues::Recoil' has a wrong offset!");
static_assert(offsetof(FGunGraphValues, MagazineCount) == 0x000014, "Member 'FGunGraphValues::MagazineCount' has a wrong offset!");
static_assert(offsetof(FGunGraphValues, BulletCount) == 0x000018, "Member 'FGunGraphValues::BulletCount' has a wrong offset!");

// ScriptStruct Stigma.ACK_EventPageReward
// 0x0020 (0x0020 - 0x0000)
struct FACK_EventPageReward final
{
public:
	struct FRewardPlain                           RewardPlain;                                       // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_EventPageReward) == 0x000008, "Wrong alignment on FACK_EventPageReward");
static_assert(sizeof(FACK_EventPageReward) == 0x000020, "Wrong size on FACK_EventPageReward");
static_assert(offsetof(FACK_EventPageReward, RewardPlain) == 0x000000, "Member 'FACK_EventPageReward::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.ChatFilterEntry
// 0x0010 (0x0018 - 0x0008)
struct FChatFilterEntry final : public FTableRowBase
{
public:
	class FString                                 Word;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatFilterEntry) == 0x000008, "Wrong alignment on FChatFilterEntry");
static_assert(sizeof(FChatFilterEntry) == 0x000018, "Wrong size on FChatFilterEntry");
static_assert(offsetof(FChatFilterEntry, Word) == 0x000008, "Member 'FChatFilterEntry::Word' has a wrong offset!");

// ScriptStruct Stigma.IndicatorWidgetClass
// 0x0030 (0x0030 - 0x0000)
struct FIndicatorWidgetClass final
{
public:
	TSubclassOf<class UIndicatorBaseWidget>       Ping_Chara;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIndicatorBaseWidget>       Sender;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIndicatorBaseWidget>       Ping_Obj;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIndicatorBaseWidget>       CharaStats;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIndicatorBaseWidget>       Revive;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UIndicatorBaseWidget>       Scan;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIndicatorWidgetClass) == 0x000008, "Wrong alignment on FIndicatorWidgetClass");
static_assert(sizeof(FIndicatorWidgetClass) == 0x000030, "Wrong size on FIndicatorWidgetClass");
static_assert(offsetof(FIndicatorWidgetClass, Ping_Chara) == 0x000000, "Member 'FIndicatorWidgetClass::Ping_Chara' has a wrong offset!");
static_assert(offsetof(FIndicatorWidgetClass, Sender) == 0x000008, "Member 'FIndicatorWidgetClass::Sender' has a wrong offset!");
static_assert(offsetof(FIndicatorWidgetClass, Ping_Obj) == 0x000010, "Member 'FIndicatorWidgetClass::Ping_Obj' has a wrong offset!");
static_assert(offsetof(FIndicatorWidgetClass, CharaStats) == 0x000018, "Member 'FIndicatorWidgetClass::CharaStats' has a wrong offset!");
static_assert(offsetof(FIndicatorWidgetClass, Revive) == 0x000020, "Member 'FIndicatorWidgetClass::Revive' has a wrong offset!");
static_assert(offsetof(FIndicatorWidgetClass, Scan) == 0x000028, "Member 'FIndicatorWidgetClass::Scan' has a wrong offset!");

// ScriptStruct Stigma.Ack_CharacterResult
// 0x0018 (0x0018 - 0x0000)
struct FAck_CharacterResult final
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetCharacter>                  Characters;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAck_CharacterResult) == 0x000008, "Wrong alignment on FAck_CharacterResult");
static_assert(sizeof(FAck_CharacterResult) == 0x000018, "Wrong size on FAck_CharacterResult");
static_assert(offsetof(FAck_CharacterResult, UserID) == 0x000000, "Member 'FAck_CharacterResult::UserID' has a wrong offset!");
static_assert(offsetof(FAck_CharacterResult, Characters) == 0x000008, "Member 'FAck_CharacterResult::Characters' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Booster
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Booster final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Booster) == 0x000008, "Wrong alignment on FItemIDRef_Booster");
static_assert(sizeof(FItemIDRef_Booster) == 0x000010, "Wrong size on FItemIDRef_Booster");

// ScriptStruct Stigma.ItemIDRef_Function
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Function final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Function) == 0x000008, "Wrong alignment on FItemIDRef_Function");
static_assert(sizeof(FItemIDRef_Function) == 0x000010, "Wrong size on FItemIDRef_Function");

// ScriptStruct Stigma.Config_BasicPackage
// 0x0070 (0x0078 - 0x0008)
struct FConfig_BasicPackage final : public FTableRowBase
{
public:
	TArray<ECharaType>                            Characters;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EGunType>                              Guns;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRewardCurrency>                Currencies;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PSkillSlot_MinLevel;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 BoosterSlot_MinLevel;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Function>            ActiveFunctions;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Booster>             DefaultBoosterID;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_BasicPackage) == 0x000008, "Wrong alignment on FConfig_BasicPackage");
static_assert(sizeof(FConfig_BasicPackage) == 0x000078, "Wrong size on FConfig_BasicPackage");
static_assert(offsetof(FConfig_BasicPackage, Characters) == 0x000008, "Member 'FConfig_BasicPackage::Characters' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage, Guns) == 0x000018, "Member 'FConfig_BasicPackage::Guns' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage, Currencies) == 0x000028, "Member 'FConfig_BasicPackage::Currencies' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage, PSkillSlot_MinLevel) == 0x000038, "Member 'FConfig_BasicPackage::PSkillSlot_MinLevel' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage, BoosterSlot_MinLevel) == 0x000048, "Member 'FConfig_BasicPackage::BoosterSlot_MinLevel' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage, ActiveFunctions) == 0x000058, "Member 'FConfig_BasicPackage::ActiveFunctions' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage, DefaultBoosterID) == 0x000068, "Member 'FConfig_BasicPackage::DefaultBoosterID' has a wrong offset!");

// ScriptStruct Stigma.ACK_MissionChange
// 0x0020 (0x0020 - 0x0000)
struct FACK_MissionChange final
{
public:
	struct FItemID                                TAID;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_Mission                        MIID;                                              // 0x0010(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_MissionChange) == 0x000008, "Wrong alignment on FACK_MissionChange");
static_assert(sizeof(FACK_MissionChange) == 0x000020, "Wrong size on FACK_MissionChange");
static_assert(offsetof(FACK_MissionChange, TAID) == 0x000000, "Member 'FACK_MissionChange::TAID' has a wrong offset!");
static_assert(offsetof(FACK_MissionChange, MIID) == 0x000010, "Member 'FACK_MissionChange::MIID' has a wrong offset!");

// ScriptStruct Stigma.Stat_UsedBooster
// 0x0018 (0x0018 - 0x0000)
struct FStat_UsedBooster final
{
public:
	struct FItemID                                BoosterIDN;                                        // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1C[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FStat_UsedBooster) == 0x000008, "Wrong alignment on FStat_UsedBooster");
static_assert(sizeof(FStat_UsedBooster) == 0x000018, "Wrong size on FStat_UsedBooster");
static_assert(offsetof(FStat_UsedBooster, BoosterIDN) == 0x000000, "Member 'FStat_UsedBooster::BoosterIDN' has a wrong offset!");
static_assert(offsetof(FStat_UsedBooster, Count) == 0x000010, "Member 'FStat_UsedBooster::Count' has a wrong offset!");

// ScriptStruct Stigma.AISpawn_Condition
// 0x0008 (0x0008 - 0x0000)
struct FAISpawn_Condition final
{
public:
	ESpawnConditionalType                         SpawnConditionalType;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         LinkedArrayIndex;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAISpawn_Condition) == 0x000004, "Wrong alignment on FAISpawn_Condition");
static_assert(sizeof(FAISpawn_Condition) == 0x000008, "Wrong size on FAISpawn_Condition");
static_assert(offsetof(FAISpawn_Condition, SpawnConditionalType) == 0x000000, "Member 'FAISpawn_Condition::SpawnConditionalType' has a wrong offset!");
static_assert(offsetof(FAISpawn_Condition, LinkedArrayIndex) == 0x000004, "Member 'FAISpawn_Condition::LinkedArrayIndex' has a wrong offset!");

// ScriptStruct Stigma.AISpawn
// 0x0068 (0x0068 - 0x0000)
struct FAISpawn final
{
public:
	float                                         StartDelay;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopSectionDelay;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopSectionEnemyCount;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AI_Config_TableID;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AAISpawnVolume*>                 SpawnVolumes;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SpawnVolumeCount;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1E[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FAISpawn_Condition>             SpawnConditions;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsImmediatelySetTarget;                            // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         RemainCount;                                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainDelayTime;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D20[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class ACharaBase*>                     SpawnedCharas;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAISpawn) == 0x000008, "Wrong alignment on FAISpawn");
static_assert(sizeof(FAISpawn) == 0x000068, "Wrong size on FAISpawn");
static_assert(offsetof(FAISpawn, StartDelay) == 0x000000, "Member 'FAISpawn::StartDelay' has a wrong offset!");
static_assert(offsetof(FAISpawn, LoopCount) == 0x000004, "Member 'FAISpawn::LoopCount' has a wrong offset!");
static_assert(offsetof(FAISpawn, LoopSectionDelay) == 0x000008, "Member 'FAISpawn::LoopSectionDelay' has a wrong offset!");
static_assert(offsetof(FAISpawn, LoopSectionEnemyCount) == 0x00000C, "Member 'FAISpawn::LoopSectionEnemyCount' has a wrong offset!");
static_assert(offsetof(FAISpawn, AI_Config_TableID) == 0x000010, "Member 'FAISpawn::AI_Config_TableID' has a wrong offset!");
static_assert(offsetof(FAISpawn, SpawnVolumes) == 0x000020, "Member 'FAISpawn::SpawnVolumes' has a wrong offset!");
static_assert(offsetof(FAISpawn, SpawnVolumeCount) == 0x000030, "Member 'FAISpawn::SpawnVolumeCount' has a wrong offset!");
static_assert(offsetof(FAISpawn, SpawnConditions) == 0x000038, "Member 'FAISpawn::SpawnConditions' has a wrong offset!");
static_assert(offsetof(FAISpawn, IsImmediatelySetTarget) == 0x000048, "Member 'FAISpawn::IsImmediatelySetTarget' has a wrong offset!");
static_assert(offsetof(FAISpawn, RemainCount) == 0x00004C, "Member 'FAISpawn::RemainCount' has a wrong offset!");
static_assert(offsetof(FAISpawn, RemainDelayTime) == 0x000050, "Member 'FAISpawn::RemainDelayTime' has a wrong offset!");
static_assert(offsetof(FAISpawn, SpawnedCharas) == 0x000058, "Member 'FAISpawn::SpawnedCharas' has a wrong offset!");

// ScriptStruct Stigma.BattleFinish
// 0x0008 (0x0008 - 0x0000)
struct FBattleFinish final
{
public:
	EFinishReason                                 Reason;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D21[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleFinish) == 0x000004, "Wrong alignment on FBattleFinish");
static_assert(sizeof(FBattleFinish) == 0x000008, "Wrong size on FBattleFinish");
static_assert(offsetof(FBattleFinish, Reason) == 0x000000, "Member 'FBattleFinish::Reason' has a wrong offset!");
static_assert(offsetof(FBattleFinish, Delay) == 0x000004, "Member 'FBattleFinish::Delay' has a wrong offset!");

// ScriptStruct Stigma.RunningMatchState
// 0x0008 (0x0008 - 0x0000)
struct FRunningMatchState final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D22[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BattleCount;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRunningMatchState) == 0x000004, "Wrong alignment on FRunningMatchState");
static_assert(sizeof(FRunningMatchState) == 0x000008, "Wrong size on FRunningMatchState");
static_assert(offsetof(FRunningMatchState, GameMode) == 0x000000, "Member 'FRunningMatchState::GameMode' has a wrong offset!");
static_assert(offsetof(FRunningMatchState, BattleCount) == 0x000004, "Member 'FRunningMatchState::BattleCount' has a wrong offset!");

// ScriptStruct Stigma.NetRankingEntry
// 0x0080 (0x0080 - 0x0000)
struct FNetRankingEntry final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevRanking;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0010(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D23[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Score;                                             // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kill;                                              // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Death;                                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Win;                                               // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Draw;                                              // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lose;                                              // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                ProfileCardIDN;                                    // 0x0050(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                EmblemIDN;                                         // 0x0060(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0070(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetRankingEntry) == 0x000008, "Wrong alignment on FNetRankingEntry");
static_assert(sizeof(FNetRankingEntry) == 0x000080, "Wrong size on FNetRankingEntry");
static_assert(offsetof(FNetRankingEntry, UserIDN) == 0x000000, "Member 'FNetRankingEntry::UserIDN' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Ranking) == 0x000008, "Member 'FNetRankingEntry::Ranking' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, PrevRanking) == 0x00000C, "Member 'FNetRankingEntry::PrevRanking' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Nickname) == 0x000010, "Member 'FNetRankingEntry::Nickname' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Level) == 0x000028, "Member 'FNetRankingEntry::Level' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Tier) == 0x00002C, "Member 'FNetRankingEntry::Tier' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Score) == 0x000030, "Member 'FNetRankingEntry::Score' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Kill) == 0x000034, "Member 'FNetRankingEntry::Kill' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Death) == 0x000038, "Member 'FNetRankingEntry::Death' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Assist) == 0x00003C, "Member 'FNetRankingEntry::Assist' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Win) == 0x000040, "Member 'FNetRankingEntry::Win' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Draw) == 0x000044, "Member 'FNetRankingEntry::Draw' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, Lose) == 0x000048, "Member 'FNetRankingEntry::Lose' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, PlayTime) == 0x00004C, "Member 'FNetRankingEntry::PlayTime' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, ProfileCardIDN) == 0x000050, "Member 'FNetRankingEntry::ProfileCardIDN' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, EmblemIDN) == 0x000060, "Member 'FNetRankingEntry::EmblemIDN' has a wrong offset!");
static_assert(offsetof(FNetRankingEntry, NicknameFX) == 0x000070, "Member 'FNetRankingEntry::NicknameFX' has a wrong offset!");

// ScriptStruct Stigma.BoxReward
// 0x0018 (0x0018 - 0x0000)
struct FBoxReward final
{
public:
	struct FItemIDRef                             ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProvabilityPercent;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D24[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBoxReward) == 0x000008, "Wrong alignment on FBoxReward");
static_assert(sizeof(FBoxReward) == 0x000018, "Wrong size on FBoxReward");
static_assert(offsetof(FBoxReward, ItemID) == 0x000000, "Member 'FBoxReward::ItemID' has a wrong offset!");
static_assert(offsetof(FBoxReward, ProvabilityPercent) == 0x000010, "Member 'FBoxReward::ProvabilityPercent' has a wrong offset!");

// ScriptStruct Stigma.ACK_BuyGoods
// 0x0048 (0x0048 - 0x0000)
struct FACK_BuyGoods final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D25[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRewardPlain                           RewardPlain;                                       // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCurrencyPlain>                 Balance;                                           // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BuyGoods) == 0x000008, "Wrong alignment on FACK_BuyGoods");
static_assert(sizeof(FACK_BuyGoods) == 0x000048, "Wrong size on FACK_BuyGoods");
static_assert(offsetof(FACK_BuyGoods, ItemIDN) == 0x000000, "Member 'FACK_BuyGoods::ItemIDN' has a wrong offset!");
static_assert(offsetof(FACK_BuyGoods, Limit) == 0x000010, "Member 'FACK_BuyGoods::Limit' has a wrong offset!");
static_assert(offsetof(FACK_BuyGoods, RewardPlain) == 0x000018, "Member 'FACK_BuyGoods::RewardPlain' has a wrong offset!");
static_assert(offsetof(FACK_BuyGoods, Balance) == 0x000038, "Member 'FACK_BuyGoods::Balance' has a wrong offset!");

// ScriptStruct Stigma.UserConfig
// 0x0038 (0x0038 - 0x0000)
struct FUserConfig final
{
public:
	class FString                                 App;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoginNoticeFriend;                                 // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartyJoin;                                    // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D26[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 AllowFriendAsk;                                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllowPartyInvite;                                  // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserConfig) == 0x000008, "Wrong alignment on FUserConfig");
static_assert(sizeof(FUserConfig) == 0x000038, "Wrong size on FUserConfig");
static_assert(offsetof(FUserConfig, App) == 0x000000, "Member 'FUserConfig::App' has a wrong offset!");
static_assert(offsetof(FUserConfig, LoginNoticeFriend) == 0x000010, "Member 'FUserConfig::LoginNoticeFriend' has a wrong offset!");
static_assert(offsetof(FUserConfig, AllowPartyJoin) == 0x000011, "Member 'FUserConfig::AllowPartyJoin' has a wrong offset!");
static_assert(offsetof(FUserConfig, AllowFriendAsk) == 0x000018, "Member 'FUserConfig::AllowFriendAsk' has a wrong offset!");
static_assert(offsetof(FUserConfig, AllowPartyInvite) == 0x000028, "Member 'FUserConfig::AllowPartyInvite' has a wrong offset!");

// ScriptStruct Stigma.ACK_MissionBookmark
// 0x0001 (0x0001 - 0x0000)
struct FACK_MissionBookmark final
{
public:
	bool                                          BookMark;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_MissionBookmark) == 0x000001, "Wrong alignment on FACK_MissionBookmark");
static_assert(sizeof(FACK_MissionBookmark) == 0x000001, "Wrong size on FACK_MissionBookmark");
static_assert(offsetof(FACK_MissionBookmark, BookMark) == 0x000000, "Member 'FACK_MissionBookmark::BookMark' has a wrong offset!");

// ScriptStruct Stigma.UserBattleResult_UIValues
// 0x0028 (0x0028 - 0x0000)
struct FUserBattleResult_UIValues final
{
public:
	int32                                         Level_Prev;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level_Next;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLevelUp;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D27[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Exp_Final;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Obtain;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Max;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Min;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T_Prev;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T_Obtain;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T_Shortage;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserBattleResult_UIValues) == 0x000004, "Wrong alignment on FUserBattleResult_UIValues");
static_assert(sizeof(FUserBattleResult_UIValues) == 0x000028, "Wrong size on FUserBattleResult_UIValues");
static_assert(offsetof(FUserBattleResult_UIValues, Level_Prev) == 0x000000, "Member 'FUserBattleResult_UIValues::Level_Prev' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, Level_Next) == 0x000004, "Member 'FUserBattleResult_UIValues::Level_Next' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, IsLevelUp) == 0x000008, "Member 'FUserBattleResult_UIValues::IsLevelUp' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, Exp_Final) == 0x00000C, "Member 'FUserBattleResult_UIValues::Exp_Final' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, Exp_Obtain) == 0x000010, "Member 'FUserBattleResult_UIValues::Exp_Obtain' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, Exp_Max) == 0x000014, "Member 'FUserBattleResult_UIValues::Exp_Max' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, Exp_Min) == 0x000018, "Member 'FUserBattleResult_UIValues::Exp_Min' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, T_Prev) == 0x00001C, "Member 'FUserBattleResult_UIValues::T_Prev' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, T_Obtain) == 0x000020, "Member 'FUserBattleResult_UIValues::T_Obtain' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_UIValues, T_Shortage) == 0x000024, "Member 'FUserBattleResult_UIValues::T_Shortage' has a wrong offset!");

// ScriptStruct Stigma.BTScoreHistory
// 0x0018 (0x0018 - 0x0000)
struct FBTScoreHistory final
{
public:
	class UBTScore*                               Scorer;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BT;                                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D28[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBTScoreHistory) == 0x000008, "Wrong alignment on FBTScoreHistory");
static_assert(sizeof(FBTScoreHistory) == 0x000018, "Wrong size on FBTScoreHistory");
static_assert(offsetof(FBTScoreHistory, Scorer) == 0x000000, "Member 'FBTScoreHistory::Scorer' has a wrong offset!");
static_assert(offsetof(FBTScoreHistory, BT) == 0x000008, "Member 'FBTScoreHistory::BT' has a wrong offset!");

// ScriptStruct Stigma.CharaOutroAnimation
// 0x0020 (0x0020 - 0x0000)
struct FCharaOutroAnimation final
{
public:
	class UAnimSequenceBase*                      CutScene_Outro_P0;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      CutScene_Outro_P1;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      CutScene_Outro_P2;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      CutScene_Outro_Cam;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaOutroAnimation) == 0x000008, "Wrong alignment on FCharaOutroAnimation");
static_assert(sizeof(FCharaOutroAnimation) == 0x000020, "Wrong size on FCharaOutroAnimation");
static_assert(offsetof(FCharaOutroAnimation, CutScene_Outro_P0) == 0x000000, "Member 'FCharaOutroAnimation::CutScene_Outro_P0' has a wrong offset!");
static_assert(offsetof(FCharaOutroAnimation, CutScene_Outro_P1) == 0x000008, "Member 'FCharaOutroAnimation::CutScene_Outro_P1' has a wrong offset!");
static_assert(offsetof(FCharaOutroAnimation, CutScene_Outro_P2) == 0x000010, "Member 'FCharaOutroAnimation::CutScene_Outro_P2' has a wrong offset!");
static_assert(offsetof(FCharaOutroAnimation, CutScene_Outro_Cam) == 0x000018, "Member 'FCharaOutroAnimation::CutScene_Outro_Cam' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Magazine
// 0x0008 (0x01E8 - 0x01E0)
struct FGunEntry_Magazine final : public FGunEntry_Base
{
public:
	int32                                         MagazineCapacity;                                  // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D29[0x4];                                     // 0x01E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGunEntry_Magazine) == 0x000008, "Wrong alignment on FGunEntry_Magazine");
static_assert(sizeof(FGunEntry_Magazine) == 0x0001E8, "Wrong size on FGunEntry_Magazine");
static_assert(offsetof(FGunEntry_Magazine, MagazineCapacity) == 0x0001E0, "Member 'FGunEntry_Magazine::MagazineCapacity' has a wrong offset!");

// ScriptStruct Stigma.ACK_BattlePassActivate
// 0x0010 (0x0010 - 0x0000)
struct FACK_BattlePassActivate final
{
public:
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BattlePassActivate) == 0x000008, "Wrong alignment on FACK_BattlePassActivate");
static_assert(sizeof(FACK_BattlePassActivate) == 0x000010, "Wrong size on FACK_BattlePassActivate");
static_assert(offsetof(FACK_BattlePassActivate, PassIDN) == 0x000000, "Member 'FACK_BattlePassActivate::PassIDN' has a wrong offset!");

// ScriptStruct Stigma.BulletTipDefine
// 0x0090 (0x0098 - 0x0008)
struct FBulletTipDefine final : public FTableRowBase
{
public:
	EBulletTip                                    TipType;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletEffectScaleType                        EffectScaleType;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2A[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ArmorDamageShifting;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonArmorDamageRate;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwoTapIntervalInc;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescShort;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulletTipDefine) == 0x000008, "Wrong alignment on FBulletTipDefine");
static_assert(sizeof(FBulletTipDefine) == 0x000098, "Wrong size on FBulletTipDefine");
static_assert(offsetof(FBulletTipDefine, TipType) == 0x000008, "Member 'FBulletTipDefine::TipType' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, EffectScaleType) == 0x000009, "Member 'FBulletTipDefine::EffectScaleType' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, ArmorDamageShifting) == 0x00000C, "Member 'FBulletTipDefine::ArmorDamageShifting' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, NonArmorDamageRate) == 0x000010, "Member 'FBulletTipDefine::NonArmorDamageRate' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, TwoTapIntervalInc) == 0x000014, "Member 'FBulletTipDefine::TwoTapIntervalInc' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, DisplayName) == 0x000018, "Member 'FBulletTipDefine::DisplayName' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, Desc) == 0x000030, "Member 'FBulletTipDefine::Desc' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, DescShort) == 0x000048, "Member 'FBulletTipDefine::DescShort' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, Icon) == 0x000060, "Member 'FBulletTipDefine::Icon' has a wrong offset!");
static_assert(offsetof(FBulletTipDefine, Color) == 0x000088, "Member 'FBulletTipDefine::Color' has a wrong offset!");

// ScriptStruct Stigma.AGLog_Hit
// 0x0050 (0x0070 - 0x0020)
struct FAGLog_Hit : public FAGLog_Base
{
public:
	uint8                                         Pad_1D2B[0x50];                                    // 0x0020(0x0050)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_Hit) == 0x000008, "Wrong alignment on FAGLog_Hit");
static_assert(sizeof(FAGLog_Hit) == 0x000070, "Wrong size on FAGLog_Hit");

// ScriptStruct Stigma.PingData
// 0x0038 (0x0038 - 0x0000)
struct FPingData final
{
public:
	EBattlePingType                               PingType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             Sender;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChat;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2D[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FPingData) == 0x000008, "Wrong alignment on FPingData");
static_assert(sizeof(FPingData) == 0x000038, "Wrong size on FPingData");
static_assert(offsetof(FPingData, PingType) == 0x000000, "Member 'FPingData::PingType' has a wrong offset!");
static_assert(offsetof(FPingData, Sender) == 0x000008, "Member 'FPingData::Sender' has a wrong offset!");
static_assert(offsetof(FPingData, Target) == 0x000010, "Member 'FPingData::Target' has a wrong offset!");
static_assert(offsetof(FPingData, Position) == 0x000018, "Member 'FPingData::Position' has a wrong offset!");
static_assert(offsetof(FPingData, ShowChat) == 0x000030, "Member 'FPingData::ShowChat' has a wrong offset!");

// ScriptStruct Stigma.ModeAISetting
// 0x0030 (0x0030 - 0x0000)
struct FModeAISetting final
{
public:
	TSubclassOf<class AAICharaBase>               AIClass;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBehaviorTree>           DefaultBehaviorTree;                               // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeAISetting) == 0x000008, "Wrong alignment on FModeAISetting");
static_assert(sizeof(FModeAISetting) == 0x000030, "Wrong size on FModeAISetting");
static_assert(offsetof(FModeAISetting, AIClass) == 0x000000, "Member 'FModeAISetting::AIClass' has a wrong offset!");
static_assert(offsetof(FModeAISetting, DefaultBehaviorTree) == 0x000008, "Member 'FModeAISetting::DefaultBehaviorTree' has a wrong offset!");

// ScriptStruct Stigma.Config_Armor
// 0x0078 (0x01A8 - 0x0130)
struct FConfig_Armor final : public FItemEntry
{
public:
	EArmorType                                    ArmorType;                                         // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2E[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         MaxArmor;                                          // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor_Damage_rate;                                 // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2F[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<EGameMode, struct FArmor_RefillPrice>    ArmorPrices;                                       // 0x0140(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ShortName;                                         // 0x0190(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Armor) == 0x000008, "Wrong alignment on FConfig_Armor");
static_assert(sizeof(FConfig_Armor) == 0x0001A8, "Wrong size on FConfig_Armor");
static_assert(offsetof(FConfig_Armor, ArmorType) == 0x000130, "Member 'FConfig_Armor::ArmorType' has a wrong offset!");
static_assert(offsetof(FConfig_Armor, MaxArmor) == 0x000134, "Member 'FConfig_Armor::MaxArmor' has a wrong offset!");
static_assert(offsetof(FConfig_Armor, Armor_Damage_rate) == 0x000138, "Member 'FConfig_Armor::Armor_Damage_rate' has a wrong offset!");
static_assert(offsetof(FConfig_Armor, ArmorPrices) == 0x000140, "Member 'FConfig_Armor::ArmorPrices' has a wrong offset!");
static_assert(offsetof(FConfig_Armor, ShortName) == 0x000190, "Member 'FConfig_Armor::ShortName' has a wrong offset!");

// ScriptStruct Stigma.GlobalUISettings
// 0x0050 (0x0050 - 0x0000)
struct FGlobalUISettings final
{
public:
	TSubclassOf<class UPopupBase>                 _ESC_Menu;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPopup_EnterAccount>        _EnterAccountUIClass;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPopup_EnterNickname>       _EnterNicknameUIClass;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillStreakDuration;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatingHitTextDuration;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimapDiscoveryDuration;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                IndicatorSafeMargin;                               // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D30[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UPOPUP_ChangeMaster>        _ChangeMasterUIClass;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      LoadingScreenTextures;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalUISettings) == 0x000008, "Wrong alignment on FGlobalUISettings");
static_assert(sizeof(FGlobalUISettings) == 0x000050, "Wrong size on FGlobalUISettings");
static_assert(offsetof(FGlobalUISettings, _ESC_Menu) == 0x000000, "Member 'FGlobalUISettings::_ESC_Menu' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, _EnterAccountUIClass) == 0x000008, "Member 'FGlobalUISettings::_EnterAccountUIClass' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, _EnterNicknameUIClass) == 0x000010, "Member 'FGlobalUISettings::_EnterNicknameUIClass' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, KillStreakDuration) == 0x000018, "Member 'FGlobalUISettings::KillStreakDuration' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, FloatingHitTextDuration) == 0x00001C, "Member 'FGlobalUISettings::FloatingHitTextDuration' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, MinimapDiscoveryDuration) == 0x000020, "Member 'FGlobalUISettings::MinimapDiscoveryDuration' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, IndicatorSafeMargin) == 0x000024, "Member 'FGlobalUISettings::IndicatorSafeMargin' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, _ChangeMasterUIClass) == 0x000038, "Member 'FGlobalUISettings::_ChangeMasterUIClass' has a wrong offset!");
static_assert(offsetof(FGlobalUISettings, LoadingScreenTextures) == 0x000040, "Member 'FGlobalUISettings::LoadingScreenTextures' has a wrong offset!");

// ScriptStruct Stigma.TeamDef
// 0x0028 (0x0028 - 0x0000)
struct FTeamDef final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamColor;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamDef) == 0x000008, "Wrong alignment on FTeamDef");
static_assert(sizeof(FTeamDef) == 0x000028, "Wrong size on FTeamDef");
static_assert(offsetof(FTeamDef, DisplayName) == 0x000000, "Member 'FTeamDef::DisplayName' has a wrong offset!");
static_assert(offsetof(FTeamDef, TeamColor) == 0x000018, "Member 'FTeamDef::TeamColor' has a wrong offset!");

// ScriptStruct Stigma.Disarmed
// 0x0004 (0x0004 - 0x0000)
struct FDisarmed final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisarmed) == 0x000004, "Wrong alignment on FDisarmed");
static_assert(sizeof(FDisarmed) == 0x000004, "Wrong size on FDisarmed");
static_assert(offsetof(FDisarmed, Duration) == 0x000000, "Member 'FDisarmed::Duration' has a wrong offset!");

// ScriptStruct Stigma.TwoTap
// 0x000C (0x000C - 0x0000)
struct FTwoTap final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D31[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         LimitDistance;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockType                                    Penalty_Head;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockType                                    Penalty_Body;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockType                                    Penalty_Arm;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKnockType                                    Penalty_Leg;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTwoTap) == 0x000004, "Wrong alignment on FTwoTap");
static_assert(sizeof(FTwoTap) == 0x00000C, "Wrong size on FTwoTap");
static_assert(offsetof(FTwoTap, Enable) == 0x000000, "Member 'FTwoTap::Enable' has a wrong offset!");
static_assert(offsetof(FTwoTap, LimitDistance) == 0x000004, "Member 'FTwoTap::LimitDistance' has a wrong offset!");
static_assert(offsetof(FTwoTap, Penalty_Head) == 0x000008, "Member 'FTwoTap::Penalty_Head' has a wrong offset!");
static_assert(offsetof(FTwoTap, Penalty_Body) == 0x000009, "Member 'FTwoTap::Penalty_Body' has a wrong offset!");
static_assert(offsetof(FTwoTap, Penalty_Arm) == 0x00000A, "Member 'FTwoTap::Penalty_Arm' has a wrong offset!");
static_assert(offsetof(FTwoTap, Penalty_Leg) == 0x00000B, "Member 'FTwoTap::Penalty_Leg' has a wrong offset!");

// ScriptStruct Stigma.BoneBreak
// 0x000C (0x000C - 0x0000)
struct FBoneBreak final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationMin;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationRange;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneBreak) == 0x000004, "Wrong alignment on FBoneBreak");
static_assert(sizeof(FBoneBreak) == 0x00000C, "Wrong size on FBoneBreak");
static_assert(offsetof(FBoneBreak, Duration) == 0x000000, "Member 'FBoneBreak::Duration' has a wrong offset!");
static_assert(offsetof(FBoneBreak, DeviationMin) == 0x000004, "Member 'FBoneBreak::DeviationMin' has a wrong offset!");
static_assert(offsetof(FBoneBreak, DeviationRange) == 0x000008, "Member 'FBoneBreak::DeviationRange' has a wrong offset!");

// ScriptStruct Stigma.CameraSetting
// 0x0030 (0x0030 - 0x0000)
struct FCameraSetting final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV_Mesh;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMin;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMax;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           Shake_OnHit_Strong;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           Shake_OnHit_Weak;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           Shake_OnFire;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraSetting) == 0x000008, "Wrong alignment on FCameraSetting");
static_assert(sizeof(FCameraSetting) == 0x000030, "Wrong size on FCameraSetting");
static_assert(offsetof(FCameraSetting, FOV) == 0x000000, "Member 'FCameraSetting::FOV' has a wrong offset!");
static_assert(offsetof(FCameraSetting, FOV_Mesh) == 0x000004, "Member 'FCameraSetting::FOV_Mesh' has a wrong offset!");
static_assert(offsetof(FCameraSetting, TransitionDelay) == 0x000008, "Member 'FCameraSetting::TransitionDelay' has a wrong offset!");
static_assert(offsetof(FCameraSetting, ViewPitchMin) == 0x00000C, "Member 'FCameraSetting::ViewPitchMin' has a wrong offset!");
static_assert(offsetof(FCameraSetting, ViewPitchMax) == 0x000010, "Member 'FCameraSetting::ViewPitchMax' has a wrong offset!");
static_assert(offsetof(FCameraSetting, InterpSpeed) == 0x000014, "Member 'FCameraSetting::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraSetting, Shake_OnHit_Strong) == 0x000018, "Member 'FCameraSetting::Shake_OnHit_Strong' has a wrong offset!");
static_assert(offsetof(FCameraSetting, Shake_OnHit_Weak) == 0x000020, "Member 'FCameraSetting::Shake_OnHit_Weak' has a wrong offset!");
static_assert(offsetof(FCameraSetting, Shake_OnFire) == 0x000028, "Member 'FCameraSetting::Shake_OnFire' has a wrong offset!");

// ScriptStruct Stigma.AimToShot
// 0x0001 (0x0001 - 0x0000)
struct FAimToShot final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimToShot) == 0x000001, "Wrong alignment on FAimToShot");
static_assert(sizeof(FAimToShot) == 0x000001, "Wrong size on FAimToShot");
static_assert(offsetof(FAimToShot, Enable) == 0x000000, "Member 'FAimToShot::Enable' has a wrong offset!");

// ScriptStruct Stigma.PushBack
// 0x0018 (0x0018 - 0x0000)
struct FPushBack final
{
public:
	bool                                          EnablePushBack;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D32[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         LimitAngle;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushBackSpeed;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushBackSpeed_Action;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NS_PushBack;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPushBack) == 0x000008, "Wrong alignment on FPushBack");
static_assert(sizeof(FPushBack) == 0x000018, "Wrong size on FPushBack");
static_assert(offsetof(FPushBack, EnablePushBack) == 0x000000, "Member 'FPushBack::EnablePushBack' has a wrong offset!");
static_assert(offsetof(FPushBack, LimitAngle) == 0x000004, "Member 'FPushBack::LimitAngle' has a wrong offset!");
static_assert(offsetof(FPushBack, PushBackSpeed) == 0x000008, "Member 'FPushBack::PushBackSpeed' has a wrong offset!");
static_assert(offsetof(FPushBack, PushBackSpeed_Action) == 0x00000C, "Member 'FPushBack::PushBackSpeed_Action' has a wrong offset!");
static_assert(offsetof(FPushBack, NS_PushBack) == 0x000010, "Member 'FPushBack::NS_PushBack' has a wrong offset!");

// ScriptStruct Stigma.GlobalSound
// 0x0030 (0x0030 - 0x0000)
struct FGlobalSound final
{
public:
	bool                                          EnablePassBySound;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D33[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         PassBySound_Distance;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             PassBySound;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnLaserSightSound;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OnDotSightSound;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             EmptyAmmoSound_1PV;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             EmptyAmmoSound_3PV;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalSound) == 0x000008, "Wrong alignment on FGlobalSound");
static_assert(sizeof(FGlobalSound) == 0x000030, "Wrong size on FGlobalSound");
static_assert(offsetof(FGlobalSound, EnablePassBySound) == 0x000000, "Member 'FGlobalSound::EnablePassBySound' has a wrong offset!");
static_assert(offsetof(FGlobalSound, PassBySound_Distance) == 0x000004, "Member 'FGlobalSound::PassBySound_Distance' has a wrong offset!");
static_assert(offsetof(FGlobalSound, PassBySound) == 0x000008, "Member 'FGlobalSound::PassBySound' has a wrong offset!");
static_assert(offsetof(FGlobalSound, OnLaserSightSound) == 0x000010, "Member 'FGlobalSound::OnLaserSightSound' has a wrong offset!");
static_assert(offsetof(FGlobalSound, OnDotSightSound) == 0x000018, "Member 'FGlobalSound::OnDotSightSound' has a wrong offset!");
static_assert(offsetof(FGlobalSound, EmptyAmmoSound_1PV) == 0x000020, "Member 'FGlobalSound::EmptyAmmoSound_1PV' has a wrong offset!");
static_assert(offsetof(FGlobalSound, EmptyAmmoSound_3PV) == 0x000028, "Member 'FGlobalSound::EmptyAmmoSound_3PV' has a wrong offset!");

// ScriptStruct Stigma.SoundPitchModulateSection
// 0x0008 (0x0008 - 0x0000)
struct FSoundPitchModulateSection final
{
public:
	float                                         MinPercentage;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPitchModulateSection) == 0x000004, "Wrong alignment on FSoundPitchModulateSection");
static_assert(sizeof(FSoundPitchModulateSection) == 0x000008, "Wrong size on FSoundPitchModulateSection");
static_assert(offsetof(FSoundPitchModulateSection, MinPercentage) == 0x000000, "Member 'FSoundPitchModulateSection::MinPercentage' has a wrong offset!");
static_assert(offsetof(FSoundPitchModulateSection, Pitch) == 0x000004, "Member 'FSoundPitchModulateSection::Pitch' has a wrong offset!");

// ScriptStruct Stigma.SoundPitchModulate
// 0x0010 (0x0010 - 0x0000)
struct FSoundPitchModulate final
{
public:
	TArray<struct FSoundPitchModulateSection>     Sections;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPitchModulate) == 0x000008, "Wrong alignment on FSoundPitchModulate");
static_assert(sizeof(FSoundPitchModulate) == 0x000010, "Wrong size on FSoundPitchModulate");
static_assert(offsetof(FSoundPitchModulate, Sections) == 0x000000, "Member 'FSoundPitchModulate::Sections' has a wrong offset!");

// ScriptStruct Stigma.GlobalFX
// 0x0020 (0x0020 - 0x0000)
struct FGlobalFX final
{
public:
	class UNiagaraSystem*                         NS_GoldStigma;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalFX) == 0x000008, "Wrong alignment on FGlobalFX");
static_assert(sizeof(FGlobalFX) == 0x000020, "Wrong size on FGlobalFX");
static_assert(offsetof(FGlobalFX, NS_GoldStigma) == 0x000000, "Member 'FGlobalFX::NS_GoldStigma' has a wrong offset!");
static_assert(offsetof(FGlobalFX, Offset) == 0x000008, "Member 'FGlobalFX::Offset' has a wrong offset!");

// ScriptStruct Stigma.StunFX_Param
// 0x00A0 (0x00A0 - 0x0000)
struct FStunFX_Param final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D34[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UCurveFloat>             OffsetCurve;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             BrightnessCurve;                                   // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMaxBrightness;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamApplyPercentage;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundDefines                          Sound;                                             // 0x0060(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStunFX_Param) == 0x000008, "Wrong alignment on FStunFX_Param");
static_assert(sizeof(FStunFX_Param) == 0x0000A0, "Wrong size on FStunFX_Param");
static_assert(offsetof(FStunFX_Param, Duration) == 0x000000, "Member 'FStunFX_Param::Duration' has a wrong offset!");
static_assert(offsetof(FStunFX_Param, OffsetCurve) == 0x000008, "Member 'FStunFX_Param::OffsetCurve' has a wrong offset!");
static_assert(offsetof(FStunFX_Param, BrightnessCurve) == 0x000030, "Member 'FStunFX_Param::BrightnessCurve' has a wrong offset!");
static_assert(offsetof(FStunFX_Param, AutoExposureMaxBrightness) == 0x000058, "Member 'FStunFX_Param::AutoExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(FStunFX_Param, TeamApplyPercentage) == 0x00005C, "Member 'FStunFX_Param::TeamApplyPercentage' has a wrong offset!");
static_assert(offsetof(FStunFX_Param, Sound) == 0x000060, "Member 'FStunFX_Param::Sound' has a wrong offset!");

// ScriptStruct Stigma.GlobalPassiveSkill
// 0x0004 (0x0004 - 0x0000)
struct FGlobalPassiveSkill final
{
public:
	int32                                         MaxLevel;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalPassiveSkill) == 0x000004, "Wrong alignment on FGlobalPassiveSkill");
static_assert(sizeof(FGlobalPassiveSkill) == 0x000004, "Wrong size on FGlobalPassiveSkill");
static_assert(offsetof(FGlobalPassiveSkill, MaxLevel) == 0x000000, "Member 'FGlobalPassiveSkill::MaxLevel' has a wrong offset!");

// ScriptStruct Stigma.TutorialSetting
// 0x0078 (0x0078 - 0x0000)
struct FTutorialSetting final
{
public:
	bool                                          EnableTutorial;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D35[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UWIDGET_TutorialDialog>     TutorialDialogClass;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWIDGET_TutorialPointUI>    TutorialPointUIClass;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UTutorial>>          LobbyTutorials;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UTutorial>                  WelcomeScenario;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTutorial>                  MasterPickTutorial;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTutorial>                  PauseScenario;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTutorial>                  ResumeScenario;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTutorial>                  ClosingScenario;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFXSystemAsset>          WelcomeBuffFX;                                     // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialSetting) == 0x000008, "Wrong alignment on FTutorialSetting");
static_assert(sizeof(FTutorialSetting) == 0x000078, "Wrong size on FTutorialSetting");
static_assert(offsetof(FTutorialSetting, EnableTutorial) == 0x000000, "Member 'FTutorialSetting::EnableTutorial' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, TutorialDialogClass) == 0x000008, "Member 'FTutorialSetting::TutorialDialogClass' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, TutorialPointUIClass) == 0x000010, "Member 'FTutorialSetting::TutorialPointUIClass' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, LobbyTutorials) == 0x000018, "Member 'FTutorialSetting::LobbyTutorials' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, WelcomeScenario) == 0x000028, "Member 'FTutorialSetting::WelcomeScenario' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, MasterPickTutorial) == 0x000030, "Member 'FTutorialSetting::MasterPickTutorial' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, PauseScenario) == 0x000038, "Member 'FTutorialSetting::PauseScenario' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, ResumeScenario) == 0x000040, "Member 'FTutorialSetting::ResumeScenario' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, ClosingScenario) == 0x000048, "Member 'FTutorialSetting::ClosingScenario' has a wrong offset!");
static_assert(offsetof(FTutorialSetting, WelcomeBuffFX) == 0x000050, "Member 'FTutorialSetting::WelcomeBuffFX' has a wrong offset!");

// ScriptStruct Stigma.ControlPowerPenalty
// 0x0014 (0x0014 - 0x0000)
struct FControlPowerPenalty final
{
public:
	float                                         Deviation_Base_Scale;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deviation_PerShot_Scale;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Vert_Scale;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Recoil_Horz_Scale;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelay_Scale;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlPowerPenalty) == 0x000004, "Wrong alignment on FControlPowerPenalty");
static_assert(sizeof(FControlPowerPenalty) == 0x000014, "Wrong size on FControlPowerPenalty");
static_assert(offsetof(FControlPowerPenalty, Deviation_Base_Scale) == 0x000000, "Member 'FControlPowerPenalty::Deviation_Base_Scale' has a wrong offset!");
static_assert(offsetof(FControlPowerPenalty, Deviation_PerShot_Scale) == 0x000004, "Member 'FControlPowerPenalty::Deviation_PerShot_Scale' has a wrong offset!");
static_assert(offsetof(FControlPowerPenalty, Recoil_Vert_Scale) == 0x000008, "Member 'FControlPowerPenalty::Recoil_Vert_Scale' has a wrong offset!");
static_assert(offsetof(FControlPowerPenalty, Recoil_Horz_Scale) == 0x00000C, "Member 'FControlPowerPenalty::Recoil_Horz_Scale' has a wrong offset!");
static_assert(offsetof(FControlPowerPenalty, FireDelay_Scale) == 0x000010, "Member 'FControlPowerPenalty::FireDelay_Scale' has a wrong offset!");

// ScriptStruct Stigma.FakeLoadingSetting
// 0x0010 (0x0010 - 0x0000)
struct FFakeLoadingSetting final
{
public:
	TSubclassOf<class AActor>                     FakeActor_Character;                               // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     FakeActor_Gun;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFakeLoadingSetting) == 0x000008, "Wrong alignment on FFakeLoadingSetting");
static_assert(sizeof(FFakeLoadingSetting) == 0x000010, "Wrong size on FFakeLoadingSetting");
static_assert(offsetof(FFakeLoadingSetting, FakeActor_Character) == 0x000000, "Member 'FFakeLoadingSetting::FakeActor_Character' has a wrong offset!");
static_assert(offsetof(FFakeLoadingSetting, FakeActor_Gun) == 0x000008, "Member 'FFakeLoadingSetting::FakeActor_Gun' has a wrong offset!");

// ScriptStruct Stigma.NoInputKickOut
// 0x000C (0x000C - 0x0000)
struct FNoInputKickOut final
{
public:
	float                                         KickOutTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstWarnTime;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarnInterval;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNoInputKickOut) == 0x000004, "Wrong alignment on FNoInputKickOut");
static_assert(sizeof(FNoInputKickOut) == 0x00000C, "Wrong size on FNoInputKickOut");
static_assert(offsetof(FNoInputKickOut, KickOutTime) == 0x000000, "Member 'FNoInputKickOut::KickOutTime' has a wrong offset!");
static_assert(offsetof(FNoInputKickOut, FirstWarnTime) == 0x000004, "Member 'FNoInputKickOut::FirstWarnTime' has a wrong offset!");
static_assert(offsetof(FNoInputKickOut, WarnInterval) == 0x000008, "Member 'FNoInputKickOut::WarnInterval' has a wrong offset!");

// ScriptStruct Stigma.Config_Game
// 0x0558 (0x0560 - 0x0008)
struct FConfig_Game final : public FTableRowBase
{
public:
	float                                         PickupDistance;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingHeight;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupplyStoreDistance;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupplyStoreCooltimeSec;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetSyncModel                                 NetSyncModel;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScopeIdleShake                               ScopeIdleShakeType;                                // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D36[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class UCurveFloat*                            ControlPowerCurve;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ETeams, struct FTeamDef>                 TeamDefine;                                        // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           MyColor;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AllyColor;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyColor;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyColor_2;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PartyColor;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamColor;                                         // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   CrossHairColors;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   CrossHairOutlineColors;                            // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableCancelChainActionByHit;                      // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D37[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDisarmed                              Disarmed;                                          // 0x00FC(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTwoTap                                TwoTap;                                            // 0x0100(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneBreak                             BoneBreak;                                         // 0x010C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraSetting                         Camera;                                            // 0x0118(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAimToShot                             AimToShot;                                         // 0x0148(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D38[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FPushBack                              PushBack;                                          // 0x0150(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterial*                              InvincibilityMaterial;                             // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimAngle;                                      // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimDistance;                                   // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalUISettings                      UISettings;                                        // 0x0178(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGlobalSound                           Sound;                                             // 0x01C8(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSoundPitchModulate                    FIrePitchModulate;                                 // 0x01F8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UsingCancelFireSound;                              // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowReticleCrosshair_In3PV;                        // 0x0209(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D39[0x6];                                     // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGlobalFX                              GlobalFX;                                          // 0x0210(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGlobalPingSettings                    GlobalPing;                                        // 0x0230(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FIndicatorWidgetClass                  IndicatorWidgetClass;                              // 0x0250(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStunFX_Param                          HeadShotParams;                                    // 0x0280(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStunFX_Param                          FlashBangParams;                                   // 0x0320(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FGlobalPassiveSkill                    PassiveSkill;                                      // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3A[0x4];                                     // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FTutorialSetting                       TutorialSetting;                                   // 0x03C8(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FControlPowerPenalty                   ControlPowerPenalty;                               // 0x0440(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatingHitCoolTime                   FloatingHitCoolTime;                               // 0x0454(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FReviveSetting                         ReviveSetting;                                     // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FFakeLoadingSetting                    FakeLoadingSetting;                                // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EGunType                                      CommingSoonCharaGunType;                           // 0x0478(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3B[0x7];                                     // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UTexture2D>              CommingSoonCharacterIcon;                          // 0x0480(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<EOptionLanguage>                         AvailableVoiceLanguages;                           // 0x04A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class AVoiceSound2DActor>         Voice2DActorClass;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherChara3DVoiceVolume;                           // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitingRoomTimeIncreaseSec;                        // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_GameNotifyContainer>    GameNotifyContainerClass;                          // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGlobalAISetting                       AISetting;                                         // 0x0510(0x0044)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNoInputKickOut                        NoInputKickOut;                                    // 0x0554(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Game) == 0x000008, "Wrong alignment on FConfig_Game");
static_assert(sizeof(FConfig_Game) == 0x000560, "Wrong size on FConfig_Game");
static_assert(offsetof(FConfig_Game, PickupDistance) == 0x000008, "Member 'FConfig_Game::PickupDistance' has a wrong offset!");
static_assert(offsetof(FConfig_Game, LandingHeight) == 0x00000C, "Member 'FConfig_Game::LandingHeight' has a wrong offset!");
static_assert(offsetof(FConfig_Game, SupplyStoreDistance) == 0x000010, "Member 'FConfig_Game::SupplyStoreDistance' has a wrong offset!");
static_assert(offsetof(FConfig_Game, SupplyStoreCooltimeSec) == 0x000014, "Member 'FConfig_Game::SupplyStoreCooltimeSec' has a wrong offset!");
static_assert(offsetof(FConfig_Game, NetSyncModel) == 0x000018, "Member 'FConfig_Game::NetSyncModel' has a wrong offset!");
static_assert(offsetof(FConfig_Game, ScopeIdleShakeType) == 0x000019, "Member 'FConfig_Game::ScopeIdleShakeType' has a wrong offset!");
static_assert(offsetof(FConfig_Game, ControlPowerCurve) == 0x000020, "Member 'FConfig_Game::ControlPowerCurve' has a wrong offset!");
static_assert(offsetof(FConfig_Game, TeamDefine) == 0x000028, "Member 'FConfig_Game::TeamDefine' has a wrong offset!");
static_assert(offsetof(FConfig_Game, MyColor) == 0x000078, "Member 'FConfig_Game::MyColor' has a wrong offset!");
static_assert(offsetof(FConfig_Game, AllyColor) == 0x000088, "Member 'FConfig_Game::AllyColor' has a wrong offset!");
static_assert(offsetof(FConfig_Game, EnemyColor) == 0x000098, "Member 'FConfig_Game::EnemyColor' has a wrong offset!");
static_assert(offsetof(FConfig_Game, EnemyColor_2) == 0x0000A8, "Member 'FConfig_Game::EnemyColor_2' has a wrong offset!");
static_assert(offsetof(FConfig_Game, PartyColor) == 0x0000B8, "Member 'FConfig_Game::PartyColor' has a wrong offset!");
static_assert(offsetof(FConfig_Game, TeamColor) == 0x0000C8, "Member 'FConfig_Game::TeamColor' has a wrong offset!");
static_assert(offsetof(FConfig_Game, CrossHairColors) == 0x0000D8, "Member 'FConfig_Game::CrossHairColors' has a wrong offset!");
static_assert(offsetof(FConfig_Game, CrossHairOutlineColors) == 0x0000E8, "Member 'FConfig_Game::CrossHairOutlineColors' has a wrong offset!");
static_assert(offsetof(FConfig_Game, EnableCancelChainActionByHit) == 0x0000F8, "Member 'FConfig_Game::EnableCancelChainActionByHit' has a wrong offset!");
static_assert(offsetof(FConfig_Game, Disarmed) == 0x0000FC, "Member 'FConfig_Game::Disarmed' has a wrong offset!");
static_assert(offsetof(FConfig_Game, TwoTap) == 0x000100, "Member 'FConfig_Game::TwoTap' has a wrong offset!");
static_assert(offsetof(FConfig_Game, BoneBreak) == 0x00010C, "Member 'FConfig_Game::BoneBreak' has a wrong offset!");
static_assert(offsetof(FConfig_Game, Camera) == 0x000118, "Member 'FConfig_Game::Camera' has a wrong offset!");
static_assert(offsetof(FConfig_Game, AimToShot) == 0x000148, "Member 'FConfig_Game::AimToShot' has a wrong offset!");
static_assert(offsetof(FConfig_Game, PushBack) == 0x000150, "Member 'FConfig_Game::PushBack' has a wrong offset!");
static_assert(offsetof(FConfig_Game, InvincibilityMaterial) == 0x000168, "Member 'FConfig_Game::InvincibilityMaterial' has a wrong offset!");
static_assert(offsetof(FConfig_Game, AutoAimAngle) == 0x000170, "Member 'FConfig_Game::AutoAimAngle' has a wrong offset!");
static_assert(offsetof(FConfig_Game, AutoAimDistance) == 0x000174, "Member 'FConfig_Game::AutoAimDistance' has a wrong offset!");
static_assert(offsetof(FConfig_Game, UISettings) == 0x000178, "Member 'FConfig_Game::UISettings' has a wrong offset!");
static_assert(offsetof(FConfig_Game, Sound) == 0x0001C8, "Member 'FConfig_Game::Sound' has a wrong offset!");
static_assert(offsetof(FConfig_Game, FIrePitchModulate) == 0x0001F8, "Member 'FConfig_Game::FIrePitchModulate' has a wrong offset!");
static_assert(offsetof(FConfig_Game, UsingCancelFireSound) == 0x000208, "Member 'FConfig_Game::UsingCancelFireSound' has a wrong offset!");
static_assert(offsetof(FConfig_Game, ShowReticleCrosshair_In3PV) == 0x000209, "Member 'FConfig_Game::ShowReticleCrosshair_In3PV' has a wrong offset!");
static_assert(offsetof(FConfig_Game, GlobalFX) == 0x000210, "Member 'FConfig_Game::GlobalFX' has a wrong offset!");
static_assert(offsetof(FConfig_Game, GlobalPing) == 0x000230, "Member 'FConfig_Game::GlobalPing' has a wrong offset!");
static_assert(offsetof(FConfig_Game, IndicatorWidgetClass) == 0x000250, "Member 'FConfig_Game::IndicatorWidgetClass' has a wrong offset!");
static_assert(offsetof(FConfig_Game, HeadShotParams) == 0x000280, "Member 'FConfig_Game::HeadShotParams' has a wrong offset!");
static_assert(offsetof(FConfig_Game, FlashBangParams) == 0x000320, "Member 'FConfig_Game::FlashBangParams' has a wrong offset!");
static_assert(offsetof(FConfig_Game, PassiveSkill) == 0x0003C0, "Member 'FConfig_Game::PassiveSkill' has a wrong offset!");
static_assert(offsetof(FConfig_Game, TutorialSetting) == 0x0003C8, "Member 'FConfig_Game::TutorialSetting' has a wrong offset!");
static_assert(offsetof(FConfig_Game, ControlPowerPenalty) == 0x000440, "Member 'FConfig_Game::ControlPowerPenalty' has a wrong offset!");
static_assert(offsetof(FConfig_Game, FloatingHitCoolTime) == 0x000454, "Member 'FConfig_Game::FloatingHitCoolTime' has a wrong offset!");
static_assert(offsetof(FConfig_Game, ReviveSetting) == 0x000460, "Member 'FConfig_Game::ReviveSetting' has a wrong offset!");
static_assert(offsetof(FConfig_Game, FakeLoadingSetting) == 0x000468, "Member 'FConfig_Game::FakeLoadingSetting' has a wrong offset!");
static_assert(offsetof(FConfig_Game, CommingSoonCharaGunType) == 0x000478, "Member 'FConfig_Game::CommingSoonCharaGunType' has a wrong offset!");
static_assert(offsetof(FConfig_Game, CommingSoonCharacterIcon) == 0x000480, "Member 'FConfig_Game::CommingSoonCharacterIcon' has a wrong offset!");
static_assert(offsetof(FConfig_Game, AvailableVoiceLanguages) == 0x0004A8, "Member 'FConfig_Game::AvailableVoiceLanguages' has a wrong offset!");
static_assert(offsetof(FConfig_Game, Voice2DActorClass) == 0x0004F8, "Member 'FConfig_Game::Voice2DActorClass' has a wrong offset!");
static_assert(offsetof(FConfig_Game, OtherChara3DVoiceVolume) == 0x000500, "Member 'FConfig_Game::OtherChara3DVoiceVolume' has a wrong offset!");
static_assert(offsetof(FConfig_Game, WaitingRoomTimeIncreaseSec) == 0x000504, "Member 'FConfig_Game::WaitingRoomTimeIncreaseSec' has a wrong offset!");
static_assert(offsetof(FConfig_Game, GameNotifyContainerClass) == 0x000508, "Member 'FConfig_Game::GameNotifyContainerClass' has a wrong offset!");
static_assert(offsetof(FConfig_Game, AISetting) == 0x000510, "Member 'FConfig_Game::AISetting' has a wrong offset!");
static_assert(offsetof(FConfig_Game, NoInputKickOut) == 0x000554, "Member 'FConfig_Game::NoInputKickOut' has a wrong offset!");

// ScriptStruct Stigma.Request
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FRequest
{
};
#pragma pack(pop)
static_assert(alignof(FRequest) == 0x000001, "Wrong alignment on FRequest");
static_assert(sizeof(FRequest) == 0x000001, "Wrong size on FRequest");

// ScriptStruct Stigma.RequestUser
// 0x0008 (0x0008 - 0x0000)
struct FRequestUser : public FRequest
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequestUser) == 0x000008, "Wrong alignment on FRequestUser");
static_assert(sizeof(FRequestUser) == 0x000008, "Wrong size on FRequestUser");
static_assert(offsetof(FRequestUser, UserID) == 0x000000, "Member 'FRequestUser::UserID' has a wrong offset!");

// ScriptStruct Stigma.NetCompetitionBriefPlayer
// 0x0040 (0x0040 - 0x0000)
struct FNetCompetitionBriefPlayer final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserPlayingAt                                PlayingAt;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3C[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              EndAt;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              BreakEndAt;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankPoint;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetCompetitionBriefPlayer) == 0x000008, "Wrong alignment on FNetCompetitionBriefPlayer");
static_assert(sizeof(FNetCompetitionBriefPlayer) == 0x000040, "Wrong size on FNetCompetitionBriefPlayer");
static_assert(offsetof(FNetCompetitionBriefPlayer, UserIDN) == 0x000000, "Member 'FNetCompetitionBriefPlayer::UserIDN' has a wrong offset!");
static_assert(offsetof(FNetCompetitionBriefPlayer, Nickname) == 0x000008, "Member 'FNetCompetitionBriefPlayer::Nickname' has a wrong offset!");
static_assert(offsetof(FNetCompetitionBriefPlayer, PlayingAt) == 0x000020, "Member 'FNetCompetitionBriefPlayer::PlayingAt' has a wrong offset!");
static_assert(offsetof(FNetCompetitionBriefPlayer, EndAt) == 0x000028, "Member 'FNetCompetitionBriefPlayer::EndAt' has a wrong offset!");
static_assert(offsetof(FNetCompetitionBriefPlayer, BreakEndAt) == 0x000030, "Member 'FNetCompetitionBriefPlayer::BreakEndAt' has a wrong offset!");
static_assert(offsetof(FNetCompetitionBriefPlayer, Rank) == 0x000038, "Member 'FNetCompetitionBriefPlayer::Rank' has a wrong offset!");
static_assert(offsetof(FNetCompetitionBriefPlayer, RankPoint) == 0x00003C, "Member 'FNetCompetitionBriefPlayer::RankPoint' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Chara
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Chara final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Chara) == 0x000008, "Wrong alignment on FItemIDRef_Chara");
static_assert(sizeof(FItemIDRef_Chara) == 0x000010, "Wrong size on FItemIDRef_Chara");

// ScriptStruct Stigma.Stat_PartEntry
// 0x000C (0x000C - 0x0000)
struct FStat_PartEntry final
{
public:
	int32                                         Hit;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hitted;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TwoTap;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_PartEntry) == 0x000004, "Wrong alignment on FStat_PartEntry");
static_assert(sizeof(FStat_PartEntry) == 0x00000C, "Wrong size on FStat_PartEntry");
static_assert(offsetof(FStat_PartEntry, Hit) == 0x000000, "Member 'FStat_PartEntry::Hit' has a wrong offset!");
static_assert(offsetof(FStat_PartEntry, Hitted) == 0x000004, "Member 'FStat_PartEntry::Hitted' has a wrong offset!");
static_assert(offsetof(FStat_PartEntry, TwoTap) == 0x000008, "Member 'FStat_PartEntry::TwoTap' has a wrong offset!");

// ScriptStruct Stigma.Stat_WeaponEntry
// 0x0018 (0x0018 - 0x0000)
struct FStat_WeaponEntry final
{
public:
	int32                                         Atk;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hit;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cri;                                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kill;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorDamage;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_WeaponEntry) == 0x000004, "Wrong alignment on FStat_WeaponEntry");
static_assert(sizeof(FStat_WeaponEntry) == 0x000018, "Wrong size on FStat_WeaponEntry");
static_assert(offsetof(FStat_WeaponEntry, Atk) == 0x000000, "Member 'FStat_WeaponEntry::Atk' has a wrong offset!");
static_assert(offsetof(FStat_WeaponEntry, Hit) == 0x000004, "Member 'FStat_WeaponEntry::Hit' has a wrong offset!");
static_assert(offsetof(FStat_WeaponEntry, Cri) == 0x000008, "Member 'FStat_WeaponEntry::Cri' has a wrong offset!");
static_assert(offsetof(FStat_WeaponEntry, Kill) == 0x00000C, "Member 'FStat_WeaponEntry::Kill' has a wrong offset!");
static_assert(offsetof(FStat_WeaponEntry, Damage) == 0x000010, "Member 'FStat_WeaponEntry::Damage' has a wrong offset!");
static_assert(offsetof(FStat_WeaponEntry, ArmorDamage) == 0x000014, "Member 'FStat_WeaponEntry::ArmorDamage' has a wrong offset!");

// ScriptStruct Stigma.Stat_Character
// 0x0168 (0x0168 - 0x0000)
struct alignas(0x08) FStat_Character final
{
public:
	ECharaType                                    CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         PlayTimeSec;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorDamage;                                       // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kill;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Death;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadKill;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resurrect;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Resurrected;                                       // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Heal;                                              // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reload;                                            // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletCnt;                                         // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FastMove;                                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Climb;                                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Pistol;                                            // 0x003C(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Skill1;                                            // 0x0054(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Skill2;                                            // 0x006C(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Skill3;                                            // 0x0084(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Knife;                                             // 0x009C(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      SMG;                                               // 0x00B4(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Shotgun;                                           // 0x00CC(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_WeaponEntry                      Bomb;                                              // 0x00E4(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_PartEntry                        Leg;                                               // 0x00FC(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_PartEntry                        Arm;                                               // 0x0108(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_PartEntry                        Body;                                              // 0x0114(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_PartEntry                        Head;                                              // 0x0120(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_PartEntry                        Cri;                                               // 0x012C(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Slow;                                              // 0x0138(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Disarm;                                            // 0x013C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockBack;                                         // 0x0140(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockDown;                                         // 0x0144(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TwoTap;                                            // 0x0148(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stun;                                              // 0x014C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorBreak;                                        // 0x0150(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorBreaked;                                      // 0x0154(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3E[0x10];                                    // 0x0158(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FStat_Character) == 0x000008, "Wrong alignment on FStat_Character");
static_assert(sizeof(FStat_Character) == 0x000168, "Wrong size on FStat_Character");
static_assert(offsetof(FStat_Character, CharaType) == 0x000000, "Member 'FStat_Character::CharaType' has a wrong offset!");
static_assert(offsetof(FStat_Character, PlayTimeSec) == 0x000004, "Member 'FStat_Character::PlayTimeSec' has a wrong offset!");
static_assert(offsetof(FStat_Character, Damage) == 0x000008, "Member 'FStat_Character::Damage' has a wrong offset!");
static_assert(offsetof(FStat_Character, ArmorDamage) == 0x00000C, "Member 'FStat_Character::ArmorDamage' has a wrong offset!");
static_assert(offsetof(FStat_Character, Kill) == 0x000010, "Member 'FStat_Character::Kill' has a wrong offset!");
static_assert(offsetof(FStat_Character, Death) == 0x000014, "Member 'FStat_Character::Death' has a wrong offset!");
static_assert(offsetof(FStat_Character, Assist) == 0x000018, "Member 'FStat_Character::Assist' has a wrong offset!");
static_assert(offsetof(FStat_Character, HeadKill) == 0x00001C, "Member 'FStat_Character::HeadKill' has a wrong offset!");
static_assert(offsetof(FStat_Character, Resurrect) == 0x000020, "Member 'FStat_Character::Resurrect' has a wrong offset!");
static_assert(offsetof(FStat_Character, Resurrected) == 0x000024, "Member 'FStat_Character::Resurrected' has a wrong offset!");
static_assert(offsetof(FStat_Character, Heal) == 0x000028, "Member 'FStat_Character::Heal' has a wrong offset!");
static_assert(offsetof(FStat_Character, Reload) == 0x00002C, "Member 'FStat_Character::Reload' has a wrong offset!");
static_assert(offsetof(FStat_Character, BulletCnt) == 0x000030, "Member 'FStat_Character::BulletCnt' has a wrong offset!");
static_assert(offsetof(FStat_Character, FastMove) == 0x000034, "Member 'FStat_Character::FastMove' has a wrong offset!");
static_assert(offsetof(FStat_Character, Climb) == 0x000038, "Member 'FStat_Character::Climb' has a wrong offset!");
static_assert(offsetof(FStat_Character, Pistol) == 0x00003C, "Member 'FStat_Character::Pistol' has a wrong offset!");
static_assert(offsetof(FStat_Character, Skill1) == 0x000054, "Member 'FStat_Character::Skill1' has a wrong offset!");
static_assert(offsetof(FStat_Character, Skill2) == 0x00006C, "Member 'FStat_Character::Skill2' has a wrong offset!");
static_assert(offsetof(FStat_Character, Skill3) == 0x000084, "Member 'FStat_Character::Skill3' has a wrong offset!");
static_assert(offsetof(FStat_Character, Knife) == 0x00009C, "Member 'FStat_Character::Knife' has a wrong offset!");
static_assert(offsetof(FStat_Character, SMG) == 0x0000B4, "Member 'FStat_Character::SMG' has a wrong offset!");
static_assert(offsetof(FStat_Character, Shotgun) == 0x0000CC, "Member 'FStat_Character::Shotgun' has a wrong offset!");
static_assert(offsetof(FStat_Character, Bomb) == 0x0000E4, "Member 'FStat_Character::Bomb' has a wrong offset!");
static_assert(offsetof(FStat_Character, Leg) == 0x0000FC, "Member 'FStat_Character::Leg' has a wrong offset!");
static_assert(offsetof(FStat_Character, Arm) == 0x000108, "Member 'FStat_Character::Arm' has a wrong offset!");
static_assert(offsetof(FStat_Character, Body) == 0x000114, "Member 'FStat_Character::Body' has a wrong offset!");
static_assert(offsetof(FStat_Character, Head) == 0x000120, "Member 'FStat_Character::Head' has a wrong offset!");
static_assert(offsetof(FStat_Character, Cri) == 0x00012C, "Member 'FStat_Character::Cri' has a wrong offset!");
static_assert(offsetof(FStat_Character, Slow) == 0x000138, "Member 'FStat_Character::Slow' has a wrong offset!");
static_assert(offsetof(FStat_Character, Disarm) == 0x00013C, "Member 'FStat_Character::Disarm' has a wrong offset!");
static_assert(offsetof(FStat_Character, KnockBack) == 0x000140, "Member 'FStat_Character::KnockBack' has a wrong offset!");
static_assert(offsetof(FStat_Character, KnockDown) == 0x000144, "Member 'FStat_Character::KnockDown' has a wrong offset!");
static_assert(offsetof(FStat_Character, TwoTap) == 0x000148, "Member 'FStat_Character::TwoTap' has a wrong offset!");
static_assert(offsetof(FStat_Character, Stun) == 0x00014C, "Member 'FStat_Character::Stun' has a wrong offset!");
static_assert(offsetof(FStat_Character, ArmorBreak) == 0x000150, "Member 'FStat_Character::ArmorBreak' has a wrong offset!");
static_assert(offsetof(FStat_Character, ArmorBreaked) == 0x000154, "Member 'FStat_Character::ArmorBreaked' has a wrong offset!");

// ScriptStruct Stigma.Stat_KillStreak
// 0x0008 (0x0008 - 0x0000)
struct FStat_KillStreak final
{
public:
	EKillStreak                                   Streak;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Cnt;                                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_KillStreak) == 0x000004, "Wrong alignment on FStat_KillStreak");
static_assert(sizeof(FStat_KillStreak) == 0x000008, "Wrong size on FStat_KillStreak");
static_assert(offsetof(FStat_KillStreak, Streak) == 0x000000, "Member 'FStat_KillStreak::Streak' has a wrong offset!");
static_assert(offsetof(FStat_KillStreak, Cnt) == 0x000004, "Member 'FStat_KillStreak::Cnt' has a wrong offset!");

// ScriptStruct Stigma.Stat_Device
// 0x0010 (0x0010 - 0x0000)
struct FStat_Device final
{
public:
	int32                                         FPS;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D40[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        Ping;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_Device) == 0x000008, "Wrong alignment on FStat_Device");
static_assert(sizeof(FStat_Device) == 0x000010, "Wrong size on FStat_Device");
static_assert(offsetof(FStat_Device, FPS) == 0x000000, "Member 'FStat_Device::FPS' has a wrong offset!");
static_assert(offsetof(FStat_Device, Ping) == 0x000008, "Member 'FStat_Device::Ping' has a wrong offset!");

// ScriptStruct Stigma.Stat_BattleEntry
// 0x0010 (0x0010 - 0x0000)
struct FStat_BattleEntry final
{
public:
	int32                                         AbilityUp;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorReplace;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickUpGoldBox;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickUpRootedGun;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_BattleEntry) == 0x000004, "Wrong alignment on FStat_BattleEntry");
static_assert(sizeof(FStat_BattleEntry) == 0x000010, "Wrong size on FStat_BattleEntry");
static_assert(offsetof(FStat_BattleEntry, AbilityUp) == 0x000000, "Member 'FStat_BattleEntry::AbilityUp' has a wrong offset!");
static_assert(offsetof(FStat_BattleEntry, ArmorReplace) == 0x000004, "Member 'FStat_BattleEntry::ArmorReplace' has a wrong offset!");
static_assert(offsetof(FStat_BattleEntry, PickUpGoldBox) == 0x000008, "Member 'FStat_BattleEntry::PickUpGoldBox' has a wrong offset!");
static_assert(offsetof(FStat_BattleEntry, PickUpRootedGun) == 0x00000C, "Member 'FStat_BattleEntry::PickUpRootedGun' has a wrong offset!");

// ScriptStruct Stigma.BattleResult_User
// 0x0128 (0x0128 - 0x0000)
struct FBattleResult_User final
{
public:
	int64                                         UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    CurrentCharaType;                                  // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D41[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FStat_Character>                StatChara;                                         // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         RoundTotal;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoundWin;                                          // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoundDraw;                                         // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D42[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Score;                                             // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ELO;                                               // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalELO;                                          // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankPoint;                                         // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpExtra;                                          // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpTeam;                                           // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpLearn;                                          // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpFunc;                                           // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassExp;                                           // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassFunc;                                          // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasterExp;                                         // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Diamond;                                           // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiamondExtra;                                      // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiamondTeam;                                       // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiamondFunc;                                       // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStat_Device                           StatDevice;                                        // 0x0080(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_BattleEntry                      StatBattle;                                        // 0x0090(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FStat_Gun>                      StatGun;                                           // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStat_UsedBooster>              StatUsedBooster;                                   // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStat_KillStreak>               StatKillStreak;                                    // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMission>                    Mission;                                           // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MVPScore;                                          // 0x00E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MVPTeam;                                           // 0x00E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MVP;                                               // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D43[0x7];                                     // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ProfileCard;                                       // 0x00F0(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                Emblem;                                            // 0x0100(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0110(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAI;                                              // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D44[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ActivityScore;                                     // 0x0124(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleResult_User) == 0x000008, "Wrong alignment on FBattleResult_User");
static_assert(sizeof(FBattleResult_User) == 0x000128, "Wrong size on FBattleResult_User");
static_assert(offsetof(FBattleResult_User, UserIDN) == 0x000000, "Member 'FBattleResult_User::UserIDN' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Nickname) == 0x000008, "Member 'FBattleResult_User::Nickname' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, CurrentCharaType) == 0x000020, "Member 'FBattleResult_User::CurrentCharaType' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, StatChara) == 0x000028, "Member 'FBattleResult_User::StatChara' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, RoundTotal) == 0x000038, "Member 'FBattleResult_User::RoundTotal' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, RoundWin) == 0x000039, "Member 'FBattleResult_User::RoundWin' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, RoundDraw) == 0x00003A, "Member 'FBattleResult_User::RoundDraw' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Score) == 0x00003C, "Member 'FBattleResult_User::Score' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ELO) == 0x000040, "Member 'FBattleResult_User::ELO' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, FinalELO) == 0x000044, "Member 'FBattleResult_User::FinalELO' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, RankPoint) == 0x000048, "Member 'FBattleResult_User::RankPoint' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Level) == 0x00004C, "Member 'FBattleResult_User::Level' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Exp) == 0x000050, "Member 'FBattleResult_User::Exp' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ExpExtra) == 0x000054, "Member 'FBattleResult_User::ExpExtra' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ExpTeam) == 0x000058, "Member 'FBattleResult_User::ExpTeam' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ExpLearn) == 0x00005C, "Member 'FBattleResult_User::ExpLearn' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ExpFunc) == 0x000060, "Member 'FBattleResult_User::ExpFunc' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, PassExp) == 0x000064, "Member 'FBattleResult_User::PassExp' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, PassFunc) == 0x000068, "Member 'FBattleResult_User::PassFunc' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, MasterExp) == 0x00006C, "Member 'FBattleResult_User::MasterExp' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Diamond) == 0x000070, "Member 'FBattleResult_User::Diamond' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, DiamondExtra) == 0x000074, "Member 'FBattleResult_User::DiamondExtra' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, DiamondTeam) == 0x000078, "Member 'FBattleResult_User::DiamondTeam' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, DiamondFunc) == 0x00007C, "Member 'FBattleResult_User::DiamondFunc' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, StatDevice) == 0x000080, "Member 'FBattleResult_User::StatDevice' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, StatBattle) == 0x000090, "Member 'FBattleResult_User::StatBattle' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, StatGun) == 0x0000A0, "Member 'FBattleResult_User::StatGun' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, StatUsedBooster) == 0x0000B0, "Member 'FBattleResult_User::StatUsedBooster' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, StatKillStreak) == 0x0000C0, "Member 'FBattleResult_User::StatKillStreak' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Mission) == 0x0000D0, "Member 'FBattleResult_User::Mission' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, MVPScore) == 0x0000E0, "Member 'FBattleResult_User::MVPScore' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, MVPTeam) == 0x0000E4, "Member 'FBattleResult_User::MVPTeam' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, MVP) == 0x0000E8, "Member 'FBattleResult_User::MVP' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ProfileCard) == 0x0000F0, "Member 'FBattleResult_User::ProfileCard' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Emblem) == 0x000100, "Member 'FBattleResult_User::Emblem' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, NicknameFX) == 0x000110, "Member 'FBattleResult_User::NicknameFX' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, Tier) == 0x000120, "Member 'FBattleResult_User::Tier' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, IsAI) == 0x000121, "Member 'FBattleResult_User::IsAI' has a wrong offset!");
static_assert(offsetof(FBattleResult_User, ActivityScore) == 0x000124, "Member 'FBattleResult_User::ActivityScore' has a wrong offset!");

// ScriptStruct Stigma.ItemSetting
// 0x0018 (0x0018 - 0x0000)
struct FItemSetting final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNo;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D45[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FItemSetting) == 0x000008, "Wrong alignment on FItemSetting");
static_assert(sizeof(FItemSetting) == 0x000018, "Wrong size on FItemSetting");
static_assert(offsetof(FItemSetting, ItemIDN) == 0x000000, "Member 'FItemSetting::ItemIDN' has a wrong offset!");
static_assert(offsetof(FItemSetting, SlotNo) == 0x000010, "Member 'FItemSetting::SlotNo' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_CharacterSetting
// 0x0030 (0x0080 - 0x0050)
struct FMQREQ_CharacterSetting final : public FMQReqMsg
{
public:
	struct FUserID                                UserIDN;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    CharType;                                          // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D46[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGunPreset                             GunPreset;                                         // 0x0060(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemSetting>                   Settings;                                          // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_CharacterSetting) == 0x000008, "Wrong alignment on FMQREQ_CharacterSetting");
static_assert(sizeof(FMQREQ_CharacterSetting) == 0x000080, "Wrong size on FMQREQ_CharacterSetting");
static_assert(offsetof(FMQREQ_CharacterSetting, UserIDN) == 0x000050, "Member 'FMQREQ_CharacterSetting::UserIDN' has a wrong offset!");
static_assert(offsetof(FMQREQ_CharacterSetting, CharType) == 0x000058, "Member 'FMQREQ_CharacterSetting::CharType' has a wrong offset!");
static_assert(offsetof(FMQREQ_CharacterSetting, GunPreset) == 0x000060, "Member 'FMQREQ_CharacterSetting::GunPreset' has a wrong offset!");
static_assert(offsetof(FMQREQ_CharacterSetting, Settings) == 0x000070, "Member 'FMQREQ_CharacterSetting::Settings' has a wrong offset!");

// ScriptStruct Stigma.InterpFloat
// 0x000C (0x000C - 0x0000)
struct FInterpFloat final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D47[0x8];                                     // 0x0004(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FInterpFloat) == 0x000004, "Wrong alignment on FInterpFloat");
static_assert(sizeof(FInterpFloat) == 0x00000C, "Wrong size on FInterpFloat");
static_assert(offsetof(FInterpFloat, _value) == 0x000000, "Member 'FInterpFloat::_value' has a wrong offset!");

// ScriptStruct Stigma.ACK_FastStartCompetition
// 0x0001 (0x0001 - 0x0000)
struct FACK_FastStartCompetition final
{
public:
	bool                                          IsEnough;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_FastStartCompetition) == 0x000001, "Wrong alignment on FACK_FastStartCompetition");
static_assert(sizeof(FACK_FastStartCompetition) == 0x000001, "Wrong size on FACK_FastStartCompetition");
static_assert(offsetof(FACK_FastStartCompetition, IsEnough) == 0x000000, "Member 'FACK_FastStartCompetition::IsEnough' has a wrong offset!");

// ScriptStruct Stigma.OptionDropDownEntry
// 0x0020 (0x0020 - 0x0000)
struct FOptionDropDownEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionDropDownEntry) == 0x000008, "Wrong alignment on FOptionDropDownEntry");
static_assert(sizeof(FOptionDropDownEntry) == 0x000020, "Wrong size on FOptionDropDownEntry");
static_assert(offsetof(FOptionDropDownEntry, ID) == 0x000000, "Member 'FOptionDropDownEntry::ID' has a wrong offset!");
static_assert(offsetof(FOptionDropDownEntry, Text) == 0x000008, "Member 'FOptionDropDownEntry::Text' has a wrong offset!");

// ScriptStruct Stigma.PassPrice
// 0x0058 (0x0058 - 0x0000)
struct FPassPrice final
{
public:
	struct FItemIDRef_Currency                    CurrencyID;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelIncrement;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PreviewImage;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPassPrice) == 0x000008, "Wrong alignment on FPassPrice");
static_assert(sizeof(FPassPrice) == 0x000058, "Wrong size on FPassPrice");
static_assert(offsetof(FPassPrice, CurrencyID) == 0x000000, "Member 'FPassPrice::CurrencyID' has a wrong offset!");
static_assert(offsetof(FPassPrice, Cost) == 0x000010, "Member 'FPassPrice::Cost' has a wrong offset!");
static_assert(offsetof(FPassPrice, LevelIncrement) == 0x000014, "Member 'FPassPrice::LevelIncrement' has a wrong offset!");
static_assert(offsetof(FPassPrice, Desc) == 0x000018, "Member 'FPassPrice::Desc' has a wrong offset!");
static_assert(offsetof(FPassPrice, PreviewImage) == 0x000030, "Member 'FPassPrice::PreviewImage' has a wrong offset!");

// ScriptStruct Stigma.CustomGameSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct FCustomGameSlotIndex final
{
public:
	EJoinType                                     JoinType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        Team;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D48[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Index;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomGameSlotIndex) == 0x000004, "Wrong alignment on FCustomGameSlotIndex");
static_assert(sizeof(FCustomGameSlotIndex) == 0x000008, "Wrong size on FCustomGameSlotIndex");
static_assert(offsetof(FCustomGameSlotIndex, JoinType) == 0x000000, "Member 'FCustomGameSlotIndex::JoinType' has a wrong offset!");
static_assert(offsetof(FCustomGameSlotIndex, Team) == 0x000001, "Member 'FCustomGameSlotIndex::Team' has a wrong offset!");
static_assert(offsetof(FCustomGameSlotIndex, Index) == 0x000004, "Member 'FCustomGameSlotIndex::Index' has a wrong offset!");

// ScriptStruct Stigma.NetBoosterSlot
// 0x0018 (0x0018 - 0x0000)
struct FNetBoosterSlot final
{
public:
	struct FItemID_Booster                        ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNo;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D49[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FNetBoosterSlot) == 0x000008, "Wrong alignment on FNetBoosterSlot");
static_assert(sizeof(FNetBoosterSlot) == 0x000018, "Wrong size on FNetBoosterSlot");
static_assert(offsetof(FNetBoosterSlot, ItemIDN) == 0x000000, "Member 'FNetBoosterSlot::ItemIDN' has a wrong offset!");
static_assert(offsetof(FNetBoosterSlot, SlotNo) == 0x000010, "Member 'FNetBoosterSlot::SlotNo' has a wrong offset!");

// ScriptStruct Stigma.REQ_BoosterUpdate
// 0x0018 (0x0018 - 0x0000)
struct FREQ_BoosterUpdate final
{
public:
	struct FNetBoosterSlot                        Booster;                                           // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_BoosterUpdate) == 0x000008, "Wrong alignment on FREQ_BoosterUpdate");
static_assert(sizeof(FREQ_BoosterUpdate) == 0x000018, "Wrong size on FREQ_BoosterUpdate");
static_assert(offsetof(FREQ_BoosterUpdate, Booster) == 0x000000, "Member 'FREQ_BoosterUpdate::Booster' has a wrong offset!");

// ScriptStruct Stigma.PartyID
// 0x0008 (0x0008 - 0x0000)
struct FPartyID final
{
public:
	uint64                                        _id;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPartyID) == 0x000008, "Wrong alignment on FPartyID");
static_assert(sizeof(FPartyID) == 0x000008, "Wrong size on FPartyID");
static_assert(offsetof(FPartyID, _id) == 0x000000, "Member 'FPartyID::_id' has a wrong offset!");

// ScriptStruct Stigma.EventPageDayReward
// 0x0018 (0x0018 - 0x0000)
struct FEventPageDayReward final
{
public:
	int32                                         Day;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                Reward;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPageDayReward) == 0x000008, "Wrong alignment on FEventPageDayReward");
static_assert(sizeof(FEventPageDayReward) == 0x000018, "Wrong size on FEventPageDayReward");
static_assert(offsetof(FEventPageDayReward, Day) == 0x000000, "Member 'FEventPageDayReward::Day' has a wrong offset!");
static_assert(offsetof(FEventPageDayReward, Reward) == 0x000008, "Member 'FEventPageDayReward::Reward' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Gear
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gear final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gear) == 0x000008, "Wrong alignment on FItemIDRef_Gear");
static_assert(sizeof(FItemIDRef_Gear) == 0x000010, "Wrong size on FItemIDRef_Gear");

// ScriptStruct Stigma.PartsEntry_Head
// 0x0038 (0x01D8 - 0x01A0)
struct FPartsEntry_Head final : public FPartsEntry
{
public:
	TArray<struct FItemIDRef_Gear>                Gears;                                             // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OverridePortraitIcon;                              // 0x01B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartsEntry_Head) == 0x000008, "Wrong alignment on FPartsEntry_Head");
static_assert(sizeof(FPartsEntry_Head) == 0x0001D8, "Wrong size on FPartsEntry_Head");
static_assert(offsetof(FPartsEntry_Head, Gears) == 0x0001A0, "Member 'FPartsEntry_Head::Gears' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Head, OverridePortraitIcon) == 0x0001B0, "Member 'FPartsEntry_Head::OverridePortraitIcon' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Mission
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Mission final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Mission) == 0x000008, "Wrong alignment on FItemIDRef_Mission");
static_assert(sizeof(FItemIDRef_Mission) == 0x000010, "Wrong size on FItemIDRef_Mission");

// ScriptStruct Stigma.BattlePassMissionConfig
// 0x0010 (0x0018 - 0x0008)
struct FBattlePassMissionConfig final : public FTableRowBase
{
public:
	TArray<struct FItemIDRef_Mission>             Missions;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassMissionConfig) == 0x000008, "Wrong alignment on FBattlePassMissionConfig");
static_assert(sizeof(FBattlePassMissionConfig) == 0x000018, "Wrong size on FBattlePassMissionConfig");
static_assert(offsetof(FBattlePassMissionConfig, Missions) == 0x000008, "Member 'FBattlePassMissionConfig::Missions' has a wrong offset!");

// ScriptStruct Stigma.ActiveFunction
// 0x0028 (0x0028 - 0x0000)
struct FActiveFunction final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ActivedAt;                                         // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveFunction) == 0x000008, "Wrong alignment on FActiveFunction");
static_assert(sizeof(FActiveFunction) == 0x000028, "Wrong size on FActiveFunction");
static_assert(offsetof(FActiveFunction, ItemIDN) == 0x000000, "Member 'FActiveFunction::ItemIDN' has a wrong offset!");
static_assert(offsetof(FActiveFunction, ActivedAt) == 0x000010, "Member 'FActiveFunction::ActivedAt' has a wrong offset!");
static_assert(offsetof(FActiveFunction, ExpireAt) == 0x000018, "Member 'FActiveFunction::ExpireAt' has a wrong offset!");
static_assert(offsetof(FActiveFunction, CreatedAt) == 0x000020, "Member 'FActiveFunction::CreatedAt' has a wrong offset!");

// ScriptStruct Stigma.ACK_BattlePassLevelBuy
// 0x0038 (0x0038 - 0x0000)
struct FACK_BattlePassLevelBuy final
{
public:
	struct FNetBattlePass                         Pass;                                              // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCurrencyPlain>                 Balance;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BattlePassLevelBuy) == 0x000008, "Wrong alignment on FACK_BattlePassLevelBuy");
static_assert(sizeof(FACK_BattlePassLevelBuy) == 0x000038, "Wrong size on FACK_BattlePassLevelBuy");
static_assert(offsetof(FACK_BattlePassLevelBuy, Pass) == 0x000000, "Member 'FACK_BattlePassLevelBuy::Pass' has a wrong offset!");
static_assert(offsetof(FACK_BattlePassLevelBuy, Balance) == 0x000028, "Member 'FACK_BattlePassLevelBuy::Balance' has a wrong offset!");

// ScriptStruct Stigma.ACK_ResetSkillPoint
// 0x0004 (0x0004 - 0x0000)
struct FACK_ResetSkillPoint final
{
public:
	int32                                         SkillPoint;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ResetSkillPoint) == 0x000004, "Wrong alignment on FACK_ResetSkillPoint");
static_assert(sizeof(FACK_ResetSkillPoint) == 0x000004, "Wrong size on FACK_ResetSkillPoint");
static_assert(offsetof(FACK_ResetSkillPoint, SkillPoint) == 0x000000, "Member 'FACK_ResetSkillPoint::SkillPoint' has a wrong offset!");

// ScriptStruct Stigma.Config_GroupCompetition
// 0x0038 (0x0040 - 0x0008)
struct FConfig_GroupCompetition final : public FTableRowBase
{
public:
	ECompetitionType                              CompetitionType;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinPlayer;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayer;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinLevel;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompetitionTime;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakTime;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakDiamondPerMin;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_GroupCompetition) == 0x000008, "Wrong alignment on FConfig_GroupCompetition");
static_assert(sizeof(FConfig_GroupCompetition) == 0x000040, "Wrong size on FConfig_GroupCompetition");
static_assert(offsetof(FConfig_GroupCompetition, CompetitionType) == 0x000008, "Member 'FConfig_GroupCompetition::CompetitionType' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, DisplayName) == 0x000010, "Member 'FConfig_GroupCompetition::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, MinPlayer) == 0x000028, "Member 'FConfig_GroupCompetition::MinPlayer' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, MaxPlayer) == 0x00002C, "Member 'FConfig_GroupCompetition::MaxPlayer' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, PlayerMinLevel) == 0x000030, "Member 'FConfig_GroupCompetition::PlayerMinLevel' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, CompetitionTime) == 0x000034, "Member 'FConfig_GroupCompetition::CompetitionTime' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, BreakTime) == 0x000038, "Member 'FConfig_GroupCompetition::BreakTime' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetition, BreakDiamondPerMin) == 0x00003C, "Member 'FConfig_GroupCompetition::BreakDiamondPerMin' has a wrong offset!");

// ScriptStruct Stigma.CameraLagParams
// 0x0010 (0x0010 - 0x0000)
struct FCameraLagParams final
{
public:
	bool                                          ChangeLagging;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLagging;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         LocationLaggingSpeed;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRotationLagging;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RotationLaggingSpeed;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraLagParams) == 0x000004, "Wrong alignment on FCameraLagParams");
static_assert(sizeof(FCameraLagParams) == 0x000010, "Wrong size on FCameraLagParams");
static_assert(offsetof(FCameraLagParams, ChangeLagging) == 0x000000, "Member 'FCameraLagParams::ChangeLagging' has a wrong offset!");
static_assert(offsetof(FCameraLagParams, EnableLagging) == 0x000001, "Member 'FCameraLagParams::EnableLagging' has a wrong offset!");
static_assert(offsetof(FCameraLagParams, LocationLaggingSpeed) == 0x000004, "Member 'FCameraLagParams::LocationLaggingSpeed' has a wrong offset!");
static_assert(offsetof(FCameraLagParams, EnableRotationLagging) == 0x000008, "Member 'FCameraLagParams::EnableRotationLagging' has a wrong offset!");
static_assert(offsetof(FCameraLagParams, RotationLaggingSpeed) == 0x00000C, "Member 'FCameraLagParams::RotationLaggingSpeed' has a wrong offset!");

// ScriptStruct Stigma.ReviverConfig
// 0x0030 (0x0030 - 0x0000)
struct FReviverConfig final
{
public:
	float                                         MoveSpeed;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachRange;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FollowRange;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                AttachRelativeLocation;                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultReviveTime;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4F[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FReviverConfig) == 0x000008, "Wrong alignment on FReviverConfig");
static_assert(sizeof(FReviverConfig) == 0x000030, "Wrong size on FReviverConfig");
static_assert(offsetof(FReviverConfig, MoveSpeed) == 0x000000, "Member 'FReviverConfig::MoveSpeed' has a wrong offset!");
static_assert(offsetof(FReviverConfig, AttachRange) == 0x000004, "Member 'FReviverConfig::AttachRange' has a wrong offset!");
static_assert(offsetof(FReviverConfig, FollowRange) == 0x000008, "Member 'FReviverConfig::FollowRange' has a wrong offset!");
static_assert(offsetof(FReviverConfig, AttachRelativeLocation) == 0x000010, "Member 'FReviverConfig::AttachRelativeLocation' has a wrong offset!");
static_assert(offsetof(FReviverConfig, DefaultReviveTime) == 0x000028, "Member 'FReviverConfig::DefaultReviveTime' has a wrong offset!");

// ScriptStruct Stigma.Concentration
// 0x0010 (0x0010 - 0x0000)
struct FConcentration final
{
public:
	struct FProficiency                           TensedDuration;                                    // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FProficiency                           LoosedDuration;                                    // 0x0008(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConcentration) == 0x000004, "Wrong alignment on FConcentration");
static_assert(sizeof(FConcentration) == 0x000010, "Wrong size on FConcentration");
static_assert(offsetof(FConcentration, TensedDuration) == 0x000000, "Member 'FConcentration::TensedDuration' has a wrong offset!");
static_assert(offsetof(FConcentration, LoosedDuration) == 0x000008, "Member 'FConcentration::LoosedDuration' has a wrong offset!");

// ScriptStruct Stigma.EventReceivers
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FEventReceivers final
{
public:
	uint8                                         Pad_1D50[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FEventReceivers) == 0x000008, "Wrong alignment on FEventReceivers");
static_assert(sizeof(FEventReceivers) == 0x000018, "Wrong size on FEventReceivers");

// ScriptStruct Stigma.FocusInterp_FitInRange_Setting
// 0x0014 (0x0014 - 0x0000)
struct FFocusInterp_FitInRange_Setting final
{
public:
	float                                         RangeDeg;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Decel;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accuracy;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocusInterp_FitInRange_Setting) == 0x000004, "Wrong alignment on FFocusInterp_FitInRange_Setting");
static_assert(sizeof(FFocusInterp_FitInRange_Setting) == 0x000014, "Wrong size on FFocusInterp_FitInRange_Setting");
static_assert(offsetof(FFocusInterp_FitInRange_Setting, RangeDeg) == 0x000000, "Member 'FFocusInterp_FitInRange_Setting::RangeDeg' has a wrong offset!");
static_assert(offsetof(FFocusInterp_FitInRange_Setting, Accel) == 0x000004, "Member 'FFocusInterp_FitInRange_Setting::Accel' has a wrong offset!");
static_assert(offsetof(FFocusInterp_FitInRange_Setting, Decel) == 0x000008, "Member 'FFocusInterp_FitInRange_Setting::Decel' has a wrong offset!");
static_assert(offsetof(FFocusInterp_FitInRange_Setting, Accuracy) == 0x00000C, "Member 'FFocusInterp_FitInRange_Setting::Accuracy' has a wrong offset!");
static_assert(offsetof(FFocusInterp_FitInRange_Setting, MaxSpeed) == 0x000010, "Member 'FFocusInterp_FitInRange_Setting::MaxSpeed' has a wrong offset!");

// ScriptStruct Stigma.FriendAskNotify
// 0x0040 (0x0040 - 0x0000)
struct FFriendAskNotify final
{
public:
	struct FUserID                                FromIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              FromNick;                                          // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              ToNick;                                            // 0x0028(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendAskNotify) == 0x000008, "Wrong alignment on FFriendAskNotify");
static_assert(sizeof(FFriendAskNotify) == 0x000040, "Wrong size on FFriendAskNotify");
static_assert(offsetof(FFriendAskNotify, FromIDN) == 0x000000, "Member 'FFriendAskNotify::FromIDN' has a wrong offset!");
static_assert(offsetof(FFriendAskNotify, FromNick) == 0x000008, "Member 'FFriendAskNotify::FromNick' has a wrong offset!");
static_assert(offsetof(FFriendAskNotify, ToIDN) == 0x000020, "Member 'FFriendAskNotify::ToIDN' has a wrong offset!");
static_assert(offsetof(FFriendAskNotify, ToNick) == 0x000028, "Member 'FFriendAskNotify::ToNick' has a wrong offset!");

// ScriptStruct Stigma.AI_PatternPair
// 0x0010 (0x0010 - 0x0000)
struct FAI_PatternPair final
{
public:
	class UBTScore*                               Scorer;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          Pattern;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAI_PatternPair) == 0x000008, "Wrong alignment on FAI_PatternPair");
static_assert(sizeof(FAI_PatternPair) == 0x000010, "Wrong size on FAI_PatternPair");
static_assert(offsetof(FAI_PatternPair, Scorer) == 0x000000, "Member 'FAI_PatternPair::Scorer' has a wrong offset!");
static_assert(offsetof(FAI_PatternPair, Pattern) == 0x000008, "Member 'FAI_PatternPair::Pattern' has a wrong offset!");

// ScriptStruct Stigma.AI_Patterns
// 0x0010 (0x0010 - 0x0000)
struct FAI_Patterns final
{
public:
	TArray<struct FAI_PatternPair>                Patterns;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAI_Patterns) == 0x000008, "Wrong alignment on FAI_Patterns");
static_assert(sizeof(FAI_Patterns) == 0x000010, "Wrong size on FAI_Patterns");
static_assert(offsetof(FAI_Patterns, Patterns) == 0x000000, "Member 'FAI_Patterns::Patterns' has a wrong offset!");

// ScriptStruct Stigma.ACK_ActivateFunction
// 0x0028 (0x0028 - 0x0000)
struct FACK_ActivateFunction final
{
public:
	struct FActiveFunction                        Function;                                          // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ActivateFunction) == 0x000008, "Wrong alignment on FACK_ActivateFunction");
static_assert(sizeof(FACK_ActivateFunction) == 0x000028, "Wrong size on FACK_ActivateFunction");
static_assert(offsetof(FACK_ActivateFunction, Function) == 0x000000, "Member 'FACK_ActivateFunction::Function' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Gun_Front
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Front final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Front) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Front");
static_assert(sizeof(FItemIDRef_Gun_Front) == 0x000010, "Wrong size on FItemIDRef_Gun_Front");

// ScriptStruct Stigma.ItemIDRef_Gun_Sight
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Sight final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Sight) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Sight");
static_assert(sizeof(FItemIDRef_Gun_Sight) == 0x000010, "Wrong size on FItemIDRef_Gun_Sight");

// ScriptStruct Stigma.ItemIDRef_Gun_Body
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Body final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Body) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Body");
static_assert(sizeof(FItemIDRef_Gun_Body) == 0x000010, "Wrong size on FItemIDRef_Gun_Body");

// ScriptStruct Stigma.ItemIDRef_Gun_Slide
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Slide final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Slide) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Slide");
static_assert(sizeof(FItemIDRef_Gun_Slide) == 0x000010, "Wrong size on FItemIDRef_Gun_Slide");

// ScriptStruct Stigma.ItemIDRef_Gun_Magazine
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Magazine final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Magazine) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Magazine");
static_assert(sizeof(FItemIDRef_Gun_Magazine) == 0x000010, "Wrong size on FItemIDRef_Gun_Magazine");

// ScriptStruct Stigma.GoodsID
// 0x0000 (0x0010 - 0x0010)
struct FGoodsID final : public FItemID
{
};
static_assert(alignof(FGoodsID) == 0x000008, "Wrong alignment on FGoodsID");
static_assert(sizeof(FGoodsID) == 0x000010, "Wrong size on FGoodsID");

// ScriptStruct Stigma.GunEntry_Main
// 0x0348 (0x0350 - 0x0008)
struct FGunEntry_Main final : public FTableRowBase
{
public:
	EItemGrade                                    Grade;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D51[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class AGunBase>                   ClassType;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              AnimInstType;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemStage                                    Stage;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanUseInTrainingRoom;                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D52[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescShort;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      GunType;                                           // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D53[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Gun_Body                    GunBodyID;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Gun_Slide                   GunSlideID;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Gun_Magazine                GunMagazineID;                                     // 0x00C0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Gun_Front                   GunFrontID;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Gun_Sight                   GunTopID;                                          // 0x00E0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Gun_Sight                   GunUnderID;                                        // 0x00F0(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachableSlide;                                   // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachableMagazine;                                // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachableFront;                                   // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachableSightTop;                                // 0x0103(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttachableSightUnder;                              // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D54[0x3];                                     // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDamageDef                             Damage;                                            // 0x0108(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGunCategory                                  GunCategory;                                       // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletType                                   BulletType;                                        // 0x011D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletEffectScaleType                        EffectScaleType;                                   // 0x011E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletTip                                    TipType;                                           // 0x011F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMagazine;                                       // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagazineCapacity;                                  // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProjectilePerBullet;                               // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletPerShot;                                     // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelay;                                         // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoFireCount;                                     // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoadedBulletPerLoad;                               // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             DamageCurve;                                       // 0x0140(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunAttribute_Common                   GunAttribute_Common;                               // 0x0168(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGunAttribute_FireSystem               GunAttribute_FireSystem;                           // 0x018C(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageDef                             ThrowDamage;                                       // 0x01D4(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FConfig_GunZoom                        Zoom;                                              // 0x01E8(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          FireFX_NS;                                         // 0x0210(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          FireFX_NS_3PV;                                     // 0x0238(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          EjectionFX_NS;                                     // 0x0260(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          BulletTrailFX_NS;                                  // 0x0288(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound_Fire;                                        // 0x02B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound_Fire_1PV;                                    // 0x02D8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Recoil_PatternCurve;                               // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Filter_Icon;                                       // 0x0308(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGoodsID>                       QuickPurchaseGoodsList;                            // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        _LoadedAssets;                                     // 0x0340(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGunEntry_Main) == 0x000008, "Wrong alignment on FGunEntry_Main");
static_assert(sizeof(FGunEntry_Main) == 0x000350, "Wrong size on FGunEntry_Main");
static_assert(offsetof(FGunEntry_Main, Grade) == 0x000008, "Member 'FGunEntry_Main::Grade' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, ClassType) == 0x000010, "Member 'FGunEntry_Main::ClassType' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AnimInstType) == 0x000018, "Member 'FGunEntry_Main::AnimInstType' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Stage) == 0x000020, "Member 'FGunEntry_Main::Stage' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, CanUseInTrainingRoom) == 0x000021, "Member 'FGunEntry_Main::CanUseInTrainingRoom' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, DisplayName) == 0x000028, "Member 'FGunEntry_Main::DisplayName' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Desc) == 0x000040, "Member 'FGunEntry_Main::Desc' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, DescShort) == 0x000058, "Member 'FGunEntry_Main::DescShort' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Icon) == 0x000070, "Member 'FGunEntry_Main::Icon' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunType) == 0x000098, "Member 'FGunEntry_Main::GunType' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunBodyID) == 0x0000A0, "Member 'FGunEntry_Main::GunBodyID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunSlideID) == 0x0000B0, "Member 'FGunEntry_Main::GunSlideID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunMagazineID) == 0x0000C0, "Member 'FGunEntry_Main::GunMagazineID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunFrontID) == 0x0000D0, "Member 'FGunEntry_Main::GunFrontID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunTopID) == 0x0000E0, "Member 'FGunEntry_Main::GunTopID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunUnderID) == 0x0000F0, "Member 'FGunEntry_Main::GunUnderID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AttachableSlide) == 0x000100, "Member 'FGunEntry_Main::AttachableSlide' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AttachableMagazine) == 0x000101, "Member 'FGunEntry_Main::AttachableMagazine' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AttachableFront) == 0x000102, "Member 'FGunEntry_Main::AttachableFront' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AttachableSightTop) == 0x000103, "Member 'FGunEntry_Main::AttachableSightTop' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AttachableSightUnder) == 0x000104, "Member 'FGunEntry_Main::AttachableSightUnder' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Damage) == 0x000108, "Member 'FGunEntry_Main::Damage' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunCategory) == 0x00011C, "Member 'FGunEntry_Main::GunCategory' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, BulletType) == 0x00011D, "Member 'FGunEntry_Main::BulletType' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, EffectScaleType) == 0x00011E, "Member 'FGunEntry_Main::EffectScaleType' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, TipType) == 0x00011F, "Member 'FGunEntry_Main::TipType' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, MaxMagazine) == 0x000120, "Member 'FGunEntry_Main::MaxMagazine' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, MagazineCapacity) == 0x000124, "Member 'FGunEntry_Main::MagazineCapacity' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, ProjectilePerBullet) == 0x000128, "Member 'FGunEntry_Main::ProjectilePerBullet' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, BulletPerShot) == 0x00012C, "Member 'FGunEntry_Main::BulletPerShot' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, FireDelay) == 0x000130, "Member 'FGunEntry_Main::FireDelay' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, AutoFireCount) == 0x000134, "Member 'FGunEntry_Main::AutoFireCount' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, LoadedBulletPerLoad) == 0x000138, "Member 'FGunEntry_Main::LoadedBulletPerLoad' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Range) == 0x00013C, "Member 'FGunEntry_Main::Range' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, DamageCurve) == 0x000140, "Member 'FGunEntry_Main::DamageCurve' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunAttribute_Common) == 0x000168, "Member 'FGunEntry_Main::GunAttribute_Common' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, GunAttribute_FireSystem) == 0x00018C, "Member 'FGunEntry_Main::GunAttribute_FireSystem' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, ThrowDamage) == 0x0001D4, "Member 'FGunEntry_Main::ThrowDamage' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Zoom) == 0x0001E8, "Member 'FGunEntry_Main::Zoom' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, FireFX_NS) == 0x000210, "Member 'FGunEntry_Main::FireFX_NS' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, FireFX_NS_3PV) == 0x000238, "Member 'FGunEntry_Main::FireFX_NS_3PV' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, EjectionFX_NS) == 0x000260, "Member 'FGunEntry_Main::EjectionFX_NS' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, BulletTrailFX_NS) == 0x000288, "Member 'FGunEntry_Main::BulletTrailFX_NS' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Sound_Fire) == 0x0002B0, "Member 'FGunEntry_Main::Sound_Fire' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Sound_Fire_1PV) == 0x0002D8, "Member 'FGunEntry_Main::Sound_Fire_1PV' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Recoil_PatternCurve) == 0x000300, "Member 'FGunEntry_Main::Recoil_PatternCurve' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, Filter_Icon) == 0x000308, "Member 'FGunEntry_Main::Filter_Icon' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, QuickPurchaseGoodsList) == 0x000330, "Member 'FGunEntry_Main::QuickPurchaseGoodsList' has a wrong offset!");
static_assert(offsetof(FGunEntry_Main, _LoadedAssets) == 0x000340, "Member 'FGunEntry_Main::_LoadedAssets' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_AccessoryBase
// 0x0000 (0x01E0 - 0x01E0)
struct FGunEntry_AccessoryBase : public FGunEntry_Base
{
};
static_assert(alignof(FGunEntry_AccessoryBase) == 0x000008, "Wrong alignment on FGunEntry_AccessoryBase");
static_assert(sizeof(FGunEntry_AccessoryBase) == 0x0001E0, "Wrong size on FGunEntry_AccessoryBase");

// ScriptStruct Stigma.ItemIDRef_Buff
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Buff final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Buff) == 0x000008, "Wrong alignment on FItemIDRef_Buff");
static_assert(sizeof(FItemIDRef_Buff) == 0x000010, "Wrong size on FItemIDRef_Buff");

// ScriptStruct Stigma.BattleStore_BuffStack
// 0x001C (0x0028 - 0x000C)
struct FBattleStore_BuffStack final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_1D55[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Buff                        BuffID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CurrentStep;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResetOnRespawn;                                  // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D56[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CurrentPrice;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleStore_BuffStack) == 0x000008, "Wrong alignment on FBattleStore_BuffStack");
static_assert(sizeof(FBattleStore_BuffStack) == 0x000028, "Wrong size on FBattleStore_BuffStack");
static_assert(offsetof(FBattleStore_BuffStack, BuffID) == 0x000010, "Member 'FBattleStore_BuffStack::BuffID' has a wrong offset!");
static_assert(offsetof(FBattleStore_BuffStack, CurrentStep) == 0x000020, "Member 'FBattleStore_BuffStack::CurrentStep' has a wrong offset!");
static_assert(offsetof(FBattleStore_BuffStack, IsResetOnRespawn) == 0x000021, "Member 'FBattleStore_BuffStack::IsResetOnRespawn' has a wrong offset!");
static_assert(offsetof(FBattleStore_BuffStack, CurrentPrice) == 0x000024, "Member 'FBattleStore_BuffStack::CurrentPrice' has a wrong offset!");

// ScriptStruct Stigma.ExpEntry
// 0x0018 (0x0020 - 0x0008)
struct FExpEntry final : public FTableRowBase
{
public:
	float                                         ExpBootMaxTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shooting;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeleeAttack;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_1;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill_2;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Overcome;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpEntry) == 0x000008, "Wrong alignment on FExpEntry");
static_assert(sizeof(FExpEntry) == 0x000020, "Wrong size on FExpEntry");
static_assert(offsetof(FExpEntry, ExpBootMaxTime) == 0x000008, "Member 'FExpEntry::ExpBootMaxTime' has a wrong offset!");
static_assert(offsetof(FExpEntry, Shooting) == 0x00000C, "Member 'FExpEntry::Shooting' has a wrong offset!");
static_assert(offsetof(FExpEntry, MeleeAttack) == 0x000010, "Member 'FExpEntry::MeleeAttack' has a wrong offset!");
static_assert(offsetof(FExpEntry, Skill_1) == 0x000014, "Member 'FExpEntry::Skill_1' has a wrong offset!");
static_assert(offsetof(FExpEntry, Skill_2) == 0x000018, "Member 'FExpEntry::Skill_2' has a wrong offset!");
static_assert(offsetof(FExpEntry, Overcome) == 0x00001C, "Member 'FExpEntry::Overcome' has a wrong offset!");

// ScriptStruct Stigma.KillStreak
// 0x0018 (0x0020 - 0x0008)
struct FKillStreak final : public FTableRowBase
{
public:
	EKillStreak                                   KillStreakType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D57[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             Killer;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Victim;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillStreak) == 0x000008, "Wrong alignment on FKillStreak");
static_assert(sizeof(FKillStreak) == 0x000020, "Wrong size on FKillStreak");
static_assert(offsetof(FKillStreak, KillStreakType) == 0x000008, "Member 'FKillStreak::KillStreakType' has a wrong offset!");
static_assert(offsetof(FKillStreak, Killer) == 0x000010, "Member 'FKillStreak::Killer' has a wrong offset!");
static_assert(offsetof(FKillStreak, Victim) == 0x000018, "Member 'FKillStreak::Victim' has a wrong offset!");

// ScriptStruct Stigma.TDMPhaseDefine
// 0x0040 (0x0040 - 0x0000)
struct FTDMPhaseDefine final
{
public:
	int32                                         ElapsedTimeSec;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D58[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   PhaseNoticeText;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AnnounceVoiceID;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpotlightScoreBoard;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDynamicScoreBoard;                             // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SouldPlayTurnTheTablesSound;                       // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetBarrierToWeakTeam;                              // 0x0033(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D59[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class USoundBase*                             AlertSound;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDMPhaseDefine) == 0x000008, "Wrong alignment on FTDMPhaseDefine");
static_assert(sizeof(FTDMPhaseDefine) == 0x000040, "Wrong size on FTDMPhaseDefine");
static_assert(offsetof(FTDMPhaseDefine, ElapsedTimeSec) == 0x000000, "Member 'FTDMPhaseDefine::ElapsedTimeSec' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, PhaseNoticeText) == 0x000008, "Member 'FTDMPhaseDefine::PhaseNoticeText' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, AnnounceVoiceID) == 0x000020, "Member 'FTDMPhaseDefine::AnnounceVoiceID' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, SpotlightScoreBoard) == 0x000030, "Member 'FTDMPhaseDefine::SpotlightScoreBoard' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, ShowDynamicScoreBoard) == 0x000031, "Member 'FTDMPhaseDefine::ShowDynamicScoreBoard' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, SouldPlayTurnTheTablesSound) == 0x000032, "Member 'FTDMPhaseDefine::SouldPlayTurnTheTablesSound' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, SetBarrierToWeakTeam) == 0x000033, "Member 'FTDMPhaseDefine::SetBarrierToWeakTeam' has a wrong offset!");
static_assert(offsetof(FTDMPhaseDefine, AlertSound) == 0x000038, "Member 'FTDMPhaseDefine::AlertSound' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_EventPage
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_EventPage final : public FItemID
{
};
static_assert(alignof(FItemIDRef_EventPage) == 0x000008, "Wrong alignment on FItemIDRef_EventPage");
static_assert(sizeof(FItemIDRef_EventPage) == 0x000010, "Wrong size on FItemIDRef_EventPage");

// ScriptStruct Stigma.EventAttendanceDefine
// 0x0030 (0x0038 - 0x0008)
struct FEventAttendanceDefine final : public FTableRowBase
{
public:
	struct FItemIDRef_EventPage                   EventPageID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventPageDayReward>            DayRewards;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FReward                                RepeatReward;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventAttendanceDefine) == 0x000008, "Wrong alignment on FEventAttendanceDefine");
static_assert(sizeof(FEventAttendanceDefine) == 0x000038, "Wrong size on FEventAttendanceDefine");
static_assert(offsetof(FEventAttendanceDefine, EventPageID) == 0x000008, "Member 'FEventAttendanceDefine::EventPageID' has a wrong offset!");
static_assert(offsetof(FEventAttendanceDefine, DayRewards) == 0x000018, "Member 'FEventAttendanceDefine::DayRewards' has a wrong offset!");
static_assert(offsetof(FEventAttendanceDefine, RepeatReward) == 0x000028, "Member 'FEventAttendanceDefine::RepeatReward' has a wrong offset!");

// ScriptStruct Stigma.BattleStoreHistory
// 0x0020 (0x0020 - 0x0000)
struct FBattleStoreHistory final
{
public:
	struct FItemID                                ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseRound;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Params;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleStoreHistory) == 0x000008, "Wrong alignment on FBattleStoreHistory");
static_assert(sizeof(FBattleStoreHistory) == 0x000020, "Wrong size on FBattleStoreHistory");
static_assert(offsetof(FBattleStoreHistory, ItemID) == 0x000000, "Member 'FBattleStoreHistory::ItemID' has a wrong offset!");
static_assert(offsetof(FBattleStoreHistory, PurchaseRound) == 0x000010, "Member 'FBattleStoreHistory::PurchaseRound' has a wrong offset!");
static_assert(offsetof(FBattleStoreHistory, Params) == 0x000014, "Member 'FBattleStoreHistory::Params' has a wrong offset!");
static_assert(offsetof(FBattleStoreHistory, Gold) == 0x000018, "Member 'FBattleStoreHistory::Gold' has a wrong offset!");

// ScriptStruct Stigma.BattleStoreHistoryRecorder
// 0x0060 (0x0060 - 0x0000)
struct FBattleStoreHistoryRecorder final
{
public:
	TArray<struct FBattleStoreHistory>            BattleStoreHistories;                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5B[0x50];                                    // 0x0010(0x0050)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleStoreHistoryRecorder) == 0x000008, "Wrong alignment on FBattleStoreHistoryRecorder");
static_assert(sizeof(FBattleStoreHistoryRecorder) == 0x000060, "Wrong size on FBattleStoreHistoryRecorder");
static_assert(offsetof(FBattleStoreHistoryRecorder, BattleStoreHistories) == 0x000000, "Member 'FBattleStoreHistoryRecorder::BattleStoreHistories' has a wrong offset!");

// ScriptStruct Stigma.MenuBarEntryState
// 0x0058 (0x0058 - 0x0000)
struct FMenuBarEntryState final
{
public:
	class UTexture2D*                             BackgroundImage;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ButtonImage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FrameImage;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundTintColor;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonTintColor;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FrameTintColor;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuBarEntryState) == 0x000008, "Wrong alignment on FMenuBarEntryState");
static_assert(sizeof(FMenuBarEntryState) == 0x000058, "Wrong size on FMenuBarEntryState");
static_assert(offsetof(FMenuBarEntryState, BackgroundImage) == 0x000000, "Member 'FMenuBarEntryState::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FMenuBarEntryState, ButtonImage) == 0x000008, "Member 'FMenuBarEntryState::ButtonImage' has a wrong offset!");
static_assert(offsetof(FMenuBarEntryState, FrameImage) == 0x000010, "Member 'FMenuBarEntryState::FrameImage' has a wrong offset!");
static_assert(offsetof(FMenuBarEntryState, TextColor) == 0x000018, "Member 'FMenuBarEntryState::TextColor' has a wrong offset!");
static_assert(offsetof(FMenuBarEntryState, BackgroundTintColor) == 0x000028, "Member 'FMenuBarEntryState::BackgroundTintColor' has a wrong offset!");
static_assert(offsetof(FMenuBarEntryState, ButtonTintColor) == 0x000038, "Member 'FMenuBarEntryState::ButtonTintColor' has a wrong offset!");
static_assert(offsetof(FMenuBarEntryState, FrameTintColor) == 0x000048, "Member 'FMenuBarEntryState::FrameTintColor' has a wrong offset!");

// ScriptStruct Stigma.MenuBarEntry
// 0x0170 (0x0170 - 0x0000)
struct FMenuBarEntry final
{
public:
	EMenuBarEntryType                             EntryType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuBarEntryTextBindType                     TextBindType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   StringTableID;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   StringTableKey;                                    // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0058(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuBarState                                 State;                                             // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5E[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMenuBarEntryState                     Normal;                                            // 0x00B8(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMenuBarEntryState                     Hover;                                             // 0x0110(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PaddingSize;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5F[0x4];                                     // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMenuBarEntry) == 0x000008, "Wrong alignment on FMenuBarEntry");
static_assert(sizeof(FMenuBarEntry) == 0x000170, "Wrong size on FMenuBarEntry");
static_assert(offsetof(FMenuBarEntry, EntryType) == 0x000000, "Member 'FMenuBarEntry::EntryType' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, TextBindType) == 0x000001, "Member 'FMenuBarEntry::TextBindType' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, ID) == 0x000004, "Member 'FMenuBarEntry::ID' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, Text) == 0x000010, "Member 'FMenuBarEntry::Text' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, StringTableID) == 0x000028, "Member 'FMenuBarEntry::StringTableID' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, StringTableKey) == 0x000040, "Member 'FMenuBarEntry::StringTableKey' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, Font) == 0x000058, "Member 'FMenuBarEntry::Font' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, State) == 0x0000B0, "Member 'FMenuBarEntry::State' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, Normal) == 0x0000B8, "Member 'FMenuBarEntry::Normal' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, Hover) == 0x000110, "Member 'FMenuBarEntry::Hover' has a wrong offset!");
static_assert(offsetof(FMenuBarEntry, PaddingSize) == 0x000168, "Member 'FMenuBarEntry::PaddingSize' has a wrong offset!");

// ScriptStruct Stigma.ModeRecord
// 0x0028 (0x0028 - 0x0000)
struct FModeRecord final
{
public:
	EGameMode                                     Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D60[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Txt_Value;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D61[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FModeRecord) == 0x000008, "Wrong alignment on FModeRecord");
static_assert(sizeof(FModeRecord) == 0x000028, "Wrong size on FModeRecord");
static_assert(offsetof(FModeRecord, Mode) == 0x000000, "Member 'FModeRecord::Mode' has a wrong offset!");
static_assert(offsetof(FModeRecord, Txt_Value) == 0x000008, "Member 'FModeRecord::Txt_Value' has a wrong offset!");
static_assert(offsetof(FModeRecord, Percent) == 0x000020, "Member 'FModeRecord::Percent' has a wrong offset!");

// ScriptStruct Stigma.LemmingSpawn
// 0x0008 (0x0008 - 0x0000)
struct FLemmingSpawn final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLemmingSpawn) == 0x000004, "Wrong alignment on FLemmingSpawn");
static_assert(sizeof(FLemmingSpawn) == 0x000008, "Wrong size on FLemmingSpawn");
static_assert(offsetof(FLemmingSpawn, Level) == 0x000000, "Member 'FLemmingSpawn::Level' has a wrong offset!");
static_assert(offsetof(FLemmingSpawn, Count) == 0x000004, "Member 'FLemmingSpawn::Count' has a wrong offset!");

// ScriptStruct Stigma.LemmingsGameRush
// 0x0018 (0x0018 - 0x0000)
struct FLemmingsGameRush final
{
public:
	float                                         SpawnInterval;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLemmingsPerSpawn;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLemmingSpawn>                  Spawns;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLemmingsGameRush) == 0x000008, "Wrong alignment on FLemmingsGameRush");
static_assert(sizeof(FLemmingsGameRush) == 0x000018, "Wrong size on FLemmingsGameRush");
static_assert(offsetof(FLemmingsGameRush, SpawnInterval) == 0x000000, "Member 'FLemmingsGameRush::SpawnInterval' has a wrong offset!");
static_assert(offsetof(FLemmingsGameRush, MaxLemmingsPerSpawn) == 0x000004, "Member 'FLemmingsGameRush::MaxLemmingsPerSpawn' has a wrong offset!");
static_assert(offsetof(FLemmingsGameRush, Spawns) == 0x000008, "Member 'FLemmingsGameRush::Spawns' has a wrong offset!");

// ScriptStruct Stigma.ActionGraphEntry
// 0x00D8 (0x0208 - 0x0130)
struct FActionGraphEntry final : public FItemEntry
{
public:
	TMap<EGameMode, struct FActionGraph_ActivationInfo> ActivationInfos;                                   // 0x0130(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UActionGraph>            ActionGraph;                                       // 0x0180(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECharaType, TSoftObjectPtr<class UActionGraph>> CharaSpecificActionGraph;                          // 0x01A8(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FActionGraph_SkillInfo>         DynamicSkillInfos;                                 // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionGraphEntry) == 0x000008, "Wrong alignment on FActionGraphEntry");
static_assert(sizeof(FActionGraphEntry) == 0x000208, "Wrong size on FActionGraphEntry");
static_assert(offsetof(FActionGraphEntry, ActivationInfos) == 0x000130, "Member 'FActionGraphEntry::ActivationInfos' has a wrong offset!");
static_assert(offsetof(FActionGraphEntry, ActionGraph) == 0x000180, "Member 'FActionGraphEntry::ActionGraph' has a wrong offset!");
static_assert(offsetof(FActionGraphEntry, CharaSpecificActionGraph) == 0x0001A8, "Member 'FActionGraphEntry::CharaSpecificActionGraph' has a wrong offset!");
static_assert(offsetof(FActionGraphEntry, DynamicSkillInfos) == 0x0001F8, "Member 'FActionGraphEntry::DynamicSkillInfos' has a wrong offset!");

// ScriptStruct Stigma.Config_Exp
// 0x0008 (0x0138 - 0x0130)
struct FConfig_Exp final : public FItemEntry
{
public:
	EExpType                                      Type;                                              // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D62[0x7];                                     // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_Exp) == 0x000008, "Wrong alignment on FConfig_Exp");
static_assert(sizeof(FConfig_Exp) == 0x000138, "Wrong size on FConfig_Exp");
static_assert(offsetof(FConfig_Exp, Type) == 0x000130, "Member 'FConfig_Exp::Type' has a wrong offset!");

// ScriptStruct Stigma.GunBuffEffect
// 0x0020 (0x0020 - 0x0000)
struct FGunBuffEffect final
{
public:
	float                                         DamageRate;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationRate;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelayRate;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilRate;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalMagazine;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPowerInc;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPowerIncRate;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunBuffEffect) == 0x000004, "Wrong alignment on FGunBuffEffect");
static_assert(sizeof(FGunBuffEffect) == 0x000020, "Wrong size on FGunBuffEffect");
static_assert(offsetof(FGunBuffEffect, DamageRate) == 0x000000, "Member 'FGunBuffEffect::DamageRate' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, DeviationRate) == 0x000004, "Member 'FGunBuffEffect::DeviationRate' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, ReloadRate) == 0x000008, "Member 'FGunBuffEffect::ReloadRate' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, FireDelayRate) == 0x00000C, "Member 'FGunBuffEffect::FireDelayRate' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, RecoilRate) == 0x000010, "Member 'FGunBuffEffect::RecoilRate' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, AdditionalMagazine) == 0x000014, "Member 'FGunBuffEffect::AdditionalMagazine' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, ControlPowerInc) == 0x000018, "Member 'FGunBuffEffect::ControlPowerInc' has a wrong offset!");
static_assert(offsetof(FGunBuffEffect, ControlPowerIncRate) == 0x00001C, "Member 'FGunBuffEffect::ControlPowerIncRate' has a wrong offset!");

// ScriptStruct Stigma.RegistryData
// 0x0020 (0x0020 - 0x0000)
struct FRegistryData final
{
public:
	class FString                                 TargetRowName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScriptStruct*                          StructType;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D63[0x8];                                     // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRegistryData) == 0x000008, "Wrong alignment on FRegistryData");
static_assert(sizeof(FRegistryData) == 0x000020, "Wrong size on FRegistryData");
static_assert(offsetof(FRegistryData, TargetRowName) == 0x000000, "Member 'FRegistryData::TargetRowName' has a wrong offset!");
static_assert(offsetof(FRegistryData, StructType) == 0x000010, "Member 'FRegistryData::StructType' has a wrong offset!");

// ScriptStruct Stigma.Magazine
// 0x0001 (0x0001 - 0x0000)
struct FMagazine final
{
public:
	uint8                                         BulletCount;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMagazine) == 0x000001, "Wrong alignment on FMagazine");
static_assert(sizeof(FMagazine) == 0x000001, "Wrong size on FMagazine");
static_assert(offsetof(FMagazine, BulletCount) == 0x000000, "Member 'FMagazine::BulletCount' has a wrong offset!");

// ScriptStruct Stigma.DamageReport
// 0x0010 (0x0010 - 0x0000)
struct FDamageReport final
{
public:
	EKnockType                                    KnockType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        bone;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D64[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         HP_Damage;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor_Damage;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlocked;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D65[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FDamageReport) == 0x000004, "Wrong alignment on FDamageReport");
static_assert(sizeof(FDamageReport) == 0x000010, "Wrong size on FDamageReport");
static_assert(offsetof(FDamageReport, KnockType) == 0x000000, "Member 'FDamageReport::KnockType' has a wrong offset!");
static_assert(offsetof(FDamageReport, bone) == 0x000001, "Member 'FDamageReport::bone' has a wrong offset!");
static_assert(offsetof(FDamageReport, HP_Damage) == 0x000004, "Member 'FDamageReport::HP_Damage' has a wrong offset!");
static_assert(offsetof(FDamageReport, Armor_Damage) == 0x000008, "Member 'FDamageReport::Armor_Damage' has a wrong offset!");
static_assert(offsetof(FDamageReport, IsBlocked) == 0x00000C, "Member 'FDamageReport::IsBlocked' has a wrong offset!");

// ScriptStruct Stigma.DamagedData
// 0x0030 (0x0030 - 0x0000)
struct FDamagedData final
{
public:
	class ACharaBase*                             Attacker;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Victim;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjectBase*                            Weapon;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbnormals                             Abnormals;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 AttackOperatorID;                                  // 0x001A(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageReport                          Damage;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamagedData) == 0x000008, "Wrong alignment on FDamagedData");
static_assert(sizeof(FDamagedData) == 0x000030, "Wrong size on FDamagedData");
static_assert(offsetof(FDamagedData, Attacker) == 0x000000, "Member 'FDamagedData::Attacker' has a wrong offset!");
static_assert(offsetof(FDamagedData, Victim) == 0x000008, "Member 'FDamagedData::Victim' has a wrong offset!");
static_assert(offsetof(FDamagedData, Weapon) == 0x000010, "Member 'FDamagedData::Weapon' has a wrong offset!");
static_assert(offsetof(FDamagedData, Abnormals) == 0x000018, "Member 'FDamagedData::Abnormals' has a wrong offset!");
static_assert(offsetof(FDamagedData, AttackType) == 0x000019, "Member 'FDamagedData::AttackType' has a wrong offset!");
static_assert(offsetof(FDamagedData, AttackOperatorID) == 0x00001A, "Member 'FDamagedData::AttackOperatorID' has a wrong offset!");
static_assert(offsetof(FDamagedData, Damage) == 0x000020, "Member 'FDamagedData::Damage' has a wrong offset!");

// ScriptStruct Stigma.GMFunction
// 0x0048 (0x0048 - 0x0000)
struct FGMFunction final
{
public:
	int32                                         IDN;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D66[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              StartAt;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndAt;                                             // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemID>                        FuncItemIDN;                                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Head;                                              // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGMFunction) == 0x000008, "Wrong alignment on FGMFunction");
static_assert(sizeof(FGMFunction) == 0x000048, "Wrong size on FGMFunction");
static_assert(offsetof(FGMFunction, IDN) == 0x000000, "Member 'FGMFunction::IDN' has a wrong offset!");
static_assert(offsetof(FGMFunction, StartAt) == 0x000008, "Member 'FGMFunction::StartAt' has a wrong offset!");
static_assert(offsetof(FGMFunction, EndAt) == 0x000010, "Member 'FGMFunction::EndAt' has a wrong offset!");
static_assert(offsetof(FGMFunction, FuncItemIDN) == 0x000018, "Member 'FGMFunction::FuncItemIDN' has a wrong offset!");
static_assert(offsetof(FGMFunction, Head) == 0x000028, "Member 'FGMFunction::Head' has a wrong offset!");
static_assert(offsetof(FGMFunction, Body) == 0x000038, "Member 'FGMFunction::Body' has a wrong offset!");

// ScriptStruct Stigma.BC_GMFunction
// 0x0010 (0x0010 - 0x0000)
struct FBC_GMFunction final
{
public:
	TArray<struct FGMFunction>                    GMFunction;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_GMFunction) == 0x000008, "Wrong alignment on FBC_GMFunction");
static_assert(sizeof(FBC_GMFunction) == 0x000010, "Wrong size on FBC_GMFunction");
static_assert(offsetof(FBC_GMFunction, GMFunction) == 0x000000, "Member 'FBC_GMFunction::GMFunction' has a wrong offset!");

// ScriptStruct Stigma.MeleeData
// 0x0024 (0x0024 - 0x0000)
struct FMeleeData final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeleeAttackPoint                             Point;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackPriority                               Priority;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoPassive;                                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHitOnlyChara;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D67[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RadiusScaler;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHeightScaler;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardOffset;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightOffset;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffset;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptableForwardAngle;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackID;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeData) == 0x000004, "Wrong alignment on FMeleeData");
static_assert(sizeof(FMeleeData) == 0x000024, "Wrong size on FMeleeData");
static_assert(offsetof(FMeleeData, AttackType) == 0x000000, "Member 'FMeleeData::AttackType' has a wrong offset!");
static_assert(offsetof(FMeleeData, Point) == 0x000001, "Member 'FMeleeData::Point' has a wrong offset!");
static_assert(offsetof(FMeleeData, Priority) == 0x000002, "Member 'FMeleeData::Priority' has a wrong offset!");
static_assert(offsetof(FMeleeData, DoPassive) == 0x000003, "Member 'FMeleeData::DoPassive' has a wrong offset!");
static_assert(offsetof(FMeleeData, IsHitOnlyChara) == 0x000004, "Member 'FMeleeData::IsHitOnlyChara' has a wrong offset!");
static_assert(offsetof(FMeleeData, RadiusScaler) == 0x000008, "Member 'FMeleeData::RadiusScaler' has a wrong offset!");
static_assert(offsetof(FMeleeData, CapsuleHeightScaler) == 0x00000C, "Member 'FMeleeData::CapsuleHeightScaler' has a wrong offset!");
static_assert(offsetof(FMeleeData, ForwardOffset) == 0x000010, "Member 'FMeleeData::ForwardOffset' has a wrong offset!");
static_assert(offsetof(FMeleeData, RightOffset) == 0x000014, "Member 'FMeleeData::RightOffset' has a wrong offset!");
static_assert(offsetof(FMeleeData, UpOffset) == 0x000018, "Member 'FMeleeData::UpOffset' has a wrong offset!");
static_assert(offsetof(FMeleeData, AcceptableForwardAngle) == 0x00001C, "Member 'FMeleeData::AcceptableForwardAngle' has a wrong offset!");
static_assert(offsetof(FMeleeData, AttackID) == 0x000020, "Member 'FMeleeData::AttackID' has a wrong offset!");

// ScriptStruct Stigma.NetID
// 0x0002 (0x0002 - 0x0000)
struct FNetID final
{
public:
	ETeams                                        _Team;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _Key;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FNetID) == 0x000001, "Wrong alignment on FNetID");
static_assert(sizeof(FNetID) == 0x000002, "Wrong size on FNetID");
static_assert(offsetof(FNetID, _Team) == 0x000000, "Member 'FNetID::_Team' has a wrong offset!");
static_assert(offsetof(FNetID, _Key) == 0x000001, "Member 'FNetID::_Key' has a wrong offset!");

// ScriptStruct Stigma.HPRecovery
// 0x0014 (0x0014 - 0x0000)
struct FHPRecovery final
{
public:
	float                                         RemainRecoveryAmount;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D68[0xC];                                     // 0x0008(0x000C)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FHPRecovery) == 0x000004, "Wrong alignment on FHPRecovery");
static_assert(sizeof(FHPRecovery) == 0x000014, "Wrong size on FHPRecovery");
static_assert(offsetof(FHPRecovery, RemainRecoveryAmount) == 0x000000, "Member 'FHPRecovery::RemainRecoveryAmount' has a wrong offset!");
static_assert(offsetof(FHPRecovery, Delay) == 0x000004, "Member 'FHPRecovery::Delay' has a wrong offset!");

// ScriptStruct Stigma.NetDamagedData
// 0x0028 (0x0028 - 0x0000)
struct FNetDamagedData final
{
public:
	struct FNetCharaKey                           Attacker;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNetCharaKey                           Victim;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D69[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class AObjectBase*                            Weapon;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbnormals                             Abnormals;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 AttackOperatorID;                                  // 0x0012(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageReport                          Damage;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetDamagedData) == 0x000008, "Wrong alignment on FNetDamagedData");
static_assert(sizeof(FNetDamagedData) == 0x000028, "Wrong size on FNetDamagedData");
static_assert(offsetof(FNetDamagedData, Attacker) == 0x000000, "Member 'FNetDamagedData::Attacker' has a wrong offset!");
static_assert(offsetof(FNetDamagedData, Victim) == 0x000001, "Member 'FNetDamagedData::Victim' has a wrong offset!");
static_assert(offsetof(FNetDamagedData, Weapon) == 0x000008, "Member 'FNetDamagedData::Weapon' has a wrong offset!");
static_assert(offsetof(FNetDamagedData, Abnormals) == 0x000010, "Member 'FNetDamagedData::Abnormals' has a wrong offset!");
static_assert(offsetof(FNetDamagedData, AttackType) == 0x000011, "Member 'FNetDamagedData::AttackType' has a wrong offset!");
static_assert(offsetof(FNetDamagedData, AttackOperatorID) == 0x000012, "Member 'FNetDamagedData::AttackOperatorID' has a wrong offset!");
static_assert(offsetof(FNetDamagedData, Damage) == 0x000018, "Member 'FNetDamagedData::Damage' has a wrong offset!");

// ScriptStruct Stigma.SocialOption
// 0x0028 (0x0028 - 0x0000)
struct FSocialOption final
{
public:
	bool                                          LoginNoticeFriend;                                 // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartyJoin;                                    // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 AllowFriendAsk;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllowPartyInvite;                                  // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialOption) == 0x000008, "Wrong alignment on FSocialOption");
static_assert(sizeof(FSocialOption) == 0x000028, "Wrong size on FSocialOption");
static_assert(offsetof(FSocialOption, LoginNoticeFriend) == 0x000000, "Member 'FSocialOption::LoginNoticeFriend' has a wrong offset!");
static_assert(offsetof(FSocialOption, AllowPartyJoin) == 0x000001, "Member 'FSocialOption::AllowPartyJoin' has a wrong offset!");
static_assert(offsetof(FSocialOption, AllowFriendAsk) == 0x000008, "Member 'FSocialOption::AllowFriendAsk' has a wrong offset!");
static_assert(offsetof(FSocialOption, AllowPartyInvite) == 0x000018, "Member 'FSocialOption::AllowPartyInvite' has a wrong offset!");

// ScriptStruct Stigma.AfterImageFX
// 0x0010 (0x0010 - 0x0000)
struct FAfterImageFX final
{
public:
	class UNiagaraSystem*                         _FX;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _SocketName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAfterImageFX) == 0x000008, "Wrong alignment on FAfterImageFX");
static_assert(sizeof(FAfterImageFX) == 0x000010, "Wrong size on FAfterImageFX");
static_assert(offsetof(FAfterImageFX, _FX) == 0x000000, "Member 'FAfterImageFX::_FX' has a wrong offset!");
static_assert(offsetof(FAfterImageFX, _SocketName) == 0x000008, "Member 'FAfterImageFX::_SocketName' has a wrong offset!");

// ScriptStruct Stigma.CutScene
// 0x0060 (0x0060 - 0x0000)
struct FCutScene final
{
public:
	TSoftObjectPtr<class UWorld>                  IntroMapFile;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IntroAllPlayer;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UWorld>                  OutroMapFile;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                Outro_UI;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCutScene) == 0x000008, "Wrong alignment on FCutScene");
static_assert(sizeof(FCutScene) == 0x000060, "Wrong size on FCutScene");
static_assert(offsetof(FCutScene, IntroMapFile) == 0x000000, "Member 'FCutScene::IntroMapFile' has a wrong offset!");
static_assert(offsetof(FCutScene, IntroAllPlayer) == 0x000028, "Member 'FCutScene::IntroAllPlayer' has a wrong offset!");
static_assert(offsetof(FCutScene, OutroMapFile) == 0x000030, "Member 'FCutScene::OutroMapFile' has a wrong offset!");
static_assert(offsetof(FCutScene, Outro_UI) == 0x000058, "Member 'FCutScene::Outro_UI' has a wrong offset!");

// ScriptStruct Stigma.PassiveSkillID
// 0x0000 (0x0010 - 0x0010)
struct FPassiveSkillID final : public FItemID
{
};
static_assert(alignof(FPassiveSkillID) == 0x000008, "Wrong alignment on FPassiveSkillID");
static_assert(sizeof(FPassiveSkillID) == 0x000010, "Wrong size on FPassiveSkillID");

// ScriptStruct Stigma.StunTypeParam
// 0x0003 (0x0003 - 0x0000)
struct FStunTypeParam final
{
public:
	EStunType                                     StunType;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlly;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RepFlag;                                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStunTypeParam) == 0x000001, "Wrong alignment on FStunTypeParam");
static_assert(sizeof(FStunTypeParam) == 0x000003, "Wrong size on FStunTypeParam");
static_assert(offsetof(FStunTypeParam, StunType) == 0x000000, "Member 'FStunTypeParam::StunType' has a wrong offset!");
static_assert(offsetof(FStunTypeParam, IsAlly) == 0x000001, "Member 'FStunTypeParam::IsAlly' has a wrong offset!");
static_assert(offsetof(FStunTypeParam, RepFlag) == 0x000002, "Member 'FStunTypeParam::RepFlag' has a wrong offset!");

// ScriptStruct Stigma.OriginMaterials
// 0x0010 (0x0010 - 0x0000)
struct FOriginMaterials final
{
public:
	TArray<class UMaterialInterface*>             _Materials;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOriginMaterials) == 0x000008, "Wrong alignment on FOriginMaterials");
static_assert(sizeof(FOriginMaterials) == 0x000010, "Wrong size on FOriginMaterials");
static_assert(offsetof(FOriginMaterials, _Materials) == 0x000000, "Member 'FOriginMaterials::_Materials' has a wrong offset!");

// ScriptStruct Stigma.Gear
// 0x01B0 (0x01B0 - 0x0000)
struct FGear final
{
public:
	struct FItemID_Gears                          GearID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHP;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6C[0x19C];                                   // 0x0014(0x019C)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGear) == 0x000008, "Wrong alignment on FGear");
static_assert(sizeof(FGear) == 0x0001B0, "Wrong size on FGear");
static_assert(offsetof(FGear, GearID) == 0x000000, "Member 'FGear::GearID' has a wrong offset!");
static_assert(offsetof(FGear, CurrentHP) == 0x000010, "Member 'FGear::CurrentHP' has a wrong offset!");

// ScriptStruct Stigma.BloodDecalEntry
// 0x0018 (0x0020 - 0x0008)
struct FBloodDecalEntry final : public FTableRowBase
{
public:
	EBodyParts                                    BodyParts;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UTexture*                               BloodTexture;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodRadius;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBloodDecalEntry) == 0x000008, "Wrong alignment on FBloodDecalEntry");
static_assert(sizeof(FBloodDecalEntry) == 0x000020, "Wrong size on FBloodDecalEntry");
static_assert(offsetof(FBloodDecalEntry, BodyParts) == 0x000008, "Member 'FBloodDecalEntry::BodyParts' has a wrong offset!");
static_assert(offsetof(FBloodDecalEntry, BloodTexture) == 0x000010, "Member 'FBloodDecalEntry::BloodTexture' has a wrong offset!");
static_assert(offsetof(FBloodDecalEntry, BloodRadius) == 0x000018, "Member 'FBloodDecalEntry::BloodRadius' has a wrong offset!");

// ScriptStruct Stigma.CameraDirectingParams
// 0x0020 (0x0020 - 0x0000)
struct FCameraDirectingParams final
{
public:
	bool                                          EnableDirecting;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D6F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Yaw;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        LookAtBone;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D70[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         CameraDistance;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FollowUpTarget;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverWriteRotation;                               // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingIn;                                          // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D71[0x1];                                     // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         EasingInTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D72[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCameraDirectingParams) == 0x000004, "Wrong alignment on FCameraDirectingParams");
static_assert(sizeof(FCameraDirectingParams) == 0x000020, "Wrong size on FCameraDirectingParams");
static_assert(offsetof(FCameraDirectingParams, EnableDirecting) == 0x000000, "Member 'FCameraDirectingParams::EnableDirecting' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, Yaw) == 0x000004, "Member 'FCameraDirectingParams::Yaw' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, Pitch) == 0x000008, "Member 'FCameraDirectingParams::Pitch' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, LookAtBone) == 0x00000C, "Member 'FCameraDirectingParams::LookAtBone' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, CameraDistance) == 0x000010, "Member 'FCameraDirectingParams::CameraDistance' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, FollowUpTarget) == 0x000014, "Member 'FCameraDirectingParams::FollowUpTarget' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, IsOverWriteRotation) == 0x000015, "Member 'FCameraDirectingParams::IsOverWriteRotation' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, EasingIn) == 0x000016, "Member 'FCameraDirectingParams::EasingIn' has a wrong offset!");
static_assert(offsetof(FCameraDirectingParams, EasingInTime) == 0x000018, "Member 'FCameraDirectingParams::EasingInTime' has a wrong offset!");

// ScriptStruct Stigma.CharacterInfo
// 0x0058 (0x0058 - 0x0000)
struct FCharacterInfo final
{
public:
	ECharaType                                    CharType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D73[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Skin_Body                      BodyIDN;                                           // 0x0008(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    ArmorType;                                         // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D74[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Skin_Head                      HeadIDN;                                           // 0x0020(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunPreset                             GunPreset;                                         // 0x0030(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPossessed;                                       // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D75[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              ExpireAt;                                          // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTemporary;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D76[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCharacterInfo) == 0x000008, "Wrong alignment on FCharacterInfo");
static_assert(sizeof(FCharacterInfo) == 0x000058, "Wrong size on FCharacterInfo");
static_assert(offsetof(FCharacterInfo, CharType) == 0x000000, "Member 'FCharacterInfo::CharType' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, BodyIDN) == 0x000008, "Member 'FCharacterInfo::BodyIDN' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, ArmorType) == 0x000018, "Member 'FCharacterInfo::ArmorType' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, HeadIDN) == 0x000020, "Member 'FCharacterInfo::HeadIDN' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, GunPreset) == 0x000030, "Member 'FCharacterInfo::GunPreset' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, IsPossessed) == 0x000040, "Member 'FCharacterInfo::IsPossessed' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, ExpireAt) == 0x000048, "Member 'FCharacterInfo::ExpireAt' has a wrong offset!");
static_assert(offsetof(FCharacterInfo, IsTemporary) == 0x000050, "Member 'FCharacterInfo::IsTemporary' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_LoadUser
// 0x0100 (0x0130 - 0x0030)
struct FBattleLog_LoadUser final : public FStigmaLogBase_User
{
public:
	struct FUserInBattle                          User;                                              // 0x0030(0x00A0)(NativeAccessSpecifierPublic)
	struct FCharacterInfo                         Character;                                         // 0x00D0(0x0058)(NativeAccessSpecifierPublic)
	struct FPartyID                               PartyID;                                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_LoadUser) == 0x000008, "Wrong alignment on FBattleLog_LoadUser");
static_assert(sizeof(FBattleLog_LoadUser) == 0x000130, "Wrong size on FBattleLog_LoadUser");
static_assert(offsetof(FBattleLog_LoadUser, User) == 0x000030, "Member 'FBattleLog_LoadUser::User' has a wrong offset!");
static_assert(offsetof(FBattleLog_LoadUser, Character) == 0x0000D0, "Member 'FBattleLog_LoadUser::Character' has a wrong offset!");
static_assert(offsetof(FBattleLog_LoadUser, PartyID) == 0x000128, "Member 'FBattleLog_LoadUser::PartyID' has a wrong offset!");

// ScriptStruct Stigma.MeshMaterials
// 0x0050 (0x0050 - 0x0000)
struct FMeshMaterials final
{
public:
	TMap<class UMeshComponent*, struct FOriginMaterials> _MeshMaterials;                                    // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshMaterials) == 0x000008, "Wrong alignment on FMeshMaterials");
static_assert(sizeof(FMeshMaterials) == 0x000050, "Wrong size on FMeshMaterials");
static_assert(offsetof(FMeshMaterials, _MeshMaterials) == 0x000000, "Member 'FMeshMaterials::_MeshMaterials' has a wrong offset!");

// ScriptStruct Stigma.SoundUnit
// 0x0018 (0x0018 - 0x0000)
struct FSoundUnit final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundRemainTime;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D77[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundUnit) == 0x000008, "Wrong alignment on FSoundUnit");
static_assert(sizeof(FSoundUnit) == 0x000018, "Wrong size on FSoundUnit");
static_assert(offsetof(FSoundUnit, Sound) == 0x000000, "Member 'FSoundUnit::Sound' has a wrong offset!");
static_assert(offsetof(FSoundUnit, SoundRemainTime) == 0x000008, "Member 'FSoundUnit::SoundRemainTime' has a wrong offset!");
static_assert(offsetof(FSoundUnit, AudioComponent) == 0x000010, "Member 'FSoundUnit::AudioComponent' has a wrong offset!");

// ScriptStruct Stigma.ExpiryItemEntry
// 0x0018 (0x0148 - 0x0130)
struct FExpiryItemEntry : public FItemEntry
{
public:
	EExpiryType                                   ExpiryType;                                        // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D78[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ExpiryCount;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpiryElapsedHours;                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D79[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              ExpiryDate;                                        // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpiryItemEntry) == 0x000008, "Wrong alignment on FExpiryItemEntry");
static_assert(sizeof(FExpiryItemEntry) == 0x000148, "Wrong size on FExpiryItemEntry");
static_assert(offsetof(FExpiryItemEntry, ExpiryType) == 0x000130, "Member 'FExpiryItemEntry::ExpiryType' has a wrong offset!");
static_assert(offsetof(FExpiryItemEntry, ExpiryCount) == 0x000134, "Member 'FExpiryItemEntry::ExpiryCount' has a wrong offset!");
static_assert(offsetof(FExpiryItemEntry, ExpiryElapsedHours) == 0x000138, "Member 'FExpiryItemEntry::ExpiryElapsedHours' has a wrong offset!");
static_assert(offsetof(FExpiryItemEntry, ExpiryDate) == 0x000140, "Member 'FExpiryItemEntry::ExpiryDate' has a wrong offset!");

// ScriptStruct Stigma.Config_Function
// 0x0060 (0x01A8 - 0x0148)
struct FConfig_Function final : public FExpiryItemEntry
{
public:
	EFuncTarget                                   FuncTarget;                                        // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIncType                                      IncType;                                           // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7A[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Value;                                             // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrantTiming                                  GrantTiming;                                       // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7B[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EGameMode>                             Modes;                                             // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccumulationType                             AccumulationType;                                  // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7C[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemIDRef_Function>            SubFunctions;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DeleteLevelOver;                                   // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7D[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UUI_CustomItemUsing>        CustomUsingUI;                                     // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                FunctionGroupID;                                   // 0x0190(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsedAdminTool;                                   // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7E[0x7];                                     // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_Function) == 0x000008, "Wrong alignment on FConfig_Function");
static_assert(sizeof(FConfig_Function) == 0x0001A8, "Wrong size on FConfig_Function");
static_assert(offsetof(FConfig_Function, FuncTarget) == 0x000148, "Member 'FConfig_Function::FuncTarget' has a wrong offset!");
static_assert(offsetof(FConfig_Function, IncType) == 0x000149, "Member 'FConfig_Function::IncType' has a wrong offset!");
static_assert(offsetof(FConfig_Function, Value) == 0x00014C, "Member 'FConfig_Function::Value' has a wrong offset!");
static_assert(offsetof(FConfig_Function, GrantTiming) == 0x000150, "Member 'FConfig_Function::GrantTiming' has a wrong offset!");
static_assert(offsetof(FConfig_Function, Modes) == 0x000158, "Member 'FConfig_Function::Modes' has a wrong offset!");
static_assert(offsetof(FConfig_Function, Duration) == 0x000168, "Member 'FConfig_Function::Duration' has a wrong offset!");
static_assert(offsetof(FConfig_Function, AccumulationType) == 0x00016C, "Member 'FConfig_Function::AccumulationType' has a wrong offset!");
static_assert(offsetof(FConfig_Function, SubFunctions) == 0x000170, "Member 'FConfig_Function::SubFunctions' has a wrong offset!");
static_assert(offsetof(FConfig_Function, DeleteLevelOver) == 0x000180, "Member 'FConfig_Function::DeleteLevelOver' has a wrong offset!");
static_assert(offsetof(FConfig_Function, CustomUsingUI) == 0x000188, "Member 'FConfig_Function::CustomUsingUI' has a wrong offset!");
static_assert(offsetof(FConfig_Function, FunctionGroupID) == 0x000190, "Member 'FConfig_Function::FunctionGroupID' has a wrong offset!");
static_assert(offsetof(FConfig_Function, IsUsedAdminTool) == 0x0001A0, "Member 'FConfig_Function::IsUsedAdminTool' has a wrong offset!");

// ScriptStruct Stigma.DoubleTapContext
// 0x0028 (0x0028 - 0x0000)
struct FDoubleTapContext final
{
public:
	class ACharaBase*                             Target;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D7F[0x20];                                    // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FDoubleTapContext) == 0x000008, "Wrong alignment on FDoubleTapContext");
static_assert(sizeof(FDoubleTapContext) == 0x000028, "Wrong size on FDoubleTapContext");
static_assert(offsetof(FDoubleTapContext, Target) == 0x000000, "Member 'FDoubleTapContext::Target' has a wrong offset!");

// ScriptStruct Stigma.Config_MissionUI
// 0x00A0 (0x00A0 - 0x0000)
struct FConfig_MissionUI final
{
public:
	TMap<EMissionType, struct FSlateColor>        TypeColorMap;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<EMissionType, class FText>               TypeDisplayNameMap;                                // 0x0050(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FConfig_MissionUI) == 0x000008, "Wrong alignment on FConfig_MissionUI");
static_assert(sizeof(FConfig_MissionUI) == 0x0000A0, "Wrong size on FConfig_MissionUI");
static_assert(offsetof(FConfig_MissionUI, TypeColorMap) == 0x000000, "Member 'FConfig_MissionUI::TypeColorMap' has a wrong offset!");
static_assert(offsetof(FConfig_MissionUI, TypeDisplayNameMap) == 0x000050, "Member 'FConfig_MissionUI::TypeDisplayNameMap' has a wrong offset!");

// ScriptStruct Stigma.BarrierData
// 0x0010 (0x0010 - 0x0000)
struct FBarrierData final
{
public:
	ETeams                                        Team;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D80[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class ABarrierBase*                           Barrier;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBarrierData) == 0x000008, "Wrong alignment on FBarrierData");
static_assert(sizeof(FBarrierData) == 0x000010, "Wrong size on FBarrierData");
static_assert(offsetof(FBarrierData, Team) == 0x000000, "Member 'FBarrierData::Team' has a wrong offset!");
static_assert(offsetof(FBarrierData, Barrier) == 0x000008, "Member 'FBarrierData::Barrier' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_BattleFinish
// 0x0010 (0x0038 - 0x0028)
struct FBattleLog_BattleFinish final : public FStigmaLogBase
{
public:
	class FString                                 Reason;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_BattleFinish) == 0x000008, "Wrong alignment on FBattleLog_BattleFinish");
static_assert(sizeof(FBattleLog_BattleFinish) == 0x000038, "Wrong size on FBattleLog_BattleFinish");
static_assert(offsetof(FBattleLog_BattleFinish, Reason) == 0x000028, "Member 'FBattleLog_BattleFinish::Reason' has a wrong offset!");

// ScriptStruct Stigma.DOTContext
// 0x0030 (0x0030 - 0x0000)
struct FDOTContext final
{
public:
	float                                         Elapsed;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D81[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             Attacker;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjectBase*                            Weapon;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 AttackOPID;                                        // 0x0020(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D82[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDOT                                   DOT;                                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDOTContext) == 0x000008, "Wrong alignment on FDOTContext");
static_assert(sizeof(FDOTContext) == 0x000030, "Wrong size on FDOTContext");
static_assert(offsetof(FDOTContext, Elapsed) == 0x000000, "Member 'FDOTContext::Elapsed' has a wrong offset!");
static_assert(offsetof(FDOTContext, Interval) == 0x000004, "Member 'FDOTContext::Interval' has a wrong offset!");
static_assert(offsetof(FDOTContext, Seconds) == 0x000008, "Member 'FDOTContext::Seconds' has a wrong offset!");
static_assert(offsetof(FDOTContext, Attacker) == 0x000010, "Member 'FDOTContext::Attacker' has a wrong offset!");
static_assert(offsetof(FDOTContext, Weapon) == 0x000018, "Member 'FDOTContext::Weapon' has a wrong offset!");
static_assert(offsetof(FDOTContext, AttackOPID) == 0x000020, "Member 'FDOTContext::AttackOPID' has a wrong offset!");
static_assert(offsetof(FDOTContext, DOT) == 0x000028, "Member 'FDOTContext::DOT' has a wrong offset!");

// ScriptStruct Stigma.Gear_MeshDatas
// 0x0030 (0x0030 - 0x0000)
struct FGear_MeshDatas final
{
public:
	TArray<class UMeshComponent*>                 Meshes;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UDestructibleComponent*>         DestructibleComps;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UGeometryCollectionComponent*>   GeometryCollectionComps;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGear_MeshDatas) == 0x000008, "Wrong alignment on FGear_MeshDatas");
static_assert(sizeof(FGear_MeshDatas) == 0x000030, "Wrong size on FGear_MeshDatas");
static_assert(offsetof(FGear_MeshDatas, Meshes) == 0x000000, "Member 'FGear_MeshDatas::Meshes' has a wrong offset!");
static_assert(offsetof(FGear_MeshDatas, DestructibleComps) == 0x000010, "Member 'FGear_MeshDatas::DestructibleComps' has a wrong offset!");
static_assert(offsetof(FGear_MeshDatas, GeometryCollectionComps) == 0x000020, "Member 'FGear_MeshDatas::GeometryCollectionComps' has a wrong offset!");

// ScriptStruct Stigma.Gear_SectionMeshDatas
// 0x0010 (0x0010 - 0x0000)
struct FGear_SectionMeshDatas final
{
public:
	TArray<struct FGear_MeshDatas>                MeshDatas;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGear_SectionMeshDatas) == 0x000008, "Wrong alignment on FGear_SectionMeshDatas");
static_assert(sizeof(FGear_SectionMeshDatas) == 0x000010, "Wrong size on FGear_SectionMeshDatas");
static_assert(offsetof(FGear_SectionMeshDatas, MeshDatas) == 0x000000, "Member 'FGear_SectionMeshDatas::MeshDatas' has a wrong offset!");

// ScriptStruct Stigma.DamageViewer
// 0x0048 (0x0048 - 0x0000)
struct FDamageViewer final
{
public:
	class ACharaBase*                             Victim;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamagedData                           DamageData;                                        // 0x0008(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UUI_DamageViewer*                       UI;                                                // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D83[0x8];                                     // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FDamageViewer) == 0x000008, "Wrong alignment on FDamageViewer");
static_assert(sizeof(FDamageViewer) == 0x000048, "Wrong size on FDamageViewer");
static_assert(offsetof(FDamageViewer, Victim) == 0x000000, "Member 'FDamageViewer::Victim' has a wrong offset!");
static_assert(offsetof(FDamageViewer, DamageData) == 0x000008, "Member 'FDamageViewer::DamageData' has a wrong offset!");
static_assert(offsetof(FDamageViewer, UI) == 0x000038, "Member 'FDamageViewer::UI' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_LootGun
// 0x0020 (0x0050 - 0x0030)
struct FBattleLog_LootGun final : public FStigmaLogBase_User
{
public:
	EGunType                                      GunType;                                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D84[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Pos;                                               // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_LootGun) == 0x000008, "Wrong alignment on FBattleLog_LootGun");
static_assert(sizeof(FBattleLog_LootGun) == 0x000050, "Wrong size on FBattleLog_LootGun");
static_assert(offsetof(FBattleLog_LootGun, GunType) == 0x000030, "Member 'FBattleLog_LootGun::GunType' has a wrong offset!");
static_assert(offsetof(FBattleLog_LootGun, Pos) == 0x000038, "Member 'FBattleLog_LootGun::Pos' has a wrong offset!");

// ScriptStruct Stigma.Config_RandomBox
// 0x0038 (0x0180 - 0x0148)
struct FConfig_RandomBox final : public FExpiryItemEntry
{
public:
	ERandomBoxType                                BoxType;                                           // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuyingPlace                                  BuyingPlace;                                       // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D85[0x6];                                     // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UDataTable>              RewardTable;                                       // 0x0150(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenMinLevel;                                      // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteLevelOver;                                   // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_RandomBox) == 0x000008, "Wrong alignment on FConfig_RandomBox");
static_assert(sizeof(FConfig_RandomBox) == 0x000180, "Wrong size on FConfig_RandomBox");
static_assert(offsetof(FConfig_RandomBox, BoxType) == 0x000148, "Member 'FConfig_RandomBox::BoxType' has a wrong offset!");
static_assert(offsetof(FConfig_RandomBox, BuyingPlace) == 0x000149, "Member 'FConfig_RandomBox::BuyingPlace' has a wrong offset!");
static_assert(offsetof(FConfig_RandomBox, RewardTable) == 0x000150, "Member 'FConfig_RandomBox::RewardTable' has a wrong offset!");
static_assert(offsetof(FConfig_RandomBox, OpenMinLevel) == 0x000178, "Member 'FConfig_RandomBox::OpenMinLevel' has a wrong offset!");
static_assert(offsetof(FConfig_RandomBox, DeleteLevelOver) == 0x00017C, "Member 'FConfig_RandomBox::DeleteLevelOver' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_Skill
// 0x0070 (0x00A0 - 0x0030)
struct FBattleLog_Skill final : public FStigmaLogBase_User
{
public:
	ECharaAction                                  Slot;                                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D86[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 SkillName;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassive;                                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D87[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserID                                Mate;                                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_Skill) == 0x000008, "Wrong alignment on FBattleLog_Skill");
static_assert(sizeof(FBattleLog_Skill) == 0x0000A0, "Wrong size on FBattleLog_Skill");
static_assert(offsetof(FBattleLog_Skill, Slot) == 0x000030, "Member 'FBattleLog_Skill::Slot' has a wrong offset!");
static_assert(offsetof(FBattleLog_Skill, SkillName) == 0x000038, "Member 'FBattleLog_Skill::SkillName' has a wrong offset!");
static_assert(offsetof(FBattleLog_Skill, IsPassive) == 0x000048, "Member 'FBattleLog_Skill::IsPassive' has a wrong offset!");
static_assert(offsetof(FBattleLog_Skill, Mate) == 0x000050, "Member 'FBattleLog_Skill::Mate' has a wrong offset!");
static_assert(offsetof(FBattleLog_Skill, Vector) == 0x000058, "Member 'FBattleLog_Skill::Vector' has a wrong offset!");
static_assert(offsetof(FBattleLog_Skill, Pos) == 0x000070, "Member 'FBattleLog_Skill::Pos' has a wrong offset!");
static_assert(offsetof(FBattleLog_Skill, Rot) == 0x000088, "Member 'FBattleLog_Skill::Rot' has a wrong offset!");

// ScriptStruct Stigma.ItemCheat
// 0x0018 (0x0018 - 0x0000)
struct FItemCheat final
{
public:
	struct FItemID                                ItemID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMinutes;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D88[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Count;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCheat) == 0x000008, "Wrong alignment on FItemCheat");
static_assert(sizeof(FItemCheat) == 0x000018, "Wrong size on FItemCheat");
static_assert(offsetof(FItemCheat, ItemID) == 0x000000, "Member 'FItemCheat::ItemID' has a wrong offset!");
static_assert(offsetof(FItemCheat, IsMinutes) == 0x000010, "Member 'FItemCheat::IsMinutes' has a wrong offset!");
static_assert(offsetof(FItemCheat, Count) == 0x000014, "Member 'FItemCheat::Count' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_Item
// 0x0028 (0x0028 - 0x0000)
struct FREQ_CHEAT_Item final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Clear;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D89[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemCheat                             Item;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_CHEAT_Item) == 0x000008, "Wrong alignment on FREQ_CHEAT_Item");
static_assert(sizeof(FREQ_CHEAT_Item) == 0x000028, "Wrong size on FREQ_CHEAT_Item");
static_assert(offsetof(FREQ_CHEAT_Item, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_Item::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_Item, Clear) == 0x000008, "Member 'FREQ_CHEAT_Item::Clear' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_Item, Item) == 0x000010, "Member 'FREQ_CHEAT_Item::Item' has a wrong offset!");

// ScriptStruct Stigma.TeamRule
// 0x0010 (0x0010 - 0x0000)
struct FTeamRule final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamRule) == 0x000008, "Wrong alignment on FTeamRule");
static_assert(sizeof(FTeamRule) == 0x000010, "Wrong size on FTeamRule");
static_assert(offsetof(FTeamRule, Name) == 0x000000, "Member 'FTeamRule::Name' has a wrong offset!");

// ScriptStruct Stigma.ModeUnlockCondition
// 0x0008 (0x0008 - 0x0000)
struct FModeUnlockCondition final
{
public:
	EModeUnlockCondition                          Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     Mode;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8A[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeUnlockCondition) == 0x000004, "Wrong alignment on FModeUnlockCondition");
static_assert(sizeof(FModeUnlockCondition) == 0x000008, "Wrong size on FModeUnlockCondition");
static_assert(offsetof(FModeUnlockCondition, Type) == 0x000000, "Member 'FModeUnlockCondition::Type' has a wrong offset!");
static_assert(offsetof(FModeUnlockCondition, Mode) == 0x000001, "Member 'FModeUnlockCondition::Mode' has a wrong offset!");
static_assert(offsetof(FModeUnlockCondition, Value) == 0x000004, "Member 'FModeUnlockCondition::Value' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Recruit
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Recruit final : public FItemID
{
};
static_assert(alignof(FItemID_Recruit) == 0x000008, "Wrong alignment on FItemID_Recruit");
static_assert(sizeof(FItemID_Recruit) == 0x000010, "Wrong size on FItemID_Recruit");

// ScriptStruct Stigma.NetRecruitRewardItemSet
// 0x0050 (0x0050 - 0x0000)
struct FNetRecruitRewardItemSet final
{
public:
	struct FNetInvenItem                          Reward;                                            // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetInvenItem                          Refund;                                            // 0x0028(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetRecruitRewardItemSet) == 0x000008, "Wrong alignment on FNetRecruitRewardItemSet");
static_assert(sizeof(FNetRecruitRewardItemSet) == 0x000050, "Wrong size on FNetRecruitRewardItemSet");
static_assert(offsetof(FNetRecruitRewardItemSet, Reward) == 0x000000, "Member 'FNetRecruitRewardItemSet::Reward' has a wrong offset!");
static_assert(offsetof(FNetRecruitRewardItemSet, Refund) == 0x000028, "Member 'FNetRecruitRewardItemSet::Refund' has a wrong offset!");

// ScriptStruct Stigma.NetRecruitReward
// 0x0018 (0x0018 - 0x0000)
struct FNetRecruitReward final
{
public:
	TArray<struct FNetRecruitRewardItemSet>       RecruitSet;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsSpecial;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FNetRecruitReward) == 0x000008, "Wrong alignment on FNetRecruitReward");
static_assert(sizeof(FNetRecruitReward) == 0x000018, "Wrong size on FNetRecruitReward");
static_assert(offsetof(FNetRecruitReward, RecruitSet) == 0x000000, "Member 'FNetRecruitReward::RecruitSet' has a wrong offset!");
static_assert(offsetof(FNetRecruitReward, IsSpecial) == 0x000010, "Member 'FNetRecruitReward::IsSpecial' has a wrong offset!");

// ScriptStruct Stigma.ACK_BuyRecruit
// 0x0030 (0x0030 - 0x0000)
struct FACK_BuyRecruit final
{
public:
	struct FItemID_Recruit                        RID;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetRecruitReward>              Item;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCurrencyPlain>                 Balance;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BuyRecruit) == 0x000008, "Wrong alignment on FACK_BuyRecruit");
static_assert(sizeof(FACK_BuyRecruit) == 0x000030, "Wrong size on FACK_BuyRecruit");
static_assert(offsetof(FACK_BuyRecruit, RID) == 0x000000, "Member 'FACK_BuyRecruit::RID' has a wrong offset!");
static_assert(offsetof(FACK_BuyRecruit, Item) == 0x000010, "Member 'FACK_BuyRecruit::Item' has a wrong offset!");
static_assert(offsetof(FACK_BuyRecruit, Balance) == 0x000020, "Member 'FACK_BuyRecruit::Balance' has a wrong offset!");

// ScriptStruct Stigma.KillLog
// 0x0028 (0x0028 - 0x0000)
struct FKillLog final
{
public:
	class ACharaBase*                             Killer;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Assist;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Victim;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObjectBase*                            Weapon;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionGraphOperatorID                 OperatorID;                                        // 0x0020(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        HittedBone;                                        // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillLog) == 0x000008, "Wrong alignment on FKillLog");
static_assert(sizeof(FKillLog) == 0x000028, "Wrong size on FKillLog");
static_assert(offsetof(FKillLog, Killer) == 0x000000, "Member 'FKillLog::Killer' has a wrong offset!");
static_assert(offsetof(FKillLog, Assist) == 0x000008, "Member 'FKillLog::Assist' has a wrong offset!");
static_assert(offsetof(FKillLog, Victim) == 0x000010, "Member 'FKillLog::Victim' has a wrong offset!");
static_assert(offsetof(FKillLog, Weapon) == 0x000018, "Member 'FKillLog::Weapon' has a wrong offset!");
static_assert(offsetof(FKillLog, OperatorID) == 0x000020, "Member 'FKillLog::OperatorID' has a wrong offset!");
static_assert(offsetof(FKillLog, AttackType) == 0x000026, "Member 'FKillLog::AttackType' has a wrong offset!");
static_assert(offsetof(FKillLog, HittedBone) == 0x000027, "Member 'FKillLog::HittedBone' has a wrong offset!");

// ScriptStruct Stigma.TabDefine
// 0x0440 (0x0440 - 0x0000)
struct FTabDefine final
{
public:
	class FName                                   _id;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              _Icon;                                             // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsEnable;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsRegister;                                       // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8C[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FButtonStyle                           _ButtonStyle;                                      // 0x0050(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTabDefine) == 0x000010, "Wrong alignment on FTabDefine");
static_assert(sizeof(FTabDefine) == 0x000440, "Wrong size on FTabDefine");
static_assert(offsetof(FTabDefine, _id) == 0x000000, "Member 'FTabDefine::_id' has a wrong offset!");
static_assert(offsetof(FTabDefine, _text) == 0x000008, "Member 'FTabDefine::_text' has a wrong offset!");
static_assert(offsetof(FTabDefine, _Icon) == 0x000020, "Member 'FTabDefine::_Icon' has a wrong offset!");
static_assert(offsetof(FTabDefine, _IsEnable) == 0x000048, "Member 'FTabDefine::_IsEnable' has a wrong offset!");
static_assert(offsetof(FTabDefine, _IsRegister) == 0x000049, "Member 'FTabDefine::_IsRegister' has a wrong offset!");
static_assert(offsetof(FTabDefine, _ButtonStyle) == 0x000050, "Member 'FTabDefine::_ButtonStyle' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_Fire
// 0x0068 (0x0098 - 0x0030)
struct FBattleLog_Fire final : public FStigmaLogBase_User
{
public:
	EGunType                                      GunType;                                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMainGun;                                         // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLootedGun;                                       // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8D[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Start;                                             // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_Fire) == 0x000008, "Wrong alignment on FBattleLog_Fire");
static_assert(sizeof(FBattleLog_Fire) == 0x000098, "Wrong size on FBattleLog_Fire");
static_assert(offsetof(FBattleLog_Fire, GunType) == 0x000030, "Member 'FBattleLog_Fire::GunType' has a wrong offset!");
static_assert(offsetof(FBattleLog_Fire, IsMainGun) == 0x000031, "Member 'FBattleLog_Fire::IsMainGun' has a wrong offset!");
static_assert(offsetof(FBattleLog_Fire, IsLootedGun) == 0x000032, "Member 'FBattleLog_Fire::IsLootedGun' has a wrong offset!");
static_assert(offsetof(FBattleLog_Fire, Start) == 0x000038, "Member 'FBattleLog_Fire::Start' has a wrong offset!");
static_assert(offsetof(FBattleLog_Fire, End) == 0x000050, "Member 'FBattleLog_Fire::End' has a wrong offset!");
static_assert(offsetof(FBattleLog_Fire, Pos) == 0x000068, "Member 'FBattleLog_Fire::Pos' has a wrong offset!");
static_assert(offsetof(FBattleLog_Fire, Rot) == 0x000080, "Member 'FBattleLog_Fire::Rot' has a wrong offset!");

// ScriptStruct Stigma.ACK_ChallengeRead
// 0x0078 (0x0078 - 0x0000)
struct FACK_ChallengeRead final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevRank;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0010(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinalRound;                                        // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlackCoin;                                         // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Armor;                                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8E[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ProfileCardIDN;                                    // 0x0040(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                EmblemIDN;                                         // 0x0050(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0060(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         TierRank;                                          // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8F[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_ChallengeRead) == 0x000008, "Wrong alignment on FACK_ChallengeRead");
static_assert(sizeof(FACK_ChallengeRead) == 0x000078, "Wrong size on FACK_ChallengeRead");
static_assert(offsetof(FACK_ChallengeRead, UserIDN) == 0x000000, "Member 'FACK_ChallengeRead::UserIDN' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, PrevRank) == 0x000008, "Member 'FACK_ChallengeRead::PrevRank' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, Rank) == 0x00000C, "Member 'FACK_ChallengeRead::Rank' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, Nickname) == 0x000010, "Member 'FACK_ChallengeRead::Nickname' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, Score) == 0x000028, "Member 'FACK_ChallengeRead::Score' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, FinalRound) == 0x00002C, "Member 'FACK_ChallengeRead::FinalRound' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, BlackCoin) == 0x000030, "Member 'FACK_ChallengeRead::BlackCoin' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, Gold) == 0x000034, "Member 'FACK_ChallengeRead::Gold' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, Armor) == 0x000038, "Member 'FACK_ChallengeRead::Armor' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, ProfileCardIDN) == 0x000040, "Member 'FACK_ChallengeRead::ProfileCardIDN' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, EmblemIDN) == 0x000050, "Member 'FACK_ChallengeRead::EmblemIDN' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, NicknameFX) == 0x000060, "Member 'FACK_ChallengeRead::NicknameFX' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeRead, TierRank) == 0x000070, "Member 'FACK_ChallengeRead::TierRank' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadChallengeRanking
// 0x0030 (0x0030 - 0x0000)
struct FACK_ReadChallengeRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             MyRank;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             Rankers;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadChallengeRanking) == 0x000008, "Wrong alignment on FACK_ReadChallengeRanking");
static_assert(sizeof(FACK_ReadChallengeRanking) == 0x000030, "Wrong size on FACK_ReadChallengeRanking");
static_assert(offsetof(FACK_ReadChallengeRanking, Start) == 0x000000, "Member 'FACK_ReadChallengeRanking::Start' has a wrong offset!");
static_assert(offsetof(FACK_ReadChallengeRanking, Count) == 0x000008, "Member 'FACK_ReadChallengeRanking::Count' has a wrong offset!");
static_assert(offsetof(FACK_ReadChallengeRanking, MyRank) == 0x000010, "Member 'FACK_ReadChallengeRanking::MyRank' has a wrong offset!");
static_assert(offsetof(FACK_ReadChallengeRanking, Rankers) == 0x000020, "Member 'FACK_ReadChallengeRanking::Rankers' has a wrong offset!");

// ScriptStruct Stigma.SnipeFXData
// 0x0048 (0x0048 - 0x0000)
struct FSnipeFXData final
{
public:
	class UNiagaraSystem*                         _FX;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _SocketName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _LocationOffset;                                   // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _RotationOffset;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _OwnerNoSee;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D90[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FSnipeFXData) == 0x000008, "Wrong alignment on FSnipeFXData");
static_assert(sizeof(FSnipeFXData) == 0x000048, "Wrong size on FSnipeFXData");
static_assert(offsetof(FSnipeFXData, _FX) == 0x000000, "Member 'FSnipeFXData::_FX' has a wrong offset!");
static_assert(offsetof(FSnipeFXData, _SocketName) == 0x000008, "Member 'FSnipeFXData::_SocketName' has a wrong offset!");
static_assert(offsetof(FSnipeFXData, _LocationOffset) == 0x000010, "Member 'FSnipeFXData::_LocationOffset' has a wrong offset!");
static_assert(offsetof(FSnipeFXData, _RotationOffset) == 0x000028, "Member 'FSnipeFXData::_RotationOffset' has a wrong offset!");
static_assert(offsetof(FSnipeFXData, _OwnerNoSee) == 0x000040, "Member 'FSnipeFXData::_OwnerNoSee' has a wrong offset!");

// ScriptStruct Stigma.GoldRewardHistory
// 0x000C (0x000C - 0x0000)
struct FGoldRewardHistory final
{
public:
	EGoldRewardType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D91[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Gold;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoldRewardHistory) == 0x000004, "Wrong alignment on FGoldRewardHistory");
static_assert(sizeof(FGoldRewardHistory) == 0x00000C, "Wrong size on FGoldRewardHistory");
static_assert(offsetof(FGoldRewardHistory, Type) == 0x000000, "Member 'FGoldRewardHistory::Type' has a wrong offset!");
static_assert(offsetof(FGoldRewardHistory, Gold) == 0x000004, "Member 'FGoldRewardHistory::Gold' has a wrong offset!");
static_assert(offsetof(FGoldRewardHistory, Round) == 0x000008, "Member 'FGoldRewardHistory::Round' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_UseBooster
// 0x0010 (0x0040 - 0x0030)
struct FBattleLog_UseBooster final : public FStigmaLogBase_User
{
public:
	struct FItemID                                BoosterID;                                         // 0x0030(0x0010)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_UseBooster) == 0x000008, "Wrong alignment on FBattleLog_UseBooster");
static_assert(sizeof(FBattleLog_UseBooster) == 0x000040, "Wrong size on FBattleLog_UseBooster");
static_assert(offsetof(FBattleLog_UseBooster, BoosterID) == 0x000030, "Member 'FBattleLog_UseBooster::BoosterID' has a wrong offset!");

// ScriptStruct Stigma.TeamDefine
// 0x0028 (0x0028 - 0x0000)
struct FTeamDefine final
{
public:
	ETeams                                        TeamID;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D92[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsForAI;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D93[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FTeamDefine) == 0x000008, "Wrong alignment on FTeamDefine");
static_assert(sizeof(FTeamDefine) == 0x000028, "Wrong size on FTeamDefine");
static_assert(offsetof(FTeamDefine, TeamID) == 0x000000, "Member 'FTeamDefine::TeamID' has a wrong offset!");
static_assert(offsetof(FTeamDefine, Name) == 0x000008, "Member 'FTeamDefine::Name' has a wrong offset!");
static_assert(offsetof(FTeamDefine, IsForAI) == 0x000020, "Member 'FTeamDefine::IsForAI' has a wrong offset!");

// ScriptStruct Stigma.CharaEntry
// 0x0010 (0x0010 - 0x0000)
struct FCharaEntry final
{
public:
	struct FNetID                                 _id;                                               // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D94[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class ACharaBase*                             _chara;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaEntry) == 0x000008, "Wrong alignment on FCharaEntry");
static_assert(sizeof(FCharaEntry) == 0x000010, "Wrong size on FCharaEntry");
static_assert(offsetof(FCharaEntry, _id) == 0x000000, "Member 'FCharaEntry::_id' has a wrong offset!");
static_assert(offsetof(FCharaEntry, _chara) == 0x000008, "Member 'FCharaEntry::_chara' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadRanking
// 0x0020 (0x0020 - 0x0000)
struct FACK_ReadRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetRankingEntry>               Rankers;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadRanking) == 0x000008, "Wrong alignment on FACK_ReadRanking");
static_assert(sizeof(FACK_ReadRanking) == 0x000020, "Wrong size on FACK_ReadRanking");
static_assert(offsetof(FACK_ReadRanking, Start) == 0x000000, "Member 'FACK_ReadRanking::Start' has a wrong offset!");
static_assert(offsetof(FACK_ReadRanking, Count) == 0x000008, "Member 'FACK_ReadRanking::Count' has a wrong offset!");
static_assert(offsetof(FACK_ReadRanking, Rankers) == 0x000010, "Member 'FACK_ReadRanking::Rankers' has a wrong offset!");

// ScriptStruct Stigma.NetCompetitionPlayer
// 0x00A0 (0x00A0 - 0x0000)
struct FNetCompetitionPlayer final
{
public:
	struct FNetCompetitionBriefPlayer             PlayerInfo;                                        // 0x0000(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PlayTime;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kill;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Death;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Win1Count;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Win2Count;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompetCount;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopRank;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D95[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ProfileCardIDN;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                EmblemIDN;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         TierRank;                                          // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D96[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetCompetitionPlayer) == 0x000008, "Wrong alignment on FNetCompetitionPlayer");
static_assert(sizeof(FNetCompetitionPlayer) == 0x0000A0, "Wrong size on FNetCompetitionPlayer");
static_assert(offsetof(FNetCompetitionPlayer, PlayerInfo) == 0x000000, "Member 'FNetCompetitionPlayer::PlayerInfo' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, PlayTime) == 0x000040, "Member 'FNetCompetitionPlayer::PlayTime' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, Kill) == 0x000044, "Member 'FNetCompetitionPlayer::Kill' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, Death) == 0x000048, "Member 'FNetCompetitionPlayer::Death' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, Assist) == 0x00004C, "Member 'FNetCompetitionPlayer::Assist' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, Win1Count) == 0x000050, "Member 'FNetCompetitionPlayer::Win1Count' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, Win2Count) == 0x000054, "Member 'FNetCompetitionPlayer::Win2Count' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, CompetCount) == 0x000058, "Member 'FNetCompetitionPlayer::CompetCount' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, RewardCount) == 0x00005C, "Member 'FNetCompetitionPlayer::RewardCount' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, TopRank) == 0x000060, "Member 'FNetCompetitionPlayer::TopRank' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, ProfileCardIDN) == 0x000068, "Member 'FNetCompetitionPlayer::ProfileCardIDN' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, EmblemIDN) == 0x000078, "Member 'FNetCompetitionPlayer::EmblemIDN' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, NicknameFX) == 0x000088, "Member 'FNetCompetitionPlayer::NicknameFX' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, TierRank) == 0x000098, "Member 'FNetCompetitionPlayer::TierRank' has a wrong offset!");
static_assert(offsetof(FNetCompetitionPlayer, Level) == 0x00009C, "Member 'FNetCompetitionPlayer::Level' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadCompetitionPlayers
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadCompetitionPlayers final
{
public:
	TArray<struct FNetCompetitionPlayer>          Player;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadCompetitionPlayers) == 0x000008, "Wrong alignment on FACK_ReadCompetitionPlayers");
static_assert(sizeof(FACK_ReadCompetitionPlayers) == 0x000010, "Wrong size on FACK_ReadCompetitionPlayers");
static_assert(offsetof(FACK_ReadCompetitionPlayers, Player) == 0x000000, "Member 'FACK_ReadCompetitionPlayers::Player' has a wrong offset!");

// ScriptStruct Stigma.CraftCost
// 0x0020 (0x0020 - 0x0000)
struct FCraftCost final
{
public:
	ECostType                                     CostType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurrencyTypes                                CurrencyType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D97[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef                             ItemID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D98[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCraftCost) == 0x000008, "Wrong alignment on FCraftCost");
static_assert(sizeof(FCraftCost) == 0x000020, "Wrong size on FCraftCost");
static_assert(offsetof(FCraftCost, CostType) == 0x000000, "Member 'FCraftCost::CostType' has a wrong offset!");
static_assert(offsetof(FCraftCost, CurrencyType) == 0x000001, "Member 'FCraftCost::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCraftCost, ItemID) == 0x000008, "Member 'FCraftCost::ItemID' has a wrong offset!");
static_assert(offsetof(FCraftCost, Cost) == 0x000018, "Member 'FCraftCost::Cost' has a wrong offset!");

// ScriptStruct Stigma.ServiceDivision
// 0x0010 (0x0010 - 0x0000)
struct FServiceDivision final
{
public:
	class FString                                 PingURL;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceDivision) == 0x000008, "Wrong alignment on FServiceDivision");
static_assert(sizeof(FServiceDivision) == 0x000010, "Wrong size on FServiceDivision");
static_assert(offsetof(FServiceDivision, PingURL) == 0x000000, "Member 'FServiceDivision::PingURL' has a wrong offset!");

// ScriptStruct Stigma.ServiceConfig
// 0x0070 (0x0070 - 0x0000)
struct FServiceConfig final
{
public:
	class FString                                 Service;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MatchStartTime;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MatchEndTime;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FServiceDivision>    Divisions;                                         // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceConfig) == 0x000008, "Wrong alignment on FServiceConfig");
static_assert(sizeof(FServiceConfig) == 0x000070, "Wrong size on FServiceConfig");
static_assert(offsetof(FServiceConfig, Service) == 0x000000, "Member 'FServiceConfig::Service' has a wrong offset!");
static_assert(offsetof(FServiceConfig, MatchStartTime) == 0x000010, "Member 'FServiceConfig::MatchStartTime' has a wrong offset!");
static_assert(offsetof(FServiceConfig, MatchEndTime) == 0x000018, "Member 'FServiceConfig::MatchEndTime' has a wrong offset!");
static_assert(offsetof(FServiceConfig, Divisions) == 0x000020, "Member 'FServiceConfig::Divisions' has a wrong offset!");

// ScriptStruct Stigma.BattleResult_Challenge
// 0x0040 (0x0040 - 0x0000)
struct FBattleResult_Challenge final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nickname;                                          // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartRound;                                        // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinalRound;                                        // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlackCoin;                                         // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Armor;                                             // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CouponUsed;                                        // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D99[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleResult_Challenge) == 0x000008, "Wrong alignment on FBattleResult_Challenge");
static_assert(sizeof(FBattleResult_Challenge) == 0x000040, "Wrong size on FBattleResult_Challenge");
static_assert(offsetof(FBattleResult_Challenge, UserIDN) == 0x000000, "Member 'FBattleResult_Challenge::UserIDN' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, Nickname) == 0x000008, "Member 'FBattleResult_Challenge::Nickname' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, Score) == 0x000020, "Member 'FBattleResult_Challenge::Score' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, StartRound) == 0x000024, "Member 'FBattleResult_Challenge::StartRound' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, FinalRound) == 0x000028, "Member 'FBattleResult_Challenge::FinalRound' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, BlackCoin) == 0x00002C, "Member 'FBattleResult_Challenge::BlackCoin' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, Gold) == 0x000030, "Member 'FBattleResult_Challenge::Gold' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, Armor) == 0x000034, "Member 'FBattleResult_Challenge::Armor' has a wrong offset!");
static_assert(offsetof(FBattleResult_Challenge, CouponUsed) == 0x000038, "Member 'FBattleResult_Challenge::CouponUsed' has a wrong offset!");

// ScriptStruct Stigma.PartsEntry_Gear
// 0x0060 (0x0190 - 0x0130)
struct FPartsEntry_Gear final : public FItemEntry
{
public:
	TArray<struct FGearMeshDefines>               MeshDefines;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSectionMeshDefines>            SectionMeshDefines;                                // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EBodyParts                                    Parts;                                             // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotDestroy;                                        // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9A[0x2];                                     // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         MaxArmor;                                          // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor_Damage_rate;                                 // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9B[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemIDRef_Buff>                Abnormal;                                          // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Buff>                BuffID;                                            // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ParentMaskingMaterailNames;                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartsEntry_Gear) == 0x000008, "Wrong alignment on FPartsEntry_Gear");
static_assert(sizeof(FPartsEntry_Gear) == 0x000190, "Wrong size on FPartsEntry_Gear");
static_assert(offsetof(FPartsEntry_Gear, MeshDefines) == 0x000130, "Member 'FPartsEntry_Gear::MeshDefines' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, SectionMeshDefines) == 0x000140, "Member 'FPartsEntry_Gear::SectionMeshDefines' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, Parts) == 0x000150, "Member 'FPartsEntry_Gear::Parts' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, NotDestroy) == 0x000151, "Member 'FPartsEntry_Gear::NotDestroy' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, MaxArmor) == 0x000154, "Member 'FPartsEntry_Gear::MaxArmor' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, Armor_Damage_rate) == 0x000158, "Member 'FPartsEntry_Gear::Armor_Damage_rate' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, Abnormal) == 0x000160, "Member 'FPartsEntry_Gear::Abnormal' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, BuffID) == 0x000170, "Member 'FPartsEntry_Gear::BuffID' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Gear, ParentMaskingMaterailNames) == 0x000180, "Member 'FPartsEntry_Gear::ParentMaskingMaterailNames' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadFriendRanking
// 0x0020 (0x0020 - 0x0000)
struct FACK_ReadFriendRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetRankingEntry>               Rankers;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadFriendRanking) == 0x000008, "Wrong alignment on FACK_ReadFriendRanking");
static_assert(sizeof(FACK_ReadFriendRanking) == 0x000020, "Wrong size on FACK_ReadFriendRanking");
static_assert(offsetof(FACK_ReadFriendRanking, Start) == 0x000000, "Member 'FACK_ReadFriendRanking::Start' has a wrong offset!");
static_assert(offsetof(FACK_ReadFriendRanking, Count) == 0x000008, "Member 'FACK_ReadFriendRanking::Count' has a wrong offset!");
static_assert(offsetof(FACK_ReadFriendRanking, Rankers) == 0x000010, "Member 'FACK_ReadFriendRanking::Rankers' has a wrong offset!");

// ScriptStruct Stigma.UserBattleResult
// 0x0090 (0x0090 - 0x0000)
struct FUserBattleResult final
{
public:
	struct FUserName                              Nickname;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                UserID;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        Team;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    CharaType;                                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Kill;                                              // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Death;                                             // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Assist;                                            // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Resurrect;                                         // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMVP;                                             // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9C[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RankPoint;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleExp;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffExp;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleDiamond;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffDiamond;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattlePassExp;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffPassExp;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayTimeSec;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9D[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID                                ProfileCard;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                Emblem;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                NicknameFX;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9E[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAI;                                              // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9F[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FUserBattleResult) == 0x000008, "Wrong alignment on FUserBattleResult");
static_assert(sizeof(FUserBattleResult) == 0x000090, "Wrong size on FUserBattleResult");
static_assert(offsetof(FUserBattleResult, Nickname) == 0x000000, "Member 'FUserBattleResult::Nickname' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, UserID) == 0x000018, "Member 'FUserBattleResult::UserID' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Team) == 0x000020, "Member 'FUserBattleResult::Team' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, CharaType) == 0x000021, "Member 'FUserBattleResult::CharaType' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Kill) == 0x000022, "Member 'FUserBattleResult::Kill' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Death) == 0x000023, "Member 'FUserBattleResult::Death' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Assist) == 0x000024, "Member 'FUserBattleResult::Assist' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Resurrect) == 0x000025, "Member 'FUserBattleResult::Resurrect' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, IsMVP) == 0x000026, "Member 'FUserBattleResult::IsMVP' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, RankPoint) == 0x000028, "Member 'FUserBattleResult::RankPoint' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, BattleExp) == 0x00002C, "Member 'FUserBattleResult::BattleExp' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, BuffExp) == 0x000030, "Member 'FUserBattleResult::BuffExp' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, BattleDiamond) == 0x000034, "Member 'FUserBattleResult::BattleDiamond' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, BuffDiamond) == 0x000038, "Member 'FUserBattleResult::BuffDiamond' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, BattlePassExp) == 0x00003C, "Member 'FUserBattleResult::BattlePassExp' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, BuffPassExp) == 0x000040, "Member 'FUserBattleResult::BuffPassExp' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Score) == 0x000044, "Member 'FUserBattleResult::Score' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, PlayTimeSec) == 0x000048, "Member 'FUserBattleResult::PlayTimeSec' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, ProfileCard) == 0x000050, "Member 'FUserBattleResult::ProfileCard' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Emblem) == 0x000060, "Member 'FUserBattleResult::Emblem' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, NicknameFX) == 0x000070, "Member 'FUserBattleResult::NicknameFX' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Tier) == 0x000080, "Member 'FUserBattleResult::Tier' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, Level) == 0x000084, "Member 'FUserBattleResult::Level' has a wrong offset!");
static_assert(offsetof(FUserBattleResult, IsAI) == 0x000088, "Member 'FUserBattleResult::IsAI' has a wrong offset!");

// ScriptStruct Stigma.LoginNotice
// 0x0018 (0x0018 - 0x0000)
struct FLoginNotice final
{
public:
	EOptionLanguage                               Lang;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginNotice) == 0x000008, "Wrong alignment on FLoginNotice");
static_assert(sizeof(FLoginNotice) == 0x000018, "Wrong size on FLoginNotice");
static_assert(offsetof(FLoginNotice, Lang) == 0x000000, "Member 'FLoginNotice::Lang' has a wrong offset!");
static_assert(offsetof(FLoginNotice, URL) == 0x000008, "Member 'FLoginNotice::URL' has a wrong offset!");

// ScriptStruct Stigma.ACK_LoginNotice
// 0x0018 (0x0018 - 0x0000)
struct FACK_LoginNotice final
{
public:
	struct FLoginNotice                           Notice;                                            // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_LoginNotice) == 0x000008, "Wrong alignment on FACK_LoginNotice");
static_assert(sizeof(FACK_LoginNotice) == 0x000018, "Wrong size on FACK_LoginNotice");
static_assert(offsetof(FACK_LoginNotice, Notice) == 0x000000, "Member 'FACK_LoginNotice::Notice' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadSearchedUserRanking
// 0x0020 (0x0020 - 0x0000)
struct FACK_ReadSearchedUserRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNetRankingEntry>               Rankers;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadSearchedUserRanking) == 0x000008, "Wrong alignment on FACK_ReadSearchedUserRanking");
static_assert(sizeof(FACK_ReadSearchedUserRanking) == 0x000020, "Wrong size on FACK_ReadSearchedUserRanking");
static_assert(offsetof(FACK_ReadSearchedUserRanking, Start) == 0x000000, "Member 'FACK_ReadSearchedUserRanking::Start' has a wrong offset!");
static_assert(offsetof(FACK_ReadSearchedUserRanking, Count) == 0x000008, "Member 'FACK_ReadSearchedUserRanking::Count' has a wrong offset!");
static_assert(offsetof(FACK_ReadSearchedUserRanking, Rankers) == 0x000010, "Member 'FACK_ReadSearchedUserRanking::Rankers' has a wrong offset!");

// ScriptStruct Stigma.MsgPackBody
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMsgPackBody final
{
public:
	uint8                                         Pad_1DA1[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMsgPackBody) == 0x000008, "Wrong alignment on FMsgPackBody");
static_assert(sizeof(FMsgPackBody) == 0x000010, "Wrong size on FMsgPackBody");

// ScriptStruct Stigma.WSMsg
// 0x0038 (0x0038 - 0x0000)
struct FWSMsg final
{
public:
	struct FUUID                                  PID;                                               // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MsgType;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCode                                   ResultCode;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA2[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMsgPackBody                           Body;                                              // 0x0028(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWSMsg) == 0x000008, "Wrong alignment on FWSMsg");
static_assert(sizeof(FWSMsg) == 0x000038, "Wrong size on FWSMsg");
static_assert(offsetof(FWSMsg, PID) == 0x000000, "Member 'FWSMsg::PID' has a wrong offset!");
static_assert(offsetof(FWSMsg, MsgType) == 0x000010, "Member 'FWSMsg::MsgType' has a wrong offset!");
static_assert(offsetof(FWSMsg, ResultCode) == 0x000020, "Member 'FWSMsg::ResultCode' has a wrong offset!");
static_assert(offsetof(FWSMsg, Body) == 0x000028, "Member 'FWSMsg::Body' has a wrong offset!");

// ScriptStruct Stigma.TeamScore
// 0x000C (0x000C - 0x0000)
struct FTeamScore final
{
public:
	ETeams                                        Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Score;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamScore) == 0x000004, "Wrong alignment on FTeamScore");
static_assert(sizeof(FTeamScore) == 0x00000C, "Wrong size on FTeamScore");
static_assert(offsetof(FTeamScore, Team) == 0x000000, "Member 'FTeamScore::Team' has a wrong offset!");
static_assert(offsetof(FTeamScore, Score) == 0x000004, "Member 'FTeamScore::Score' has a wrong offset!");
static_assert(offsetof(FTeamScore, Rank) == 0x000008, "Member 'FTeamScore::Rank' has a wrong offset!");

// ScriptStruct Stigma.BattleDecision
// 0x0038 (0x0038 - 0x0000)
struct FBattleDecision
{
public:
	EGameMode                                     Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleDecision                               Decision;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        WonTeam;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA4[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlaySecs;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA5[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              FinishTime;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTeamScore>                     TeamScores;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleDecision) == 0x000008, "Wrong alignment on FBattleDecision");
static_assert(sizeof(FBattleDecision) == 0x000038, "Wrong size on FBattleDecision");
static_assert(offsetof(FBattleDecision, Mode) == 0x000000, "Member 'FBattleDecision::Mode' has a wrong offset!");
static_assert(offsetof(FBattleDecision, Decision) == 0x000001, "Member 'FBattleDecision::Decision' has a wrong offset!");
static_assert(offsetof(FBattleDecision, WonTeam) == 0x000002, "Member 'FBattleDecision::WonTeam' has a wrong offset!");
static_assert(offsetof(FBattleDecision, MapName) == 0x000008, "Member 'FBattleDecision::MapName' has a wrong offset!");
static_assert(offsetof(FBattleDecision, TotalPlaySecs) == 0x000018, "Member 'FBattleDecision::TotalPlaySecs' has a wrong offset!");
static_assert(offsetof(FBattleDecision, FinishTime) == 0x000020, "Member 'FBattleDecision::FinishTime' has a wrong offset!");
static_assert(offsetof(FBattleDecision, TeamScores) == 0x000028, "Member 'FBattleDecision::TeamScores' has a wrong offset!");

// ScriptStruct Stigma.Config_AI
// 0x0188 (0x0190 - 0x0008)
struct FConfig_AI final : public FTableRowBase
{
public:
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ELO;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coward;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shooting_Like;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VariableUpdateTick;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchableMovementDistance;                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Searching_DelayTime;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Searching_Percentage;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSight_Distance;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sight_FOV;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastLocationSearchingPrepareTime;                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Proper_Fighting_Distance;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fireable_Distance;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFireCount;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFireCount;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFireDelayTime;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFireDelayTime;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Movement_MaxDistance;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cover_Weight;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maintain_Cover_Percentage;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideStep_Percentage;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideStep_FastMove_Percentage;                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideStep_CoolTime;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideStep_Tick;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Crouch_Percentage;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingGun;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA6[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         GunFireCooltime;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunExpertise;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillExpertise;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionUpdateTick;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionRotationSpeed;                               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA7[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSkillInfo_AI                          Skill_1;                                           // 0x0098(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkillInfo_AI                          Skill_2;                                           // 0x00C0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkillInfo_AI                          Skill_3;                                           // 0x00E8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkillInfo_AI                          Skill_Dash;                                        // 0x0110(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FightingDelayTime;                                 // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FightSectionMaxCount;                              // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FightSectionDelayTime;                             // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA8[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EBones>                                TargetAimBones;                                    // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsActivatedFireSeenBones;                          // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA9[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         HearingDistance;                                   // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HP;                                                // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor;                                             // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BountyMoney;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAA[0x4];                                     // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Skin_Body                   BodyID;                                            // 0x0170(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Head                   HeadID;                                            // 0x0180(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_AI) == 0x000008, "Wrong alignment on FConfig_AI");
static_assert(sizeof(FConfig_AI) == 0x000190, "Wrong size on FConfig_AI");
static_assert(offsetof(FConfig_AI, DisplayName) == 0x000008, "Member 'FConfig_AI::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_AI, ELO) == 0x000018, "Member 'FConfig_AI::ELO' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Coward) == 0x00001C, "Member 'FConfig_AI::Coward' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Shooting_Like) == 0x000020, "Member 'FConfig_AI::Shooting_Like' has a wrong offset!");
static_assert(offsetof(FConfig_AI, VariableUpdateTick) == 0x000024, "Member 'FConfig_AI::VariableUpdateTick' has a wrong offset!");
static_assert(offsetof(FConfig_AI, SearchableMovementDistance) == 0x000028, "Member 'FConfig_AI::SearchableMovementDistance' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Searching_DelayTime) == 0x00002C, "Member 'FConfig_AI::Searching_DelayTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Searching_Percentage) == 0x000030, "Member 'FConfig_AI::Searching_Percentage' has a wrong offset!");
static_assert(offsetof(FConfig_AI, MaxSight_Distance) == 0x000034, "Member 'FConfig_AI::MaxSight_Distance' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Sight_FOV) == 0x000038, "Member 'FConfig_AI::Sight_FOV' has a wrong offset!");
static_assert(offsetof(FConfig_AI, LastLocationSearchingPrepareTime) == 0x00003C, "Member 'FConfig_AI::LastLocationSearchingPrepareTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Proper_Fighting_Distance) == 0x000040, "Member 'FConfig_AI::Proper_Fighting_Distance' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Fireable_Distance) == 0x000044, "Member 'FConfig_AI::Fireable_Distance' has a wrong offset!");
static_assert(offsetof(FConfig_AI, MinFireCount) == 0x000048, "Member 'FConfig_AI::MinFireCount' has a wrong offset!");
static_assert(offsetof(FConfig_AI, MaxFireCount) == 0x00004C, "Member 'FConfig_AI::MaxFireCount' has a wrong offset!");
static_assert(offsetof(FConfig_AI, MinFireDelayTime) == 0x000050, "Member 'FConfig_AI::MinFireDelayTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, MaxFireDelayTime) == 0x000054, "Member 'FConfig_AI::MaxFireDelayTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Movement_MaxDistance) == 0x000058, "Member 'FConfig_AI::Movement_MaxDistance' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Cover_Weight) == 0x00005C, "Member 'FConfig_AI::Cover_Weight' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Maintain_Cover_Percentage) == 0x000060, "Member 'FConfig_AI::Maintain_Cover_Percentage' has a wrong offset!");
static_assert(offsetof(FConfig_AI, SideStep_Percentage) == 0x000064, "Member 'FConfig_AI::SideStep_Percentage' has a wrong offset!");
static_assert(offsetof(FConfig_AI, SideStep_FastMove_Percentage) == 0x000068, "Member 'FConfig_AI::SideStep_FastMove_Percentage' has a wrong offset!");
static_assert(offsetof(FConfig_AI, SideStep_CoolTime) == 0x00006C, "Member 'FConfig_AI::SideStep_CoolTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, SideStep_Tick) == 0x000070, "Member 'FConfig_AI::SideStep_Tick' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Crouch_Percentage) == 0x000074, "Member 'FConfig_AI::Crouch_Percentage' has a wrong offset!");
static_assert(offsetof(FConfig_AI, UsingGun) == 0x000078, "Member 'FConfig_AI::UsingGun' has a wrong offset!");
static_assert(offsetof(FConfig_AI, GunFireCooltime) == 0x00007C, "Member 'FConfig_AI::GunFireCooltime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, GunExpertise) == 0x000080, "Member 'FConfig_AI::GunExpertise' has a wrong offset!");
static_assert(offsetof(FConfig_AI, SkillExpertise) == 0x000084, "Member 'FConfig_AI::SkillExpertise' has a wrong offset!");
static_assert(offsetof(FConfig_AI, ActionUpdateTick) == 0x000088, "Member 'FConfig_AI::ActionUpdateTick' has a wrong offset!");
static_assert(offsetof(FConfig_AI, RotationSpeed) == 0x00008C, "Member 'FConfig_AI::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FConfig_AI, ActionRotationSpeed) == 0x000090, "Member 'FConfig_AI::ActionRotationSpeed' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Skill_1) == 0x000098, "Member 'FConfig_AI::Skill_1' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Skill_2) == 0x0000C0, "Member 'FConfig_AI::Skill_2' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Skill_3) == 0x0000E8, "Member 'FConfig_AI::Skill_3' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Skill_Dash) == 0x000110, "Member 'FConfig_AI::Skill_Dash' has a wrong offset!");
static_assert(offsetof(FConfig_AI, FightingDelayTime) == 0x000138, "Member 'FConfig_AI::FightingDelayTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, FightSectionMaxCount) == 0x00013C, "Member 'FConfig_AI::FightSectionMaxCount' has a wrong offset!");
static_assert(offsetof(FConfig_AI, FightSectionDelayTime) == 0x000140, "Member 'FConfig_AI::FightSectionDelayTime' has a wrong offset!");
static_assert(offsetof(FConfig_AI, TargetAimBones) == 0x000148, "Member 'FConfig_AI::TargetAimBones' has a wrong offset!");
static_assert(offsetof(FConfig_AI, IsActivatedFireSeenBones) == 0x000158, "Member 'FConfig_AI::IsActivatedFireSeenBones' has a wrong offset!");
static_assert(offsetof(FConfig_AI, HearingDistance) == 0x00015C, "Member 'FConfig_AI::HearingDistance' has a wrong offset!");
static_assert(offsetof(FConfig_AI, HP) == 0x000160, "Member 'FConfig_AI::HP' has a wrong offset!");
static_assert(offsetof(FConfig_AI, Armor) == 0x000164, "Member 'FConfig_AI::Armor' has a wrong offset!");
static_assert(offsetof(FConfig_AI, BountyMoney) == 0x000168, "Member 'FConfig_AI::BountyMoney' has a wrong offset!");
static_assert(offsetof(FConfig_AI, BodyID) == 0x000170, "Member 'FConfig_AI::BodyID' has a wrong offset!");
static_assert(offsetof(FConfig_AI, HeadID) == 0x000180, "Member 'FConfig_AI::HeadID' has a wrong offset!");

// ScriptStruct Stigma.MyBattleResult
// 0x0058 (0x0058 - 0x0000)
struct FMyBattleResult final
{
public:
	int32                                         EXP_Base;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EXP_Extra;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EXP_Team;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EXP_Learn;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EXP_Func;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pass_EXP;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pass_EXP_Func;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiamondFunc;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainLearnPoint_Free;                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainLearnPoint_Charged;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round_Win;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round_Draw;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round_Lose;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAB[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FStat_KillStreak>               Streaks;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FResultMission>                 Missions;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyBattleResult) == 0x000008, "Wrong alignment on FMyBattleResult");
static_assert(sizeof(FMyBattleResult) == 0x000058, "Wrong size on FMyBattleResult");
static_assert(offsetof(FMyBattleResult, EXP_Base) == 0x000000, "Member 'FMyBattleResult::EXP_Base' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, EXP_Extra) == 0x000004, "Member 'FMyBattleResult::EXP_Extra' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, EXP_Team) == 0x000008, "Member 'FMyBattleResult::EXP_Team' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, EXP_Learn) == 0x00000C, "Member 'FMyBattleResult::EXP_Learn' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, EXP_Func) == 0x000010, "Member 'FMyBattleResult::EXP_Func' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Pass_EXP) == 0x000014, "Member 'FMyBattleResult::Pass_EXP' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Pass_EXP_Func) == 0x000018, "Member 'FMyBattleResult::Pass_EXP_Func' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, DiamondFunc) == 0x00001C, "Member 'FMyBattleResult::DiamondFunc' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, RemainLearnPoint_Free) == 0x000020, "Member 'FMyBattleResult::RemainLearnPoint_Free' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, RemainLearnPoint_Charged) == 0x000024, "Member 'FMyBattleResult::RemainLearnPoint_Charged' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Round_Win) == 0x000028, "Member 'FMyBattleResult::Round_Win' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Round_Draw) == 0x00002C, "Member 'FMyBattleResult::Round_Draw' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Round_Lose) == 0x000030, "Member 'FMyBattleResult::Round_Lose' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Streaks) == 0x000038, "Member 'FMyBattleResult::Streaks' has a wrong offset!");
static_assert(offsetof(FMyBattleResult, Missions) == 0x000048, "Member 'FMyBattleResult::Missions' has a wrong offset!");

// ScriptStruct Stigma.BattleDecisionDetail
// 0x0098 (0x00D0 - 0x0038)
struct FBattleDecisionDetail final : public FBattleDecision
{
public:
	class FString                                 DediIDS;                                           // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleIDS;                                         // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUserBattleResult>              Players;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMyBattleResult                        MyResult;                                          // 0x0068(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FReward                                Reward;                                            // 0x00C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleDecisionDetail) == 0x000008, "Wrong alignment on FBattleDecisionDetail");
static_assert(sizeof(FBattleDecisionDetail) == 0x0000D0, "Wrong size on FBattleDecisionDetail");
static_assert(offsetof(FBattleDecisionDetail, DediIDS) == 0x000038, "Member 'FBattleDecisionDetail::DediIDS' has a wrong offset!");
static_assert(offsetof(FBattleDecisionDetail, BattleIDS) == 0x000048, "Member 'FBattleDecisionDetail::BattleIDS' has a wrong offset!");
static_assert(offsetof(FBattleDecisionDetail, Players) == 0x000058, "Member 'FBattleDecisionDetail::Players' has a wrong offset!");
static_assert(offsetof(FBattleDecisionDetail, MyResult) == 0x000068, "Member 'FBattleDecisionDetail::MyResult' has a wrong offset!");
static_assert(offsetof(FBattleDecisionDetail, Reward) == 0x0000C0, "Member 'FBattleDecisionDetail::Reward' has a wrong offset!");

// ScriptStruct Stigma.BuffEntry
// 0x0018 (0x0148 - 0x0130)
struct FBuffEntry final : public FItemEntry
{
public:
	TSubclassOf<class UBuffBase>                  BuffClassType;                                     // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffLimitType                                LimitType;                                         // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAC[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Duration;                                          // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffEntry) == 0x000008, "Wrong alignment on FBuffEntry");
static_assert(sizeof(FBuffEntry) == 0x000148, "Wrong size on FBuffEntry");
static_assert(offsetof(FBuffEntry, BuffClassType) == 0x000130, "Member 'FBuffEntry::BuffClassType' has a wrong offset!");
static_assert(offsetof(FBuffEntry, LimitType) == 0x000138, "Member 'FBuffEntry::LimitType' has a wrong offset!");
static_assert(offsetof(FBuffEntry, Duration) == 0x00013C, "Member 'FBuffEntry::Duration' has a wrong offset!");
static_assert(offsetof(FBuffEntry, FadeInTime) == 0x000140, "Member 'FBuffEntry::FadeInTime' has a wrong offset!");
static_assert(offsetof(FBuffEntry, FadeOutTime) == 0x000144, "Member 'FBuffEntry::FadeOutTime' has a wrong offset!");

// ScriptStruct Stigma.BuyLimit
// 0x0020 (0x0020 - 0x0000)
struct FBuyLimit final
{
public:
	EBuyLimitType                                 LimitType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              StartDate;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCount;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAE[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBuyLimit) == 0x000008, "Wrong alignment on FBuyLimit");
static_assert(sizeof(FBuyLimit) == 0x000020, "Wrong size on FBuyLimit");
static_assert(offsetof(FBuyLimit, LimitType) == 0x000000, "Member 'FBuyLimit::LimitType' has a wrong offset!");
static_assert(offsetof(FBuyLimit, StartDate) == 0x000008, "Member 'FBuyLimit::StartDate' has a wrong offset!");
static_assert(offsetof(FBuyLimit, EndDate) == 0x000010, "Member 'FBuyLimit::EndDate' has a wrong offset!");
static_assert(offsetof(FBuyLimit, LimitCount) == 0x000018, "Member 'FBuyLimit::LimitCount' has a wrong offset!");

// ScriptStruct Stigma.CharacterSetting
// 0x0134 (0x0140 - 0x000C)
struct FCharacterSetting final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_1DAF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCharacterInfo                         Char;                                              // 0x0010(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGunSpec                               Gun;                                               // 0x0068(0x00D0)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsConfirmed;                                       // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB0[0x7];                                     // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCharacterSetting) == 0x000008, "Wrong alignment on FCharacterSetting");
static_assert(sizeof(FCharacterSetting) == 0x000140, "Wrong size on FCharacterSetting");
static_assert(offsetof(FCharacterSetting, Char) == 0x000010, "Member 'FCharacterSetting::Char' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, Gun) == 0x000068, "Member 'FCharacterSetting::Gun' has a wrong offset!");
static_assert(offsetof(FCharacterSetting, IsConfirmed) == 0x000138, "Member 'FCharacterSetting::IsConfirmed' has a wrong offset!");

// ScriptStruct Stigma.ServiceRegionConfig
// 0x0058 (0x0060 - 0x0008)
struct FServiceRegionConfig final : public FTableRowBase
{
public:
	EServiceRegion                                ServiceRegion;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB1[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<ERunEnv, struct FServiceConfig>          Configs;                                           // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceRegionConfig) == 0x000008, "Wrong alignment on FServiceRegionConfig");
static_assert(sizeof(FServiceRegionConfig) == 0x000060, "Wrong size on FServiceRegionConfig");
static_assert(offsetof(FServiceRegionConfig, ServiceRegion) == 0x000008, "Member 'FServiceRegionConfig::ServiceRegion' has a wrong offset!");
static_assert(offsetof(FServiceRegionConfig, Configs) == 0x000010, "Member 'FServiceRegionConfig::Configs' has a wrong offset!");

// ScriptStruct Stigma.REQ_FriendList
// 0x0008 (0x0008 - 0x0000)
struct FREQ_FriendList final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_FriendList) == 0x000004, "Wrong alignment on FREQ_FriendList");
static_assert(sizeof(FREQ_FriendList) == 0x000008, "Wrong size on FREQ_FriendList");
static_assert(offsetof(FREQ_FriendList, Offset) == 0x000000, "Member 'FREQ_FriendList::Offset' has a wrong offset!");
static_assert(offsetof(FREQ_FriendList, Limit) == 0x000004, "Member 'FREQ_FriendList::Limit' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadWeeklyBestRank
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadWeeklyBestRank final
{
public:
	TArray<struct FNetWeeklyBestRank>             WeeklyBestRank;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadWeeklyBestRank) == 0x000008, "Wrong alignment on FACK_ReadWeeklyBestRank");
static_assert(sizeof(FACK_ReadWeeklyBestRank) == 0x000010, "Wrong size on FACK_ReadWeeklyBestRank");
static_assert(offsetof(FACK_ReadWeeklyBestRank, WeeklyBestRank) == 0x000000, "Member 'FACK_ReadWeeklyBestRank::WeeklyBestRank' has a wrong offset!");

// ScriptStruct Stigma.GunnerState
// 0x0014 (0x0014 - 0x0000)
struct FGunnerState final
{
public:
	EGunnerState                                  State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoaded;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB2[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BulletCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagazineCount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFirePattern;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB3[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ExtraJobID;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunnerState) == 0x000004, "Wrong alignment on FGunnerState");
static_assert(sizeof(FGunnerState) == 0x000014, "Wrong size on FGunnerState");
static_assert(offsetof(FGunnerState, State) == 0x000000, "Member 'FGunnerState::State' has a wrong offset!");
static_assert(offsetof(FGunnerState, IsLoaded) == 0x000001, "Member 'FGunnerState::IsLoaded' has a wrong offset!");
static_assert(offsetof(FGunnerState, BulletCount) == 0x000004, "Member 'FGunnerState::BulletCount' has a wrong offset!");
static_assert(offsetof(FGunnerState, MagazineCount) == 0x000008, "Member 'FGunnerState::MagazineCount' has a wrong offset!");
static_assert(offsetof(FGunnerState, UseFirePattern) == 0x00000C, "Member 'FGunnerState::UseFirePattern' has a wrong offset!");
static_assert(offsetof(FGunnerState, ExtraJobID) == 0x000010, "Member 'FGunnerState::ExtraJobID' has a wrong offset!");

// ScriptStruct Stigma.DisplayStat
// 0x0020 (0x0020 - 0x0000)
struct FDisplayStat final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB4[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FDisplayStat) == 0x000008, "Wrong alignment on FDisplayStat");
static_assert(sizeof(FDisplayStat) == 0x000020, "Wrong size on FDisplayStat");
static_assert(offsetof(FDisplayStat, DisplayName) == 0x000000, "Member 'FDisplayStat::DisplayName' has a wrong offset!");
static_assert(offsetof(FDisplayStat, Value) == 0x000018, "Member 'FDisplayStat::Value' has a wrong offset!");

// ScriptStruct Stigma.RandomAnimation
// 0x0010 (0x0010 - 0x0000)
struct FRandomAnimation final
{
public:
	float                                         ChanceToPlay;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UAnimSequenceBase*                      Anim;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomAnimation) == 0x000008, "Wrong alignment on FRandomAnimation");
static_assert(sizeof(FRandomAnimation) == 0x000010, "Wrong size on FRandomAnimation");
static_assert(offsetof(FRandomAnimation, ChanceToPlay) == 0x000000, "Member 'FRandomAnimation::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FRandomAnimation, Anim) == 0x000008, "Member 'FRandomAnimation::Anim' has a wrong offset!");

// ScriptStruct Stigma.ACK_OpenInvenItems
// 0x0020 (0x0020 - 0x0000)
struct FACK_OpenInvenItems final
{
public:
	struct FRewardPlain                           RewardPlain;                                       // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_OpenInvenItems) == 0x000008, "Wrong alignment on FACK_OpenInvenItems");
static_assert(sizeof(FACK_OpenInvenItems) == 0x000020, "Wrong size on FACK_OpenInvenItems");
static_assert(offsetof(FACK_OpenInvenItems, RewardPlain) == 0x000000, "Member 'FACK_OpenInvenItems::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_BattlePassHack
// 0x0030 (0x0030 - 0x0000)
struct FREQ_CHEAT_BattlePassHack final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Act;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB6[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_BattlePassHack) == 0x000008, "Wrong alignment on FREQ_CHEAT_BattlePassHack");
static_assert(sizeof(FREQ_CHEAT_BattlePassHack) == 0x000030, "Wrong size on FREQ_CHEAT_BattlePassHack");
static_assert(offsetof(FREQ_CHEAT_BattlePassHack, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_BattlePassHack::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_BattlePassHack, PassIDN) == 0x000008, "Member 'FREQ_CHEAT_BattlePassHack::PassIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_BattlePassHack, Act) == 0x000018, "Member 'FREQ_CHEAT_BattlePassHack::Act' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_BattlePassHack, Param) == 0x000028, "Member 'FREQ_CHEAT_BattlePassHack::Param' has a wrong offset!");

// ScriptStruct Stigma.NetRecruitRewardHistory
// 0x0010 (0x0010 - 0x0000)
struct FNetRecruitRewardHistory final
{
public:
	TArray<struct FNetRecruitRewardItemSet>       RecruitSet;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetRecruitRewardHistory) == 0x000008, "Wrong alignment on FNetRecruitRewardHistory");
static_assert(sizeof(FNetRecruitRewardHistory) == 0x000010, "Wrong size on FNetRecruitRewardHistory");
static_assert(offsetof(FNetRecruitRewardHistory, RecruitSet) == 0x000000, "Member 'FNetRecruitRewardHistory::RecruitSet' has a wrong offset!");

// ScriptStruct Stigma.NetRecruitHistory
// 0x0048 (0x0048 - 0x0000)
struct FNetRecruitHistory final
{
public:
	struct FItemID_Recruit                        RID;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Currency                       CType;                                             // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CCnt;                                              // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB8[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetRecruitRewardHistory>       Item;                                              // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              BuyAt;                                             // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetRecruitHistory) == 0x000008, "Wrong alignment on FNetRecruitHistory");
static_assert(sizeof(FNetRecruitHistory) == 0x000048, "Wrong size on FNetRecruitHistory");
static_assert(offsetof(FNetRecruitHistory, RID) == 0x000000, "Member 'FNetRecruitHistory::RID' has a wrong offset!");
static_assert(offsetof(FNetRecruitHistory, Index) == 0x000010, "Member 'FNetRecruitHistory::Index' has a wrong offset!");
static_assert(offsetof(FNetRecruitHistory, CType) == 0x000018, "Member 'FNetRecruitHistory::CType' has a wrong offset!");
static_assert(offsetof(FNetRecruitHistory, CCnt) == 0x000028, "Member 'FNetRecruitHistory::CCnt' has a wrong offset!");
static_assert(offsetof(FNetRecruitHistory, Item) == 0x000030, "Member 'FNetRecruitHistory::Item' has a wrong offset!");
static_assert(offsetof(FNetRecruitHistory, BuyAt) == 0x000040, "Member 'FNetRecruitHistory::BuyAt' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadHistoryRecruit
// 0x0020 (0x0020 - 0x0000)
struct FACK_ReadHistoryRecruit final
{
public:
	ERecruitType                                  RType;                                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DB9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetRecruitHistory>             History;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Cursor;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadHistoryRecruit) == 0x000008, "Wrong alignment on FACK_ReadHistoryRecruit");
static_assert(sizeof(FACK_ReadHistoryRecruit) == 0x000020, "Wrong size on FACK_ReadHistoryRecruit");
static_assert(offsetof(FACK_ReadHistoryRecruit, RType) == 0x000000, "Member 'FACK_ReadHistoryRecruit::RType' has a wrong offset!");
static_assert(offsetof(FACK_ReadHistoryRecruit, History) == 0x000008, "Member 'FACK_ReadHistoryRecruit::History' has a wrong offset!");
static_assert(offsetof(FACK_ReadHistoryRecruit, Cursor) == 0x000018, "Member 'FACK_ReadHistoryRecruit::Cursor' has a wrong offset!");
static_assert(offsetof(FACK_ReadHistoryRecruit, Total) == 0x00001C, "Member 'FACK_ReadHistoryRecruit::Total' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_Respawn
// 0x0018 (0x0048 - 0x0030)
struct FBattleLog_Respawn final : public FStigmaLogBase_User
{
public:
	struct FVector                                Position;                                          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_Respawn) == 0x000008, "Wrong alignment on FBattleLog_Respawn");
static_assert(sizeof(FBattleLog_Respawn) == 0x000048, "Wrong size on FBattleLog_Respawn");
static_assert(offsetof(FBattleLog_Respawn, Position) == 0x000030, "Member 'FBattleLog_Respawn::Position' has a wrong offset!");

// ScriptStruct Stigma.NetProfileStatistic
// 0x0078 (0x0078 - 0x0000)
struct FNetProfileStatistic final
{
public:
	struct FNetStatisticKDAPlain                  KDA;                                               // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticWinPlain                  Win;                                               // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticMVPPlain                  MVP;                                               // 0x0030(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticHitRate                   HitRate;                                           // 0x0040(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetStatisticDamagePlain               Damage;                                            // 0x0058(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetProfileStatistic) == 0x000008, "Wrong alignment on FNetProfileStatistic");
static_assert(sizeof(FNetProfileStatistic) == 0x000078, "Wrong size on FNetProfileStatistic");
static_assert(offsetof(FNetProfileStatistic, KDA) == 0x000000, "Member 'FNetProfileStatistic::KDA' has a wrong offset!");
static_assert(offsetof(FNetProfileStatistic, Win) == 0x000020, "Member 'FNetProfileStatistic::Win' has a wrong offset!");
static_assert(offsetof(FNetProfileStatistic, MVP) == 0x000030, "Member 'FNetProfileStatistic::MVP' has a wrong offset!");
static_assert(offsetof(FNetProfileStatistic, HitRate) == 0x000040, "Member 'FNetProfileStatistic::HitRate' has a wrong offset!");
static_assert(offsetof(FNetProfileStatistic, Damage) == 0x000058, "Member 'FNetProfileStatistic::Damage' has a wrong offset!");

// ScriptStruct Stigma.ACK_ProfileStatisticRead
// 0x0078 (0x0078 - 0x0000)
struct FACK_ProfileStatisticRead final
{
public:
	struct FNetProfileStatistic                   ProfileStatistic;                                  // 0x0000(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ProfileStatisticRead) == 0x000008, "Wrong alignment on FACK_ProfileStatisticRead");
static_assert(sizeof(FACK_ProfileStatisticRead) == 0x000078, "Wrong size on FACK_ProfileStatisticRead");
static_assert(offsetof(FACK_ProfileStatisticRead, ProfileStatistic) == 0x000000, "Member 'FACK_ProfileStatisticRead::ProfileStatistic' has a wrong offset!");

// ScriptStruct Stigma.InteractionOffset
// 0x0028 (0x0028 - 0x0000)
struct FInteractionOffset final
{
public:
	struct FVector                                OffsetInLocalSpace;                                // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tall;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PickupBaseHeight;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBA[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FInteractionOffset) == 0x000008, "Wrong alignment on FInteractionOffset");
static_assert(sizeof(FInteractionOffset) == 0x000028, "Wrong size on FInteractionOffset");
static_assert(offsetof(FInteractionOffset, OffsetInLocalSpace) == 0x000000, "Member 'FInteractionOffset::OffsetInLocalSpace' has a wrong offset!");
static_assert(offsetof(FInteractionOffset, Tall) == 0x000018, "Member 'FInteractionOffset::Tall' has a wrong offset!");
static_assert(offsetof(FInteractionOffset, HalfHeight) == 0x00001C, "Member 'FInteractionOffset::HalfHeight' has a wrong offset!");
static_assert(offsetof(FInteractionOffset, PickupBaseHeight) == 0x000020, "Member 'FInteractionOffset::PickupBaseHeight' has a wrong offset!");

// ScriptStruct Stigma.TextCheckBoxGroupEntry
// 0x0020 (0x0020 - 0x0000)
struct FTextCheckBoxGroupEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextCheckBoxGroupEntry) == 0x000008, "Wrong alignment on FTextCheckBoxGroupEntry");
static_assert(sizeof(FTextCheckBoxGroupEntry) == 0x000020, "Wrong size on FTextCheckBoxGroupEntry");
static_assert(offsetof(FTextCheckBoxGroupEntry, ID) == 0x000000, "Member 'FTextCheckBoxGroupEntry::ID' has a wrong offset!");
static_assert(offsetof(FTextCheckBoxGroupEntry, Text) == 0x000008, "Member 'FTextCheckBoxGroupEntry::Text' has a wrong offset!");

// ScriptStruct Stigma.LobbyPageConfig
// 0x0028 (0x0028 - 0x0000)
struct FLobbyPageConfig final
{
public:
	ELobbyManneguinVisible                        MannequinVisible;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UUI_LobbyPage>              PageUIClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserPlayingAt                                PlayingAt;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowChatBox;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCurrencyBox;                                   // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeHiddinWhenOpenPopup;                          // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowGNBOver;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBC[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemID_Currency>               ShowCurrencyList;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyPageConfig) == 0x000008, "Wrong alignment on FLobbyPageConfig");
static_assert(sizeof(FLobbyPageConfig) == 0x000028, "Wrong size on FLobbyPageConfig");
static_assert(offsetof(FLobbyPageConfig, MannequinVisible) == 0x000000, "Member 'FLobbyPageConfig::MannequinVisible' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, PageUIClass) == 0x000008, "Member 'FLobbyPageConfig::PageUIClass' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, PlayingAt) == 0x000010, "Member 'FLobbyPageConfig::PlayingAt' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, ShowChatBox) == 0x000011, "Member 'FLobbyPageConfig::ShowChatBox' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, ShowCurrencyBox) == 0x000012, "Member 'FLobbyPageConfig::ShowCurrencyBox' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, CanBeHiddinWhenOpenPopup) == 0x000013, "Member 'FLobbyPageConfig::CanBeHiddinWhenOpenPopup' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, ShowGNBOver) == 0x000014, "Member 'FLobbyPageConfig::ShowGNBOver' has a wrong offset!");
static_assert(offsetof(FLobbyPageConfig, ShowCurrencyList) == 0x000018, "Member 'FLobbyPageConfig::ShowCurrencyList' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_Damage
// 0x0028 (0x0058 - 0x0030)
struct FBattleLog_Damage final : public FStigmaLogBase_User
{
public:
	struct FUserID                                VictimID;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbnormals                             Abnormals;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBD[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDamageReport                          Damage;                                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PrevHP;                                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterHP;                                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBE[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleLog_Damage) == 0x000008, "Wrong alignment on FBattleLog_Damage");
static_assert(sizeof(FBattleLog_Damage) == 0x000058, "Wrong size on FBattleLog_Damage");
static_assert(offsetof(FBattleLog_Damage, VictimID) == 0x000030, "Member 'FBattleLog_Damage::VictimID' has a wrong offset!");
static_assert(offsetof(FBattleLog_Damage, Abnormals) == 0x000038, "Member 'FBattleLog_Damage::Abnormals' has a wrong offset!");
static_assert(offsetof(FBattleLog_Damage, Damage) == 0x00003C, "Member 'FBattleLog_Damage::Damage' has a wrong offset!");
static_assert(offsetof(FBattleLog_Damage, PrevHP) == 0x00004C, "Member 'FBattleLog_Damage::PrevHP' has a wrong offset!");
static_assert(offsetof(FBattleLog_Damage, AfterHP) == 0x000050, "Member 'FBattleLog_Damage::AfterHP' has a wrong offset!");

// ScriptStruct Stigma.TextColor
// 0x0040 (0x0040 - 0x0000)
struct FTextColor final
{
public:
	struct FLinearColor                           Default;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Focused;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Selected;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Disabled;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextColor) == 0x000004, "Wrong alignment on FTextColor");
static_assert(sizeof(FTextColor) == 0x000040, "Wrong size on FTextColor");
static_assert(offsetof(FTextColor, Default) == 0x000000, "Member 'FTextColor::Default' has a wrong offset!");
static_assert(offsetof(FTextColor, Focused) == 0x000010, "Member 'FTextColor::Focused' has a wrong offset!");
static_assert(offsetof(FTextColor, Selected) == 0x000020, "Member 'FTextColor::Selected' has a wrong offset!");
static_assert(offsetof(FTextColor, Disabled) == 0x000030, "Member 'FTextColor::Disabled' has a wrong offset!");

// ScriptStruct Stigma.TextStyle
// 0x0098 (0x0098 - 0x0000)
struct FTextStyle final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTextColor                             TextColor;                                         // 0x0058(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextStyle) == 0x000008, "Wrong alignment on FTextStyle");
static_assert(sizeof(FTextStyle) == 0x000098, "Wrong size on FTextStyle");
static_assert(offsetof(FTextStyle, Font) == 0x000000, "Member 'FTextStyle::Font' has a wrong offset!");
static_assert(offsetof(FTextStyle, TextColor) == 0x000058, "Member 'FTextStyle::TextColor' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_ResultStat
// 0x0020 (0x0048 - 0x0028)
struct FBattleLog_ResultStat final : public FStigmaLogBase
{
public:
	int32                                         PlayTime;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total_Round;                                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total_Kill;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total_Assist;                                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Total_Exp;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserCount_Max;                                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserCount_Final;                                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DBF[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleLog_ResultStat) == 0x000008, "Wrong alignment on FBattleLog_ResultStat");
static_assert(sizeof(FBattleLog_ResultStat) == 0x000048, "Wrong size on FBattleLog_ResultStat");
static_assert(offsetof(FBattleLog_ResultStat, PlayTime) == 0x000028, "Member 'FBattleLog_ResultStat::PlayTime' has a wrong offset!");
static_assert(offsetof(FBattleLog_ResultStat, Total_Round) == 0x00002C, "Member 'FBattleLog_ResultStat::Total_Round' has a wrong offset!");
static_assert(offsetof(FBattleLog_ResultStat, Total_Kill) == 0x000030, "Member 'FBattleLog_ResultStat::Total_Kill' has a wrong offset!");
static_assert(offsetof(FBattleLog_ResultStat, Total_Assist) == 0x000034, "Member 'FBattleLog_ResultStat::Total_Assist' has a wrong offset!");
static_assert(offsetof(FBattleLog_ResultStat, Total_Exp) == 0x000038, "Member 'FBattleLog_ResultStat::Total_Exp' has a wrong offset!");
static_assert(offsetof(FBattleLog_ResultStat, UserCount_Max) == 0x00003C, "Member 'FBattleLog_ResultStat::UserCount_Max' has a wrong offset!");
static_assert(offsetof(FBattleLog_ResultStat, UserCount_Final) == 0x000040, "Member 'FBattleLog_ResultStat::UserCount_Final' has a wrong offset!");

// ScriptStruct Stigma.AI_Characteristic
// 0x000C (0x000C - 0x0000)
struct FAI_Characteristic final
{
public:
	int32                                         ELO;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coward;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shooting_Oriented;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAI_Characteristic) == 0x000004, "Wrong alignment on FAI_Characteristic");
static_assert(sizeof(FAI_Characteristic) == 0x00000C, "Wrong size on FAI_Characteristic");
static_assert(offsetof(FAI_Characteristic, ELO) == 0x000000, "Member 'FAI_Characteristic::ELO' has a wrong offset!");
static_assert(offsetof(FAI_Characteristic, Coward) == 0x000004, "Member 'FAI_Characteristic::Coward' has a wrong offset!");
static_assert(offsetof(FAI_Characteristic, Shooting_Oriented) == 0x000008, "Member 'FAI_Characteristic::Shooting_Oriented' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_UserLevel
// 0x0010 (0x0010 - 0x0000)
struct FREQ_CHEAT_UserLevel final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC0[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_UserLevel) == 0x000008, "Wrong alignment on FREQ_CHEAT_UserLevel");
static_assert(sizeof(FREQ_CHEAT_UserLevel) == 0x000010, "Wrong size on FREQ_CHEAT_UserLevel");
static_assert(offsetof(FREQ_CHEAT_UserLevel, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_UserLevel::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_UserLevel, Level) == 0x000008, "Member 'FREQ_CHEAT_UserLevel::Level' has a wrong offset!");

// ScriptStruct Stigma.PassiveSkill
// 0x0018 (0x0018 - 0x0000)
struct FPassiveSkill final
{
public:
	struct FPassiveSkillID                        PassiveSkillIDN;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FPassiveSkill) == 0x000008, "Wrong alignment on FPassiveSkill");
static_assert(sizeof(FPassiveSkill) == 0x000018, "Wrong size on FPassiveSkill");
static_assert(offsetof(FPassiveSkill, PassiveSkillIDN) == 0x000000, "Member 'FPassiveSkill::PassiveSkillIDN' has a wrong offset!");
static_assert(offsetof(FPassiveSkill, Level) == 0x000010, "Member 'FPassiveSkill::Level' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_JoinBattle
// 0x0008 (0x0038 - 0x0030)
struct FBattleLog_JoinBattle final : public FStigmaLogBase_User
{
public:
	ETeams                                        Team;                                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC2[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattleLog_JoinBattle) == 0x000008, "Wrong alignment on FBattleLog_JoinBattle");
static_assert(sizeof(FBattleLog_JoinBattle) == 0x000038, "Wrong size on FBattleLog_JoinBattle");
static_assert(offsetof(FBattleLog_JoinBattle, Team) == 0x000030, "Member 'FBattleLog_JoinBattle::Team' has a wrong offset!");

// ScriptStruct Stigma.ACK_Friend
// 0x0010 (0x0010 - 0x0000)
struct FACK_Friend final
{
public:
	struct FUserID                                FromIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_Friend) == 0x000008, "Wrong alignment on FACK_Friend");
static_assert(sizeof(FACK_Friend) == 0x000010, "Wrong size on FACK_Friend");
static_assert(offsetof(FACK_Friend, FromIDN) == 0x000000, "Member 'FACK_Friend::FromIDN' has a wrong offset!");
static_assert(offsetof(FACK_Friend, ToIDN) == 0x000008, "Member 'FACK_Friend::ToIDN' has a wrong offset!");

// ScriptStruct Stigma.AlertInfo
// 0x0020 (0x0020 - 0x0000)
struct FAlertInfo final
{
public:
	EAlertType                                    AlertType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Nickname;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC4[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAlertInfo) == 0x000008, "Wrong alignment on FAlertInfo");
static_assert(sizeof(FAlertInfo) == 0x000020, "Wrong size on FAlertInfo");
static_assert(offsetof(FAlertInfo, AlertType) == 0x000000, "Member 'FAlertInfo::AlertType' has a wrong offset!");
static_assert(offsetof(FAlertInfo, Nickname) == 0x000008, "Member 'FAlertInfo::Nickname' has a wrong offset!");
static_assert(offsetof(FAlertInfo, Param) == 0x000018, "Member 'FAlertInfo::Param' has a wrong offset!");

// ScriptStruct Stigma.FocusDrivers
// 0x0010 (0x0010 - 0x0000)
struct FFocusDrivers final
{
public:
	TArray<class UFocusDriver*>                   Drivers;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFocusDrivers) == 0x000008, "Wrong alignment on FFocusDrivers");
static_assert(sizeof(FFocusDrivers) == 0x000010, "Wrong size on FFocusDrivers");
static_assert(offsetof(FFocusDrivers, Drivers) == 0x000000, "Member 'FFocusDrivers::Drivers' has a wrong offset!");

// ScriptStruct Stigma.NetRecruitInfo
// 0x0018 (0x0018 - 0x0000)
struct FNetRecruitInfo final
{
public:
	struct FItemID_Recruit                        RID;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResultCode                                   RCode;                                             // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FNetRecruitInfo) == 0x000008, "Wrong alignment on FNetRecruitInfo");
static_assert(sizeof(FNetRecruitInfo) == 0x000018, "Wrong size on FNetRecruitInfo");
static_assert(offsetof(FNetRecruitInfo, RID) == 0x000000, "Member 'FNetRecruitInfo::RID' has a wrong offset!");
static_assert(offsetof(FNetRecruitInfo, RCode) == 0x000010, "Member 'FNetRecruitInfo::RCode' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadRecruit
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadRecruit final
{
public:
	TArray<struct FNetRecruitInfo>                RInfo;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadRecruit) == 0x000008, "Wrong alignment on FACK_ReadRecruit");
static_assert(sizeof(FACK_ReadRecruit) == 0x000010, "Wrong size on FACK_ReadRecruit");
static_assert(offsetof(FACK_ReadRecruit, RInfo) == 0x000000, "Member 'FACK_ReadRecruit::RInfo' has a wrong offset!");

// ScriptStruct Stigma.GoldBoxConfig
// 0x0078 (0x0078 - 0x0000)
struct FGoldBoxConfig final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidgetHeight;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldFollowPlayer;                                // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC6[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Gold;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SameTypeSpawnRate;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPickup;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC7[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         AutoPickupDistance;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            AdditionalRandomGoldWeightMap;                     // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ShowIndicator;                                     // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC8[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         DelayTime;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoldBoxConfig) == 0x000008, "Wrong alignment on FGoldBoxConfig");
static_assert(sizeof(FGoldBoxConfig) == 0x000078, "Wrong size on FGoldBoxConfig");
static_assert(offsetof(FGoldBoxConfig, Mesh) == 0x000000, "Member 'FGoldBoxConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, WidgetHeight) == 0x000008, "Member 'FGoldBoxConfig::WidgetHeight' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, ShouldFollowPlayer) == 0x00000C, "Member 'FGoldBoxConfig::ShouldFollowPlayer' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, Gold) == 0x000010, "Member 'FGoldBoxConfig::Gold' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, SameTypeSpawnRate) == 0x000014, "Member 'FGoldBoxConfig::SameTypeSpawnRate' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, AutoPickup) == 0x000018, "Member 'FGoldBoxConfig::AutoPickup' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, AutoPickupDistance) == 0x00001C, "Member 'FGoldBoxConfig::AutoPickupDistance' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, AdditionalRandomGoldWeightMap) == 0x000020, "Member 'FGoldBoxConfig::AdditionalRandomGoldWeightMap' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, ShowIndicator) == 0x000070, "Member 'FGoldBoxConfig::ShowIndicator' has a wrong offset!");
static_assert(offsetof(FGoldBoxConfig, DelayTime) == 0x000074, "Member 'FGoldBoxConfig::DelayTime' has a wrong offset!");

// ScriptStruct Stigma.GameNotifyInfo
// 0x0018 (0x0018 - 0x0000)
struct FGameNotifyInfo final
{
public:
	class FName                                   Notify_Name;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooltime;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC9[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGameNotifyInfo) == 0x000004, "Wrong alignment on FGameNotifyInfo");
static_assert(sizeof(FGameNotifyInfo) == 0x000018, "Wrong size on FGameNotifyInfo");
static_assert(offsetof(FGameNotifyInfo, Notify_Name) == 0x000000, "Member 'FGameNotifyInfo::Notify_Name' has a wrong offset!");
static_assert(offsetof(FGameNotifyInfo, Cooltime) == 0x000008, "Member 'FGameNotifyInfo::Cooltime' has a wrong offset!");
static_assert(offsetof(FGameNotifyInfo, Duration) == 0x00000C, "Member 'FGameNotifyInfo::Duration' has a wrong offset!");

// ScriptStruct Stigma.MatchELORange
// 0x0008 (0x0008 - 0x0000)
struct FMatchELORange final
{
public:
	int32                                         Sec;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ELOGap;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchELORange) == 0x000004, "Wrong alignment on FMatchELORange");
static_assert(sizeof(FMatchELORange) == 0x000008, "Wrong size on FMatchELORange");
static_assert(offsetof(FMatchELORange, Sec) == 0x000000, "Member 'FMatchELORange::Sec' has a wrong offset!");
static_assert(offsetof(FMatchELORange, ELOGap) == 0x000004, "Member 'FMatchELORange::ELOGap' has a wrong offset!");

// ScriptStruct Stigma.CLB_GoodsStoreEntry
// 0x0010 (0x0018 - 0x0008)
struct FCLB_GoodsStoreEntry final : public FTableRowBase
{
public:
	TArray<class FString>                         GoodsIDList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCLB_GoodsStoreEntry) == 0x000008, "Wrong alignment on FCLB_GoodsStoreEntry");
static_assert(sizeof(FCLB_GoodsStoreEntry) == 0x000018, "Wrong size on FCLB_GoodsStoreEntry");
static_assert(offsetof(FCLB_GoodsStoreEntry, GoodsIDList) == 0x000008, "Member 'FCLB_GoodsStoreEntry::GoodsIDList' has a wrong offset!");

// ScriptStruct Stigma.ACK_GetUserReportJWT
// 0x0010 (0x0010 - 0x0000)
struct FACK_GetUserReportJWT final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_GetUserReportJWT) == 0x000008, "Wrong alignment on FACK_GetUserReportJWT");
static_assert(sizeof(FACK_GetUserReportJWT) == 0x000010, "Wrong size on FACK_GetUserReportJWT");
static_assert(offsetof(FACK_GetUserReportJWT, Token) == 0x000000, "Member 'FACK_GetUserReportJWT::Token' has a wrong offset!");

// ScriptStruct Stigma.Missions
// 0x0010 (0x0010 - 0x0000)
struct FMissions final
{
public:
	TArray<class UMission*>                       Missions;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissions) == 0x000008, "Wrong alignment on FMissions");
static_assert(sizeof(FMissions) == 0x000010, "Wrong size on FMissions");
static_assert(offsetof(FMissions, Missions) == 0x000000, "Member 'FMissions::Missions' has a wrong offset!");

// ScriptStruct Stigma.AnnihilationRule
// 0x0020 (0x0020 - 0x0000)
struct FAnnihilationRule final
{
public:
	int32                                         EnemyShowTimeSec;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakInAllowedRound;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinishRoundPhaseTime_FactionChanged;               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class USoundBase*                             AlertSound_1Min;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             AlertSound_30Sec;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnnihilationRule) == 0x000008, "Wrong alignment on FAnnihilationRule");
static_assert(sizeof(FAnnihilationRule) == 0x000020, "Wrong size on FAnnihilationRule");
static_assert(offsetof(FAnnihilationRule, EnemyShowTimeSec) == 0x000000, "Member 'FAnnihilationRule::EnemyShowTimeSec' has a wrong offset!");
static_assert(offsetof(FAnnihilationRule, BreakInAllowedRound) == 0x000004, "Member 'FAnnihilationRule::BreakInAllowedRound' has a wrong offset!");
static_assert(offsetof(FAnnihilationRule, FinishRoundPhaseTime_FactionChanged) == 0x000008, "Member 'FAnnihilationRule::FinishRoundPhaseTime_FactionChanged' has a wrong offset!");
static_assert(offsetof(FAnnihilationRule, AlertSound_1Min) == 0x000010, "Member 'FAnnihilationRule::AlertSound_1Min' has a wrong offset!");
static_assert(offsetof(FAnnihilationRule, AlertSound_30Sec) == 0x000018, "Member 'FAnnihilationRule::AlertSound_30Sec' has a wrong offset!");

// ScriptStruct Stigma.ACK_EmblemUpdate
// 0x0001 (0x0001 - 0x0000)
struct FACK_EmblemUpdate final
{
public:
	uint8                                         Pad_1DCB[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_EmblemUpdate) == 0x000001, "Wrong alignment on FACK_EmblemUpdate");
static_assert(sizeof(FACK_EmblemUpdate) == 0x000001, "Wrong size on FACK_EmblemUpdate");

// ScriptStruct Stigma.SectorInfo
// 0x001C (0x001C - 0x0000)
struct FSectorInfo final
{
public:
	ECLB_SectorType                               SectorType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Time;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainCount;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentScore;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalScore;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSectorIndex;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalSectorIndex;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSectorInfo) == 0x000004, "Wrong alignment on FSectorInfo");
static_assert(sizeof(FSectorInfo) == 0x00001C, "Wrong size on FSectorInfo");
static_assert(offsetof(FSectorInfo, SectorType) == 0x000000, "Member 'FSectorInfo::SectorType' has a wrong offset!");
static_assert(offsetof(FSectorInfo, Time) == 0x000004, "Member 'FSectorInfo::Time' has a wrong offset!");
static_assert(offsetof(FSectorInfo, RemainCount) == 0x000008, "Member 'FSectorInfo::RemainCount' has a wrong offset!");
static_assert(offsetof(FSectorInfo, CurrentScore) == 0x00000C, "Member 'FSectorInfo::CurrentScore' has a wrong offset!");
static_assert(offsetof(FSectorInfo, GoalScore) == 0x000010, "Member 'FSectorInfo::GoalScore' has a wrong offset!");
static_assert(offsetof(FSectorInfo, CurrentSectorIndex) == 0x000014, "Member 'FSectorInfo::CurrentSectorIndex' has a wrong offset!");
static_assert(offsetof(FSectorInfo, GoalSectorIndex) == 0x000018, "Member 'FSectorInfo::GoalSectorIndex' has a wrong offset!");

// ScriptStruct Stigma.ACK_ProfileCardUpdate
// 0x0001 (0x0001 - 0x0000)
struct FACK_ProfileCardUpdate final
{
public:
	uint8                                         Pad_1DCD[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_ProfileCardUpdate) == 0x000001, "Wrong alignment on FACK_ProfileCardUpdate");
static_assert(sizeof(FACK_ProfileCardUpdate) == 0x000001, "Wrong size on FACK_ProfileCardUpdate");

// ScriptStruct Stigma.RoundStartNotify
// 0x000C (0x000C - 0x0000)
struct FRoundStartNotify final
{
public:
	int32                                         Gold;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinBonusGold;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundBonusGold;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoundStartNotify) == 0x000004, "Wrong alignment on FRoundStartNotify");
static_assert(sizeof(FRoundStartNotify) == 0x00000C, "Wrong size on FRoundStartNotify");
static_assert(offsetof(FRoundStartNotify, Gold) == 0x000000, "Member 'FRoundStartNotify::Gold' has a wrong offset!");
static_assert(offsetof(FRoundStartNotify, WinBonusGold) == 0x000004, "Member 'FRoundStartNotify::WinBonusGold' has a wrong offset!");
static_assert(offsetof(FRoundStartNotify, RoundBonusGold) == 0x000008, "Member 'FRoundStartNotify::RoundBonusGold' has a wrong offset!");

// ScriptStruct Stigma.BC_CompetitionEnd
// 0x0030 (0x0030 - 0x0000)
struct FBC_CompetitionEnd final
{
public:
	ECompetitionType                              CompetitionType;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Rank;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardPlain                           RewardPlain;                                       // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Point;                                             // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCF[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_CompetitionEnd) == 0x000008, "Wrong alignment on FBC_CompetitionEnd");
static_assert(sizeof(FBC_CompetitionEnd) == 0x000030, "Wrong size on FBC_CompetitionEnd");
static_assert(offsetof(FBC_CompetitionEnd, CompetitionType) == 0x000000, "Member 'FBC_CompetitionEnd::CompetitionType' has a wrong offset!");
static_assert(offsetof(FBC_CompetitionEnd, Rank) == 0x000004, "Member 'FBC_CompetitionEnd::Rank' has a wrong offset!");
static_assert(offsetof(FBC_CompetitionEnd, RewardPlain) == 0x000008, "Member 'FBC_CompetitionEnd::RewardPlain' has a wrong offset!");
static_assert(offsetof(FBC_CompetitionEnd, Point) == 0x000028, "Member 'FBC_CompetitionEnd::Point' has a wrong offset!");

// ScriptStruct Stigma.UserBattleResult_ExpDetail
// 0x0024 (0x0024 - 0x0000)
struct FUserBattleResult_ExpDetail final
{
public:
	int32                                         Exp_Playtime;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Round;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Final;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Kills;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Assists;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Resurrect;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EXP_Learn;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Left_Free;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp_Left_Charge;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserBattleResult_ExpDetail) == 0x000004, "Wrong alignment on FUserBattleResult_ExpDetail");
static_assert(sizeof(FUserBattleResult_ExpDetail) == 0x000024, "Wrong size on FUserBattleResult_ExpDetail");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Playtime) == 0x000000, "Member 'FUserBattleResult_ExpDetail::Exp_Playtime' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Round) == 0x000004, "Member 'FUserBattleResult_ExpDetail::Exp_Round' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Final) == 0x000008, "Member 'FUserBattleResult_ExpDetail::Exp_Final' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Kills) == 0x00000C, "Member 'FUserBattleResult_ExpDetail::Exp_Kills' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Assists) == 0x000010, "Member 'FUserBattleResult_ExpDetail::Exp_Assists' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Resurrect) == 0x000014, "Member 'FUserBattleResult_ExpDetail::Exp_Resurrect' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, EXP_Learn) == 0x000018, "Member 'FUserBattleResult_ExpDetail::EXP_Learn' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Left_Free) == 0x00001C, "Member 'FUserBattleResult_ExpDetail::Exp_Left_Free' has a wrong offset!");
static_assert(offsetof(FUserBattleResult_ExpDetail, Exp_Left_Charge) == 0x000020, "Member 'FUserBattleResult_ExpDetail::Exp_Left_Charge' has a wrong offset!");

// ScriptStruct Stigma.TooltipKeyInfo
// 0x0030 (0x0030 - 0x0000)
struct FTooltipKeyInfo final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InfoText;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTooltipKeyInfo) == 0x000008, "Wrong alignment on FTooltipKeyInfo");
static_assert(sizeof(FTooltipKeyInfo) == 0x000030, "Wrong size on FTooltipKeyInfo");
static_assert(offsetof(FTooltipKeyInfo, Key) == 0x000000, "Member 'FTooltipKeyInfo::Key' has a wrong offset!");
static_assert(offsetof(FTooltipKeyInfo, InfoText) == 0x000018, "Member 'FTooltipKeyInfo::InfoText' has a wrong offset!");

// ScriptStruct Stigma.ChatMsg
// 0x0058 (0x0058 - 0x0000)
struct FChatMsg final
{
public:
	EChatType                                     ChatType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserID                                FromID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FromNickname;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ChatContext;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UseCustomColor;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD1[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLinearColor                           CustomColor;                                       // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD2[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FChatMsg) == 0x000008, "Wrong alignment on FChatMsg");
static_assert(sizeof(FChatMsg) == 0x000058, "Wrong size on FChatMsg");
static_assert(offsetof(FChatMsg, ChatType) == 0x000000, "Member 'FChatMsg::ChatType' has a wrong offset!");
static_assert(offsetof(FChatMsg, FromID) == 0x000008, "Member 'FChatMsg::FromID' has a wrong offset!");
static_assert(offsetof(FChatMsg, FromNickname) == 0x000010, "Member 'FChatMsg::FromNickname' has a wrong offset!");
static_assert(offsetof(FChatMsg, ChatContext) == 0x000028, "Member 'FChatMsg::ChatContext' has a wrong offset!");
static_assert(offsetof(FChatMsg, UseCustomColor) == 0x000040, "Member 'FChatMsg::UseCustomColor' has a wrong offset!");
static_assert(offsetof(FChatMsg, CustomColor) == 0x000044, "Member 'FChatMsg::CustomColor' has a wrong offset!");

// ScriptStruct Stigma.NetMail
// 0x0060 (0x0060 - 0x0000)
struct FNetMail final
{
public:
	int32                                         MailIDN;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailType                                     MailType;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              ExpireAt;                                          // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailState                                    Status;                                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD4[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Title;                                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardPlain                           RewardPlain;                                       // 0x0040(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetMail) == 0x000008, "Wrong alignment on FNetMail");
static_assert(sizeof(FNetMail) == 0x000060, "Wrong size on FNetMail");
static_assert(offsetof(FNetMail, MailIDN) == 0x000000, "Member 'FNetMail::MailIDN' has a wrong offset!");
static_assert(offsetof(FNetMail, MailType) == 0x000004, "Member 'FNetMail::MailType' has a wrong offset!");
static_assert(offsetof(FNetMail, ExpireAt) == 0x000008, "Member 'FNetMail::ExpireAt' has a wrong offset!");
static_assert(offsetof(FNetMail, CreatedAt) == 0x000010, "Member 'FNetMail::CreatedAt' has a wrong offset!");
static_assert(offsetof(FNetMail, Status) == 0x000018, "Member 'FNetMail::Status' has a wrong offset!");
static_assert(offsetof(FNetMail, Title) == 0x000020, "Member 'FNetMail::Title' has a wrong offset!");
static_assert(offsetof(FNetMail, Body) == 0x000030, "Member 'FNetMail::Body' has a wrong offset!");
static_assert(offsetof(FNetMail, RewardPlain) == 0x000040, "Member 'FNetMail::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.ACK_MailRead
// 0x0018 (0x0018 - 0x0000)
struct FACK_MailRead final
{
public:
	TArray<struct FNetMail>                       Mails;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnreadMailCount;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_MailRead) == 0x000008, "Wrong alignment on FACK_MailRead");
static_assert(sizeof(FACK_MailRead) == 0x000018, "Wrong size on FACK_MailRead");
static_assert(offsetof(FACK_MailRead, Mails) == 0x000000, "Member 'FACK_MailRead::Mails' has a wrong offset!");
static_assert(offsetof(FACK_MailRead, UnreadMailCount) == 0x000010, "Member 'FACK_MailRead::UnreadMailCount' has a wrong offset!");

// ScriptStruct Stigma.REQ_InviteToBattle
// 0x0040 (0x0040 - 0x0000)
struct FREQ_InviteToBattle final
{
public:
	bool                                          IsCustomGame;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 BattleIDS;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                FromIDN;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              FromNick;                                          // 0x0020(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_InviteToBattle) == 0x000008, "Wrong alignment on FREQ_InviteToBattle");
static_assert(sizeof(FREQ_InviteToBattle) == 0x000040, "Wrong size on FREQ_InviteToBattle");
static_assert(offsetof(FREQ_InviteToBattle, IsCustomGame) == 0x000000, "Member 'FREQ_InviteToBattle::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle, BattleIDS) == 0x000008, "Member 'FREQ_InviteToBattle::BattleIDS' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle, FromIDN) == 0x000018, "Member 'FREQ_InviteToBattle::FromIDN' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle, FromNick) == 0x000020, "Member 'FREQ_InviteToBattle::FromNick' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle, ToIDN) == 0x000038, "Member 'FREQ_InviteToBattle::ToIDN' has a wrong offset!");

// ScriptStruct Stigma.WorkshopEntry
// 0x0001 (0x0001 - 0x0000)
struct FWorkshopEntry final
{
public:
	EItemGrade                                    _Grade;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkshopEntry) == 0x000001, "Wrong alignment on FWorkshopEntry");
static_assert(sizeof(FWorkshopEntry) == 0x000001, "Wrong size on FWorkshopEntry");
static_assert(offsetof(FWorkshopEntry, _Grade) == 0x000000, "Member 'FWorkshopEntry::_Grade' has a wrong offset!");

// ScriptStruct Stigma.NavigationStepperEntry
// 0x0020 (0x0020 - 0x0000)
struct FNavigationStepperEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavigationStepperEntry) == 0x000008, "Wrong alignment on FNavigationStepperEntry");
static_assert(sizeof(FNavigationStepperEntry) == 0x000020, "Wrong size on FNavigationStepperEntry");
static_assert(offsetof(FNavigationStepperEntry, ID) == 0x000000, "Member 'FNavigationStepperEntry::ID' has a wrong offset!");
static_assert(offsetof(FNavigationStepperEntry, Text) == 0x000008, "Member 'FNavigationStepperEntry::Text' has a wrong offset!");

// ScriptStruct Stigma.CameraWalkControl
// 0x0004 (0x0004 - 0x0000)
struct FCameraWalkControl final
{
public:
	bool                                          UsePawnControlRotation;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverWriteControlRotation;                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LagLocation;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LagRotation;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraWalkControl) == 0x000001, "Wrong alignment on FCameraWalkControl");
static_assert(sizeof(FCameraWalkControl) == 0x000004, "Wrong size on FCameraWalkControl");
static_assert(offsetof(FCameraWalkControl, UsePawnControlRotation) == 0x000000, "Member 'FCameraWalkControl::UsePawnControlRotation' has a wrong offset!");
static_assert(offsetof(FCameraWalkControl, OverWriteControlRotation) == 0x000001, "Member 'FCameraWalkControl::OverWriteControlRotation' has a wrong offset!");
static_assert(offsetof(FCameraWalkControl, LagLocation) == 0x000002, "Member 'FCameraWalkControl::LagLocation' has a wrong offset!");
static_assert(offsetof(FCameraWalkControl, LagRotation) == 0x000003, "Member 'FCameraWalkControl::LagRotation' has a wrong offset!");

// ScriptStruct Stigma.REQ_GetUserReportJWT
// 0x0040 (0x0040 - 0x0000)
struct FREQ_GetUserReportJWT final
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              Nick;                                              // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDediID                                DediID;                                            // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 BattleIDS;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_GetUserReportJWT) == 0x000008, "Wrong alignment on FREQ_GetUserReportJWT");
static_assert(sizeof(FREQ_GetUserReportJWT) == 0x000040, "Wrong size on FREQ_GetUserReportJWT");
static_assert(offsetof(FREQ_GetUserReportJWT, UserID) == 0x000000, "Member 'FREQ_GetUserReportJWT::UserID' has a wrong offset!");
static_assert(offsetof(FREQ_GetUserReportJWT, Nick) == 0x000008, "Member 'FREQ_GetUserReportJWT::Nick' has a wrong offset!");
static_assert(offsetof(FREQ_GetUserReportJWT, DediID) == 0x000020, "Member 'FREQ_GetUserReportJWT::DediID' has a wrong offset!");
static_assert(offsetof(FREQ_GetUserReportJWT, BattleIDS) == 0x000030, "Member 'FREQ_GetUserReportJWT::BattleIDS' has a wrong offset!");

// ScriptStruct Stigma.CraftableEntry
// 0x0038 (0x0040 - 0x0008)
struct FCraftableEntry final : public FTableRowBase
{
public:
	struct FItemIDRef                             CraftingItem;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCraftCost>                     Costs;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         JackpotRate;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD7[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FCraftCost>                     Refunds;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftableEntry) == 0x000008, "Wrong alignment on FCraftableEntry");
static_assert(sizeof(FCraftableEntry) == 0x000040, "Wrong size on FCraftableEntry");
static_assert(offsetof(FCraftableEntry, CraftingItem) == 0x000008, "Member 'FCraftableEntry::CraftingItem' has a wrong offset!");
static_assert(offsetof(FCraftableEntry, Costs) == 0x000018, "Member 'FCraftableEntry::Costs' has a wrong offset!");
static_assert(offsetof(FCraftableEntry, JackpotRate) == 0x000028, "Member 'FCraftableEntry::JackpotRate' has a wrong offset!");
static_assert(offsetof(FCraftableEntry, Refunds) == 0x000030, "Member 'FCraftableEntry::Refunds' has a wrong offset!");

// ScriptStruct Stigma.BattleStoreEntry
// 0x00A8 (0x00B0 - 0x0008)
struct FBattleStoreEntry final : public FTableRowBase
{
public:
	struct FItemIDRef_Buff                        BuffID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     Mode;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD8[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   CategoryName;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStep;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemStage                                    Stage;                                             // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD9[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Price;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceIncrease;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0088(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleStoreEntry) == 0x000008, "Wrong alignment on FBattleStoreEntry");
static_assert(sizeof(FBattleStoreEntry) == 0x0000B0, "Wrong size on FBattleStoreEntry");
static_assert(offsetof(FBattleStoreEntry, BuffID) == 0x000008, "Member 'FBattleStoreEntry::BuffID' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, Mode) == 0x000018, "Member 'FBattleStoreEntry::Mode' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, CategoryName) == 0x000020, "Member 'FBattleStoreEntry::CategoryName' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, Key) == 0x000038, "Member 'FBattleStoreEntry::Key' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, MaxStep) == 0x000048, "Member 'FBattleStoreEntry::MaxStep' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, Stage) == 0x00004C, "Member 'FBattleStoreEntry::Stage' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, Price) == 0x000050, "Member 'FBattleStoreEntry::Price' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, PriceIncrease) == 0x000054, "Member 'FBattleStoreEntry::PriceIncrease' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, DisplayName) == 0x000058, "Member 'FBattleStoreEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, Desc) == 0x000070, "Member 'FBattleStoreEntry::Desc' has a wrong offset!");
static_assert(offsetof(FBattleStoreEntry, Icon) == 0x000088, "Member 'FBattleStoreEntry::Icon' has a wrong offset!");

// ScriptStruct Stigma.NetInvenItemList
// 0x0010 (0x0010 - 0x0000)
struct FNetInvenItemList final
{
public:
	TArray<struct FNetInvenItem>                  Item;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetInvenItemList) == 0x000008, "Wrong alignment on FNetInvenItemList");
static_assert(sizeof(FNetInvenItemList) == 0x000010, "Wrong size on FNetInvenItemList");
static_assert(offsetof(FNetInvenItemList, Item) == 0x000000, "Member 'FNetInvenItemList::Item' has a wrong offset!");

// ScriptStruct Stigma.IsOccupiedResult
// 0x0020 (0x0020 - 0x0000)
struct FIsOccupiedResult final
{
public:
	bool                                          IsOccupied;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   OccupiedBy;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIsOccupiedResult) == 0x000008, "Wrong alignment on FIsOccupiedResult");
static_assert(sizeof(FIsOccupiedResult) == 0x000020, "Wrong size on FIsOccupiedResult");
static_assert(offsetof(FIsOccupiedResult, IsOccupied) == 0x000000, "Member 'FIsOccupiedResult::IsOccupied' has a wrong offset!");
static_assert(offsetof(FIsOccupiedResult, OccupiedBy) == 0x000008, "Member 'FIsOccupiedResult::OccupiedBy' has a wrong offset!");

// ScriptStruct Stigma.REQ_AutoMissionReward
// 0x0001 (0x0001 - 0x0000)
struct FREQ_AutoMissionReward final
{
public:
	uint8                                         Pad_1DDB[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_AutoMissionReward) == 0x000001, "Wrong alignment on FREQ_AutoMissionReward");
static_assert(sizeof(FREQ_AutoMissionReward) == 0x000001, "Wrong size on FREQ_AutoMissionReward");

// ScriptStruct Stigma.Hit_EffectEntry
// 0x0098 (0x00A0 - 0x0008)
struct FHit_EffectEntry final : public FTableRowBase
{
public:
	EBodyParts                                    HitPart;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponType                                   WeaponType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          SurfaceMaterial;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDC[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UParticleSystem>         Particle;                                          // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound;                                             // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalSize_Base;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalSize_RandomRange;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> BulletHoleDecals;                                  // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          DecalParticle;                                     // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHit_EffectEntry) == 0x000008, "Wrong alignment on FHit_EffectEntry");
static_assert(sizeof(FHit_EffectEntry) == 0x0000A0, "Wrong size on FHit_EffectEntry");
static_assert(offsetof(FHit_EffectEntry, HitPart) == 0x000008, "Member 'FHit_EffectEntry::HitPart' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, WeaponType) == 0x000009, "Member 'FHit_EffectEntry::WeaponType' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, SurfaceMaterial) == 0x00000A, "Member 'FHit_EffectEntry::SurfaceMaterial' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, Particle) == 0x000010, "Member 'FHit_EffectEntry::Particle' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, Sound) == 0x000038, "Member 'FHit_EffectEntry::Sound' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, DecalSize_Base) == 0x000060, "Member 'FHit_EffectEntry::DecalSize_Base' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, DecalSize_RandomRange) == 0x000064, "Member 'FHit_EffectEntry::DecalSize_RandomRange' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, BulletHoleDecals) == 0x000068, "Member 'FHit_EffectEntry::BulletHoleDecals' has a wrong offset!");
static_assert(offsetof(FHit_EffectEntry, DecalParticle) == 0x000078, "Member 'FHit_EffectEntry::DecalParticle' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyDelete
// 0x0008 (0x0008 - 0x0000)
struct FACK_PartyDelete final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_PartyDelete) == 0x000008, "Wrong alignment on FACK_PartyDelete");
static_assert(sizeof(FACK_PartyDelete) == 0x000008, "Wrong size on FACK_PartyDelete");
static_assert(offsetof(FACK_PartyDelete, PartyIDN) == 0x000000, "Member 'FACK_PartyDelete::PartyIDN' has a wrong offset!");

// ScriptStruct Stigma.ChallengeWave
// 0x0028 (0x0028 - 0x0000)
struct FChallengeWave final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class APlayerState*>                   PlayerStates;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointIndex;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWaitForPrevWaves;                                // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpawned;                                         // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDE[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FChallengeWave) == 0x000008, "Wrong alignment on FChallengeWave");
static_assert(sizeof(FChallengeWave) == 0x000028, "Wrong size on FChallengeWave");
static_assert(offsetof(FChallengeWave, WaveIndex) == 0x000000, "Member 'FChallengeWave::WaveIndex' has a wrong offset!");
static_assert(offsetof(FChallengeWave, PlayerStates) == 0x000008, "Member 'FChallengeWave::PlayerStates' has a wrong offset!");
static_assert(offsetof(FChallengeWave, DelayTime) == 0x000018, "Member 'FChallengeWave::DelayTime' has a wrong offset!");
static_assert(offsetof(FChallengeWave, SpawnPointIndex) == 0x00001C, "Member 'FChallengeWave::SpawnPointIndex' has a wrong offset!");
static_assert(offsetof(FChallengeWave, IsWaitForPrevWaves) == 0x000020, "Member 'FChallengeWave::IsWaitForPrevWaves' has a wrong offset!");
static_assert(offsetof(FChallengeWave, IsSpawned) == 0x000021, "Member 'FChallengeWave::IsSpawned' has a wrong offset!");

// ScriptStruct Stigma.REQ_SteamBuy
// 0x0018 (0x0018 - 0x0000)
struct FREQ_SteamBuy final
{
public:
	int32                                         AppID;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	int64                                         OrderID;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Authorized;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE0[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_SteamBuy) == 0x000008, "Wrong alignment on FREQ_SteamBuy");
static_assert(sizeof(FREQ_SteamBuy) == 0x000018, "Wrong size on FREQ_SteamBuy");
static_assert(offsetof(FREQ_SteamBuy, AppID) == 0x000000, "Member 'FREQ_SteamBuy::AppID' has a wrong offset!");
static_assert(offsetof(FREQ_SteamBuy, OrderID) == 0x000008, "Member 'FREQ_SteamBuy::OrderID' has a wrong offset!");
static_assert(offsetof(FREQ_SteamBuy, Authorized) == 0x000010, "Member 'FREQ_SteamBuy::Authorized' has a wrong offset!");

// ScriptStruct Stigma.ACK_MissionRead
// 0x0010 (0x0010 - 0x0000)
struct FACK_MissionRead final
{
public:
	TArray<struct FNetMission>                    MData;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_MissionRead) == 0x000008, "Wrong alignment on FACK_MissionRead");
static_assert(sizeof(FACK_MissionRead) == 0x000010, "Wrong size on FACK_MissionRead");
static_assert(offsetof(FACK_MissionRead, MData) == 0x000000, "Member 'FACK_MissionRead::MData' has a wrong offset!");

// ScriptStruct Stigma.MasterLevelConfig
// 0x0018 (0x0020 - 0x0008)
struct FMasterLevelConfig final : public FTableRowBase
{
public:
	int32                                         StartExp;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                Reward;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterLevelConfig) == 0x000008, "Wrong alignment on FMasterLevelConfig");
static_assert(sizeof(FMasterLevelConfig) == 0x000020, "Wrong size on FMasterLevelConfig");
static_assert(offsetof(FMasterLevelConfig, StartExp) == 0x000008, "Member 'FMasterLevelConfig::StartExp' has a wrong offset!");
static_assert(offsetof(FMasterLevelConfig, Reward) == 0x000010, "Member 'FMasterLevelConfig::Reward' has a wrong offset!");

// ScriptStruct Stigma.ACK_BattlePassReward
// 0x0020 (0x0020 - 0x0000)
struct FACK_BattlePassReward final
{
public:
	struct FRewardPlain                           RewardPlain;                                       // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BattlePassReward) == 0x000008, "Wrong alignment on FACK_BattlePassReward");
static_assert(sizeof(FACK_BattlePassReward) == 0x000020, "Wrong size on FACK_BattlePassReward");
static_assert(offsetof(FACK_BattlePassReward, RewardPlain) == 0x000000, "Member 'FACK_BattlePassReward::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.Config_Bomb
// 0x0028 (0x0030 - 0x0008)
struct FConfig_Bomb final : public FTableRowBase
{
public:
	float                                         ExplosionDelayAfterThrowing;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsExplosionWhenHit;                                // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE2[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ExplosionDelayAfterHit;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectLife                                   ExplosionState;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE3[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDamageDef                             Damage_Explosion;                                  // 0x0018(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EDamageTarget                                 DamageTarget;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnorePassiveAction;                               // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE4[0x2];                                     // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_Bomb) == 0x000008, "Wrong alignment on FConfig_Bomb");
static_assert(sizeof(FConfig_Bomb) == 0x000030, "Wrong size on FConfig_Bomb");
static_assert(offsetof(FConfig_Bomb, ExplosionDelayAfterThrowing) == 0x000008, "Member 'FConfig_Bomb::ExplosionDelayAfterThrowing' has a wrong offset!");
static_assert(offsetof(FConfig_Bomb, IsExplosionWhenHit) == 0x00000C, "Member 'FConfig_Bomb::IsExplosionWhenHit' has a wrong offset!");
static_assert(offsetof(FConfig_Bomb, ExplosionDelayAfterHit) == 0x000010, "Member 'FConfig_Bomb::ExplosionDelayAfterHit' has a wrong offset!");
static_assert(offsetof(FConfig_Bomb, ExplosionState) == 0x000014, "Member 'FConfig_Bomb::ExplosionState' has a wrong offset!");
static_assert(offsetof(FConfig_Bomb, Damage_Explosion) == 0x000018, "Member 'FConfig_Bomb::Damage_Explosion' has a wrong offset!");
static_assert(offsetof(FConfig_Bomb, DamageTarget) == 0x00002C, "Member 'FConfig_Bomb::DamageTarget' has a wrong offset!");
static_assert(offsetof(FConfig_Bomb, IgnorePassiveAction) == 0x00002D, "Member 'FConfig_Bomb::IgnorePassiveAction' has a wrong offset!");

// ScriptStruct Stigma.InputActionDefine
// 0x0048 (0x0050 - 0x0008)
struct FInputActionDefine final : public FTableRowBase
{
public:
	EInputActioUsage                              Usage;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputAction                                  InputActionType;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE5[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UInputAction>            InputAction;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputActionDefine) == 0x000008, "Wrong alignment on FInputActionDefine");
static_assert(sizeof(FInputActionDefine) == 0x000050, "Wrong size on FInputActionDefine");
static_assert(offsetof(FInputActionDefine, Usage) == 0x000008, "Member 'FInputActionDefine::Usage' has a wrong offset!");
static_assert(offsetof(FInputActionDefine, InputActionType) == 0x000009, "Member 'FInputActionDefine::InputActionType' has a wrong offset!");
static_assert(offsetof(FInputActionDefine, InputAction) == 0x000010, "Member 'FInputActionDefine::InputAction' has a wrong offset!");
static_assert(offsetof(FInputActionDefine, DisplayName) == 0x000038, "Member 'FInputActionDefine::DisplayName' has a wrong offset!");

// ScriptStruct Stigma.REQ_ChallengeRead
// 0x0008 (0x0008 - 0x0000)
struct FREQ_ChallengeRead final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ChallengeRead) == 0x000008, "Wrong alignment on FREQ_ChallengeRead");
static_assert(sizeof(FREQ_ChallengeRead) == 0x000008, "Wrong size on FREQ_ChallengeRead");
static_assert(offsetof(FREQ_ChallengeRead, UserIDN) == 0x000000, "Member 'FREQ_ChallengeRead::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.ACK_MissionReward
// 0x0020 (0x0020 - 0x0000)
struct FACK_MissionReward final
{
public:
	struct FRewardPlain                           Rwd;                                               // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_MissionReward) == 0x000008, "Wrong alignment on FACK_MissionReward");
static_assert(sizeof(FACK_MissionReward) == 0x000020, "Wrong size on FACK_MissionReward");
static_assert(offsetof(FACK_MissionReward, Rwd) == 0x000000, "Member 'FACK_MissionReward::Rwd' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyMatch
// 0x0058 (0x0058 - 0x0000)
struct FACK_PartyMatch final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                LeaderIDN;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleIDS;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchOption                           MatchOption;                                       // 0x0020(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_PartyMatch) == 0x000008, "Wrong alignment on FACK_PartyMatch");
static_assert(sizeof(FACK_PartyMatch) == 0x000058, "Wrong size on FACK_PartyMatch");
static_assert(offsetof(FACK_PartyMatch, PartyIDN) == 0x000000, "Member 'FACK_PartyMatch::PartyIDN' has a wrong offset!");
static_assert(offsetof(FACK_PartyMatch, LeaderIDN) == 0x000008, "Member 'FACK_PartyMatch::LeaderIDN' has a wrong offset!");
static_assert(offsetof(FACK_PartyMatch, BattleIDS) == 0x000010, "Member 'FACK_PartyMatch::BattleIDS' has a wrong offset!");
static_assert(offsetof(FACK_PartyMatch, MatchOption) == 0x000020, "Member 'FACK_PartyMatch::MatchOption' has a wrong offset!");

// ScriptStruct Stigma.TeamData
// 0x0008 (0x0014 - 0x000C)
struct FTeamData final : public FFastArraySerializerItem
{
public:
	int32                                         Score;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamData) == 0x000004, "Wrong alignment on FTeamData");
static_assert(sizeof(FTeamData) == 0x000014, "Wrong size on FTeamData");
static_assert(offsetof(FTeamData, Score) == 0x00000C, "Member 'FTeamData::Score' has a wrong offset!");
static_assert(offsetof(FTeamData, Rank) == 0x000010, "Member 'FTeamData::Rank' has a wrong offset!");

// ScriptStruct Stigma.TeamDataArray
// 0x0010 (0x0118 - 0x0108)
struct FTeamDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamData>                      _TeamData;                                         // 0x0108(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTeamDataArray) == 0x000008, "Wrong alignment on FTeamDataArray");
static_assert(sizeof(FTeamDataArray) == 0x000118, "Wrong size on FTeamDataArray");
static_assert(offsetof(FTeamDataArray, _TeamData) == 0x000108, "Member 'FTeamDataArray::_TeamData' has a wrong offset!");

// ScriptStruct Stigma.EventPageDefine
// 0x02E0 (0x0410 - 0x0130)
struct FEventPageDefine final : public FItemEntry
{
public:
	int32                                         LevelMin;                                          // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDateType                                     DateType;                                          // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE6[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 StartAt;                                           // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndAt;                                             // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveHour;                                        // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDailyReset;                                      // 0x015C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventUserType                                UserType;                                          // 0x015D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE7[0x2];                                     // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Currency                       MainCurrency;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIPriority;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE8[0xC];                                     // 0x0174(0x000C)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            TabWidgetBackgroundBrush;                          // 0x0180(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_EventPagePopupBackground> BackgroundWidgetClass;                             // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE9[0x8];                                     // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            SpeechBubbleBrush;                                 // 0x0260(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SpeecherBrush;                                     // 0x0330(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_EventPagePopupContainer> ContainerWidgetClass;                              // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEA[0x8];                                     // 0x0408(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FEventPageDefine) == 0x000010, "Wrong alignment on FEventPageDefine");
static_assert(sizeof(FEventPageDefine) == 0x000410, "Wrong size on FEventPageDefine");
static_assert(offsetof(FEventPageDefine, LevelMin) == 0x000130, "Member 'FEventPageDefine::LevelMin' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, DateType) == 0x000134, "Member 'FEventPageDefine::DateType' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, StartAt) == 0x000138, "Member 'FEventPageDefine::StartAt' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, EndAt) == 0x000148, "Member 'FEventPageDefine::EndAt' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, ActiveHour) == 0x000158, "Member 'FEventPageDefine::ActiveHour' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, IsDailyReset) == 0x00015C, "Member 'FEventPageDefine::IsDailyReset' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, UserType) == 0x00015D, "Member 'FEventPageDefine::UserType' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, MainCurrency) == 0x000160, "Member 'FEventPageDefine::MainCurrency' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, UIPriority) == 0x000170, "Member 'FEventPageDefine::UIPriority' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, TabWidgetBackgroundBrush) == 0x000180, "Member 'FEventPageDefine::TabWidgetBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, BackgroundWidgetClass) == 0x000250, "Member 'FEventPageDefine::BackgroundWidgetClass' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, SpeechBubbleBrush) == 0x000260, "Member 'FEventPageDefine::SpeechBubbleBrush' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, SpeecherBrush) == 0x000330, "Member 'FEventPageDefine::SpeecherBrush' has a wrong offset!");
static_assert(offsetof(FEventPageDefine, ContainerWidgetClass) == 0x000400, "Member 'FEventPageDefine::ContainerWidgetClass' has a wrong offset!");

// ScriptStruct Stigma.ACK_FriendUpdate
// 0x0030 (0x0030 - 0x0000)
struct FACK_FriendUpdate final
{
public:
	struct FUserID                                Asker;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                Replyer;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              ReplyerNick;                                       // 0x0010(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accept;                                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEB[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_FriendUpdate) == 0x000008, "Wrong alignment on FACK_FriendUpdate");
static_assert(sizeof(FACK_FriendUpdate) == 0x000030, "Wrong size on FACK_FriendUpdate");
static_assert(offsetof(FACK_FriendUpdate, Asker) == 0x000000, "Member 'FACK_FriendUpdate::Asker' has a wrong offset!");
static_assert(offsetof(FACK_FriendUpdate, Replyer) == 0x000008, "Member 'FACK_FriendUpdate::Replyer' has a wrong offset!");
static_assert(offsetof(FACK_FriendUpdate, ReplyerNick) == 0x000010, "Member 'FACK_FriendUpdate::ReplyerNick' has a wrong offset!");
static_assert(offsetof(FACK_FriendUpdate, Accept) == 0x000028, "Member 'FACK_FriendUpdate::Accept' has a wrong offset!");

// ScriptStruct Stigma.BodyPartDefine
// 0x0020 (0x0028 - 0x0008)
struct FBodyPartDefine final : public FTableRowBase
{
public:
	EBodyParts                                    Part;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEC[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBodyPartDefine) == 0x000008, "Wrong alignment on FBodyPartDefine");
static_assert(sizeof(FBodyPartDefine) == 0x000028, "Wrong size on FBodyPartDefine");
static_assert(offsetof(FBodyPartDefine, Part) == 0x000008, "Member 'FBodyPartDefine::Part' has a wrong offset!");
static_assert(offsetof(FBodyPartDefine, DisplayName) == 0x000010, "Member 'FBodyPartDefine::DisplayName' has a wrong offset!");

// ScriptStruct Stigma.ChallengeWaves
// 0x0010 (0x0010 - 0x0000)
struct FChallengeWaves final
{
public:
	TArray<struct FChallengeWave>                 Waves;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeWaves) == 0x000008, "Wrong alignment on FChallengeWaves");
static_assert(sizeof(FChallengeWaves) == 0x000010, "Wrong size on FChallengeWaves");
static_assert(offsetof(FChallengeWaves, Waves) == 0x000000, "Member 'FChallengeWaves::Waves' has a wrong offset!");

// ScriptStruct Stigma.ACK_UpdateGunSpec
// 0x0010 (0x0010 - 0x0000)
struct FACK_UpdateGunSpec final
{
public:
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_UpdateGunSpec) == 0x000008, "Wrong alignment on FACK_UpdateGunSpec");
static_assert(sizeof(FACK_UpdateGunSpec) == 0x000010, "Wrong size on FACK_UpdateGunSpec");
static_assert(offsetof(FACK_UpdateGunSpec, GunSpec) == 0x000000, "Member 'FACK_UpdateGunSpec::GunSpec' has a wrong offset!");

// ScriptStruct Stigma.OptionCustomBoxEntry
// 0x0018 (0x0018 - 0x0000)
struct FOptionCustomBoxEntry final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Option;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionCustomBoxEntry) == 0x000008, "Wrong alignment on FOptionCustomBoxEntry");
static_assert(sizeof(FOptionCustomBoxEntry) == 0x000018, "Wrong size on FOptionCustomBoxEntry");
static_assert(offsetof(FOptionCustomBoxEntry, ID) == 0x000000, "Member 'FOptionCustomBoxEntry::ID' has a wrong offset!");
static_assert(offsetof(FOptionCustomBoxEntry, Option) == 0x000008, "Member 'FOptionCustomBoxEntry::Option' has a wrong offset!");

// ScriptStruct Stigma.PlayerMatchOption
// 0x0004 (0x0004 - 0x0000)
struct FPlayerMatchOption final
{
public:
	int32                                         _value;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPlayerMatchOption) == 0x000004, "Wrong alignment on FPlayerMatchOption");
static_assert(sizeof(FPlayerMatchOption) == 0x000004, "Wrong size on FPlayerMatchOption");
static_assert(offsetof(FPlayerMatchOption, _value) == 0x000000, "Member 'FPlayerMatchOption::_value' has a wrong offset!");

// ScriptStruct Stigma.PlayerSimple
// 0x0020 (0x0020 - 0x0000)
struct FPlayerSimple final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartyID                               PartyIDN;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETeams                                        TeamIDN;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJoinType                                     JoinType;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DED[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FPlayerMatchOption                     MatchOption;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEE[0x8];                                     // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FPlayerSimple) == 0x000008, "Wrong alignment on FPlayerSimple");
static_assert(sizeof(FPlayerSimple) == 0x000020, "Wrong size on FPlayerSimple");
static_assert(offsetof(FPlayerSimple, UserIDN) == 0x000000, "Member 'FPlayerSimple::UserIDN' has a wrong offset!");
static_assert(offsetof(FPlayerSimple, PartyIDN) == 0x000008, "Member 'FPlayerSimple::PartyIDN' has a wrong offset!");
static_assert(offsetof(FPlayerSimple, TeamIDN) == 0x000010, "Member 'FPlayerSimple::TeamIDN' has a wrong offset!");
static_assert(offsetof(FPlayerSimple, JoinType) == 0x000011, "Member 'FPlayerSimple::JoinType' has a wrong offset!");
static_assert(offsetof(FPlayerSimple, MatchOption) == 0x000014, "Member 'FPlayerSimple::MatchOption' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_DEDI_UpdateBattle
// 0x0038 (0x0088 - 0x0050)
struct FMQREQ_DEDI_UpdateBattle final : public FMQReqMsg
{
public:
	bool                                          IsCreate;                                          // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustomGame;                                      // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableBOT;                                         // 0x0052(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0053(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEF[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 MapName;                                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayerSimple>                  Players;                                           // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BattleIDS;                                         // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_DEDI_UpdateBattle) == 0x000008, "Wrong alignment on FMQREQ_DEDI_UpdateBattle");
static_assert(sizeof(FMQREQ_DEDI_UpdateBattle) == 0x000088, "Wrong size on FMQREQ_DEDI_UpdateBattle");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, IsCreate) == 0x000050, "Member 'FMQREQ_DEDI_UpdateBattle::IsCreate' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, IsCustomGame) == 0x000051, "Member 'FMQREQ_DEDI_UpdateBattle::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, EnableBOT) == 0x000052, "Member 'FMQREQ_DEDI_UpdateBattle::EnableBOT' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, GameMode) == 0x000053, "Member 'FMQREQ_DEDI_UpdateBattle::GameMode' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, MapName) == 0x000058, "Member 'FMQREQ_DEDI_UpdateBattle::MapName' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, Players) == 0x000068, "Member 'FMQREQ_DEDI_UpdateBattle::Players' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_UpdateBattle, BattleIDS) == 0x000078, "Member 'FMQREQ_DEDI_UpdateBattle::BattleIDS' has a wrong offset!");

// ScriptStruct Stigma.FilterWordsBundle
// 0x0010 (0x0010 - 0x0000)
struct FFilterWordsBundle final
{
public:
	TArray<class FString>                         FilterWords;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterWordsBundle) == 0x000008, "Wrong alignment on FFilterWordsBundle");
static_assert(sizeof(FFilterWordsBundle) == 0x000010, "Wrong size on FFilterWordsBundle");
static_assert(offsetof(FFilterWordsBundle, FilterWords) == 0x000000, "Member 'FFilterWordsBundle::FilterWords' has a wrong offset!");

// ScriptStruct Stigma.AccountData
// 0x0048 (0x0048 - 0x0000)
struct FAccountData final
{
public:
	bool                                          _IsAuthenticated;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DF0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _Token;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _Heartbit;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DF1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _PublisherID;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPublisher                                    _Publisher;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DF2[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _PublisherToken;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAccountData) == 0x000008, "Wrong alignment on FAccountData");
static_assert(sizeof(FAccountData) == 0x000048, "Wrong size on FAccountData");
static_assert(offsetof(FAccountData, _IsAuthenticated) == 0x000000, "Member 'FAccountData::_IsAuthenticated' has a wrong offset!");
static_assert(offsetof(FAccountData, _Token) == 0x000008, "Member 'FAccountData::_Token' has a wrong offset!");
static_assert(offsetof(FAccountData, _Heartbit) == 0x000018, "Member 'FAccountData::_Heartbit' has a wrong offset!");
static_assert(offsetof(FAccountData, _PublisherID) == 0x000020, "Member 'FAccountData::_PublisherID' has a wrong offset!");
static_assert(offsetof(FAccountData, _Publisher) == 0x000030, "Member 'FAccountData::_Publisher' has a wrong offset!");
static_assert(offsetof(FAccountData, _PublisherToken) == 0x000038, "Member 'FAccountData::_PublisherToken' has a wrong offset!");

// ScriptStruct Stigma.LinkedSkillGuide
// 0x0050 (0x0050 - 0x0000)
struct FLinkedSkillGuide final
{
public:
	struct FKeyMapping                            BoundKey;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputConditionType                           EventType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF3[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Desc;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkedSkillGuide) == 0x000008, "Wrong alignment on FLinkedSkillGuide");
static_assert(sizeof(FLinkedSkillGuide) == 0x000050, "Wrong size on FLinkedSkillGuide");
static_assert(offsetof(FLinkedSkillGuide, BoundKey) == 0x000000, "Member 'FLinkedSkillGuide::BoundKey' has a wrong offset!");
static_assert(offsetof(FLinkedSkillGuide, EventType) == 0x000030, "Member 'FLinkedSkillGuide::EventType' has a wrong offset!");
static_assert(offsetof(FLinkedSkillGuide, Desc) == 0x000038, "Member 'FLinkedSkillGuide::Desc' has a wrong offset!");

// ScriptStruct Stigma.ThreatDistribution
// 0x0010 (0x0010 - 0x0000)
struct FThreatDistribution final
{
public:
	float                                         Front;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Left;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Back;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatDistribution) == 0x000004, "Wrong alignment on FThreatDistribution");
static_assert(sizeof(FThreatDistribution) == 0x000010, "Wrong size on FThreatDistribution");
static_assert(offsetof(FThreatDistribution, Front) == 0x000000, "Member 'FThreatDistribution::Front' has a wrong offset!");
static_assert(offsetof(FThreatDistribution, Left) == 0x000004, "Member 'FThreatDistribution::Left' has a wrong offset!");
static_assert(offsetof(FThreatDistribution, Right) == 0x000008, "Member 'FThreatDistribution::Right' has a wrong offset!");
static_assert(offsetof(FThreatDistribution, Back) == 0x00000C, "Member 'FThreatDistribution::Back' has a wrong offset!");

// ScriptStruct Stigma.RecognizedActor
// 0x0020 (0x0020 - 0x0000)
struct FRecognizedActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF4[0x18];                                    // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRecognizedActor) == 0x000008, "Wrong alignment on FRecognizedActor");
static_assert(sizeof(FRecognizedActor) == 0x000020, "Wrong size on FRecognizedActor");
static_assert(offsetof(FRecognizedActor, Actor) == 0x000000, "Member 'FRecognizedActor::Actor' has a wrong offset!");

// ScriptStruct Stigma.ThreatEntry
// 0x0020 (0x0020 - 0x0000)
struct FThreatEntry final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF5[0x18];                                    // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FThreatEntry) == 0x000008, "Wrong alignment on FThreatEntry");
static_assert(sizeof(FThreatEntry) == 0x000020, "Wrong size on FThreatEntry");
static_assert(offsetof(FThreatEntry, Actor) == 0x000000, "Member 'FThreatEntry::Actor' has a wrong offset!");

// ScriptStruct Stigma.AfterImageParameterAndCurve
// 0x0010 (0x0010 - 0x0000)
struct FAfterImageParameterAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAfterImageParameterAndCurve) == 0x000008, "Wrong alignment on FAfterImageParameterAndCurve");
static_assert(sizeof(FAfterImageParameterAndCurve) == 0x000010, "Wrong size on FAfterImageParameterAndCurve");
static_assert(offsetof(FAfterImageParameterAndCurve, ParameterName) == 0x000000, "Member 'FAfterImageParameterAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FAfterImageParameterAndCurve, Curve) == 0x000008, "Member 'FAfterImageParameterAndCurve::Curve' has a wrong offset!");

// ScriptStruct Stigma.AfterImageData
// 0x0028 (0x0028 - 0x0000)
struct FAfterImageData final
{
public:
	TArray<class UPoseableMeshComponent*>         PoseableMeshComponents;                            // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAfterImageParameterAndCurve>   Params;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF6[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAfterImageData) == 0x000008, "Wrong alignment on FAfterImageData");
static_assert(sizeof(FAfterImageData) == 0x000028, "Wrong size on FAfterImageData");
static_assert(offsetof(FAfterImageData, PoseableMeshComponents) == 0x000000, "Member 'FAfterImageData::PoseableMeshComponents' has a wrong offset!");
static_assert(offsetof(FAfterImageData, Params) == 0x000010, "Member 'FAfterImageData::Params' has a wrong offset!");

// ScriptStruct Stigma.AGLog_P2P_Hit
// 0x0008 (0x0078 - 0x0070)
struct FAGLog_P2P_Hit final : public FAGLog_Hit
{
public:
	uint8                                         Pad_1DF7[0x8];                                     // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAGLog_P2P_Hit) == 0x000008, "Wrong alignment on FAGLog_P2P_Hit");
static_assert(sizeof(FAGLog_P2P_Hit) == 0x000078, "Wrong size on FAGLog_P2P_Hit");

// ScriptStruct Stigma.CharaFXSystemParam
// 0x0058 (0x0058 - 0x0000)
struct FCharaFXSystemParam final
{
public:
	class UFXSystemAsset*                         Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaFXSystemParam) == 0x000008, "Wrong alignment on FCharaFXSystemParam");
static_assert(sizeof(FCharaFXSystemParam) == 0x000058, "Wrong size on FCharaFXSystemParam");
static_assert(offsetof(FCharaFXSystemParam, Effect) == 0x000000, "Member 'FCharaFXSystemParam::Effect' has a wrong offset!");
static_assert(offsetof(FCharaFXSystemParam, SocketName) == 0x000008, "Member 'FCharaFXSystemParam::SocketName' has a wrong offset!");
static_assert(offsetof(FCharaFXSystemParam, Offset) == 0x000010, "Member 'FCharaFXSystemParam::Offset' has a wrong offset!");
static_assert(offsetof(FCharaFXSystemParam, RotationOffset) == 0x000028, "Member 'FCharaFXSystemParam::RotationOffset' has a wrong offset!");
static_assert(offsetof(FCharaFXSystemParam, Scale3D) == 0x000040, "Member 'FCharaFXSystemParam::Scale3D' has a wrong offset!");

// ScriptStruct Stigma.ChargeParam
// 0x0090 (0x0090 - 0x0000)
struct FChargeParam final
{
public:
	struct FCharaFXSystemParam                    StartEffect;                                       // 0x0000(0x0058)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCharaFXSystemParam>            ChargingEffects;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundBase*                             IncreasedSectionSound;                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChrageTime;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChargeSection;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeInterval;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChargeSectionKey;                                  // 0x007C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaximumKey;                                        // 0x0084(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF8[0x4];                                     // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FChargeParam) == 0x000008, "Wrong alignment on FChargeParam");
static_assert(sizeof(FChargeParam) == 0x000090, "Wrong size on FChargeParam");
static_assert(offsetof(FChargeParam, StartEffect) == 0x000000, "Member 'FChargeParam::StartEffect' has a wrong offset!");
static_assert(offsetof(FChargeParam, ChargingEffects) == 0x000058, "Member 'FChargeParam::ChargingEffects' has a wrong offset!");
static_assert(offsetof(FChargeParam, IncreasedSectionSound) == 0x000068, "Member 'FChargeParam::IncreasedSectionSound' has a wrong offset!");
static_assert(offsetof(FChargeParam, MaxChrageTime) == 0x000070, "Member 'FChargeParam::MaxChrageTime' has a wrong offset!");
static_assert(offsetof(FChargeParam, MaxChargeSection) == 0x000074, "Member 'FChargeParam::MaxChargeSection' has a wrong offset!");
static_assert(offsetof(FChargeParam, ChargeInterval) == 0x000078, "Member 'FChargeParam::ChargeInterval' has a wrong offset!");
static_assert(offsetof(FChargeParam, ChargeSectionKey) == 0x00007C, "Member 'FChargeParam::ChargeSectionKey' has a wrong offset!");
static_assert(offsetof(FChargeParam, MaximumKey) == 0x000084, "Member 'FChargeParam::MaximumKey' has a wrong offset!");

// ScriptStruct Stigma.AGSpawnBotData
// 0x0080 (0x0080 - 0x0000)
struct FAGSpawnBotData final
{
public:
	struct FBotCreation                           _setting;                                          // 0x0000(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class AAICharaBase>               _Class;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          _BT;                                               // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGSpawnBotData) == 0x000008, "Wrong alignment on FAGSpawnBotData");
static_assert(sizeof(FAGSpawnBotData) == 0x000080, "Wrong size on FAGSpawnBotData");
static_assert(offsetof(FAGSpawnBotData, _setting) == 0x000000, "Member 'FAGSpawnBotData::_setting' has a wrong offset!");
static_assert(offsetof(FAGSpawnBotData, _Class) == 0x000070, "Member 'FAGSpawnBotData::_Class' has a wrong offset!");
static_assert(offsetof(FAGSpawnBotData, _BT) == 0x000078, "Member 'FAGSpawnBotData::_BT' has a wrong offset!");

// ScriptStruct Stigma.AIRespawn
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FAIRespawn final
{
public:
	EAIRespawnStyle                               RespawnStyle;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RespawnInterval;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFA[0x68];                                    // 0x0008(0x0068)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAIRespawn) == 0x000010, "Wrong alignment on FAIRespawn");
static_assert(sizeof(FAIRespawn) == 0x000070, "Wrong size on FAIRespawn");
static_assert(offsetof(FAIRespawn, RespawnStyle) == 0x000000, "Member 'FAIRespawn::RespawnStyle' has a wrong offset!");
static_assert(offsetof(FAIRespawn, RespawnInterval) == 0x000004, "Member 'FAIRespawn::RespawnInterval' has a wrong offset!");

// ScriptStruct Stigma.AIInstanceSetting
// 0x0028 (0x0028 - 0x0000)
struct FAIInstanceSetting final
{
public:
	struct FItemIDRef_Skin_Body                   BodyID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Head                   HeadID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArmorType                                    ArmorType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      GunType;                                           // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFB[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAIInstanceSetting) == 0x000008, "Wrong alignment on FAIInstanceSetting");
static_assert(sizeof(FAIInstanceSetting) == 0x000028, "Wrong size on FAIInstanceSetting");
static_assert(offsetof(FAIInstanceSetting, BodyID) == 0x000000, "Member 'FAIInstanceSetting::BodyID' has a wrong offset!");
static_assert(offsetof(FAIInstanceSetting, HeadID) == 0x000010, "Member 'FAIInstanceSetting::HeadID' has a wrong offset!");
static_assert(offsetof(FAIInstanceSetting, ArmorType) == 0x000020, "Member 'FAIInstanceSetting::ArmorType' has a wrong offset!");
static_assert(offsetof(FAIInstanceSetting, GunType) == 0x000021, "Member 'FAIInstanceSetting::GunType' has a wrong offset!");

// ScriptStruct Stigma.CustomGameSlot
// 0x0014 (0x0020 - 0x000C)
struct FCustomGameSlot final : public FFastArraySerializerItem
{
public:
	bool                                          IsClosed;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFC[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class AMatchServicedPlayerState*              PlayerState;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFD[0x8];                                     // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCustomGameSlot) == 0x000008, "Wrong alignment on FCustomGameSlot");
static_assert(sizeof(FCustomGameSlot) == 0x000020, "Wrong size on FCustomGameSlot");
static_assert(offsetof(FCustomGameSlot, IsClosed) == 0x00000C, "Member 'FCustomGameSlot::IsClosed' has a wrong offset!");
static_assert(offsetof(FCustomGameSlot, PlayerState) == 0x000010, "Member 'FCustomGameSlot::PlayerState' has a wrong offset!");

// ScriptStruct Stigma.CustomGameSlotList
// 0x0020 (0x0128 - 0x0108)
struct FCustomGameSlotList final : public FFastArraySerializer
{
public:
	TArray<struct FCustomGameSlot>                Slots;                                             // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFE[0x10];                                    // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCustomGameSlotList) == 0x000008, "Wrong alignment on FCustomGameSlotList");
static_assert(sizeof(FCustomGameSlotList) == 0x000128, "Wrong size on FCustomGameSlotList");
static_assert(offsetof(FCustomGameSlotList, Slots) == 0x000108, "Member 'FCustomGameSlotList::Slots' has a wrong offset!");

// ScriptStruct Stigma.Annihilation_RoundGoldRule
// 0x0060 (0x0060 - 0x0000)
struct FAnnihilation_RoundGoldRule final
{
public:
	int32                                         Round;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartGold;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinBonusGold;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<EGoldBoxType, struct FGoldBoxConfig>     GoldBoxInfos;                                      // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnnihilation_RoundGoldRule) == 0x000008, "Wrong alignment on FAnnihilation_RoundGoldRule");
static_assert(sizeof(FAnnihilation_RoundGoldRule) == 0x000060, "Wrong size on FAnnihilation_RoundGoldRule");
static_assert(offsetof(FAnnihilation_RoundGoldRule, Round) == 0x000000, "Member 'FAnnihilation_RoundGoldRule::Round' has a wrong offset!");
static_assert(offsetof(FAnnihilation_RoundGoldRule, StartGold) == 0x000004, "Member 'FAnnihilation_RoundGoldRule::StartGold' has a wrong offset!");
static_assert(offsetof(FAnnihilation_RoundGoldRule, WinBonusGold) == 0x000008, "Member 'FAnnihilation_RoundGoldRule::WinBonusGold' has a wrong offset!");
static_assert(offsetof(FAnnihilation_RoundGoldRule, GoldBoxInfos) == 0x000010, "Member 'FAnnihilation_RoundGoldRule::GoldBoxInfos' has a wrong offset!");

// ScriptStruct Stigma.PerceptionLevelInfo
// 0x0008 (0x0008 - 0x0000)
struct FPerceptionLevelInfo final
{
public:
	float                                         AccumulatedPerception;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerceptionLevelInfo) == 0x000004, "Wrong alignment on FPerceptionLevelInfo");
static_assert(sizeof(FPerceptionLevelInfo) == 0x000008, "Wrong size on FPerceptionLevelInfo");
static_assert(offsetof(FPerceptionLevelInfo, AccumulatedPerception) == 0x000000, "Member 'FPerceptionLevelInfo::AccumulatedPerception' has a wrong offset!");
static_assert(offsetof(FPerceptionLevelInfo, Weight) == 0x000004, "Member 'FPerceptionLevelInfo::Weight' has a wrong offset!");

// ScriptStruct Stigma.Annihilation_GoldRule
// 0x0060 (0x0060 - 0x0000)
struct FAnnihilation_GoldRule final
{
public:
	int32                                         KillGold;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReviveGold;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakInGoldFactor;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E00[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<int32, struct FAnnihilation_RoundGoldRule> RoundGoldRules;                                    // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnnihilation_GoldRule) == 0x000008, "Wrong alignment on FAnnihilation_GoldRule");
static_assert(sizeof(FAnnihilation_GoldRule) == 0x000060, "Wrong size on FAnnihilation_GoldRule");
static_assert(offsetof(FAnnihilation_GoldRule, KillGold) == 0x000000, "Member 'FAnnihilation_GoldRule::KillGold' has a wrong offset!");
static_assert(offsetof(FAnnihilation_GoldRule, ReviveGold) == 0x000004, "Member 'FAnnihilation_GoldRule::ReviveGold' has a wrong offset!");
static_assert(offsetof(FAnnihilation_GoldRule, BreakInGoldFactor) == 0x000008, "Member 'FAnnihilation_GoldRule::BreakInGoldFactor' has a wrong offset!");
static_assert(offsetof(FAnnihilation_GoldRule, RoundGoldRules) == 0x000010, "Member 'FAnnihilation_GoldRule::RoundGoldRules' has a wrong offset!");

// ScriptStruct Stigma.KeyMappings
// 0x0098 (0x0098 - 0x0000)
struct FKeyMappings final
{
public:
	EKeyBindingType                               KeyBindingType;                                    // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputAction                                  InputAction;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E01[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKeyMapping                            Keyboard_First;                                    // 0x0008(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyMapping                            Keyboard_Second;                                   // 0x0038(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyMapping                            GamePad_First;                                     // 0x0068(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyMappings) == 0x000008, "Wrong alignment on FKeyMappings");
static_assert(sizeof(FKeyMappings) == 0x000098, "Wrong size on FKeyMappings");
static_assert(offsetof(FKeyMappings, KeyBindingType) == 0x000000, "Member 'FKeyMappings::KeyBindingType' has a wrong offset!");
static_assert(offsetof(FKeyMappings, InputAction) == 0x000001, "Member 'FKeyMappings::InputAction' has a wrong offset!");
static_assert(offsetof(FKeyMappings, Keyboard_First) == 0x000008, "Member 'FKeyMappings::Keyboard_First' has a wrong offset!");
static_assert(offsetof(FKeyMappings, Keyboard_Second) == 0x000038, "Member 'FKeyMappings::Keyboard_Second' has a wrong offset!");
static_assert(offsetof(FKeyMappings, GamePad_First) == 0x000068, "Member 'FKeyMappings::GamePad_First' has a wrong offset!");

// ScriptStruct Stigma.BattleKeyBindOption
// 0x11D0 (0x11D0 - 0x0000)
struct FBattleKeyBindOption final
{
public:
	struct FKeyMappings                           MoveForward;                                       // 0x0000(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           MoveBackward;                                      // 0x0098(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           MoveRight;                                         // 0x0130(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           MoveLeft;                                          // 0x01C8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Crouch;                                            // 0x0260(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Interaction;                                       // 0x02F8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Fire;                                              // 0x0390(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Aiming;                                            // 0x0428(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Reload;                                            // 0x04C0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           ShowLaserSight;                                    // 0x0558(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           SendPing;                                          // 0x05F0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           SelectPing;                                        // 0x0688(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           ActiveSkill1;                                      // 0x0720(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           ActiveSkill2;                                      // 0x07B8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           ActiveSkill3;                                      // 0x0850(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FastMove;                                          // 0x08E8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           BoosterSlot1;                                      // 0x0980(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           BoosterSlot2;                                      // 0x0A18(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           BoosterSlot3;                                      // 0x0AB0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           BoosterSlot4;                                      // 0x0B48(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           ShowStatusBoard;                                   // 0x0BE0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           AutoBoosters;                                      // 0x0C78(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           HideHUD;                                           // 0x0D10(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           RadioChatAll;                                      // 0x0DA8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           RadioChat1;                                        // 0x0E40(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           RadioChat2;                                        // 0x0ED8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           RadioChat3;                                        // 0x0F70(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           RadioChat4;                                        // 0x1008(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           OpenStore;                                         // 0x10A0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           SteamScreenshot;                                   // 0x1138(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleKeyBindOption) == 0x000008, "Wrong alignment on FBattleKeyBindOption");
static_assert(sizeof(FBattleKeyBindOption) == 0x0011D0, "Wrong size on FBattleKeyBindOption");
static_assert(offsetof(FBattleKeyBindOption, MoveForward) == 0x000000, "Member 'FBattleKeyBindOption::MoveForward' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, MoveBackward) == 0x000098, "Member 'FBattleKeyBindOption::MoveBackward' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, MoveRight) == 0x000130, "Member 'FBattleKeyBindOption::MoveRight' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, MoveLeft) == 0x0001C8, "Member 'FBattleKeyBindOption::MoveLeft' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, Crouch) == 0x000260, "Member 'FBattleKeyBindOption::Crouch' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, Interaction) == 0x0002F8, "Member 'FBattleKeyBindOption::Interaction' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, Fire) == 0x000390, "Member 'FBattleKeyBindOption::Fire' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, Aiming) == 0x000428, "Member 'FBattleKeyBindOption::Aiming' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, Reload) == 0x0004C0, "Member 'FBattleKeyBindOption::Reload' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, ShowLaserSight) == 0x000558, "Member 'FBattleKeyBindOption::ShowLaserSight' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, SendPing) == 0x0005F0, "Member 'FBattleKeyBindOption::SendPing' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, SelectPing) == 0x000688, "Member 'FBattleKeyBindOption::SelectPing' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, ActiveSkill1) == 0x000720, "Member 'FBattleKeyBindOption::ActiveSkill1' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, ActiveSkill2) == 0x0007B8, "Member 'FBattleKeyBindOption::ActiveSkill2' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, ActiveSkill3) == 0x000850, "Member 'FBattleKeyBindOption::ActiveSkill3' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, FastMove) == 0x0008E8, "Member 'FBattleKeyBindOption::FastMove' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, BoosterSlot1) == 0x000980, "Member 'FBattleKeyBindOption::BoosterSlot1' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, BoosterSlot2) == 0x000A18, "Member 'FBattleKeyBindOption::BoosterSlot2' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, BoosterSlot3) == 0x000AB0, "Member 'FBattleKeyBindOption::BoosterSlot3' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, BoosterSlot4) == 0x000B48, "Member 'FBattleKeyBindOption::BoosterSlot4' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, ShowStatusBoard) == 0x000BE0, "Member 'FBattleKeyBindOption::ShowStatusBoard' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, AutoBoosters) == 0x000C78, "Member 'FBattleKeyBindOption::AutoBoosters' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, HideHUD) == 0x000D10, "Member 'FBattleKeyBindOption::HideHUD' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, RadioChatAll) == 0x000DA8, "Member 'FBattleKeyBindOption::RadioChatAll' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, RadioChat1) == 0x000E40, "Member 'FBattleKeyBindOption::RadioChat1' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, RadioChat2) == 0x000ED8, "Member 'FBattleKeyBindOption::RadioChat2' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, RadioChat3) == 0x000F70, "Member 'FBattleKeyBindOption::RadioChat3' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, RadioChat4) == 0x001008, "Member 'FBattleKeyBindOption::RadioChat4' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, OpenStore) == 0x0010A0, "Member 'FBattleKeyBindOption::OpenStore' has a wrong offset!");
static_assert(offsetof(FBattleKeyBindOption, SteamScreenshot) == 0x001138, "Member 'FBattleKeyBindOption::SteamScreenshot' has a wrong offset!");

// ScriptStruct Stigma.SpectateKeyBindOption
// 0x11D0 (0x11D0 - 0x0000)
struct FSpectateKeyBindOption final
{
public:
	struct FKeyMappings                           GamePause;                                         // 0x0000(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           PlayerSightLine;                                   // 0x0098(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player1Camera;                                     // 0x0130(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player2Camera;                                     // 0x01C8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player3Camera;                                     // 0x0260(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player4Camera;                                     // 0x02F8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player5Camera;                                     // 0x0390(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player6Camera;                                     // 0x0428(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player7Camera;                                     // 0x04C0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player8Camera;                                     // 0x0558(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player9Camera;                                     // 0x05F0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player10Camera;                                    // 0x0688(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player11Camera;                                    // 0x0720(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           Player12Camera;                                    // 0x07B8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           NextPlayerCamera;                                  // 0x0850(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           PrevPlayerCamera;                                  // 0x08E8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FreeCamera;                                        // 0x0980(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           CameraForward;                                     // 0x0A18(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           CameraBackward;                                    // 0x0AB0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           CameraLeft;                                        // 0x0B48(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           CameraRight;                                       // 0x0BE0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           CharacterOrbitCamera;                              // 0x0C78(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera1;                                      // 0x0D10(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera2;                                      // 0x0DA8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera3;                                      // 0x0E40(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera4;                                      // 0x0ED8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera5;                                      // 0x0F70(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera6;                                      // 0x1008(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera7;                                      // 0x10A0(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKeyMappings                           FixedCamera8;                                      // 0x1138(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpectateKeyBindOption) == 0x000008, "Wrong alignment on FSpectateKeyBindOption");
static_assert(sizeof(FSpectateKeyBindOption) == 0x0011D0, "Wrong size on FSpectateKeyBindOption");
static_assert(offsetof(FSpectateKeyBindOption, GamePause) == 0x000000, "Member 'FSpectateKeyBindOption::GamePause' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, PlayerSightLine) == 0x000098, "Member 'FSpectateKeyBindOption::PlayerSightLine' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player1Camera) == 0x000130, "Member 'FSpectateKeyBindOption::Player1Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player2Camera) == 0x0001C8, "Member 'FSpectateKeyBindOption::Player2Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player3Camera) == 0x000260, "Member 'FSpectateKeyBindOption::Player3Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player4Camera) == 0x0002F8, "Member 'FSpectateKeyBindOption::Player4Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player5Camera) == 0x000390, "Member 'FSpectateKeyBindOption::Player5Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player6Camera) == 0x000428, "Member 'FSpectateKeyBindOption::Player6Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player7Camera) == 0x0004C0, "Member 'FSpectateKeyBindOption::Player7Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player8Camera) == 0x000558, "Member 'FSpectateKeyBindOption::Player8Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player9Camera) == 0x0005F0, "Member 'FSpectateKeyBindOption::Player9Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player10Camera) == 0x000688, "Member 'FSpectateKeyBindOption::Player10Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player11Camera) == 0x000720, "Member 'FSpectateKeyBindOption::Player11Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, Player12Camera) == 0x0007B8, "Member 'FSpectateKeyBindOption::Player12Camera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, NextPlayerCamera) == 0x000850, "Member 'FSpectateKeyBindOption::NextPlayerCamera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, PrevPlayerCamera) == 0x0008E8, "Member 'FSpectateKeyBindOption::PrevPlayerCamera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FreeCamera) == 0x000980, "Member 'FSpectateKeyBindOption::FreeCamera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, CameraForward) == 0x000A18, "Member 'FSpectateKeyBindOption::CameraForward' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, CameraBackward) == 0x000AB0, "Member 'FSpectateKeyBindOption::CameraBackward' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, CameraLeft) == 0x000B48, "Member 'FSpectateKeyBindOption::CameraLeft' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, CameraRight) == 0x000BE0, "Member 'FSpectateKeyBindOption::CameraRight' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, CharacterOrbitCamera) == 0x000C78, "Member 'FSpectateKeyBindOption::CharacterOrbitCamera' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera1) == 0x000D10, "Member 'FSpectateKeyBindOption::FixedCamera1' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera2) == 0x000DA8, "Member 'FSpectateKeyBindOption::FixedCamera2' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera3) == 0x000E40, "Member 'FSpectateKeyBindOption::FixedCamera3' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera4) == 0x000ED8, "Member 'FSpectateKeyBindOption::FixedCamera4' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera5) == 0x000F70, "Member 'FSpectateKeyBindOption::FixedCamera5' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera6) == 0x001008, "Member 'FSpectateKeyBindOption::FixedCamera6' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera7) == 0x0010A0, "Member 'FSpectateKeyBindOption::FixedCamera7' has a wrong offset!");
static_assert(offsetof(FSpectateKeyBindOption, FixedCamera8) == 0x001138, "Member 'FSpectateKeyBindOption::FixedCamera8' has a wrong offset!");

// ScriptStruct Stigma.KeyBindOption
// 0x23A0 (0x23A0 - 0x0000)
struct FKeyBindOption final
{
public:
	struct FBattleKeyBindOption                   BattleKeys;                                        // 0x0000(0x11D0)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSpectateKeyBindOption                 SpectateKeys;                                      // 0x11D0(0x11D0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyBindOption) == 0x000008, "Wrong alignment on FKeyBindOption");
static_assert(sizeof(FKeyBindOption) == 0x0023A0, "Wrong size on FKeyBindOption");
static_assert(offsetof(FKeyBindOption, BattleKeys) == 0x000000, "Member 'FKeyBindOption::BattleKeys' has a wrong offset!");
static_assert(offsetof(FKeyBindOption, SpectateKeys) == 0x0011D0, "Member 'FKeyBindOption::SpectateKeys' has a wrong offset!");

// ScriptStruct Stigma.ControlOption
// 0x23C0 (0x23C0 - 0x0000)
struct FControlOption final
{
public:
	ECharaType                                    CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E02[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         SensitivityOnAim;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityOnSnipeAim;                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityAtNomal;                                // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableInvertForHorizontal;                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableInvertForVertical;                           // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E03[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FKeyBindOption                         KeyBindOption;                                     // 0x0018(0x23A0)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          UseHoldCrouch;                                     // 0x23B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHoldAiming;                                     // 0x23B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHoldShowStatusBoard;                            // 0x23BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNoticeActiveSkillCombo;                         // 0x23BB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAutoBoosters;                                   // 0x23BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E04[0x3];                                     // 0x23BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FControlOption) == 0x000008, "Wrong alignment on FControlOption");
static_assert(sizeof(FControlOption) == 0x0023C0, "Wrong size on FControlOption");
static_assert(offsetof(FControlOption, CharaType) == 0x000000, "Member 'FControlOption::CharaType' has a wrong offset!");
static_assert(offsetof(FControlOption, SensitivityOnAim) == 0x000004, "Member 'FControlOption::SensitivityOnAim' has a wrong offset!");
static_assert(offsetof(FControlOption, SensitivityOnSnipeAim) == 0x000008, "Member 'FControlOption::SensitivityOnSnipeAim' has a wrong offset!");
static_assert(offsetof(FControlOption, SensitivityAtNomal) == 0x00000C, "Member 'FControlOption::SensitivityAtNomal' has a wrong offset!");
static_assert(offsetof(FControlOption, EnableInvertForHorizontal) == 0x000010, "Member 'FControlOption::EnableInvertForHorizontal' has a wrong offset!");
static_assert(offsetof(FControlOption, EnableInvertForVertical) == 0x000011, "Member 'FControlOption::EnableInvertForVertical' has a wrong offset!");
static_assert(offsetof(FControlOption, KeyBindOption) == 0x000018, "Member 'FControlOption::KeyBindOption' has a wrong offset!");
static_assert(offsetof(FControlOption, UseHoldCrouch) == 0x0023B8, "Member 'FControlOption::UseHoldCrouch' has a wrong offset!");
static_assert(offsetof(FControlOption, UseHoldAiming) == 0x0023B9, "Member 'FControlOption::UseHoldAiming' has a wrong offset!");
static_assert(offsetof(FControlOption, UseHoldShowStatusBoard) == 0x0023BA, "Member 'FControlOption::UseHoldShowStatusBoard' has a wrong offset!");
static_assert(offsetof(FControlOption, UseNoticeActiveSkillCombo) == 0x0023BB, "Member 'FControlOption::UseNoticeActiveSkillCombo' has a wrong offset!");
static_assert(offsetof(FControlOption, UseAutoBoosters) == 0x0023BC, "Member 'FControlOption::UseAutoBoosters' has a wrong offset!");

// ScriptStruct Stigma.RoundResult
// 0x0008 (0x0008 - 0x0000)
struct FRoundResult final
{
public:
	ERoundResult                                  Result;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundResultReason                            ResultReason;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E05[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         FactionChangedRound;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRoundResult) == 0x000004, "Wrong alignment on FRoundResult");
static_assert(sizeof(FRoundResult) == 0x000008, "Wrong size on FRoundResult");
static_assert(offsetof(FRoundResult, Result) == 0x000000, "Member 'FRoundResult::Result' has a wrong offset!");
static_assert(offsetof(FRoundResult, ResultReason) == 0x000001, "Member 'FRoundResult::ResultReason' has a wrong offset!");
static_assert(offsetof(FRoundResult, FactionChangedRound) == 0x000004, "Member 'FRoundResult::FactionChangedRound' has a wrong offset!");

// ScriptStruct Stigma.ElevatorState
// 0x0002 (0x0002 - 0x0000)
struct FElevatorState final
{
public:
	EElevatorStatus                               Status;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGoingUp;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElevatorState) == 0x000001, "Wrong alignment on FElevatorState");
static_assert(sizeof(FElevatorState) == 0x000002, "Wrong size on FElevatorState");
static_assert(offsetof(FElevatorState, Status) == 0x000000, "Member 'FElevatorState::Status' has a wrong offset!");
static_assert(offsetof(FElevatorState, IsGoingUp) == 0x000001, "Member 'FElevatorState::IsGoingUp' has a wrong offset!");

// ScriptStruct Stigma.Config_Booster
// 0x0048 (0x0178 - 0x0130)
struct FConfig_Booster final : public FItemEntry
{
public:
	int32                                         UseCount;                                          // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooltime;                                          // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Buff>                BuffIDs;                                           // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CanAutoBooster;                                    // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E06[0x3];                                     // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         AutoBoosterParam1;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AutoBoosterTriggeerClass;                          // 0x0150(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Booster) == 0x000008, "Wrong alignment on FConfig_Booster");
static_assert(sizeof(FConfig_Booster) == 0x000178, "Wrong size on FConfig_Booster");
static_assert(offsetof(FConfig_Booster, UseCount) == 0x000130, "Member 'FConfig_Booster::UseCount' has a wrong offset!");
static_assert(offsetof(FConfig_Booster, Cooltime) == 0x000134, "Member 'FConfig_Booster::Cooltime' has a wrong offset!");
static_assert(offsetof(FConfig_Booster, BuffIDs) == 0x000138, "Member 'FConfig_Booster::BuffIDs' has a wrong offset!");
static_assert(offsetof(FConfig_Booster, CanAutoBooster) == 0x000148, "Member 'FConfig_Booster::CanAutoBooster' has a wrong offset!");
static_assert(offsetof(FConfig_Booster, AutoBoosterParam1) == 0x00014C, "Member 'FConfig_Booster::AutoBoosterParam1' has a wrong offset!");
static_assert(offsetof(FConfig_Booster, AutoBoosterTriggeerClass) == 0x000150, "Member 'FConfig_Booster::AutoBoosterTriggeerClass' has a wrong offset!");

// ScriptStruct Stigma.Config_ChallengeWave
// 0x0028 (0x0030 - 0x0008)
struct FConfig_ChallengeWave final : public FTableRowBase
{
public:
	int32                                         Round;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWaitForPrevWaves;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E07[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         DelayTime;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 InstanceIDs;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SpawnCount;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointIndex;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_ChallengeWave) == 0x000008, "Wrong alignment on FConfig_ChallengeWave");
static_assert(sizeof(FConfig_ChallengeWave) == 0x000030, "Wrong size on FConfig_ChallengeWave");
static_assert(offsetof(FConfig_ChallengeWave, Round) == 0x000008, "Member 'FConfig_ChallengeWave::Round' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeWave, Index) == 0x00000C, "Member 'FConfig_ChallengeWave::Index' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeWave, IsWaitForPrevWaves) == 0x000010, "Member 'FConfig_ChallengeWave::IsWaitForPrevWaves' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeWave, DelayTime) == 0x000014, "Member 'FConfig_ChallengeWave::DelayTime' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeWave, InstanceIDs) == 0x000018, "Member 'FConfig_ChallengeWave::InstanceIDs' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeWave, SpawnCount) == 0x000028, "Member 'FConfig_ChallengeWave::SpawnCount' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeWave, SpawnPointIndex) == 0x00002C, "Member 'FConfig_ChallengeWave::SpawnPointIndex' has a wrong offset!");

// ScriptStruct Stigma.BattleStoreHistory_Gears
// 0x0050 (0x0050 - 0x0000)
struct FBattleStoreHistory_Gears final
{
public:
	TMap<EBodyParts, float>                       Armors;                                            // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleStoreHistory_Gears) == 0x000008, "Wrong alignment on FBattleStoreHistory_Gears");
static_assert(sizeof(FBattleStoreHistory_Gears) == 0x000050, "Wrong size on FBattleStoreHistory_Gears");
static_assert(offsetof(FBattleStoreHistory_Gears, Armors) == 0x000000, "Member 'FBattleStoreHistory_Gears::Armors' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Emoticon
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Emoticon final : public FItemID
{
};
static_assert(alignof(FItemID_Emoticon) == 0x000008, "Wrong alignment on FItemID_Emoticon");
static_assert(sizeof(FItemID_Emoticon) == 0x000010, "Wrong size on FItemID_Emoticon");

// ScriptStruct Stigma.Config_ContentUnlocker
// 0x00A8 (0x00B0 - 0x0008)
struct FConfig_ContentUnlocker final : public FTableRowBase
{
public:
	class FName                                   NameID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnLobby;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnWaitingRoom;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnBattle;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E08[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         AutoClosingTime;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SubDesc;                                           // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   GoToWidgetID;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         GoToWidgetDetailerParams;                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DevMemo;                                           // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_ContentUnlocker) == 0x000008, "Wrong alignment on FConfig_ContentUnlocker");
static_assert(sizeof(FConfig_ContentUnlocker) == 0x0000B0, "Wrong size on FConfig_ContentUnlocker");
static_assert(offsetof(FConfig_ContentUnlocker, NameID) == 0x000008, "Member 'FConfig_ContentUnlocker::NameID' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, OnLobby) == 0x000010, "Member 'FConfig_ContentUnlocker::OnLobby' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, OnWaitingRoom) == 0x000011, "Member 'FConfig_ContentUnlocker::OnWaitingRoom' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, OnBattle) == 0x000012, "Member 'FConfig_ContentUnlocker::OnBattle' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, AutoClosingTime) == 0x000014, "Member 'FConfig_ContentUnlocker::AutoClosingTime' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, Icon) == 0x000018, "Member 'FConfig_ContentUnlocker::Icon' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, DisplayName) == 0x000040, "Member 'FConfig_ContentUnlocker::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, Desc) == 0x000058, "Member 'FConfig_ContentUnlocker::Desc' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, SubDesc) == 0x000070, "Member 'FConfig_ContentUnlocker::SubDesc' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, GoToWidgetID) == 0x000088, "Member 'FConfig_ContentUnlocker::GoToWidgetID' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, GoToWidgetDetailerParams) == 0x000090, "Member 'FConfig_ContentUnlocker::GoToWidgetDetailerParams' has a wrong offset!");
static_assert(offsetof(FConfig_ContentUnlocker, DevMemo) == 0x0000A0, "Member 'FConfig_ContentUnlocker::DevMemo' has a wrong offset!");

// ScriptStruct Stigma.BattleResult_Team
// 0x0028 (0x0028 - 0x0000)
struct FBattleResult_Team final
{
public:
	ETeams                                        Team;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E09[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundTotal;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundWin;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundDraw;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattleResult_User>             UserResult;                                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleResult_Team) == 0x000008, "Wrong alignment on FBattleResult_Team");
static_assert(sizeof(FBattleResult_Team) == 0x000028, "Wrong size on FBattleResult_Team");
static_assert(offsetof(FBattleResult_Team, Team) == 0x000000, "Member 'FBattleResult_Team::Team' has a wrong offset!");
static_assert(offsetof(FBattleResult_Team, Score) == 0x000004, "Member 'FBattleResult_Team::Score' has a wrong offset!");
static_assert(offsetof(FBattleResult_Team, RoundTotal) == 0x000008, "Member 'FBattleResult_Team::RoundTotal' has a wrong offset!");
static_assert(offsetof(FBattleResult_Team, RoundWin) == 0x00000C, "Member 'FBattleResult_Team::RoundWin' has a wrong offset!");
static_assert(offsetof(FBattleResult_Team, RoundDraw) == 0x000010, "Member 'FBattleResult_Team::RoundDraw' has a wrong offset!");
static_assert(offsetof(FBattleResult_Team, Rank) == 0x000014, "Member 'FBattleResult_Team::Rank' has a wrong offset!");
static_assert(offsetof(FBattleResult_Team, UserResult) == 0x000018, "Member 'FBattleResult_Team::UserResult' has a wrong offset!");

// ScriptStruct Stigma.BattleResult
// 0x0060 (0x0060 - 0x0000)
struct FBattleResult final
{
public:
	class FString                                 DediIDS;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleIDS;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleDecision                               BattleDecision;                                    // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        TeamWin;                                           // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0A[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 MapName;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustomGame;                                      // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0B[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTimeISO                           StartAt;                                           // 0x0040(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTimeISO                           EndAt;                                             // 0x0048(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattleResult_Team>             TeamResult;                                        // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleResult) == 0x000008, "Wrong alignment on FBattleResult");
static_assert(sizeof(FBattleResult) == 0x000060, "Wrong size on FBattleResult");
static_assert(offsetof(FBattleResult, DediIDS) == 0x000000, "Member 'FBattleResult::DediIDS' has a wrong offset!");
static_assert(offsetof(FBattleResult, BattleIDS) == 0x000010, "Member 'FBattleResult::BattleIDS' has a wrong offset!");
static_assert(offsetof(FBattleResult, GameMode) == 0x000020, "Member 'FBattleResult::GameMode' has a wrong offset!");
static_assert(offsetof(FBattleResult, BattleDecision) == 0x000021, "Member 'FBattleResult::BattleDecision' has a wrong offset!");
static_assert(offsetof(FBattleResult, TeamWin) == 0x000022, "Member 'FBattleResult::TeamWin' has a wrong offset!");
static_assert(offsetof(FBattleResult, MapName) == 0x000028, "Member 'FBattleResult::MapName' has a wrong offset!");
static_assert(offsetof(FBattleResult, IsCustomGame) == 0x000038, "Member 'FBattleResult::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FBattleResult, StartAt) == 0x000040, "Member 'FBattleResult::StartAt' has a wrong offset!");
static_assert(offsetof(FBattleResult, EndAt) == 0x000048, "Member 'FBattleResult::EndAt' has a wrong offset!");
static_assert(offsetof(FBattleResult, TeamResult) == 0x000050, "Member 'FBattleResult::TeamResult' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_LeaveBattle
// 0x0000 (0x0030 - 0x0030)
struct FBattleLog_LeaveBattle final : public FStigmaLogBase_User
{
};
static_assert(alignof(FBattleLog_LeaveBattle) == 0x000008, "Wrong alignment on FBattleLog_LeaveBattle");
static_assert(sizeof(FBattleLog_LeaveBattle) == 0x000030, "Wrong size on FBattleLog_LeaveBattle");

// ScriptStruct Stigma.LinkedHelp
// 0x0038 (0x0038 - 0x0000)
struct FLinkedHelp final
{
public:
	struct FKey                                   KeyBinding;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HelpURL;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_HTMLHelpViewer>         ViewerClass;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinkedHelp) == 0x000008, "Wrong alignment on FLinkedHelp");
static_assert(sizeof(FLinkedHelp) == 0x000038, "Wrong size on FLinkedHelp");
static_assert(offsetof(FLinkedHelp, KeyBinding) == 0x000000, "Member 'FLinkedHelp::KeyBinding' has a wrong offset!");
static_assert(offsetof(FLinkedHelp, HelpURL) == 0x000018, "Member 'FLinkedHelp::HelpURL' has a wrong offset!");
static_assert(offsetof(FLinkedHelp, ViewerClass) == 0x000030, "Member 'FLinkedHelp::ViewerClass' has a wrong offset!");

// ScriptStruct Stigma.Config_OccupationMode
// 0x0008 (0x0010 - 0x0008)
struct FConfig_OccupationMode final : public FTableRowBase
{
public:
	int32                                         VictoryScore;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillScore;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_OccupationMode) == 0x000008, "Wrong alignment on FConfig_OccupationMode");
static_assert(sizeof(FConfig_OccupationMode) == 0x000010, "Wrong size on FConfig_OccupationMode");
static_assert(offsetof(FConfig_OccupationMode, VictoryScore) == 0x000008, "Member 'FConfig_OccupationMode::VictoryScore' has a wrong offset!");
static_assert(offsetof(FConfig_OccupationMode, KillScore) == 0x00000C, "Member 'FConfig_OccupationMode::KillScore' has a wrong offset!");

// ScriptStruct Stigma.Config_Match
// 0x0028 (0x0030 - 0x0008)
struct FConfig_Match final : public FTableRowBase
{
public:
	int32                                         TimeLimitForBOTMatch;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewbieBar;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchELORange>                 ELORanges;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchTimeOffset>               TimeOffsets;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Match) == 0x000008, "Wrong alignment on FConfig_Match");
static_assert(sizeof(FConfig_Match) == 0x000030, "Wrong size on FConfig_Match");
static_assert(offsetof(FConfig_Match, TimeLimitForBOTMatch) == 0x000008, "Member 'FConfig_Match::TimeLimitForBOTMatch' has a wrong offset!");
static_assert(offsetof(FConfig_Match, NewbieBar) == 0x00000C, "Member 'FConfig_Match::NewbieBar' has a wrong offset!");
static_assert(offsetof(FConfig_Match, ELORanges) == 0x000010, "Member 'FConfig_Match::ELORanges' has a wrong offset!");
static_assert(offsetof(FConfig_Match, TimeOffsets) == 0x000020, "Member 'FConfig_Match::TimeOffsets' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_Hit
// 0x0038 (0x0068 - 0x0030)
struct FBattleLog_Hit final : public FStigmaLogBase_User
{
public:
	struct FUserID                                AssistID;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                VictimID;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      GunType;                                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponType                                   WeaponType;                                        // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlocked;                                         // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0C[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Pos;                                               // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        bone;                                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0D[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Damage;                                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_Hit) == 0x000008, "Wrong alignment on FBattleLog_Hit");
static_assert(sizeof(FBattleLog_Hit) == 0x000068, "Wrong size on FBattleLog_Hit");
static_assert(offsetof(FBattleLog_Hit, AssistID) == 0x000030, "Member 'FBattleLog_Hit::AssistID' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, VictimID) == 0x000038, "Member 'FBattleLog_Hit::VictimID' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, GunType) == 0x000040, "Member 'FBattleLog_Hit::GunType' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, WeaponType) == 0x000041, "Member 'FBattleLog_Hit::WeaponType' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, AttackType) == 0x000042, "Member 'FBattleLog_Hit::AttackType' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, IsBlocked) == 0x000043, "Member 'FBattleLog_Hit::IsBlocked' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, Pos) == 0x000048, "Member 'FBattleLog_Hit::Pos' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, bone) == 0x000060, "Member 'FBattleLog_Hit::bone' has a wrong offset!");
static_assert(offsetof(FBattleLog_Hit, Damage) == 0x000064, "Member 'FBattleLog_Hit::Damage' has a wrong offset!");

// ScriptStruct Stigma.BattleLog_BattleResult
// 0x0060 (0x0088 - 0x0028)
struct FBattleLog_BattleResult final : public FStigmaLogBase
{
public:
	struct FBattleResult                          BattleResult;                                      // 0x0028(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleLog_BattleResult) == 0x000008, "Wrong alignment on FBattleLog_BattleResult");
static_assert(sizeof(FBattleLog_BattleResult) == 0x000088, "Wrong size on FBattleLog_BattleResult");
static_assert(offsetof(FBattleLog_BattleResult, BattleResult) == 0x000028, "Member 'FBattleLog_BattleResult::BattleResult' has a wrong offset!");

// ScriptStruct Stigma.RecruitHistoryRewardTextData
// 0x0030 (0x0030 - 0x0000)
struct FRecruitHistoryRewardTextData final
{
public:
	int32                                         RecruitNum;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemID                                ItemID;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecruitHistoryRewardTextData) == 0x000008, "Wrong alignment on FRecruitHistoryRewardTextData");
static_assert(sizeof(FRecruitHistoryRewardTextData) == 0x000030, "Wrong size on FRecruitHistoryRewardTextData");
static_assert(offsetof(FRecruitHistoryRewardTextData, RecruitNum) == 0x000000, "Member 'FRecruitHistoryRewardTextData::RecruitNum' has a wrong offset!");
static_assert(offsetof(FRecruitHistoryRewardTextData, Text) == 0x000008, "Member 'FRecruitHistoryRewardTextData::Text' has a wrong offset!");
static_assert(offsetof(FRecruitHistoryRewardTextData, ItemID) == 0x000020, "Member 'FRecruitHistoryRewardTextData::ItemID' has a wrong offset!");

// ScriptStruct Stigma.BattlePassInfo
// 0x0078 (0x0078 - 0x0000)
struct FBattlePassInfo final
{
public:
	struct FItemID_BattlePass                     BattlePassID;                                      // 0x0000(0x0010)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsActived;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E0F[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Level;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelExp;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalExp;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RewardLevel;                                       // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPremium;                                         // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E10[0x53];                                    // 0x0025(0x0053)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattlePassInfo) == 0x000008, "Wrong alignment on FBattlePassInfo");
static_assert(sizeof(FBattlePassInfo) == 0x000078, "Wrong size on FBattlePassInfo");
static_assert(offsetof(FBattlePassInfo, BattlePassID) == 0x000000, "Member 'FBattlePassInfo::BattlePassID' has a wrong offset!");
static_assert(offsetof(FBattlePassInfo, IsActived) == 0x000010, "Member 'FBattlePassInfo::IsActived' has a wrong offset!");
static_assert(offsetof(FBattlePassInfo, Level) == 0x000014, "Member 'FBattlePassInfo::Level' has a wrong offset!");
static_assert(offsetof(FBattlePassInfo, LevelExp) == 0x000018, "Member 'FBattlePassInfo::LevelExp' has a wrong offset!");
static_assert(offsetof(FBattlePassInfo, TotalExp) == 0x00001C, "Member 'FBattlePassInfo::TotalExp' has a wrong offset!");
static_assert(offsetof(FBattlePassInfo, RewardLevel) == 0x000020, "Member 'FBattlePassInfo::RewardLevel' has a wrong offset!");
static_assert(offsetof(FBattlePassInfo, IsPremium) == 0x000024, "Member 'FBattlePassInfo::IsPremium' has a wrong offset!");

// ScriptStruct Stigma.BrushStyle
// 0x0340 (0x0340 - 0x0000)
struct FBrushStyle final
{
public:
	struct FSlateBrush                            Default;                                           // 0x0000(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Focused;                                           // 0x00D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Selected;                                          // 0x01A0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x0270(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBrushStyle) == 0x000010, "Wrong alignment on FBrushStyle");
static_assert(sizeof(FBrushStyle) == 0x000340, "Wrong size on FBrushStyle");
static_assert(offsetof(FBrushStyle, Default) == 0x000000, "Member 'FBrushStyle::Default' has a wrong offset!");
static_assert(offsetof(FBrushStyle, Focused) == 0x0000D0, "Member 'FBrushStyle::Focused' has a wrong offset!");
static_assert(offsetof(FBrushStyle, Selected) == 0x0001A0, "Member 'FBrushStyle::Selected' has a wrong offset!");
static_assert(offsetof(FBrushStyle, Disabled) == 0x000270, "Member 'FBrushStyle::Disabled' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Sticker
// 0x0000 (0x01E0 - 0x01E0)
struct FGunEntry_Sticker final : public FGunEntry_AccessoryBase
{
};
static_assert(alignof(FGunEntry_Sticker) == 0x000008, "Wrong alignment on FGunEntry_Sticker");
static_assert(sizeof(FGunEntry_Sticker) == 0x0001E0, "Wrong size on FGunEntry_Sticker");

// ScriptStruct Stigma.BattlePassDefine
// 0x01A8 (0x02D8 - 0x0130)
struct FBattlePassDefine final : public FItemEntry
{
public:
	class FString                                 StartAt;                                           // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndAt;                                             // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              MissionConfigTable;                                // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LevelConfigTable;                                  // 0x0178(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPassPrice                             PremiumPrice;                                      // 0x01A0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPassPrice                             PremiumPlusPrice;                                  // 0x01F8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FItemIDRef_Currency, float>       CurrencyPerExpMap;                                 // 0x0250(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FReward                                PreviewReward;                                     // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FontMaterial;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_BattlePassMainBackground> MainBGClass;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_BattlePassIntroBackground> IntroBGClass;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_BattlePassBuyBackground> BuyBGClass;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_BattlePassBriefBackground> BriefBGClass;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattlePassDefine) == 0x000008, "Wrong alignment on FBattlePassDefine");
static_assert(sizeof(FBattlePassDefine) == 0x0002D8, "Wrong size on FBattlePassDefine");
static_assert(offsetof(FBattlePassDefine, StartAt) == 0x000130, "Member 'FBattlePassDefine::StartAt' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, EndAt) == 0x000140, "Member 'FBattlePassDefine::EndAt' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, MissionConfigTable) == 0x000150, "Member 'FBattlePassDefine::MissionConfigTable' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, LevelConfigTable) == 0x000178, "Member 'FBattlePassDefine::LevelConfigTable' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, PremiumPrice) == 0x0001A0, "Member 'FBattlePassDefine::PremiumPrice' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, PremiumPlusPrice) == 0x0001F8, "Member 'FBattlePassDefine::PremiumPlusPrice' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, CurrencyPerExpMap) == 0x000250, "Member 'FBattlePassDefine::CurrencyPerExpMap' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, PreviewReward) == 0x0002A0, "Member 'FBattlePassDefine::PreviewReward' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, FontMaterial) == 0x0002B0, "Member 'FBattlePassDefine::FontMaterial' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, MainBGClass) == 0x0002B8, "Member 'FBattlePassDefine::MainBGClass' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, IntroBGClass) == 0x0002C0, "Member 'FBattlePassDefine::IntroBGClass' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, BuyBGClass) == 0x0002C8, "Member 'FBattlePassDefine::BuyBGClass' has a wrong offset!");
static_assert(offsetof(FBattlePassDefine, BriefBGClass) == 0x0002D0, "Member 'FBattlePassDefine::BriefBGClass' has a wrong offset!");

// ScriptStruct Stigma.RenderTargetRef
// 0x0010 (0x0010 - 0x0000)
struct FRenderTargetRef final
{
public:
	ERenderTargetSize                             WidthSizeType;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERenderTargetSize                             HeightSizeType;                                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E11[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenderTargetRef) == 0x000008, "Wrong alignment on FRenderTargetRef");
static_assert(sizeof(FRenderTargetRef) == 0x000010, "Wrong size on FRenderTargetRef");
static_assert(offsetof(FRenderTargetRef, WidthSizeType) == 0x000000, "Member 'FRenderTargetRef::WidthSizeType' has a wrong offset!");
static_assert(offsetof(FRenderTargetRef, HeightSizeType) == 0x000001, "Member 'FRenderTargetRef::HeightSizeType' has a wrong offset!");
static_assert(offsetof(FRenderTargetRef, RenderTarget) == 0x000008, "Member 'FRenderTargetRef::RenderTarget' has a wrong offset!");

// ScriptStruct Stigma.ItemID_EventPage
// 0x0000 (0x0010 - 0x0010)
struct FItemID_EventPage final : public FItemID
{
};
static_assert(alignof(FItemID_EventPage) == 0x000008, "Wrong alignment on FItemID_EventPage");
static_assert(sizeof(FItemID_EventPage) == 0x000010, "Wrong size on FItemID_EventPage");

// ScriptStruct Stigma.NetEventPage
// 0x0030 (0x0030 - 0x0000)
struct FNetEventPage final
{
public:
	struct FItemID_EventPage                      EPIDN;                                             // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward;                                            // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionCount;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionReward;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E12[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              EndAt;                                             // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetEventPage) == 0x000008, "Wrong alignment on FNetEventPage");
static_assert(sizeof(FNetEventPage) == 0x000030, "Wrong size on FNetEventPage");
static_assert(offsetof(FNetEventPage, EPIDN) == 0x000000, "Member 'FNetEventPage::EPIDN' has a wrong offset!");
static_assert(offsetof(FNetEventPage, Count) == 0x000010, "Member 'FNetEventPage::Count' has a wrong offset!");
static_assert(offsetof(FNetEventPage, Reward) == 0x000014, "Member 'FNetEventPage::Reward' has a wrong offset!");
static_assert(offsetof(FNetEventPage, Progress) == 0x000018, "Member 'FNetEventPage::Progress' has a wrong offset!");
static_assert(offsetof(FNetEventPage, OptionCount) == 0x00001C, "Member 'FNetEventPage::OptionCount' has a wrong offset!");
static_assert(offsetof(FNetEventPage, OptionReward) == 0x000020, "Member 'FNetEventPage::OptionReward' has a wrong offset!");
static_assert(offsetof(FNetEventPage, EndAt) == 0x000028, "Member 'FNetEventPage::EndAt' has a wrong offset!");

// ScriptStruct Stigma.DominantPopupUIOption
// 0x0010 (0x0010 - 0x0000)
struct FDominantPopupUIOption final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasCamControl;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasHUDControl;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E13[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	class UPopupBase*                             Popup;                                             // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDominantPopupUIOption) == 0x000008, "Wrong alignment on FDominantPopupUIOption");
static_assert(sizeof(FDominantPopupUIOption) == 0x000010, "Wrong size on FDominantPopupUIOption");
static_assert(offsetof(FDominantPopupUIOption, IsActive) == 0x000000, "Member 'FDominantPopupUIOption::IsActive' has a wrong offset!");
static_assert(offsetof(FDominantPopupUIOption, HasCamControl) == 0x000001, "Member 'FDominantPopupUIOption::HasCamControl' has a wrong offset!");
static_assert(offsetof(FDominantPopupUIOption, HasHUDControl) == 0x000002, "Member 'FDominantPopupUIOption::HasHUDControl' has a wrong offset!");
static_assert(offsetof(FDominantPopupUIOption, Popup) == 0x000008, "Member 'FDominantPopupUIOption::Popup' has a wrong offset!");

// ScriptStruct Stigma.KillerInfo
// 0x000C (0x000C - 0x0000)
struct FKillerInfo final
{
public:
	ECharaType                                    CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        Team;                                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E14[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         MyKillCount;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KilledCount;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillerInfo) == 0x000004, "Wrong alignment on FKillerInfo");
static_assert(sizeof(FKillerInfo) == 0x00000C, "Wrong size on FKillerInfo");
static_assert(offsetof(FKillerInfo, CharaType) == 0x000000, "Member 'FKillerInfo::CharaType' has a wrong offset!");
static_assert(offsetof(FKillerInfo, Team) == 0x000001, "Member 'FKillerInfo::Team' has a wrong offset!");
static_assert(offsetof(FKillerInfo, MyKillCount) == 0x000004, "Member 'FKillerInfo::MyKillCount' has a wrong offset!");
static_assert(offsetof(FKillerInfo, KilledCount) == 0x000008, "Member 'FKillerInfo::KilledCount' has a wrong offset!");

// ScriptStruct Stigma.BattleStore_BuffStackList
// 0x0010 (0x0118 - 0x0108)
struct FBattleStore_BuffStackList final : public FFastArraySerializer
{
public:
	TArray<struct FBattleStore_BuffStack>         BuffStacks;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleStore_BuffStackList) == 0x000008, "Wrong alignment on FBattleStore_BuffStackList");
static_assert(sizeof(FBattleStore_BuffStackList) == 0x000118, "Wrong size on FBattleStore_BuffStackList");
static_assert(offsetof(FBattleStore_BuffStackList, BuffStacks) == 0x000108, "Member 'FBattleStore_BuffStackList::BuffStacks' has a wrong offset!");

// ScriptStruct Stigma.EventPageCompleteCountReward
// 0x0018 (0x0018 - 0x0000)
struct FEventPageCompleteCountReward final
{
public:
	int32                                         CompleteCount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E15[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                Reward;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPageCompleteCountReward) == 0x000008, "Wrong alignment on FEventPageCompleteCountReward");
static_assert(sizeof(FEventPageCompleteCountReward) == 0x000018, "Wrong size on FEventPageCompleteCountReward");
static_assert(offsetof(FEventPageCompleteCountReward, CompleteCount) == 0x000000, "Member 'FEventPageCompleteCountReward::CompleteCount' has a wrong offset!");
static_assert(offsetof(FEventPageCompleteCountReward, Reward) == 0x000008, "Member 'FEventPageCompleteCountReward::Reward' has a wrong offset!");

// ScriptStruct Stigma.Config_Bone
// 0x0010 (0x0018 - 0x0008)
struct FConfig_Bone final : public FTableRowBase
{
public:
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    Parts;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E16[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_Bone) == 0x000008, "Wrong alignment on FConfig_Bone");
static_assert(sizeof(FConfig_Bone) == 0x000018, "Wrong size on FConfig_Bone");
static_assert(offsetof(FConfig_Bone, BoneName) == 0x000008, "Member 'FConfig_Bone::BoneName' has a wrong offset!");
static_assert(offsetof(FConfig_Bone, Parts) == 0x000010, "Member 'FConfig_Bone::Parts' has a wrong offset!");

// ScriptStruct Stigma.BoneEntry
// 0x0010 (0x0018 - 0x0008)
struct FBoneEntry final : public FTableRowBase
{
public:
	EBones                                        bone;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E17[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    Parts;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E18[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBoneEntry) == 0x000008, "Wrong alignment on FBoneEntry");
static_assert(sizeof(FBoneEntry) == 0x000018, "Wrong size on FBoneEntry");
static_assert(offsetof(FBoneEntry, bone) == 0x000008, "Member 'FBoneEntry::bone' has a wrong offset!");
static_assert(offsetof(FBoneEntry, BoneName) == 0x00000C, "Member 'FBoneEntry::BoneName' has a wrong offset!");
static_assert(offsetof(FBoneEntry, Parts) == 0x000014, "Member 'FBoneEntry::Parts' has a wrong offset!");

// ScriptStruct Stigma.AIDataProviderSideValue
// 0x0008 (0x0038 - 0x0030)
struct FAIDataProviderSideValue final : public FAIDataProviderTypedValue
{
public:
	EEQT_Side                                     DefaultValue;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E19[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAIDataProviderSideValue) == 0x000008, "Wrong alignment on FAIDataProviderSideValue");
static_assert(sizeof(FAIDataProviderSideValue) == 0x000038, "Wrong size on FAIDataProviderSideValue");
static_assert(offsetof(FAIDataProviderSideValue, DefaultValue) == 0x000030, "Member 'FAIDataProviderSideValue::DefaultValue' has a wrong offset!");

// ScriptStruct Stigma.EventPageMission
// 0x0030 (0x0030 - 0x0000)
struct FEventPageMission final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Mission                     Mission;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReward                                Reward;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          ShowGoToButton;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FEventPageMission) == 0x000008, "Wrong alignment on FEventPageMission");
static_assert(sizeof(FEventPageMission) == 0x000030, "Wrong size on FEventPageMission");
static_assert(offsetof(FEventPageMission, Slot) == 0x000000, "Member 'FEventPageMission::Slot' has a wrong offset!");
static_assert(offsetof(FEventPageMission, Mission) == 0x000008, "Member 'FEventPageMission::Mission' has a wrong offset!");
static_assert(offsetof(FEventPageMission, Reward) == 0x000018, "Member 'FEventPageMission::Reward' has a wrong offset!");
static_assert(offsetof(FEventPageMission, ShowGoToButton) == 0x000028, "Member 'FEventPageMission::ShowGoToButton' has a wrong offset!");

// ScriptStruct Stigma.PartsEntry_Body
// 0x0088 (0x0228 - 0x01A0)
struct FPartsEntry_Body final : public FPartsEntry
{
public:
	struct FMeshDefine                            FPV;                                               // 0x01A0(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Gear>                Gears;                                             // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EArmorType                                    DefaultArmor;                                      // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1C[0x7];                                     // 0x0221(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FPartsEntry_Body) == 0x000008, "Wrong alignment on FPartsEntry_Body");
static_assert(sizeof(FPartsEntry_Body) == 0x000228, "Wrong size on FPartsEntry_Body");
static_assert(offsetof(FPartsEntry_Body, FPV) == 0x0001A0, "Member 'FPartsEntry_Body::FPV' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Body, Gears) == 0x000210, "Member 'FPartsEntry_Body::Gears' has a wrong offset!");
static_assert(offsetof(FPartsEntry_Body, DefaultArmor) == 0x000220, "Member 'FPartsEntry_Body::DefaultArmor' has a wrong offset!");

// ScriptStruct Stigma.ActionLog_Bounty
// 0x0018 (0x0018 - 0x0000)
struct FActionLog_Bounty final
{
public:
	class ACharaBase*                             Involver;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBountyActionType                             ActionType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionLog_Bounty) == 0x000008, "Wrong alignment on FActionLog_Bounty");
static_assert(sizeof(FActionLog_Bounty) == 0x000018, "Wrong size on FActionLog_Bounty");
static_assert(offsetof(FActionLog_Bounty, Involver) == 0x000000, "Member 'FActionLog_Bounty::Involver' has a wrong offset!");
static_assert(offsetof(FActionLog_Bounty, ActionType) == 0x000008, "Member 'FActionLog_Bounty::ActionType' has a wrong offset!");
static_assert(offsetof(FActionLog_Bounty, Target) == 0x000010, "Member 'FActionLog_Bounty::Target' has a wrong offset!");

// ScriptStruct Stigma.BC_FriendUpdate
// 0x0030 (0x0030 - 0x0000)
struct FBC_FriendUpdate final
{
public:
	struct FUserID                                Asker;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                Replyer;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              ReplyerNick;                                       // 0x0010(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accept;                                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1E[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_FriendUpdate) == 0x000008, "Wrong alignment on FBC_FriendUpdate");
static_assert(sizeof(FBC_FriendUpdate) == 0x000030, "Wrong size on FBC_FriendUpdate");
static_assert(offsetof(FBC_FriendUpdate, Asker) == 0x000000, "Member 'FBC_FriendUpdate::Asker' has a wrong offset!");
static_assert(offsetof(FBC_FriendUpdate, Replyer) == 0x000008, "Member 'FBC_FriendUpdate::Replyer' has a wrong offset!");
static_assert(offsetof(FBC_FriendUpdate, ReplyerNick) == 0x000010, "Member 'FBC_FriendUpdate::ReplyerNick' has a wrong offset!");
static_assert(offsetof(FBC_FriendUpdate, Accept) == 0x000028, "Member 'FBC_FriendUpdate::Accept' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Function
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Function final : public FItemID
{
};
static_assert(alignof(FItemID_Function) == 0x000008, "Wrong alignment on FItemID_Function");
static_assert(sizeof(FItemID_Function) == 0x000010, "Wrong size on FItemID_Function");

// ScriptStruct Stigma.ClientBattleOption
// 0x0038 (0x0038 - 0x0000)
struct FClientBattleOption final
{
public:
	EGameMode                                     GameMode;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   MapName;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E20[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Options;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowAllCharacters;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWelcomeMatch;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E21[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemID_Function>               Functions;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBattleOption) == 0x000008, "Wrong alignment on FClientBattleOption");
static_assert(sizeof(FClientBattleOption) == 0x000038, "Wrong size on FClientBattleOption");
static_assert(offsetof(FClientBattleOption, GameMode) == 0x000000, "Member 'FClientBattleOption::GameMode' has a wrong offset!");
static_assert(offsetof(FClientBattleOption, MapName) == 0x000004, "Member 'FClientBattleOption::MapName' has a wrong offset!");
static_assert(offsetof(FClientBattleOption, Options) == 0x000010, "Member 'FClientBattleOption::Options' has a wrong offset!");
static_assert(offsetof(FClientBattleOption, AllowAllCharacters) == 0x000020, "Member 'FClientBattleOption::AllowAllCharacters' has a wrong offset!");
static_assert(offsetof(FClientBattleOption, IsWelcomeMatch) == 0x000021, "Member 'FClientBattleOption::IsWelcomeMatch' has a wrong offset!");
static_assert(offsetof(FClientBattleOption, Functions) == 0x000028, "Member 'FClientBattleOption::Functions' has a wrong offset!");

// ScriptStruct Stigma.BuffEffectOption
// 0x0010 (0x0010 - 0x0000)
struct FBuffEffectOption final
{
public:
	EBuffEffectType                               BuffEffectType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffValueDisplayType                         DisplayType;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisplayDiffValue;                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPositiveBeneficial;                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeneficialBaseValue;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrevValue;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffEffectOption) == 0x000004, "Wrong alignment on FBuffEffectOption");
static_assert(sizeof(FBuffEffectOption) == 0x000010, "Wrong size on FBuffEffectOption");
static_assert(offsetof(FBuffEffectOption, BuffEffectType) == 0x000000, "Member 'FBuffEffectOption::BuffEffectType' has a wrong offset!");
static_assert(offsetof(FBuffEffectOption, DisplayType) == 0x000001, "Member 'FBuffEffectOption::DisplayType' has a wrong offset!");
static_assert(offsetof(FBuffEffectOption, IsDisplayDiffValue) == 0x000002, "Member 'FBuffEffectOption::IsDisplayDiffValue' has a wrong offset!");
static_assert(offsetof(FBuffEffectOption, IsPositiveBeneficial) == 0x000003, "Member 'FBuffEffectOption::IsPositiveBeneficial' has a wrong offset!");
static_assert(offsetof(FBuffEffectOption, BeneficialBaseValue) == 0x000004, "Member 'FBuffEffectOption::BeneficialBaseValue' has a wrong offset!");
static_assert(offsetof(FBuffEffectOption, PrevValue) == 0x000008, "Member 'FBuffEffectOption::PrevValue' has a wrong offset!");
static_assert(offsetof(FBuffEffectOption, Value) == 0x00000C, "Member 'FBuffEffectOption::Value' has a wrong offset!");

// ScriptStruct Stigma.EffectDetail
// 0x0028 (0x0028 - 0x0000)
struct FEffectDetail final
{
public:
	EBuffEffectType                               EffectType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffValueDisplayType                         DisplayType;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E22[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayTitle;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E23[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FEffectDetail) == 0x000008, "Wrong alignment on FEffectDetail");
static_assert(sizeof(FEffectDetail) == 0x000028, "Wrong size on FEffectDetail");
static_assert(offsetof(FEffectDetail, EffectType) == 0x000000, "Member 'FEffectDetail::EffectType' has a wrong offset!");
static_assert(offsetof(FEffectDetail, DisplayType) == 0x000001, "Member 'FEffectDetail::DisplayType' has a wrong offset!");
static_assert(offsetof(FEffectDetail, DisplayTitle) == 0x000008, "Member 'FEffectDetail::DisplayTitle' has a wrong offset!");
static_assert(offsetof(FEffectDetail, Value) == 0x000020, "Member 'FEffectDetail::Value' has a wrong offset!");

// ScriptStruct Stigma.Config_FlashBang
// 0x0008 (0x0010 - 0x0008)
struct FConfig_FlashBang final : public FTableRowBase
{
public:
	float                                         AcceptableAngle;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E24[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_FlashBang) == 0x000008, "Wrong alignment on FConfig_FlashBang");
static_assert(sizeof(FConfig_FlashBang) == 0x000010, "Wrong size on FConfig_FlashBang");
static_assert(offsetof(FConfig_FlashBang, AcceptableAngle) == 0x000008, "Member 'FConfig_FlashBang::AcceptableAngle' has a wrong offset!");

// ScriptStruct Stigma.BuffValue
// 0x0038 (0x0038 - 0x0000)
struct FBuffValue final
{
public:
	EBuffEffectType                               _EffectType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBuffValueType                                _ValueType;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E25[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         _ScalarValue;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UCurveFloat>             _Curve;                                            // 0x0008(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBuffValueDisplayType                         _DisplayType;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E26[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBuffValue) == 0x000008, "Wrong alignment on FBuffValue");
static_assert(sizeof(FBuffValue) == 0x000038, "Wrong size on FBuffValue");
static_assert(offsetof(FBuffValue, _EffectType) == 0x000000, "Member 'FBuffValue::_EffectType' has a wrong offset!");
static_assert(offsetof(FBuffValue, _ValueType) == 0x000001, "Member 'FBuffValue::_ValueType' has a wrong offset!");
static_assert(offsetof(FBuffValue, _ScalarValue) == 0x000004, "Member 'FBuffValue::_ScalarValue' has a wrong offset!");
static_assert(offsetof(FBuffValue, _Curve) == 0x000008, "Member 'FBuffValue::_Curve' has a wrong offset!");
static_assert(offsetof(FBuffValue, _DisplayType) == 0x000030, "Member 'FBuffValue::_DisplayType' has a wrong offset!");

// ScriptStruct Stigma.BC_CompetitionStart
// 0x0010 (0x0010 - 0x0000)
struct FBC_CompetitionStart final
{
public:
	ECompetitionType                              CompetitionType;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E27[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              EndAt;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_CompetitionStart) == 0x000008, "Wrong alignment on FBC_CompetitionStart");
static_assert(sizeof(FBC_CompetitionStart) == 0x000010, "Wrong size on FBC_CompetitionStart");
static_assert(offsetof(FBC_CompetitionStart, CompetitionType) == 0x000000, "Member 'FBC_CompetitionStart::CompetitionType' has a wrong offset!");
static_assert(offsetof(FBC_CompetitionStart, EndAt) == 0x000008, "Member 'FBC_CompetitionStart::EndAt' has a wrong offset!");

// ScriptStruct Stigma.EventCollectionDefine
// 0x0010 (0x0018 - 0x0008)
struct FEventCollectionDefine final : public FTableRowBase
{
public:
	struct FItemIDRef_EventPage                   EventPageID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventCollectionDefine) == 0x000008, "Wrong alignment on FEventCollectionDefine");
static_assert(sizeof(FEventCollectionDefine) == 0x000018, "Wrong size on FEventCollectionDefine");
static_assert(offsetof(FEventCollectionDefine, EventPageID) == 0x000008, "Member 'FEventCollectionDefine::EventPageID' has a wrong offset!");

// ScriptStruct Stigma.BuffStats
// 0x0018 (0x0018 - 0x0000)
struct FBuffStats final
{
public:
	float                                         GunDamagePercentage;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeleeDamagePercentage;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowDamagePercentage;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeedPercentage;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OccupationTimePercentage;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActivatedOccupationHealing;                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E28[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBuffStats) == 0x000004, "Wrong alignment on FBuffStats");
static_assert(sizeof(FBuffStats) == 0x000018, "Wrong size on FBuffStats");
static_assert(offsetof(FBuffStats, GunDamagePercentage) == 0x000000, "Member 'FBuffStats::GunDamagePercentage' has a wrong offset!");
static_assert(offsetof(FBuffStats, MeleeDamagePercentage) == 0x000004, "Member 'FBuffStats::MeleeDamagePercentage' has a wrong offset!");
static_assert(offsetof(FBuffStats, ThrowDamagePercentage) == 0x000008, "Member 'FBuffStats::ThrowDamagePercentage' has a wrong offset!");
static_assert(offsetof(FBuffStats, MoveSpeedPercentage) == 0x00000C, "Member 'FBuffStats::MoveSpeedPercentage' has a wrong offset!");
static_assert(offsetof(FBuffStats, OccupationTimePercentage) == 0x000010, "Member 'FBuffStats::OccupationTimePercentage' has a wrong offset!");
static_assert(offsetof(FBuffStats, IsActivatedOccupationHealing) == 0x000014, "Member 'FBuffStats::IsActivatedOccupationHealing' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Buff
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Buff final : public FItemID
{
};
static_assert(alignof(FItemID_Buff) == 0x000008, "Wrong alignment on FItemID_Buff");
static_assert(sizeof(FItemID_Buff) == 0x000010, "Wrong size on FItemID_Buff");

// ScriptStruct Stigma.AssignedBuff
// 0x0034 (0x0040 - 0x000C)
struct FAssignedBuff final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_1E29[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Buff                           BuffID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InstanceId;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         DurationBonus;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                CausedBy;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2B[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAssignedBuff) == 0x000008, "Wrong alignment on FAssignedBuff");
static_assert(sizeof(FAssignedBuff) == 0x000040, "Wrong size on FAssignedBuff");
static_assert(offsetof(FAssignedBuff, BuffID) == 0x000010, "Member 'FAssignedBuff::BuffID' has a wrong offset!");
static_assert(offsetof(FAssignedBuff, InstanceId) == 0x000020, "Member 'FAssignedBuff::InstanceId' has a wrong offset!");
static_assert(offsetof(FAssignedBuff, DurationBonus) == 0x000024, "Member 'FAssignedBuff::DurationBonus' has a wrong offset!");
static_assert(offsetof(FAssignedBuff, CausedBy) == 0x000028, "Member 'FAssignedBuff::CausedBy' has a wrong offset!");
static_assert(offsetof(FAssignedBuff, Level) == 0x000038, "Member 'FAssignedBuff::Level' has a wrong offset!");

// ScriptStruct Stigma.Config_Emblem
// 0x0028 (0x0158 - 0x0130)
struct FConfig_Emblem final : public FItemEntry
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0130(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Emblem) == 0x000008, "Wrong alignment on FConfig_Emblem");
static_assert(sizeof(FConfig_Emblem) == 0x000158, "Wrong size on FConfig_Emblem");
static_assert(offsetof(FConfig_Emblem, Material) == 0x000130, "Member 'FConfig_Emblem::Material' has a wrong offset!");

// ScriptStruct Stigma.AssignedBuffList
// 0x0010 (0x0118 - 0x0108)
struct FAssignedBuffList final : public FFastArraySerializer
{
public:
	TArray<struct FAssignedBuff>                  Buffs;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssignedBuffList) == 0x000008, "Wrong alignment on FAssignedBuffList");
static_assert(sizeof(FAssignedBuffList) == 0x000118, "Wrong size on FAssignedBuffList");
static_assert(offsetof(FAssignedBuffList, Buffs) == 0x000108, "Member 'FAssignedBuffList::Buffs' has a wrong offset!");

// ScriptStruct Stigma.Config_ErrorHandle
// 0x0030 (0x0038 - 0x0008)
struct FConfig_ErrorHandle final : public FTableRowBase
{
public:
	EResultCode                                   ResultCode;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   ErrorMsg;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ShouldExit;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UPopupBase>                 CustomUIClass;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_ErrorHandle) == 0x000008, "Wrong alignment on FConfig_ErrorHandle");
static_assert(sizeof(FConfig_ErrorHandle) == 0x000038, "Wrong size on FConfig_ErrorHandle");
static_assert(offsetof(FConfig_ErrorHandle, ResultCode) == 0x000008, "Member 'FConfig_ErrorHandle::ResultCode' has a wrong offset!");
static_assert(offsetof(FConfig_ErrorHandle, ErrorMsg) == 0x000010, "Member 'FConfig_ErrorHandle::ErrorMsg' has a wrong offset!");
static_assert(offsetof(FConfig_ErrorHandle, ShouldExit) == 0x000028, "Member 'FConfig_ErrorHandle::ShouldExit' has a wrong offset!");
static_assert(offsetof(FConfig_ErrorHandle, CustomUIClass) == 0x000030, "Member 'FConfig_ErrorHandle::CustomUIClass' has a wrong offset!");

// ScriptStruct Stigma.EndPoint
// 0x0020 (0x0020 - 0x0000)
struct FEndPoint final
{
public:
	class FString                                 PublicURL;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrivateURL;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndPoint) == 0x000008, "Wrong alignment on FEndPoint");
static_assert(sizeof(FEndPoint) == 0x000020, "Wrong size on FEndPoint");
static_assert(offsetof(FEndPoint, PublicURL) == 0x000000, "Member 'FEndPoint::PublicURL' has a wrong offset!");
static_assert(offsetof(FEndPoint, PrivateURL) == 0x000010, "Member 'FEndPoint::PrivateURL' has a wrong offset!");

// ScriptStruct Stigma.BountyEarlyFin
// 0x0010 (0x0010 - 0x0000)
struct FBountyEarlyFin final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BarMoney;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoticeMoney;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLimitSec;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBountyEarlyFin) == 0x000004, "Wrong alignment on FBountyEarlyFin");
static_assert(sizeof(FBountyEarlyFin) == 0x000010, "Wrong size on FBountyEarlyFin");
static_assert(offsetof(FBountyEarlyFin, Enable) == 0x000000, "Member 'FBountyEarlyFin::Enable' has a wrong offset!");
static_assert(offsetof(FBountyEarlyFin, BarMoney) == 0x000004, "Member 'FBountyEarlyFin::BarMoney' has a wrong offset!");
static_assert(offsetof(FBountyEarlyFin, NoticeMoney) == 0x000008, "Member 'FBountyEarlyFin::NoticeMoney' has a wrong offset!");
static_assert(offsetof(FBountyEarlyFin, TimeLimitSec) == 0x00000C, "Member 'FBountyEarlyFin::TimeLimitSec' has a wrong offset!");

// ScriptStruct Stigma.ServiceDefine
// 0x0028 (0x0030 - 0x0008)
struct FServiceDefine final : public FTableRowBase
{
public:
	ERunEnv                                       RunEnv;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 APIURL;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MatchStartTime;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              MatchEndTime;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceDefine) == 0x000008, "Wrong alignment on FServiceDefine");
static_assert(sizeof(FServiceDefine) == 0x000030, "Wrong size on FServiceDefine");
static_assert(offsetof(FServiceDefine, RunEnv) == 0x000008, "Member 'FServiceDefine::RunEnv' has a wrong offset!");
static_assert(offsetof(FServiceDefine, APIURL) == 0x000010, "Member 'FServiceDefine::APIURL' has a wrong offset!");
static_assert(offsetof(FServiceDefine, MatchStartTime) == 0x000020, "Member 'FServiceDefine::MatchStartTime' has a wrong offset!");
static_assert(offsetof(FServiceDefine, MatchEndTime) == 0x000028, "Member 'FServiceDefine::MatchEndTime' has a wrong offset!");

// ScriptStruct Stigma.CachedConfig_Registry
// 0x0020 (0x0020 - 0x0000)
struct FCachedConfig_Registry final
{
public:
	class UObject*                                _outer;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URegistryDataTable*                     _Table;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E30[0x10];                                    // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCachedConfig_Registry) == 0x000008, "Wrong alignment on FCachedConfig_Registry");
static_assert(sizeof(FCachedConfig_Registry) == 0x000020, "Wrong size on FCachedConfig_Registry");
static_assert(offsetof(FCachedConfig_Registry, _outer) == 0x000000, "Member 'FCachedConfig_Registry::_outer' has a wrong offset!");
static_assert(offsetof(FCachedConfig_Registry, _Table) == 0x000008, "Member 'FCachedConfig_Registry::_Table' has a wrong offset!");

// ScriptStruct Stigma.ChallengeResult
// 0x0020 (0x0020 - 0x0000)
struct FChallengeResult final
{
public:
	EChallengeResultType                          ResultType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E31[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BlackCoinCount;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlackCoinScore;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldScore;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorScore;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeResult) == 0x000004, "Wrong alignment on FChallengeResult");
static_assert(sizeof(FChallengeResult) == 0x000020, "Wrong size on FChallengeResult");
static_assert(offsetof(FChallengeResult, ResultType) == 0x000000, "Member 'FChallengeResult::ResultType' has a wrong offset!");
static_assert(offsetof(FChallengeResult, BlackCoinCount) == 0x000004, "Member 'FChallengeResult::BlackCoinCount' has a wrong offset!");
static_assert(offsetof(FChallengeResult, Gold) == 0x000008, "Member 'FChallengeResult::Gold' has a wrong offset!");
static_assert(offsetof(FChallengeResult, Armor) == 0x00000C, "Member 'FChallengeResult::Armor' has a wrong offset!");
static_assert(offsetof(FChallengeResult, BlackCoinScore) == 0x000010, "Member 'FChallengeResult::BlackCoinScore' has a wrong offset!");
static_assert(offsetof(FChallengeResult, GoldScore) == 0x000014, "Member 'FChallengeResult::GoldScore' has a wrong offset!");
static_assert(offsetof(FChallengeResult, ArmorScore) == 0x000018, "Member 'FChallengeResult::ArmorScore' has a wrong offset!");
static_assert(offsetof(FChallengeResult, TotalScore) == 0x00001C, "Member 'FChallengeResult::TotalScore' has a wrong offset!");

// ScriptStruct Stigma.GTATeamData
// 0x0008 (0x0014 - 0x000C)
struct FGTATeamData final : public FFastArraySerializerItem
{
public:
	float                                         HackingProgressTime;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        HackingByTeam;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E32[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGTATeamData) == 0x000004, "Wrong alignment on FGTATeamData");
static_assert(sizeof(FGTATeamData) == 0x000014, "Wrong size on FGTATeamData");
static_assert(offsetof(FGTATeamData, HackingProgressTime) == 0x00000C, "Member 'FGTATeamData::HackingProgressTime' has a wrong offset!");
static_assert(offsetof(FGTATeamData, HackingByTeam) == 0x000010, "Member 'FGTATeamData::HackingByTeam' has a wrong offset!");

// ScriptStruct Stigma.GTATeamDataArray
// 0x0010 (0x0118 - 0x0108)
struct FGTATeamDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FGTATeamData>                   _TeamData;                                         // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGTATeamDataArray) == 0x000008, "Wrong alignment on FGTATeamDataArray");
static_assert(sizeof(FGTATeamDataArray) == 0x000118, "Wrong size on FGTATeamDataArray");
static_assert(offsetof(FGTATeamDataArray, _TeamData) == 0x000108, "Member 'FGTATeamDataArray::_TeamData' has a wrong offset!");

// ScriptStruct Stigma.StateValues
// 0x0014 (0x0014 - 0x0000)
struct FStateValues final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Total;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         base;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Boost;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateValues) == 0x000004, "Wrong alignment on FStateValues");
static_assert(sizeof(FStateValues) == 0x000014, "Wrong size on FStateValues");
static_assert(offsetof(FStateValues, Current) == 0x000000, "Member 'FStateValues::Current' has a wrong offset!");
static_assert(offsetof(FStateValues, Total) == 0x000004, "Member 'FStateValues::Total' has a wrong offset!");
static_assert(offsetof(FStateValues, base) == 0x000008, "Member 'FStateValues::base' has a wrong offset!");
static_assert(offsetof(FStateValues, Boost) == 0x00000C, "Member 'FStateValues::Boost' has a wrong offset!");
static_assert(offsetof(FStateValues, BoostRate) == 0x000010, "Member 'FStateValues::BoostRate' has a wrong offset!");

// ScriptStruct Stigma.OrganizationDefine
// 0x0060 (0x0068 - 0x0008)
struct FOrganizationDefine final : public FTableRowBase
{
public:
	EOrganization                                 Organization;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E33[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrganizationDefine) == 0x000008, "Wrong alignment on FOrganizationDefine");
static_assert(sizeof(FOrganizationDefine) == 0x000068, "Wrong size on FOrganizationDefine");
static_assert(offsetof(FOrganizationDefine, Organization) == 0x000008, "Member 'FOrganizationDefine::Organization' has a wrong offset!");
static_assert(offsetof(FOrganizationDefine, DisplayName) == 0x000010, "Member 'FOrganizationDefine::DisplayName' has a wrong offset!");
static_assert(offsetof(FOrganizationDefine, Desc) == 0x000028, "Member 'FOrganizationDefine::Desc' has a wrong offset!");
static_assert(offsetof(FOrganizationDefine, Icon) == 0x000040, "Member 'FOrganizationDefine::Icon' has a wrong offset!");

// ScriptStruct Stigma.CharaBuffEffect
// 0x0014 (0x0014 - 0x0000)
struct FCharaBuffEffect final
{
public:
	float                                         HeadshotDefenceRate;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHPRate;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPowerInc;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRecoveryRate;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaBuffEffect) == 0x000004, "Wrong alignment on FCharaBuffEffect");
static_assert(sizeof(FCharaBuffEffect) == 0x000014, "Wrong size on FCharaBuffEffect");
static_assert(offsetof(FCharaBuffEffect, HeadshotDefenceRate) == 0x000000, "Member 'FCharaBuffEffect::HeadshotDefenceRate' has a wrong offset!");
static_assert(offsetof(FCharaBuffEffect, MaxHPRate) == 0x000004, "Member 'FCharaBuffEffect::MaxHPRate' has a wrong offset!");
static_assert(offsetof(FCharaBuffEffect, MovementRate) == 0x000008, "Member 'FCharaBuffEffect::MovementRate' has a wrong offset!");
static_assert(offsetof(FCharaBuffEffect, ControlPowerInc) == 0x00000C, "Member 'FCharaBuffEffect::ControlPowerInc' has a wrong offset!");
static_assert(offsetof(FCharaBuffEffect, AimRecoveryRate) == 0x000010, "Member 'FCharaBuffEffect::AimRecoveryRate' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Slide
// 0x0000 (0x01E0 - 0x01E0)
struct FGunEntry_Slide final : public FGunEntry_Base
{
};
static_assert(alignof(FGunEntry_Slide) == 0x000008, "Wrong alignment on FGunEntry_Slide");
static_assert(sizeof(FGunEntry_Slide) == 0x0001E0, "Wrong size on FGunEntry_Slide");

// ScriptStruct Stigma.CharaGraphValue
// 0x0014 (0x0014 - 0x0000)
struct FCharaGraphValue final
{
public:
	float                                         HeadshotDefence;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHP;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Movement;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPower;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimRecovery;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaGraphValue) == 0x000004, "Wrong alignment on FCharaGraphValue");
static_assert(sizeof(FCharaGraphValue) == 0x000014, "Wrong size on FCharaGraphValue");
static_assert(offsetof(FCharaGraphValue, HeadshotDefence) == 0x000000, "Member 'FCharaGraphValue::HeadshotDefence' has a wrong offset!");
static_assert(offsetof(FCharaGraphValue, MaxHP) == 0x000004, "Member 'FCharaGraphValue::MaxHP' has a wrong offset!");
static_assert(offsetof(FCharaGraphValue, Movement) == 0x000008, "Member 'FCharaGraphValue::Movement' has a wrong offset!");
static_assert(offsetof(FCharaGraphValue, ControlPower) == 0x00000C, "Member 'FCharaGraphValue::ControlPower' has a wrong offset!");
static_assert(offsetof(FCharaGraphValue, AimRecovery) == 0x000010, "Member 'FCharaGraphValue::AimRecovery' has a wrong offset!");

// ScriptStruct Stigma.CharacterSet
// 0x0010 (0x0118 - 0x0108)
struct FCharacterSet final : public FFastArraySerializer
{
public:
	TArray<struct FCharacterSetting>              Characters;                                        // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSet) == 0x000008, "Wrong alignment on FCharacterSet");
static_assert(sizeof(FCharacterSet) == 0x000118, "Wrong size on FCharacterSet");
static_assert(offsetof(FCharacterSet, Characters) == 0x000108, "Member 'FCharacterSet::Characters' has a wrong offset!");

// ScriptStruct Stigma.LocalCharacterSet
// 0x0128 (0x0128 - 0x0000)
struct FLocalCharacterSet final
{
public:
	struct FCharacterInfo                         Char;                                              // 0x0000(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGunSpec                               Gun;                                               // 0x0058(0x00D0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalCharacterSet) == 0x000008, "Wrong alignment on FLocalCharacterSet");
static_assert(sizeof(FLocalCharacterSet) == 0x000128, "Wrong size on FLocalCharacterSet");
static_assert(offsetof(FLocalCharacterSet, Char) == 0x000000, "Member 'FLocalCharacterSet::Char' has a wrong offset!");
static_assert(offsetof(FLocalCharacterSet, Gun) == 0x000058, "Member 'FLocalCharacterSet::Gun' has a wrong offset!");

// ScriptStruct Stigma.Shape
// 0x0048 (0x0048 - 0x0000)
struct FShape final
{
public:
	class FName                                   _Name;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EShapeType                                    _ShapeType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E34[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                _offset;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                _Extent;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _radius;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _HalfHeight;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FShape) == 0x000008, "Wrong alignment on FShape");
static_assert(sizeof(FShape) == 0x000048, "Wrong size on FShape");
static_assert(offsetof(FShape, _Name) == 0x000000, "Member 'FShape::_Name' has a wrong offset!");
static_assert(offsetof(FShape, _ShapeType) == 0x000008, "Member 'FShape::_ShapeType' has a wrong offset!");
static_assert(offsetof(FShape, _offset) == 0x000010, "Member 'FShape::_offset' has a wrong offset!");
static_assert(offsetof(FShape, _Extent) == 0x000028, "Member 'FShape::_Extent' has a wrong offset!");
static_assert(offsetof(FShape, _radius) == 0x000040, "Member 'FShape::_radius' has a wrong offset!");
static_assert(offsetof(FShape, _HalfHeight) == 0x000044, "Member 'FShape::_HalfHeight' has a wrong offset!");

// ScriptStruct Stigma.Config_Gun_Fire_FX
// 0x00A0 (0x00A0 - 0x0000)
struct FConfig_Gun_Fire_FX final
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          FireFX;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          FireFX_NS;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound_Fire;                                        // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound_Fire_1PV;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Gun_Fire_FX) == 0x000008, "Wrong alignment on FConfig_Gun_Fire_FX");
static_assert(sizeof(FConfig_Gun_Fire_FX) == 0x0000A0, "Wrong size on FConfig_Gun_Fire_FX");
static_assert(offsetof(FConfig_Gun_Fire_FX, FireFX) == 0x000000, "Member 'FConfig_Gun_Fire_FX::FireFX' has a wrong offset!");
static_assert(offsetof(FConfig_Gun_Fire_FX, FireFX_NS) == 0x000028, "Member 'FConfig_Gun_Fire_FX::FireFX_NS' has a wrong offset!");
static_assert(offsetof(FConfig_Gun_Fire_FX, Sound_Fire) == 0x000050, "Member 'FConfig_Gun_Fire_FX::Sound_Fire' has a wrong offset!");
static_assert(offsetof(FConfig_Gun_Fire_FX, Sound_Fire_1PV) == 0x000078, "Member 'FConfig_Gun_Fire_FX::Sound_Fire_1PV' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Front
// 0x00A0 (0x0280 - 0x01E0)
struct FGunEntry_Front final : public FGunEntry_Base
{
public:
	struct FConfig_Gun_Fire_FX                    FireFX;                                            // 0x01E0(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunEntry_Front) == 0x000008, "Wrong alignment on FGunEntry_Front");
static_assert(sizeof(FGunEntry_Front) == 0x000280, "Wrong size on FGunEntry_Front");
static_assert(offsetof(FGunEntry_Front, FireFX) == 0x0001E0, "Member 'FGunEntry_Front::FireFX' has a wrong offset!");

// ScriptStruct Stigma.CLB_GoodsEntry
// 0x0068 (0x0070 - 0x0008)
struct FCLB_GoodsEntry final : public FTableRowBase
{
public:
	TSubclassOf<class UCLB_RewardBase>            RewardClassType;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UI_Image;                                          // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Title;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0050(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageWidth;                                        // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageHeight;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCLB_GoodsEntry) == 0x000008, "Wrong alignment on FCLB_GoodsEntry");
static_assert(sizeof(FCLB_GoodsEntry) == 0x000070, "Wrong size on FCLB_GoodsEntry");
static_assert(offsetof(FCLB_GoodsEntry, RewardClassType) == 0x000008, "Member 'FCLB_GoodsEntry::RewardClassType' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, UI_Image) == 0x000010, "Member 'FCLB_GoodsEntry::UI_Image' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, Price) == 0x000038, "Member 'FCLB_GoodsEntry::Price' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, Count) == 0x00003C, "Member 'FCLB_GoodsEntry::Count' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, Title) == 0x000040, "Member 'FCLB_GoodsEntry::Title' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, Category) == 0x000048, "Member 'FCLB_GoodsEntry::Category' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, Key) == 0x000050, "Member 'FCLB_GoodsEntry::Key' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, ImageWidth) == 0x000068, "Member 'FCLB_GoodsEntry::ImageWidth' has a wrong offset!");
static_assert(offsetof(FCLB_GoodsEntry, ImageHeight) == 0x00006C, "Member 'FCLB_GoodsEntry::ImageHeight' has a wrong offset!");

// ScriptStruct Stigma.ReloadAnimation
// 0x0118 (0x0118 - 0x0000)
struct FReloadAnimation final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       LoadBulletAnimation;                               // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       LoadMagazineAnimation;                             // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       LoadBulletAnimation_Sub;                           // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       LoadMagazineAnimation_Sub;                         // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       Gun_LoadBulletAnim;                                // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       Gun_LoadMagazineAnim;                              // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       DotPoseAnim;                                       // 0x00F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReloadAnimation) == 0x000008, "Wrong alignment on FReloadAnimation");
static_assert(sizeof(FReloadAnimation) == 0x000118, "Wrong size on FReloadAnimation");
static_assert(offsetof(FReloadAnimation, LoadBulletAnimation) == 0x000000, "Member 'FReloadAnimation::LoadBulletAnimation' has a wrong offset!");
static_assert(offsetof(FReloadAnimation, LoadMagazineAnimation) == 0x000028, "Member 'FReloadAnimation::LoadMagazineAnimation' has a wrong offset!");
static_assert(offsetof(FReloadAnimation, LoadBulletAnimation_Sub) == 0x000050, "Member 'FReloadAnimation::LoadBulletAnimation_Sub' has a wrong offset!");
static_assert(offsetof(FReloadAnimation, LoadMagazineAnimation_Sub) == 0x000078, "Member 'FReloadAnimation::LoadMagazineAnimation_Sub' has a wrong offset!");
static_assert(offsetof(FReloadAnimation, Gun_LoadBulletAnim) == 0x0000A0, "Member 'FReloadAnimation::Gun_LoadBulletAnim' has a wrong offset!");
static_assert(offsetof(FReloadAnimation, Gun_LoadMagazineAnim) == 0x0000C8, "Member 'FReloadAnimation::Gun_LoadMagazineAnim' has a wrong offset!");
static_assert(offsetof(FReloadAnimation, DotPoseAnim) == 0x0000F0, "Member 'FReloadAnimation::DotPoseAnim' has a wrong offset!");

// ScriptStruct Stigma.ACK_UserConfigUpdate
// 0x0030 (0x0038 - 0x0008)
struct FACK_UserConfigUpdate final : public FApiResult
{
public:
	struct FUserID                                IDN;                                               // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSocialOption                          Config;                                            // 0x0010(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_UserConfigUpdate) == 0x000008, "Wrong alignment on FACK_UserConfigUpdate");
static_assert(sizeof(FACK_UserConfigUpdate) == 0x000038, "Wrong size on FACK_UserConfigUpdate");
static_assert(offsetof(FACK_UserConfigUpdate, IDN) == 0x000008, "Member 'FACK_UserConfigUpdate::IDN' has a wrong offset!");
static_assert(offsetof(FACK_UserConfigUpdate, Config) == 0x000010, "Member 'FACK_UserConfigUpdate::Config' has a wrong offset!");

// ScriptStruct Stigma.MQAckMsg
// 0x0010 (0x0048 - 0x0038)
struct FMQAckMsg : public FMQMsg
{
public:
	int32                                         RespCode;                                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E35[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              RespAt;                                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQAckMsg) == 0x000008, "Wrong alignment on FMQAckMsg");
static_assert(sizeof(FMQAckMsg) == 0x000048, "Wrong size on FMQAckMsg");
static_assert(offsetof(FMQAckMsg, RespCode) == 0x000038, "Member 'FMQAckMsg::RespCode' has a wrong offset!");
static_assert(offsetof(FMQAckMsg, RespAt) == 0x000040, "Member 'FMQAckMsg::RespAt' has a wrong offset!");

// ScriptStruct Stigma.MQACK_UpdateBooster
// 0x0010 (0x0058 - 0x0048)
struct FMQACK_UpdateBooster final : public FMQAckMsg
{
public:
	TArray<struct FNetBoosterSlot>                Booster;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQACK_UpdateBooster) == 0x000008, "Wrong alignment on FMQACK_UpdateBooster");
static_assert(sizeof(FMQACK_UpdateBooster) == 0x000058, "Wrong size on FMQACK_UpdateBooster");
static_assert(offsetof(FMQACK_UpdateBooster, Booster) == 0x000048, "Member 'FMQACK_UpdateBooster::Booster' has a wrong offset!");

// ScriptStruct Stigma.ACK_UserConfig
// 0x0040 (0x0048 - 0x0008)
struct FACK_UserConfig final : public FApiResult
{
public:
	struct FUserID                                IDN;                                               // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserConfig                            Config;                                            // 0x0010(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_UserConfig) == 0x000008, "Wrong alignment on FACK_UserConfig");
static_assert(sizeof(FACK_UserConfig) == 0x000048, "Wrong size on FACK_UserConfig");
static_assert(offsetof(FACK_UserConfig, IDN) == 0x000008, "Member 'FACK_UserConfig::IDN' has a wrong offset!");
static_assert(offsetof(FACK_UserConfig, Config) == 0x000010, "Member 'FACK_UserConfig::Config' has a wrong offset!");

// ScriptStruct Stigma.MQACK_DEDI_Describe
// 0x0038 (0x0080 - 0x0048)
struct FMQACK_DEDI_Describe final : public FMQAckMsg
{
public:
	struct FDediID                                DediID;                                            // 0x0048(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 DediSteamIDS;                                      // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppVer;                                            // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EServerStatus                                 DediStatus;                                        // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E36[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMQACK_DEDI_Describe) == 0x000008, "Wrong alignment on FMQACK_DEDI_Describe");
static_assert(sizeof(FMQACK_DEDI_Describe) == 0x000080, "Wrong size on FMQACK_DEDI_Describe");
static_assert(offsetof(FMQACK_DEDI_Describe, DediID) == 0x000048, "Member 'FMQACK_DEDI_Describe::DediID' has a wrong offset!");
static_assert(offsetof(FMQACK_DEDI_Describe, DediSteamIDS) == 0x000058, "Member 'FMQACK_DEDI_Describe::DediSteamIDS' has a wrong offset!");
static_assert(offsetof(FMQACK_DEDI_Describe, AppVer) == 0x000068, "Member 'FMQACK_DEDI_Describe::AppVer' has a wrong offset!");
static_assert(offsetof(FMQACK_DEDI_Describe, DediStatus) == 0x000078, "Member 'FMQACK_DEDI_Describe::DediStatus' has a wrong offset!");

// ScriptStruct Stigma.PerceptionInfo_AI
// 0x0020 (0x0020 - 0x0000)
struct FPerceptionInfo_AI final
{
public:
	struct FPerceptionLevelInfo                   Careless;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerceptionLevelInfo                   Doubt;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerceptionLevelInfo                   Wariness;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerceptionLevelInfo                   Discovery;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerceptionInfo_AI) == 0x000004, "Wrong alignment on FPerceptionInfo_AI");
static_assert(sizeof(FPerceptionInfo_AI) == 0x000020, "Wrong size on FPerceptionInfo_AI");
static_assert(offsetof(FPerceptionInfo_AI, Careless) == 0x000000, "Member 'FPerceptionInfo_AI::Careless' has a wrong offset!");
static_assert(offsetof(FPerceptionInfo_AI, Doubt) == 0x000008, "Member 'FPerceptionInfo_AI::Doubt' has a wrong offset!");
static_assert(offsetof(FPerceptionInfo_AI, Wariness) == 0x000010, "Member 'FPerceptionInfo_AI::Wariness' has a wrong offset!");
static_assert(offsetof(FPerceptionInfo_AI, Discovery) == 0x000018, "Member 'FPerceptionInfo_AI::Discovery' has a wrong offset!");

// ScriptStruct Stigma.Config_ReservedNickname
// 0x0018 (0x0020 - 0x0008)
struct FConfig_ReservedNickname final : public FTableRowBase
{
public:
	class FString                                 Nickname;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForBOT;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E37[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_ReservedNickname) == 0x000008, "Wrong alignment on FConfig_ReservedNickname");
static_assert(sizeof(FConfig_ReservedNickname) == 0x000020, "Wrong size on FConfig_ReservedNickname");
static_assert(offsetof(FConfig_ReservedNickname, Nickname) == 0x000008, "Member 'FConfig_ReservedNickname::Nickname' has a wrong offset!");
static_assert(offsetof(FConfig_ReservedNickname, ForBOT) == 0x000018, "Member 'FConfig_ReservedNickname::ForBOT' has a wrong offset!");

// ScriptStruct Stigma.Config_BasicPackage_Bot
// 0x0058 (0x0060 - 0x0008)
struct FConfig_BasicPackage_Bot final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E38[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSet<struct FItemID>                          Items;                                             // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_BasicPackage_Bot) == 0x000008, "Wrong alignment on FConfig_BasicPackage_Bot");
static_assert(sizeof(FConfig_BasicPackage_Bot) == 0x000060, "Wrong size on FConfig_BasicPackage_Bot");
static_assert(offsetof(FConfig_BasicPackage_Bot, Level) == 0x000008, "Member 'FConfig_BasicPackage_Bot::Level' has a wrong offset!");
static_assert(offsetof(FConfig_BasicPackage_Bot, Items) == 0x000010, "Member 'FConfig_BasicPackage_Bot::Items' has a wrong offset!");

// ScriptStruct Stigma.PoissonDiskSampleEntry
// 0x0018 (0x0020 - 0x0008)
struct FPoissonDiskSampleEntry final : public FTableRowBase
{
public:
	struct FVector                                Position;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoissonDiskSampleEntry) == 0x000008, "Wrong alignment on FPoissonDiskSampleEntry");
static_assert(sizeof(FPoissonDiskSampleEntry) == 0x000020, "Wrong size on FPoissonDiskSampleEntry");
static_assert(offsetof(FPoissonDiskSampleEntry, Position) == 0x000008, "Member 'FPoissonDiskSampleEntry::Position' has a wrong offset!");

// ScriptStruct Stigma.Config_ChallengeRound
// 0x0030 (0x0038 - 0x0008)
struct FConfig_ChallengeRound final : public FTableRowBase
{
public:
	int32                                         Round;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E39[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class FName>                           MapNames;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LimitTimeSec;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemIDRef_Mission>             Missions;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_ChallengeRound) == 0x000008, "Wrong alignment on FConfig_ChallengeRound");
static_assert(sizeof(FConfig_ChallengeRound) == 0x000038, "Wrong size on FConfig_ChallengeRound");
static_assert(offsetof(FConfig_ChallengeRound, Round) == 0x000008, "Member 'FConfig_ChallengeRound::Round' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeRound, MapNames) == 0x000010, "Member 'FConfig_ChallengeRound::MapNames' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeRound, LimitTimeSec) == 0x000020, "Member 'FConfig_ChallengeRound::LimitTimeSec' has a wrong offset!");
static_assert(offsetof(FConfig_ChallengeRound, Missions) == 0x000028, "Member 'FConfig_ChallengeRound::Missions' has a wrong offset!");

// ScriptStruct Stigma.ACK_AnnouncerUpdate
// 0x0001 (0x0001 - 0x0000)
struct FACK_AnnouncerUpdate final
{
public:
	uint8                                         Pad_1E3B[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_AnnouncerUpdate) == 0x000001, "Wrong alignment on FACK_AnnouncerUpdate");
static_assert(sizeof(FACK_AnnouncerUpdate) == 0x000001, "Wrong size on FACK_AnnouncerUpdate");

// ScriptStruct Stigma.Config_Challenge_AIChara
// 0x0058 (0x0060 - 0x0008)
struct FConfig_Challenge_AIChara final : public FTableRowBase
{
public:
	int32                                         Key;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Chara                       CharacterID;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Body                   BodyID;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Skin_Head                   HeadID;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunType                                      GunType;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3D[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ELO;                                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coward;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Shooting_Like;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HP_Scaler;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor_Scaler;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionStockScaler;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletCountScaler;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Challenge_AIChara) == 0x000008, "Wrong alignment on FConfig_Challenge_AIChara");
static_assert(sizeof(FConfig_Challenge_AIChara) == 0x000060, "Wrong size on FConfig_Challenge_AIChara");
static_assert(offsetof(FConfig_Challenge_AIChara, Key) == 0x000008, "Member 'FConfig_Challenge_AIChara::Key' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, CharacterID) == 0x000010, "Member 'FConfig_Challenge_AIChara::CharacterID' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, BodyID) == 0x000020, "Member 'FConfig_Challenge_AIChara::BodyID' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, HeadID) == 0x000030, "Member 'FConfig_Challenge_AIChara::HeadID' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, GunType) == 0x000040, "Member 'FConfig_Challenge_AIChara::GunType' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, ELO) == 0x000044, "Member 'FConfig_Challenge_AIChara::ELO' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, Coward) == 0x000048, "Member 'FConfig_Challenge_AIChara::Coward' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, Shooting_Like) == 0x00004C, "Member 'FConfig_Challenge_AIChara::Shooting_Like' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, HP_Scaler) == 0x000050, "Member 'FConfig_Challenge_AIChara::HP_Scaler' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, Armor_Scaler) == 0x000054, "Member 'FConfig_Challenge_AIChara::Armor_Scaler' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, ActionStockScaler) == 0x000058, "Member 'FConfig_Challenge_AIChara::ActionStockScaler' has a wrong offset!");
static_assert(offsetof(FConfig_Challenge_AIChara, BulletCountScaler) == 0x00005C, "Member 'FConfig_Challenge_AIChara::BulletCountScaler' has a wrong offset!");

// ScriptStruct Stigma.Config_CollaborationMode
// 0x0008 (0x0010 - 0x0008)
struct FConfig_CollaborationMode final : public FTableRowBase
{
public:
	int32                                         StartLifeCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3E[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_CollaborationMode) == 0x000008, "Wrong alignment on FConfig_CollaborationMode");
static_assert(sizeof(FConfig_CollaborationMode) == 0x000010, "Wrong size on FConfig_CollaborationMode");
static_assert(offsetof(FConfig_CollaborationMode, StartLifeCount) == 0x000008, "Member 'FConfig_CollaborationMode::StartLifeCount' has a wrong offset!");

// ScriptStruct Stigma.REQ_ProfileStatisticRead
// 0x0008 (0x0008 - 0x0000)
struct FREQ_ProfileStatisticRead final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ProfileStatisticRead) == 0x000008, "Wrong alignment on FREQ_ProfileStatisticRead");
static_assert(sizeof(FREQ_ProfileStatisticRead) == 0x000008, "Wrong size on FREQ_ProfileStatisticRead");
static_assert(offsetof(FREQ_ProfileStatisticRead, UserIDN) == 0x000000, "Member 'FREQ_ProfileStatisticRead::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.Config_CommonStyle
// 0x0818 (0x0820 - 0x0008)
struct FConfig_CommonStyle final : public FTableRowBase
{
public:
	uint8                                         Pad_1E3F[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x0010(0x0770)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FConfig_MissionUI                      MissionUI;                                         // 0x0780(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_CommonStyle) == 0x000010, "Wrong alignment on FConfig_CommonStyle");
static_assert(sizeof(FConfig_CommonStyle) == 0x000820, "Wrong size on FConfig_CommonStyle");
static_assert(offsetof(FConfig_CommonStyle, ScrollBarStyle) == 0x000010, "Member 'FConfig_CommonStyle::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(FConfig_CommonStyle, MissionUI) == 0x000780, "Member 'FConfig_CommonStyle::MissionUI' has a wrong offset!");

// ScriptStruct Stigma.EmoticonData
// 0x0018 (0x0018 - 0x0000)
struct FEmoticonData final
{
public:
	struct FItemID_Emoticon                       EmoticonItemID;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Sender;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoticonData) == 0x000008, "Wrong alignment on FEmoticonData");
static_assert(sizeof(FEmoticonData) == 0x000018, "Wrong size on FEmoticonData");
static_assert(offsetof(FEmoticonData, EmoticonItemID) == 0x000000, "Member 'FEmoticonData::EmoticonItemID' has a wrong offset!");
static_assert(offsetof(FEmoticonData, Sender) == 0x000010, "Member 'FEmoticonData::Sender' has a wrong offset!");

// ScriptStruct Stigma.BC_GoodsActive
// 0x0018 (0x0018 - 0x0000)
struct FBC_GoodsActive final
{
public:
	TArray<struct FItemID>                        ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          OnSale;                                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E40[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_GoodsActive) == 0x000008, "Wrong alignment on FBC_GoodsActive");
static_assert(sizeof(FBC_GoodsActive) == 0x000018, "Wrong size on FBC_GoodsActive");
static_assert(offsetof(FBC_GoodsActive, ItemIDN) == 0x000000, "Member 'FBC_GoodsActive::ItemIDN' has a wrong offset!");
static_assert(offsetof(FBC_GoodsActive, OnSale) == 0x000010, "Member 'FBC_GoodsActive::OnSale' has a wrong offset!");

// ScriptStruct Stigma.Config_Emoticon
// 0x0008 (0x0138 - 0x0130)
struct FConfig_Emoticon final : public FItemEntry
{
public:
	TSubclassOf<class UHUD_EmoticonWidgetBase>    HUDWidgetClass;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Emoticon) == 0x000008, "Wrong alignment on FConfig_Emoticon");
static_assert(sizeof(FConfig_Emoticon) == 0x000138, "Wrong size on FConfig_Emoticon");
static_assert(offsetof(FConfig_Emoticon, HUDWidgetClass) == 0x000130, "Member 'FConfig_Emoticon::HUDWidgetClass' has a wrong offset!");

// ScriptStruct Stigma.REQ_LoginNotice
// 0x0001 (0x0001 - 0x0000)
struct FREQ_LoginNotice final
{
public:
	uint8                                         Pad_1E41[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_LoginNotice) == 0x000001, "Wrong alignment on FREQ_LoginNotice");
static_assert(sizeof(FREQ_LoginNotice) == 0x000001, "Wrong size on FREQ_LoginNotice");

// ScriptStruct Stigma.Config_FuncTarget
// 0x0020 (0x0028 - 0x0008)
struct FConfig_FuncTarget final : public FTableRowBase
{
public:
	EFuncTarget                                   FuncTarget;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E42[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Desc;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_FuncTarget) == 0x000008, "Wrong alignment on FConfig_FuncTarget");
static_assert(sizeof(FConfig_FuncTarget) == 0x000028, "Wrong size on FConfig_FuncTarget");
static_assert(offsetof(FConfig_FuncTarget, FuncTarget) == 0x000008, "Member 'FConfig_FuncTarget::FuncTarget' has a wrong offset!");
static_assert(offsetof(FConfig_FuncTarget, Desc) == 0x000010, "Member 'FConfig_FuncTarget::Desc' has a wrong offset!");

// ScriptStruct Stigma.ItemIDPlain
// 0x0018 (0x0018 - 0x0000)
struct FItemIDPlain final
{
public:
	struct FItemID                                ItemID;                                            // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E43[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FItemIDPlain) == 0x000008, "Wrong alignment on FItemIDPlain");
static_assert(sizeof(FItemIDPlain) == 0x000018, "Wrong size on FItemIDPlain");
static_assert(offsetof(FItemIDPlain, ItemID) == 0x000000, "Member 'FItemIDPlain::ItemID' has a wrong offset!");
static_assert(offsetof(FItemIDPlain, Count) == 0x000010, "Member 'FItemIDPlain::Count' has a wrong offset!");

// ScriptStruct Stigma.REQ_BuyGoods
// 0x0018 (0x0018 - 0x0000)
struct FREQ_BuyGoods final
{
public:
	struct FItemIDPlain                           Item;                                              // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_BuyGoods) == 0x000008, "Wrong alignment on FREQ_BuyGoods");
static_assert(sizeof(FREQ_BuyGoods) == 0x000018, "Wrong size on FREQ_BuyGoods");
static_assert(offsetof(FREQ_BuyGoods, Item) == 0x000000, "Member 'FREQ_BuyGoods::Item' has a wrong offset!");

// ScriptStruct Stigma.Config_Manner
// 0x0050 (0x0058 - 0x0008)
struct FConfig_Manner final : public FTableRowBase
{
public:
	int32                                         Grade;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MannerPointMin;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Const_NormalPlay;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Const_BattleEscape;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Const_WaitingEscape;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E44[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemIDRef_Function>            GradeFunctions;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Function>            DownGradeFunctions;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   DownGradeAlert;                                    // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Manner) == 0x000008, "Wrong alignment on FConfig_Manner");
static_assert(sizeof(FConfig_Manner) == 0x000058, "Wrong size on FConfig_Manner");
static_assert(offsetof(FConfig_Manner, Grade) == 0x000008, "Member 'FConfig_Manner::Grade' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, MannerPointMin) == 0x00000C, "Member 'FConfig_Manner::MannerPointMin' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, Const_NormalPlay) == 0x000010, "Member 'FConfig_Manner::Const_NormalPlay' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, Const_BattleEscape) == 0x000014, "Member 'FConfig_Manner::Const_BattleEscape' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, Const_WaitingEscape) == 0x000018, "Member 'FConfig_Manner::Const_WaitingEscape' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, GradeFunctions) == 0x000020, "Member 'FConfig_Manner::GradeFunctions' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, DownGradeFunctions) == 0x000030, "Member 'FConfig_Manner::DownGradeFunctions' has a wrong offset!");
static_assert(offsetof(FConfig_Manner, DownGradeAlert) == 0x000040, "Member 'FConfig_Manner::DownGradeAlert' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadGunSpec
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ReadGunSpec final
{
public:
	struct FGunPreset                             GunPreset;                                         // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ReadGunSpec) == 0x000008, "Wrong alignment on FREQ_ReadGunSpec");
static_assert(sizeof(FREQ_ReadGunSpec) == 0x000010, "Wrong size on FREQ_ReadGunSpec");
static_assert(offsetof(FREQ_ReadGunSpec, GunPreset) == 0x000000, "Member 'FREQ_ReadGunSpec::GunPreset' has a wrong offset!");

// ScriptStruct Stigma.Config_NicknameFX
// 0x0340 (0x0470 - 0x0130)
struct FConfig_NicknameFX final : public FItemEntry
{
public:
	struct FTextBlockStyle                        TextStyle;                                         // 0x0130(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_NicknameFX) == 0x000010, "Wrong alignment on FConfig_NicknameFX");
static_assert(sizeof(FConfig_NicknameFX) == 0x000470, "Wrong size on FConfig_NicknameFX");
static_assert(offsetof(FConfig_NicknameFX, TextStyle) == 0x000130, "Member 'FConfig_NicknameFX::TextStyle' has a wrong offset!");

// ScriptStruct Stigma.ACK_UpdatePassiveSkillLevel
// 0x0004 (0x0004 - 0x0000)
struct FACK_UpdatePassiveSkillLevel final
{
public:
	int32                                         LeftSkillPoints;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_UpdatePassiveSkillLevel) == 0x000004, "Wrong alignment on FACK_UpdatePassiveSkillLevel");
static_assert(sizeof(FACK_UpdatePassiveSkillLevel) == 0x000004, "Wrong size on FACK_UpdatePassiveSkillLevel");
static_assert(offsetof(FACK_UpdatePassiveSkillLevel, LeftSkillPoints) == 0x000000, "Member 'FACK_UpdatePassiveSkillLevel::LeftSkillPoints' has a wrong offset!");

// ScriptStruct Stigma.RandomItemEntry
// 0x0028 (0x0030 - 0x0008)
struct FRandomItemEntry final : public FTableRowBase
{
public:
	bool                                          IsRandom;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E45[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRewardItem                            Item;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E46[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRandomItemEntry) == 0x000008, "Wrong alignment on FRandomItemEntry");
static_assert(sizeof(FRandomItemEntry) == 0x000030, "Wrong size on FRandomItemEntry");
static_assert(offsetof(FRandomItemEntry, IsRandom) == 0x000008, "Member 'FRandomItemEntry::IsRandom' has a wrong offset!");
static_assert(offsetof(FRandomItemEntry, Item) == 0x000010, "Member 'FRandomItemEntry::Item' has a wrong offset!");
static_assert(offsetof(FRandomItemEntry, Probability) == 0x000028, "Member 'FRandomItemEntry::Probability' has a wrong offset!");

// ScriptStruct Stigma.Config_Stack
// 0x0018 (0x0148 - 0x0130)
struct FConfig_Stack final : public FItemEntry
{
public:
	EStackables                                   Type;                                              // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E47[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef                             RelatedItem;                                       // 0x0138(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Stack) == 0x000008, "Wrong alignment on FConfig_Stack");
static_assert(sizeof(FConfig_Stack) == 0x000148, "Wrong size on FConfig_Stack");
static_assert(offsetof(FConfig_Stack, Type) == 0x000130, "Member 'FConfig_Stack::Type' has a wrong offset!");
static_assert(offsetof(FConfig_Stack, RelatedItem) == 0x000138, "Member 'FConfig_Stack::RelatedItem' has a wrong offset!");

// ScriptStruct Stigma.CommonTabInitializeInfo
// 0x0520 (0x0520 - 0x0000)
struct FCommonTabInitializeInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E48[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateFontInfo                         NormalFont;                                        // 0x0028(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         SelectedFont;                                      // 0x0080(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x00E8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FButtonStyle                           ButtonStyle;                                       // 0x0110(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              EntrySize;                                         // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  TextJustify;                                       // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E49[0xF];                                     // 0x0511(0x000F)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCommonTabInitializeInfo) == 0x000010, "Wrong alignment on FCommonTabInitializeInfo");
static_assert(sizeof(FCommonTabInitializeInfo) == 0x000520, "Wrong size on FCommonTabInitializeInfo");
static_assert(offsetof(FCommonTabInitializeInfo, Title) == 0x000000, "Member 'FCommonTabInitializeInfo::Title' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, ID) == 0x000018, "Member 'FCommonTabInitializeInfo::ID' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, Idx) == 0x000020, "Member 'FCommonTabInitializeInfo::Idx' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, NormalFont) == 0x000028, "Member 'FCommonTabInitializeInfo::NormalFont' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, SelectedFont) == 0x000080, "Member 'FCommonTabInitializeInfo::SelectedFont' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, Margin) == 0x0000D8, "Member 'FCommonTabInitializeInfo::Margin' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, IconTexture) == 0x0000E8, "Member 'FCommonTabInitializeInfo::IconTexture' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, ButtonStyle) == 0x000110, "Member 'FCommonTabInitializeInfo::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, EntrySize) == 0x000500, "Member 'FCommonTabInitializeInfo::EntrySize' has a wrong offset!");
static_assert(offsetof(FCommonTabInitializeInfo, TextJustify) == 0x000510, "Member 'FCommonTabInitializeInfo::TextJustify' has a wrong offset!");

// ScriptStruct Stigma.MQACK_DEDI_UpdateBattle
// 0x0000 (0x0048 - 0x0048)
struct FMQACK_DEDI_UpdateBattle final : public FMQAckMsg
{
};
static_assert(alignof(FMQACK_DEDI_UpdateBattle) == 0x000008, "Wrong alignment on FMQACK_DEDI_UpdateBattle");
static_assert(sizeof(FMQACK_DEDI_UpdateBattle) == 0x000048, "Wrong size on FMQACK_DEDI_UpdateBattle");

// ScriptStruct Stigma.ItemTagConfig
// 0x00F0 (0x00F0 - 0x0000)
struct FItemTagConfig final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4A[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            Style;                                             // 0x0020(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTagConfig) == 0x000010, "Wrong alignment on FItemTagConfig");
static_assert(sizeof(FItemTagConfig) == 0x0000F0, "Wrong size on FItemTagConfig");
static_assert(offsetof(FItemTagConfig, DisplayName) == 0x000000, "Member 'FItemTagConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FItemTagConfig, Style) == 0x000020, "Member 'FItemTagConfig::Style' has a wrong offset!");

// ScriptStruct Stigma.VisualRadioButtonDefine
// 0x0018 (0x0018 - 0x0000)
struct FVisualRadioButtonDefine final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SelectedIcon;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             NotSelectedIcon;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisualRadioButtonDefine) == 0x000008, "Wrong alignment on FVisualRadioButtonDefine");
static_assert(sizeof(FVisualRadioButtonDefine) == 0x000018, "Wrong size on FVisualRadioButtonDefine");
static_assert(offsetof(FVisualRadioButtonDefine, ID) == 0x000000, "Member 'FVisualRadioButtonDefine::ID' has a wrong offset!");
static_assert(offsetof(FVisualRadioButtonDefine, SelectedIcon) == 0x000008, "Member 'FVisualRadioButtonDefine::SelectedIcon' has a wrong offset!");
static_assert(offsetof(FVisualRadioButtonDefine, NotSelectedIcon) == 0x000010, "Member 'FVisualRadioButtonDefine::NotSelectedIcon' has a wrong offset!");

// ScriptStruct Stigma.ACK_DEDI_LoadPlayer
// 0x0158 (0x01A0 - 0x0048)
struct FACK_DEDI_LoadPlayer final : public FMQAckMsg
{
public:
	bool                                          IsBOT;                                             // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4B[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FUserInfo                              User;                                              // 0x0050(0x00A8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUserSlots                             Slot;                                              // 0x00F8(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSkill>                  PassiveSkill;                                      // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Booster>                Booster;                                           // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetMission>                    Mission;                                           // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetInvenItem>                  Inven;                                             // 0x0168(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetCharacter>                  CharInfo;                                          // 0x0178(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActiveFunction>                Function;                                          // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              ChatBanEndAt;                                      // 0x0198(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_DEDI_LoadPlayer) == 0x000008, "Wrong alignment on FACK_DEDI_LoadPlayer");
static_assert(sizeof(FACK_DEDI_LoadPlayer) == 0x0001A0, "Wrong size on FACK_DEDI_LoadPlayer");
static_assert(offsetof(FACK_DEDI_LoadPlayer, IsBOT) == 0x000048, "Member 'FACK_DEDI_LoadPlayer::IsBOT' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, User) == 0x000050, "Member 'FACK_DEDI_LoadPlayer::User' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, Slot) == 0x0000F8, "Member 'FACK_DEDI_LoadPlayer::Slot' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, PassiveSkill) == 0x000128, "Member 'FACK_DEDI_LoadPlayer::PassiveSkill' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, Booster) == 0x000138, "Member 'FACK_DEDI_LoadPlayer::Booster' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, Mission) == 0x000148, "Member 'FACK_DEDI_LoadPlayer::Mission' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, GunSpec) == 0x000158, "Member 'FACK_DEDI_LoadPlayer::GunSpec' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, Inven) == 0x000168, "Member 'FACK_DEDI_LoadPlayer::Inven' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, CharInfo) == 0x000178, "Member 'FACK_DEDI_LoadPlayer::CharInfo' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, Function) == 0x000188, "Member 'FACK_DEDI_LoadPlayer::Function' has a wrong offset!");
static_assert(offsetof(FACK_DEDI_LoadPlayer, ChatBanEndAt) == 0x000198, "Member 'FACK_DEDI_LoadPlayer::ChatBanEndAt' has a wrong offset!");

// ScriptStruct Stigma.PingBody
// 0x0010 (0x0010 - 0x0000)
struct FPingBody final
{
public:
	class FString                                 Secret;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPingBody) == 0x000008, "Wrong alignment on FPingBody");
static_assert(sizeof(FPingBody) == 0x000010, "Wrong size on FPingBody");
static_assert(offsetof(FPingBody, Secret) == 0x000000, "Member 'FPingBody::Secret' has a wrong offset!");

// ScriptStruct Stigma.SupplyStoreItem
// 0x0068 (0x0070 - 0x0008)
struct FSupplyStoreItem final : public FTableRowBase
{
public:
	ESupplyItemType                               ItemType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemStage                                    Stage;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Price;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KillLogString;                                     // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupplyStoreItem) == 0x000008, "Wrong alignment on FSupplyStoreItem");
static_assert(sizeof(FSupplyStoreItem) == 0x000070, "Wrong size on FSupplyStoreItem");
static_assert(offsetof(FSupplyStoreItem, ItemType) == 0x000008, "Member 'FSupplyStoreItem::ItemType' has a wrong offset!");
static_assert(offsetof(FSupplyStoreItem, Value) == 0x00000C, "Member 'FSupplyStoreItem::Value' has a wrong offset!");
static_assert(offsetof(FSupplyStoreItem, Stage) == 0x000010, "Member 'FSupplyStoreItem::Stage' has a wrong offset!");
static_assert(offsetof(FSupplyStoreItem, Price) == 0x000014, "Member 'FSupplyStoreItem::Price' has a wrong offset!");
static_assert(offsetof(FSupplyStoreItem, DisplayName) == 0x000018, "Member 'FSupplyStoreItem::DisplayName' has a wrong offset!");
static_assert(offsetof(FSupplyStoreItem, Icon) == 0x000030, "Member 'FSupplyStoreItem::Icon' has a wrong offset!");
static_assert(offsetof(FSupplyStoreItem, KillLogString) == 0x000058, "Member 'FSupplyStoreItem::KillLogString' has a wrong offset!");

// ScriptStruct Stigma.AIDataProviderTeamSideValue
// 0x0008 (0x0038 - 0x0030)
struct FAIDataProviderTeamSideValue final : public FAIDataProviderTypedValue
{
public:
	EAI_TeamSide                                  DefaultValue;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4E[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAIDataProviderTeamSideValue) == 0x000008, "Wrong alignment on FAIDataProviderTeamSideValue");
static_assert(sizeof(FAIDataProviderTeamSideValue) == 0x000038, "Wrong size on FAIDataProviderTeamSideValue");
static_assert(offsetof(FAIDataProviderTeamSideValue, DefaultValue) == 0x000030, "Member 'FAIDataProviderTeamSideValue::DefaultValue' has a wrong offset!");

// ScriptStruct Stigma.EventCountEntry
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEventCountEntry final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4F[0x1C];                                    // 0x0004(0x001C)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FEventCountEntry) == 0x000008, "Wrong alignment on FEventCountEntry");
static_assert(sizeof(FEventCountEntry) == 0x000020, "Wrong size on FEventCountEntry");
static_assert(offsetof(FEventCountEntry, Count) == 0x000000, "Member 'FEventCountEntry::Count' has a wrong offset!");

// ScriptStruct Stigma.SurveyDefine
// 0x0048 (0x0178 - 0x0130)
struct FSurveyDefine final : public FItemEntry
{
public:
	bool                                          Enable;                                            // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     Condition_GameMode;                                // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E50[0x2];                                     // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         StartCondition_BattleCount;                        // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0138(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GuideText;                                         // 0x0150(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSurveyQuestion>                Questions;                                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurveyDefine) == 0x000008, "Wrong alignment on FSurveyDefine");
static_assert(sizeof(FSurveyDefine) == 0x000178, "Wrong size on FSurveyDefine");
static_assert(offsetof(FSurveyDefine, Enable) == 0x000130, "Member 'FSurveyDefine::Enable' has a wrong offset!");
static_assert(offsetof(FSurveyDefine, Condition_GameMode) == 0x000131, "Member 'FSurveyDefine::Condition_GameMode' has a wrong offset!");
static_assert(offsetof(FSurveyDefine, StartCondition_BattleCount) == 0x000134, "Member 'FSurveyDefine::StartCondition_BattleCount' has a wrong offset!");
static_assert(offsetof(FSurveyDefine, Title) == 0x000138, "Member 'FSurveyDefine::Title' has a wrong offset!");
static_assert(offsetof(FSurveyDefine, GuideText) == 0x000150, "Member 'FSurveyDefine::GuideText' has a wrong offset!");
static_assert(offsetof(FSurveyDefine, Questions) == 0x000168, "Member 'FSurveyDefine::Questions' has a wrong offset!");

// ScriptStruct Stigma.EventPageInfo
// 0x0090 (0x0090 - 0x0000)
struct FEventPageInfo final
{
public:
	struct FItemID_EventPage                      EventPageID;                                       // 0x0000(0x0010)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Reward;                                            // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Progress;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OptionCount;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OptionReward;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E51[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTimeISO                           EndAt;                                             // 0x0028(0x0008)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E52[0x60];                                    // 0x0030(0x0060)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FEventPageInfo) == 0x000008, "Wrong alignment on FEventPageInfo");
static_assert(sizeof(FEventPageInfo) == 0x000090, "Wrong size on FEventPageInfo");
static_assert(offsetof(FEventPageInfo, EventPageID) == 0x000000, "Member 'FEventPageInfo::EventPageID' has a wrong offset!");
static_assert(offsetof(FEventPageInfo, Count) == 0x000010, "Member 'FEventPageInfo::Count' has a wrong offset!");
static_assert(offsetof(FEventPageInfo, Reward) == 0x000014, "Member 'FEventPageInfo::Reward' has a wrong offset!");
static_assert(offsetof(FEventPageInfo, Progress) == 0x000018, "Member 'FEventPageInfo::Progress' has a wrong offset!");
static_assert(offsetof(FEventPageInfo, OptionCount) == 0x00001C, "Member 'FEventPageInfo::OptionCount' has a wrong offset!");
static_assert(offsetof(FEventPageInfo, OptionReward) == 0x000020, "Member 'FEventPageInfo::OptionReward' has a wrong offset!");
static_assert(offsetof(FEventPageInfo, EndAt) == 0x000028, "Member 'FEventPageInfo::EndAt' has a wrong offset!");

// ScriptStruct Stigma.EventPageMinutesReward
// 0x0018 (0x0018 - 0x0000)
struct FEventPageMinutesReward final
{
public:
	int32                                         Minutes;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E53[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                Reward;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPageMinutesReward) == 0x000008, "Wrong alignment on FEventPageMinutesReward");
static_assert(sizeof(FEventPageMinutesReward) == 0x000018, "Wrong size on FEventPageMinutesReward");
static_assert(offsetof(FEventPageMinutesReward, Minutes) == 0x000000, "Member 'FEventPageMinutesReward::Minutes' has a wrong offset!");
static_assert(offsetof(FEventPageMinutesReward, Reward) == 0x000008, "Member 'FEventPageMinutesReward::Reward' has a wrong offset!");

// ScriptStruct Stigma.MaterialOpaqueAndTrans
// 0x0010 (0x0010 - 0x0000)
struct FMaterialOpaqueAndTrans final
{
public:
	class UMaterialInterface*                     _Material_Interface;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     _Material_Interface_Trans;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialOpaqueAndTrans) == 0x000008, "Wrong alignment on FMaterialOpaqueAndTrans");
static_assert(sizeof(FMaterialOpaqueAndTrans) == 0x000010, "Wrong size on FMaterialOpaqueAndTrans");
static_assert(offsetof(FMaterialOpaqueAndTrans, _Material_Interface) == 0x000000, "Member 'FMaterialOpaqueAndTrans::_Material_Interface' has a wrong offset!");
static_assert(offsetof(FMaterialOpaqueAndTrans, _Material_Interface_Trans) == 0x000008, "Member 'FMaterialOpaqueAndTrans::_Material_Interface_Trans' has a wrong offset!");

// ScriptStruct Stigma.EventKeepConnectDefine
// 0x0030 (0x0038 - 0x0008)
struct FEventKeepConnectDefine final : public FTableRowBase
{
public:
	struct FItemIDRef_EventPage                   EventPageID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventPageMinutesReward>        MinutesRewards;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEventPageCompleteCountReward>  CompleteCountRewards;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventKeepConnectDefine) == 0x000008, "Wrong alignment on FEventKeepConnectDefine");
static_assert(sizeof(FEventKeepConnectDefine) == 0x000038, "Wrong size on FEventKeepConnectDefine");
static_assert(offsetof(FEventKeepConnectDefine, EventPageID) == 0x000008, "Member 'FEventKeepConnectDefine::EventPageID' has a wrong offset!");
static_assert(offsetof(FEventKeepConnectDefine, MinutesRewards) == 0x000018, "Member 'FEventKeepConnectDefine::MinutesRewards' has a wrong offset!");
static_assert(offsetof(FEventKeepConnectDefine, CompleteCountRewards) == 0x000028, "Member 'FEventKeepConnectDefine::CompleteCountRewards' has a wrong offset!");

// ScriptStruct Stigma.EventMissionDefine
// 0x0020 (0x0028 - 0x0008)
struct FEventMissionDefine final : public FTableRowBase
{
public:
	struct FItemIDRef_EventPage                   EventPageID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEventPageMission>              MissionInfos;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventMissionDefine) == 0x000008, "Wrong alignment on FEventMissionDefine");
static_assert(sizeof(FEventMissionDefine) == 0x000028, "Wrong size on FEventMissionDefine");
static_assert(offsetof(FEventMissionDefine, EventPageID) == 0x000008, "Member 'FEventMissionDefine::EventPageID' has a wrong offset!");
static_assert(offsetof(FEventMissionDefine, MissionInfos) == 0x000018, "Member 'FEventMissionDefine::MissionInfos' has a wrong offset!");

// ScriptStruct Stigma.RadioChatID
// 0x0008 (0x0008 - 0x0000)
struct FRadioChatID final
{
public:
	ERadioChatCategory                            Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E54[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Order;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadioChatID) == 0x000004, "Wrong alignment on FRadioChatID");
static_assert(sizeof(FRadioChatID) == 0x000008, "Wrong size on FRadioChatID");
static_assert(offsetof(FRadioChatID, Category) == 0x000000, "Member 'FRadioChatID::Category' has a wrong offset!");
static_assert(offsetof(FRadioChatID, Order) == 0x000004, "Member 'FRadioChatID::Order' has a wrong offset!");

// ScriptStruct Stigma.RadioChatMessage
// 0x0018 (0x0018 - 0x0000)
struct FRadioChatMessage final
{
public:
	class FText                                   Chat;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRadioChatMessage) == 0x000008, "Wrong alignment on FRadioChatMessage");
static_assert(sizeof(FRadioChatMessage) == 0x000018, "Wrong size on FRadioChatMessage");
static_assert(offsetof(FRadioChatMessage, Chat) == 0x000000, "Member 'FRadioChatMessage::Chat' has a wrong offset!");

// ScriptStruct Stigma.Config_RadioChat
// 0x0080 (0x0088 - 0x0008)
struct FConfig_RadioChat final : public FTableRowBase
{
public:
	struct FRadioChatID                           RadioChatID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EBattlePingType                               PingType;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E55[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   VoiceID;                                           // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E56[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<ECharaType, struct FRadioChatMessage>    SpecificMessage;                                   // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_RadioChat) == 0x000008, "Wrong alignment on FConfig_RadioChat");
static_assert(sizeof(FConfig_RadioChat) == 0x000088, "Wrong size on FConfig_RadioChat");
static_assert(offsetof(FConfig_RadioChat, RadioChatID) == 0x000008, "Member 'FConfig_RadioChat::RadioChatID' has a wrong offset!");
static_assert(offsetof(FConfig_RadioChat, DisplayName) == 0x000010, "Member 'FConfig_RadioChat::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_RadioChat, PingType) == 0x000028, "Member 'FConfig_RadioChat::PingType' has a wrong offset!");
static_assert(offsetof(FConfig_RadioChat, VoiceID) == 0x00002C, "Member 'FConfig_RadioChat::VoiceID' has a wrong offset!");
static_assert(offsetof(FConfig_RadioChat, SpecificMessage) == 0x000038, "Member 'FConfig_RadioChat::SpecificMessage' has a wrong offset!");

// ScriptStruct Stigma.EventTrackMissionDefine
// 0x0020 (0x0028 - 0x0008)
struct FEventTrackMissionDefine final : public FTableRowBase
{
public:
	struct FItemIDRef_EventPage                   EventPageID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Mission>             TrackMissions;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventTrackMissionDefine) == 0x000008, "Wrong alignment on FEventTrackMissionDefine");
static_assert(sizeof(FEventTrackMissionDefine) == 0x000028, "Wrong size on FEventTrackMissionDefine");
static_assert(offsetof(FEventTrackMissionDefine, EventPageID) == 0x000008, "Member 'FEventTrackMissionDefine::EventPageID' has a wrong offset!");
static_assert(offsetof(FEventTrackMissionDefine, TrackMissions) == 0x000018, "Member 'FEventTrackMissionDefine::TrackMissions' has a wrong offset!");

// ScriptStruct Stigma.EventMasterMissionDefine
// 0x0148 (0x0150 - 0x0008)
struct FEventMasterMissionDefine final : public FTableRowBase
{
public:
	struct FItemIDRef_EventPage                   EventPageID;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    Master;                                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E57[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Mission                     FirstMission;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E58[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSoftObjectPtr<class UDataTable>              LevelConfigTable;                                  // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleRewardName;                                   // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E59[0x8];                                     // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            TitleRewardBrush;                                  // 0x0080(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventMasterMissionDefine) == 0x000010, "Wrong alignment on FEventMasterMissionDefine");
static_assert(sizeof(FEventMasterMissionDefine) == 0x000150, "Wrong size on FEventMasterMissionDefine");
static_assert(offsetof(FEventMasterMissionDefine, EventPageID) == 0x000008, "Member 'FEventMasterMissionDefine::EventPageID' has a wrong offset!");
static_assert(offsetof(FEventMasterMissionDefine, Master) == 0x000018, "Member 'FEventMasterMissionDefine::Master' has a wrong offset!");
static_assert(offsetof(FEventMasterMissionDefine, FirstMission) == 0x000020, "Member 'FEventMasterMissionDefine::FirstMission' has a wrong offset!");
static_assert(offsetof(FEventMasterMissionDefine, LevelMin) == 0x000030, "Member 'FEventMasterMissionDefine::LevelMin' has a wrong offset!");
static_assert(offsetof(FEventMasterMissionDefine, LevelConfigTable) == 0x000038, "Member 'FEventMasterMissionDefine::LevelConfigTable' has a wrong offset!");
static_assert(offsetof(FEventMasterMissionDefine, TitleRewardName) == 0x000060, "Member 'FEventMasterMissionDefine::TitleRewardName' has a wrong offset!");
static_assert(offsetof(FEventMasterMissionDefine, TitleRewardBrush) == 0x000080, "Member 'FEventMasterMissionDefine::TitleRewardBrush' has a wrong offset!");

// ScriptStruct Stigma.RecruitReward
// 0x0030 (0x0030 - 0x0000)
struct FRecruitReward final
{
public:
	struct FRewardItem                            Item;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRewardItem                            RefundItem;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecruitReward) == 0x000008, "Wrong alignment on FRecruitReward");
static_assert(sizeof(FRecruitReward) == 0x000030, "Wrong size on FRecruitReward");
static_assert(offsetof(FRecruitReward, Item) == 0x000000, "Member 'FRecruitReward::Item' has a wrong offset!");
static_assert(offsetof(FRecruitReward, RefundItem) == 0x000018, "Member 'FRecruitReward::RefundItem' has a wrong offset!");

// ScriptStruct Stigma.RecruitRandomTable
// 0x0020 (0x0028 - 0x0008)
struct FRecruitRandomTable final : public FTableRowBase
{
public:
	class FName                                   KeyName;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRecruitReward>                 Reward;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Probability;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecialProduction;                               // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5A[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRecruitRandomTable) == 0x000008, "Wrong alignment on FRecruitRandomTable");
static_assert(sizeof(FRecruitRandomTable) == 0x000028, "Wrong size on FRecruitRandomTable");
static_assert(offsetof(FRecruitRandomTable, KeyName) == 0x000008, "Member 'FRecruitRandomTable::KeyName' has a wrong offset!");
static_assert(offsetof(FRecruitRandomTable, Reward) == 0x000010, "Member 'FRecruitRandomTable::Reward' has a wrong offset!");
static_assert(offsetof(FRecruitRandomTable, Probability) == 0x000020, "Member 'FRecruitRandomTable::Probability' has a wrong offset!");
static_assert(offsetof(FRecruitRandomTable, IsSpecialProduction) == 0x000024, "Member 'FRecruitRandomTable::IsSpecialProduction' has a wrong offset!");

// ScriptStruct Stigma.AimingShot
// 0x0001 (0x0001 - 0x0000)
struct FAimingShot final
{
public:
	uint8                                         Pad_1E5B[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAimingShot) == 0x000001, "Wrong alignment on FAimingShot");
static_assert(sizeof(FAimingShot) == 0x000001, "Wrong size on FAimingShot");

// ScriptStruct Stigma.CustomFX
// 0x0003 (0x0003 - 0x0000)
struct FCustomFX final
{
public:
	bool                                          EmitHitFX;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaySoundFX;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EmitHitDecalFX;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomFX) == 0x000001, "Wrong alignment on FCustomFX");
static_assert(sizeof(FCustomFX) == 0x000003, "Wrong size on FCustomFX");
static_assert(offsetof(FCustomFX, EmitHitFX) == 0x000000, "Member 'FCustomFX::EmitHitFX' has a wrong offset!");
static_assert(offsetof(FCustomFX, PlaySoundFX) == 0x000001, "Member 'FCustomFX::PlaySoundFX' has a wrong offset!");
static_assert(offsetof(FCustomFX, EmitHitDecalFX) == 0x000002, "Member 'FCustomFX::EmitHitDecalFX' has a wrong offset!");

// ScriptStruct Stigma.BattleRound
// 0x0018 (0x0018 - 0x0000)
struct FBattleRound final
{
public:
	EBattleDecision                               Decision;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeams                                        WinTeam;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              StartTime;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FinishTime;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleRound) == 0x000008, "Wrong alignment on FBattleRound");
static_assert(sizeof(FBattleRound) == 0x000018, "Wrong size on FBattleRound");
static_assert(offsetof(FBattleRound, Decision) == 0x000000, "Member 'FBattleRound::Decision' has a wrong offset!");
static_assert(offsetof(FBattleRound, WinTeam) == 0x000001, "Member 'FBattleRound::WinTeam' has a wrong offset!");
static_assert(offsetof(FBattleRound, StartTime) == 0x000008, "Member 'FBattleRound::StartTime' has a wrong offset!");
static_assert(offsetof(FBattleRound, FinishTime) == 0x000010, "Member 'FBattleRound::FinishTime' has a wrong offset!");

// ScriptStruct Stigma.SeasonReward
// 0x0018 (0x0018 - 0x0000)
struct FSeasonReward final
{
public:
	ETier                                         Tier;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                TierRewards;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeasonReward) == 0x000008, "Wrong alignment on FSeasonReward");
static_assert(sizeof(FSeasonReward) == 0x000018, "Wrong size on FSeasonReward");
static_assert(offsetof(FSeasonReward, Tier) == 0x000000, "Member 'FSeasonReward::Tier' has a wrong offset!");
static_assert(offsetof(FSeasonReward, TierRewards) == 0x000008, "Member 'FSeasonReward::TierRewards' has a wrong offset!");

// ScriptStruct Stigma.GameNotifyDefine
// 0x0060 (0x0068 - 0x0008)
struct FGameNotifyDefine final : public FTableRowBase
{
public:
	class FName                                   NameID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoCreate;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnLobby;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnWaitingRoom;                                     // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnBattle;                                          // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_GameNotify>             WidgetClass;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchors                               Anchors;                                           // 0x0020(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Alignment;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5E[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGameNotifyDefine) == 0x000008, "Wrong alignment on FGameNotifyDefine");
static_assert(sizeof(FGameNotifyDefine) == 0x000068, "Wrong size on FGameNotifyDefine");
static_assert(offsetof(FGameNotifyDefine, NameID) == 0x000008, "Member 'FGameNotifyDefine::NameID' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, AutoCreate) == 0x000010, "Member 'FGameNotifyDefine::AutoCreate' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, OnLobby) == 0x000011, "Member 'FGameNotifyDefine::OnLobby' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, OnWaitingRoom) == 0x000012, "Member 'FGameNotifyDefine::OnWaitingRoom' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, OnBattle) == 0x000013, "Member 'FGameNotifyDefine::OnBattle' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, Duration) == 0x000014, "Member 'FGameNotifyDefine::Duration' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, WidgetClass) == 0x000018, "Member 'FGameNotifyDefine::WidgetClass' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, Anchors) == 0x000020, "Member 'FGameNotifyDefine::Anchors' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, Position) == 0x000040, "Member 'FGameNotifyDefine::Position' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, Alignment) == 0x000050, "Member 'FGameNotifyDefine::Alignment' has a wrong offset!");
static_assert(offsetof(FGameNotifyDefine, ZOrder) == 0x000060, "Member 'FGameNotifyDefine::ZOrder' has a wrong offset!");

// ScriptStruct Stigma.ACK_LoadUserProfiles
// 0x0010 (0x0010 - 0x0000)
struct FACK_LoadUserProfiles final
{
public:
	TArray<struct FUserProfileBase>               Users;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_LoadUserProfiles) == 0x000008, "Wrong alignment on FACK_LoadUserProfiles");
static_assert(sizeof(FACK_LoadUserProfiles) == 0x000010, "Wrong size on FACK_LoadUserProfiles");
static_assert(offsetof(FACK_LoadUserProfiles, Users) == 0x000000, "Member 'FACK_LoadUserProfiles::Users' has a wrong offset!");

// ScriptStruct Stigma.BountyPhaseDefine
// 0x0050 (0x0050 - 0x0000)
struct FBountyPhaseDefine final
{
public:
	int32                                         ElapsedTimeSec;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   PhaseNoticeText;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AnnounceVoiceID;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRevive;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E60[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         GoldBox_Interval;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldBox_Count;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HackingRate;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAlertTimer;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E61[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class USoundBase*                             AlertSound;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBountyPhaseDefine) == 0x000008, "Wrong alignment on FBountyPhaseDefine");
static_assert(sizeof(FBountyPhaseDefine) == 0x000050, "Wrong size on FBountyPhaseDefine");
static_assert(offsetof(FBountyPhaseDefine, ElapsedTimeSec) == 0x000000, "Member 'FBountyPhaseDefine::ElapsedTimeSec' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, PhaseNoticeText) == 0x000008, "Member 'FBountyPhaseDefine::PhaseNoticeText' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, AnnounceVoiceID) == 0x000020, "Member 'FBountyPhaseDefine::AnnounceVoiceID' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, CanRevive) == 0x000030, "Member 'FBountyPhaseDefine::CanRevive' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, GoldBox_Interval) == 0x000034, "Member 'FBountyPhaseDefine::GoldBox_Interval' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, GoldBox_Count) == 0x000038, "Member 'FBountyPhaseDefine::GoldBox_Count' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, HackingRate) == 0x00003C, "Member 'FBountyPhaseDefine::HackingRate' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, ShouldAlertTimer) == 0x000040, "Member 'FBountyPhaseDefine::ShouldAlertTimer' has a wrong offset!");
static_assert(offsetof(FBountyPhaseDefine, AlertSound) == 0x000048, "Member 'FBountyPhaseDefine::AlertSound' has a wrong offset!");

// ScriptStruct Stigma.BountyRule
// 0x00A0 (0x00A0 - 0x0000)
struct FBountyRule final
{
public:
	float                                         HackingTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HackingRepairFactor;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HackingRepair_Delay;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HackingRepair_MaxRatio;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreakInTime;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndicatedMinMoney;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransferUnit;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransferTime;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldBoxWaitTime;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBountyEarlyFin                        EarlyFin;                                          // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E62[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TMap<EGoldBoxType, struct FGoldBoxConfig>     GoldBoxInfo;                                       // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class ACoinBase>                  CoinType;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBountyPhaseDefine>             PhaseDefines;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBountyRule) == 0x000008, "Wrong alignment on FBountyRule");
static_assert(sizeof(FBountyRule) == 0x0000A0, "Wrong size on FBountyRule");
static_assert(offsetof(FBountyRule, HackingTime) == 0x000000, "Member 'FBountyRule::HackingTime' has a wrong offset!");
static_assert(offsetof(FBountyRule, HackingRepairFactor) == 0x000004, "Member 'FBountyRule::HackingRepairFactor' has a wrong offset!");
static_assert(offsetof(FBountyRule, HackingRepair_Delay) == 0x000008, "Member 'FBountyRule::HackingRepair_Delay' has a wrong offset!");
static_assert(offsetof(FBountyRule, HackingRepair_MaxRatio) == 0x00000C, "Member 'FBountyRule::HackingRepair_MaxRatio' has a wrong offset!");
static_assert(offsetof(FBountyRule, BreakInTime) == 0x000010, "Member 'FBountyRule::BreakInTime' has a wrong offset!");
static_assert(offsetof(FBountyRule, IndicatedMinMoney) == 0x000014, "Member 'FBountyRule::IndicatedMinMoney' has a wrong offset!");
static_assert(offsetof(FBountyRule, TransferUnit) == 0x000018, "Member 'FBountyRule::TransferUnit' has a wrong offset!");
static_assert(offsetof(FBountyRule, TransferTime) == 0x00001C, "Member 'FBountyRule::TransferTime' has a wrong offset!");
static_assert(offsetof(FBountyRule, GoldBoxWaitTime) == 0x000020, "Member 'FBountyRule::GoldBoxWaitTime' has a wrong offset!");
static_assert(offsetof(FBountyRule, EarlyFin) == 0x000024, "Member 'FBountyRule::EarlyFin' has a wrong offset!");
static_assert(offsetof(FBountyRule, GoldBoxInfo) == 0x000038, "Member 'FBountyRule::GoldBoxInfo' has a wrong offset!");
static_assert(offsetof(FBountyRule, CoinType) == 0x000088, "Member 'FBountyRule::CoinType' has a wrong offset!");
static_assert(offsetof(FBountyRule, PhaseDefines) == 0x000090, "Member 'FBountyRule::PhaseDefines' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadRecruit
// 0x0001 (0x0001 - 0x0000)
struct FREQ_ReadRecruit final
{
public:
	uint8                                         Pad_1E63[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadRecruit) == 0x000001, "Wrong alignment on FREQ_ReadRecruit");
static_assert(sizeof(FREQ_ReadRecruit) == 0x000001, "Wrong size on FREQ_ReadRecruit");

// ScriptStruct Stigma.GhostBody
// 0x0018 (0x0018 - 0x0000)
struct FGhostBody final
{
public:
	TArray<class UPoseableMeshComponent*>         _GhostPoseableMeshComponents;                      // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E64[0x8];                                     // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGhostBody) == 0x000008, "Wrong alignment on FGhostBody");
static_assert(sizeof(FGhostBody) == 0x000018, "Wrong size on FGhostBody");
static_assert(offsetof(FGhostBody, _GhostPoseableMeshComponents) == 0x000000, "Member 'FGhostBody::_GhostPoseableMeshComponents' has a wrong offset!");

// ScriptStruct Stigma.TutorialProgress
// 0x0004 (0x0004 - 0x0000)
struct FTutorialProgress final
{
public:
	int32                                         _Progress;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTutorialProgress) == 0x000004, "Wrong alignment on FTutorialProgress");
static_assert(sizeof(FTutorialProgress) == 0x000004, "Wrong size on FTutorialProgress");
static_assert(offsetof(FTutorialProgress, _Progress) == 0x000000, "Member 'FTutorialProgress::_Progress' has a wrong offset!");

// ScriptStruct Stigma.Config_Goods
// 0x00C0 (0x01F0 - 0x0130)
struct FConfig_Goods final : public FItemEntry
{
public:
	struct FReward                                BasicItems;                                        // 0x0130(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FReward                                BonusItems;                                        // 0x0140(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EBuyingPlace                                  BuyingPlace;                                       // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGoodsCategory                                Category;                                          // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E65[0x2];                                     // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         DisplayPriority;                                   // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemIDRef_Currency                    PriceType;                                         // 0x0158(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SteamItemID;                                       // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartLevel;                                        // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndLevel;                                          // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuyLimit                              Limit;                                             // 0x0178(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSet<class FName>                             Keywords;                                          // 0x0198(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Discount;                                          // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E66[0x4];                                     // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_Goods) == 0x000008, "Wrong alignment on FConfig_Goods");
static_assert(sizeof(FConfig_Goods) == 0x0001F0, "Wrong size on FConfig_Goods");
static_assert(offsetof(FConfig_Goods, BasicItems) == 0x000130, "Member 'FConfig_Goods::BasicItems' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, BonusItems) == 0x000140, "Member 'FConfig_Goods::BonusItems' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, BuyingPlace) == 0x000150, "Member 'FConfig_Goods::BuyingPlace' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, Category) == 0x000151, "Member 'FConfig_Goods::Category' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, DisplayPriority) == 0x000154, "Member 'FConfig_Goods::DisplayPriority' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, PriceType) == 0x000158, "Member 'FConfig_Goods::PriceType' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, Price) == 0x000168, "Member 'FConfig_Goods::Price' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, SteamItemID) == 0x00016C, "Member 'FConfig_Goods::SteamItemID' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, StartLevel) == 0x000170, "Member 'FConfig_Goods::StartLevel' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, EndLevel) == 0x000174, "Member 'FConfig_Goods::EndLevel' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, Limit) == 0x000178, "Member 'FConfig_Goods::Limit' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, Keywords) == 0x000198, "Member 'FConfig_Goods::Keywords' has a wrong offset!");
static_assert(offsetof(FConfig_Goods, Discount) == 0x0001E8, "Member 'FConfig_Goods::Discount' has a wrong offset!");

// ScriptStruct Stigma.GroupCompetitionReward
// 0x0008 (0x0018 - 0x0010)
struct FGroupCompetitionReward final : public FReward
{
public:
	int32                                         Rank;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingPoint;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupCompetitionReward) == 0x000008, "Wrong alignment on FGroupCompetitionReward");
static_assert(sizeof(FGroupCompetitionReward) == 0x000018, "Wrong size on FGroupCompetitionReward");
static_assert(offsetof(FGroupCompetitionReward, Rank) == 0x000010, "Member 'FGroupCompetitionReward::Rank' has a wrong offset!");
static_assert(offsetof(FGroupCompetitionReward, RankingPoint) == 0x000014, "Member 'FGroupCompetitionReward::RankingPoint' has a wrong offset!");

// ScriptStruct Stigma.REQ_RegisterServer
// 0x0040 (0x0090 - 0x0050)
struct FREQ_RegisterServer final : public FMQReqMsg
{
public:
	class FString                                 DediSteamIDS;                                      // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDediID                                DediID;                                            // 0x0060(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AppVer;                                            // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_RegisterServer) == 0x000008, "Wrong alignment on FREQ_RegisterServer");
static_assert(sizeof(FREQ_RegisterServer) == 0x000090, "Wrong size on FREQ_RegisterServer");
static_assert(offsetof(FREQ_RegisterServer, DediSteamIDS) == 0x000050, "Member 'FREQ_RegisterServer::DediSteamIDS' has a wrong offset!");
static_assert(offsetof(FREQ_RegisterServer, DediID) == 0x000060, "Member 'FREQ_RegisterServer::DediID' has a wrong offset!");
static_assert(offsetof(FREQ_RegisterServer, AppVer) == 0x000070, "Member 'FREQ_RegisterServer::AppVer' has a wrong offset!");
static_assert(offsetof(FREQ_RegisterServer, Region) == 0x000080, "Member 'FREQ_RegisterServer::Region' has a wrong offset!");

// ScriptStruct Stigma.Config_GroupCompetitionRewards
// 0x0018 (0x0020 - 0x0008)
struct FConfig_GroupCompetitionRewards final : public FTableRowBase
{
public:
	ECompetitionType                              CompetitionType;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E67[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FGroupCompetitionReward>        Rewards;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_GroupCompetitionRewards) == 0x000008, "Wrong alignment on FConfig_GroupCompetitionRewards");
static_assert(sizeof(FConfig_GroupCompetitionRewards) == 0x000020, "Wrong size on FConfig_GroupCompetitionRewards");
static_assert(offsetof(FConfig_GroupCompetitionRewards, CompetitionType) == 0x000008, "Member 'FConfig_GroupCompetitionRewards::CompetitionType' has a wrong offset!");
static_assert(offsetof(FConfig_GroupCompetitionRewards, Rewards) == 0x000010, "Member 'FConfig_GroupCompetitionRewards::Rewards' has a wrong offset!");

// ScriptStruct Stigma.BulletCaliberDefine
// 0x0068 (0x0070 - 0x0008)
struct FBulletCaliberDefine final : public FTableRowBase
{
public:
	EBulletType                                   BulletType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletTip                                    TipType;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E68[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         ActualCaliber;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunSearchGroup                               SearchGroup;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E69[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulletCaliberDefine) == 0x000008, "Wrong alignment on FBulletCaliberDefine");
static_assert(sizeof(FBulletCaliberDefine) == 0x000070, "Wrong size on FBulletCaliberDefine");
static_assert(offsetof(FBulletCaliberDefine, BulletType) == 0x000008, "Member 'FBulletCaliberDefine::BulletType' has a wrong offset!");
static_assert(offsetof(FBulletCaliberDefine, TipType) == 0x000009, "Member 'FBulletCaliberDefine::TipType' has a wrong offset!");
static_assert(offsetof(FBulletCaliberDefine, ActualCaliber) == 0x00000C, "Member 'FBulletCaliberDefine::ActualCaliber' has a wrong offset!");
static_assert(offsetof(FBulletCaliberDefine, SearchGroup) == 0x000010, "Member 'FBulletCaliberDefine::SearchGroup' has a wrong offset!");
static_assert(offsetof(FBulletCaliberDefine, DisplayName) == 0x000018, "Member 'FBulletCaliberDefine::DisplayName' has a wrong offset!");
static_assert(offsetof(FBulletCaliberDefine, Desc) == 0x000030, "Member 'FBulletCaliberDefine::Desc' has a wrong offset!");
static_assert(offsetof(FBulletCaliberDefine, Icon) == 0x000048, "Member 'FBulletCaliberDefine::Icon' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyGameModeUpdate
// 0x0010 (0x0010 - 0x0000)
struct FACK_PartyGameModeUpdate final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_PartyGameModeUpdate) == 0x000008, "Wrong alignment on FACK_PartyGameModeUpdate");
static_assert(sizeof(FACK_PartyGameModeUpdate) == 0x000010, "Wrong size on FACK_PartyGameModeUpdate");
static_assert(offsetof(FACK_PartyGameModeUpdate, PartyIDN) == 0x000000, "Member 'FACK_PartyGameModeUpdate::PartyIDN' has a wrong offset!");
static_assert(offsetof(FACK_PartyGameModeUpdate, GameMode) == 0x000008, "Member 'FACK_PartyGameModeUpdate::GameMode' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Body
// 0x0188 (0x0368 - 0x01E0)
struct FGunEntry_Body final : public FGunEntry_Base
{
public:
	struct FReloadAnimation                       ReloadAnimation;                                   // 0x01E0(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ECharaType, struct FReloadAnimation>     SpecificReloadAnimation;                           // 0x02F8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemIDRef_Gun_Magazine                DefaultMagazineID;                                 // 0x0348(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        _LoadedAssets;                                     // 0x0358(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGunEntry_Body) == 0x000008, "Wrong alignment on FGunEntry_Body");
static_assert(sizeof(FGunEntry_Body) == 0x000368, "Wrong size on FGunEntry_Body");
static_assert(offsetof(FGunEntry_Body, ReloadAnimation) == 0x0001E0, "Member 'FGunEntry_Body::ReloadAnimation' has a wrong offset!");
static_assert(offsetof(FGunEntry_Body, SpecificReloadAnimation) == 0x0002F8, "Member 'FGunEntry_Body::SpecificReloadAnimation' has a wrong offset!");
static_assert(offsetof(FGunEntry_Body, DefaultMagazineID) == 0x000348, "Member 'FGunEntry_Body::DefaultMagazineID' has a wrong offset!");
static_assert(offsetof(FGunEntry_Body, _LoadedAssets) == 0x000358, "Member 'FGunEntry_Body::_LoadedAssets' has a wrong offset!");

// ScriptStruct Stigma.Stat_Boost
// 0x0020 (0x0020 - 0x0000)
struct FStat_Boost final
{
public:
	float                                         ExpRate;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTimeISO                           ExpEndDate;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiamondRate;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTimeISO                           DiamondEndDate;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_Boost) == 0x000008, "Wrong alignment on FStat_Boost");
static_assert(sizeof(FStat_Boost) == 0x000020, "Wrong size on FStat_Boost");
static_assert(offsetof(FStat_Boost, ExpRate) == 0x000000, "Member 'FStat_Boost::ExpRate' has a wrong offset!");
static_assert(offsetof(FStat_Boost, ExpEndDate) == 0x000008, "Member 'FStat_Boost::ExpEndDate' has a wrong offset!");
static_assert(offsetof(FStat_Boost, DiamondRate) == 0x000010, "Member 'FStat_Boost::DiamondRate' has a wrong offset!");
static_assert(offsetof(FStat_Boost, DiamondEndDate) == 0x000018, "Member 'FStat_Boost::DiamondEndDate' has a wrong offset!");

// ScriptStruct Stigma.GunEntry_Charm
// 0x0000 (0x01E0 - 0x01E0)
struct FGunEntry_Charm final : public FGunEntry_AccessoryBase
{
};
static_assert(alignof(FGunEntry_Charm) == 0x000008, "Wrong alignment on FGunEntry_Charm");
static_assert(sizeof(FGunEntry_Charm) == 0x0001E0, "Wrong size on FGunEntry_Charm");

// ScriptStruct Stigma.Config_StickyBomb
// 0x0028 (0x0030 - 0x0008)
struct FConfig_StickyBomb final : public FTableRowBase
{
public:
	struct FDamageDef                             Damage_Attach;                                     // 0x0008(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDamageDef                             Damage_Explosion;                                  // 0x001C(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_StickyBomb) == 0x000008, "Wrong alignment on FConfig_StickyBomb");
static_assert(sizeof(FConfig_StickyBomb) == 0x000030, "Wrong size on FConfig_StickyBomb");
static_assert(offsetof(FConfig_StickyBomb, Damage_Attach) == 0x000008, "Member 'FConfig_StickyBomb::Damage_Attach' has a wrong offset!");
static_assert(offsetof(FConfig_StickyBomb, Damage_Explosion) == 0x00001C, "Member 'FConfig_StickyBomb::Damage_Explosion' has a wrong offset!");

// ScriptStruct Stigma.GunPartsMeshes
// 0x0010 (0x0010 - 0x0000)
struct FGunPartsMeshes final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 FovMesh;                                           // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunPartsMeshes) == 0x000008, "Wrong alignment on FGunPartsMeshes");
static_assert(sizeof(FGunPartsMeshes) == 0x000010, "Wrong size on FGunPartsMeshes");
static_assert(offsetof(FGunPartsMeshes, Mesh) == 0x000000, "Member 'FGunPartsMeshes::Mesh' has a wrong offset!");
static_assert(offsetof(FGunPartsMeshes, FovMesh) == 0x000008, "Member 'FGunPartsMeshes::FovMesh' has a wrong offset!");

// ScriptStruct Stigma.HelpContentsMenuItemData
// 0x0010 (0x0010 - 0x0000)
struct FHelpContentsMenuItemData final
{
public:
	TArray<class UHelpMenuItemData*>              ContentsMenuDataList;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpContentsMenuItemData) == 0x000008, "Wrong alignment on FHelpContentsMenuItemData");
static_assert(sizeof(FHelpContentsMenuItemData) == 0x000010, "Wrong size on FHelpContentsMenuItemData");
static_assert(offsetof(FHelpContentsMenuItemData, ContentsMenuDataList) == 0x000000, "Member 'FHelpContentsMenuItemData::ContentsMenuDataList' has a wrong offset!");

// ScriptStruct Stigma.BC_MissionUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_MissionUpdate final
{
public:
	TArray<struct FNetMission>                    MData;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_MissionUpdate) == 0x000008, "Wrong alignment on FBC_MissionUpdate");
static_assert(sizeof(FBC_MissionUpdate) == 0x000010, "Wrong size on FBC_MissionUpdate");
static_assert(offsetof(FBC_MissionUpdate, MData) == 0x000000, "Member 'FBC_MissionUpdate::MData' has a wrong offset!");

// ScriptStruct Stigma.HitHistory
// 0x0078 (0x0078 - 0x0000)
struct FHitHistory final
{
public:
	EWeaponType                                   WeaponType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletType                                   BulletType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBulletTip                                    BulletTipType;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeleeAttackPoint                             MeleeAttackPoint;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                Pos;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        bone;                                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodyParts                                    Parts;                                             // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          SurfaceMaterial;                                   // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6E[0x1];                                     // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Distance;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageDef                             Damage;                                            // 0x0058(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6F[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         DecreaseHP;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseArmor;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitHistory) == 0x000008, "Wrong alignment on FHitHistory");
static_assert(sizeof(FHitHistory) == 0x000078, "Wrong size on FHitHistory");
static_assert(offsetof(FHitHistory, WeaponType) == 0x000000, "Member 'FHitHistory::WeaponType' has a wrong offset!");
static_assert(offsetof(FHitHistory, BulletType) == 0x000001, "Member 'FHitHistory::BulletType' has a wrong offset!");
static_assert(offsetof(FHitHistory, BulletTipType) == 0x000002, "Member 'FHitHistory::BulletTipType' has a wrong offset!");
static_assert(offsetof(FHitHistory, AttackType) == 0x000003, "Member 'FHitHistory::AttackType' has a wrong offset!");
static_assert(offsetof(FHitHistory, MeleeAttackPoint) == 0x000004, "Member 'FHitHistory::MeleeAttackPoint' has a wrong offset!");
static_assert(offsetof(FHitHistory, Pos) == 0x000008, "Member 'FHitHistory::Pos' has a wrong offset!");
static_assert(offsetof(FHitHistory, ImpactNormal) == 0x000020, "Member 'FHitHistory::ImpactNormal' has a wrong offset!");
static_assert(offsetof(FHitHistory, SurfaceNormal) == 0x000038, "Member 'FHitHistory::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(FHitHistory, bone) == 0x000050, "Member 'FHitHistory::bone' has a wrong offset!");
static_assert(offsetof(FHitHistory, Parts) == 0x000051, "Member 'FHitHistory::Parts' has a wrong offset!");
static_assert(offsetof(FHitHistory, SurfaceMaterial) == 0x000052, "Member 'FHitHistory::SurfaceMaterial' has a wrong offset!");
static_assert(offsetof(FHitHistory, Distance) == 0x000054, "Member 'FHitHistory::Distance' has a wrong offset!");
static_assert(offsetof(FHitHistory, Damage) == 0x000058, "Member 'FHitHistory::Damage' has a wrong offset!");
static_assert(offsetof(FHitHistory, DecreaseHP) == 0x000070, "Member 'FHitHistory::DecreaseHP' has a wrong offset!");
static_assert(offsetof(FHitHistory, DecreaseArmor) == 0x000074, "Member 'FHitHistory::DecreaseArmor' has a wrong offset!");

// ScriptStruct Stigma.KillLog_ForRevive
// 0x0010 (0x0010 - 0x0000)
struct FKillLog_ForRevive final
{
public:
	class ACharaBase*                             Reviver;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Saver;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillLog_ForRevive) == 0x000008, "Wrong alignment on FKillLog_ForRevive");
static_assert(sizeof(FKillLog_ForRevive) == 0x000010, "Wrong size on FKillLog_ForRevive");
static_assert(offsetof(FKillLog_ForRevive, Reviver) == 0x000000, "Member 'FKillLog_ForRevive::Reviver' has a wrong offset!");
static_assert(offsetof(FKillLog_ForRevive, Saver) == 0x000008, "Member 'FKillLog_ForRevive::Saver' has a wrong offset!");

// ScriptStruct Stigma.HitEffect
// 0x0118 (0x0118 - 0x0000)
struct FHitEffect final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          Particle;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFXSystemAsset>          Particle_EX;                                       // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFXSystemAsset>          Attacker_Particle;                                 // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Attacker_Particle_SocketName;                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound;                                             // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound_1PV;                                         // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalSize_Base;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalSize_RandomRange;                             // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> BulletHoleDecals;                                  // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          DecalParticle;                                     // 0x00E8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingScaleByDsitanceParticle;                      // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E70[0x7];                                     // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FHitEffect) == 0x000008, "Wrong alignment on FHitEffect");
static_assert(sizeof(FHitEffect) == 0x000118, "Wrong size on FHitEffect");
static_assert(offsetof(FHitEffect, Particle) == 0x000000, "Member 'FHitEffect::Particle' has a wrong offset!");
static_assert(offsetof(FHitEffect, Particle_EX) == 0x000028, "Member 'FHitEffect::Particle_EX' has a wrong offset!");
static_assert(offsetof(FHitEffect, Attacker_Particle) == 0x000050, "Member 'FHitEffect::Attacker_Particle' has a wrong offset!");
static_assert(offsetof(FHitEffect, Attacker_Particle_SocketName) == 0x000078, "Member 'FHitEffect::Attacker_Particle_SocketName' has a wrong offset!");
static_assert(offsetof(FHitEffect, Sound) == 0x000080, "Member 'FHitEffect::Sound' has a wrong offset!");
static_assert(offsetof(FHitEffect, Sound_1PV) == 0x0000A8, "Member 'FHitEffect::Sound_1PV' has a wrong offset!");
static_assert(offsetof(FHitEffect, DecalSize_Base) == 0x0000D0, "Member 'FHitEffect::DecalSize_Base' has a wrong offset!");
static_assert(offsetof(FHitEffect, DecalSize_RandomRange) == 0x0000D4, "Member 'FHitEffect::DecalSize_RandomRange' has a wrong offset!");
static_assert(offsetof(FHitEffect, BulletHoleDecals) == 0x0000D8, "Member 'FHitEffect::BulletHoleDecals' has a wrong offset!");
static_assert(offsetof(FHitEffect, DecalParticle) == 0x0000E8, "Member 'FHitEffect::DecalParticle' has a wrong offset!");
static_assert(offsetof(FHitEffect, UsingScaleByDsitanceParticle) == 0x000110, "Member 'FHitEffect::UsingScaleByDsitanceParticle' has a wrong offset!");

// ScriptStruct Stigma.WeaponHitEffectEntry
// 0x0120 (0x0128 - 0x0008)
struct FWeaponHitEffectEntry final : public FTableRowBase
{
public:
	EBodyParts                                    HitPart;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          SurfaceMaterial;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E71[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitEffect                             HitEffect;                                         // 0x0010(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponHitEffectEntry) == 0x000008, "Wrong alignment on FWeaponHitEffectEntry");
static_assert(sizeof(FWeaponHitEffectEntry) == 0x000128, "Wrong size on FWeaponHitEffectEntry");
static_assert(offsetof(FWeaponHitEffectEntry, HitPart) == 0x000008, "Member 'FWeaponHitEffectEntry::HitPart' has a wrong offset!");
static_assert(offsetof(FWeaponHitEffectEntry, SurfaceMaterial) == 0x000009, "Member 'FWeaponHitEffectEntry::SurfaceMaterial' has a wrong offset!");
static_assert(offsetof(FWeaponHitEffectEntry, HitEffect) == 0x000010, "Member 'FWeaponHitEffectEntry::HitEffect' has a wrong offset!");

// ScriptStruct Stigma.GunHitEffectEntry
// 0x0350 (0x0358 - 0x0008)
struct FGunHitEffectEntry final : public FTableRowBase
{
public:
	bool                                          Is_head;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceMaterialType                          SurfaceMaterial;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E72[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	struct FHitEffect                             SmallHitEffect;                                    // 0x0010(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHitEffect                             MediumHitEffect;                                   // 0x0128(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHitEffect                             LargeHitEffect;                                    // 0x0240(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGunHitEffectEntry) == 0x000008, "Wrong alignment on FGunHitEffectEntry");
static_assert(sizeof(FGunHitEffectEntry) == 0x000358, "Wrong size on FGunHitEffectEntry");
static_assert(offsetof(FGunHitEffectEntry, Is_head) == 0x000008, "Member 'FGunHitEffectEntry::Is_head' has a wrong offset!");
static_assert(offsetof(FGunHitEffectEntry, SurfaceMaterial) == 0x000009, "Member 'FGunHitEffectEntry::SurfaceMaterial' has a wrong offset!");
static_assert(offsetof(FGunHitEffectEntry, SmallHitEffect) == 0x000010, "Member 'FGunHitEffectEntry::SmallHitEffect' has a wrong offset!");
static_assert(offsetof(FGunHitEffectEntry, MediumHitEffect) == 0x000128, "Member 'FGunHitEffectEntry::MediumHitEffect' has a wrong offset!");
static_assert(offsetof(FGunHitEffectEntry, LargeHitEffect) == 0x000240, "Member 'FGunHitEffectEntry::LargeHitEffect' has a wrong offset!");

// ScriptStruct Stigma.ACK_UpdateMissionCount
// 0x0001 (0x0001 - 0x0000)
struct FACK_UpdateMissionCount final
{
public:
	uint8                                         Pad_1E73[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_UpdateMissionCount) == 0x000001, "Wrong alignment on FACK_UpdateMissionCount");
static_assert(sizeof(FACK_UpdateMissionCount) == 0x000001, "Wrong size on FACK_UpdateMissionCount");

// ScriptStruct Stigma.WeaponHitEffectEntries
// 0x0010 (0x0018 - 0x0008)
struct FWeaponHitEffectEntries final : public FTableRowBase
{
public:
	EAttackType                                   AttackType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E74[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UDataTable*                             SubEntry;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponHitEffectEntries) == 0x000008, "Wrong alignment on FWeaponHitEffectEntries");
static_assert(sizeof(FWeaponHitEffectEntries) == 0x000018, "Wrong size on FWeaponHitEffectEntries");
static_assert(offsetof(FWeaponHitEffectEntries, AttackType) == 0x000008, "Member 'FWeaponHitEffectEntries::AttackType' has a wrong offset!");
static_assert(offsetof(FWeaponHitEffectEntries, SubEntry) == 0x000010, "Member 'FWeaponHitEffectEntries::SubEntry' has a wrong offset!");

// ScriptStruct Stigma.BloodPositionOption
// 0x0050 (0x0050 - 0x0000)
struct FBloodPositionOption final
{
public:
	struct FAnchors                               Anchors;                                           // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Alignment;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBloodPositionOption) == 0x000008, "Wrong alignment on FBloodPositionOption");
static_assert(sizeof(FBloodPositionOption) == 0x000050, "Wrong size on FBloodPositionOption");
static_assert(offsetof(FBloodPositionOption, Anchors) == 0x000000, "Member 'FBloodPositionOption::Anchors' has a wrong offset!");
static_assert(offsetof(FBloodPositionOption, Position) == 0x000020, "Member 'FBloodPositionOption::Position' has a wrong offset!");
static_assert(offsetof(FBloodPositionOption, Size) == 0x000030, "Member 'FBloodPositionOption::Size' has a wrong offset!");
static_assert(offsetof(FBloodPositionOption, Alignment) == 0x000040, "Member 'FBloodPositionOption::Alignment' has a wrong offset!");

// ScriptStruct Stigma.BloodDesignOption
// 0x0004 (0x0004 - 0x0000)
struct FBloodDesignOption final
{
public:
	int32                                         BloodCount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBloodDesignOption) == 0x000004, "Wrong alignment on FBloodDesignOption");
static_assert(sizeof(FBloodDesignOption) == 0x000004, "Wrong size on FBloodDesignOption");
static_assert(offsetof(FBloodDesignOption, BloodCount) == 0x000000, "Member 'FBloodDesignOption::BloodCount' has a wrong offset!");

// ScriptStruct Stigma.BountyActionLogAsset
// 0x0020 (0x0020 - 0x0000)
struct FBountyActionLogAsset final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBountyActionLogAsset) == 0x000008, "Wrong alignment on FBountyActionLogAsset");
static_assert(sizeof(FBountyActionLogAsset) == 0x000020, "Wrong size on FBountyActionLogAsset");
static_assert(offsetof(FBountyActionLogAsset, Icon) == 0x000000, "Member 'FBountyActionLogAsset::Icon' has a wrong offset!");
static_assert(offsetof(FBountyActionLogAsset, DisplayName) == 0x000008, "Member 'FBountyActionLogAsset::DisplayName' has a wrong offset!");

// ScriptStruct Stigma.PlayerWidgetSlots
// 0x0010 (0x0010 - 0x0000)
struct FPlayerWidgetSlots final
{
public:
	TArray<class UHUD_PlayerSlot*>                Widgets;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerWidgetSlots) == 0x000008, "Wrong alignment on FPlayerWidgetSlots");
static_assert(sizeof(FPlayerWidgetSlots) == 0x000010, "Wrong size on FPlayerWidgetSlots");
static_assert(offsetof(FPlayerWidgetSlots, Widgets) == 0x000000, "Member 'FPlayerWidgetSlots::Widgets' has a wrong offset!");

// ScriptStruct Stigma.REQ_CharacterPick
// 0x0010 (0x0010 - 0x0000)
struct FREQ_CharacterPick final
{
public:
	TArray<ECharaType>                            CharaType;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_CharacterPick) == 0x000008, "Wrong alignment on FREQ_CharacterPick");
static_assert(sizeof(FREQ_CharacterPick) == 0x000010, "Wrong size on FREQ_CharacterPick");
static_assert(offsetof(FREQ_CharacterPick, CharaType) == 0x000000, "Member 'FREQ_CharacterPick::CharaType' has a wrong offset!");

// ScriptStruct Stigma.InteractionData
// 0x0058 (0x0058 - 0x0000)
struct FInteractionData final
{
public:
	struct FInputActionKeyMapping                 Key;                                               // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UIText;                                            // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Parameter;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E75[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UTexture2D*                             Icon;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldKeepLookingAt;                               // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E76[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FInteractionData) == 0x000008, "Wrong alignment on FInteractionData");
static_assert(sizeof(FInteractionData) == 0x000058, "Wrong size on FInteractionData");
static_assert(offsetof(FInteractionData, Key) == 0x000000, "Member 'FInteractionData::Key' has a wrong offset!");
static_assert(offsetof(FInteractionData, UIText) == 0x000028, "Member 'FInteractionData::UIText' has a wrong offset!");
static_assert(offsetof(FInteractionData, Parameter) == 0x000040, "Member 'FInteractionData::Parameter' has a wrong offset!");
static_assert(offsetof(FInteractionData, Icon) == 0x000048, "Member 'FInteractionData::Icon' has a wrong offset!");
static_assert(offsetof(FInteractionData, ShouldKeepLookingAt) == 0x000050, "Member 'FInteractionData::ShouldKeepLookingAt' has a wrong offset!");

// ScriptStruct Stigma.InteractionDetail
// 0x0004 (0x0004 - 0x0000)
struct FInteractionDetail final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionDetail) == 0x000004, "Wrong alignment on FInteractionDetail");
static_assert(sizeof(FInteractionDetail) == 0x000004, "Wrong size on FInteractionDetail");
static_assert(offsetof(FInteractionDetail, Delay) == 0x000000, "Member 'FInteractionDetail::Delay' has a wrong offset!");

// ScriptStruct Stigma.UniqueInvenItem
// 0x0030 (0x0030 - 0x0000)
struct FUniqueInvenItem final
{
public:
	struct FUUID                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IDN;                                               // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lifetime;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpireAt;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUniqueInvenItem) == 0x000008, "Wrong alignment on FUniqueInvenItem");
static_assert(sizeof(FUniqueInvenItem) == 0x000030, "Wrong size on FUniqueInvenItem");
static_assert(offsetof(FUniqueInvenItem, ID) == 0x000000, "Member 'FUniqueInvenItem::ID' has a wrong offset!");
static_assert(offsetof(FUniqueInvenItem, IDN) == 0x000010, "Member 'FUniqueInvenItem::IDN' has a wrong offset!");
static_assert(offsetof(FUniqueInvenItem, LevelMin) == 0x000014, "Member 'FUniqueInvenItem::LevelMin' has a wrong offset!");
static_assert(offsetof(FUniqueInvenItem, LevelMax) == 0x000018, "Member 'FUniqueInvenItem::LevelMax' has a wrong offset!");
static_assert(offsetof(FUniqueInvenItem, Lifetime) == 0x00001C, "Member 'FUniqueInvenItem::Lifetime' has a wrong offset!");
static_assert(offsetof(FUniqueInvenItem, ExpireAt) == 0x000020, "Member 'FUniqueInvenItem::ExpireAt' has a wrong offset!");

// ScriptStruct Stigma.MultiplicityItemEntry
// 0x0050 (0x0180 - 0x0130)
struct FMultiplicityItemEntry final : public FItemEntry
{
public:
	uint8                                         Pad_1E77[0x50];                                    // 0x0130(0x0050)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMultiplicityItemEntry) == 0x000008, "Wrong alignment on FMultiplicityItemEntry");
static_assert(sizeof(FMultiplicityItemEntry) == 0x000180, "Wrong size on FMultiplicityItemEntry");

// ScriptStruct Stigma.ItemDataTableInfo
// 0x0018 (0x0018 - 0x0000)
struct FItemDataTableInfo final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E78[0x10];                                    // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FItemDataTableInfo) == 0x000008, "Wrong alignment on FItemDataTableInfo");
static_assert(sizeof(FItemDataTableInfo) == 0x000018, "Wrong size on FItemDataTableInfo");
static_assert(offsetof(FItemDataTableInfo, DataTable) == 0x000000, "Member 'FItemDataTableInfo::DataTable' has a wrong offset!");

// ScriptStruct Stigma.Config_ItemCategory
// 0x0098 (0x00A0 - 0x0008)
struct FConfig_ItemCategory final : public FTableRowBase
{
public:
	EItemCategory                                 Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E79[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SmallIcon;                                         // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ThemeColor;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_ItemCategory) == 0x000008, "Wrong alignment on FConfig_ItemCategory");
static_assert(sizeof(FConfig_ItemCategory) == 0x0000A0, "Wrong size on FConfig_ItemCategory");
static_assert(offsetof(FConfig_ItemCategory, Category) == 0x000008, "Member 'FConfig_ItemCategory::Category' has a wrong offset!");
static_assert(offsetof(FConfig_ItemCategory, DisplayName) == 0x000010, "Member 'FConfig_ItemCategory::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_ItemCategory, Desc) == 0x000028, "Member 'FConfig_ItemCategory::Desc' has a wrong offset!");
static_assert(offsetof(FConfig_ItemCategory, SmallIcon) == 0x000040, "Member 'FConfig_ItemCategory::SmallIcon' has a wrong offset!");
static_assert(offsetof(FConfig_ItemCategory, Icon) == 0x000068, "Member 'FConfig_ItemCategory::Icon' has a wrong offset!");
static_assert(offsetof(FConfig_ItemCategory, ThemeColor) == 0x000090, "Member 'FConfig_ItemCategory::ThemeColor' has a wrong offset!");

// ScriptStruct Stigma.ACK_MailDelete
// 0x0010 (0x0010 - 0x0000)
struct FACK_MailDelete final
{
public:
	TArray<int32>                                 MailIDN;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_MailDelete) == 0x000008, "Wrong alignment on FACK_MailDelete");
static_assert(sizeof(FACK_MailDelete) == 0x000010, "Wrong size on FACK_MailDelete");
static_assert(offsetof(FACK_MailDelete, MailIDN) == 0x000000, "Member 'FACK_MailDelete::MailIDN' has a wrong offset!");

// ScriptStruct Stigma.ItemFilterInfo
// 0x000C (0x000C - 0x0000)
struct FItemFilterInfo final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         SubCategory;                                       // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemGrade                                    Grade;                                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemEquipFilter                              EquipFilter;                                       // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7B[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FItemFilterInfo) == 0x000004, "Wrong alignment on FItemFilterInfo");
static_assert(sizeof(FItemFilterInfo) == 0x00000C, "Wrong size on FItemFilterInfo");
static_assert(offsetof(FItemFilterInfo, Category) == 0x000000, "Member 'FItemFilterInfo::Category' has a wrong offset!");
static_assert(offsetof(FItemFilterInfo, SubCategory) == 0x000004, "Member 'FItemFilterInfo::SubCategory' has a wrong offset!");
static_assert(offsetof(FItemFilterInfo, Grade) == 0x000008, "Member 'FItemFilterInfo::Grade' has a wrong offset!");
static_assert(offsetof(FItemFilterInfo, EquipFilter) == 0x000009, "Member 'FItemFilterInfo::EquipFilter' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Character
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Character final : public FItemID
{
};
static_assert(alignof(FItemID_Character) == 0x000008, "Wrong alignment on FItemID_Character");
static_assert(sizeof(FItemID_Character) == 0x000010, "Wrong size on FItemID_Character");

// ScriptStruct Stigma.ItemID_Stack
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Stack final : public FItemID
{
};
static_assert(alignof(FItemID_Stack) == 0x000008, "Wrong alignment on FItemID_Stack");
static_assert(sizeof(FItemID_Stack) == 0x000010, "Wrong size on FItemID_Stack");

// ScriptStruct Stigma.ItemID_RandomBox
// 0x0000 (0x0010 - 0x0010)
struct FItemID_RandomBox final : public FItemID
{
};
static_assert(alignof(FItemID_RandomBox) == 0x000008, "Wrong alignment on FItemID_RandomBox");
static_assert(sizeof(FItemID_RandomBox) == 0x000010, "Wrong size on FItemID_RandomBox");

// ScriptStruct Stigma.REQ_ReadRanking
// 0x0018 (0x0018 - 0x0000)
struct FREQ_ReadRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              SeasonID;                                          // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  RankingType;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7C[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadRanking) == 0x000008, "Wrong alignment on FREQ_ReadRanking");
static_assert(sizeof(FREQ_ReadRanking) == 0x000018, "Wrong size on FREQ_ReadRanking");
static_assert(offsetof(FREQ_ReadRanking, Start) == 0x000000, "Member 'FREQ_ReadRanking::Start' has a wrong offset!");
static_assert(offsetof(FREQ_ReadRanking, Count) == 0x000008, "Member 'FREQ_ReadRanking::Count' has a wrong offset!");
static_assert(offsetof(FREQ_ReadRanking, SeasonID) == 0x000010, "Member 'FREQ_ReadRanking::SeasonID' has a wrong offset!");
static_assert(offsetof(FREQ_ReadRanking, RankingType) == 0x000014, "Member 'FREQ_ReadRanking::RankingType' has a wrong offset!");

// ScriptStruct Stigma.ItemID_Announcer
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Announcer final : public FItemID
{
};
static_assert(alignof(FItemID_Announcer) == 0x000008, "Wrong alignment on FItemID_Announcer");
static_assert(sizeof(FItemID_Announcer) == 0x000010, "Wrong size on FItemID_Announcer");

// ScriptStruct Stigma.ItemID_Exp
// 0x0000 (0x0010 - 0x0010)
struct FItemID_Exp final : public FItemID
{
};
static_assert(alignof(FItemID_Exp) == 0x000008, "Wrong alignment on FItemID_Exp");
static_assert(sizeof(FItemID_Exp) == 0x000010, "Wrong size on FItemID_Exp");

// ScriptStruct Stigma.ItemIDRef_Gun_Charm
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Charm final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Charm) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Charm");
static_assert(sizeof(FItemIDRef_Gun_Charm) == 0x000010, "Wrong size on FItemIDRef_Gun_Charm");

// ScriptStruct Stigma.ItemIDRef_Gun_Sticker
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Gun_Sticker final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Gun_Sticker) == 0x000008, "Wrong alignment on FItemIDRef_Gun_Sticker");
static_assert(sizeof(FItemIDRef_Gun_Sticker) == 0x000010, "Wrong size on FItemIDRef_Gun_Sticker");

// ScriptStruct Stigma.REQ_PartyInvite
// 0x0008 (0x0008 - 0x0000)
struct FREQ_PartyInvite final
{
public:
	struct FUserID                                Friend;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_PartyInvite) == 0x000008, "Wrong alignment on FREQ_PartyInvite");
static_assert(sizeof(FREQ_PartyInvite) == 0x000008, "Wrong size on FREQ_PartyInvite");
static_assert(offsetof(FREQ_PartyInvite, Friend) == 0x000000, "Member 'FREQ_PartyInvite::Friend' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Stack
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Stack final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Stack) == 0x000008, "Wrong alignment on FItemIDRef_Stack");
static_assert(sizeof(FItemIDRef_Stack) == 0x000010, "Wrong size on FItemIDRef_Stack");

// ScriptStruct Stigma.CurrencyDef
// 0x0038 (0x0168 - 0x0130)
struct FCurrencyDef final : public FItemEntry
{
public:
	ECurrencyTypes                                Type;                                              // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7D[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 RichImageTableName;                                // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUI_EventShopPopup>         EventShopPopupClass;                               // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowWallet;                                      // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7E[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FGoodsID>                       QuickPurchaseGoodsList;                            // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyDef) == 0x000008, "Wrong alignment on FCurrencyDef");
static_assert(sizeof(FCurrencyDef) == 0x000168, "Wrong size on FCurrencyDef");
static_assert(offsetof(FCurrencyDef, Type) == 0x000130, "Member 'FCurrencyDef::Type' has a wrong offset!");
static_assert(offsetof(FCurrencyDef, RichImageTableName) == 0x000138, "Member 'FCurrencyDef::RichImageTableName' has a wrong offset!");
static_assert(offsetof(FCurrencyDef, EventShopPopupClass) == 0x000148, "Member 'FCurrencyDef::EventShopPopupClass' has a wrong offset!");
static_assert(offsetof(FCurrencyDef, IsShowWallet) == 0x000150, "Member 'FCurrencyDef::IsShowWallet' has a wrong offset!");
static_assert(offsetof(FCurrencyDef, QuickPurchaseGoodsList) == 0x000158, "Member 'FCurrencyDef::QuickPurchaseGoodsList' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_RandomBox
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_RandomBox final : public FItemID
{
};
static_assert(alignof(FItemIDRef_RandomBox) == 0x000008, "Wrong alignment on FItemIDRef_RandomBox");
static_assert(sizeof(FItemIDRef_RandomBox) == 0x000010, "Wrong size on FItemIDRef_RandomBox");

// ScriptStruct Stigma.ItemIDRef_Announcer
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Announcer final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Announcer) == 0x000008, "Wrong alignment on FItemIDRef_Announcer");
static_assert(sizeof(FItemIDRef_Announcer) == 0x000010, "Wrong size on FItemIDRef_Announcer");

// ScriptStruct Stigma.ItemIDRef_Goods
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Goods final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Goods) == 0x000008, "Wrong alignment on FItemIDRef_Goods");
static_assert(sizeof(FItemIDRef_Goods) == 0x000010, "Wrong size on FItemIDRef_Goods");

// ScriptStruct Stigma.REQ_PartyJoin
// 0x0008 (0x0008 - 0x0000)
struct FREQ_PartyJoin final
{
public:
	struct FUserID                                Friend;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_PartyJoin) == 0x000008, "Wrong alignment on FREQ_PartyJoin");
static_assert(sizeof(FREQ_PartyJoin) == 0x000008, "Wrong size on FREQ_PartyJoin");
static_assert(offsetof(FREQ_PartyJoin, Friend) == 0x000000, "Member 'FREQ_PartyJoin::Friend' has a wrong offset!");

// ScriptStruct Stigma.ItemIDRef_Recruit
// 0x0000 (0x0010 - 0x0010)
struct FItemIDRef_Recruit final : public FItemID
{
};
static_assert(alignof(FItemIDRef_Recruit) == 0x000008, "Wrong alignment on FItemIDRef_Recruit");
static_assert(sizeof(FItemIDRef_Recruit) == 0x000010, "Wrong size on FItemIDRef_Recruit");

// ScriptStruct Stigma.BattleInviteNotify
// 0x0020 (0x0020 - 0x0000)
struct FBattleInviteNotify final
{
public:
	bool                                          IsCustomGame;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 BattleIDS;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserProfile*                           Inviter;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleInviteNotify) == 0x000008, "Wrong alignment on FBattleInviteNotify");
static_assert(sizeof(FBattleInviteNotify) == 0x000020, "Wrong size on FBattleInviteNotify");
static_assert(offsetof(FBattleInviteNotify, IsCustomGame) == 0x000000, "Member 'FBattleInviteNotify::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FBattleInviteNotify, BattleIDS) == 0x000008, "Member 'FBattleInviteNotify::BattleIDS' has a wrong offset!");
static_assert(offsetof(FBattleInviteNotify, Inviter) == 0x000018, "Member 'FBattleInviteNotify::Inviter' has a wrong offset!");

// ScriptStruct Stigma.InvenItemList
// 0x0010 (0x0010 - 0x0000)
struct FInvenItemList final
{
public:
	TArray<class UInvenItem*>                     Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInvenItemList) == 0x000008, "Wrong alignment on FInvenItemList");
static_assert(sizeof(FInvenItemList) == 0x000010, "Wrong size on FInvenItemList");
static_assert(offsetof(FInvenItemList, Items) == 0x000000, "Member 'FInvenItemList::Items' has a wrong offset!");

// ScriptStruct Stigma.InvenItem_LocalSaveKey
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FInvenItem_LocalSaveKey final
{
public:
	uint8                                         Pad_1E80[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FInvenItem_LocalSaveKey) == 0x000008, "Wrong alignment on FInvenItem_LocalSaveKey");
static_assert(sizeof(FInvenItem_LocalSaveKey) == 0x000020, "Wrong size on FInvenItem_LocalSaveKey");

// ScriptStruct Stigma.InvenItem_LocalSaveValue
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FInvenItem_LocalSaveValue final
{
public:
	uint8                                         Pad_1E81[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FInvenItem_LocalSaveValue) == 0x000008, "Wrong alignment on FInvenItem_LocalSaveValue");
static_assert(sizeof(FInvenItem_LocalSaveValue) == 0x000008, "Wrong size on FInvenItem_LocalSaveValue");

// ScriptStruct Stigma.REQ_PartyGameModeUpdate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_PartyGameModeUpdate final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E82[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_PartyGameModeUpdate) == 0x000008, "Wrong alignment on FREQ_PartyGameModeUpdate");
static_assert(sizeof(FREQ_PartyGameModeUpdate) == 0x000010, "Wrong size on FREQ_PartyGameModeUpdate");
static_assert(offsetof(FREQ_PartyGameModeUpdate, PartyIDN) == 0x000000, "Member 'FREQ_PartyGameModeUpdate::PartyIDN' has a wrong offset!");
static_assert(offsetof(FREQ_PartyGameModeUpdate, GameMode) == 0x000008, "Member 'FREQ_PartyGameModeUpdate::GameMode' has a wrong offset!");

// ScriptStruct Stigma.DuplicateActionInfo
// 0x0002 (0x0002 - 0x0000)
struct FDuplicateActionInfo final
{
public:
	EInputAction                                  InputActionType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputSlotType                                InputSlotType;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuplicateActionInfo) == 0x000001, "Wrong alignment on FDuplicateActionInfo");
static_assert(sizeof(FDuplicateActionInfo) == 0x000002, "Wrong size on FDuplicateActionInfo");
static_assert(offsetof(FDuplicateActionInfo, InputActionType) == 0x000000, "Member 'FDuplicateActionInfo::InputActionType' has a wrong offset!");
static_assert(offsetof(FDuplicateActionInfo, InputSlotType) == 0x000001, "Member 'FDuplicateActionInfo::InputSlotType' has a wrong offset!");

// ScriptStruct Stigma.BC_PartyInviteOrJoin
// 0x0028 (0x0028 - 0x0000)
struct FBC_PartyInviteOrJoin final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                LeaderIDN;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserPlayingAt                                Status;                                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E83[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FUserID>                        Member;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_PartyInviteOrJoin) == 0x000008, "Wrong alignment on FBC_PartyInviteOrJoin");
static_assert(sizeof(FBC_PartyInviteOrJoin) == 0x000028, "Wrong size on FBC_PartyInviteOrJoin");
static_assert(offsetof(FBC_PartyInviteOrJoin, PartyIDN) == 0x000000, "Member 'FBC_PartyInviteOrJoin::PartyIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyInviteOrJoin, LeaderIDN) == 0x000008, "Member 'FBC_PartyInviteOrJoin::LeaderIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyInviteOrJoin, GameMode) == 0x000010, "Member 'FBC_PartyInviteOrJoin::GameMode' has a wrong offset!");
static_assert(offsetof(FBC_PartyInviteOrJoin, Status) == 0x000011, "Member 'FBC_PartyInviteOrJoin::Status' has a wrong offset!");
static_assert(offsetof(FBC_PartyInviteOrJoin, Member) == 0x000018, "Member 'FBC_PartyInviteOrJoin::Member' has a wrong offset!");

// ScriptStruct Stigma.InputMappingContextConfig
// 0x0010 (0x0010 - 0x0000)
struct FInputMappingContextConfig final
{
public:
	class UInputMappingContext*                   IMC;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIMCType                                      IMC_Type;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E84[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputMappingContextConfig) == 0x000008, "Wrong alignment on FInputMappingContextConfig");
static_assert(sizeof(FInputMappingContextConfig) == 0x000010, "Wrong size on FInputMappingContextConfig");
static_assert(offsetof(FInputMappingContextConfig, IMC) == 0x000000, "Member 'FInputMappingContextConfig::IMC' has a wrong offset!");
static_assert(offsetof(FInputMappingContextConfig, IMC_Type) == 0x000008, "Member 'FInputMappingContextConfig::IMC_Type' has a wrong offset!");
static_assert(offsetof(FInputMappingContextConfig, Priority) == 0x00000C, "Member 'FInputMappingContextConfig::Priority' has a wrong offset!");

// ScriptStruct Stigma.KeyMappingsMap
// 0x0050 (0x0050 - 0x0000)
struct FKeyMappingsMap final
{
public:
	TMap<EInputAction, struct FKeyMappings>       _KeyMappings_Map;                                  // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyMappingsMap) == 0x000008, "Wrong alignment on FKeyMappingsMap");
static_assert(sizeof(FKeyMappingsMap) == 0x000050, "Wrong size on FKeyMappingsMap");
static_assert(offsetof(FKeyMappingsMap, _KeyMappings_Map) == 0x000000, "Member 'FKeyMappingsMap::_KeyMappings_Map' has a wrong offset!");

// ScriptStruct Stigma.REQ_GM_StalkUser
// 0x0008 (0x0008 - 0x0000)
struct FREQ_GM_StalkUser final
{
public:
	struct FUserID                                IDN;                                               // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_GM_StalkUser) == 0x000008, "Wrong alignment on FREQ_GM_StalkUser");
static_assert(sizeof(FREQ_GM_StalkUser) == 0x000008, "Wrong size on FREQ_GM_StalkUser");
static_assert(offsetof(FREQ_GM_StalkUser, IDN) == 0x000000, "Member 'FREQ_GM_StalkUser::IDN' has a wrong offset!");

// ScriptStruct Stigma.KeyDisplayTextDefine
// 0x0020 (0x0028 - 0x0008)
struct FKeyDisplayTextDefine final : public FTableRowBase
{
public:
	class FName                                   KeyName;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyDisplayTextDefine) == 0x000008, "Wrong alignment on FKeyDisplayTextDefine");
static_assert(sizeof(FKeyDisplayTextDefine) == 0x000028, "Wrong size on FKeyDisplayTextDefine");
static_assert(offsetof(FKeyDisplayTextDefine, KeyName) == 0x000008, "Member 'FKeyDisplayTextDefine::KeyName' has a wrong offset!");
static_assert(offsetof(FKeyDisplayTextDefine, DisplayText) == 0x000010, "Member 'FKeyDisplayTextDefine::DisplayText' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyJoin
// 0x0018 (0x0018 - 0x0000)
struct FACK_PartyJoin final
{
public:
	struct FUserID                                ToIDN;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToNick;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_PartyJoin) == 0x000008, "Wrong alignment on FACK_PartyJoin");
static_assert(sizeof(FACK_PartyJoin) == 0x000018, "Wrong size on FACK_PartyJoin");
static_assert(offsetof(FACK_PartyJoin, ToIDN) == 0x000000, "Member 'FACK_PartyJoin::ToIDN' has a wrong offset!");
static_assert(offsetof(FACK_PartyJoin, ToNick) == 0x000008, "Member 'FACK_PartyJoin::ToNick' has a wrong offset!");

// ScriptStruct Stigma.KillStreakDefine
// 0x00D8 (0x00E0 - 0x0008)
struct FKillStreakDefine final : public FTableRowBase
{
public:
	EKillStreak                                   KillStreakType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E85[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSet<EGameMode>                               AvailableGameModes;                                // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EItemGrade                                    Grade;                                             // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E86[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ExpScore;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiamondScore;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ToolTip;                                           // 0x0088(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UHUD_KillStreakWidget>      HUDWidgetClass;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Killer;                                            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharaBase*                             Victim;                                            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillStreakDefine) == 0x000008, "Wrong alignment on FKillStreakDefine");
static_assert(sizeof(FKillStreakDefine) == 0x0000E0, "Wrong size on FKillStreakDefine");
static_assert(offsetof(FKillStreakDefine, KillStreakType) == 0x000008, "Member 'FKillStreakDefine::KillStreakType' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, AvailableGameModes) == 0x000010, "Member 'FKillStreakDefine::AvailableGameModes' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, Grade) == 0x000060, "Member 'FKillStreakDefine::Grade' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, ExpScore) == 0x000064, "Member 'FKillStreakDefine::ExpScore' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, DiamondScore) == 0x000068, "Member 'FKillStreakDefine::DiamondScore' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, Priority) == 0x00006C, "Member 'FKillStreakDefine::Priority' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, DisplayName) == 0x000070, "Member 'FKillStreakDefine::DisplayName' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, ToolTip) == 0x000088, "Member 'FKillStreakDefine::ToolTip' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, HUDWidgetClass) == 0x0000A0, "Member 'FKillStreakDefine::HUDWidgetClass' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, Icon) == 0x0000A8, "Member 'FKillStreakDefine::Icon' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, Killer) == 0x0000D0, "Member 'FKillStreakDefine::Killer' has a wrong offset!");
static_assert(offsetof(FKillStreakDefine, Victim) == 0x0000D8, "Member 'FKillStreakDefine::Victim' has a wrong offset!");

// ScriptStruct Stigma.KillStreakContext
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FKillStreakContext final
{
public:
	uint8                                         Pad_1E87[0x90];                                    // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FKillStreakContext) == 0x000008, "Wrong alignment on FKillStreakContext");
static_assert(sizeof(FKillStreakContext) == 0x000090, "Wrong size on FKillStreakContext");

// ScriptStruct Stigma.REQ_ChallengeResult
// 0x0028 (0x0028 - 0x0000)
struct FREQ_ChallengeResult final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartRound;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinalRound;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlackCoin;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Armor;                                             // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CouponUsed;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E88[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ChallengeResult) == 0x000008, "Wrong alignment on FREQ_ChallengeResult");
static_assert(sizeof(FREQ_ChallengeResult) == 0x000028, "Wrong size on FREQ_ChallengeResult");
static_assert(offsetof(FREQ_ChallengeResult, UserIDN) == 0x000000, "Member 'FREQ_ChallengeResult::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, Score) == 0x000008, "Member 'FREQ_ChallengeResult::Score' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, StartRound) == 0x00000C, "Member 'FREQ_ChallengeResult::StartRound' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, FinalRound) == 0x000010, "Member 'FREQ_ChallengeResult::FinalRound' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, BlackCoin) == 0x000014, "Member 'FREQ_ChallengeResult::BlackCoin' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, Gold) == 0x000018, "Member 'FREQ_ChallengeResult::Gold' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, Armor) == 0x00001C, "Member 'FREQ_ChallengeResult::Armor' has a wrong offset!");
static_assert(offsetof(FREQ_ChallengeResult, CouponUsed) == 0x000020, "Member 'FREQ_ChallengeResult::CouponUsed' has a wrong offset!");

// ScriptStruct Stigma.LemmingsGameWave
// 0x0010 (0x0010 - 0x0000)
struct FLemmingsGameWave final
{
public:
	TArray<struct FLemmingsGameRush>              Rushes;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLemmingsGameWave) == 0x000008, "Wrong alignment on FLemmingsGameWave");
static_assert(sizeof(FLemmingsGameWave) == 0x000010, "Wrong size on FLemmingsGameWave");
static_assert(offsetof(FLemmingsGameWave, Rushes) == 0x000000, "Member 'FLemmingsGameWave::Rushes' has a wrong offset!");

// ScriptStruct Stigma.LemmingsGameState
// 0x001C (0x001C - 0x0000)
struct FLemmingsGameState final
{
public:
	ELemmingsGamePhase                            Phase;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E89[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         TotalWaveCount;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RushIndex;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LifeCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeftLemmingCount;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLemmingsGameState) == 0x000004, "Wrong alignment on FLemmingsGameState");
static_assert(sizeof(FLemmingsGameState) == 0x00001C, "Wrong size on FLemmingsGameState");
static_assert(offsetof(FLemmingsGameState, Phase) == 0x000000, "Member 'FLemmingsGameState::Phase' has a wrong offset!");
static_assert(offsetof(FLemmingsGameState, TotalWaveCount) == 0x000004, "Member 'FLemmingsGameState::TotalWaveCount' has a wrong offset!");
static_assert(offsetof(FLemmingsGameState, WaveIndex) == 0x000008, "Member 'FLemmingsGameState::WaveIndex' has a wrong offset!");
static_assert(offsetof(FLemmingsGameState, RushIndex) == 0x00000C, "Member 'FLemmingsGameState::RushIndex' has a wrong offset!");
static_assert(offsetof(FLemmingsGameState, LifeCount) == 0x000010, "Member 'FLemmingsGameState::LifeCount' has a wrong offset!");
static_assert(offsetof(FLemmingsGameState, Point) == 0x000014, "Member 'FLemmingsGameState::Point' has a wrong offset!");
static_assert(offsetof(FLemmingsGameState, LeftLemmingCount) == 0x000018, "Member 'FLemmingsGameState::LeftLemmingCount' has a wrong offset!");

// ScriptStruct Stigma.BC_EventPageUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_EventPageUpdate final
{
public:
	TArray<struct FNetEventPage>                  EPs;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_EventPageUpdate) == 0x000008, "Wrong alignment on FBC_EventPageUpdate");
static_assert(sizeof(FBC_EventPageUpdate) == 0x000010, "Wrong size on FBC_EventPageUpdate");
static_assert(offsetof(FBC_EventPageUpdate, EPs) == 0x000000, "Member 'FBC_EventPageUpdate::EPs' has a wrong offset!");

// ScriptStruct Stigma.LevelEntry
// 0x0030 (0x0038 - 0x0008)
struct FLevelEntry final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelStartExp;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinExpPerBattle;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FReward>                        LevelRewards;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ContentUnlockerIDs;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelEntry) == 0x000008, "Wrong alignment on FLevelEntry");
static_assert(sizeof(FLevelEntry) == 0x000038, "Wrong size on FLevelEntry");
static_assert(offsetof(FLevelEntry, Level) == 0x000008, "Member 'FLevelEntry::Level' has a wrong offset!");
static_assert(offsetof(FLevelEntry, LevelStartExp) == 0x00000C, "Member 'FLevelEntry::LevelStartExp' has a wrong offset!");
static_assert(offsetof(FLevelEntry, MinExpPerBattle) == 0x000010, "Member 'FLevelEntry::MinExpPerBattle' has a wrong offset!");
static_assert(offsetof(FLevelEntry, LevelRewards) == 0x000018, "Member 'FLevelEntry::LevelRewards' has a wrong offset!");
static_assert(offsetof(FLevelEntry, ContentUnlockerIDs) == 0x000028, "Member 'FLevelEntry::ContentUnlockerIDs' has a wrong offset!");

// ScriptStruct Stigma.CategoryGoodsMap
// 0x0050 (0x0050 - 0x0000)
struct FCategoryGoodsMap final
{
public:
	TMap<struct FItemID, class UGoodsObject*>     CategoryGoodsMap;                                  // 0x0000(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCategoryGoodsMap) == 0x000008, "Wrong alignment on FCategoryGoodsMap");
static_assert(sizeof(FCategoryGoodsMap) == 0x000050, "Wrong size on FCategoryGoodsMap");
static_assert(offsetof(FCategoryGoodsMap, CategoryGoodsMap) == 0x000000, "Member 'FCategoryGoodsMap::CategoryGoodsMap' has a wrong offset!");

// ScriptStruct Stigma.LogPack_StigmaObject
// 0x0008 (0x0038 - 0x0030)
struct FLogPack_StigmaObject final : public FLogPack_ObjectEntry
{
public:
	ECharaType                                    CharaType;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8B[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FLogPack_StigmaObject) == 0x000008, "Wrong alignment on FLogPack_StigmaObject");
static_assert(sizeof(FLogPack_StigmaObject) == 0x000038, "Wrong size on FLogPack_StigmaObject");
static_assert(offsetof(FLogPack_StigmaObject, CharaType) == 0x000030, "Member 'FLogPack_StigmaObject::CharaType' has a wrong offset!");

// ScriptStruct Stigma.BC_BattlePassUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_BattlePassUpdate final
{
public:
	TArray<struct FNetBattlePass>                 Pass;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_BattlePassUpdate) == 0x000008, "Wrong alignment on FBC_BattlePassUpdate");
static_assert(sizeof(FBC_BattlePassUpdate) == 0x000010, "Wrong size on FBC_BattlePassUpdate");
static_assert(offsetof(FBC_BattlePassUpdate, Pass) == 0x000000, "Member 'FBC_BattlePassUpdate::Pass' has a wrong offset!");

// ScriptStruct Stigma.MapEntry
// 0x0150 (0x0158 - 0x0008)
struct FMapEntry final : public FTableRowBase
{
public:
	TSet<EGameMode>                               SupportedMode;                                     // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CanAIMatch;                                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8C[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MapFile;                                           // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigIcon;                                           // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LoadingImage;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LevelStretegy;                                     // 0x0118(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Minimap;                                           // 0x0130(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapEntry) == 0x000008, "Wrong alignment on FMapEntry");
static_assert(sizeof(FMapEntry) == 0x000158, "Wrong size on FMapEntry");
static_assert(offsetof(FMapEntry, SupportedMode) == 0x000008, "Member 'FMapEntry::SupportedMode' has a wrong offset!");
static_assert(offsetof(FMapEntry, CanAIMatch) == 0x000058, "Member 'FMapEntry::CanAIMatch' has a wrong offset!");
static_assert(offsetof(FMapEntry, DisplayName) == 0x000060, "Member 'FMapEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FMapEntry, MapFile) == 0x000078, "Member 'FMapEntry::MapFile' has a wrong offset!");
static_assert(offsetof(FMapEntry, Icon) == 0x0000A0, "Member 'FMapEntry::Icon' has a wrong offset!");
static_assert(offsetof(FMapEntry, BigIcon) == 0x0000C8, "Member 'FMapEntry::BigIcon' has a wrong offset!");
static_assert(offsetof(FMapEntry, LoadingImage) == 0x0000F0, "Member 'FMapEntry::LoadingImage' has a wrong offset!");
static_assert(offsetof(FMapEntry, LevelStretegy) == 0x000118, "Member 'FMapEntry::LevelStretegy' has a wrong offset!");
static_assert(offsetof(FMapEntry, Minimap) == 0x000130, "Member 'FMapEntry::Minimap' has a wrong offset!");

// ScriptStruct Stigma.MapTable
// 0x0020 (0x0020 - 0x0000)
struct FMapTable final
{
public:
	class UWorld*                                 _World;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ULevelStreaming*>                _Table;                                            // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8D[0x8];                                     // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMapTable) == 0x000008, "Wrong alignment on FMapTable");
static_assert(sizeof(FMapTable) == 0x000020, "Wrong size on FMapTable");
static_assert(offsetof(FMapTable, _World) == 0x000000, "Member 'FMapTable::_World' has a wrong offset!");
static_assert(offsetof(FMapTable, _Table) == 0x000008, "Member 'FMapTable::_Table' has a wrong offset!");

// ScriptStruct Stigma.MatchMakingInfo
// 0x0020 (0x0020 - 0x0000)
struct FMatchMakingInfo final
{
public:
	class FString                                 PublishID;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDediID                                DediID;                                            // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchMakingInfo) == 0x000008, "Wrong alignment on FMatchMakingInfo");
static_assert(sizeof(FMatchMakingInfo) == 0x000020, "Wrong size on FMatchMakingInfo");
static_assert(offsetof(FMatchMakingInfo, PublishID) == 0x000000, "Member 'FMatchMakingInfo::PublishID' has a wrong offset!");
static_assert(offsetof(FMatchMakingInfo, DediID) == 0x000010, "Member 'FMatchMakingInfo::DediID' has a wrong offset!");

// ScriptStruct Stigma.MatchContext
// 0x0098 (0x0098 - 0x0000)
struct FMatchContext final
{
public:
	EFindMatchStatus                              Status;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatchMakingInfo                       Match;                                             // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8F[0x58];                                    // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMatchContext) == 0x000008, "Wrong alignment on FMatchContext");
static_assert(sizeof(FMatchContext) == 0x000098, "Wrong size on FMatchContext");
static_assert(offsetof(FMatchContext, Status) == 0x000000, "Member 'FMatchContext::Status' has a wrong offset!");
static_assert(offsetof(FMatchContext, Match) == 0x000008, "Member 'FMatchContext::Match' has a wrong offset!");
static_assert(offsetof(FMatchContext, ErrorMessage) == 0x000028, "Member 'FMatchContext::ErrorMessage' has a wrong offset!");

// ScriptStruct Stigma.REQ_BattlePassLevelBuy
// 0x0028 (0x0028 - 0x0000)
struct FREQ_BattlePassLevelBuy final
{
public:
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E90[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Currency                       CID;                                               // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_BattlePassLevelBuy) == 0x000008, "Wrong alignment on FREQ_BattlePassLevelBuy");
static_assert(sizeof(FREQ_BattlePassLevelBuy) == 0x000028, "Wrong size on FREQ_BattlePassLevelBuy");
static_assert(offsetof(FREQ_BattlePassLevelBuy, PassIDN) == 0x000000, "Member 'FREQ_BattlePassLevelBuy::PassIDN' has a wrong offset!");
static_assert(offsetof(FREQ_BattlePassLevelBuy, Level) == 0x000010, "Member 'FREQ_BattlePassLevelBuy::Level' has a wrong offset!");
static_assert(offsetof(FREQ_BattlePassLevelBuy, CID) == 0x000018, "Member 'FREQ_BattlePassLevelBuy::CID' has a wrong offset!");

// ScriptStruct Stigma.Config_Region
// 0x0038 (0x0040 - 0x0008)
struct FConfig_Region final : public FTableRowBase
{
public:
	class FString                                 Code;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PingURL;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Region) == 0x000008, "Wrong alignment on FConfig_Region");
static_assert(sizeof(FConfig_Region) == 0x000040, "Wrong size on FConfig_Region");
static_assert(offsetof(FConfig_Region, Code) == 0x000008, "Member 'FConfig_Region::Code' has a wrong offset!");
static_assert(offsetof(FConfig_Region, DisplayName) == 0x000018, "Member 'FConfig_Region::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_Region, PingURL) == 0x000030, "Member 'FConfig_Region::PingURL' has a wrong offset!");

// ScriptStruct Stigma.CountryToRegion
// 0x0020 (0x0028 - 0x0008)
struct FCountryToRegion final : public FTableRowBase
{
public:
	class FString                                 ISO2;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCountryToRegion) == 0x000008, "Wrong alignment on FCountryToRegion");
static_assert(sizeof(FCountryToRegion) == 0x000028, "Wrong size on FCountryToRegion");
static_assert(offsetof(FCountryToRegion, ISO2) == 0x000008, "Member 'FCountryToRegion::ISO2' has a wrong offset!");
static_assert(offsetof(FCountryToRegion, Region) == 0x000018, "Member 'FCountryToRegion::Region' has a wrong offset!");

// ScriptStruct Stigma.Region
// 0x0018 (0x0018 - 0x0000)
struct FRegion final
{
public:
	class FString                                 RegionCode;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Selected;                                          // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E91[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRegion) == 0x000008, "Wrong alignment on FRegion");
static_assert(sizeof(FRegion) == 0x000018, "Wrong size on FRegion");
static_assert(offsetof(FRegion, RegionCode) == 0x000000, "Member 'FRegion::RegionCode' has a wrong offset!");
static_assert(offsetof(FRegion, Ping) == 0x000010, "Member 'FRegion::Ping' has a wrong offset!");
static_assert(offsetof(FRegion, Selected) == 0x000014, "Member 'FRegion::Selected' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadGoods
// 0x0001 (0x0001 - 0x0000)
struct FREQ_ReadGoods final
{
public:
	EGoodsCategory                                Category;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ReadGoods) == 0x000001, "Wrong alignment on FREQ_ReadGoods");
static_assert(sizeof(FREQ_ReadGoods) == 0x000001, "Wrong size on FREQ_ReadGoods");
static_assert(offsetof(FREQ_ReadGoods, Category) == 0x000000, "Member 'FREQ_ReadGoods::Category' has a wrong offset!");

// ScriptStruct Stigma.BattlePlayerSetting
// 0x0020 (0x0020 - 0x0000)
struct FBattlePlayerSetting final
{
public:
	struct FNetID                                 _NetID;                                            // 0x0000(0x0002)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E92[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 _UserID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    _CharaType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E93[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBattlePlayerSetting) == 0x000008, "Wrong alignment on FBattlePlayerSetting");
static_assert(sizeof(FBattlePlayerSetting) == 0x000020, "Wrong size on FBattlePlayerSetting");
static_assert(offsetof(FBattlePlayerSetting, _NetID) == 0x000000, "Member 'FBattlePlayerSetting::_NetID' has a wrong offset!");
static_assert(offsetof(FBattlePlayerSetting, _UserID) == 0x000008, "Member 'FBattlePlayerSetting::_UserID' has a wrong offset!");
static_assert(offsetof(FBattlePlayerSetting, _CharaType) == 0x000018, "Member 'FBattlePlayerSetting::_CharaType' has a wrong offset!");

// ScriptStruct Stigma.BriefPlayer
// 0x0010 (0x0010 - 0x0000)
struct FBriefPlayer final
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E94[0x8];                                     // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBriefPlayer) == 0x000008, "Wrong alignment on FBriefPlayer");
static_assert(sizeof(FBriefPlayer) == 0x000010, "Wrong size on FBriefPlayer");
static_assert(offsetof(FBriefPlayer, UserID) == 0x000000, "Member 'FBriefPlayer::UserID' has a wrong offset!");

// ScriptStruct Stigma.Team
// 0x0018 (0x0018 - 0x0000)
struct FTeam final
{
public:
	ETeams                                        TeamID;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E95[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FBriefPlayer>                   Players;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeam) == 0x000008, "Wrong alignment on FTeam");
static_assert(sizeof(FTeam) == 0x000018, "Wrong size on FTeam");
static_assert(offsetof(FTeam, TeamID) == 0x000000, "Member 'FTeam::TeamID' has a wrong offset!");
static_assert(offsetof(FTeam, Players) == 0x000008, "Member 'FTeam::Players' has a wrong offset!");

// ScriptStruct Stigma.REQ_LoadAllInvenItems
// 0x0001 (0x0001 - 0x0000)
struct FREQ_LoadAllInvenItems final
{
public:
	uint8                                         Pad_1E96[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_LoadAllInvenItems) == 0x000001, "Wrong alignment on FREQ_LoadAllInvenItems");
static_assert(sizeof(FREQ_LoadAllInvenItems) == 0x000001, "Wrong size on FREQ_LoadAllInvenItems");

// ScriptStruct Stigma.ACK_PublicIP
// 0x0010 (0x0010 - 0x0000)
struct FACK_PublicIP final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_PublicIP) == 0x000008, "Wrong alignment on FACK_PublicIP");
static_assert(sizeof(FACK_PublicIP) == 0x000010, "Wrong size on FACK_PublicIP");
static_assert(offsetof(FACK_PublicIP, Ip) == 0x000000, "Member 'FACK_PublicIP::Ip' has a wrong offset!");

// ScriptStruct Stigma.ConfirmResponse
// 0x0001 (0x0001 - 0x0000)
struct FConfirmResponse final
{
public:
	EConfirmResponse                              Respnose_type;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfirmResponse) == 0x000001, "Wrong alignment on FConfirmResponse");
static_assert(sizeof(FConfirmResponse) == 0x000001, "Wrong size on FConfirmResponse");
static_assert(offsetof(FConfirmResponse, Respnose_type) == 0x000000, "Member 'FConfirmResponse::Respnose_type' has a wrong offset!");

// ScriptStruct Stigma.MaterialDecalEntry
// 0x0030 (0x0030 - 0x0000)
struct FMaterialDecalEntry final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialDecalEntry) == 0x000008, "Wrong alignment on FMaterialDecalEntry");
static_assert(sizeof(FMaterialDecalEntry) == 0x000030, "Wrong size on FMaterialDecalEntry");
static_assert(offsetof(FMaterialDecalEntry, ParamName) == 0x000000, "Member 'FMaterialDecalEntry::ParamName' has a wrong offset!");
static_assert(offsetof(FMaterialDecalEntry, Texture) == 0x000008, "Member 'FMaterialDecalEntry::Texture' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadGunSpec
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadGunSpec final
{
public:
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadGunSpec) == 0x000008, "Wrong alignment on FACK_ReadGunSpec");
static_assert(sizeof(FACK_ReadGunSpec) == 0x000010, "Wrong size on FACK_ReadGunSpec");
static_assert(offsetof(FACK_ReadGunSpec, GunSpec) == 0x000000, "Member 'FACK_ReadGunSpec::GunSpec' has a wrong offset!");

// ScriptStruct Stigma.MeleeAttackPointDefine
// 0x0008 (0x0010 - 0x0008)
struct FMeleeAttackPointDefine final : public FTableRowBase
{
public:
	EMeleeAttackPoint                             AttackPoint;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        StartBone;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBones                                        EndBone;                                           // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E97[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeleeAttackPointDefine) == 0x000008, "Wrong alignment on FMeleeAttackPointDefine");
static_assert(sizeof(FMeleeAttackPointDefine) == 0x000010, "Wrong size on FMeleeAttackPointDefine");
static_assert(offsetof(FMeleeAttackPointDefine, AttackPoint) == 0x000008, "Member 'FMeleeAttackPointDefine::AttackPoint' has a wrong offset!");
static_assert(offsetof(FMeleeAttackPointDefine, StartBone) == 0x000009, "Member 'FMeleeAttackPointDefine::StartBone' has a wrong offset!");
static_assert(offsetof(FMeleeAttackPointDefine, EndBone) == 0x00000A, "Member 'FMeleeAttackPointDefine::EndBone' has a wrong offset!");
static_assert(offsetof(FMeleeAttackPointDefine, Radius) == 0x00000C, "Member 'FMeleeAttackPointDefine::Radius' has a wrong offset!");

// ScriptStruct Stigma.AttackTypeDefine
// 0x0010 (0x0018 - 0x0008)
struct FAttackTypeDefine final : public FTableRowBase
{
public:
	EAttackType                                   AttackType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E98[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BasePrivilege;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrivilegeForAttackBones;                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Blockable;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForward;                                       // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E99[0x5];                                     // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAttackTypeDefine) == 0x000008, "Wrong alignment on FAttackTypeDefine");
static_assert(sizeof(FAttackTypeDefine) == 0x000018, "Wrong size on FAttackTypeDefine");
static_assert(offsetof(FAttackTypeDefine, AttackType) == 0x000008, "Member 'FAttackTypeDefine::AttackType' has a wrong offset!");
static_assert(offsetof(FAttackTypeDefine, BasePrivilege) == 0x00000C, "Member 'FAttackTypeDefine::BasePrivilege' has a wrong offset!");
static_assert(offsetof(FAttackTypeDefine, PrivilegeForAttackBones) == 0x000010, "Member 'FAttackTypeDefine::PrivilegeForAttackBones' has a wrong offset!");
static_assert(offsetof(FAttackTypeDefine, Blockable) == 0x000011, "Member 'FAttackTypeDefine::Blockable' has a wrong offset!");
static_assert(offsetof(FAttackTypeDefine, OnlyForward) == 0x000012, "Member 'FAttackTypeDefine::OnlyForward' has a wrong offset!");

// ScriptStruct Stigma.MissionConditionInfo
// 0x0020 (0x0020 - 0x0000)
struct FMissionConditionInfo final
{
public:
	EMissionConditionType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 SubType;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9B[0x8];                                     // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMissionConditionInfo) == 0x000008, "Wrong alignment on FMissionConditionInfo");
static_assert(sizeof(FMissionConditionInfo) == 0x000020, "Wrong size on FMissionConditionInfo");
static_assert(offsetof(FMissionConditionInfo, Type) == 0x000000, "Member 'FMissionConditionInfo::Type' has a wrong offset!");
static_assert(offsetof(FMissionConditionInfo, SubType) == 0x000008, "Member 'FMissionConditionInfo::SubType' has a wrong offset!");

// ScriptStruct Stigma.RewardMissionID
// 0x0018 (0x0018 - 0x0000)
struct FRewardMissionID final
{
public:
	uint8                                         Idx;                                               // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        MIID;                                              // 0x0008(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardMissionID) == 0x000008, "Wrong alignment on FRewardMissionID");
static_assert(sizeof(FRewardMissionID) == 0x000018, "Wrong size on FRewardMissionID");
static_assert(offsetof(FRewardMissionID, Idx) == 0x000000, "Member 'FRewardMissionID::Idx' has a wrong offset!");
static_assert(offsetof(FRewardMissionID, MIID) == 0x000008, "Member 'FRewardMissionID::MIID' has a wrong offset!");

// ScriptStruct Stigma.REQ_ActivateFunction
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ActivateFunction final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ActivateFunction) == 0x000008, "Wrong alignment on FREQ_ActivateFunction");
static_assert(sizeof(FREQ_ActivateFunction) == 0x000010, "Wrong size on FREQ_ActivateFunction");
static_assert(offsetof(FREQ_ActivateFunction, ItemIDN) == 0x000000, "Member 'FREQ_ActivateFunction::ItemIDN' has a wrong offset!");

// ScriptStruct Stigma.MissionDefine
// 0x0070 (0x01A0 - 0x0130)
struct FMissionDefine : public FItemEntry
{
public:
	int32                                         TargetCount;                                       // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatCount;                                       // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionJudger                                Judger;                                            // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9D[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FMissionConditionInfo>          Conditions;                                        // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMin;                                          // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMax;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x015C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoGrant;                                         // 0x0164(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9E[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                Reward;                                            // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   GoToWidgetID;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         GoToWidgetDetailerParams;                          // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ContentUnlockerIDs;                                // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionDefine) == 0x000008, "Wrong alignment on FMissionDefine");
static_assert(sizeof(FMissionDefine) == 0x0001A0, "Wrong size on FMissionDefine");
static_assert(offsetof(FMissionDefine, TargetCount) == 0x000130, "Member 'FMissionDefine::TargetCount' has a wrong offset!");
static_assert(offsetof(FMissionDefine, RepeatCount) == 0x000134, "Member 'FMissionDefine::RepeatCount' has a wrong offset!");
static_assert(offsetof(FMissionDefine, Judger) == 0x000138, "Member 'FMissionDefine::Judger' has a wrong offset!");
static_assert(offsetof(FMissionDefine, Conditions) == 0x000140, "Member 'FMissionDefine::Conditions' has a wrong offset!");
static_assert(offsetof(FMissionDefine, Slot) == 0x000150, "Member 'FMissionDefine::Slot' has a wrong offset!");
static_assert(offsetof(FMissionDefine, LevelMin) == 0x000154, "Member 'FMissionDefine::LevelMin' has a wrong offset!");
static_assert(offsetof(FMissionDefine, LevelMax) == 0x000158, "Member 'FMissionDefine::LevelMax' has a wrong offset!");
static_assert(offsetof(FMissionDefine, GroupName) == 0x00015C, "Member 'FMissionDefine::GroupName' has a wrong offset!");
static_assert(offsetof(FMissionDefine, AutoGrant) == 0x000164, "Member 'FMissionDefine::AutoGrant' has a wrong offset!");
static_assert(offsetof(FMissionDefine, Reward) == 0x000168, "Member 'FMissionDefine::Reward' has a wrong offset!");
static_assert(offsetof(FMissionDefine, GoToWidgetID) == 0x000178, "Member 'FMissionDefine::GoToWidgetID' has a wrong offset!");
static_assert(offsetof(FMissionDefine, GoToWidgetDetailerParams) == 0x000180, "Member 'FMissionDefine::GoToWidgetDetailerParams' has a wrong offset!");
static_assert(offsetof(FMissionDefine, ContentUnlockerIDs) == 0x000190, "Member 'FMissionDefine::ContentUnlockerIDs' has a wrong offset!");

// ScriptStruct Stigma.PlatformMissionDefine
// 0x0010 (0x01B0 - 0x01A0)
struct FPlatformMissionDefine final : public FMissionDefine
{
public:
	class FString                                 API_Name;                                          // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformMissionDefine) == 0x000008, "Wrong alignment on FPlatformMissionDefine");
static_assert(sizeof(FPlatformMissionDefine) == 0x0001B0, "Wrong size on FPlatformMissionDefine");
static_assert(offsetof(FPlatformMissionDefine, API_Name) == 0x0001A0, "Member 'FPlatformMissionDefine::API_Name' has a wrong offset!");

// ScriptStruct Stigma.TaskMission
// 0x0028 (0x0028 - 0x0000)
struct FTaskMission final
{
public:
	struct FItemID                                TAID;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Idx;                                               // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9F[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        MIID;                                              // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaskMission) == 0x000008, "Wrong alignment on FTaskMission");
static_assert(sizeof(FTaskMission) == 0x000028, "Wrong size on FTaskMission");
static_assert(offsetof(FTaskMission, TAID) == 0x000000, "Member 'FTaskMission::TAID' has a wrong offset!");
static_assert(offsetof(FTaskMission, Idx) == 0x000010, "Member 'FTaskMission::Idx' has a wrong offset!");
static_assert(offsetof(FTaskMission, MIID) == 0x000018, "Member 'FTaskMission::MIID' has a wrong offset!");

// ScriptStruct Stigma.REQ_UnregisterServer
// 0x0010 (0x0060 - 0x0050)
struct FREQ_UnregisterServer final : public FMQReqMsg
{
public:
	struct FDediID                                DediID;                                            // 0x0050(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_UnregisterServer) == 0x000008, "Wrong alignment on FREQ_UnregisterServer");
static_assert(sizeof(FREQ_UnregisterServer) == 0x000060, "Wrong size on FREQ_UnregisterServer");
static_assert(offsetof(FREQ_UnregisterServer, DediID) == 0x000050, "Member 'FREQ_UnregisterServer::DediID' has a wrong offset!");

// ScriptStruct Stigma.ModeExpConsts
// 0x0038 (0x0038 - 0x0000)
struct FModeExpConsts final
{
public:
	float                                         PlayTimeRate;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalWinRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalLoseRate;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalDrawRate;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoundWinRate;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoundLoseRate;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoundDrawRate;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreRate;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillRate;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathRate;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssistRate;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResurrectRate;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillSteakRate;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapePenalty;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeExpConsts) == 0x000004, "Wrong alignment on FModeExpConsts");
static_assert(sizeof(FModeExpConsts) == 0x000038, "Wrong size on FModeExpConsts");
static_assert(offsetof(FModeExpConsts, PlayTimeRate) == 0x000000, "Member 'FModeExpConsts::PlayTimeRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, FinalWinRate) == 0x000004, "Member 'FModeExpConsts::FinalWinRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, FinalLoseRate) == 0x000008, "Member 'FModeExpConsts::FinalLoseRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, FinalDrawRate) == 0x00000C, "Member 'FModeExpConsts::FinalDrawRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, RoundWinRate) == 0x000010, "Member 'FModeExpConsts::RoundWinRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, RoundLoseRate) == 0x000014, "Member 'FModeExpConsts::RoundLoseRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, RoundDrawRate) == 0x000018, "Member 'FModeExpConsts::RoundDrawRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, ScoreRate) == 0x00001C, "Member 'FModeExpConsts::ScoreRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, KillRate) == 0x000020, "Member 'FModeExpConsts::KillRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, DeathRate) == 0x000024, "Member 'FModeExpConsts::DeathRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, AssistRate) == 0x000028, "Member 'FModeExpConsts::AssistRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, ResurrectRate) == 0x00002C, "Member 'FModeExpConsts::ResurrectRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, KillSteakRate) == 0x000030, "Member 'FModeExpConsts::KillSteakRate' has a wrong offset!");
static_assert(offsetof(FModeExpConsts, EscapePenalty) == 0x000034, "Member 'FModeExpConsts::EscapePenalty' has a wrong offset!");

// ScriptStruct Stigma.ModeStyle
// 0x0014 (0x0014 - 0x0000)
struct FModeStyle final
{
public:
	EModeTeamAliveCheckType                       TeamAliveCheckType;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GoldDropWhenDie;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DropGunWhenDie;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InfiniteMagazine;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickSameCharacterCount;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldForceRandomPick;                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowMinimap;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndlessMode;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA0[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         DroppedGunLifetime;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECanChangeMaster                              CanChangeMaster;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA1[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FModeStyle) == 0x000004, "Wrong alignment on FModeStyle");
static_assert(sizeof(FModeStyle) == 0x000014, "Wrong size on FModeStyle");
static_assert(offsetof(FModeStyle, TeamAliveCheckType) == 0x000000, "Member 'FModeStyle::TeamAliveCheckType' has a wrong offset!");
static_assert(offsetof(FModeStyle, GoldDropWhenDie) == 0x000001, "Member 'FModeStyle::GoldDropWhenDie' has a wrong offset!");
static_assert(offsetof(FModeStyle, DropGunWhenDie) == 0x000002, "Member 'FModeStyle::DropGunWhenDie' has a wrong offset!");
static_assert(offsetof(FModeStyle, InfiniteMagazine) == 0x000003, "Member 'FModeStyle::InfiniteMagazine' has a wrong offset!");
static_assert(offsetof(FModeStyle, PickSameCharacterCount) == 0x000004, "Member 'FModeStyle::PickSameCharacterCount' has a wrong offset!");
static_assert(offsetof(FModeStyle, ShouldForceRandomPick) == 0x000008, "Member 'FModeStyle::ShouldForceRandomPick' has a wrong offset!");
static_assert(offsetof(FModeStyle, ShowMinimap) == 0x000009, "Member 'FModeStyle::ShowMinimap' has a wrong offset!");
static_assert(offsetof(FModeStyle, EndlessMode) == 0x00000A, "Member 'FModeStyle::EndlessMode' has a wrong offset!");
static_assert(offsetof(FModeStyle, DroppedGunLifetime) == 0x00000C, "Member 'FModeStyle::DroppedGunLifetime' has a wrong offset!");
static_assert(offsetof(FModeStyle, CanChangeMaster) == 0x000010, "Member 'FModeStyle::CanChangeMaster' has a wrong offset!");

// ScriptStruct Stigma.RespawnSetting
// 0x0020 (0x0020 - 0x0000)
struct FRespawnSetting final
{
public:
	int32                                         RespawnLimit;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Slope;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPlaceRespawn;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA2[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RespawnInvincibleTime;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchingToSpectating;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayForNextCharacter;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERoundStartRespawnType                        RoundStartRespawnType;                             // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RepairArmor;                                       // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA3[0x2];                                     // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRespawnSetting) == 0x000004, "Wrong alignment on FRespawnSetting");
static_assert(sizeof(FRespawnSetting) == 0x000020, "Wrong size on FRespawnSetting");
static_assert(offsetof(FRespawnSetting, RespawnLimit) == 0x000000, "Member 'FRespawnSetting::RespawnLimit' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, Delay) == 0x000004, "Member 'FRespawnSetting::Delay' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, Slope) == 0x000008, "Member 'FRespawnSetting::Slope' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, InPlaceRespawn) == 0x00000C, "Member 'FRespawnSetting::InPlaceRespawn' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, RespawnInvincibleTime) == 0x000010, "Member 'FRespawnSetting::RespawnInvincibleTime' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, SwitchingToSpectating) == 0x000014, "Member 'FRespawnSetting::SwitchingToSpectating' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, DelayForNextCharacter) == 0x000018, "Member 'FRespawnSetting::DelayForNextCharacter' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, RoundStartRespawnType) == 0x00001C, "Member 'FRespawnSetting::RoundStartRespawnType' has a wrong offset!");
static_assert(offsetof(FRespawnSetting, RepairArmor) == 0x00001D, "Member 'FRespawnSetting::RepairArmor' has a wrong offset!");

// ScriptStruct Stigma.ModeHelpDetails
// 0x0058 (0x0058 - 0x0000)
struct FModeHelpDetails final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescText;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModeHelpDetails) == 0x000008, "Wrong alignment on FModeHelpDetails");
static_assert(sizeof(FModeHelpDetails) == 0x000058, "Wrong size on FModeHelpDetails");
static_assert(offsetof(FModeHelpDetails, TitleText) == 0x000000, "Member 'FModeHelpDetails::TitleText' has a wrong offset!");
static_assert(offsetof(FModeHelpDetails, DescText) == 0x000018, "Member 'FModeHelpDetails::DescText' has a wrong offset!");
static_assert(offsetof(FModeHelpDetails, Image) == 0x000030, "Member 'FModeHelpDetails::Image' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReportPlayer
// 0x0030 (0x0080 - 0x0050)
struct FREQ_ReportPlayer final : public FMQReqMsg
{
public:
	struct FUserID                                UserIDN;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DediIDS;                                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleID;                                          // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 Status;                                            // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA4[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReportPlayer) == 0x000008, "Wrong alignment on FREQ_ReportPlayer");
static_assert(sizeof(FREQ_ReportPlayer) == 0x000080, "Wrong size on FREQ_ReportPlayer");
static_assert(offsetof(FREQ_ReportPlayer, UserIDN) == 0x000050, "Member 'FREQ_ReportPlayer::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_ReportPlayer, DediIDS) == 0x000058, "Member 'FREQ_ReportPlayer::DediIDS' has a wrong offset!");
static_assert(offsetof(FREQ_ReportPlayer, BattleID) == 0x000068, "Member 'FREQ_ReportPlayer::BattleID' has a wrong offset!");
static_assert(offsetof(FREQ_ReportPlayer, Status) == 0x000078, "Member 'FREQ_ReportPlayer::Status' has a wrong offset!");

// ScriptStruct Stigma.ModePhaseTimes
// 0x0010 (0x0010 - 0x0000)
struct FModePhaseTimes final
{
public:
	int32                                         PreRound;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRound;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostRound;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinishRound;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModePhaseTimes) == 0x000004, "Wrong alignment on FModePhaseTimes");
static_assert(sizeof(FModePhaseTimes) == 0x000010, "Wrong size on FModePhaseTimes");
static_assert(offsetof(FModePhaseTimes, PreRound) == 0x000000, "Member 'FModePhaseTimes::PreRound' has a wrong offset!");
static_assert(offsetof(FModePhaseTimes, InRound) == 0x000004, "Member 'FModePhaseTimes::InRound' has a wrong offset!");
static_assert(offsetof(FModePhaseTimes, PostRound) == 0x000008, "Member 'FModePhaseTimes::PostRound' has a wrong offset!");
static_assert(offsetof(FModePhaseTimes, FinishRound) == 0x00000C, "Member 'FModePhaseTimes::FinishRound' has a wrong offset!");

// ScriptStruct Stigma.Mode
// 0x0368 (0x0370 - 0x0008)
struct FMode final : public FTableRowBase
{
public:
	bool                                          Enable;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     Mode;                                              // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA5[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EModeCategory>                         Categories;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ObjectiveDesc;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FModeHelpDetails>               ModeHelpDetails;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameModeBase>              Class;                                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Insertable;                                        // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartWithOneTeam;                                  // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MustBeEvenBalanced;                                // 0x0082(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSupportedReviveSystem;                           // 0x0083(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReviveTime;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayableCharacterCount;                            // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRoundCount;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinningRoundCount;                                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRespawnSetting                        Respawn;                                           // 0x0094(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA6[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FTeamDefine>                    Teams;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinPlayerCountPerTeam;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerCountPerTeam;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLimit_WaitingPlayers;                          // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchStartCondition                          MatchStartCondition;                               // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA7[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	struct FModePhaseTimes                        PhaseTimes;                                        // 0x00D8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RoundCountDownStartSec;                            // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FModeExpConsts                         MVPConsts;                                         // 0x00EC(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModeExpConsts                         ExpConsts;                                         // 0x0124(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModeExpConsts                         DiamondConsts;                                     // 0x015C(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModeExpConsts                         RankingConsts;                                     // 0x0194(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModeScoreRule                         ScoreRules;                                        // 0x01CC(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FModeStyle                             Style;                                             // 0x01D0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA8[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FModeAISetting                         AISetting;                                         // 0x01E8(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigIcon;                                           // 0x0218(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ModeImage;                                         // 0x0240(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ModeImage_Small;                                   // 0x0268(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ModeImage_Wide;                                    // 0x0290(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TitleImage;                                        // 0x02B8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectedColor;                                     // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCutScene                              CutScene;                                          // 0x0300(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          EnableBattleStore;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowEnemyOutline;                                  // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA9[0x2];                                     // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	struct FModeUnlockCondition                   EntranceCondition;                                 // 0x0364(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAA[0x4];                                     // 0x036C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMode) == 0x000008, "Wrong alignment on FMode");
static_assert(sizeof(FMode) == 0x000370, "Wrong size on FMode");
static_assert(offsetof(FMode, Enable) == 0x000008, "Member 'FMode::Enable' has a wrong offset!");
static_assert(offsetof(FMode, Mode) == 0x000009, "Member 'FMode::Mode' has a wrong offset!");
static_assert(offsetof(FMode, Categories) == 0x000010, "Member 'FMode::Categories' has a wrong offset!");
static_assert(offsetof(FMode, DisplayName) == 0x000020, "Member 'FMode::DisplayName' has a wrong offset!");
static_assert(offsetof(FMode, Desc) == 0x000038, "Member 'FMode::Desc' has a wrong offset!");
static_assert(offsetof(FMode, ObjectiveDesc) == 0x000050, "Member 'FMode::ObjectiveDesc' has a wrong offset!");
static_assert(offsetof(FMode, ModeHelpDetails) == 0x000068, "Member 'FMode::ModeHelpDetails' has a wrong offset!");
static_assert(offsetof(FMode, Class) == 0x000078, "Member 'FMode::Class' has a wrong offset!");
static_assert(offsetof(FMode, Insertable) == 0x000080, "Member 'FMode::Insertable' has a wrong offset!");
static_assert(offsetof(FMode, StartWithOneTeam) == 0x000081, "Member 'FMode::StartWithOneTeam' has a wrong offset!");
static_assert(offsetof(FMode, MustBeEvenBalanced) == 0x000082, "Member 'FMode::MustBeEvenBalanced' has a wrong offset!");
static_assert(offsetof(FMode, IsSupportedReviveSystem) == 0x000083, "Member 'FMode::IsSupportedReviveSystem' has a wrong offset!");
static_assert(offsetof(FMode, ReviveTime) == 0x000084, "Member 'FMode::ReviveTime' has a wrong offset!");
static_assert(offsetof(FMode, PlayableCharacterCount) == 0x000088, "Member 'FMode::PlayableCharacterCount' has a wrong offset!");
static_assert(offsetof(FMode, TotalRoundCount) == 0x00008C, "Member 'FMode::TotalRoundCount' has a wrong offset!");
static_assert(offsetof(FMode, WinningRoundCount) == 0x000090, "Member 'FMode::WinningRoundCount' has a wrong offset!");
static_assert(offsetof(FMode, Respawn) == 0x000094, "Member 'FMode::Respawn' has a wrong offset!");
static_assert(offsetof(FMode, Teams) == 0x0000B8, "Member 'FMode::Teams' has a wrong offset!");
static_assert(offsetof(FMode, MinPlayerCountPerTeam) == 0x0000C8, "Member 'FMode::MinPlayerCountPerTeam' has a wrong offset!");
static_assert(offsetof(FMode, MaxPlayerCountPerTeam) == 0x0000CC, "Member 'FMode::MaxPlayerCountPerTeam' has a wrong offset!");
static_assert(offsetof(FMode, TimeLimit_WaitingPlayers) == 0x0000D0, "Member 'FMode::TimeLimit_WaitingPlayers' has a wrong offset!");
static_assert(offsetof(FMode, MatchStartCondition) == 0x0000D4, "Member 'FMode::MatchStartCondition' has a wrong offset!");
static_assert(offsetof(FMode, PhaseTimes) == 0x0000D8, "Member 'FMode::PhaseTimes' has a wrong offset!");
static_assert(offsetof(FMode, RoundCountDownStartSec) == 0x0000E8, "Member 'FMode::RoundCountDownStartSec' has a wrong offset!");
static_assert(offsetof(FMode, MVPConsts) == 0x0000EC, "Member 'FMode::MVPConsts' has a wrong offset!");
static_assert(offsetof(FMode, ExpConsts) == 0x000124, "Member 'FMode::ExpConsts' has a wrong offset!");
static_assert(offsetof(FMode, DiamondConsts) == 0x00015C, "Member 'FMode::DiamondConsts' has a wrong offset!");
static_assert(offsetof(FMode, RankingConsts) == 0x000194, "Member 'FMode::RankingConsts' has a wrong offset!");
static_assert(offsetof(FMode, ScoreRules) == 0x0001CC, "Member 'FMode::ScoreRules' has a wrong offset!");
static_assert(offsetof(FMode, Style) == 0x0001D0, "Member 'FMode::Style' has a wrong offset!");
static_assert(offsetof(FMode, AISetting) == 0x0001E8, "Member 'FMode::AISetting' has a wrong offset!");
static_assert(offsetof(FMode, BigIcon) == 0x000218, "Member 'FMode::BigIcon' has a wrong offset!");
static_assert(offsetof(FMode, ModeImage) == 0x000240, "Member 'FMode::ModeImage' has a wrong offset!");
static_assert(offsetof(FMode, ModeImage_Small) == 0x000268, "Member 'FMode::ModeImage_Small' has a wrong offset!");
static_assert(offsetof(FMode, ModeImage_Wide) == 0x000290, "Member 'FMode::ModeImage_Wide' has a wrong offset!");
static_assert(offsetof(FMode, TitleImage) == 0x0002B8, "Member 'FMode::TitleImage' has a wrong offset!");
static_assert(offsetof(FMode, BaseColor) == 0x0002E0, "Member 'FMode::BaseColor' has a wrong offset!");
static_assert(offsetof(FMode, SelectedColor) == 0x0002F0, "Member 'FMode::SelectedColor' has a wrong offset!");
static_assert(offsetof(FMode, CutScene) == 0x000300, "Member 'FMode::CutScene' has a wrong offset!");
static_assert(offsetof(FMode, EnableBattleStore) == 0x000360, "Member 'FMode::EnableBattleStore' has a wrong offset!");
static_assert(offsetof(FMode, ShowEnemyOutline) == 0x000361, "Member 'FMode::ShowEnemyOutline' has a wrong offset!");
static_assert(offsetof(FMode, EntranceCondition) == 0x000364, "Member 'FMode::EntranceCondition' has a wrong offset!");

// ScriptStruct Stigma.RuleStep
// 0x0010 (0x0010 - 0x0000)
struct FRuleStep final
{
public:
	int32                                         DurationTimeSec;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ELORange;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LatencyRange;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowMinPlayers;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAB[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRuleStep) == 0x000004, "Wrong alignment on FRuleStep");
static_assert(sizeof(FRuleStep) == 0x000010, "Wrong size on FRuleStep");
static_assert(offsetof(FRuleStep, DurationTimeSec) == 0x000000, "Member 'FRuleStep::DurationTimeSec' has a wrong offset!");
static_assert(offsetof(FRuleStep, ELORange) == 0x000004, "Member 'FRuleStep::ELORange' has a wrong offset!");
static_assert(offsetof(FRuleStep, LatencyRange) == 0x000008, "Member 'FRuleStep::LatencyRange' has a wrong offset!");
static_assert(offsetof(FRuleStep, AllowMinPlayers) == 0x00000C, "Member 'FRuleStep::AllowMinPlayers' has a wrong offset!");

// ScriptStruct Stigma.MatchRule
// 0x0048 (0x0050 - 0x0008)
struct FMatchRule final : public FTableRowBase
{
public:
	class FString                                 Version;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModeID;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAC[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FRuleStep>                      Steps;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchRule) == 0x000008, "Wrong alignment on FMatchRule");
static_assert(sizeof(FMatchRule) == 0x000050, "Wrong size on FMatchRule");
static_assert(offsetof(FMatchRule, Version) == 0x000008, "Member 'FMatchRule::Version' has a wrong offset!");
static_assert(offsetof(FMatchRule, ModeID) == 0x000018, "Member 'FMatchRule::ModeID' has a wrong offset!");
static_assert(offsetof(FMatchRule, Desc) == 0x000028, "Member 'FMatchRule::Desc' has a wrong offset!");
static_assert(offsetof(FMatchRule, Enable) == 0x000038, "Member 'FMatchRule::Enable' has a wrong offset!");
static_assert(offsetof(FMatchRule, Steps) == 0x000040, "Member 'FMatchRule::Steps' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_AllowJoin
// 0x0018 (0x0068 - 0x0050)
struct FMQREQ_AllowJoin final : public FMQReqMsg
{
public:
	class FString                                 BattleIDS;                                         // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Allow;                                             // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAD[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         MaxPlayer;                                         // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_AllowJoin) == 0x000008, "Wrong alignment on FMQREQ_AllowJoin");
static_assert(sizeof(FMQREQ_AllowJoin) == 0x000068, "Wrong size on FMQREQ_AllowJoin");
static_assert(offsetof(FMQREQ_AllowJoin, BattleIDS) == 0x000050, "Member 'FMQREQ_AllowJoin::BattleIDS' has a wrong offset!");
static_assert(offsetof(FMQREQ_AllowJoin, Allow) == 0x000060, "Member 'FMQREQ_AllowJoin::Allow' has a wrong offset!");
static_assert(offsetof(FMQREQ_AllowJoin, MaxPlayer) == 0x000064, "Member 'FMQREQ_AllowJoin::MaxPlayer' has a wrong offset!");

// ScriptStruct Stigma.MotionData
// 0x0038 (0x0038 - 0x0000)
struct FMotionData final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishTime;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionSource                                 MotionSource;                                      // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AimOffset;                                         // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMoveMode                                     StartMoveMode;                                     // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdjustTransformForMate;                            // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtAngle;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FVector                                MateOffset;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMotionData) == 0x000008, "Wrong alignment on FMotionData");
static_assert(sizeof(FMotionData) == 0x000038, "Wrong size on FMotionData");
static_assert(offsetof(FMotionData, Montage) == 0x000000, "Member 'FMotionData::Montage' has a wrong offset!");
static_assert(offsetof(FMotionData, StartTime) == 0x000008, "Member 'FMotionData::StartTime' has a wrong offset!");
static_assert(offsetof(FMotionData, FinishTime) == 0x00000C, "Member 'FMotionData::FinishTime' has a wrong offset!");
static_assert(offsetof(FMotionData, PlayRate) == 0x000010, "Member 'FMotionData::PlayRate' has a wrong offset!");
static_assert(offsetof(FMotionData, MotionSource) == 0x000014, "Member 'FMotionData::MotionSource' has a wrong offset!");
static_assert(offsetof(FMotionData, AimOffset) == 0x000015, "Member 'FMotionData::AimOffset' has a wrong offset!");
static_assert(offsetof(FMotionData, StartMoveMode) == 0x000016, "Member 'FMotionData::StartMoveMode' has a wrong offset!");
static_assert(offsetof(FMotionData, AdjustTransformForMate) == 0x000017, "Member 'FMotionData::AdjustTransformForMate' has a wrong offset!");
static_assert(offsetof(FMotionData, LookAtAngle) == 0x000018, "Member 'FMotionData::LookAtAngle' has a wrong offset!");
static_assert(offsetof(FMotionData, MateOffset) == 0x000020, "Member 'FMotionData::MateOffset' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadFriendRanking
// 0x0018 (0x0018 - 0x0000)
struct FREQ_ReadFriendRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              SeasonID;                                          // 0x0010(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  RankingType;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAF[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadFriendRanking) == 0x000008, "Wrong alignment on FREQ_ReadFriendRanking");
static_assert(sizeof(FREQ_ReadFriendRanking) == 0x000018, "Wrong size on FREQ_ReadFriendRanking");
static_assert(offsetof(FREQ_ReadFriendRanking, Start) == 0x000000, "Member 'FREQ_ReadFriendRanking::Start' has a wrong offset!");
static_assert(offsetof(FREQ_ReadFriendRanking, Count) == 0x000008, "Member 'FREQ_ReadFriendRanking::Count' has a wrong offset!");
static_assert(offsetof(FREQ_ReadFriendRanking, SeasonID) == 0x000010, "Member 'FREQ_ReadFriendRanking::SeasonID' has a wrong offset!");
static_assert(offsetof(FREQ_ReadFriendRanking, RankingType) == 0x000014, "Member 'FREQ_ReadFriendRanking::RankingType' has a wrong offset!");

// ScriptStruct Stigma.NonItemEntry
// 0x00C8 (0x00D0 - 0x0008)
struct FNonItemEntry final : public FTableRowBase
{
public:
	class FName                                   NameID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DescShort;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigIcon;                                           // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SimpleIcon;                                        // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNonItemEntry) == 0x000008, "Wrong alignment on FNonItemEntry");
static_assert(sizeof(FNonItemEntry) == 0x0000D0, "Wrong size on FNonItemEntry");
static_assert(offsetof(FNonItemEntry, NameID) == 0x000008, "Member 'FNonItemEntry::NameID' has a wrong offset!");
static_assert(offsetof(FNonItemEntry, DisplayName) == 0x000010, "Member 'FNonItemEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FNonItemEntry, Desc) == 0x000028, "Member 'FNonItemEntry::Desc' has a wrong offset!");
static_assert(offsetof(FNonItemEntry, DescShort) == 0x000040, "Member 'FNonItemEntry::DescShort' has a wrong offset!");
static_assert(offsetof(FNonItemEntry, Icon) == 0x000058, "Member 'FNonItemEntry::Icon' has a wrong offset!");
static_assert(offsetof(FNonItemEntry, BigIcon) == 0x000080, "Member 'FNonItemEntry::BigIcon' has a wrong offset!");
static_assert(offsetof(FNonItemEntry, SimpleIcon) == 0x0000A8, "Member 'FNonItemEntry::SimpleIcon' has a wrong offset!");

// ScriptStruct Stigma.SyncTransform
// 0x0030 (0x0030 - 0x0000)
struct FSyncTransform final
{
public:
	struct FVector_NetQuantize                    LastLocation;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastRotation;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSyncTransform) == 0x000008, "Wrong alignment on FSyncTransform");
static_assert(sizeof(FSyncTransform) == 0x000030, "Wrong size on FSyncTransform");
static_assert(offsetof(FSyncTransform, LastLocation) == 0x000000, "Member 'FSyncTransform::LastLocation' has a wrong offset!");
static_assert(offsetof(FSyncTransform, LastRotation) == 0x000018, "Member 'FSyncTransform::LastRotation' has a wrong offset!");

// ScriptStruct Stigma.Config_Object
// 0x0038 (0x0040 - 0x0008)
struct FConfig_Object final : public FTableRowBase
{
public:
	EObjectType                                   ObjectType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB0[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDamageDef                             Damage;                                            // 0x0028(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Durability;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Object) == 0x000008, "Wrong alignment on FConfig_Object");
static_assert(sizeof(FConfig_Object) == 0x000040, "Wrong size on FConfig_Object");
static_assert(offsetof(FConfig_Object, ObjectType) == 0x000008, "Member 'FConfig_Object::ObjectType' has a wrong offset!");
static_assert(offsetof(FConfig_Object, DisplayName) == 0x000010, "Member 'FConfig_Object::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_Object, Damage) == 0x000028, "Member 'FConfig_Object::Damage' has a wrong offset!");
static_assert(offsetof(FConfig_Object, Durability) == 0x00003C, "Member 'FConfig_Object::Durability' has a wrong offset!");

// ScriptStruct Stigma.BC_TierUpdate
// 0x0008 (0x0008 - 0x0000)
struct FBC_TierUpdate final
{
public:
	struct FSeasonID                              SeasonID;                                          // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         PrevTier;                                          // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB1[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_TierUpdate) == 0x000004, "Wrong alignment on FBC_TierUpdate");
static_assert(sizeof(FBC_TierUpdate) == 0x000008, "Wrong size on FBC_TierUpdate");
static_assert(offsetof(FBC_TierUpdate, SeasonID) == 0x000000, "Member 'FBC_TierUpdate::SeasonID' has a wrong offset!");
static_assert(offsetof(FBC_TierUpdate, Tier) == 0x000004, "Member 'FBC_TierUpdate::Tier' has a wrong offset!");
static_assert(offsetof(FBC_TierUpdate, PrevTier) == 0x000005, "Member 'FBC_TierUpdate::PrevTier' has a wrong offset!");

// ScriptStruct Stigma.OccupationTeamData
// 0x0018 (0x0018 - 0x0000)
struct FOccupationTeamData final
{
public:
	int32                                         OccupyScore;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class AOccupationArea*>                OccupationAreas;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOccupationTeamData) == 0x000008, "Wrong alignment on FOccupationTeamData");
static_assert(sizeof(FOccupationTeamData) == 0x000018, "Wrong size on FOccupationTeamData");
static_assert(offsetof(FOccupationTeamData, OccupyScore) == 0x000000, "Member 'FOccupationTeamData::OccupyScore' has a wrong offset!");
static_assert(offsetof(FOccupationTeamData, OccupationAreas) == 0x000008, "Member 'FOccupationTeamData::OccupationAreas' has a wrong offset!");

// ScriptStruct Stigma.ToAvoidError
// 0x0001 (0x0001 - 0x0000)
struct FToAvoidError final
{
public:
	uint8                                         Pad_1EB3[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FToAvoidError) == 0x000001, "Wrong alignment on FToAvoidError");
static_assert(sizeof(FToAvoidError) == 0x000001, "Wrong size on FToAvoidError");

// ScriptStruct Stigma.OpeningEntry
// 0x0030 (0x0030 - 0x0000)
struct FOpeningEntry final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UUserWidget>                UIClass;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeIn;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowSkip;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyOnce;                                          // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB5[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<EOptionLanguage>                       LanguageCondition;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOpeningEntry) == 0x000008, "Wrong alignment on FOpeningEntry");
static_assert(sizeof(FOpeningEntry) == 0x000030, "Wrong size on FOpeningEntry");
static_assert(offsetof(FOpeningEntry, Enable) == 0x000000, "Member 'FOpeningEntry::Enable' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, UIClass) == 0x000008, "Member 'FOpeningEntry::UIClass' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, Duration) == 0x000010, "Member 'FOpeningEntry::Duration' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, FadeIn) == 0x000014, "Member 'FOpeningEntry::FadeIn' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, FadeOut) == 0x000018, "Member 'FOpeningEntry::FadeOut' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, AllowSkip) == 0x00001C, "Member 'FOpeningEntry::AllowSkip' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, OnlyOnce) == 0x00001D, "Member 'FOpeningEntry::OnlyOnce' has a wrong offset!");
static_assert(offsetof(FOpeningEntry, LanguageCondition) == 0x000020, "Member 'FOpeningEntry::LanguageCondition' has a wrong offset!");

// ScriptStruct Stigma.OptionDescEntry
// 0x0040 (0x0040 - 0x0000)
struct FOptionDescEntry final
{
public:
	EOptionDescType                               DescType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UPreviewableWidget>         CustomWidget;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOptionDescEntry) == 0x000008, "Wrong alignment on FOptionDescEntry");
static_assert(sizeof(FOptionDescEntry) == 0x000040, "Wrong size on FOptionDescEntry");
static_assert(offsetof(FOptionDescEntry, DescType) == 0x000000, "Member 'FOptionDescEntry::DescType' has a wrong offset!");
static_assert(offsetof(FOptionDescEntry, Title) == 0x000008, "Member 'FOptionDescEntry::Title' has a wrong offset!");
static_assert(offsetof(FOptionDescEntry, Desc) == 0x000020, "Member 'FOptionDescEntry::Desc' has a wrong offset!");
static_assert(offsetof(FOptionDescEntry, CustomWidget) == 0x000038, "Member 'FOptionDescEntry::CustomWidget' has a wrong offset!");

// ScriptStruct Stigma.ACK_LoadUser
// 0x0130 (0x0130 - 0x0000)
struct FACK_LoadUser final
{
public:
	struct FUserInfo                              User;                                              // 0x0000(0x00A8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUserSlots                             Slot;                                              // 0x00A8(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSkill>                  PassiveSkill;                                      // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemID_Booster>                Booster;                                           // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetInvenItem>                  Inven;                                             // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActiveFunction>                Function;                                          // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnreadMailCount;                                   // 0x0128(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB7[0x4];                                     // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_LoadUser) == 0x000008, "Wrong alignment on FACK_LoadUser");
static_assert(sizeof(FACK_LoadUser) == 0x000130, "Wrong size on FACK_LoadUser");
static_assert(offsetof(FACK_LoadUser, User) == 0x000000, "Member 'FACK_LoadUser::User' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, Slot) == 0x0000A8, "Member 'FACK_LoadUser::Slot' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, PassiveSkill) == 0x0000D8, "Member 'FACK_LoadUser::PassiveSkill' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, Booster) == 0x0000E8, "Member 'FACK_LoadUser::Booster' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, GunSpec) == 0x0000F8, "Member 'FACK_LoadUser::GunSpec' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, Inven) == 0x000108, "Member 'FACK_LoadUser::Inven' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, Function) == 0x000118, "Member 'FACK_LoadUser::Function' has a wrong offset!");
static_assert(offsetof(FACK_LoadUser, UnreadMailCount) == 0x000128, "Member 'FACK_LoadUser::UnreadMailCount' has a wrong offset!");

// ScriptStruct Stigma.InviteReply
// 0x0001 (0x0001 - 0x0000)
struct FInviteReply final
{
public:
	EInviteReply                                  _Reply;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FInviteReply) == 0x000001, "Wrong alignment on FInviteReply");
static_assert(sizeof(FInviteReply) == 0x000001, "Wrong size on FInviteReply");
static_assert(offsetof(FInviteReply, _Reply) == 0x000000, "Member 'FInviteReply::_Reply' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadUserCurrency
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadUserCurrency final
{
public:
	TArray<struct FNetInvenItem>                  Currency;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadUserCurrency) == 0x000008, "Wrong alignment on FACK_ReadUserCurrency");
static_assert(sizeof(FACK_ReadUserCurrency) == 0x000010, "Wrong size on FACK_ReadUserCurrency");
static_assert(offsetof(FACK_ReadUserCurrency, Currency) == 0x000000, "Member 'FACK_ReadUserCurrency::Currency' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_EventPageHack
// 0x0030 (0x0030 - 0x0000)
struct FREQ_CHEAT_EventPageHack final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID_EventPage                      EPIDN;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Act;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB8[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_EventPageHack) == 0x000008, "Wrong alignment on FREQ_CHEAT_EventPageHack");
static_assert(sizeof(FREQ_CHEAT_EventPageHack) == 0x000030, "Wrong size on FREQ_CHEAT_EventPageHack");
static_assert(offsetof(FREQ_CHEAT_EventPageHack, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_EventPageHack::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_EventPageHack, EPIDN) == 0x000008, "Member 'FREQ_CHEAT_EventPageHack::EPIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_EventPageHack, Act) == 0x000018, "Member 'FREQ_CHEAT_EventPageHack::Act' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_EventPageHack, Param) == 0x000028, "Member 'FREQ_CHEAT_EventPageHack::Param' has a wrong offset!");

// ScriptStruct Stigma.Survey
// 0x0038 (0x0038 - 0x0000)
struct FSurvey final
{
public:
	int32                                         IDN;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SurveyIDS;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SurveyURL;                                         // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurvey) == 0x000008, "Wrong alignment on FSurvey");
static_assert(sizeof(FSurvey) == 0x000038, "Wrong size on FSurvey");
static_assert(offsetof(FSurvey, IDN) == 0x000000, "Member 'FSurvey::IDN' has a wrong offset!");
static_assert(offsetof(FSurvey, Name) == 0x000008, "Member 'FSurvey::Name' has a wrong offset!");
static_assert(offsetof(FSurvey, SurveyIDS) == 0x000018, "Member 'FSurvey::SurveyIDS' has a wrong offset!");
static_assert(offsetof(FSurvey, SurveyURL) == 0x000028, "Member 'FSurvey::SurveyURL' has a wrong offset!");

// ScriptStruct Stigma.BC_Survey
// 0x0010 (0x0010 - 0x0000)
struct FBC_Survey final
{
public:
	TArray<struct FSurvey>                        Survey;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_Survey) == 0x000008, "Wrong alignment on FBC_Survey");
static_assert(sizeof(FBC_Survey) == 0x000010, "Wrong size on FBC_Survey");
static_assert(offsetof(FBC_Survey, Survey) == 0x000000, "Member 'FBC_Survey::Survey' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_MissionHack
// 0x0038 (0x0038 - 0x0000)
struct FREQ_CHEAT_MissionHack final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemID                                TAID;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Act;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBA[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_MissionHack) == 0x000008, "Wrong alignment on FREQ_CHEAT_MissionHack");
static_assert(sizeof(FREQ_CHEAT_MissionHack) == 0x000038, "Wrong size on FREQ_CHEAT_MissionHack");
static_assert(offsetof(FREQ_CHEAT_MissionHack, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_MissionHack::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_MissionHack, TAID) == 0x000008, "Member 'FREQ_CHEAT_MissionHack::TAID' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_MissionHack, Idx) == 0x000018, "Member 'FREQ_CHEAT_MissionHack::Idx' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_MissionHack, Slot) == 0x00001C, "Member 'FREQ_CHEAT_MissionHack::Slot' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_MissionHack, Act) == 0x000020, "Member 'FREQ_CHEAT_MissionHack::Act' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_MissionHack, Count) == 0x000030, "Member 'FREQ_CHEAT_MissionHack::Count' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_TierPoint
// 0x0010 (0x0010 - 0x0000)
struct FREQ_CHEAT_TierPoint final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TierPoint;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBB[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_TierPoint) == 0x000008, "Wrong alignment on FREQ_CHEAT_TierPoint");
static_assert(sizeof(FREQ_CHEAT_TierPoint) == 0x000010, "Wrong size on FREQ_CHEAT_TierPoint");
static_assert(offsetof(FREQ_CHEAT_TierPoint, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_TierPoint::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_TierPoint, TierPoint) == 0x000008, "Member 'FREQ_CHEAT_TierPoint::TierPoint' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_MannerPoint
// 0x0004 (0x0004 - 0x0000)
struct FREQ_CHEAT_MannerPoint final
{
public:
	float                                         PointDelta;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_CHEAT_MannerPoint) == 0x000004, "Wrong alignment on FREQ_CHEAT_MannerPoint");
static_assert(sizeof(FREQ_CHEAT_MannerPoint) == 0x000004, "Wrong size on FREQ_CHEAT_MannerPoint");
static_assert(offsetof(FREQ_CHEAT_MannerPoint, PointDelta) == 0x000000, "Member 'FREQ_CHEAT_MannerPoint::PointDelta' has a wrong offset!");

// ScriptStruct Stigma.BC_ActiveFunction
// 0x0010 (0x0010 - 0x0000)
struct FBC_ActiveFunction final
{
public:
	TArray<struct FActiveFunction>                Function;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_ActiveFunction) == 0x000008, "Wrong alignment on FBC_ActiveFunction");
static_assert(sizeof(FBC_ActiveFunction) == 0x000010, "Wrong size on FBC_ActiveFunction");
static_assert(offsetof(FBC_ActiveFunction, Function) == 0x000000, "Member 'FBC_ActiveFunction::Function' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_FunctionHack
// 0x0018 (0x0018 - 0x0000)
struct FREQ_CHEAT_FunctionHack final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Act;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_CHEAT_FunctionHack) == 0x000008, "Wrong alignment on FREQ_CHEAT_FunctionHack");
static_assert(sizeof(FREQ_CHEAT_FunctionHack) == 0x000018, "Wrong size on FREQ_CHEAT_FunctionHack");
static_assert(offsetof(FREQ_CHEAT_FunctionHack, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_FunctionHack::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_FunctionHack, Act) == 0x000008, "Member 'FREQ_CHEAT_FunctionHack::Act' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_ELO
// 0x0010 (0x0010 - 0x0000)
struct FREQ_CHEAT_ELO final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ELO;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBC[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_ELO) == 0x000008, "Wrong alignment on FREQ_CHEAT_ELO");
static_assert(sizeof(FREQ_CHEAT_ELO) == 0x000010, "Wrong size on FREQ_CHEAT_ELO");
static_assert(offsetof(FREQ_CHEAT_ELO, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_ELO::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_ELO, ELO) == 0x000008, "Member 'FREQ_CHEAT_ELO::ELO' has a wrong offset!");

// ScriptStruct Stigma.REQ_CHEAT_Tutorial
// 0x0010 (0x0010 - 0x0000)
struct FREQ_CHEAT_Tutorial final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tutorial;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBD[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_CHEAT_Tutorial) == 0x000008, "Wrong alignment on FREQ_CHEAT_Tutorial");
static_assert(sizeof(FREQ_CHEAT_Tutorial) == 0x000010, "Wrong size on FREQ_CHEAT_Tutorial");
static_assert(offsetof(FREQ_CHEAT_Tutorial, UserIDN) == 0x000000, "Member 'FREQ_CHEAT_Tutorial::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_CHEAT_Tutorial, Tutorial) == 0x000008, "Member 'FREQ_CHEAT_Tutorial::Tutorial' has a wrong offset!");

// ScriptStruct Stigma.REQ_Login
// 0x0040 (0x0040 - 0x0000)
struct FREQ_Login final
{
public:
	int32                                         Publisher;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 PublisherID;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionKey;                                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nickname;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionLanguage                               Lang;                                              // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBF[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_Login) == 0x000008, "Wrong alignment on FREQ_Login");
static_assert(sizeof(FREQ_Login) == 0x000040, "Wrong size on FREQ_Login");
static_assert(offsetof(FREQ_Login, Publisher) == 0x000000, "Member 'FREQ_Login::Publisher' has a wrong offset!");
static_assert(offsetof(FREQ_Login, PublisherID) == 0x000008, "Member 'FREQ_Login::PublisherID' has a wrong offset!");
static_assert(offsetof(FREQ_Login, SessionKey) == 0x000018, "Member 'FREQ_Login::SessionKey' has a wrong offset!");
static_assert(offsetof(FREQ_Login, Nickname) == 0x000028, "Member 'FREQ_Login::Nickname' has a wrong offset!");
static_assert(offsetof(FREQ_Login, Lang) == 0x000038, "Member 'FREQ_Login::Lang' has a wrong offset!");

// ScriptStruct Stigma.UpdateActiveFunction
// 0x0030 (0x0030 - 0x0000)
struct FUpdateActiveFunction final
{
public:
	bool                                          IsRemove;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FActiveFunction                        Function;                                          // 0x0008(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateActiveFunction) == 0x000008, "Wrong alignment on FUpdateActiveFunction");
static_assert(sizeof(FUpdateActiveFunction) == 0x000030, "Wrong size on FUpdateActiveFunction");
static_assert(offsetof(FUpdateActiveFunction, IsRemove) == 0x000000, "Member 'FUpdateActiveFunction::IsRemove' has a wrong offset!");
static_assert(offsetof(FUpdateActiveFunction, Function) == 0x000008, "Member 'FUpdateActiveFunction::Function' has a wrong offset!");

// ScriptStruct Stigma.BC_UpdateActiveFunction
// 0x0010 (0x0010 - 0x0000)
struct FBC_UpdateActiveFunction final
{
public:
	TArray<struct FUpdateActiveFunction>          Function;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_UpdateActiveFunction) == 0x000008, "Wrong alignment on FBC_UpdateActiveFunction");
static_assert(sizeof(FBC_UpdateActiveFunction) == 0x000010, "Wrong size on FBC_UpdateActiveFunction");
static_assert(offsetof(FBC_UpdateActiveFunction, Function) == 0x000000, "Member 'FBC_UpdateActiveFunction::Function' has a wrong offset!");

// ScriptStruct Stigma.ACK_Login
// 0x0020 (0x0028 - 0x0008)
struct FACK_Login final : public FApiResult
{
public:
	class FString                                 Token;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LoginAt;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndAt;                                             // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_Login) == 0x000008, "Wrong alignment on FACK_Login");
static_assert(sizeof(FACK_Login) == 0x000028, "Wrong size on FACK_Login");
static_assert(offsetof(FACK_Login, Token) == 0x000008, "Member 'FACK_Login::Token' has a wrong offset!");
static_assert(offsetof(FACK_Login, LoginAt) == 0x000018, "Member 'FACK_Login::LoginAt' has a wrong offset!");
static_assert(offsetof(FACK_Login, EndAt) == 0x000020, "Member 'FACK_Login::EndAt' has a wrong offset!");

// ScriptStruct Stigma.Req_Logout
// 0x0008 (0x0008 - 0x0000)
struct FReq_Logout final
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReq_Logout) == 0x000008, "Wrong alignment on FReq_Logout");
static_assert(sizeof(FReq_Logout) == 0x000008, "Wrong size on FReq_Logout");
static_assert(offsetof(FReq_Logout, UserID) == 0x000000, "Member 'FReq_Logout::UserID' has a wrong offset!");

// ScriptStruct Stigma.REQ_CurrentCharacter
// 0x0001 (0x0001 - 0x0000)
struct FREQ_CurrentCharacter final
{
public:
	ECharaType                                    CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_CurrentCharacter) == 0x000001, "Wrong alignment on FREQ_CurrentCharacter");
static_assert(sizeof(FREQ_CurrentCharacter) == 0x000001, "Wrong size on FREQ_CurrentCharacter");
static_assert(offsetof(FREQ_CurrentCharacter, CharaType) == 0x000000, "Member 'FREQ_CurrentCharacter::CharaType' has a wrong offset!");

// ScriptStruct Stigma.BC_CreateChara
// 0x0010 (0x0010 - 0x0000)
struct FBC_CreateChara final
{
public:
	TArray<struct FNetCharacter>                  CharaInfo;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_CreateChara) == 0x000008, "Wrong alignment on FBC_CreateChara");
static_assert(sizeof(FBC_CreateChara) == 0x000010, "Wrong size on FBC_CreateChara");
static_assert(offsetof(FBC_CreateChara, CharaInfo) == 0x000000, "Member 'FBC_CreateChara::CharaInfo' has a wrong offset!");

// ScriptStruct Stigma.REQ_CharacterSetting
// 0x0028 (0x0028 - 0x0000)
struct FREQ_CharacterSetting final
{
public:
	ECharaType                                    CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FItemSetting>                   Settings;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGunPreset                             GunPreset;                                         // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_CharacterSetting) == 0x000008, "Wrong alignment on FREQ_CharacterSetting");
static_assert(sizeof(FREQ_CharacterSetting) == 0x000028, "Wrong size on FREQ_CharacterSetting");
static_assert(offsetof(FREQ_CharacterSetting, CharaType) == 0x000000, "Member 'FREQ_CharacterSetting::CharaType' has a wrong offset!");
static_assert(offsetof(FREQ_CharacterSetting, Settings) == 0x000008, "Member 'FREQ_CharacterSetting::Settings' has a wrong offset!");
static_assert(offsetof(FREQ_CharacterSetting, GunPreset) == 0x000018, "Member 'FREQ_CharacterSetting::GunPreset' has a wrong offset!");

// ScriptStruct Stigma.Req_MatchFind
// 0x0038 (0x0038 - 0x0000)
struct FReq_MatchFind final
{
public:
	struct FMatchOption                           MatchOption;                                       // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReq_MatchFind) == 0x000008, "Wrong alignment on FReq_MatchFind");
static_assert(sizeof(FReq_MatchFind) == 0x000038, "Wrong size on FReq_MatchFind");
static_assert(offsetof(FReq_MatchFind, MatchOption) == 0x000000, "Member 'FReq_MatchFind::MatchOption' has a wrong offset!");

// ScriptStruct Stigma.REQ_KeepAlive
// 0x0001 (0x0001 - 0x0000)
struct FREQ_KeepAlive final
{
public:
	EUserPlayingAt                                PlayingAt;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_KeepAlive) == 0x000001, "Wrong alignment on FREQ_KeepAlive");
static_assert(sizeof(FREQ_KeepAlive) == 0x000001, "Wrong size on FREQ_KeepAlive");
static_assert(offsetof(FREQ_KeepAlive, PlayingAt) == 0x000000, "Member 'FREQ_KeepAlive::PlayingAt' has a wrong offset!");

// ScriptStruct Stigma.ACK_KeepAlive
// 0x0010 (0x0010 - 0x0000)
struct FACK_KeepAlive final
{
public:
	TArray<struct FRunningMatchState>             MatchState;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_KeepAlive) == 0x000008, "Wrong alignment on FACK_KeepAlive");
static_assert(sizeof(FACK_KeepAlive) == 0x000010, "Wrong size on FACK_KeepAlive");
static_assert(offsetof(FACK_KeepAlive, MatchState) == 0x000000, "Member 'FACK_KeepAlive::MatchState' has a wrong offset!");

// ScriptStruct Stigma.ACK_ChallengeResult
// 0x0020 (0x0020 - 0x0000)
struct FACK_ChallengeResult final
{
public:
	TArray<struct FACK_ChallengeRead>             Top3;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FACK_ChallengeRead>             Rankers;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ChallengeResult) == 0x000008, "Wrong alignment on FACK_ChallengeResult");
static_assert(sizeof(FACK_ChallengeResult) == 0x000020, "Wrong size on FACK_ChallengeResult");
static_assert(offsetof(FACK_ChallengeResult, Top3) == 0x000000, "Member 'FACK_ChallengeResult::Top3' has a wrong offset!");
static_assert(offsetof(FACK_ChallengeResult, Rankers) == 0x000010, "Member 'FACK_ChallengeResult::Rankers' has a wrong offset!");

// ScriptStruct Stigma.BC_EventPageRefresh
// 0x0018 (0x0018 - 0x0000)
struct FBC_EventPageRefresh final
{
public:
	TArray<struct FNetEventPage>                  EPs;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Popup;                                             // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC2[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_EventPageRefresh) == 0x000008, "Wrong alignment on FBC_EventPageRefresh");
static_assert(sizeof(FBC_EventPageRefresh) == 0x000018, "Wrong size on FBC_EventPageRefresh");
static_assert(offsetof(FBC_EventPageRefresh, EPs) == 0x000000, "Member 'FBC_EventPageRefresh::EPs' has a wrong offset!");
static_assert(offsetof(FBC_EventPageRefresh, Popup) == 0x000010, "Member 'FBC_EventPageRefresh::Popup' has a wrong offset!");

// ScriptStruct Stigma.BC_EventPageInactive
// 0x0010 (0x0010 - 0x0000)
struct FBC_EventPageInactive final
{
public:
	TArray<struct FItemID_EventPage>              EPIDs;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_EventPageInactive) == 0x000008, "Wrong alignment on FBC_EventPageInactive");
static_assert(sizeof(FBC_EventPageInactive) == 0x000010, "Wrong size on FBC_EventPageInactive");
static_assert(offsetof(FBC_EventPageInactive, EPIDs) == 0x000000, "Member 'FBC_EventPageInactive::EPIDs' has a wrong offset!");

// ScriptStruct Stigma.REQ_EventPageReward
// 0x0018 (0x0018 - 0x0000)
struct FREQ_EventPageReward final
{
public:
	struct FItemID_EventPage                      EPIDN;                                             // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOption;                                          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_EventPageReward) == 0x000008, "Wrong alignment on FREQ_EventPageReward");
static_assert(sizeof(FREQ_EventPageReward) == 0x000018, "Wrong size on FREQ_EventPageReward");
static_assert(offsetof(FREQ_EventPageReward, EPIDN) == 0x000000, "Member 'FREQ_EventPageReward::EPIDN' has a wrong offset!");
static_assert(offsetof(FREQ_EventPageReward, IsOption) == 0x000010, "Member 'FREQ_EventPageReward::IsOption' has a wrong offset!");

// ScriptStruct Stigma.BC_BattlePassRefresh
// 0x0010 (0x0010 - 0x0000)
struct FBC_BattlePassRefresh final
{
public:
	TArray<struct FNetBattlePass>                 Pass;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_BattlePassRefresh) == 0x000008, "Wrong alignment on FBC_BattlePassRefresh");
static_assert(sizeof(FBC_BattlePassRefresh) == 0x000010, "Wrong size on FBC_BattlePassRefresh");
static_assert(offsetof(FBC_BattlePassRefresh, Pass) == 0x000000, "Member 'FBC_BattlePassRefresh::Pass' has a wrong offset!");

// ScriptStruct Stigma.REQ_BattlePassActivate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_BattlePassActivate final
{
public:
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_BattlePassActivate) == 0x000008, "Wrong alignment on FREQ_BattlePassActivate");
static_assert(sizeof(FREQ_BattlePassActivate) == 0x000010, "Wrong size on FREQ_BattlePassActivate");
static_assert(offsetof(FREQ_BattlePassActivate, PassIDN) == 0x000000, "Member 'FREQ_BattlePassActivate::PassIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_BattlePassBuy
// 0x0018 (0x0018 - 0x0000)
struct FREQ_BattlePassBuy final
{
public:
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlus;                                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_BattlePassBuy) == 0x000008, "Wrong alignment on FREQ_BattlePassBuy");
static_assert(sizeof(FREQ_BattlePassBuy) == 0x000018, "Wrong size on FREQ_BattlePassBuy");
static_assert(offsetof(FREQ_BattlePassBuy, PassIDN) == 0x000000, "Member 'FREQ_BattlePassBuy::PassIDN' has a wrong offset!");
static_assert(offsetof(FREQ_BattlePassBuy, IsPlus) == 0x000010, "Member 'FREQ_BattlePassBuy::IsPlus' has a wrong offset!");

// ScriptStruct Stigma.ACK_BattlePassBuy
// 0x0058 (0x0058 - 0x0000)
struct FACK_BattlePassBuy final
{
public:
	struct FNetBattlePass                         Pass;                                              // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRewardPlain                           RewardPlain;                                       // 0x0028(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCurrencyPlain>                 Balance;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BattlePassBuy) == 0x000008, "Wrong alignment on FACK_BattlePassBuy");
static_assert(sizeof(FACK_BattlePassBuy) == 0x000058, "Wrong size on FACK_BattlePassBuy");
static_assert(offsetof(FACK_BattlePassBuy, Pass) == 0x000000, "Member 'FACK_BattlePassBuy::Pass' has a wrong offset!");
static_assert(offsetof(FACK_BattlePassBuy, RewardPlain) == 0x000028, "Member 'FACK_BattlePassBuy::RewardPlain' has a wrong offset!");
static_assert(offsetof(FACK_BattlePassBuy, Balance) == 0x000048, "Member 'FACK_BattlePassBuy::Balance' has a wrong offset!");

// ScriptStruct Stigma.REQ_BattlePassReward
// 0x0018 (0x0018 - 0x0000)
struct FREQ_BattlePassReward final
{
public:
	struct FItemID_BattlePass                     PassIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_BattlePassReward) == 0x000008, "Wrong alignment on FREQ_BattlePassReward");
static_assert(sizeof(FREQ_BattlePassReward) == 0x000018, "Wrong size on FREQ_BattlePassReward");
static_assert(offsetof(FREQ_BattlePassReward, PassIDN) == 0x000000, "Member 'FREQ_BattlePassReward::PassIDN' has a wrong offset!");
static_assert(offsetof(FREQ_BattlePassReward, Level) == 0x000010, "Member 'FREQ_BattlePassReward::Level' has a wrong offset!");

// ScriptStruct Stigma.BC_MissionRefresh
// 0x0010 (0x0010 - 0x0000)
struct FBC_MissionRefresh final
{
public:
	TArray<struct FNetMission>                    MData;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_MissionRefresh) == 0x000008, "Wrong alignment on FBC_MissionRefresh");
static_assert(sizeof(FBC_MissionRefresh) == 0x000010, "Wrong size on FBC_MissionRefresh");
static_assert(offsetof(FBC_MissionRefresh, MData) == 0x000000, "Member 'FBC_MissionRefresh::MData' has a wrong offset!");

// ScriptStruct Stigma.REQ_MissionRead
// 0x0010 (0x0010 - 0x0000)
struct FREQ_MissionRead final
{
public:
	TArray<struct FItemID>                        TAIDs;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_MissionRead) == 0x000008, "Wrong alignment on FREQ_MissionRead");
static_assert(sizeof(FREQ_MissionRead) == 0x000010, "Wrong size on FREQ_MissionRead");
static_assert(offsetof(FREQ_MissionRead, TAIDs) == 0x000000, "Member 'FREQ_MissionRead::TAIDs' has a wrong offset!");

// ScriptStruct Stigma.REQ_MissionBookmark
// 0x0028 (0x0028 - 0x0000)
struct FREQ_MissionBookmark final
{
public:
	struct FItemID                                TAID;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Idx;                                               // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        MIID;                                              // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_MissionBookmark) == 0x000008, "Wrong alignment on FREQ_MissionBookmark");
static_assert(sizeof(FREQ_MissionBookmark) == 0x000028, "Wrong size on FREQ_MissionBookmark");
static_assert(offsetof(FREQ_MissionBookmark, TAID) == 0x000000, "Member 'FREQ_MissionBookmark::TAID' has a wrong offset!");
static_assert(offsetof(FREQ_MissionBookmark, Idx) == 0x000010, "Member 'FREQ_MissionBookmark::Idx' has a wrong offset!");
static_assert(offsetof(FREQ_MissionBookmark, MIID) == 0x000018, "Member 'FREQ_MissionBookmark::MIID' has a wrong offset!");

// ScriptStruct Stigma.REQ_MissionReward
// 0x0028 (0x0028 - 0x0000)
struct FREQ_MissionReward final
{
public:
	struct FTaskMission                           Mission;                                           // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_MissionReward) == 0x000008, "Wrong alignment on FREQ_MissionReward");
static_assert(sizeof(FREQ_MissionReward) == 0x000028, "Wrong size on FREQ_MissionReward");
static_assert(offsetof(FREQ_MissionReward, Mission) == 0x000000, "Member 'FREQ_MissionReward::Mission' has a wrong offset!");

// ScriptStruct Stigma.ACK_AutoMissionReward
// 0x0030 (0x0030 - 0x0000)
struct FACK_AutoMissionReward final
{
public:
	TArray<struct FNetMission>                    MData;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRewardPlain                           Rwd;                                               // 0x0010(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_AutoMissionReward) == 0x000008, "Wrong alignment on FACK_AutoMissionReward");
static_assert(sizeof(FACK_AutoMissionReward) == 0x000030, "Wrong size on FACK_AutoMissionReward");
static_assert(offsetof(FACK_AutoMissionReward, MData) == 0x000000, "Member 'FACK_AutoMissionReward::MData' has a wrong offset!");
static_assert(offsetof(FACK_AutoMissionReward, Rwd) == 0x000010, "Member 'FACK_AutoMissionReward::Rwd' has a wrong offset!");

// ScriptStruct Stigma.REQ_MissionChange
// 0x0028 (0x0028 - 0x0000)
struct FREQ_MissionChange final
{
public:
	struct FItemID                                TAID;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Idx;                                               // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC7[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        MIID;                                              // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_MissionChange) == 0x000008, "Wrong alignment on FREQ_MissionChange");
static_assert(sizeof(FREQ_MissionChange) == 0x000028, "Wrong size on FREQ_MissionChange");
static_assert(offsetof(FREQ_MissionChange, TAID) == 0x000000, "Member 'FREQ_MissionChange::TAID' has a wrong offset!");
static_assert(offsetof(FREQ_MissionChange, Idx) == 0x000010, "Member 'FREQ_MissionChange::Idx' has a wrong offset!");
static_assert(offsetof(FREQ_MissionChange, MIID) == 0x000018, "Member 'FREQ_MissionChange::MIID' has a wrong offset!");

// ScriptStruct Stigma.REQ_UpdateMissionCount
// 0x0030 (0x0030 - 0x0000)
struct FREQ_UpdateMissionCount final
{
public:
	struct FItemID                                TAID;                                              // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Idx;                                               // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemID_Mission                        MIID;                                              // 0x0018(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cnt;                                               // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC9[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_UpdateMissionCount) == 0x000008, "Wrong alignment on FREQ_UpdateMissionCount");
static_assert(sizeof(FREQ_UpdateMissionCount) == 0x000030, "Wrong size on FREQ_UpdateMissionCount");
static_assert(offsetof(FREQ_UpdateMissionCount, TAID) == 0x000000, "Member 'FREQ_UpdateMissionCount::TAID' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateMissionCount, Idx) == 0x000010, "Member 'FREQ_UpdateMissionCount::Idx' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateMissionCount, MIID) == 0x000018, "Member 'FREQ_UpdateMissionCount::MIID' has a wrong offset!");
static_assert(offsetof(FREQ_UpdateMissionCount, Cnt) == 0x000028, "Member 'FREQ_UpdateMissionCount::Cnt' has a wrong offset!");

// ScriptStruct Stigma.BC_UserUpdate
// 0x0020 (0x0020 - 0x0000)
struct FBC_UserUpdate final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaExp;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetInvenItem>                  InvenItem;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_UserUpdate) == 0x000008, "Wrong alignment on FBC_UserUpdate");
static_assert(sizeof(FBC_UserUpdate) == 0x000020, "Wrong size on FBC_UserUpdate");
static_assert(offsetof(FBC_UserUpdate, Level) == 0x000000, "Member 'FBC_UserUpdate::Level' has a wrong offset!");
static_assert(offsetof(FBC_UserUpdate, DeltaExp) == 0x000004, "Member 'FBC_UserUpdate::DeltaExp' has a wrong offset!");
static_assert(offsetof(FBC_UserUpdate, Tier) == 0x000008, "Member 'FBC_UserUpdate::Tier' has a wrong offset!");
static_assert(offsetof(FBC_UserUpdate, InvenItem) == 0x000010, "Member 'FBC_UserUpdate::InvenItem' has a wrong offset!");

// ScriptStruct Stigma.BC_SlotUpdate
// 0x0030 (0x0030 - 0x0000)
struct FBC_SlotUpdate final
{
public:
	struct FUserSlots                             Slot;                                              // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_SlotUpdate) == 0x000008, "Wrong alignment on FBC_SlotUpdate");
static_assert(sizeof(FBC_SlotUpdate) == 0x000030, "Wrong size on FBC_SlotUpdate");
static_assert(offsetof(FBC_SlotUpdate, Slot) == 0x000000, "Member 'FBC_SlotUpdate::Slot' has a wrong offset!");

// ScriptStruct Stigma.BC_CurrencyUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_CurrencyUpdate final
{
public:
	TArray<struct FCurrencyPlain>                 Currency;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_CurrencyUpdate) == 0x000008, "Wrong alignment on FBC_CurrencyUpdate");
static_assert(sizeof(FBC_CurrencyUpdate) == 0x000010, "Wrong size on FBC_CurrencyUpdate");
static_assert(offsetof(FBC_CurrencyUpdate, Currency) == 0x000000, "Member 'FBC_CurrencyUpdate::Currency' has a wrong offset!");

// ScriptStruct Stigma.BC_Matched
// 0x0028 (0x0028 - 0x0000)
struct FBC_Matched final
{
public:
	EPlayerStatus                                 PlayerStatus;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FMatchMakingInfo                       MatchMakingInfo;                                   // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_Matched) == 0x000008, "Wrong alignment on FBC_Matched");
static_assert(sizeof(FBC_Matched) == 0x000028, "Wrong size on FBC_Matched");
static_assert(offsetof(FBC_Matched, PlayerStatus) == 0x000000, "Member 'FBC_Matched::PlayerStatus' has a wrong offset!");
static_assert(offsetof(FBC_Matched, MatchMakingInfo) == 0x000008, "Member 'FBC_Matched::MatchMakingInfo' has a wrong offset!");

// ScriptStruct Stigma.BC_CompetitionUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_CompetitionUpdate final
{
public:
	TArray<struct FNetCompetitionBriefPlayer>     PlayerInfo;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_CompetitionUpdate) == 0x000008, "Wrong alignment on FBC_CompetitionUpdate");
static_assert(sizeof(FBC_CompetitionUpdate) == 0x000010, "Wrong size on FBC_CompetitionUpdate");
static_assert(offsetof(FBC_CompetitionUpdate, PlayerInfo) == 0x000000, "Member 'FBC_CompetitionUpdate::PlayerInfo' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadCompetitionPlayers
// 0x0001 (0x0001 - 0x0000)
struct FREQ_ReadCompetitionPlayers final
{
public:
	uint8                                         Pad_1ECC[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadCompetitionPlayers) == 0x000001, "Wrong alignment on FREQ_ReadCompetitionPlayers");
static_assert(sizeof(FREQ_ReadCompetitionPlayers) == 0x000001, "Wrong size on FREQ_ReadCompetitionPlayers");

// ScriptStruct Stigma.REQ_FastStartCompetition
// 0x0020 (0x0020 - 0x0000)
struct FREQ_FastStartCompetition final
{
public:
	ECompetitionType                              CompetitionType;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FCurrencyPlain                         Currency;                                          // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_FastStartCompetition) == 0x000008, "Wrong alignment on FREQ_FastStartCompetition");
static_assert(sizeof(FREQ_FastStartCompetition) == 0x000020, "Wrong size on FREQ_FastStartCompetition");
static_assert(offsetof(FREQ_FastStartCompetition, CompetitionType) == 0x000000, "Member 'FREQ_FastStartCompetition::CompetitionType' has a wrong offset!");
static_assert(offsetof(FREQ_FastStartCompetition, Currency) == 0x000008, "Member 'FREQ_FastStartCompetition::Currency' has a wrong offset!");

// ScriptStruct Stigma.Friend
// 0x0000 (0x0168 - 0x0168)
struct FFriend final : public FUserProfileBase
{
};
static_assert(alignof(FFriend) == 0x000008, "Wrong alignment on FFriend");
static_assert(sizeof(FFriend) == 0x000168, "Wrong size on FFriend");

// ScriptStruct Stigma.ACK_FriendList
// 0x0018 (0x0018 - 0x0000)
struct FACK_FriendList final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFriend>                        Friend;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_FriendList) == 0x000008, "Wrong alignment on FACK_FriendList");
static_assert(sizeof(FACK_FriendList) == 0x000018, "Wrong size on FACK_FriendList");
static_assert(offsetof(FACK_FriendList, Offset) == 0x000000, "Member 'FACK_FriendList::Offset' has a wrong offset!");
static_assert(offsetof(FACK_FriendList, Limit) == 0x000004, "Member 'FACK_FriendList::Limit' has a wrong offset!");
static_assert(offsetof(FACK_FriendList, Friend) == 0x000008, "Member 'FACK_FriendList::Friend' has a wrong offset!");

// ScriptStruct Stigma.REQ_Friend
// 0x0010 (0x0010 - 0x0000)
struct FREQ_Friend final
{
public:
	struct FUserID                                FromIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_Friend) == 0x000008, "Wrong alignment on FREQ_Friend");
static_assert(sizeof(FREQ_Friend) == 0x000010, "Wrong size on FREQ_Friend");
static_assert(offsetof(FREQ_Friend, FromIDN) == 0x000000, "Member 'FREQ_Friend::FromIDN' has a wrong offset!");
static_assert(offsetof(FREQ_Friend, ToIDN) == 0x000008, "Member 'FREQ_Friend::ToIDN' has a wrong offset!");

// ScriptStruct Stigma.BC_FriendAskCreate
// 0x0020 (0x0020 - 0x0000)
struct FBC_FriendAskCreate final
{
public:
	struct FUserID                                FromIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              FromNick;                                          // 0x0008(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_FriendAskCreate) == 0x000008, "Wrong alignment on FBC_FriendAskCreate");
static_assert(sizeof(FBC_FriendAskCreate) == 0x000020, "Wrong size on FBC_FriendAskCreate");
static_assert(offsetof(FBC_FriendAskCreate, FromIDN) == 0x000000, "Member 'FBC_FriendAskCreate::FromIDN' has a wrong offset!");
static_assert(offsetof(FBC_FriendAskCreate, FromNick) == 0x000008, "Member 'FBC_FriendAskCreate::FromNick' has a wrong offset!");

// ScriptStruct Stigma.REQ_FriendUpdate
// 0x0018 (0x0018 - 0x0000)
struct FREQ_FriendUpdate final
{
public:
	struct FUserID                                Asker;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                Replyer;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accept;                                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECE[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_FriendUpdate) == 0x000008, "Wrong alignment on FREQ_FriendUpdate");
static_assert(sizeof(FREQ_FriendUpdate) == 0x000018, "Wrong size on FREQ_FriendUpdate");
static_assert(offsetof(FREQ_FriendUpdate, Asker) == 0x000000, "Member 'FREQ_FriendUpdate::Asker' has a wrong offset!");
static_assert(offsetof(FREQ_FriendUpdate, Replyer) == 0x000008, "Member 'FREQ_FriendUpdate::Replyer' has a wrong offset!");
static_assert(offsetof(FREQ_FriendUpdate, Accept) == 0x000010, "Member 'FREQ_FriendUpdate::Accept' has a wrong offset!");

// ScriptStruct Stigma.REQ_FriendDelete
// 0x0008 (0x0008 - 0x0000)
struct FREQ_FriendDelete final
{
public:
	struct FUserID                                FriendID;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_FriendDelete) == 0x000008, "Wrong alignment on FREQ_FriendDelete");
static_assert(sizeof(FREQ_FriendDelete) == 0x000008, "Wrong size on FREQ_FriendDelete");
static_assert(offsetof(FREQ_FriendDelete, FriendID) == 0x000000, "Member 'FREQ_FriendDelete::FriendID' has a wrong offset!");

// ScriptStruct Stigma.ACK_FriendDelete
// 0x0008 (0x0008 - 0x0000)
struct FACK_FriendDelete final
{
public:
	struct FUserID                                FriendID;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_FriendDelete) == 0x000008, "Wrong alignment on FACK_FriendDelete");
static_assert(sizeof(FACK_FriendDelete) == 0x000008, "Wrong size on FACK_FriendDelete");
static_assert(offsetof(FACK_FriendDelete, FriendID) == 0x000000, "Member 'FACK_FriendDelete::FriendID' has a wrong offset!");

// ScriptStruct Stigma.REQ_PartyMatch
// 0x0058 (0x0058 - 0x0000)
struct FREQ_PartyMatch final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                LeaderIDN;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleIDS;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchOption                           MatchOption;                                       // 0x0020(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_PartyMatch) == 0x000008, "Wrong alignment on FREQ_PartyMatch");
static_assert(sizeof(FREQ_PartyMatch) == 0x000058, "Wrong size on FREQ_PartyMatch");
static_assert(offsetof(FREQ_PartyMatch, PartyIDN) == 0x000000, "Member 'FREQ_PartyMatch::PartyIDN' has a wrong offset!");
static_assert(offsetof(FREQ_PartyMatch, LeaderIDN) == 0x000008, "Member 'FREQ_PartyMatch::LeaderIDN' has a wrong offset!");
static_assert(offsetof(FREQ_PartyMatch, BattleIDS) == 0x000010, "Member 'FREQ_PartyMatch::BattleIDS' has a wrong offset!");
static_assert(offsetof(FREQ_PartyMatch, MatchOption) == 0x000020, "Member 'FREQ_PartyMatch::MatchOption' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyInvite
// 0x0018 (0x0018 - 0x0000)
struct FACK_PartyInvite final
{
public:
	struct FUserID                                Friend;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nick;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_PartyInvite) == 0x000008, "Wrong alignment on FACK_PartyInvite");
static_assert(sizeof(FACK_PartyInvite) == 0x000018, "Wrong size on FACK_PartyInvite");
static_assert(offsetof(FACK_PartyInvite, Friend) == 0x000000, "Member 'FACK_PartyInvite::Friend' has a wrong offset!");
static_assert(offsetof(FACK_PartyInvite, Nick) == 0x000008, "Member 'FACK_PartyInvite::Nick' has a wrong offset!");

// ScriptStruct Stigma.CACK_PartyInvite
// 0x0020 (0x0020 - 0x0000)
struct FCACK_PartyInvite final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                FromIDN;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Accept;                                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ECF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FCACK_PartyInvite) == 0x000008, "Wrong alignment on FCACK_PartyInvite");
static_assert(sizeof(FCACK_PartyInvite) == 0x000020, "Wrong size on FCACK_PartyInvite");
static_assert(offsetof(FCACK_PartyInvite, PartyIDN) == 0x000000, "Member 'FCACK_PartyInvite::PartyIDN' has a wrong offset!");
static_assert(offsetof(FCACK_PartyInvite, FromIDN) == 0x000008, "Member 'FCACK_PartyInvite::FromIDN' has a wrong offset!");
static_assert(offsetof(FCACK_PartyInvite, ToIDN) == 0x000010, "Member 'FCACK_PartyInvite::ToIDN' has a wrong offset!");
static_assert(offsetof(FCACK_PartyInvite, Accept) == 0x000018, "Member 'FCACK_PartyInvite::Accept' has a wrong offset!");

// ScriptStruct Stigma.REQ_PartyDelete
// 0x0008 (0x0008 - 0x0000)
struct FREQ_PartyDelete final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_PartyDelete) == 0x000008, "Wrong alignment on FREQ_PartyDelete");
static_assert(sizeof(FREQ_PartyDelete) == 0x000008, "Wrong size on FREQ_PartyDelete");
static_assert(offsetof(FREQ_PartyDelete, UserIDN) == 0x000000, "Member 'FREQ_PartyDelete::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_PartyLeaderUpdate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_PartyLeaderUpdate final
{
public:
	struct FUserID                                FromIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_PartyLeaderUpdate) == 0x000008, "Wrong alignment on FREQ_PartyLeaderUpdate");
static_assert(sizeof(FREQ_PartyLeaderUpdate) == 0x000010, "Wrong size on FREQ_PartyLeaderUpdate");
static_assert(offsetof(FREQ_PartyLeaderUpdate, FromIDN) == 0x000000, "Member 'FREQ_PartyLeaderUpdate::FromIDN' has a wrong offset!");
static_assert(offsetof(FREQ_PartyLeaderUpdate, ToIDN) == 0x000008, "Member 'FREQ_PartyLeaderUpdate::ToIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_PartyChat
// 0x0018 (0x0018 - 0x0000)
struct FREQ_PartyChat final
{
public:
	struct FUserID                                SendIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_PartyChat) == 0x000008, "Wrong alignment on FREQ_PartyChat");
static_assert(sizeof(FREQ_PartyChat) == 0x000018, "Wrong size on FREQ_PartyChat");
static_assert(offsetof(FREQ_PartyChat, SendIDN) == 0x000000, "Member 'FREQ_PartyChat::SendIDN' has a wrong offset!");
static_assert(offsetof(FREQ_PartyChat, Msg) == 0x000008, "Member 'FREQ_PartyChat::Msg' has a wrong offset!");

// ScriptStruct Stigma.REQ_InviteToBattle_Reply
// 0x0030 (0x0030 - 0x0000)
struct FREQ_InviteToBattle_Reply final
{
public:
	bool                                          IsCustomGame;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 BattleIDS;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                FromIDN;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInviteReply                           ACKCode;                                           // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED1[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_InviteToBattle_Reply) == 0x000008, "Wrong alignment on FREQ_InviteToBattle_Reply");
static_assert(sizeof(FREQ_InviteToBattle_Reply) == 0x000030, "Wrong size on FREQ_InviteToBattle_Reply");
static_assert(offsetof(FREQ_InviteToBattle_Reply, IsCustomGame) == 0x000000, "Member 'FREQ_InviteToBattle_Reply::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle_Reply, BattleIDS) == 0x000008, "Member 'FREQ_InviteToBattle_Reply::BattleIDS' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle_Reply, FromIDN) == 0x000018, "Member 'FREQ_InviteToBattle_Reply::FromIDN' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle_Reply, ToIDN) == 0x000020, "Member 'FREQ_InviteToBattle_Reply::ToIDN' has a wrong offset!");
static_assert(offsetof(FREQ_InviteToBattle_Reply, ACKCode) == 0x000028, "Member 'FREQ_InviteToBattle_Reply::ACKCode' has a wrong offset!");

// ScriptStruct Stigma.REQ_ClientConfigRead
// 0x0001 (0x0001 - 0x0000)
struct FREQ_ClientConfigRead final
{
public:
	uint8                                         Pad_1ED2[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ClientConfigRead) == 0x000001, "Wrong alignment on FREQ_ClientConfigRead");
static_assert(sizeof(FREQ_ClientConfigRead) == 0x000001, "Wrong size on FREQ_ClientConfigRead");

// ScriptStruct Stigma.REQ_ClientConfigUpdate
// 0x0038 (0x0038 - 0x0000)
struct FREQ_ClientConfigUpdate final
{
public:
	struct FUserConfig                            Config;                                            // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ClientConfigUpdate) == 0x000008, "Wrong alignment on FREQ_ClientConfigUpdate");
static_assert(sizeof(FREQ_ClientConfigUpdate) == 0x000038, "Wrong size on FREQ_ClientConfigUpdate");
static_assert(offsetof(FREQ_ClientConfigUpdate, Config) == 0x000000, "Member 'FREQ_ClientConfigUpdate::Config' has a wrong offset!");

// ScriptStruct Stigma.BC_SystemAlert
// 0x0020 (0x0020 - 0x0000)
struct FBC_SystemAlert final
{
public:
	struct FDateTime                              StartAt;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndAt;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_SystemAlert) == 0x000008, "Wrong alignment on FBC_SystemAlert");
static_assert(sizeof(FBC_SystemAlert) == 0x000020, "Wrong size on FBC_SystemAlert");
static_assert(offsetof(FBC_SystemAlert, StartAt) == 0x000000, "Member 'FBC_SystemAlert::StartAt' has a wrong offset!");
static_assert(offsetof(FBC_SystemAlert, EndAt) == 0x000008, "Member 'FBC_SystemAlert::EndAt' has a wrong offset!");
static_assert(offsetof(FBC_SystemAlert, Msg) == 0x000010, "Member 'FBC_SystemAlert::Msg' has a wrong offset!");

// ScriptStruct Stigma.Announce
// 0x0028 (0x0028 - 0x0000)
struct FAnnounce final
{
public:
	EAnnounceUIType                               UIType;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Msg;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Speed;                                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED4[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAnnounce) == 0x000008, "Wrong alignment on FAnnounce");
static_assert(sizeof(FAnnounce) == 0x000028, "Wrong size on FAnnounce");
static_assert(offsetof(FAnnounce, UIType) == 0x000000, "Member 'FAnnounce::UIType' has a wrong offset!");
static_assert(offsetof(FAnnounce, Msg) == 0x000008, "Member 'FAnnounce::Msg' has a wrong offset!");
static_assert(offsetof(FAnnounce, Speed) == 0x000018, "Member 'FAnnounce::Speed' has a wrong offset!");
static_assert(offsetof(FAnnounce, Count) == 0x00001C, "Member 'FAnnounce::Count' has a wrong offset!");
static_assert(offsetof(FAnnounce, Delay) == 0x000020, "Member 'FAnnounce::Delay' has a wrong offset!");

// ScriptStruct Stigma.BC_Announce
// 0x0028 (0x0028 - 0x0000)
struct FBC_Announce final
{
public:
	struct FAnnounce                              Announce;                                          // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_Announce) == 0x000008, "Wrong alignment on FBC_Announce");
static_assert(sizeof(FBC_Announce) == 0x000028, "Wrong size on FBC_Announce");
static_assert(offsetof(FBC_Announce, Announce) == 0x000000, "Member 'FBC_Announce::Announce' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadSurvey
// 0x0004 (0x0004 - 0x0000)
struct FREQ_ReadSurvey final
{
public:
	int32                                         SurveyIDN;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ReadSurvey) == 0x000004, "Wrong alignment on FREQ_ReadSurvey");
static_assert(sizeof(FREQ_ReadSurvey) == 0x000004, "Wrong size on FREQ_ReadSurvey");
static_assert(offsetof(FREQ_ReadSurvey, SurveyIDN) == 0x000000, "Member 'FREQ_ReadSurvey::SurveyIDN' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadSurvey
// 0x0040 (0x0040 - 0x0000)
struct FACK_ReadSurvey final
{
public:
	struct FSurvey                                Survey;                                            // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED5[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_ReadSurvey) == 0x000008, "Wrong alignment on FACK_ReadSurvey");
static_assert(sizeof(FACK_ReadSurvey) == 0x000040, "Wrong size on FACK_ReadSurvey");
static_assert(offsetof(FACK_ReadSurvey, Survey) == 0x000000, "Member 'FACK_ReadSurvey::Survey' has a wrong offset!");
static_assert(offsetof(FACK_ReadSurvey, Level) == 0x000038, "Member 'FACK_ReadSurvey::Level' has a wrong offset!");

// ScriptStruct Stigma.BC_Reward
// 0x0028 (0x0028 - 0x0000)
struct FBC_Reward final
{
public:
	struct FRewardPlain                           RewardPlain;                                       // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Popup;                                             // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_Reward) == 0x000008, "Wrong alignment on FBC_Reward");
static_assert(sizeof(FBC_Reward) == 0x000028, "Wrong size on FBC_Reward");
static_assert(offsetof(FBC_Reward, RewardPlain) == 0x000000, "Member 'FBC_Reward::RewardPlain' has a wrong offset!");
static_assert(offsetof(FBC_Reward, Popup) == 0x000020, "Member 'FBC_Reward::Popup' has a wrong offset!");

// ScriptStruct Stigma.UpdateGMFunction
// 0x0050 (0x0050 - 0x0000)
struct FUpdateGMFunction final
{
public:
	bool                                          IsRemove;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	struct FGMFunction                            GMFunction;                                        // 0x0008(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUpdateGMFunction) == 0x000008, "Wrong alignment on FUpdateGMFunction");
static_assert(sizeof(FUpdateGMFunction) == 0x000050, "Wrong size on FUpdateGMFunction");
static_assert(offsetof(FUpdateGMFunction, IsRemove) == 0x000000, "Member 'FUpdateGMFunction::IsRemove' has a wrong offset!");
static_assert(offsetof(FUpdateGMFunction, GMFunction) == 0x000008, "Member 'FUpdateGMFunction::GMFunction' has a wrong offset!");

// ScriptStruct Stigma.BC_UpdateActiveGMFunction
// 0x0010 (0x0010 - 0x0000)
struct FBC_UpdateActiveGMFunction final
{
public:
	TArray<struct FUpdateGMFunction>              GMFunction;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_UpdateActiveGMFunction) == 0x000008, "Wrong alignment on FBC_UpdateActiveGMFunction");
static_assert(sizeof(FBC_UpdateActiveGMFunction) == 0x000010, "Wrong size on FBC_UpdateActiveGMFunction");
static_assert(offsetof(FBC_UpdateActiveGMFunction, GMFunction) == 0x000000, "Member 'FBC_UpdateActiveGMFunction::GMFunction' has a wrong offset!");

// ScriptStruct Stigma.BC_UpdateInven
// 0x0018 (0x0018 - 0x0000)
struct FBC_UpdateInven final
{
public:
	bool                                          IsRemove;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetInvenItem>                  InvenItem;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_UpdateInven) == 0x000008, "Wrong alignment on FBC_UpdateInven");
static_assert(sizeof(FBC_UpdateInven) == 0x000018, "Wrong size on FBC_UpdateInven");
static_assert(offsetof(FBC_UpdateInven, IsRemove) == 0x000000, "Member 'FBC_UpdateInven::IsRemove' has a wrong offset!");
static_assert(offsetof(FBC_UpdateInven, InvenItem) == 0x000008, "Member 'FBC_UpdateInven::InvenItem' has a wrong offset!");

// ScriptStruct Stigma.BC_CreateGun
// 0x0010 (0x0010 - 0x0000)
struct FBC_CreateGun final
{
public:
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_CreateGun) == 0x000008, "Wrong alignment on FBC_CreateGun");
static_assert(sizeof(FBC_CreateGun) == 0x000010, "Wrong size on FBC_CreateGun");
static_assert(offsetof(FBC_CreateGun, GunSpec) == 0x000000, "Member 'FBC_CreateGun::GunSpec' has a wrong offset!");

// ScriptStruct Stigma.BC_LoginNotice
// 0x0028 (0x0028 - 0x0000)
struct FBC_LoginNotice final
{
public:
	struct FLoginNotice                           Notice;                                            // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Banner;                                            // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_LoginNotice) == 0x000008, "Wrong alignment on FBC_LoginNotice");
static_assert(sizeof(FBC_LoginNotice) == 0x000028, "Wrong size on FBC_LoginNotice");
static_assert(offsetof(FBC_LoginNotice, Notice) == 0x000000, "Member 'FBC_LoginNotice::Notice' has a wrong offset!");
static_assert(offsetof(FBC_LoginNotice, Banner) == 0x000018, "Member 'FBC_LoginNotice::Banner' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReadGoods
// 0x0010 (0x0010 - 0x0000)
struct FACK_ReadGoods final
{
public:
	TArray<struct FNetGoods>                      Goods;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ReadGoods) == 0x000008, "Wrong alignment on FACK_ReadGoods");
static_assert(sizeof(FACK_ReadGoods) == 0x000010, "Wrong size on FACK_ReadGoods");
static_assert(offsetof(FACK_ReadGoods, Goods) == 0x000000, "Member 'FACK_ReadGoods::Goods' has a wrong offset!");

// ScriptStruct Stigma.REQ_OpenInvenItems
// 0x0010 (0x0010 - 0x0000)
struct FREQ_OpenInvenItems final
{
public:
	TArray<struct FItemID>                        ItemID;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_OpenInvenItems) == 0x000008, "Wrong alignment on FREQ_OpenInvenItems");
static_assert(sizeof(FREQ_OpenInvenItems) == 0x000010, "Wrong size on FREQ_OpenInvenItems");
static_assert(offsetof(FREQ_OpenInvenItems, ItemID) == 0x000000, "Member 'FREQ_OpenInvenItems::ItemID' has a wrong offset!");

// ScriptStruct Stigma.REQ_UpdateGunSpec
// 0x0010 (0x0010 - 0x0000)
struct FREQ_UpdateGunSpec final
{
public:
	TArray<struct FGunSpec>                       GunSpec;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_UpdateGunSpec) == 0x000008, "Wrong alignment on FREQ_UpdateGunSpec");
static_assert(sizeof(FREQ_UpdateGunSpec) == 0x000010, "Wrong size on FREQ_UpdateGunSpec");
static_assert(offsetof(FREQ_UpdateGunSpec, GunSpec) == 0x000000, "Member 'FREQ_UpdateGunSpec::GunSpec' has a wrong offset!");

// ScriptStruct Stigma.REQ_UpdatePassiveSkillLevel
// 0x0010 (0x0010 - 0x0000)
struct FREQ_UpdatePassiveSkillLevel final
{
public:
	TArray<struct FPassiveSkill>                  PassiveSkills;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_UpdatePassiveSkillLevel) == 0x000008, "Wrong alignment on FREQ_UpdatePassiveSkillLevel");
static_assert(sizeof(FREQ_UpdatePassiveSkillLevel) == 0x000010, "Wrong size on FREQ_UpdatePassiveSkillLevel");
static_assert(offsetof(FREQ_UpdatePassiveSkillLevel, PassiveSkills) == 0x000000, "Member 'FREQ_UpdatePassiveSkillLevel::PassiveSkills' has a wrong offset!");

// ScriptStruct Stigma.REQ_ResetSkillPoint
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ResetSkillPoint final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ResetSkillPoint) == 0x000008, "Wrong alignment on FREQ_ResetSkillPoint");
static_assert(sizeof(FREQ_ResetSkillPoint) == 0x000010, "Wrong size on FREQ_ResetSkillPoint");
static_assert(offsetof(FREQ_ResetSkillPoint, ItemIDN) == 0x000000, "Member 'FREQ_ResetSkillPoint::ItemIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_ChangeNickname
// 0x0020 (0x0020 - 0x0000)
struct FREQ_ChangeNickname final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nickname;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ChangeNickname) == 0x000008, "Wrong alignment on FREQ_ChangeNickname");
static_assert(sizeof(FREQ_ChangeNickname) == 0x000020, "Wrong size on FREQ_ChangeNickname");
static_assert(offsetof(FREQ_ChangeNickname, ItemIDN) == 0x000000, "Member 'FREQ_ChangeNickname::ItemIDN' has a wrong offset!");
static_assert(offsetof(FREQ_ChangeNickname, Nickname) == 0x000010, "Member 'FREQ_ChangeNickname::Nickname' has a wrong offset!");

// ScriptStruct Stigma.ACK_ChangeNickname
// 0x0018 (0x0018 - 0x0000)
struct FACK_ChangeNickname final
{
public:
	struct FUserName                              Nickname;                                          // 0x0000(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_ChangeNickname) == 0x000008, "Wrong alignment on FACK_ChangeNickname");
static_assert(sizeof(FACK_ChangeNickname) == 0x000018, "Wrong size on FACK_ChangeNickname");
static_assert(offsetof(FACK_ChangeNickname, Nickname) == 0x000000, "Member 'FACK_ChangeNickname::Nickname' has a wrong offset!");

// ScriptStruct Stigma.ACK_CharacterPick
// 0x0028 (0x0028 - 0x0000)
struct FACK_CharacterPick final
{
public:
	ECharaType                                    Selected;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FNetCharacter>                  CharInfo;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNetInvenItem>                  InvenItem;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_CharacterPick) == 0x000008, "Wrong alignment on FACK_CharacterPick");
static_assert(sizeof(FACK_CharacterPick) == 0x000028, "Wrong size on FACK_CharacterPick");
static_assert(offsetof(FACK_CharacterPick, Selected) == 0x000000, "Member 'FACK_CharacterPick::Selected' has a wrong offset!");
static_assert(offsetof(FACK_CharacterPick, CharInfo) == 0x000008, "Member 'FACK_CharacterPick::CharInfo' has a wrong offset!");
static_assert(offsetof(FACK_CharacterPick, InvenItem) == 0x000018, "Member 'FACK_CharacterPick::InvenItem' has a wrong offset!");

// ScriptStruct Stigma.REQ_MailRead
// 0x0001 (0x0001 - 0x0000)
struct FREQ_MailRead final
{
public:
	uint8                                         Pad_1EDA[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_MailRead) == 0x000001, "Wrong alignment on FREQ_MailRead");
static_assert(sizeof(FREQ_MailRead) == 0x000001, "Wrong size on FREQ_MailRead");

// ScriptStruct Stigma.REQ_MailUpdate
// 0x0018 (0x0018 - 0x0000)
struct FREQ_MailUpdate final
{
public:
	EMailState                                    Status;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<int32>                                 MailIDN;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_MailUpdate) == 0x000008, "Wrong alignment on FREQ_MailUpdate");
static_assert(sizeof(FREQ_MailUpdate) == 0x000018, "Wrong size on FREQ_MailUpdate");
static_assert(offsetof(FREQ_MailUpdate, Status) == 0x000000, "Member 'FREQ_MailUpdate::Status' has a wrong offset!");
static_assert(offsetof(FREQ_MailUpdate, MailIDN) == 0x000008, "Member 'FREQ_MailUpdate::MailIDN' has a wrong offset!");

// ScriptStruct Stigma.ACK_MailUpdate
// 0x0040 (0x0040 - 0x0000)
struct FACK_MailUpdate final
{
public:
	EMailState                                    Status;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<int32>                                 MailIDN;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnreadMailCount;                                   // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDD[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRewardPlain                           RewardPlain;                                       // 0x0020(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_MailUpdate) == 0x000008, "Wrong alignment on FACK_MailUpdate");
static_assert(sizeof(FACK_MailUpdate) == 0x000040, "Wrong size on FACK_MailUpdate");
static_assert(offsetof(FACK_MailUpdate, Status) == 0x000000, "Member 'FACK_MailUpdate::Status' has a wrong offset!");
static_assert(offsetof(FACK_MailUpdate, MailIDN) == 0x000008, "Member 'FACK_MailUpdate::MailIDN' has a wrong offset!");
static_assert(offsetof(FACK_MailUpdate, UnreadMailCount) == 0x000018, "Member 'FACK_MailUpdate::UnreadMailCount' has a wrong offset!");
static_assert(offsetof(FACK_MailUpdate, RewardPlain) == 0x000020, "Member 'FACK_MailUpdate::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.REQ_MailDelete
// 0x0010 (0x0010 - 0x0000)
struct FREQ_MailDelete final
{
public:
	TArray<int32>                                 MailIDN;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_MailDelete) == 0x000008, "Wrong alignment on FREQ_MailDelete");
static_assert(sizeof(FREQ_MailDelete) == 0x000010, "Wrong size on FREQ_MailDelete");
static_assert(offsetof(FREQ_MailDelete, MailIDN) == 0x000000, "Member 'FREQ_MailDelete::MailIDN' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticMode
// 0x0008 (0x0008 - 0x0000)
struct FNetStatisticMode final
{
public:
	EGameMode                                     Mode;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Count;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticMode) == 0x000004, "Wrong alignment on FNetStatisticMode");
static_assert(sizeof(FNetStatisticMode) == 0x000008, "Wrong size on FNetStatisticMode");
static_assert(offsetof(FNetStatisticMode, Mode) == 0x000000, "Member 'FNetStatisticMode::Mode' has a wrong offset!");
static_assert(offsetof(FNetStatisticMode, Count) == 0x000004, "Member 'FNetStatisticMode::Count' has a wrong offset!");

// ScriptStruct Stigma.NetStatisticCharacter
// 0x0010 (0x0010 - 0x0000)
struct FNetStatisticCharacter final
{
public:
	ECharaType                                    CharType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EDF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Kill;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Death;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assist;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetStatisticCharacter) == 0x000004, "Wrong alignment on FNetStatisticCharacter");
static_assert(sizeof(FNetStatisticCharacter) == 0x000010, "Wrong size on FNetStatisticCharacter");
static_assert(offsetof(FNetStatisticCharacter, CharType) == 0x000000, "Member 'FNetStatisticCharacter::CharType' has a wrong offset!");
static_assert(offsetof(FNetStatisticCharacter, Kill) == 0x000004, "Member 'FNetStatisticCharacter::Kill' has a wrong offset!");
static_assert(offsetof(FNetStatisticCharacter, Death) == 0x000008, "Member 'FNetStatisticCharacter::Death' has a wrong offset!");
static_assert(offsetof(FNetStatisticCharacter, Assist) == 0x00000C, "Member 'FNetStatisticCharacter::Assist' has a wrong offset!");

// ScriptStruct Stigma.REQ_StatisticRead
// 0x0008 (0x0008 - 0x0000)
struct FREQ_StatisticRead final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_StatisticRead) == 0x000008, "Wrong alignment on FREQ_StatisticRead");
static_assert(sizeof(FREQ_StatisticRead) == 0x000008, "Wrong size on FREQ_StatisticRead");
static_assert(offsetof(FREQ_StatisticRead, UserIDN) == 0x000000, "Member 'FREQ_StatisticRead::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadWeeklyBestRank
// 0x0008 (0x0008 - 0x0000)
struct FREQ_ReadWeeklyBestRank final
{
public:
	struct FSeasonID                              SeasonID;                                          // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  RankingType;                                       // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadWeeklyBestRank) == 0x000004, "Wrong alignment on FREQ_ReadWeeklyBestRank");
static_assert(sizeof(FREQ_ReadWeeklyBestRank) == 0x000008, "Wrong size on FREQ_ReadWeeklyBestRank");
static_assert(offsetof(FREQ_ReadWeeklyBestRank, SeasonID) == 0x000000, "Member 'FREQ_ReadWeeklyBestRank::SeasonID' has a wrong offset!");
static_assert(offsetof(FREQ_ReadWeeklyBestRank, RankingType) == 0x000004, "Member 'FREQ_ReadWeeklyBestRank::RankingType' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadChallengeRanking
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ReadChallengeRanking final
{
public:
	int64                                         Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Count;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ReadChallengeRanking) == 0x000008, "Wrong alignment on FREQ_ReadChallengeRanking");
static_assert(sizeof(FREQ_ReadChallengeRanking) == 0x000010, "Wrong size on FREQ_ReadChallengeRanking");
static_assert(offsetof(FREQ_ReadChallengeRanking, Start) == 0x000000, "Member 'FREQ_ReadChallengeRanking::Start' has a wrong offset!");
static_assert(offsetof(FREQ_ReadChallengeRanking, Count) == 0x000008, "Member 'FREQ_ReadChallengeRanking::Count' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadUserTierInfo
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ReadUserTierInfo final
{
public:
	struct FUserID                                UserIDN;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeasonID                              SeasonID;                                          // 0x0008(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE1[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadUserTierInfo) == 0x000008, "Wrong alignment on FREQ_ReadUserTierInfo");
static_assert(sizeof(FREQ_ReadUserTierInfo) == 0x000010, "Wrong size on FREQ_ReadUserTierInfo");
static_assert(offsetof(FREQ_ReadUserTierInfo, UserIDN) == 0x000000, "Member 'FREQ_ReadUserTierInfo::UserIDN' has a wrong offset!");
static_assert(offsetof(FREQ_ReadUserTierInfo, SeasonID) == 0x000008, "Member 'FREQ_ReadUserTierInfo::SeasonID' has a wrong offset!");

// ScriptStruct Stigma.BC_SeasonReward
// 0x0038 (0x0038 - 0x0000)
struct FBC_SeasonReward final
{
public:
	struct FSeasonID                              SeasonID;                                          // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETier                                         Tier;                                              // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Rank;                                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankPoint;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankRatio;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRewardPlain                           RewardPlain;                                       // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_SeasonReward) == 0x000008, "Wrong alignment on FBC_SeasonReward");
static_assert(sizeof(FBC_SeasonReward) == 0x000038, "Wrong size on FBC_SeasonReward");
static_assert(offsetof(FBC_SeasonReward, SeasonID) == 0x000000, "Member 'FBC_SeasonReward::SeasonID' has a wrong offset!");
static_assert(offsetof(FBC_SeasonReward, Tier) == 0x000004, "Member 'FBC_SeasonReward::Tier' has a wrong offset!");
static_assert(offsetof(FBC_SeasonReward, Rank) == 0x000008, "Member 'FBC_SeasonReward::Rank' has a wrong offset!");
static_assert(offsetof(FBC_SeasonReward, RankPoint) == 0x00000C, "Member 'FBC_SeasonReward::RankPoint' has a wrong offset!");
static_assert(offsetof(FBC_SeasonReward, RankRatio) == 0x000010, "Member 'FBC_SeasonReward::RankRatio' has a wrong offset!");
static_assert(offsetof(FBC_SeasonReward, RewardPlain) == 0x000018, "Member 'FBC_SeasonReward::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.BC_TierPointUpdate
// 0x0008 (0x0008 - 0x0000)
struct FBC_TierPointUpdate final
{
public:
	int32                                         OffDays;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RankPoint;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_TierPointUpdate) == 0x000004, "Wrong alignment on FBC_TierPointUpdate");
static_assert(sizeof(FBC_TierPointUpdate) == 0x000008, "Wrong size on FBC_TierPointUpdate");
static_assert(offsetof(FBC_TierPointUpdate, OffDays) == 0x000000, "Member 'FBC_TierPointUpdate::OffDays' has a wrong offset!");
static_assert(offsetof(FBC_TierPointUpdate, RankPoint) == 0x000004, "Member 'FBC_TierPointUpdate::RankPoint' has a wrong offset!");

// ScriptStruct Stigma.TimeOnStartEnd
// 0x0010 (0x0010 - 0x0000)
struct FTimeOnStartEnd final
{
public:
	struct FDateTime                              Start;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOnStartEnd) == 0x000008, "Wrong alignment on FTimeOnStartEnd");
static_assert(sizeof(FTimeOnStartEnd) == 0x000010, "Wrong size on FTimeOnStartEnd");
static_assert(offsetof(FTimeOnStartEnd, Start) == 0x000000, "Member 'FTimeOnStartEnd::Start' has a wrong offset!");
static_assert(offsetof(FTimeOnStartEnd, End) == 0x000008, "Member 'FTimeOnStartEnd::End' has a wrong offset!");

// ScriptStruct Stigma.ServiceSchedule
// 0x0030 (0x0030 - 0x0000)
struct FServiceSchedule final
{
public:
	int32                                         ServiceType;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTime                              UtcNow;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTimeOnStartEnd>                TimeOn;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              StartAt;                                           // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndAt;                                             // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServiceSchedule) == 0x000008, "Wrong alignment on FServiceSchedule");
static_assert(sizeof(FServiceSchedule) == 0x000030, "Wrong size on FServiceSchedule");
static_assert(offsetof(FServiceSchedule, ServiceType) == 0x000000, "Member 'FServiceSchedule::ServiceType' has a wrong offset!");
static_assert(offsetof(FServiceSchedule, UtcNow) == 0x000008, "Member 'FServiceSchedule::UtcNow' has a wrong offset!");
static_assert(offsetof(FServiceSchedule, TimeOn) == 0x000010, "Member 'FServiceSchedule::TimeOn' has a wrong offset!");
static_assert(offsetof(FServiceSchedule, StartAt) == 0x000020, "Member 'FServiceSchedule::StartAt' has a wrong offset!");
static_assert(offsetof(FServiceSchedule, EndAt) == 0x000028, "Member 'FServiceSchedule::EndAt' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadUserCurrency
// 0x0001 (0x0001 - 0x0000)
struct FREQ_ReadUserCurrency final
{
public:
	uint8                                         Pad_1EE5[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_ReadUserCurrency) == 0x000001, "Wrong alignment on FREQ_ReadUserCurrency");
static_assert(sizeof(FREQ_ReadUserCurrency) == 0x000001, "Wrong size on FREQ_ReadUserCurrency");

// ScriptStruct Stigma.REQ_ActivateCoupon
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ActivateCoupon final
{
public:
	class FString                                 CouponCode;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ActivateCoupon) == 0x000008, "Wrong alignment on FREQ_ActivateCoupon");
static_assert(sizeof(FREQ_ActivateCoupon) == 0x000010, "Wrong size on FREQ_ActivateCoupon");
static_assert(offsetof(FREQ_ActivateCoupon, CouponCode) == 0x000000, "Member 'FREQ_ActivateCoupon::CouponCode' has a wrong offset!");

// ScriptStruct Stigma.REQ_AnnouncerUpdate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_AnnouncerUpdate final
{
public:
	struct FItemID_Announcer                      IDN;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_AnnouncerUpdate) == 0x000008, "Wrong alignment on FREQ_AnnouncerUpdate");
static_assert(sizeof(FREQ_AnnouncerUpdate) == 0x000010, "Wrong size on FREQ_AnnouncerUpdate");
static_assert(offsetof(FREQ_AnnouncerUpdate, IDN) == 0x000000, "Member 'FREQ_AnnouncerUpdate::IDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_ProfileCardUpdate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ProfileCardUpdate final
{
public:
	struct FItemID                                IDN;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ProfileCardUpdate) == 0x000008, "Wrong alignment on FREQ_ProfileCardUpdate");
static_assert(sizeof(FREQ_ProfileCardUpdate) == 0x000010, "Wrong size on FREQ_ProfileCardUpdate");
static_assert(offsetof(FREQ_ProfileCardUpdate, IDN) == 0x000000, "Member 'FREQ_ProfileCardUpdate::IDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_EmblemUpdate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_EmblemUpdate final
{
public:
	struct FItemID                                IDN;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_EmblemUpdate) == 0x000008, "Wrong alignment on FREQ_EmblemUpdate");
static_assert(sizeof(FREQ_EmblemUpdate) == 0x000010, "Wrong size on FREQ_EmblemUpdate");
static_assert(offsetof(FREQ_EmblemUpdate, IDN) == 0x000000, "Member 'FREQ_EmblemUpdate::IDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_SingleItemUpdate
// 0x0010 (0x0010 - 0x0000)
struct FREQ_SingleItemUpdate final
{
public:
	struct FItemID                                IDN;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_SingleItemUpdate) == 0x000008, "Wrong alignment on FREQ_SingleItemUpdate");
static_assert(sizeof(FREQ_SingleItemUpdate) == 0x000010, "Wrong size on FREQ_SingleItemUpdate");
static_assert(offsetof(FREQ_SingleItemUpdate, IDN) == 0x000000, "Member 'FREQ_SingleItemUpdate::IDN' has a wrong offset!");

// ScriptStruct Stigma.ACK_BoosterUpdate
// 0x0010 (0x0010 - 0x0000)
struct FACK_BoosterUpdate final
{
public:
	TArray<struct FNetBoosterSlot>                Booster;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_BoosterUpdate) == 0x000008, "Wrong alignment on FACK_BoosterUpdate");
static_assert(sizeof(FACK_BoosterUpdate) == 0x000010, "Wrong size on FACK_BoosterUpdate");
static_assert(offsetof(FACK_BoosterUpdate, Booster) == 0x000000, "Member 'FACK_BoosterUpdate::Booster' has a wrong offset!");

// ScriptStruct Stigma.BC_DediRegions
// 0x0010 (0x0010 - 0x0000)
struct FBC_DediRegions final
{
public:
	TArray<class FString>                         Regions;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_DediRegions) == 0x000008, "Wrong alignment on FBC_DediRegions");
static_assert(sizeof(FBC_DediRegions) == 0x000010, "Wrong size on FBC_DediRegions");
static_assert(offsetof(FBC_DediRegions, Regions) == 0x000000, "Member 'FBC_DediRegions::Regions' has a wrong offset!");

// ScriptStruct Stigma.ACK_SteamBuy
// 0x0038 (0x0038 - 0x0000)
struct FACK_SteamBuy final
{
public:
	struct FItemID                                ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FRewardPlain                           RewardPlain;                                       // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_SteamBuy) == 0x000008, "Wrong alignment on FACK_SteamBuy");
static_assert(sizeof(FACK_SteamBuy) == 0x000038, "Wrong size on FACK_SteamBuy");
static_assert(offsetof(FACK_SteamBuy, ItemIDN) == 0x000000, "Member 'FACK_SteamBuy::ItemIDN' has a wrong offset!");
static_assert(offsetof(FACK_SteamBuy, Limit) == 0x000010, "Member 'FACK_SteamBuy::Limit' has a wrong offset!");
static_assert(offsetof(FACK_SteamBuy, RewardPlain) == 0x000018, "Member 'FACK_SteamBuy::RewardPlain' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadActiveGoods
// 0x0010 (0x0010 - 0x0000)
struct FREQ_ReadActiveGoods final
{
public:
	TArray<struct FItemID>                        ItemIDN;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ReadActiveGoods) == 0x000008, "Wrong alignment on FREQ_ReadActiveGoods");
static_assert(sizeof(FREQ_ReadActiveGoods) == 0x000010, "Wrong size on FREQ_ReadActiveGoods");
static_assert(offsetof(FREQ_ReadActiveGoods, ItemIDN) == 0x000000, "Member 'FREQ_ReadActiveGoods::ItemIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_LoadUserProfiles
// 0x0018 (0x0018 - 0x0000)
struct FREQ_LoadUserProfiles final
{
public:
	TArray<struct FUserID>                        UserIDs;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          WithChar;                                          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_LoadUserProfiles) == 0x000008, "Wrong alignment on FREQ_LoadUserProfiles");
static_assert(sizeof(FREQ_LoadUserProfiles) == 0x000018, "Wrong size on FREQ_LoadUserProfiles");
static_assert(offsetof(FREQ_LoadUserProfiles, UserIDs) == 0x000000, "Member 'FREQ_LoadUserProfiles::UserIDs' has a wrong offset!");
static_assert(offsetof(FREQ_LoadUserProfiles, WithChar) == 0x000010, "Member 'FREQ_LoadUserProfiles::WithChar' has a wrong offset!");

// ScriptStruct Stigma.CB_UserData
// 0x0010 (0x0010 - 0x0000)
struct FCB_UserData final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_UserData) == 0x000008, "Wrong alignment on FCB_UserData");
static_assert(sizeof(FCB_UserData) == 0x000010, "Wrong size on FCB_UserData");
static_assert(offsetof(FCB_UserData, MapName) == 0x000000, "Member 'FCB_UserData::MapName' has a wrong offset!");

// ScriptStruct Stigma.CACK_CB_UpdateSecurityData
// 0x0210 (0x0210 - 0x0000)
struct FCACK_CB_UpdateSecurityData final
{
public:
	uint8                                         SecurityData[0x200];                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCB_UserData                           UserData;                                          // 0x0200(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCACK_CB_UpdateSecurityData) == 0x000008, "Wrong alignment on FCACK_CB_UpdateSecurityData");
static_assert(sizeof(FCACK_CB_UpdateSecurityData) == 0x000210, "Wrong size on FCACK_CB_UpdateSecurityData");
static_assert(offsetof(FCACK_CB_UpdateSecurityData, SecurityData) == 0x000000, "Member 'FCACK_CB_UpdateSecurityData::SecurityData' has a wrong offset!");
static_assert(offsetof(FCACK_CB_UpdateSecurityData, UserData) == 0x000200, "Member 'FCACK_CB_UpdateSecurityData::UserData' has a wrong offset!");

// ScriptStruct Stigma.REQ_BuyRecruit
// 0x0018 (0x0018 - 0x0000)
struct FREQ_BuyRecruit final
{
public:
	struct FItemID_Recruit                        RID;                                               // 0x0000(0x0010)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE8[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FREQ_BuyRecruit) == 0x000008, "Wrong alignment on FREQ_BuyRecruit");
static_assert(sizeof(FREQ_BuyRecruit) == 0x000018, "Wrong size on FREQ_BuyRecruit");
static_assert(offsetof(FREQ_BuyRecruit, RID) == 0x000000, "Member 'FREQ_BuyRecruit::RID' has a wrong offset!");
static_assert(offsetof(FREQ_BuyRecruit, Idx) == 0x000010, "Member 'FREQ_BuyRecruit::Idx' has a wrong offset!");

// ScriptStruct Stigma.REQ_ReadHistoryRecruit
// 0x000C (0x000C - 0x0000)
struct FREQ_ReadHistoryRecruit final
{
public:
	ERecruitType                                  RType;                                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Cursor;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_ReadHistoryRecruit) == 0x000004, "Wrong alignment on FREQ_ReadHistoryRecruit");
static_assert(sizeof(FREQ_ReadHistoryRecruit) == 0x00000C, "Wrong size on FREQ_ReadHistoryRecruit");
static_assert(offsetof(FREQ_ReadHistoryRecruit, RType) == 0x000000, "Member 'FREQ_ReadHistoryRecruit::RType' has a wrong offset!");
static_assert(offsetof(FREQ_ReadHistoryRecruit, Cursor) == 0x000004, "Member 'FREQ_ReadHistoryRecruit::Cursor' has a wrong offset!");
static_assert(offsetof(FREQ_ReadHistoryRecruit, Limit) == 0x000008, "Member 'FREQ_ReadHistoryRecruit::Limit' has a wrong offset!");

// ScriptStruct Stigma.REQ_UpdateTutorial
// 0x0004 (0x0004 - 0x0000)
struct FREQ_UpdateTutorial final
{
public:
	struct FTutorialProgress                      Tutorial;                                          // 0x0000(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_UpdateTutorial) == 0x000004, "Wrong alignment on FREQ_UpdateTutorial");
static_assert(sizeof(FREQ_UpdateTutorial) == 0x000004, "Wrong size on FREQ_UpdateTutorial");
static_assert(offsetof(FREQ_UpdateTutorial, Tutorial) == 0x000000, "Member 'FREQ_UpdateTutorial::Tutorial' has a wrong offset!");

// ScriptStruct Stigma.ACK_UpdateTutorial
// 0x0004 (0x0004 - 0x0000)
struct FACK_UpdateTutorial final
{
public:
	struct FTutorialProgress                      Tutorial;                                          // 0x0000(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_UpdateTutorial) == 0x000004, "Wrong alignment on FACK_UpdateTutorial");
static_assert(sizeof(FACK_UpdateTutorial) == 0x000004, "Wrong size on FACK_UpdateTutorial");
static_assert(offsetof(FACK_UpdateTutorial, Tutorial) == 0x000000, "Member 'FACK_UpdateTutorial::Tutorial' has a wrong offset!");

// ScriptStruct Stigma.REQ_IsReadyToJoinBattle
// 0x0010 (0x0018 - 0x0008)
struct FREQ_IsReadyToJoinBattle final : public FRequestUser
{
public:
	class FString                                 DediID;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_IsReadyToJoinBattle) == 0x000008, "Wrong alignment on FREQ_IsReadyToJoinBattle");
static_assert(sizeof(FREQ_IsReadyToJoinBattle) == 0x000018, "Wrong size on FREQ_IsReadyToJoinBattle");
static_assert(offsetof(FREQ_IsReadyToJoinBattle, DediID) == 0x000008, "Member 'FREQ_IsReadyToJoinBattle::DediID' has a wrong offset!");

// ScriptStruct Stigma.ACK_IsReadyToJoinBattle
// 0x0004 (0x000C - 0x0008)
struct FACK_IsReadyToJoinBattle final : public FApiResult
{
public:
	bool                                          IsReady;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEA[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_IsReadyToJoinBattle) == 0x000004, "Wrong alignment on FACK_IsReadyToJoinBattle");
static_assert(sizeof(FACK_IsReadyToJoinBattle) == 0x00000C, "Wrong size on FACK_IsReadyToJoinBattle");
static_assert(offsetof(FACK_IsReadyToJoinBattle, IsReady) == 0x000008, "Member 'FACK_IsReadyToJoinBattle::IsReady' has a wrong offset!");

// ScriptStruct Stigma.ACK_RegisterServer
// 0x0000 (0x0048 - 0x0048)
struct FACK_RegisterServer final : public FMQAckMsg
{
};
static_assert(alignof(FACK_RegisterServer) == 0x000008, "Wrong alignment on FACK_RegisterServer");
static_assert(sizeof(FACK_RegisterServer) == 0x000048, "Wrong size on FACK_RegisterServer");

// ScriptStruct Stigma.BattleSettings
// 0x0030 (0x0030 - 0x0000)
struct FBattleSettings final
{
public:
	bool                                          IsCustomGame;                                      // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableBOT;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEB[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 BattleIDS;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEC[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 MapName;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleSettings) == 0x000008, "Wrong alignment on FBattleSettings");
static_assert(sizeof(FBattleSettings) == 0x000030, "Wrong size on FBattleSettings");
static_assert(offsetof(FBattleSettings, IsCustomGame) == 0x000000, "Member 'FBattleSettings::IsCustomGame' has a wrong offset!");
static_assert(offsetof(FBattleSettings, EnableBOT) == 0x000001, "Member 'FBattleSettings::EnableBOT' has a wrong offset!");
static_assert(offsetof(FBattleSettings, BattleIDS) == 0x000008, "Member 'FBattleSettings::BattleIDS' has a wrong offset!");
static_assert(offsetof(FBattleSettings, GameMode) == 0x000018, "Member 'FBattleSettings::GameMode' has a wrong offset!");
static_assert(offsetof(FBattleSettings, MapName) == 0x000020, "Member 'FBattleSettings::MapName' has a wrong offset!");

// ScriptStruct Stigma.ACK_ReportPlayer
// 0x0000 (0x0048 - 0x0048)
struct FACK_ReportPlayer final : public FMQAckMsg
{
};
static_assert(alignof(FACK_ReportPlayer) == 0x000008, "Wrong alignment on FACK_ReportPlayer");
static_assert(sizeof(FACK_ReportPlayer) == 0x000048, "Wrong size on FACK_ReportPlayer");

// ScriptStruct Stigma.REQ_DEDI_LoadPlayer
// 0x0008 (0x0058 - 0x0050)
struct FREQ_DEDI_LoadPlayer final : public FMQReqMsg
{
public:
	struct FUserID                                UserIDN;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_DEDI_LoadPlayer) == 0x000008, "Wrong alignment on FREQ_DEDI_LoadPlayer");
static_assert(sizeof(FREQ_DEDI_LoadPlayer) == 0x000058, "Wrong size on FREQ_DEDI_LoadPlayer");
static_assert(offsetof(FREQ_DEDI_LoadPlayer, UserIDN) == 0x000050, "Member 'FREQ_DEDI_LoadPlayer::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.REQ_BattleResult
// 0x0060 (0x00B0 - 0x0050)
struct FREQ_BattleResult final : public FMQReqMsg
{
public:
	struct FBattleResult                          BattleResult;                                      // 0x0050(0x0060)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FREQ_BattleResult) == 0x000008, "Wrong alignment on FREQ_BattleResult");
static_assert(sizeof(FREQ_BattleResult) == 0x0000B0, "Wrong size on FREQ_BattleResult");
static_assert(offsetof(FREQ_BattleResult, BattleResult) == 0x000050, "Member 'FREQ_BattleResult::BattleResult' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_CurrentCharacter
// 0x0010 (0x0060 - 0x0050)
struct FMQREQ_CurrentCharacter final : public FMQReqMsg
{
public:
	struct FUserID                                UserIDN;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    CharType;                                          // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EED[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FMQREQ_CurrentCharacter) == 0x000008, "Wrong alignment on FMQREQ_CurrentCharacter");
static_assert(sizeof(FMQREQ_CurrentCharacter) == 0x000060, "Wrong size on FMQREQ_CurrentCharacter");
static_assert(offsetof(FMQREQ_CurrentCharacter, UserIDN) == 0x000050, "Member 'FMQREQ_CurrentCharacter::UserIDN' has a wrong offset!");
static_assert(offsetof(FMQREQ_CurrentCharacter, CharType) == 0x000058, "Member 'FMQREQ_CurrentCharacter::CharType' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_DeletePartyMember
// 0x0010 (0x0060 - 0x0050)
struct FMQREQ_DeletePartyMember final : public FMQReqMsg
{
public:
	struct FUserID                                Party_IDN;                                         // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                Member_IDN;                                        // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_DeletePartyMember) == 0x000008, "Wrong alignment on FMQREQ_DeletePartyMember");
static_assert(sizeof(FMQREQ_DeletePartyMember) == 0x000060, "Wrong size on FMQREQ_DeletePartyMember");
static_assert(offsetof(FMQREQ_DeletePartyMember, Party_IDN) == 0x000050, "Member 'FMQREQ_DeletePartyMember::Party_IDN' has a wrong offset!");
static_assert(offsetof(FMQREQ_DeletePartyMember, Member_IDN) == 0x000058, "Member 'FMQREQ_DeletePartyMember::Member_IDN' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_UpdateBooster
// 0x0020 (0x0070 - 0x0050)
struct FMQREQ_UpdateBooster final : public FMQReqMsg
{
public:
	struct FUserID                                UserIDN;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetBoosterSlot                        Booster;                                           // 0x0058(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_UpdateBooster) == 0x000008, "Wrong alignment on FMQREQ_UpdateBooster");
static_assert(sizeof(FMQREQ_UpdateBooster) == 0x000070, "Wrong size on FMQREQ_UpdateBooster");
static_assert(offsetof(FMQREQ_UpdateBooster, UserIDN) == 0x000050, "Member 'FMQREQ_UpdateBooster::UserIDN' has a wrong offset!");
static_assert(offsetof(FMQREQ_UpdateBooster, Booster) == 0x000058, "Member 'FMQREQ_UpdateBooster::Booster' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_DEDI_UpdateInven
// 0x0008 (0x0058 - 0x0050)
struct FMQREQ_DEDI_UpdateInven final : public FMQReqMsg
{
public:
	struct FUserID                                UserIDN;                                           // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_DEDI_UpdateInven) == 0x000008, "Wrong alignment on FMQREQ_DEDI_UpdateInven");
static_assert(sizeof(FMQREQ_DEDI_UpdateInven) == 0x000058, "Wrong size on FMQREQ_DEDI_UpdateInven");
static_assert(offsetof(FMQREQ_DEDI_UpdateInven, UserIDN) == 0x000050, "Member 'FMQREQ_DEDI_UpdateInven::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.MQACK_DEDI_UpdateInven
// 0x0010 (0x0058 - 0x0048)
struct FMQACK_DEDI_UpdateInven final : public FMQAckMsg
{
public:
	TArray<struct FNetInvenItem>                  Currency;                                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQACK_DEDI_UpdateInven) == 0x000008, "Wrong alignment on FMQACK_DEDI_UpdateInven");
static_assert(sizeof(FMQACK_DEDI_UpdateInven) == 0x000058, "Wrong size on FMQACK_DEDI_UpdateInven");
static_assert(offsetof(FMQACK_DEDI_UpdateInven, Currency) == 0x000048, "Member 'FMQACK_DEDI_UpdateInven::Currency' has a wrong offset!");

// ScriptStruct Stigma.MQREQ_DEDI_Describe
// 0x0000 (0x0050 - 0x0050)
struct FMQREQ_DEDI_Describe final : public FMQReqMsg
{
};
static_assert(alignof(FMQREQ_DEDI_Describe) == 0x000008, "Wrong alignment on FMQREQ_DEDI_Describe");
static_assert(sizeof(FMQREQ_DEDI_Describe) == 0x000050, "Wrong size on FMQREQ_DEDI_Describe");

// ScriptStruct Stigma.MQREQ_DEDI_ChatBan
// 0x0010 (0x0060 - 0x0050)
struct FMQREQ_DEDI_ChatBan final : public FMQReqMsg
{
public:
	struct FUserID                                UserID;                                            // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndAt;                                             // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMQREQ_DEDI_ChatBan) == 0x000008, "Wrong alignment on FMQREQ_DEDI_ChatBan");
static_assert(sizeof(FMQREQ_DEDI_ChatBan) == 0x000060, "Wrong size on FMQREQ_DEDI_ChatBan");
static_assert(offsetof(FMQREQ_DEDI_ChatBan, UserID) == 0x000050, "Member 'FMQREQ_DEDI_ChatBan::UserID' has a wrong offset!");
static_assert(offsetof(FMQREQ_DEDI_ChatBan, EndAt) == 0x000058, "Member 'FMQREQ_DEDI_ChatBan::EndAt' has a wrong offset!");

// ScriptStruct Stigma.Ping
// 0x0018 (0x0018 - 0x0000)
struct FPing final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 Msg;                                               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPing) == 0x000008, "Wrong alignment on FPing");
static_assert(sizeof(FPing) == 0x000018, "Wrong size on FPing");
static_assert(offsetof(FPing, Key) == 0x000000, "Member 'FPing::Key' has a wrong offset!");
static_assert(offsetof(FPing, Msg) == 0x000008, "Member 'FPing::Msg' has a wrong offset!");

// ScriptStruct Stigma.PassiveSkillEntry
// 0x0068 (0x0198 - 0x0130)
struct FPassiveSkillEntry final : public FItemEntry
{
public:
	class FText                                   Category;                                          // 0x0130(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Buff>                BuffIDs;                                           // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   FieldName;                                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFileMediaSource>        PreviewMediaSource;                                // 0x0160(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 UserLevelLimitInfo;                                // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPassiveSkillEntry) == 0x000008, "Wrong alignment on FPassiveSkillEntry");
static_assert(sizeof(FPassiveSkillEntry) == 0x000198, "Wrong size on FPassiveSkillEntry");
static_assert(offsetof(FPassiveSkillEntry, Category) == 0x000130, "Member 'FPassiveSkillEntry::Category' has a wrong offset!");
static_assert(offsetof(FPassiveSkillEntry, BuffIDs) == 0x000148, "Member 'FPassiveSkillEntry::BuffIDs' has a wrong offset!");
static_assert(offsetof(FPassiveSkillEntry, FieldName) == 0x000158, "Member 'FPassiveSkillEntry::FieldName' has a wrong offset!");
static_assert(offsetof(FPassiveSkillEntry, PreviewMediaSource) == 0x000160, "Member 'FPassiveSkillEntry::PreviewMediaSource' has a wrong offset!");
static_assert(offsetof(FPassiveSkillEntry, UserLevelLimitInfo) == 0x000188, "Member 'FPassiveSkillEntry::UserLevelLimitInfo' has a wrong offset!");

// ScriptStruct Stigma.Config_Ping
// 0x00B0 (0x00B8 - 0x0008)
struct FConfig_Ping final : public FTableRowBase
{
public:
	EBattlePingType                               PingType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ChatMessage;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PingIcon;                                          // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Sound;                                             // 0x0090(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Ping) == 0x000008, "Wrong alignment on FConfig_Ping");
static_assert(sizeof(FConfig_Ping) == 0x0000B8, "Wrong size on FConfig_Ping");
static_assert(offsetof(FConfig_Ping, PingType) == 0x000008, "Member 'FConfig_Ping::PingType' has a wrong offset!");
static_assert(offsetof(FConfig_Ping, DisplayName) == 0x000010, "Member 'FConfig_Ping::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_Ping, Desc) == 0x000028, "Member 'FConfig_Ping::Desc' has a wrong offset!");
static_assert(offsetof(FConfig_Ping, ChatMessage) == 0x000040, "Member 'FConfig_Ping::ChatMessage' has a wrong offset!");
static_assert(offsetof(FConfig_Ping, PingColor) == 0x000058, "Member 'FConfig_Ping::PingColor' has a wrong offset!");
static_assert(offsetof(FConfig_Ping, PingIcon) == 0x000068, "Member 'FConfig_Ping::PingIcon' has a wrong offset!");
static_assert(offsetof(FConfig_Ping, Sound) == 0x000090, "Member 'FConfig_Ping::Sound' has a wrong offset!");

// ScriptStruct Stigma.PlayerFuncContext
// 0x01A0 (0x01A0 - 0x0000)
struct FPlayerFuncContext final
{
public:
	uint8                                         Pad_1EF0[0x50];                                    // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FActiveFunction>                ActiveFunctions;                                   // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGMFunction>                    GMFunctions;                                       // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PassiveSkillLevel;                                 // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF1[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSet<struct FItemID>                          PassiveSkillLevelIDs;                              // 0x0078(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUserSlots                             Slots;                                             // 0x00C8(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         BoosterTicket;                                     // 0x00F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UnlimitedBoosterTicket;                            // 0x00FC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF2[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         EXP_Percent;                                       // 0x0100(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LearnEXP_Percent;                                  // 0x0104(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassEXP_Percent;                                   // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Diamond_Percent;                                   // 0x010C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletCount;                                       // 0x0110(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF3[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TSet<EBulletTip>                              BulletTip;                                         // 0x0118(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              BulletTipBuffExpireAt;                             // 0x0168(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableMatch;                                      // 0x0170(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF4[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         BoosterCooltime_Sec;                               // 0x0174(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoosterDuration_Sec;                               // 0x0178(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterHP;                                          // 0x017C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterHP_Ratio;                                    // 0x0180(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gold_Start;                                        // 0x0184(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gold_PerRound;                                     // 0x0188(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Armor_PerRound_Percent;                            // 0x018C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magazine;                                          // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillStock;                                        // 0x0194(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillStock_Ratio;                                  // 0x0198(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillCooltime_Ratio;                               // 0x019C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerFuncContext) == 0x000008, "Wrong alignment on FPlayerFuncContext");
static_assert(sizeof(FPlayerFuncContext) == 0x0001A0, "Wrong size on FPlayerFuncContext");
static_assert(offsetof(FPlayerFuncContext, ActiveFunctions) == 0x000050, "Member 'FPlayerFuncContext::ActiveFunctions' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, GMFunctions) == 0x000060, "Member 'FPlayerFuncContext::GMFunctions' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, PassiveSkillLevel) == 0x000070, "Member 'FPlayerFuncContext::PassiveSkillLevel' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, PassiveSkillLevelIDs) == 0x000078, "Member 'FPlayerFuncContext::PassiveSkillLevelIDs' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, Slots) == 0x0000C8, "Member 'FPlayerFuncContext::Slots' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, BoosterTicket) == 0x0000F8, "Member 'FPlayerFuncContext::BoosterTicket' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, UnlimitedBoosterTicket) == 0x0000FC, "Member 'FPlayerFuncContext::UnlimitedBoosterTicket' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, EXP_Percent) == 0x000100, "Member 'FPlayerFuncContext::EXP_Percent' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, LearnEXP_Percent) == 0x000104, "Member 'FPlayerFuncContext::LearnEXP_Percent' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, PassEXP_Percent) == 0x000108, "Member 'FPlayerFuncContext::PassEXP_Percent' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, Diamond_Percent) == 0x00010C, "Member 'FPlayerFuncContext::Diamond_Percent' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, BulletCount) == 0x000110, "Member 'FPlayerFuncContext::BulletCount' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, BulletTip) == 0x000118, "Member 'FPlayerFuncContext::BulletTip' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, BulletTipBuffExpireAt) == 0x000168, "Member 'FPlayerFuncContext::BulletTipBuffExpireAt' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, DisableMatch) == 0x000170, "Member 'FPlayerFuncContext::DisableMatch' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, BoosterCooltime_Sec) == 0x000174, "Member 'FPlayerFuncContext::BoosterCooltime_Sec' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, BoosterDuration_Sec) == 0x000178, "Member 'FPlayerFuncContext::BoosterDuration_Sec' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, MasterHP) == 0x00017C, "Member 'FPlayerFuncContext::MasterHP' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, MasterHP_Ratio) == 0x000180, "Member 'FPlayerFuncContext::MasterHP_Ratio' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, Gold_Start) == 0x000184, "Member 'FPlayerFuncContext::Gold_Start' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, Gold_PerRound) == 0x000188, "Member 'FPlayerFuncContext::Gold_PerRound' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, Armor_PerRound_Percent) == 0x00018C, "Member 'FPlayerFuncContext::Armor_PerRound_Percent' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, Magazine) == 0x000190, "Member 'FPlayerFuncContext::Magazine' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, SkillStock) == 0x000194, "Member 'FPlayerFuncContext::SkillStock' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, SkillStock_Ratio) == 0x000198, "Member 'FPlayerFuncContext::SkillStock_Ratio' has a wrong offset!");
static_assert(offsetof(FPlayerFuncContext, SkillCooltime_Ratio) == 0x00019C, "Member 'FPlayerFuncContext::SkillCooltime_Ratio' has a wrong offset!");

// ScriptStruct Stigma.PlayerContextPickedCharaInfo
// 0x0002 (0x0002 - 0x0000)
struct FPlayerContextPickedCharaInfo final
{
public:
	ECharaType                                    CharaType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsConfirmed;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerContextPickedCharaInfo) == 0x000001, "Wrong alignment on FPlayerContextPickedCharaInfo");
static_assert(sizeof(FPlayerContextPickedCharaInfo) == 0x000002, "Wrong size on FPlayerContextPickedCharaInfo");
static_assert(offsetof(FPlayerContextPickedCharaInfo, CharaType) == 0x000000, "Member 'FPlayerContextPickedCharaInfo::CharaType' has a wrong offset!");
static_assert(offsetof(FPlayerContextPickedCharaInfo, IsConfirmed) == 0x000001, "Member 'FPlayerContextPickedCharaInfo::IsConfirmed' has a wrong offset!");

// ScriptStruct Stigma.PooledChara
// 0x0020 (0x0020 - 0x0000)
struct FPooledChara final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastPos;                                           // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPooledChara) == 0x000008, "Wrong alignment on FPooledChara");
static_assert(sizeof(FPooledChara) == 0x000020, "Wrong size on FPooledChara");
static_assert(offsetof(FPooledChara, Actor) == 0x000000, "Member 'FPooledChara::Actor' has a wrong offset!");
static_assert(offsetof(FPooledChara, LastPos) == 0x000008, "Member 'FPooledChara::LastPos' has a wrong offset!");

// ScriptStruct Stigma.RecruitConfirmRewardData
// 0x0030 (0x0030 - 0x0000)
struct FRecruitConfirmRewardData final
{
public:
	TSoftObjectPtr<class UDataTable>              ConfirmRewardTable;                                // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF5[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRecruitConfirmRewardData) == 0x000008, "Wrong alignment on FRecruitConfirmRewardData");
static_assert(sizeof(FRecruitConfirmRewardData) == 0x000030, "Wrong size on FRecruitConfirmRewardData");
static_assert(offsetof(FRecruitConfirmRewardData, ConfirmRewardTable) == 0x000000, "Member 'FRecruitConfirmRewardData::ConfirmRewardTable' has a wrong offset!");
static_assert(offsetof(FRecruitConfirmRewardData, RewardCount) == 0x000028, "Member 'FRecruitConfirmRewardData::RewardCount' has a wrong offset!");

// ScriptStruct Stigma.RecruitExcuteData
// 0x0060 (0x0060 - 0x0000)
struct FRecruitExcuteData final
{
public:
	class FText                                   ButtonDisplayName;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RecruitCount;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF6[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Currency                    MainPriceType;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainPrice;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF7[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FItemIDRef_Currency                    SubPriceType;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubPrice;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF8[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FRecruitConfirmRewardData>      ConfirmRewardDatas;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecruitExcuteData) == 0x000008, "Wrong alignment on FRecruitExcuteData");
static_assert(sizeof(FRecruitExcuteData) == 0x000060, "Wrong size on FRecruitExcuteData");
static_assert(offsetof(FRecruitExcuteData, ButtonDisplayName) == 0x000000, "Member 'FRecruitExcuteData::ButtonDisplayName' has a wrong offset!");
static_assert(offsetof(FRecruitExcuteData, RecruitCount) == 0x000018, "Member 'FRecruitExcuteData::RecruitCount' has a wrong offset!");
static_assert(offsetof(FRecruitExcuteData, MainPriceType) == 0x000020, "Member 'FRecruitExcuteData::MainPriceType' has a wrong offset!");
static_assert(offsetof(FRecruitExcuteData, MainPrice) == 0x000030, "Member 'FRecruitExcuteData::MainPrice' has a wrong offset!");
static_assert(offsetof(FRecruitExcuteData, SubPriceType) == 0x000038, "Member 'FRecruitExcuteData::SubPriceType' has a wrong offset!");
static_assert(offsetof(FRecruitExcuteData, SubPrice) == 0x000048, "Member 'FRecruitExcuteData::SubPrice' has a wrong offset!");
static_assert(offsetof(FRecruitExcuteData, ConfirmRewardDatas) == 0x000050, "Member 'FRecruitExcuteData::ConfirmRewardDatas' has a wrong offset!");

// ScriptStruct Stigma.RecruitDefine
// 0x0078 (0x01A8 - 0x0130)
struct FRecruitDefine final : public FItemEntry
{
public:
	TArray<struct FRecruitExcuteData>             RecruitCount;                                      // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartAt;                                           // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndAt;                                             // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DetailLink;                                        // 0x0168(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              RewardTable;                                       // 0x0180(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecruitDefine) == 0x000008, "Wrong alignment on FRecruitDefine");
static_assert(sizeof(FRecruitDefine) == 0x0001A8, "Wrong size on FRecruitDefine");
static_assert(offsetof(FRecruitDefine, RecruitCount) == 0x000130, "Member 'FRecruitDefine::RecruitCount' has a wrong offset!");
static_assert(offsetof(FRecruitDefine, WidgetClass) == 0x000140, "Member 'FRecruitDefine::WidgetClass' has a wrong offset!");
static_assert(offsetof(FRecruitDefine, StartAt) == 0x000148, "Member 'FRecruitDefine::StartAt' has a wrong offset!");
static_assert(offsetof(FRecruitDefine, EndAt) == 0x000158, "Member 'FRecruitDefine::EndAt' has a wrong offset!");
static_assert(offsetof(FRecruitDefine, DetailLink) == 0x000168, "Member 'FRecruitDefine::DetailLink' has a wrong offset!");
static_assert(offsetof(FRecruitDefine, RewardTable) == 0x000180, "Member 'FRecruitDefine::RewardTable' has a wrong offset!");

// ScriptStruct Stigma.RegistryStructMap
// 0x0050 (0x0050 - 0x0000)
struct FRegistryStructMap final
{
public:
	TMap<class FString, struct FRegistryData>     StructMap;                                         // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegistryStructMap) == 0x000008, "Wrong alignment on FRegistryStructMap");
static_assert(sizeof(FRegistryStructMap) == 0x000050, "Wrong size on FRegistryStructMap");
static_assert(offsetof(FRegistryStructMap, StructMap) == 0x000000, "Member 'FRegistryStructMap::StructMap' has a wrong offset!");

// ScriptStruct Stigma.RichImageTextRow
// 0x00F8 (0x0100 - 0x0008)
struct FRichImageTextRow final : public FTableRowBase
{
public:
	uint8                                         Pad_1EF9[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-69 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x00E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFA[0x8];                                     // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRichImageTextRow) == 0x000010, "Wrong alignment on FRichImageTextRow");
static_assert(sizeof(FRichImageTextRow) == 0x000100, "Wrong size on FRichImageTextRow");
static_assert(offsetof(FRichImageTextRow, Brush) == 0x000010, "Member 'FRichImageTextRow::Brush' has a wrong offset!");
static_assert(offsetof(FRichImageTextRow, DisplayText) == 0x0000E0, "Member 'FRichImageTextRow::DisplayText' has a wrong offset!");

// ScriptStruct Stigma.RollingParams
// 0x0040 (0x0040 - 0x0000)
struct FRollingParams final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsThrown;                                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFB[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRollingParams) == 0x000008, "Wrong alignment on FRollingParams");
static_assert(sizeof(FRollingParams) == 0x000040, "Wrong size on FRollingParams");
static_assert(offsetof(FRollingParams, Location) == 0x000000, "Member 'FRollingParams::Location' has a wrong offset!");
static_assert(offsetof(FRollingParams, Direction) == 0x000018, "Member 'FRollingParams::Direction' has a wrong offset!");
static_assert(offsetof(FRollingParams, Speed) == 0x000030, "Member 'FRollingParams::Speed' has a wrong offset!");
static_assert(offsetof(FRollingParams, StartTime) == 0x000034, "Member 'FRollingParams::StartTime' has a wrong offset!");
static_assert(offsetof(FRollingParams, Gravity) == 0x000038, "Member 'FRollingParams::Gravity' has a wrong offset!");
static_assert(offsetof(FRollingParams, IsThrown) == 0x00003C, "Member 'FRollingParams::IsThrown' has a wrong offset!");

// ScriptStruct Stigma.ScopeSystem
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x10) FScopeSystem final
{
public:
	uint8                                         Pad_1EFC[0x110];                                   // 0x0000(0x0110)(Fixing Size After Last Property [ Dumper-69 ])
	class UCurveFloat*                            _RecoilCurve;                                      // 0x0110(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGunBase*                               _gun;                                              // 0x0118(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FScopeSystem) == 0x000010, "Wrong alignment on FScopeSystem");
static_assert(sizeof(FScopeSystem) == 0x000120, "Wrong size on FScopeSystem");
static_assert(offsetof(FScopeSystem, _RecoilCurve) == 0x000110, "Member 'FScopeSystem::_RecoilCurve' has a wrong offset!");
static_assert(offsetof(FScopeSystem, _gun) == 0x000118, "Member 'FScopeSystem::_gun' has a wrong offset!");

// ScriptStruct Stigma.Config_Season
// 0x00A0 (0x00A8 - 0x0008)
struct FConfig_Season final : public FTableRowBase
{
public:
	struct FSeasonID                              SeasonID;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERankingType, int32>                     RankDisplayCountPerMode;                           // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSeasonReward>                  Rewards;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Season) == 0x000008, "Wrong alignment on FConfig_Season");
static_assert(sizeof(FConfig_Season) == 0x0000A8, "Wrong size on FConfig_Season");
static_assert(offsetof(FConfig_Season, SeasonID) == 0x000008, "Member 'FConfig_Season::SeasonID' has a wrong offset!");
static_assert(offsetof(FConfig_Season, DisplayName) == 0x000010, "Member 'FConfig_Season::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_Season, StartDate) == 0x000028, "Member 'FConfig_Season::StartDate' has a wrong offset!");
static_assert(offsetof(FConfig_Season, EndDate) == 0x000038, "Member 'FConfig_Season::EndDate' has a wrong offset!");
static_assert(offsetof(FConfig_Season, RankDisplayCountPerMode) == 0x000048, "Member 'FConfig_Season::RankDisplayCountPerMode' has a wrong offset!");
static_assert(offsetof(FConfig_Season, Rewards) == 0x000098, "Member 'FConfig_Season::Rewards' has a wrong offset!");

// ScriptStruct Stigma.SharedPlayerScore
// 0x0010 (0x0010 - 0x0000)
struct FSharedPlayerScore final
{
public:
	int32                                         KillCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathCount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadShotCount;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSharedPlayerScore) == 0x000004, "Wrong alignment on FSharedPlayerScore");
static_assert(sizeof(FSharedPlayerScore) == 0x000010, "Wrong size on FSharedPlayerScore");
static_assert(offsetof(FSharedPlayerScore, KillCount) == 0x000000, "Member 'FSharedPlayerScore::KillCount' has a wrong offset!");
static_assert(offsetof(FSharedPlayerScore, AssistCount) == 0x000004, "Member 'FSharedPlayerScore::AssistCount' has a wrong offset!");
static_assert(offsetof(FSharedPlayerScore, DeathCount) == 0x000008, "Member 'FSharedPlayerScore::DeathCount' has a wrong offset!");
static_assert(offsetof(FSharedPlayerScore, HeadShotCount) == 0x00000C, "Member 'FSharedPlayerScore::HeadShotCount' has a wrong offset!");

// ScriptStruct Stigma.PlayerKPI
// 0x000C (0x000C - 0x0000)
struct FPlayerKPI final
{
public:
	int32                                         KillCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistCount;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerKPI) == 0x000004, "Wrong alignment on FPlayerKPI");
static_assert(sizeof(FPlayerKPI) == 0x00000C, "Wrong size on FPlayerKPI");
static_assert(offsetof(FPlayerKPI, KillCount) == 0x000000, "Member 'FPlayerKPI::KillCount' has a wrong offset!");
static_assert(offsetof(FPlayerKPI, DeathCount) == 0x000004, "Member 'FPlayerKPI::DeathCount' has a wrong offset!");
static_assert(offsetof(FPlayerKPI, AssistCount) == 0x000008, "Member 'FPlayerKPI::AssistCount' has a wrong offset!");

// ScriptStruct Stigma.PartyInviteNotify
// 0x0010 (0x0010 - 0x0000)
struct FPartyInviteNotify final
{
public:
	struct FPartyID                               PartyID;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UUserProfile*                           Inviter;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyInviteNotify) == 0x000008, "Wrong alignment on FPartyInviteNotify");
static_assert(sizeof(FPartyInviteNotify) == 0x000010, "Wrong size on FPartyInviteNotify");
static_assert(offsetof(FPartyInviteNotify, PartyID) == 0x000000, "Member 'FPartyInviteNotify::PartyID' has a wrong offset!");
static_assert(offsetof(FPartyInviteNotify, Inviter) == 0x000008, "Member 'FPartyInviteNotify::Inviter' has a wrong offset!");

// ScriptStruct Stigma.BC_FriendLogin
// 0x0168 (0x0168 - 0x0000)
struct FBC_FriendLogin final
{
public:
	struct FFriend                                LoginFriend;                                       // 0x0000(0x0168)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_FriendLogin) == 0x000008, "Wrong alignment on FBC_FriendLogin");
static_assert(sizeof(FBC_FriendLogin) == 0x000168, "Wrong size on FBC_FriendLogin");
static_assert(offsetof(FBC_FriendLogin, LoginFriend) == 0x000000, "Member 'FBC_FriendLogin::LoginFriend' has a wrong offset!");

// ScriptStruct Stigma.CREQ_PartyInvite
// 0x0030 (0x0030 - 0x0000)
struct FCREQ_PartyInvite final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                FromIDN;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserName                              FromNick;                                          // 0x0010(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                ToIDN;                                             // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCREQ_PartyInvite) == 0x000008, "Wrong alignment on FCREQ_PartyInvite");
static_assert(sizeof(FCREQ_PartyInvite) == 0x000030, "Wrong size on FCREQ_PartyInvite");
static_assert(offsetof(FCREQ_PartyInvite, PartyIDN) == 0x000000, "Member 'FCREQ_PartyInvite::PartyIDN' has a wrong offset!");
static_assert(offsetof(FCREQ_PartyInvite, FromIDN) == 0x000008, "Member 'FCREQ_PartyInvite::FromIDN' has a wrong offset!");
static_assert(offsetof(FCREQ_PartyInvite, FromNick) == 0x000010, "Member 'FCREQ_PartyInvite::FromNick' has a wrong offset!");
static_assert(offsetof(FCREQ_PartyInvite, ToIDN) == 0x000028, "Member 'FCREQ_PartyInvite::ToIDN' has a wrong offset!");

// ScriptStruct Stigma.FIN_PartyInvite
// 0x0010 (0x0018 - 0x0008)
struct FFIN_PartyInvite final : public FApiResult
{
public:
	class FString                                 ACKCode;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFIN_PartyInvite) == 0x000008, "Wrong alignment on FFIN_PartyInvite");
static_assert(sizeof(FFIN_PartyInvite) == 0x000018, "Wrong size on FFIN_PartyInvite");
static_assert(offsetof(FFIN_PartyInvite, ACKCode) == 0x000008, "Member 'FFIN_PartyInvite::ACKCode' has a wrong offset!");

// ScriptStruct Stigma.BC_PartyDelete
// 0x0018 (0x0018 - 0x0000)
struct FBC_PartyDelete final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                LeaderIDN;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserID                                UserIDN;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_PartyDelete) == 0x000008, "Wrong alignment on FBC_PartyDelete");
static_assert(sizeof(FBC_PartyDelete) == 0x000018, "Wrong size on FBC_PartyDelete");
static_assert(offsetof(FBC_PartyDelete, PartyIDN) == 0x000000, "Member 'FBC_PartyDelete::PartyIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyDelete, LeaderIDN) == 0x000008, "Member 'FBC_PartyDelete::LeaderIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyDelete, UserIDN) == 0x000010, "Member 'FBC_PartyDelete::UserIDN' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyChat
// 0x0001 (0x0001 - 0x0000)
struct FACK_PartyChat final
{
public:
	uint8                                         Pad_1EFE[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FACK_PartyChat) == 0x000001, "Wrong alignment on FACK_PartyChat");
static_assert(sizeof(FACK_PartyChat) == 0x000001, "Wrong size on FACK_PartyChat");

// ScriptStruct Stigma.BC_PartyChat
// 0x0018 (0x0018 - 0x0000)
struct FBC_PartyChat final
{
public:
	struct FUserID                                SendIDN;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_PartyChat) == 0x000008, "Wrong alignment on FBC_PartyChat");
static_assert(sizeof(FBC_PartyChat) == 0x000018, "Wrong size on FBC_PartyChat");
static_assert(offsetof(FBC_PartyChat, SendIDN) == 0x000000, "Member 'FBC_PartyChat::SendIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyChat, Msg) == 0x000008, "Member 'FBC_PartyChat::Msg' has a wrong offset!");

// ScriptStruct Stigma.ACK_PartyLeaderUpdate
// 0x0010 (0x0010 - 0x0000)
struct FACK_PartyLeaderUpdate final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                LeaderIDN;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FACK_PartyLeaderUpdate) == 0x000008, "Wrong alignment on FACK_PartyLeaderUpdate");
static_assert(sizeof(FACK_PartyLeaderUpdate) == 0x000010, "Wrong size on FACK_PartyLeaderUpdate");
static_assert(offsetof(FACK_PartyLeaderUpdate, PartyIDN) == 0x000000, "Member 'FACK_PartyLeaderUpdate::PartyIDN' has a wrong offset!");
static_assert(offsetof(FACK_PartyLeaderUpdate, LeaderIDN) == 0x000008, "Member 'FACK_PartyLeaderUpdate::LeaderIDN' has a wrong offset!");

// ScriptStruct Stigma.BC_PartyLeaderUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_PartyLeaderUpdate final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                LeaderIDN;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_PartyLeaderUpdate) == 0x000008, "Wrong alignment on FBC_PartyLeaderUpdate");
static_assert(sizeof(FBC_PartyLeaderUpdate) == 0x000010, "Wrong size on FBC_PartyLeaderUpdate");
static_assert(offsetof(FBC_PartyLeaderUpdate, PartyIDN) == 0x000000, "Member 'FBC_PartyLeaderUpdate::PartyIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyLeaderUpdate, LeaderIDN) == 0x000008, "Member 'FBC_PartyLeaderUpdate::LeaderIDN' has a wrong offset!");

// ScriptStruct Stigma.BC_PartyCharacterUpdate
// 0x0110 (0x0110 - 0x0000)
struct FBC_PartyCharacterUpdate final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUserID                                UserIDN;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharSpec                              CharSpec;                                          // 0x0010(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBC_PartyCharacterUpdate) == 0x000008, "Wrong alignment on FBC_PartyCharacterUpdate");
static_assert(sizeof(FBC_PartyCharacterUpdate) == 0x000110, "Wrong size on FBC_PartyCharacterUpdate");
static_assert(offsetof(FBC_PartyCharacterUpdate, PartyIDN) == 0x000000, "Member 'FBC_PartyCharacterUpdate::PartyIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyCharacterUpdate, UserIDN) == 0x000008, "Member 'FBC_PartyCharacterUpdate::UserIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyCharacterUpdate, CharSpec) == 0x000010, "Member 'FBC_PartyCharacterUpdate::CharSpec' has a wrong offset!");

// ScriptStruct Stigma.BC_PartyGameModeUpdate
// 0x0010 (0x0010 - 0x0000)
struct FBC_PartyGameModeUpdate final
{
public:
	struct FPartyID                               PartyIDN;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FBC_PartyGameModeUpdate) == 0x000008, "Wrong alignment on FBC_PartyGameModeUpdate");
static_assert(sizeof(FBC_PartyGameModeUpdate) == 0x000010, "Wrong size on FBC_PartyGameModeUpdate");
static_assert(offsetof(FBC_PartyGameModeUpdate, PartyIDN) == 0x000000, "Member 'FBC_PartyGameModeUpdate::PartyIDN' has a wrong offset!");
static_assert(offsetof(FBC_PartyGameModeUpdate, GameMode) == 0x000008, "Member 'FBC_PartyGameModeUpdate::GameMode' has a wrong offset!");

// ScriptStruct Stigma.AnimsForStance
// 0x0028 (0x0028 - 0x0000)
struct FAnimsForStance final
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Idle;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Posture_Aim;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Posture_HoldProp;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Posture_Covering;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimsForStance) == 0x000008, "Wrong alignment on FAnimsForStance");
static_assert(sizeof(FAnimsForStance) == 0x000028, "Wrong size on FAnimsForStance");
static_assert(offsetof(FAnimsForStance, BlendSpace) == 0x000000, "Member 'FAnimsForStance::BlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimsForStance, Idle) == 0x000008, "Member 'FAnimsForStance::Idle' has a wrong offset!");
static_assert(offsetof(FAnimsForStance, Posture_Aim) == 0x000010, "Member 'FAnimsForStance::Posture_Aim' has a wrong offset!");
static_assert(offsetof(FAnimsForStance, Posture_HoldProp) == 0x000018, "Member 'FAnimsForStance::Posture_HoldProp' has a wrong offset!");
static_assert(offsetof(FAnimsForStance, Posture_Covering) == 0x000020, "Member 'FAnimsForStance::Posture_Covering' has a wrong offset!");

// ScriptStruct Stigma.CharaMovementAnimation
// 0x0138 (0x0138 - 0x0000)
struct FCharaMovementAnimation final
{
public:
	class UBlendSpace*                            Stand_Jog_BlendSpace;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Stand_Move_BlendSpace;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   Stand_Jog_AimOffset;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   Stand_Move_AimOffset;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   Zoom_AimOffset;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Stand_Move_Idle;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              Stand_Move_Idle_Loops;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Stand_Move_AdditivePose;                           // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Crouch_BlendSpace;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   Crouch_AimOffset;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   Crouch_Zoom_AimOffset;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Crouch_To_Stand;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Stand_To_Crouch;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Crouch_Idle;                                       // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Crouch_StayLow;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Stand_TurnInPlace_Left;                            // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Stand_TurnInPlace_Right;                           // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Crouch_TurnInPlace_Left;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Crouch_TurnInPlace_Right;                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBPLocoMotionAnimParams                SprintParams;                                      // 0x00A0(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharaMovementAnimation) == 0x000008, "Wrong alignment on FCharaMovementAnimation");
static_assert(sizeof(FCharaMovementAnimation) == 0x000138, "Wrong size on FCharaMovementAnimation");
static_assert(offsetof(FCharaMovementAnimation, Stand_Jog_BlendSpace) == 0x000000, "Member 'FCharaMovementAnimation::Stand_Jog_BlendSpace' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_Move_BlendSpace) == 0x000008, "Member 'FCharaMovementAnimation::Stand_Move_BlendSpace' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_Jog_AimOffset) == 0x000010, "Member 'FCharaMovementAnimation::Stand_Jog_AimOffset' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_Move_AimOffset) == 0x000018, "Member 'FCharaMovementAnimation::Stand_Move_AimOffset' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Zoom_AimOffset) == 0x000020, "Member 'FCharaMovementAnimation::Zoom_AimOffset' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_Move_Idle) == 0x000028, "Member 'FCharaMovementAnimation::Stand_Move_Idle' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_Move_Idle_Loops) == 0x000030, "Member 'FCharaMovementAnimation::Stand_Move_Idle_Loops' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_Move_AdditivePose) == 0x000040, "Member 'FCharaMovementAnimation::Stand_Move_AdditivePose' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_BlendSpace) == 0x000048, "Member 'FCharaMovementAnimation::Crouch_BlendSpace' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_AimOffset) == 0x000050, "Member 'FCharaMovementAnimation::Crouch_AimOffset' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_Zoom_AimOffset) == 0x000058, "Member 'FCharaMovementAnimation::Crouch_Zoom_AimOffset' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_To_Stand) == 0x000060, "Member 'FCharaMovementAnimation::Crouch_To_Stand' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_To_Crouch) == 0x000068, "Member 'FCharaMovementAnimation::Stand_To_Crouch' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_Idle) == 0x000070, "Member 'FCharaMovementAnimation::Crouch_Idle' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_StayLow) == 0x000078, "Member 'FCharaMovementAnimation::Crouch_StayLow' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_TurnInPlace_Left) == 0x000080, "Member 'FCharaMovementAnimation::Stand_TurnInPlace_Left' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Stand_TurnInPlace_Right) == 0x000088, "Member 'FCharaMovementAnimation::Stand_TurnInPlace_Right' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_TurnInPlace_Left) == 0x000090, "Member 'FCharaMovementAnimation::Crouch_TurnInPlace_Left' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, Crouch_TurnInPlace_Right) == 0x000098, "Member 'FCharaMovementAnimation::Crouch_TurnInPlace_Right' has a wrong offset!");
static_assert(offsetof(FCharaMovementAnimation, SprintParams) == 0x0000A0, "Member 'FCharaMovementAnimation::SprintParams' has a wrong offset!");

// ScriptStruct Stigma.SpecterAnimNode
// 0x0870 (0x0880 - 0x0010)
struct FSpecterAnimNode final : public FAnimNode_Base
{
public:
	uint8                                         Pad_1F00[0x870];                                   // 0x0010(0x0870)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FSpecterAnimNode) == 0x000008, "Wrong alignment on FSpecterAnimNode");
static_assert(sizeof(FSpecterAnimNode) == 0x000880, "Wrong size on FSpecterAnimNode");

// ScriptStruct Stigma.SpecterAnimProxy
// 0x0010 (0x0710 - 0x0700)
struct FSpecterAnimProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_1F01[0x18];                                    // 0x06F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FSpecterAnimProxy) == 0x000010, "Wrong alignment on FSpecterAnimProxy");
static_assert(sizeof(FSpecterAnimProxy) == 0x000710, "Wrong size on FSpecterAnimProxy");

// ScriptStruct Stigma.Stat_Attendance
// 0x0018 (0x0018 - 0x0000)
struct FStat_Attendance final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F02[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FDateTimeISO                           LastRewardDate;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardCount;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F03[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FStat_Attendance) == 0x000008, "Wrong alignment on FStat_Attendance");
static_assert(sizeof(FStat_Attendance) == 0x000018, "Wrong size on FStat_Attendance");
static_assert(offsetof(FStat_Attendance, Count) == 0x000000, "Member 'FStat_Attendance::Count' has a wrong offset!");
static_assert(offsetof(FStat_Attendance, LastRewardDate) == 0x000008, "Member 'FStat_Attendance::LastRewardDate' has a wrong offset!");
static_assert(offsetof(FStat_Attendance, RewardCount) == 0x000010, "Member 'FStat_Attendance::RewardCount' has a wrong offset!");

// ScriptStruct Stigma.Stat_Shop
// 0x0010 (0x0010 - 0x0000)
struct FStat_Shop final
{
public:
	int32                                         BuyPoint;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyCash;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiveRBox;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardRBox;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_Shop) == 0x000004, "Wrong alignment on FStat_Shop");
static_assert(sizeof(FStat_Shop) == 0x000010, "Wrong size on FStat_Shop");
static_assert(offsetof(FStat_Shop, BuyPoint) == 0x000000, "Member 'FStat_Shop::BuyPoint' has a wrong offset!");
static_assert(offsetof(FStat_Shop, BuyCash) == 0x000004, "Member 'FStat_Shop::BuyCash' has a wrong offset!");
static_assert(offsetof(FStat_Shop, GiveRBox) == 0x000008, "Member 'FStat_Shop::GiveRBox' has a wrong offset!");
static_assert(offsetof(FStat_Shop, RewardRBox) == 0x00000C, "Member 'FStat_Shop::RewardRBox' has a wrong offset!");

// ScriptStruct Stigma.Stat_Craft
// 0x0028 (0x0028 - 0x0000)
struct FStat_Craft final
{
public:
	int32                                         Cnt;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cmmn;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Advn;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rare;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lgnd;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPVP;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPVE;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CRank;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CEvent;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImmCount;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat_Craft) == 0x000004, "Wrong alignment on FStat_Craft");
static_assert(sizeof(FStat_Craft) == 0x000028, "Wrong size on FStat_Craft");
static_assert(offsetof(FStat_Craft, Cnt) == 0x000000, "Member 'FStat_Craft::Cnt' has a wrong offset!");
static_assert(offsetof(FStat_Craft, Cmmn) == 0x000004, "Member 'FStat_Craft::Cmmn' has a wrong offset!");
static_assert(offsetof(FStat_Craft, Advn) == 0x000008, "Member 'FStat_Craft::Advn' has a wrong offset!");
static_assert(offsetof(FStat_Craft, Rare) == 0x00000C, "Member 'FStat_Craft::Rare' has a wrong offset!");
static_assert(offsetof(FStat_Craft, Lgnd) == 0x000010, "Member 'FStat_Craft::Lgnd' has a wrong offset!");
static_assert(offsetof(FStat_Craft, CPVP) == 0x000014, "Member 'FStat_Craft::CPVP' has a wrong offset!");
static_assert(offsetof(FStat_Craft, CPVE) == 0x000018, "Member 'FStat_Craft::CPVE' has a wrong offset!");
static_assert(offsetof(FStat_Craft, CRank) == 0x00001C, "Member 'FStat_Craft::CRank' has a wrong offset!");
static_assert(offsetof(FStat_Craft, CEvent) == 0x000020, "Member 'FStat_Craft::CEvent' has a wrong offset!");
static_assert(offsetof(FStat_Craft, ImmCount) == 0x000024, "Member 'FStat_Craft::ImmCount' has a wrong offset!");

// ScriptStruct Stigma.Stat
// 0x0078 (0x0078 - 0x0000)
struct FStat final
{
public:
	struct FUserID                                UserID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStat_Attendance                       Attd;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_Boost                            Boost;                                             // 0x0020(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_Shop                             Shop;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FStat_Craft                            Craft;                                             // 0x0050(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStat) == 0x000008, "Wrong alignment on FStat");
static_assert(sizeof(FStat) == 0x000078, "Wrong size on FStat");
static_assert(offsetof(FStat, UserID) == 0x000000, "Member 'FStat::UserID' has a wrong offset!");
static_assert(offsetof(FStat, Attd) == 0x000008, "Member 'FStat::Attd' has a wrong offset!");
static_assert(offsetof(FStat, Boost) == 0x000020, "Member 'FStat::Boost' has a wrong offset!");
static_assert(offsetof(FStat, Shop) == 0x000040, "Member 'FStat::Shop' has a wrong offset!");
static_assert(offsetof(FStat, Craft) == 0x000050, "Member 'FStat::Craft' has a wrong offset!");

// ScriptStruct Stigma.Config_PoisonArea
// 0x0068 (0x0070 - 0x0008)
struct FConfig_PoisonArea final : public FTableRowBase
{
public:
	struct FSoundDefines                          Sound;                                             // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EAbnormal                                     Abnormal;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F04[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         Range;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageTarget                                 DamageTarget;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F05[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         EnterDamageInterval;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterDamage;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveDamageDuration;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveDamage;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EffectOnlyOnFloor;                                 // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F06[0x3];                                     // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_PoisonArea) == 0x000008, "Wrong alignment on FConfig_PoisonArea");
static_assert(sizeof(FConfig_PoisonArea) == 0x000070, "Wrong size on FConfig_PoisonArea");
static_assert(offsetof(FConfig_PoisonArea, Sound) == 0x000008, "Member 'FConfig_PoisonArea::Sound' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, Abnormal) == 0x000048, "Member 'FConfig_PoisonArea::Abnormal' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, Range) == 0x00004C, "Member 'FConfig_PoisonArea::Range' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, Duration) == 0x000050, "Member 'FConfig_PoisonArea::Duration' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, FadeOutDuration) == 0x000054, "Member 'FConfig_PoisonArea::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, DamageTarget) == 0x000058, "Member 'FConfig_PoisonArea::DamageTarget' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, EnterDamageInterval) == 0x00005C, "Member 'FConfig_PoisonArea::EnterDamageInterval' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, EnterDamage) == 0x000060, "Member 'FConfig_PoisonArea::EnterDamage' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, LeaveDamageDuration) == 0x000064, "Member 'FConfig_PoisonArea::LeaveDamageDuration' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, LeaveDamage) == 0x000068, "Member 'FConfig_PoisonArea::LeaveDamage' has a wrong offset!");
static_assert(offsetof(FConfig_PoisonArea, EffectOnlyOnFloor) == 0x00006C, "Member 'FConfig_PoisonArea::EffectOnlyOnFloor' has a wrong offset!");

// ScriptStruct Stigma.Config_AntidoteArea
// 0x0058 (0x0060 - 0x0008)
struct FConfig_AntidoteArea final : public FTableRowBase
{
public:
	struct FSoundDefines                          Sound;                                             // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFadeInAlpha;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFadeOutAlpha;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F07[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FConfig_AntidoteArea) == 0x000008, "Wrong alignment on FConfig_AntidoteArea");
static_assert(sizeof(FConfig_AntidoteArea) == 0x000060, "Wrong size on FConfig_AntidoteArea");
static_assert(offsetof(FConfig_AntidoteArea, Sound) == 0x000008, "Member 'FConfig_AntidoteArea::Sound' has a wrong offset!");
static_assert(offsetof(FConfig_AntidoteArea, Range) == 0x000048, "Member 'FConfig_AntidoteArea::Range' has a wrong offset!");
static_assert(offsetof(FConfig_AntidoteArea, Duration) == 0x00004C, "Member 'FConfig_AntidoteArea::Duration' has a wrong offset!");
static_assert(offsetof(FConfig_AntidoteArea, FadeOutDuration) == 0x000050, "Member 'FConfig_AntidoteArea::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(FConfig_AntidoteArea, TargetFadeInAlpha) == 0x000054, "Member 'FConfig_AntidoteArea::TargetFadeInAlpha' has a wrong offset!");
static_assert(offsetof(FConfig_AntidoteArea, TargetFadeOutAlpha) == 0x000058, "Member 'FConfig_AntidoteArea::TargetFadeOutAlpha' has a wrong offset!");

// ScriptStruct Stigma.MergeMeshSlot
// 0x0018 (0x0018 - 0x0000)
struct FMergeMeshSlot final
{
public:
	TArray<int32>                                 SlotIndex;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          OriginMesh;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMergeMeshSlot) == 0x000008, "Wrong alignment on FMergeMeshSlot");
static_assert(sizeof(FMergeMeshSlot) == 0x000018, "Wrong size on FMergeMeshSlot");
static_assert(offsetof(FMergeMeshSlot, SlotIndex) == 0x000000, "Member 'FMergeMeshSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FMergeMeshSlot, OriginMesh) == 0x000010, "Member 'FMergeMeshSlot::OriginMesh' has a wrong offset!");

// ScriptStruct Stigma.SurveyAnswer
// 0x0028 (0x0028 - 0x0000)
struct FSurveyAnswer final
{
public:
	TArray<int32>                                 Selections;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSurveyAnswer) == 0x000008, "Wrong alignment on FSurveyAnswer");
static_assert(sizeof(FSurveyAnswer) == 0x000028, "Wrong size on FSurveyAnswer");
static_assert(offsetof(FSurveyAnswer, Selections) == 0x000000, "Member 'FSurveyAnswer::Selections' has a wrong offset!");
static_assert(offsetof(FSurveyAnswer, Text) == 0x000010, "Member 'FSurveyAnswer::Text' has a wrong offset!");

// ScriptStruct Stigma.TableEntryIndex
// 0x0020 (0x0020 - 0x0000)
struct FTableEntryIndex final
{
public:
	class FString                                 Table_path;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Table_key;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableEntryIndex) == 0x000008, "Wrong alignment on FTableEntryIndex");
static_assert(sizeof(FTableEntryIndex) == 0x000020, "Wrong size on FTableEntryIndex");
static_assert(offsetof(FTableEntryIndex, Table_path) == 0x000000, "Member 'FTableEntryIndex::Table_path' has a wrong offset!");
static_assert(offsetof(FTableEntryIndex, Table_key) == 0x000010, "Member 'FTableEntryIndex::Table_key' has a wrong offset!");

// ScriptStruct Stigma.TableRegistry
// 0x0020 (0x0028 - 0x0008)
struct FTableRegistry final : public FTableRowBase
{
public:
	class FString                                 TableRowName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UScriptStruct*>                  TableStructs;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableRegistry) == 0x000008, "Wrong alignment on FTableRegistry");
static_assert(sizeof(FTableRegistry) == 0x000028, "Wrong size on FTableRegistry");
static_assert(offsetof(FTableRegistry, TableRowName) == 0x000008, "Member 'FTableRegistry::TableRowName' has a wrong offset!");
static_assert(offsetof(FTableRegistry, TableStructs) == 0x000018, "Member 'FTableRegistry::TableStructs' has a wrong offset!");

// ScriptStruct Stigma.TDMRule
// 0x0028 (0x0028 - 0x0000)
struct FTDMRule final
{
public:
	int32                                         TargetKillCount;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainKillCountToHighlight;                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCountDiffToEnableBarrier;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakInTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakInLimitKillCount;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F08[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FTDMPhaseDefine>                PhaseDefines;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTDMRule) == 0x000008, "Wrong alignment on FTDMRule");
static_assert(sizeof(FTDMRule) == 0x000028, "Wrong size on FTDMRule");
static_assert(offsetof(FTDMRule, TargetKillCount) == 0x000000, "Member 'FTDMRule::TargetKillCount' has a wrong offset!");
static_assert(offsetof(FTDMRule, RemainKillCountToHighlight) == 0x000004, "Member 'FTDMRule::RemainKillCountToHighlight' has a wrong offset!");
static_assert(offsetof(FTDMRule, KillCountDiffToEnableBarrier) == 0x000008, "Member 'FTDMRule::KillCountDiffToEnableBarrier' has a wrong offset!");
static_assert(offsetof(FTDMRule, BreakInTime) == 0x00000C, "Member 'FTDMRule::BreakInTime' has a wrong offset!");
static_assert(offsetof(FTDMRule, BreakInLimitKillCount) == 0x000010, "Member 'FTDMRule::BreakInLimitKillCount' has a wrong offset!");
static_assert(offsetof(FTDMRule, PhaseDefines) == 0x000018, "Member 'FTDMRule::PhaseDefines' has a wrong offset!");

// ScriptStruct Stigma.Config_Tier
// 0x00D0 (0x00D8 - 0x0008)
struct FConfig_Tier final : public FTableRowBase
{
public:
	ETier                                         Tier;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F09[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETierGroup                                    TierGroup;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0A[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         TierStep;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TRPMin;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopRatio;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DisplayTextImage;                                  // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BigIcon;                                           // 0x0088(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SimpleIcon;                                        // 0x00B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Tier) == 0x000008, "Wrong alignment on FConfig_Tier");
static_assert(sizeof(FConfig_Tier) == 0x0000D8, "Wrong size on FConfig_Tier");
static_assert(offsetof(FConfig_Tier, Tier) == 0x000008, "Member 'FConfig_Tier::Tier' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, DisplayName) == 0x000010, "Member 'FConfig_Tier::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, TierGroup) == 0x000028, "Member 'FConfig_Tier::TierGroup' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, TierStep) == 0x00002C, "Member 'FConfig_Tier::TierStep' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, TRPMin) == 0x000030, "Member 'FConfig_Tier::TRPMin' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, TopRatio) == 0x000034, "Member 'FConfig_Tier::TopRatio' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, DisplayTextImage) == 0x000038, "Member 'FConfig_Tier::DisplayTextImage' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, Icon) == 0x000060, "Member 'FConfig_Tier::Icon' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, BigIcon) == 0x000088, "Member 'FConfig_Tier::BigIcon' has a wrong offset!");
static_assert(offsetof(FConfig_Tier, SimpleIcon) == 0x0000B0, "Member 'FConfig_Tier::SimpleIcon' has a wrong offset!");

// ScriptStruct Stigma.ParameterAndCurve
// 0x0010 (0x0010 - 0x0000)
struct FParameterAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParameterAndCurve) == 0x000008, "Wrong alignment on FParameterAndCurve");
static_assert(sizeof(FParameterAndCurve) == 0x000010, "Wrong size on FParameterAndCurve");
static_assert(offsetof(FParameterAndCurve, ParameterName) == 0x000000, "Member 'FParameterAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FParameterAndCurve, Curve) == 0x000008, "Member 'FParameterAndCurve::Curve' has a wrong offset!");

// ScriptStruct Stigma.TeamPlayers
// 0x0018 (0x0018 - 0x0000)
struct FTeamPlayers final
{
public:
	ETeams                                        Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<class ACharaBase*>                     Characters;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamPlayers) == 0x000008, "Wrong alignment on FTeamPlayers");
static_assert(sizeof(FTeamPlayers) == 0x000018, "Wrong size on FTeamPlayers");
static_assert(offsetof(FTeamPlayers, Team) == 0x000000, "Member 'FTeamPlayers::Team' has a wrong offset!");
static_assert(offsetof(FTeamPlayers, Characters) == 0x000008, "Member 'FTeamPlayers::Characters' has a wrong offset!");

// ScriptStruct Stigma.Config_Tooltip
// 0x0010 (0x0018 - 0x0008)
struct FConfig_Tooltip final : public FTableRowBase
{
public:
	ETooltipType                                  Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	TSubclassOf<class UUI_Tooltip>                WidgetClass;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_Tooltip) == 0x000008, "Wrong alignment on FConfig_Tooltip");
static_assert(sizeof(FConfig_Tooltip) == 0x000018, "Wrong size on FConfig_Tooltip");
static_assert(offsetof(FConfig_Tooltip, Type) == 0x000008, "Member 'FConfig_Tooltip::Type' has a wrong offset!");
static_assert(offsetof(FConfig_Tooltip, WidgetClass) == 0x000010, "Member 'FConfig_Tooltip::WidgetClass' has a wrong offset!");

// ScriptStruct Stigma.Config_TutorialMatch
// 0x0038 (0x0040 - 0x0008)
struct FConfig_TutorialMatch final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharaType                                    CharacterType;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FBotCreation>                   Bots;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EGameMode                                     GameMode;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0E[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   Map;                                               // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0F[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FReward                                Reward;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfig_TutorialMatch) == 0x000008, "Wrong alignment on FConfig_TutorialMatch");
static_assert(sizeof(FConfig_TutorialMatch) == 0x000040, "Wrong size on FConfig_TutorialMatch");
static_assert(offsetof(FConfig_TutorialMatch, Level) == 0x000008, "Member 'FConfig_TutorialMatch::Level' has a wrong offset!");
static_assert(offsetof(FConfig_TutorialMatch, CharacterType) == 0x00000C, "Member 'FConfig_TutorialMatch::CharacterType' has a wrong offset!");
static_assert(offsetof(FConfig_TutorialMatch, Bots) == 0x000010, "Member 'FConfig_TutorialMatch::Bots' has a wrong offset!");
static_assert(offsetof(FConfig_TutorialMatch, GameMode) == 0x000020, "Member 'FConfig_TutorialMatch::GameMode' has a wrong offset!");
static_assert(offsetof(FConfig_TutorialMatch, Map) == 0x000024, "Member 'FConfig_TutorialMatch::Map' has a wrong offset!");
static_assert(offsetof(FConfig_TutorialMatch, Reward) == 0x000030, "Member 'FConfig_TutorialMatch::Reward' has a wrong offset!");

// ScriptStruct Stigma.AnnounceUIInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAnnounceUIInfo final
{
public:
	uint8                                         Pad_1F10[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FAnnounceUIInfo) == 0x000008, "Wrong alignment on FAnnounceUIInfo");
static_assert(sizeof(FAnnounceUIInfo) == 0x000028, "Wrong size on FAnnounceUIInfo");

// ScriptStruct Stigma.ContentUnlockerInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FContentUnlockerInfo final
{
public:
	uint8                                         Pad_1F11[0xC];                                     // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FContentUnlockerInfo) == 0x000004, "Wrong alignment on FContentUnlockerInfo");
static_assert(sizeof(FContentUnlockerInfo) == 0x00000C, "Wrong size on FContentUnlockerInfo");

// ScriptStruct Stigma.HoverMenuEntry
// 0x0058 (0x0058 - 0x0000)
struct FHoverMenuEntry final
{
public:
	EHoverMenuEntryType                           EntryType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F12[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F13[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FText                                   MenuText;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TopPadding;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomPadding;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftPadding;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightPadding;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Key;                                               // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F14[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FHoverMenuEntry) == 0x000008, "Wrong alignment on FHoverMenuEntry");
static_assert(sizeof(FHoverMenuEntry) == 0x000058, "Wrong size on FHoverMenuEntry");
static_assert(offsetof(FHoverMenuEntry, EntryType) == 0x000000, "Member 'FHoverMenuEntry::EntryType' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, ID) == 0x000004, "Member 'FHoverMenuEntry::ID' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, MenuText) == 0x000010, "Member 'FHoverMenuEntry::MenuText' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, TopPadding) == 0x000028, "Member 'FHoverMenuEntry::TopPadding' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, BottomPadding) == 0x00002C, "Member 'FHoverMenuEntry::BottomPadding' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, LeftPadding) == 0x000030, "Member 'FHoverMenuEntry::LeftPadding' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, RightPadding) == 0x000034, "Member 'FHoverMenuEntry::RightPadding' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, Key) == 0x000038, "Member 'FHoverMenuEntry::Key' has a wrong offset!");
static_assert(offsetof(FHoverMenuEntry, Visible) == 0x000050, "Member 'FHoverMenuEntry::Visible' has a wrong offset!");

// ScriptStruct Stigma.DamageIndicator
// 0x0020 (0x0020 - 0x0000)
struct FDamageIndicator final
{
public:
	class ACharaBase*                             Attacker;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F15[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UUI_DamageIndicator*                    Indicator;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUI_DamageIndicator*                    FX_UI;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamageIndicator) == 0x000008, "Wrong alignment on FDamageIndicator");
static_assert(sizeof(FDamageIndicator) == 0x000020, "Wrong size on FDamageIndicator");
static_assert(offsetof(FDamageIndicator, Attacker) == 0x000000, "Member 'FDamageIndicator::Attacker' has a wrong offset!");
static_assert(offsetof(FDamageIndicator, HitCount) == 0x000008, "Member 'FDamageIndicator::HitCount' has a wrong offset!");
static_assert(offsetof(FDamageIndicator, Indicator) == 0x000010, "Member 'FDamageIndicator::Indicator' has a wrong offset!");
static_assert(offsetof(FDamageIndicator, FX_UI) == 0x000018, "Member 'FDamageIndicator::FX_UI' has a wrong offset!");

// ScriptStruct Stigma.FloatingHitMessage
// 0x0010 (0x0010 - 0x0000)
struct FFloatingHitMessage final
{
public:
	EAbnormal                                     Abnormal;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F16[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RemainTime;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Widget;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatingHitMessage) == 0x000008, "Wrong alignment on FFloatingHitMessage");
static_assert(sizeof(FFloatingHitMessage) == 0x000010, "Wrong size on FFloatingHitMessage");
static_assert(offsetof(FFloatingHitMessage, Abnormal) == 0x000000, "Member 'FFloatingHitMessage::Abnormal' has a wrong offset!");
static_assert(offsetof(FFloatingHitMessage, RemainTime) == 0x000004, "Member 'FFloatingHitMessage::RemainTime' has a wrong offset!");
static_assert(offsetof(FFloatingHitMessage, Widget) == 0x000008, "Member 'FFloatingHitMessage::Widget' has a wrong offset!");

// ScriptStruct Stigma.ShowingItemCategory
// 0x0008 (0x0008 - 0x0000)
struct FShowingItemCategory final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F17[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         SubCategory;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShowingItemCategory) == 0x000004, "Wrong alignment on FShowingItemCategory");
static_assert(sizeof(FShowingItemCategory) == 0x000008, "Wrong size on FShowingItemCategory");
static_assert(offsetof(FShowingItemCategory, Category) == 0x000000, "Member 'FShowingItemCategory::Category' has a wrong offset!");
static_assert(offsetof(FShowingItemCategory, SubCategory) == 0x000004, "Member 'FShowingItemCategory::SubCategory' has a wrong offset!");

// ScriptStruct Stigma.RecruitHistoryWrapData
// 0x0020 (0x0020 - 0x0000)
struct FRecruitHistoryWrapData final
{
public:
	TArray<class URecruitHistoryItemData*>        RecruitHistory;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Cursor;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPage;                                       // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F18[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRecruitHistoryWrapData) == 0x000008, "Wrong alignment on FRecruitHistoryWrapData");
static_assert(sizeof(FRecruitHistoryWrapData) == 0x000020, "Wrong size on FRecruitHistoryWrapData");
static_assert(offsetof(FRecruitHistoryWrapData, RecruitHistory) == 0x000000, "Member 'FRecruitHistoryWrapData::RecruitHistory' has a wrong offset!");
static_assert(offsetof(FRecruitHistoryWrapData, Cursor) == 0x000010, "Member 'FRecruitHistoryWrapData::Cursor' has a wrong offset!");
static_assert(offsetof(FRecruitHistoryWrapData, Total) == 0x000014, "Member 'FRecruitHistoryWrapData::Total' has a wrong offset!");
static_assert(offsetof(FRecruitHistoryWrapData, CurrentPage) == 0x000018, "Member 'FRecruitHistoryWrapData::CurrentPage' has a wrong offset!");

// ScriptStruct Stigma.TutorialTarget
// 0x0028 (0x0028 - 0x0000)
struct FTutorialTarget final
{
public:
	struct FItemID                                TaskID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FItemIDRef_Mission>             MissionIDs;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ShowMissionTitle;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F19[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FTutorialTarget) == 0x000008, "Wrong alignment on FTutorialTarget");
static_assert(sizeof(FTutorialTarget) == 0x000028, "Wrong size on FTutorialTarget");
static_assert(offsetof(FTutorialTarget, TaskID) == 0x000000, "Member 'FTutorialTarget::TaskID' has a wrong offset!");
static_assert(offsetof(FTutorialTarget, MissionIDs) == 0x000010, "Member 'FTutorialTarget::MissionIDs' has a wrong offset!");
static_assert(offsetof(FTutorialTarget, ShowMissionTitle) == 0x000020, "Member 'FTutorialTarget::ShowMissionTitle' has a wrong offset!");

// ScriptStruct Stigma.GameOption
// 0x0130 (0x0130 - 0x0000)
struct FGameOption final
{
public:
	TArray<EGameMode>                             WishedGameModes;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         WishedRegions;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EOptionLanguage                               Language;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOptionLanguage                               VoiceLanguage;                                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorBlindFilterType;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1A[0x1];                                     // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         ColorBlindFilterIntensity;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1B[0x28];                                    // 0x0028(0x0028)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         RadarMapScale;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowEnemyDamage;                                 // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowHitFloating;                                 // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowAlliesNameTag;                               // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1C[0x1];                                     // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-69 ])
	TArray<struct FControlOption>                 ControlOptions;                                    // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         WindowModeType;                                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionWidth;                                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionHeight;                                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Brightness;                                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gamma;                                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowFPS;                                         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1D[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         FOV;                                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVsync;                                         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAutoGraphicsQuality;                         // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1E[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         GraphicQuality;                                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAutoLimitFPS;                                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1F[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         LimitFPS;                                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistanceQuality;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeshLODBias;                                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StaticMeshLODDistanceScale;                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAAMethod                                     AntiAliasingMethod;                                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F20[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         AntiAliasing;                                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenPercentage;                                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcessQuality;                                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalIlluminationQuality;                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReflectionQuality;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureQuality;                                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectQuality;                                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrossHairColorR;                                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrossHairColorG;                                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrossHairColorB;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrossHairColorA;                                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrossHairLength;                                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrossHairThickness;                                // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLineColorR;                                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLineColorG;                                     // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLineColorB;                                     // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLineColorA;                                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLineThickness;                                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MasterVolume;                                      // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnnouncerType                                AnnouncerType;                                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F21[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         BgmVolume;                                         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectVolume;                                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceVolume;                                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgmLobbyAndWaitVolume;                             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgmBattleVolume;                                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FxFootStepVolume;                                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FxHitVolume;                                       // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FxCartridgeVolume;                                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FxAmbientVolume;                                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FxUIVolume;                                        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceAnnouncerVolume;                              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceCharacterVolume;                              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F22[0x4];                                     // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FGameOption) == 0x000008, "Wrong alignment on FGameOption");
static_assert(sizeof(FGameOption) == 0x000130, "Wrong size on FGameOption");
static_assert(offsetof(FGameOption, WishedGameModes) == 0x000000, "Member 'FGameOption::WishedGameModes' has a wrong offset!");
static_assert(offsetof(FGameOption, WishedRegions) == 0x000010, "Member 'FGameOption::WishedRegions' has a wrong offset!");
static_assert(offsetof(FGameOption, Language) == 0x000020, "Member 'FGameOption::Language' has a wrong offset!");
static_assert(offsetof(FGameOption, VoiceLanguage) == 0x000021, "Member 'FGameOption::VoiceLanguage' has a wrong offset!");
static_assert(offsetof(FGameOption, ColorBlindFilterType) == 0x000022, "Member 'FGameOption::ColorBlindFilterType' has a wrong offset!");
static_assert(offsetof(FGameOption, ColorBlindFilterIntensity) == 0x000024, "Member 'FGameOption::ColorBlindFilterIntensity' has a wrong offset!");
static_assert(offsetof(FGameOption, RadarMapScale) == 0x000050, "Member 'FGameOption::RadarMapScale' has a wrong offset!");
static_assert(offsetof(FGameOption, IsShowEnemyDamage) == 0x000054, "Member 'FGameOption::IsShowEnemyDamage' has a wrong offset!");
static_assert(offsetof(FGameOption, IsShowHitFloating) == 0x000055, "Member 'FGameOption::IsShowHitFloating' has a wrong offset!");
static_assert(offsetof(FGameOption, IsShowAlliesNameTag) == 0x000056, "Member 'FGameOption::IsShowAlliesNameTag' has a wrong offset!");
static_assert(offsetof(FGameOption, ControlOptions) == 0x000058, "Member 'FGameOption::ControlOptions' has a wrong offset!");
static_assert(offsetof(FGameOption, WindowModeType) == 0x000068, "Member 'FGameOption::WindowModeType' has a wrong offset!");
static_assert(offsetof(FGameOption, ResolutionWidth) == 0x00006C, "Member 'FGameOption::ResolutionWidth' has a wrong offset!");
static_assert(offsetof(FGameOption, ResolutionHeight) == 0x000070, "Member 'FGameOption::ResolutionHeight' has a wrong offset!");
static_assert(offsetof(FGameOption, Brightness) == 0x000074, "Member 'FGameOption::Brightness' has a wrong offset!");
static_assert(offsetof(FGameOption, Contrast) == 0x000078, "Member 'FGameOption::Contrast' has a wrong offset!");
static_assert(offsetof(FGameOption, Gamma) == 0x00007C, "Member 'FGameOption::Gamma' has a wrong offset!");
static_assert(offsetof(FGameOption, IsShowFPS) == 0x000080, "Member 'FGameOption::IsShowFPS' has a wrong offset!");
static_assert(offsetof(FGameOption, FOV) == 0x000084, "Member 'FGameOption::FOV' has a wrong offset!");
static_assert(offsetof(FGameOption, bUseVsync) == 0x000088, "Member 'FGameOption::bUseVsync' has a wrong offset!");
static_assert(offsetof(FGameOption, EnableAutoGraphicsQuality) == 0x000089, "Member 'FGameOption::EnableAutoGraphicsQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, GraphicQuality) == 0x00008C, "Member 'FGameOption::GraphicQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, EnableAutoLimitFPS) == 0x000090, "Member 'FGameOption::EnableAutoLimitFPS' has a wrong offset!");
static_assert(offsetof(FGameOption, LimitFPS) == 0x000094, "Member 'FGameOption::LimitFPS' has a wrong offset!");
static_assert(offsetof(FGameOption, ViewDistanceQuality) == 0x000098, "Member 'FGameOption::ViewDistanceQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, MeshLODBias) == 0x00009C, "Member 'FGameOption::MeshLODBias' has a wrong offset!");
static_assert(offsetof(FGameOption, StaticMeshLODDistanceScale) == 0x0000A0, "Member 'FGameOption::StaticMeshLODDistanceScale' has a wrong offset!");
static_assert(offsetof(FGameOption, AntiAliasingMethod) == 0x0000A4, "Member 'FGameOption::AntiAliasingMethod' has a wrong offset!");
static_assert(offsetof(FGameOption, AntiAliasing) == 0x0000A8, "Member 'FGameOption::AntiAliasing' has a wrong offset!");
static_assert(offsetof(FGameOption, ScreenPercentage) == 0x0000AC, "Member 'FGameOption::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(FGameOption, PostProcessQuality) == 0x0000B0, "Member 'FGameOption::PostProcessQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, ShadowQuality) == 0x0000B4, "Member 'FGameOption::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, GlobalIlluminationQuality) == 0x0000B8, "Member 'FGameOption::GlobalIlluminationQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, ReflectionQuality) == 0x0000BC, "Member 'FGameOption::ReflectionQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, TextureQuality) == 0x0000C0, "Member 'FGameOption::TextureQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, EffectQuality) == 0x0000C4, "Member 'FGameOption::EffectQuality' has a wrong offset!");
static_assert(offsetof(FGameOption, CrossHairColorR) == 0x0000C8, "Member 'FGameOption::CrossHairColorR' has a wrong offset!");
static_assert(offsetof(FGameOption, CrossHairColorG) == 0x0000CC, "Member 'FGameOption::CrossHairColorG' has a wrong offset!");
static_assert(offsetof(FGameOption, CrossHairColorB) == 0x0000D0, "Member 'FGameOption::CrossHairColorB' has a wrong offset!");
static_assert(offsetof(FGameOption, CrossHairColorA) == 0x0000D4, "Member 'FGameOption::CrossHairColorA' has a wrong offset!");
static_assert(offsetof(FGameOption, CrossHairLength) == 0x0000D8, "Member 'FGameOption::CrossHairLength' has a wrong offset!");
static_assert(offsetof(FGameOption, CrossHairThickness) == 0x0000DC, "Member 'FGameOption::CrossHairThickness' has a wrong offset!");
static_assert(offsetof(FGameOption, OutLineColorR) == 0x0000E0, "Member 'FGameOption::OutLineColorR' has a wrong offset!");
static_assert(offsetof(FGameOption, OutLineColorG) == 0x0000E4, "Member 'FGameOption::OutLineColorG' has a wrong offset!");
static_assert(offsetof(FGameOption, OutLineColorB) == 0x0000E8, "Member 'FGameOption::OutLineColorB' has a wrong offset!");
static_assert(offsetof(FGameOption, OutLineColorA) == 0x0000EC, "Member 'FGameOption::OutLineColorA' has a wrong offset!");
static_assert(offsetof(FGameOption, OutLineThickness) == 0x0000F0, "Member 'FGameOption::OutLineThickness' has a wrong offset!");
static_assert(offsetof(FGameOption, MasterVolume) == 0x0000F4, "Member 'FGameOption::MasterVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, AnnouncerType) == 0x0000F8, "Member 'FGameOption::AnnouncerType' has a wrong offset!");
static_assert(offsetof(FGameOption, BgmVolume) == 0x0000FC, "Member 'FGameOption::BgmVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, EffectVolume) == 0x000100, "Member 'FGameOption::EffectVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, VoiceVolume) == 0x000104, "Member 'FGameOption::VoiceVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, BgmLobbyAndWaitVolume) == 0x000108, "Member 'FGameOption::BgmLobbyAndWaitVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, BgmBattleVolume) == 0x00010C, "Member 'FGameOption::BgmBattleVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, FxFootStepVolume) == 0x000110, "Member 'FGameOption::FxFootStepVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, FxHitVolume) == 0x000114, "Member 'FGameOption::FxHitVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, FxCartridgeVolume) == 0x000118, "Member 'FGameOption::FxCartridgeVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, FxAmbientVolume) == 0x00011C, "Member 'FGameOption::FxAmbientVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, FxUIVolume) == 0x000120, "Member 'FGameOption::FxUIVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, VoiceAnnouncerVolume) == 0x000124, "Member 'FGameOption::VoiceAnnouncerVolume' has a wrong offset!");
static_assert(offsetof(FGameOption, VoiceCharacterVolume) == 0x000128, "Member 'FGameOption::VoiceCharacterVolume' has a wrong offset!");

// ScriptStruct Stigma.VoiceSource
// 0x0050 (0x0058 - 0x0008)
struct FVoiceSource final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USoundCue>               English;                                           // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Korean;                                            // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceSource) == 0x000008, "Wrong alignment on FVoiceSource");
static_assert(sizeof(FVoiceSource) == 0x000058, "Wrong size on FVoiceSource");
static_assert(offsetof(FVoiceSource, English) == 0x000008, "Member 'FVoiceSource::English' has a wrong offset!");
static_assert(offsetof(FVoiceSource, Korean) == 0x000030, "Member 'FVoiceSource::Korean' has a wrong offset!");

// ScriptStruct Stigma.ToPlayVoiceInfo
// 0x0058 (0x0058 - 0x0000)
struct FToPlayVoiceInfo final
{
public:
	class USoundCue*                              SoundSource;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChannelVoiceInfo                      ChannelVoiceInfo;                                  // 0x0008(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FChannelVoiceInfo>              NextPlayChannelVoiceArray;                         // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FToPlayVoiceInfo) == 0x000008, "Wrong alignment on FToPlayVoiceInfo");
static_assert(sizeof(FToPlayVoiceInfo) == 0x000058, "Wrong size on FToPlayVoiceInfo");
static_assert(offsetof(FToPlayVoiceInfo, SoundSource) == 0x000000, "Member 'FToPlayVoiceInfo::SoundSource' has a wrong offset!");
static_assert(offsetof(FToPlayVoiceInfo, ChannelVoiceInfo) == 0x000008, "Member 'FToPlayVoiceInfo::ChannelVoiceInfo' has a wrong offset!");
static_assert(offsetof(FToPlayVoiceInfo, NextPlayChannelVoiceArray) == 0x000048, "Member 'FToPlayVoiceInfo::NextPlayChannelVoiceArray' has a wrong offset!");

// ScriptStruct Stigma.VoiceMap
// 0x0050 (0x0050 - 0x0000)
struct FVoiceMap final
{
public:
	TMap<class FName, class USoundCue*>           Map;                                               // 0x0000(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoiceMap) == 0x000008, "Wrong alignment on FVoiceMap");
static_assert(sizeof(FVoiceMap) == 0x000050, "Wrong size on FVoiceMap");
static_assert(offsetof(FVoiceMap, Map) == 0x000000, "Member 'FVoiceMap::Map' has a wrong offset!");

// ScriptStruct Stigma.Rider
// 0x0010 (0x0010 - 0x0000)
struct FRider final
{
public:
	class ACharaBase*                             Rider;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F23[0x8];                                     // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-69 ])
};
static_assert(alignof(FRider) == 0x000008, "Wrong alignment on FRider");
static_assert(sizeof(FRider) == 0x000010, "Wrong size on FRider");
static_assert(offsetof(FRider, Rider) == 0x000000, "Member 'FRider::Rider' has a wrong offset!");

}

