#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: UI_Crosshair_Hit

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BPGLib_classes.hpp"
#include "Stigma_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Crosshair_Hit.UI_Crosshair_Hit_C
// 0x0058 (0x0548 - 0x04F0)
class UUI_Crosshair_Hit_C final : public UPreviewableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 HitImage;                                          // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LB;                                                // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LT;                                                // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           MainPanel;                                         // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RB;                                                // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RT;                                                // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        ElapsedTime;                                       // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimationTime;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DriveAnimation(double Delta);
	void ExecuteUbergraph_UI_Crosshair_Hit(int32 EntryPoint);
	void OnHit(const struct FHitData& Hit_data);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Crosshair_Hit_C">();
	}
	static class UUI_Crosshair_Hit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Crosshair_Hit_C>();
	}
};
static_assert(alignof(UUI_Crosshair_Hit_C) == 0x000008, "Wrong alignment on UUI_Crosshair_Hit_C");
static_assert(sizeof(UUI_Crosshair_Hit_C) == 0x000548, "Wrong size on UUI_Crosshair_Hit_C");
static_assert(offsetof(UUI_Crosshair_Hit_C, UberGraphFrame) == 0x0004F0, "Member 'UUI_Crosshair_Hit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, HitImage) == 0x0004F8, "Member 'UUI_Crosshair_Hit_C::HitImage' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, LB) == 0x000500, "Member 'UUI_Crosshair_Hit_C::LB' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, LT) == 0x000508, "Member 'UUI_Crosshair_Hit_C::LT' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, MainPanel) == 0x000510, "Member 'UUI_Crosshair_Hit_C::MainPanel' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, RB) == 0x000518, "Member 'UUI_Crosshair_Hit_C::RB' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, RT) == 0x000520, "Member 'UUI_Crosshair_Hit_C::RT' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, ElapsedTime) == 0x000528, "Member 'UUI_Crosshair_Hit_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, AnimationTime) == 0x000530, "Member 'UUI_Crosshair_Hit_C::AnimationTime' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_Hit_C, Color) == 0x000538, "Member 'UUI_Crosshair_Hit_C::Color' has a wrong offset!");

}

