#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Item_EquippedGunPart

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "BPGLib_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Item_EquippedGunPart.Item_EquippedGunPart_C
// 0x0020 (0x0510 - 0x04F0)
class UItem_EquippedGunPart_C final : public UPreviewableWidget
{
public:
	class UImage*                                 IMG_Bg;                                            // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_PartsType;                                     // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Unequipped;                                    // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EGunPartsSlot                                 PartsSlot;                                         // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	bool OnSynchronizeProperties();
	void SetGunObject(class UGunObject* _gun_object);
	void SetIconEmptyParts();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Item_EquippedGunPart_C">();
	}
	static class UItem_EquippedGunPart_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItem_EquippedGunPart_C>();
	}
};
static_assert(alignof(UItem_EquippedGunPart_C) == 0x000008, "Wrong alignment on UItem_EquippedGunPart_C");
static_assert(sizeof(UItem_EquippedGunPart_C) == 0x000510, "Wrong size on UItem_EquippedGunPart_C");
static_assert(offsetof(UItem_EquippedGunPart_C, IMG_Bg) == 0x0004F0, "Member 'UItem_EquippedGunPart_C::IMG_Bg' has a wrong offset!");
static_assert(offsetof(UItem_EquippedGunPart_C, Img_PartsType) == 0x0004F8, "Member 'UItem_EquippedGunPart_C::Img_PartsType' has a wrong offset!");
static_assert(offsetof(UItem_EquippedGunPart_C, Img_Unequipped) == 0x000500, "Member 'UItem_EquippedGunPart_C::Img_Unequipped' has a wrong offset!");
static_assert(offsetof(UItem_EquippedGunPart_C, PartsSlot) == 0x000508, "Member 'UItem_EquippedGunPart_C::PartsSlot' has a wrong offset!");

}

