#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_CircleProgress

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CircleProgressInfo_structs.hpp"


namespace SDK::Params
{

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.DriveAnim
// 0x00C0 (0x00C0 - 0x0000)
struct Ctrl_CircleProgress_C_DriveAnim final
{
public:
	double                                        _delta;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2DSquared_ReturnValue;               // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3736[0x2];                                     // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_DriveAnim) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_DriveAnim");
static_assert(sizeof(Ctrl_CircleProgress_C_DriveAnim) == 0x0000C0, "Wrong size on Ctrl_CircleProgress_C_DriveAnim");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, _delta) == 0x000000, "Member 'Ctrl_CircleProgress_C_DriveAnim::_delta' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, Delta) == 0x000008, "Member 'Ctrl_CircleProgress_C_DriveAnim::Delta' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector2D_X) == 0x000010, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector2D_Y_1) == 0x000028, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_MakeVector_ReturnValue_1) == 0x000048, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_VInterpTo_ReturnValue) == 0x000060, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector_X) == 0x000078, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector_Y) == 0x000080, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_BreakVector_Z) == 0x000088, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000090, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_MakeVector2D_ReturnValue) == 0x0000A0, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_VSize2DSquared_ReturnValue) == 0x0000B0, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_VSize2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000B8, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_Not_PreBool_ReturnValue) == 0x0000B9, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_DriveAnim, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x0000BC, "Member 'Ctrl_CircleProgress_C_DriveAnim::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.ExecuteUbergraph_Ctrl_CircleProgress
// 0x0048 (0x0048 - 0x0000)
struct Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_OnTick__delta_ImplicitCast;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress");
static_assert(sizeof(Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress) == 0x000048, "Wrong size on Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress");
static_assert(offsetof(Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress, EntryPoint) == 0x000000, "Member 'Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress::EntryPoint' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress, K2Node_Event_MyGeometry) == 0x000004, "Member 'Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress, CallFunc_OnTick__delta_ImplicitCast) == 0x000040, "Member 'Ctrl_CircleProgress_C_ExecuteUbergraph_Ctrl_CircleProgress::CallFunc_OnTick__delta_ImplicitCast' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.OnTick
// 0x0060 (0x0060 - 0x0000)
struct Ctrl_CircleProgress_C_OnTick final
{
public:
	double                                        _delta;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              Now_time;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        T;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3737[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_delta_ImplicitCast;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_OnTick) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_OnTick");
static_assert(sizeof(Ctrl_CircleProgress_C_OnTick) == 0x000060, "Wrong size on Ctrl_CircleProgress_C_OnTick");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, _delta) == 0x000000, "Member 'Ctrl_CircleProgress_C_OnTick::_delta' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, Now_time) == 0x000008, "Member 'Ctrl_CircleProgress_C_OnTick::Now_time' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, T) == 0x000010, "Member 'Ctrl_CircleProgress_C_OnTick::T' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, Delta) == 0x000018, "Member 'Ctrl_CircleProgress_C_OnTick::Delta' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000020, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_Now_ReturnValue) == 0x000028, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_GetTotalSeconds_ReturnValue) == 0x000030, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_FClamp_ReturnValue) == 0x000040, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, K2Node_VariableSet_delta_ImplicitCast) == 0x000050, "Member 'Ctrl_CircleProgress_C_OnTick::K2Node_VariableSet_delta_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_OnTick, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000058, "Member 'Ctrl_CircleProgress_C_OnTick::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.SetProgressTime
// 0x0008 (0x0008 - 0x0000)
struct Ctrl_CircleProgress_C_SetProgressTime final
{
public:
	double                                        _time;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_SetProgressTime) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_SetProgressTime");
static_assert(sizeof(Ctrl_CircleProgress_C_SetProgressTime) == 0x000008, "Wrong size on Ctrl_CircleProgress_C_SetProgressTime");
static_assert(offsetof(Ctrl_CircleProgress_C_SetProgressTime, _time) == 0x000000, "Member 'Ctrl_CircleProgress_C_SetProgressTime::_time' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.SetTargetOffset
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_CircleProgress_C_SetTargetOffset final
{
public:
	struct FVector2D                              _offset;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_SetTargetOffset) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_SetTargetOffset");
static_assert(sizeof(Ctrl_CircleProgress_C_SetTargetOffset) == 0x000010, "Wrong size on Ctrl_CircleProgress_C_SetTargetOffset");
static_assert(offsetof(Ctrl_CircleProgress_C_SetTargetOffset, _offset) == 0x000000, "Member 'Ctrl_CircleProgress_C_SetTargetOffset::_offset' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.Start
// 0x00C8 (0x00C8 - 0x0000)
struct Ctrl_CircleProgress_C_Start final
{
public:
	double                                        _duration;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _manual_destroy;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3738[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        Direction;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       _slot;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FCircleProgressInfo                    Info;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3739[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_Blueprint_GetSizeY_ReturnValue;           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Blueprint_GetSizeX_ReturnValue;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_373A[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FCircleProgressInfo                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0080(0x0028)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_373B[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	double                                        CallFunc_Multiply_IntFloat_B_ImplicitCast;         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_B_ImplicitCast_1;       // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_Start) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_Start");
static_assert(sizeof(Ctrl_CircleProgress_C_Start) == 0x0000C8, "Wrong size on Ctrl_CircleProgress_C_Start");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, _duration) == 0x000000, "Member 'Ctrl_CircleProgress_C_Start::_duration' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, _manual_destroy) == 0x000008, "Member 'Ctrl_CircleProgress_C_Start::_manual_destroy' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, Direction) == 0x000010, "Member 'Ctrl_CircleProgress_C_Start::Direction' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, _slot) == 0x000018, "Member 'Ctrl_CircleProgress_C_Start::_slot' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, Info) == 0x000020, "Member 'Ctrl_CircleProgress_C_Start::Info' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_Blueprint_GetSizeY_ReturnValue) == 0x00004C, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_Blueprint_GetSizeY_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000050, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_Blueprint_GetSizeX_ReturnValue) == 0x000058, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_Blueprint_GetSizeX_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000060, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000078, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_GetDataTableRowFromName_OutRow) == 0x000080, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000A8, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_Multiply_IntFloat_B_ImplicitCast) == 0x0000B0, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_Multiply_IntFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_Multiply_IntFloat_B_ImplicitCast_1) == 0x0000B8, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_Multiply_IntFloat_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Start, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0000C0, "Member 'Ctrl_CircleProgress_C_Start::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.Tick
// 0x003C (0x003C - 0x0000)
struct Ctrl_CircleProgress_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_Tick) == 0x000004, "Wrong alignment on Ctrl_CircleProgress_C_Tick");
static_assert(sizeof(Ctrl_CircleProgress_C_Tick) == 0x00003C, "Wrong size on Ctrl_CircleProgress_C_Tick");
static_assert(offsetof(Ctrl_CircleProgress_C_Tick, MyGeometry) == 0x000000, "Member 'Ctrl_CircleProgress_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_Tick, InDeltaTime) == 0x000038, "Member 'Ctrl_CircleProgress_C_Tick::InDeltaTime' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.ValidateMaterial
// 0x0010 (0x0010 - 0x0000)
struct Ctrl_CircleProgress_C_ValidateMaterial final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_ValidateMaterial) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_ValidateMaterial");
static_assert(sizeof(Ctrl_CircleProgress_C_ValidateMaterial) == 0x000010, "Wrong size on Ctrl_CircleProgress_C_ValidateMaterial");
static_assert(offsetof(Ctrl_CircleProgress_C_ValidateMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'Ctrl_CircleProgress_C_ValidateMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_ValidateMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Ctrl_CircleProgress_C_ValidateMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.GetSize
// 0x0028 (0x0028 - 0x0000)
struct Ctrl_CircleProgress_C_GetSize final
{
public:
	struct FVector2D                              _size;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_GetSize) == 0x000008, "Wrong alignment on Ctrl_CircleProgress_C_GetSize");
static_assert(sizeof(Ctrl_CircleProgress_C_GetSize) == 0x000028, "Wrong size on Ctrl_CircleProgress_C_GetSize");
static_assert(offsetof(Ctrl_CircleProgress_C_GetSize, _size) == 0x000000, "Member 'Ctrl_CircleProgress_C_GetSize::_size' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_GetSize, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'Ctrl_CircleProgress_C_GetSize::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_GetSize, CallFunc_GetSize_ReturnValue) == 0x000018, "Member 'Ctrl_CircleProgress_C_GetSize::CallFunc_GetSize_ReturnValue' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.IsExpired
// 0x0002 (0x0002 - 0x0000)
struct Ctrl_CircleProgress_C_IsExpired final
{
public:
	bool                                          _expired;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_IsExpired) == 0x000001, "Wrong alignment on Ctrl_CircleProgress_C_IsExpired");
static_assert(sizeof(Ctrl_CircleProgress_C_IsExpired) == 0x000002, "Wrong size on Ctrl_CircleProgress_C_IsExpired");
static_assert(offsetof(Ctrl_CircleProgress_C_IsExpired, _expired) == 0x000000, "Member 'Ctrl_CircleProgress_C_IsExpired::_expired' has a wrong offset!");
static_assert(offsetof(Ctrl_CircleProgress_C_IsExpired, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'Ctrl_CircleProgress_C_IsExpired::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function Ctrl_CircleProgress.Ctrl_CircleProgress_C.IsManualDestroy
// 0x0001 (0x0001 - 0x0000)
struct Ctrl_CircleProgress_C_IsManualDestroy final
{
public:
	bool                                          _yes;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Ctrl_CircleProgress_C_IsManualDestroy) == 0x000001, "Wrong alignment on Ctrl_CircleProgress_C_IsManualDestroy");
static_assert(sizeof(Ctrl_CircleProgress_C_IsManualDestroy) == 0x000001, "Wrong size on Ctrl_CircleProgress_C_IsManualDestroy");
static_assert(offsetof(Ctrl_CircleProgress_C_IsManualDestroy, _yes) == 0x000000, "Member 'Ctrl_CircleProgress_C_IsManualDestroy::_yes' has a wrong offset!");

}

