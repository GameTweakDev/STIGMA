#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: DLG_Notice

#include "Basic.hpp"

#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function DLG_Notice.DLG_Notice_C.BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Source;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Line;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature) == 0x000008, "Wrong alignment on DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature");
static_assert(sizeof(DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature) == 0x000028, "Wrong size on DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature");
static_assert(offsetof(DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature, Message) == 0x000000, "Member 'DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature::Message' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature, Source) == 0x000010, "Member 'DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature::Source' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature, Line) == 0x000020, "Member 'DLG_Notice_C_BndEvt__DLG_Notice_WebBrowser_Notice_K2Node_ComponentBoundEvent_2_OnConsoleMessage__DelegateSignature::Line' has a wrong offset!");

// Function DLG_Notice.DLG_Notice_C.BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature final
{
public:
	bool                                          IsChecked;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature");
static_assert(sizeof(DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature) == 0x000001, "Wrong size on DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature");
static_assert(offsetof(DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature, IsChecked) == 0x000000, "Member 'DLG_Notice_C_BndEvt__DLG_Notice_CheckBox_DoNoOpen_K2Node_ComponentBoundEvent_1_OnCheckStateChanged__DelegateSignature::IsChecked' has a wrong offset!");

// Function DLG_Notice.DLG_Notice_C.OnInitWidget
// 0x0020 (0x0020 - 0x0000)
struct DLG_Notice_C_OnInitWidget final
{
public:
	struct FLoginNotice                           _notice;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          _is_auto_open;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DLG_Notice_C_OnInitWidget) == 0x000008, "Wrong alignment on DLG_Notice_C_OnInitWidget");
static_assert(sizeof(DLG_Notice_C_OnInitWidget) == 0x000020, "Wrong size on DLG_Notice_C_OnInitWidget");
static_assert(offsetof(DLG_Notice_C_OnInitWidget, _notice) == 0x000000, "Member 'DLG_Notice_C_OnInitWidget::_notice' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_OnInitWidget, _is_auto_open) == 0x000018, "Member 'DLG_Notice_C_OnInitWidget::_is_auto_open' has a wrong offset!");

// Function DLG_Notice.DLG_Notice_C.InitWidget
// 0x0020 (0x0020 - 0x0000)
struct DLG_Notice_C_InitWidget final
{
public:
	struct FLoginNotice                           _packet;                                           // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          _is_auto_open;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DLG_Notice_C_InitWidget) == 0x000008, "Wrong alignment on DLG_Notice_C_InitWidget");
static_assert(sizeof(DLG_Notice_C_InitWidget) == 0x000020, "Wrong size on DLG_Notice_C_InitWidget");
static_assert(offsetof(DLG_Notice_C_InitWidget, _packet) == 0x000000, "Member 'DLG_Notice_C_InitWidget::_packet' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_InitWidget, _is_auto_open) == 0x000018, "Member 'DLG_Notice_C_InitWidget::_is_auto_open' has a wrong offset!");

// Function DLG_Notice.DLG_Notice_C.ExecuteUbergraph_DLG_Notice
// 0x0050 (0x0050 - 0x0000)
struct DLG_Notice_C_ExecuteUbergraph_DLG_Notice final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D09[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class FString                                 K2Node_ComponentBoundEvent_Message;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_ComponentBoundEvent_Source;                 // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_Line;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D0A[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FLoginNotice                           K2Node_Event__packet;                              // 0x0030(0x0018)(ConstParm)
	bool                                          K2Node_Event__is_auto_open;                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IsChecked;              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice) == 0x000008, "Wrong alignment on DLG_Notice_C_ExecuteUbergraph_DLG_Notice");
static_assert(sizeof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice) == 0x000050, "Wrong size on DLG_Notice_C_ExecuteUbergraph_DLG_Notice");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, EntryPoint) == 0x000000, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::EntryPoint' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, K2Node_ComponentBoundEvent_Message) == 0x000008, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::K2Node_ComponentBoundEvent_Message' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, K2Node_ComponentBoundEvent_Source) == 0x000018, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::K2Node_ComponentBoundEvent_Source' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, K2Node_ComponentBoundEvent_Line) == 0x000028, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::K2Node_ComponentBoundEvent_Line' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, K2Node_Event__packet) == 0x000030, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::K2Node_Event__packet' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, K2Node_Event__is_auto_open) == 0x000048, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::K2Node_Event__is_auto_open' has a wrong offset!");
static_assert(offsetof(DLG_Notice_C_ExecuteUbergraph_DLG_Notice, K2Node_ComponentBoundEvent_IsChecked) == 0x000049, "Member 'DLG_Notice_C_ExecuteUbergraph_DLG_Notice::K2Node_ComponentBoundEvent_IsChecked' has a wrong offset!");

}

