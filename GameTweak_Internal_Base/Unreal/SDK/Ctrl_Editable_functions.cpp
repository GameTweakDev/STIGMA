#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Ctrl_Editable

#include "Basic.hpp"

#include "Ctrl_Editable_classes.hpp"
#include "Ctrl_Editable_parameters.hpp"


namespace SDK
{

// Function Ctrl_Editable.Ctrl_Editable_C.BndEvt__ED_Text_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UCtrl_Editable_C::BndEvt__ED_Text_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "BndEvt__ED_Text_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature");

	Params::Ctrl_Editable_C_BndEvt__ED_Text_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ctrl_Editable.Ctrl_Editable_C.BndEvt__ED_Text_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCtrl_Editable_C::BndEvt__ED_Text_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "BndEvt__ED_Text_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature");

	Params::Ctrl_Editable_C_BndEvt__ED_Text_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ctrl_Editable.Ctrl_Editable_C.ExecuteUbergraph_Ctrl_Editable
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCtrl_Editable_C::ExecuteUbergraph_Ctrl_Editable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "ExecuteUbergraph_Ctrl_Editable");

	Params::Ctrl_Editable_C_ExecuteUbergraph_Ctrl_Editable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ctrl_Editable.Ctrl_Editable_C.OnChangedText__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             _text                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UCtrl_Editable_C::OnChangedText__DelegateSignature(const class FText& _text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "OnChangedText__DelegateSignature");

	Params::Ctrl_Editable_C_OnChangedText__DelegateSignature Parms{};

	Parms._text = std::move(_text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ctrl_Editable.Ctrl_Editable_C.OnCommitText__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             _text                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// ETextCommit                             _commit_method                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCtrl_Editable_C::OnCommitText__DelegateSignature(const class FText& _text, ETextCommit _commit_method)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "OnCommitText__DelegateSignature");

	Params::Ctrl_Editable_C_OnCommitText__DelegateSignature Parms{};

	Parms._text = std::move(_text);
	Parms._commit_method = _commit_method;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ctrl_Editable.Ctrl_Editable_C.OnFocusReceived
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FFocusEvent                      InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UCtrl_Editable_C::OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "OnFocusReceived");

	Params::Ctrl_Editable_C_OnFocusReceived Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ctrl_Editable.Ctrl_Editable_C.OnSynchronizeProperties
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCtrl_Editable_C::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "OnSynchronizeProperties");

	Params::Ctrl_Editable_C_OnSynchronizeProperties Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Ctrl_Editable.Ctrl_Editable_C.SetText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             _text                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UCtrl_Editable_C::SetText(const class FText& _text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "SetText");

	Params::Ctrl_Editable_C_SetText Parms{};

	Parms._text = std::move(_text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ctrl_Editable.Ctrl_Editable_C.GetText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             _text                                                  (Parm, OutParm)

void UCtrl_Editable_C::GetText(class FText* _text) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ctrl_Editable_C", "GetText");

	Params::Ctrl_Editable_C_GetText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (_text != nullptr)
		*_text = std::move(Parms._text);
}

}

