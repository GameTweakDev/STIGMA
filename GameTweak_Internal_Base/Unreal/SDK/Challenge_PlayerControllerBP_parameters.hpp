#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Challenge_PlayerControllerBP

#include "Basic.hpp"

#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.CleanUpBattleWidgetsAfterDelay
// 0x0018 (0x0018 - 0x0000)
struct Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39A4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UHUD_ChallengeMode_C*                   K2Node_DynamicCast_AsHUD_Challenge_Mode;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay) == 0x000008, "Wrong alignment on Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay");
static_assert(sizeof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay) == 0x000018, "Wrong size on Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay, K2Node_DynamicCast_AsHUD_Challenge_Mode) == 0x000008, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay::K2Node_DynamicCast_AsHUD_Challenge_Mode' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsAfterDelay::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.CleanUpBattleWidgetsBeforeDelay
// 0x0018 (0x0018 - 0x0000)
struct Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39A5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class UHUD_ChallengeMode_C*                   K2Node_DynamicCast_AsHUD_Challenge_Mode;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay) == 0x000008, "Wrong alignment on Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay");
static_assert(sizeof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay) == 0x000018, "Wrong size on Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay, K2Node_DynamicCast_AsHUD_Challenge_Mode) == 0x000008, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay::K2Node_DynamicCast_AsHUD_Challenge_Mode' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Challenge_PlayerControllerBP_C_CleanUpBattleWidgetsBeforeDelay::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.ClosePopup
// 0x0002 (0x0002 - 0x0000)
struct Challenge_PlayerControllerBP_C_ClosePopup final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_ClosePopup) == 0x000001, "Wrong alignment on Challenge_PlayerControllerBP_C_ClosePopup");
static_assert(sizeof(Challenge_PlayerControllerBP_C_ClosePopup) == 0x000002, "Wrong size on Challenge_PlayerControllerBP_C_ClosePopup");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ClosePopup, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_ClosePopup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ClosePopup, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'Challenge_PlayerControllerBP_C_ClosePopup::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.Determine Next Phase
// 0x0030 (0x0030 - 0x0000)
struct Challenge_PlayerControllerBP_C_Determine_Next_Phase final
{
public:
	class UChallenge_SubSystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39A6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class AChallenge_GameState*                   K2Node_DynamicCast_AsChallenge_Game_State;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39A7[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_GetCurrentRound_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_Determine_Next_Phase) == 0x000008, "Wrong alignment on Challenge_PlayerControllerBP_C_Determine_Next_Phase");
static_assert(sizeof(Challenge_PlayerControllerBP_C_Determine_Next_Phase) == 0x000030, "Wrong size on Challenge_PlayerControllerBP_C_Determine_Next_Phase");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, K2Node_DynamicCast_AsChallenge_Game_State) == 0x000018, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::K2Node_DynamicCast_AsChallenge_Game_State' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, CallFunc_GetCurrentRound_ReturnValue) == 0x000024, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::CallFunc_GetCurrentRound_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_Determine_Next_Phase, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'Challenge_PlayerControllerBP_C_Determine_Next_Phase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.ExecuteUbergraph_Challenge_PlayerControllerBP
// 0x0048 (0x0048 - 0x0000)
struct Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FChallengeResult                       K2Node_Event__prev;                                // 0x0004(0x0020)(ConstParm, NoDestructor)
	struct FChallengeResult                       K2Node_Event__result;                              // 0x0024(0x0020)(ConstParm, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP) == 0x000004, "Wrong alignment on Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP");
static_assert(sizeof(Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP) == 0x000048, "Wrong size on Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP, EntryPoint) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP, K2Node_Event__prev) == 0x000004, "Member 'Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP::K2Node_Event__prev' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP, K2Node_Event__result) == 0x000024, "Member 'Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP::K2Node_Event__result' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP, K2Node_SwitchEnum_CmpSuccess) == 0x000044, "Member 'Challenge_PlayerControllerBP_C_ExecuteUbergraph_Challenge_PlayerControllerBP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.OnFinishRound
// 0x0040 (0x0040 - 0x0000)
struct Challenge_PlayerControllerBP_C_OnFinishRound final
{
public:
	struct FChallengeResult                       _prev;                                             // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FChallengeResult                       _result;                                           // 0x0020(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_OnFinishRound) == 0x000004, "Wrong alignment on Challenge_PlayerControllerBP_C_OnFinishRound");
static_assert(sizeof(Challenge_PlayerControllerBP_C_OnFinishRound) == 0x000040, "Wrong size on Challenge_PlayerControllerBP_C_OnFinishRound");
static_assert(offsetof(Challenge_PlayerControllerBP_C_OnFinishRound, _prev) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_OnFinishRound::_prev' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_OnFinishRound, _result) == 0x000020, "Member 'Challenge_PlayerControllerBP_C_OnFinishRound::_result' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.ShowChallengeResult
// 0x0040 (0x0040 - 0x0000)
struct Challenge_PlayerControllerBP_C_ShowChallengeResult final
{
public:
	TArray<struct FACK_ChallengeRead>             _top3;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FACK_ChallengeRead>             _rankers;                                          // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UChallenge_RankPopup_C*                 CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPopupBase*                             CallFunc_DoModal_ReturnValue;                      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_ShowChallengeResult) == 0x000008, "Wrong alignment on Challenge_PlayerControllerBP_C_ShowChallengeResult");
static_assert(sizeof(Challenge_PlayerControllerBP_C_ShowChallengeResult) == 0x000040, "Wrong size on Challenge_PlayerControllerBP_C_ShowChallengeResult");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowChallengeResult, _top3) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_ShowChallengeResult::_top3' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowChallengeResult, _rankers) == 0x000010, "Member 'Challenge_PlayerControllerBP_C_ShowChallengeResult::_rankers' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowChallengeResult, CallFunc_Create_ReturnValue) == 0x000020, "Member 'Challenge_PlayerControllerBP_C_ShowChallengeResult::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowChallengeResult, CallFunc_DoModal_ReturnValue) == 0x000028, "Member 'Challenge_PlayerControllerBP_C_ShowChallengeResult::CallFunc_DoModal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowChallengeResult, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'Challenge_PlayerControllerBP_C_ShowChallengeResult::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.ShowMissionResult
// 0x0028 (0x0028 - 0x0000)
struct Challenge_PlayerControllerBP_C_ShowMissionResult final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UChallenge_MissionResultPopup_C*        CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPopupBase*                             CallFunc_DoModal_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_ShowMissionResult) == 0x000008, "Wrong alignment on Challenge_PlayerControllerBP_C_ShowMissionResult");
static_assert(sizeof(Challenge_PlayerControllerBP_C_ShowMissionResult) == 0x000028, "Wrong size on Challenge_PlayerControllerBP_C_ShowMissionResult");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowMissionResult, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_ShowMissionResult::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowMissionResult, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'Challenge_PlayerControllerBP_C_ShowMissionResult::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowMissionResult, CallFunc_Create_ReturnValue) == 0x000018, "Member 'Challenge_PlayerControllerBP_C_ShowMissionResult::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowMissionResult, CallFunc_DoModal_ReturnValue) == 0x000020, "Member 'Challenge_PlayerControllerBP_C_ShowMissionResult::CallFunc_DoModal_ReturnValue' has a wrong offset!");

// Function Challenge_PlayerControllerBP.Challenge_PlayerControllerBP_C.ShowRoundResult
// 0x0028 (0x0028 - 0x0000)
struct Challenge_PlayerControllerBP_C_ShowRoundResult final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPopupBase*                             CallFunc_DoModal_ReturnValue;                      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UChallenge_ResultPopup_C*               CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_PlayerControllerBP_C_ShowRoundResult) == 0x000008, "Wrong alignment on Challenge_PlayerControllerBP_C_ShowRoundResult");
static_assert(sizeof(Challenge_PlayerControllerBP_C_ShowRoundResult) == 0x000028, "Wrong size on Challenge_PlayerControllerBP_C_ShowRoundResult");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowRoundResult, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'Challenge_PlayerControllerBP_C_ShowRoundResult::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowRoundResult, CallFunc_DoModal_ReturnValue) == 0x000010, "Member 'Challenge_PlayerControllerBP_C_ShowRoundResult::CallFunc_DoModal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowRoundResult, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'Challenge_PlayerControllerBP_C_ShowRoundResult::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_PlayerControllerBP_C_ShowRoundResult, CallFunc_Create_ReturnValue) == 0x000020, "Member 'Challenge_PlayerControllerBP_C_ShowRoundResult::CallFunc_Create_ReturnValue' has a wrong offset!");

}

