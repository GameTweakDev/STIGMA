#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: Challenge_RankPopup

#include "Basic.hpp"

#include "Stigma_structs.hpp"


namespace SDK::Params
{

// Function Challenge_RankPopup.Challenge_RankPopup_C.Add Rankers
// 0x0130 (0x0130 - 0x0000)
struct Challenge_RankPopup_C_Add_Rankers final
{
public:
	TArray<struct FACK_ChallengeRead>             Rankers;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          _is_top3;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTop3;                                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMyCurrentRank;                                   // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3882[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ChallengeRead                     Ranker;                                            // 0x0018(0x0078)(Edit, BlueprintVisible)
	class ULVData_RankingItem*                    Entry;                                             // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3883[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	struct FACK_ChallengeRead                     CallFunc_Array_Get_Item;                           // 0x00A8(0x0078)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3884[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULVData_RankingItem*                    CallFunc_SpawnObject_ReturnValue;                  // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_RankPopup_C_Add_Rankers) == 0x000008, "Wrong alignment on Challenge_RankPopup_C_Add_Rankers");
static_assert(sizeof(Challenge_RankPopup_C_Add_Rankers) == 0x000130, "Wrong size on Challenge_RankPopup_C_Add_Rankers");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, Rankers) == 0x000000, "Member 'Challenge_RankPopup_C_Add_Rankers::Rankers' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, _is_top3) == 0x000010, "Member 'Challenge_RankPopup_C_Add_Rankers::_is_top3' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, IsTop3) == 0x000011, "Member 'Challenge_RankPopup_C_Add_Rankers::IsTop3' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, IsMyCurrentRank) == 0x000012, "Member 'Challenge_RankPopup_C_Add_Rankers::IsMyCurrentRank' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, Ranker) == 0x000018, "Member 'Challenge_RankPopup_C_Add_Rankers::Ranker' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, Entry) == 0x000090, "Member 'Challenge_RankPopup_C_Add_Rankers::Entry' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'Challenge_RankPopup_C_Add_Rankers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, Temp_int_Array_Index_Variable) == 0x00009C, "Member 'Challenge_RankPopup_C_Add_Rankers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, Temp_int_Loop_Counter_Variable) == 0x0000A0, "Member 'Challenge_RankPopup_C_Add_Rankers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'Challenge_RankPopup_C_Add_Rankers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'Challenge_RankPopup_C_Add_Rankers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, CallFunc_Add_IntInt_ReturnValue) == 0x000124, "Member 'Challenge_RankPopup_C_Add_Rankers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_Add_Rankers, CallFunc_SpawnObject_ReturnValue) == 0x000128, "Member 'Challenge_RankPopup_C_Add_Rankers::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

// Function Challenge_RankPopup.Challenge_RankPopup_C.ExecuteUbergraph_Challenge_RankPopup
// 0x0048 (0x0048 - 0x0000)
struct Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3885[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller;  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3886[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller_1; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup) == 0x000008, "Wrong alignment on Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup");
static_assert(sizeof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup) == 0x000048, "Wrong size on Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, EntryPoint) == 0x000000, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::EntryPoint' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, K2Node_DynamicCast_AsChallenge_Player_Controller) == 0x000020, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::K2Node_DynamicCast_AsChallenge_Player_Controller' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000030, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, K2Node_DynamicCast_AsChallenge_Player_Controller_1) == 0x000038, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::K2Node_DynamicCast_AsChallenge_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'Challenge_RankPopup_C_ExecuteUbergraph_Challenge_RankPopup::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function Challenge_RankPopup.Challenge_RankPopup_C.UpdateRanks
// 0x0070 (0x0070 - 0x0000)
struct Challenge_RankPopup_C_UpdateRanks final
{
public:
	TArray<struct FACK_ChallengeRead>             Top3;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FACK_ChallengeRead>             Rankers;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsBestTop3Score;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3887[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-69 ])
	int32                                         Ranks_length;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Start_rank;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3888[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UChallenge_SubSystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FACK_ChallengeRead>             CallFunc_CalcRankWithCurrentBattleResult__out_top3; // 0x0040(0x0010)(ReferenceParm)
	TArray<struct FACK_ChallengeRead>             CallFunc_CalcRankWithCurrentBattleResult__out_rankers; // 0x0050(0x0010)(ReferenceParm)
	class AChallenge_PlayerState*                 K2Node_DynamicCast_AsChallenge_Player_State;       // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Challenge_RankPopup_C_UpdateRanks) == 0x000008, "Wrong alignment on Challenge_RankPopup_C_UpdateRanks");
static_assert(sizeof(Challenge_RankPopup_C_UpdateRanks) == 0x000070, "Wrong size on Challenge_RankPopup_C_UpdateRanks");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, Top3) == 0x000000, "Member 'Challenge_RankPopup_C_UpdateRanks::Top3' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, Rankers) == 0x000010, "Member 'Challenge_RankPopup_C_UpdateRanks::Rankers' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, IsBestTop3Score) == 0x000020, "Member 'Challenge_RankPopup_C_UpdateRanks::IsBestTop3Score' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, Ranks_length) == 0x000024, "Member 'Challenge_RankPopup_C_UpdateRanks::Ranks_length' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, Start_rank) == 0x000028, "Member 'Challenge_RankPopup_C_UpdateRanks::Start_rank' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000030, "Member 'Challenge_RankPopup_C_UpdateRanks::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, CallFunc_GetOwningPlayer_ReturnValue) == 0x000038, "Member 'Challenge_RankPopup_C_UpdateRanks::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, CallFunc_CalcRankWithCurrentBattleResult__out_top3) == 0x000040, "Member 'Challenge_RankPopup_C_UpdateRanks::CallFunc_CalcRankWithCurrentBattleResult__out_top3' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, CallFunc_CalcRankWithCurrentBattleResult__out_rankers) == 0x000050, "Member 'Challenge_RankPopup_C_UpdateRanks::CallFunc_CalcRankWithCurrentBattleResult__out_rankers' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, K2Node_DynamicCast_AsChallenge_Player_State) == 0x000060, "Member 'Challenge_RankPopup_C_UpdateRanks::K2Node_DynamicCast_AsChallenge_Player_State' has a wrong offset!");
static_assert(offsetof(Challenge_RankPopup_C_UpdateRanks, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'Challenge_RankPopup_C_UpdateRanks::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

