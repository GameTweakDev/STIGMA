#pragma once

/*
* SDK generated by Dumper-69
*
* https://github.com/Encryqed/Dumper-69
*/

// Package: HUD_ChallengeMode

#include "Basic.hpp"

#include "Stigma_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.ClearPreRoundPopups
// 0x0020 (0x0020 - 0x0000)
struct HUD_ChallengeMode_C_ClearPreRoundPopups final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3976[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-69 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3977[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_ClearPreRoundPopups) == 0x000008, "Wrong alignment on HUD_ChallengeMode_C_ClearPreRoundPopups");
static_assert(sizeof(HUD_ChallengeMode_C_ClearPreRoundPopups) == 0x000020, "Wrong size on HUD_ChallengeMode_C_ClearPreRoundPopups");
static_assert(offsetof(HUD_ChallengeMode_C_ClearPreRoundPopups, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'HUD_ChallengeMode_C_ClearPreRoundPopups::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ClearPreRoundPopups, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'HUD_ChallengeMode_C_ClearPreRoundPopups::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ClearPreRoundPopups, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'HUD_ChallengeMode_C_ClearPreRoundPopups::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ClearPreRoundPopups, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'HUD_ChallengeMode_C_ClearPreRoundPopups::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.DriveChallenge
// 0x0058 (0x0058 - 0x0000)
struct HUD_ChallengeMode_C_DriveChallenge final
{
public:
	class UChallenge_SubSystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UChallenge_SubSystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStartRound_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStartRound_ReturnValue;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AStigmaPlayerController*                CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UChallenge_SubSystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue_2;   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABattlePlayerState*                     K2Node_DynamicCast_AsBattle_Player_State;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReadyToFight_ReturnValue;               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3978[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-69 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABattleGameStateBase*                   K2Node_DynamicCast_AsBattle_Game_State_Base;       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleModePhase                              CallFunc_GetBattlePhase_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_DriveChallenge) == 0x000008, "Wrong alignment on HUD_ChallengeMode_C_DriveChallenge");
static_assert(sizeof(HUD_ChallengeMode_C_DriveChallenge) == 0x000058, "Wrong size on HUD_ChallengeMode_C_DriveChallenge");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000000, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000008, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetStartRound_ReturnValue) == 0x000010, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetStartRound_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_IsStartRound_ReturnValue) == 0x000015, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_IsStartRound_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_IsValid_ReturnValue) == 0x000017, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000020, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetGameInstanceSubsystem_ReturnValue_2) == 0x000028, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetGameInstanceSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, K2Node_DynamicCast_AsBattle_Player_State) == 0x000030, "Member 'HUD_ChallengeMode_C_DriveChallenge::K2Node_DynamicCast_AsBattle_Player_State' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'HUD_ChallengeMode_C_DriveChallenge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_IsReadyToFight_ReturnValue) == 0x000039, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_IsReadyToFight_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_Greater_IntInt_ReturnValue) == 0x00003A, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00003B, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, K2Node_DynamicCast_AsBattle_Game_State_Base) == 0x000048, "Member 'HUD_ChallengeMode_C_DriveChallenge::K2Node_DynamicCast_AsBattle_Game_State_Base' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'HUD_ChallengeMode_C_DriveChallenge::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, CallFunc_GetBattlePhase_ReturnValue) == 0x000051, "Member 'HUD_ChallengeMode_C_DriveChallenge::CallFunc_GetBattlePhase_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_DriveChallenge, K2Node_SwitchEnum_CmpSuccess) == 0x000052, "Member 'HUD_ChallengeMode_C_DriveChallenge::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.ExecuteUbergraph_HUD_ChallengeMode
// 0x0040 (0x0040 - 0x0000)
struct HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode) == 0x000004, "Wrong alignment on HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode");
static_assert(sizeof(HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode) == 0x000040, "Wrong size on HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode");
static_assert(offsetof(HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode, EntryPoint) == 0x000000, "Member 'HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode::EntryPoint' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode, K2Node_Event_MyGeometry) == 0x000004, "Member 'HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'HUD_ChallengeMode_C_ExecuteUbergraph_HUD_ChallengeMode::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.GetText_0
// 0x0038 (0x0038 - 0x0000)
struct HUD_ChallengeMode_C_GetText_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class UChallenge_SubSystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0020(0x0018)()
};
static_assert(alignof(HUD_ChallengeMode_C_GetText_0) == 0x000008, "Wrong alignment on HUD_ChallengeMode_C_GetText_0");
static_assert(sizeof(HUD_ChallengeMode_C_GetText_0) == 0x000038, "Wrong size on HUD_ChallengeMode_C_GetText_0");
static_assert(offsetof(HUD_ChallengeMode_C_GetText_0, ReturnValue) == 0x000000, "Member 'HUD_ChallengeMode_C_GetText_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_GetText_0, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000018, "Member 'HUD_ChallengeMode_C_GetText_0::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_GetText_0, CallFunc_Conv_IntToText_ReturnValue) == 0x000020, "Member 'HUD_ChallengeMode_C_GetText_0::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.OpenChallengeMissionPopup
// 0x0028 (0x0028 - 0x0000)
struct HUD_ChallengeMode_C_OpenChallengeMissionPopup final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3979[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UChallenge_MissionPopup_C*              CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_OpenChallengeMissionPopup) == 0x000008, "Wrong alignment on HUD_ChallengeMode_C_OpenChallengeMissionPopup");
static_assert(sizeof(HUD_ChallengeMode_C_OpenChallengeMissionPopup) == 0x000028, "Wrong size on HUD_ChallengeMode_C_OpenChallengeMissionPopup");
static_assert(offsetof(HUD_ChallengeMode_C_OpenChallengeMissionPopup, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'HUD_ChallengeMode_C_OpenChallengeMissionPopup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_OpenChallengeMissionPopup, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'HUD_ChallengeMode_C_OpenChallengeMissionPopup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_OpenChallengeMissionPopup, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'HUD_ChallengeMode_C_OpenChallengeMissionPopup::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_OpenChallengeMissionPopup, CallFunc_Create_ReturnValue) == 0x000020, "Member 'HUD_ChallengeMode_C_OpenChallengeMissionPopup::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.ResetWidget
// 0x0004 (0x0004 - 0x0000)
struct HUD_ChallengeMode_C_ResetWidget final
{
public:
	int32                                         NewRound;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_ResetWidget) == 0x000004, "Wrong alignment on HUD_ChallengeMode_C_ResetWidget");
static_assert(sizeof(HUD_ChallengeMode_C_ResetWidget) == 0x000004, "Wrong size on HUD_ChallengeMode_C_ResetWidget");
static_assert(offsetof(HUD_ChallengeMode_C_ResetWidget, NewRound) == 0x000000, "Member 'HUD_ChallengeMode_C_ResetWidget::NewRound' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.ShowRewardPopup
// 0x00E8 (0x00E8 - 0x0000)
struct HUD_ChallengeMode_C_ShowRewardPopup final
{
public:
	class FText                                   Temp_text_Variable;                                // 0x0000(0x0018)(ConstParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_GameState*                   K2Node_DynamicCast_AsChallenge_Game_State;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_397A[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-69 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URewardBase_Alert_C*                    CallFunc_Create_ReturnValue;                       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B8(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x00D0(0x0018)(ConstParm)
};
static_assert(alignof(HUD_ChallengeMode_C_ShowRewardPopup) == 0x000008, "Wrong alignment on HUD_ChallengeMode_C_ShowRewardPopup");
static_assert(sizeof(HUD_ChallengeMode_C_ShowRewardPopup) == 0x0000E8, "Wrong size on HUD_ChallengeMode_C_ShowRewardPopup");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, Temp_text_Variable) == 0x000000, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, K2Node_DynamicCast_AsChallenge_Game_State) == 0x000030, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::K2Node_DynamicCast_AsChallenge_Game_State' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, CallFunc_GetPlayerController_ReturnValue) == 0x000040, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000048, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, CallFunc_Create_ReturnValue) == 0x000050, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, K2Node_MakeArray_Array) == 0x0000A8, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, CallFunc_Format_ReturnValue) == 0x0000B8, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_ShowRewardPopup, Temp_text_Variable_1) == 0x0000D0, "Member 'HUD_ChallengeMode_C_ShowRewardPopup::Temp_text_Variable_1' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.StartRound
// 0x0018 (0x0018 - 0x0000)
struct HUD_ChallengeMode_C_StartRound final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AChallenge_PlayerController*            K2Node_DynamicCast_AsChallenge_Player_Controller;  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_StartRound) == 0x000008, "Wrong alignment on HUD_ChallengeMode_C_StartRound");
static_assert(sizeof(HUD_ChallengeMode_C_StartRound) == 0x000018, "Wrong size on HUD_ChallengeMode_C_StartRound");
static_assert(offsetof(HUD_ChallengeMode_C_StartRound, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'HUD_ChallengeMode_C_StartRound::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_StartRound, K2Node_DynamicCast_AsChallenge_Player_Controller) == 0x000008, "Member 'HUD_ChallengeMode_C_StartRound::K2Node_DynamicCast_AsChallenge_Player_Controller' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_StartRound, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'HUD_ChallengeMode_C_StartRound::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function HUD_ChallengeMode.HUD_ChallengeMode_C.Tick
// 0x003C (0x003C - 0x0000)
struct HUD_ChallengeMode_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(HUD_ChallengeMode_C_Tick) == 0x000004, "Wrong alignment on HUD_ChallengeMode_C_Tick");
static_assert(sizeof(HUD_ChallengeMode_C_Tick) == 0x00003C, "Wrong size on HUD_ChallengeMode_C_Tick");
static_assert(offsetof(HUD_ChallengeMode_C_Tick, MyGeometry) == 0x000000, "Member 'HUD_ChallengeMode_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(HUD_ChallengeMode_C_Tick, InDeltaTime) == 0x000038, "Member 'HUD_ChallengeMode_C_Tick::InDeltaTime' has a wrong offset!");

}

